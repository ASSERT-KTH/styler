{
    "project_name": "codefollower-H2-Research",
    "error_id": "462",
    "information": {
        "errors": [
            {
                "line": "273",
                "column": "11",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        if (columns == null) {\n//<<<<<<< HEAD\n//        \t//\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n//        \t//\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n//        \t//UPDATE PUBLIC.MERGETEST SET  WHERE ID=?\n//            if (list.size() > 0 && list.get(0).length == 0) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "273",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "275",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/462/Merge.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/462/Merge.java\nindex f310ada2b46..bec9760828d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/462/Merge.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/462/Merge.java\n@@ -3,9 +3,11 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.dml;\n \n import java.util.ArrayList;\n+\n import org.h2.api.ErrorCode;\n import org.h2.api.Trigger;\n import org.h2.command.Command;\n@@ -36,140 +38,140 @@ import org.h2.value.Value;\n //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n public class Merge extends CommandWithValues implements DataChangeStatement {\n \n-    private boolean isReplace;\n+  private boolean isReplace;\n \n-    private Table table;\n-    private TableFilter tableFilter;\n-    private Column[] columns;\n-    private Column[] keys;\n-    private Query query;\n-    private Update update;\n+  private Table table;\n+  private TableFilter tableFilter;\n+  private Column[] columns;\n+  private Column[] keys;\n+  private Query query;\n+  private Update update;\n \n-    private ResultTarget deltaChangeCollector;\n+  private ResultTarget deltaChangeCollector;\n \n-    private ResultOption deltaChangeCollectionMode;\n+  private ResultOption deltaChangeCollectionMode;\n \n-    public Merge(Session session, boolean isReplace) {\n-        super(session);\n-        this.isReplace = isReplace;\n-    }\n+  public Merge(Session session, boolean isReplace) {\n+    super(session);\n+    this.isReplace = isReplace;\n+  }\n \n-    @Override\n-    public void setCommand(Command command) {\n-        super.setCommand(command);\n-        if (query != null) {\n-            query.setCommand(command);\n-        }\n+  @Override\n+  public void setCommand(Command command) {\n+    super.setCommand(command);\n+    if (query != null) {\n+      query.setCommand(command);\n     }\n+  }\n \n-    @Override\n-    public Table getTable() {\n-        return table;\n-    }\n+  @Override\n+  public Table getTable() {\n+    return table;\n+  }\n \n-    public void setTable(Table table) {\n-        this.table = table;\n-    }\n+  public void setTable(Table table) {\n+    this.table = table;\n+  }\n \n-    public void setColumns(Column[] columns) {\n-        this.columns = columns;\n-    }\n+  public void setColumns(Column[] columns) {\n+    this.columns = columns;\n+  }\n \n-    public void setKeys(Column[] keys) {\n-        this.keys = keys;\n-    }\n+  public void setKeys(Column[] keys) {\n+    this.keys = keys;\n+  }\n \n-    public void setQuery(Query query) {\n-        this.query = query;\n-    }\n+  public void setQuery(Query query) {\n+    this.query = query;\n+  }\n \n-    @Override\n-    public void setDeltaChangeCollector(ResultTarget deltaChangeCollector, ResultOption deltaChangeCollectionMode) {\n-        this.deltaChangeCollector = deltaChangeCollector;\n-        this.deltaChangeCollectionMode = deltaChangeCollectionMode;\n-        update.setDeltaChangeCollector(deltaChangeCollector, deltaChangeCollectionMode);\n-    }\n+  @Override\n+  public void setDeltaChangeCollector(ResultTarget deltaChangeCollector, ResultOption deltaChangeCollectionMode) {\n+    this.deltaChangeCollector = deltaChangeCollector;\n+    this.deltaChangeCollectionMode = deltaChangeCollectionMode;\n+    update.setDeltaChangeCollector(deltaChangeCollector, deltaChangeCollectionMode);\n+  }\n \n-    @Override\n-    public int update() {\n-        int count = 0;\n-        session.getUser().checkRight(table, Right.INSERT);\n-        session.getUser().checkRight(table, Right.UPDATE);\n-        setCurrentRowNumber(0);\n-        if (!valuesExpressionList.isEmpty()) {\n-            // process values in list\n-            for (int x = 0, size = valuesExpressionList.size(); x < size; x++) {\n-                setCurrentRowNumber(x + 1);\n-                Expression[] expr = valuesExpressionList.get(x);\n-                Row newRow = table.getTemplateRow();\n-                for (int i = 0, len = columns.length; i < len; i++) {\n-                    Column c = columns[i];\n-                    int index = c.getColumnId();\n-                    Expression e = expr[i];\n-                    if (e != null) {\n-                        // e can be null (DEFAULT)\n-                        try {\n-                            newRow.setValue(index, e.getValue(session));\n-                        } catch (DbException ex) {\n-                            throw setRow(ex, count, getSimpleSQL(expr));\n-                        }\n-                    }\n-                }\n-                count += merge(newRow);\n-            }\n-        } else {\n-            // process select data for list\n-            query.setNeverLazy(true);\n-            ResultInterface rows = query.query(0);\n-            table.fire(session, Trigger.UPDATE | Trigger.INSERT, true);\n-            table.lock(session, true, false);\n-            while (rows.next()) {\n-                Value[] r = rows.currentRow();\n-                Row newRow = table.getTemplateRow();\n-                setCurrentRowNumber(count);\n-                for (int j = 0; j < columns.length; j++) {\n-                    newRow.setValue(columns[j].getColumnId(), r[j]);\n-                }\n-                count += merge(newRow);\n+  @Override\n+  public int update() {\n+    int count = 0;\n+    session.getUser().checkRight(table, Right.INSERT);\n+    session.getUser().checkRight(table, Right.UPDATE);\n+    setCurrentRowNumber(0);\n+    if (!valuesExpressionList.isEmpty()) {\n+      // process values in list\n+      for (int x = 0, size = valuesExpressionList.size(); x < size; x++) {\n+        setCurrentRowNumber(x + 1);\n+        Expression[] expr = valuesExpressionList.get(x);\n+        Row newRow = table.getTemplateRow();\n+        for (int i = 0, len = columns.length; i < len; i++) {\n+          Column c = columns[i];\n+          int index = c.getColumnId();\n+          Expression e = expr[i];\n+          if (e != null) {\n+            // e can be null (DEFAULT)\n+            try {\n+              newRow.setValue(index, e.getValue(session));\n+            } catch (DbException ex) {\n+              throw setRow(ex, count, getSimpleSQL(expr));\n             }\n-            rows.close();\n-            table.fire(session, Trigger.UPDATE | Trigger.INSERT, false);\n+          }\n         }\n-        return count;\n+        count += merge(newRow);\n+      }\n+    } else {\n+      // process select data for list\n+      query.setNeverLazy(true);\n+      ResultInterface rows = query.query(0);\n+      table.fire(session, Trigger.UPDATE | Trigger.INSERT, true);\n+      table.lock(session, true, false);\n+      while (rows.next()) {\n+        Value[] r = rows.currentRow();\n+        Row newRow = table.getTemplateRow();\n+        setCurrentRowNumber(count);\n+        for (int j = 0; j < columns.length; j++) {\n+          newRow.setValue(columns[j].getColumnId(), r[j]);\n+        }\n+        count += merge(newRow);\n+      }\n+      rows.close();\n+      table.fire(session, Trigger.UPDATE | Trigger.INSERT, false);\n     }\n+    return count;\n+  }\n \n-    /**\n-     * Updates an existing row or inserts a new one.\n-     *\n-     * @param row row to replace\n-     * @return 1 if row was inserted, 1 if row was updated by a MERGE statement,\n-     *         and 2 if row was updated by a REPLACE statement\n-     */\n-    private int merge(Row row) {\n-        int count;\n-        if (update == null) {\n-            // if there is no valid primary key,\n-            // the REPLACE statement degenerates to an INSERT\n-            count = 0;\n-        } else {\n-            ArrayList<Parameter> k = update.getParameters();\n-            for (int i = 0; i < columns.length; i++) {\n-                Column col = columns[i];\n-                Value v = row.getValue(col.getColumnId());\n-                Parameter p = k.get(i);\n-                p.setValue(v);\n-            }\n-            for (int i = 0; i < keys.length; i++) {\n-                Column col = keys[i];\n-                Value v = row.getValue(col.getColumnId());\n-                if (v == null) {\n-                    throw DbException.get(ErrorCode.COLUMN_CONTAINS_NULL_VALUES_1, col.getSQL(false));\n-                }\n-                Parameter p = k.get(columns.length + i);\n-                p.setValue(v);\n-            }\n-            count = update.update();\n+  /**\n+   * Updates an existing row or inserts a new one.\n+   *\n+   * @param row row to replace\n+   * @return 1 if row was inserted, 1 if row was updated by a MERGE statement,\n+   * and 2 if row was updated by a REPLACE statement\n+   */\n+  private int merge(Row row) {\n+    int count;\n+    if (update == null) {\n+      // if there is no valid primary key,\n+      // the REPLACE statement degenerates to an INSERT\n+      count = 0;\n+    } else {\n+      ArrayList<Parameter> k = update.getParameters();\n+      for (int i = 0; i < columns.length; i++) {\n+        Column col = columns[i];\n+        Value v = row.getValue(col.getColumnId());\n+        Parameter p = k.get(i);\n+        p.setValue(v);\n+      }\n+      for (int i = 0; i < keys.length; i++) {\n+        Column col = keys[i];\n+        Value v = row.getValue(col.getColumnId());\n+        if (v == null) {\n+          throw DbException.get(ErrorCode.COLUMN_CONTAINS_NULL_VALUES_1, col.getSQL(false));\n         }\n+        Parameter p = k.get(columns.length + i);\n+        p.setValue(v);\n+      }\n+      count = update.update();\n+    }\n //<<<<<<< HEAD\n ////<<<<<<< HEAD\n ////        //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n@@ -180,95 +182,95 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n //\n //=======\n //>>>>>>> 6fde1368b355273493c128809eef768e74e2cd1a\n-        // if update fails try an insert\n-        if (count == 0) {\n-            try {\n-                table.validateConvertUpdateSequence(session, row);\n-                if (deltaChangeCollectionMode == ResultOption.NEW) {\n-                    deltaChangeCollector.addRow(row.getValueList().clone());\n-                }\n-                boolean done = table.fireBeforeRow(session, null, row);\n-                if (!done) {\n-                    table.lock(session, true, false);\n-                    table.addRow(session, row);\n-                    if (deltaChangeCollectionMode == ResultOption.FINAL) {\n-                        deltaChangeCollector.addRow(row.getValueList());\n-                    }\n-                    session.log(table, UndoLogRecord.INSERT, row);\n-                    table.fireAfterRow(session, null, row, false);\n-                }\n-                return 1;\n-            } catch (DbException e) {\n-                if (e.getErrorCode() == ErrorCode.DUPLICATE_KEY_1) {\n-                    // possibly a concurrent merge or insert\n-                    Index index = (Index) e.getSource();\n-                    if (index != null) {\n-                        // verify the index columns match the key\n-                        Column[] indexColumns;\n-                        if (index instanceof MVPrimaryIndex) {\n-                            MVPrimaryIndex foundMV = (MVPrimaryIndex) index;\n-                            indexColumns = new Column[] {\n-                                    foundMV.getIndexColumns()[foundMV.getMainIndexColumn()].column };\n-                        } else {\n-                            indexColumns = index.getColumns();\n-                        }\n-                        boolean indexMatchesKeys;\n-                        if (indexColumns.length <= keys.length) {\n-                            indexMatchesKeys = true;\n-                            for (int i = 0; i < indexColumns.length; i++) {\n-                                if (indexColumns[i] != keys[i]) {\n-                                    indexMatchesKeys = false;\n-                                    break;\n-                                }\n-                            }\n-                        } else {\n-                            indexMatchesKeys = false;\n-                        }\n-                        if (indexMatchesKeys) {\n-                            throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1, table.getName());\n-                        }\n-                    }\n+    // if update fails try an insert\n+    if (count == 0) {\n+      try {\n+        table.validateConvertUpdateSequence(session, row);\n+        if (deltaChangeCollectionMode == ResultOption.NEW) {\n+          deltaChangeCollector.addRow(row.getValueList().clone());\n+        }\n+        boolean done = table.fireBeforeRow(session, null, row);\n+        if (!done) {\n+          table.lock(session, true, false);\n+          table.addRow(session, row);\n+          if (deltaChangeCollectionMode == ResultOption.FINAL) {\n+            deltaChangeCollector.addRow(row.getValueList());\n+          }\n+          session.log(table, UndoLogRecord.INSERT, row);\n+          table.fireAfterRow(session, null, row, false);\n+        }\n+        return 1;\n+      } catch (DbException e) {\n+        if (e.getErrorCode() == ErrorCode.DUPLICATE_KEY_1) {\n+          // possibly a concurrent merge or insert\n+          Index index = (Index) e.getSource();\n+          if (index != null) {\n+            // verify the index columns match the key\n+            Column[] indexColumns;\n+            if (index instanceof MVPrimaryIndex) {\n+              MVPrimaryIndex foundMV = (MVPrimaryIndex) index;\n+              indexColumns = new Column[] {\n+                  foundMV.getIndexColumns()[foundMV.getMainIndexColumn()].column};\n+            } else {\n+              indexColumns = index.getColumns();\n+            }\n+            boolean indexMatchesKeys;\n+            if (indexColumns.length <= keys.length) {\n+              indexMatchesKeys = true;\n+              for (int i = 0; i < indexColumns.length; i++) {\n+                if (indexColumns[i] != keys[i]) {\n+                  indexMatchesKeys = false;\n+                  break;\n                 }\n-                throw e;\n+              }\n+            } else {\n+              indexMatchesKeys = false;\n+            }\n+            if (indexMatchesKeys) {\n+              throw DbException.get(ErrorCode.CONCURRENT_UPDATE_1, table.getName());\n             }\n-        } else if (count == 1) {\n-            return isReplace ? 2 : 1;\n+          }\n         }\n-        throw DbException.get(ErrorCode.DUPLICATE_KEY_1, table.getSQL(false));\n+        throw e;\n+      }\n+    } else if (count == 1) {\n+      return isReplace ? 2 : 1;\n     }\n+    throw DbException.get(ErrorCode.DUPLICATE_KEY_1, table.getSQL(false));\n+  }\n \n-    @Override\n-    public String getPlanSQL(boolean alwaysQuote) {\n-        StringBuilder builder = new StringBuilder(isReplace ? \"REPLACE INTO \" : \"MERGE INTO \");\n-        table.getSQL(builder, alwaysQuote).append('(');\n-        Column.writeColumns(builder, columns, alwaysQuote);\n-        builder.append(')');\n-        if (!isReplace && keys != null) {\n-            builder.append(\" KEY(\");\n-            Column.writeColumns(builder, keys, alwaysQuote);\n-            builder.append(')');\n-        }\n-        builder.append('\\n');\n-        if (!valuesExpressionList.isEmpty()) {\n-            builder.append(\"VALUES \");\n-            int row = 0;\n-            for (Expression[] expr : valuesExpressionList) {\n-                if (row++ > 0) {\n-                    builder.append(\", \");\n-                }\n-                builder.append('(');\n-                Expression.writeExpressions(builder, expr, alwaysQuote);\n-                builder.append(')');\n-            }\n-        } else {\n-            builder.append(query.getPlanSQL(alwaysQuote));\n+  @Override\n+  public String getPlanSQL(boolean alwaysQuote) {\n+    StringBuilder builder = new StringBuilder(isReplace ? \"REPLACE INTO \" : \"MERGE INTO \");\n+    table.getSQL(builder, alwaysQuote).append('(');\n+    Column.writeColumns(builder, columns, alwaysQuote);\n+    builder.append(')');\n+    if (!isReplace && keys != null) {\n+      builder.append(\" KEY(\");\n+      Column.writeColumns(builder, keys, alwaysQuote);\n+      builder.append(')');\n+    }\n+    builder.append('\\n');\n+    if (!valuesExpressionList.isEmpty()) {\n+      builder.append(\"VALUES \");\n+      int row = 0;\n+      for (Expression[] expr : valuesExpressionList) {\n+        if (row++ > 0) {\n+          builder.append(\", \");\n         }\n-        return builder.toString();\n+        builder.append('(');\n+        Expression.writeExpressions(builder, expr, alwaysQuote);\n+        builder.append(')');\n+      }\n+    } else {\n+      builder.append(query.getPlanSQL(alwaysQuote));\n     }\n+    return builder.toString();\n+  }\n \n-    @Override\n-    public void prepare() {\n-        if (columns == null) {\n+  @Override\n+  public void prepare() {\n+    if (columns == null) {\n //<<<<<<< HEAD\n //        \t//\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n //        \t//\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n@@ -279,43 +281,43 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n //            } else {\n //                columns = table.getColumns(); //\u5982: MERGE INTO MergeTest(SELECT * FROM tmpSelectTest)\n //=======\n-            if (!valuesExpressionList.isEmpty() && valuesExpressionList.get(0).length == 0) {\n-                // special case where table is used as a sequence\n-                columns = new Column[0];\n-            } else {\n-                columns = table.getColumns();\n-            }\n+      if (!valuesExpressionList.isEmpty() && valuesExpressionList.get(0).length == 0) {\n+        // special case where table is used as a sequence\n+        columns = new Column[0];\n+      } else {\n+        columns = table.getColumns();\n+      }\n+    }\n+    if (!valuesExpressionList.isEmpty()) {\n+      for (Expression[] expr : valuesExpressionList) {\n+        if (expr.length != columns.length) {\n+          throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n         }\n-        if (!valuesExpressionList.isEmpty()) {\n-            for (Expression[] expr : valuesExpressionList) {\n-                if (expr.length != columns.length) {\n-                    throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-                }\n-                for (int i = 0; i < expr.length; i++) {\n-                    Expression e = expr[i];\n-                    if (e != null) {\n-                        expr[i] = e.optimize(session);\n-                    }\n-                }\n-            }\n-        } else {\n-            query.prepare();\n-            if (query.getColumnCount() != columns.length) {\n-                throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-            }\n+        for (int i = 0; i < expr.length; i++) {\n+          Expression e = expr[i];\n+          if (e != null) {\n+            expr[i] = e.optimize(session);\n+          }\n         }\n+      }\n+    } else {\n+      query.prepare();\n+      if (query.getColumnCount() != columns.length) {\n+        throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n+      }\n+    }\n //<<<<<<< HEAD\n //        if (keys == null) { //\u5982\u679c\u6ca1\u6709\u6307\u5b9akey\uff0c\u8868\u91cc\u5fc5\u987b\u6709\u4e3b\u952e\u5b57\u6bb5\n //            Index idx = table.getPrimaryKey();\n //            if (idx == null) { //org.h2.table.Table.getPrimaryKey()\u91cc\u5df2\u5904\u7406null\u7684\u60c5\u51b5\u4e86\uff0c\u9664\u975e\u6709\u5b57\u7c7b\u8986\u76d6\u5b83\n //=======\n-        if (keys == null) {\n-            Index idx = table.getPrimaryKey();\n-            if (idx == null) {\n-                throw DbException.get(ErrorCode.CONSTRAINT_NOT_FOUND_1, \"PRIMARY KEY\");\n-            }\n-            keys = idx.getColumns();\n-        }\n+    if (keys == null) {\n+      Index idx = table.getPrimaryKey();\n+      if (idx == null) {\n+        throw DbException.get(ErrorCode.CONSTRAINT_NOT_FOUND_1, \"PRIMARY KEY\");\n+      }\n+      keys = idx.getColumns();\n+    }\n //<<<<<<< HEAD\n //        //\u4f8b\u5982: UPDATE PUBLIC.MERGETEST SET ID=?, NAME=? WHERE ID=?\n //        //columns\u5c31\u662f\u8981\u66f4\u65b0\u7684\u5b57\u6bb5\uff0ckeys\u5f53\u6210where\u6761\u4ef6\u4e14\u7528and\u62fc\u88c5\n@@ -331,61 +333,61 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n //            buff.appendExceptFirst(\" AND \");\n //            buff.append(c.getSQL()).append(\"=?\");\n //=======\n-        if (isReplace) {\n-            // if there is no valid primary key,\n-            // the REPLACE statement degenerates to an INSERT\n-            for (Column key : keys) {\n-                boolean found = false;\n-                for (Column column : columns) {\n-                    if (column.getColumnId() == key.getColumnId()) {\n-                        found = true;\n-                        break;\n-                    }\n-                }\n-                if (!found) {\n-                    return;\n-                }\n-            }\n+    if (isReplace) {\n+      // if there is no valid primary key,\n+      // the REPLACE statement degenerates to an INSERT\n+      for (Column key : keys) {\n+        boolean found = false;\n+        for (Column column : columns) {\n+          if (column.getColumnId() == key.getColumnId()) {\n+            found = true;\n+            break;\n+          }\n+        }\n+        if (!found) {\n+          return;\n         }\n-        StringBuilder builder = new StringBuilder(\"UPDATE \");\n-        table.getSQL(builder, true).append(\" SET \");\n-        Column.writeColumns(builder, columns, \", \", \"=?\", true).append(\" WHERE \");\n-        Column.writeColumns(builder, keys, \" AND \", \"=?\", true);\n-        update = (Update) session.prepare(builder.toString());\n+      }\n     }\n+    StringBuilder builder = new StringBuilder(\"UPDATE \");\n+    table.getSQL(builder, true).append(\" SET \");\n+    Column.writeColumns(builder, columns, \", \", \"=?\", true).append(\" WHERE \");\n+    Column.writeColumns(builder, keys, \" AND \", \"=?\", true);\n+    update = (Update) session.prepare(builder.toString());\n+  }\n \n-    @Override\n-    public boolean isTransactional() {\n-        return true;\n-    }\n+  @Override\n+  public boolean isTransactional() {\n+    return true;\n+  }\n \n-    @Override\n-    public ResultInterface queryMeta() {\n-        return null;\n-    }\n+  @Override\n+  public ResultInterface queryMeta() {\n+    return null;\n+  }\n \n-    @Override\n-    public int getType() {\n-        return isReplace ? CommandInterface.REPLACE : CommandInterface.MERGE;\n-    }\n+  @Override\n+  public int getType() {\n+    return isReplace ? CommandInterface.REPLACE : CommandInterface.MERGE;\n+  }\n \n-    @Override\n-    public String getStatementName() {\n-        return isReplace ? \"REPLACE\" : \"MERGE\";\n-    }\n+  @Override\n+  public String getStatementName() {\n+    return isReplace ? \"REPLACE\" : \"MERGE\";\n+  }\n \n-    @Override\n-    public boolean isCacheable() {\n-        return true;\n-    }\n+  @Override\n+  public boolean isCacheable() {\n+    return true;\n+  }\n \n-    public TableFilter getTableFilter() {\n-        return tableFilter;\n-    }\n+  public TableFilter getTableFilter() {\n+    return tableFilter;\n+  }\n \n-    public void setTableFilter(TableFilter tableFilter) {\n-        this.tableFilter = tableFilter;\n-        setTable(tableFilter.getTable());\n-    }\n+  public void setTableFilter(TableFilter tableFilter) {\n+    this.tableFilter = tableFilter;\n+    setTable(tableFilter.getTable());\n+  }\n \n }\n",
            "diff_size": 337
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "265",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/462/Merge.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/462/Merge.java\nindex f310ada2b46..b3f00a7249c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/462/Merge.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/462/Merge.java\n@@ -171,16 +171,8 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n             count = update.update();\n         }\n //<<<<<<< HEAD\n-////<<<<<<< HEAD\n-////        //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n-////=======\n-//\n-//        // try an update\n-//        int count = update.update();\n-//\n-//=======\n-//>>>>>>> 6fde1368b355273493c128809eef768e74e2cd1a\n-        // if update fails try an insert\n+////\n+// if update fails try an insert\n         if (count == 0) {\n             try {\n                 table.validateConvertUpdateSequence(session, row);\n@@ -388,4 +380,4 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n         setTable(tableFilter.getTable());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/462/Merge.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/462/Merge.java\nindex f310ada2b46..e15ace18504 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/462/Merge.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/462/Merge.java\n@@ -34,19 +34,18 @@ import org.h2.value.Value;\n  * REPLACE\n  */\n //\u5148\u66f4\u65b0\uff0c\u5982\u679c\u6ca1\u6709\u8bb0\u5f55\u88ab\u66f4\u65b0\uff0c\u8bf4\u660e\u662f\u4e00\u6761\u65b0\u7684\u8bb0\u5f55\uff0c\u63a5\u7740\u518d\u63d2\u5165\n+\n+\n public class Merge extends CommandWithValues implements DataChangeStatement {\n \n     private boolean isReplace;\n-\n     private Table table;\n     private TableFilter tableFilter;\n     private Column[] columns;\n     private Column[] keys;\n     private Query query;\n     private Update update;\n-\n     private ResultTarget deltaChangeCollector;\n-\n     private ResultOption deltaChangeCollectionMode;\n \n     public Merge(Session session, boolean isReplace) {\n@@ -67,18 +66,22 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n         return table;\n     }\n \n+\n     public void setTable(Table table) {\n         this.table = table;\n     }\n \n+\n     public void setColumns(Column[] columns) {\n         this.columns = columns;\n     }\n \n+\n     public void setKeys(Column[] keys) {\n         this.keys = keys;\n     }\n \n+\n     public void setQuery(Query query) {\n         this.query = query;\n     }\n@@ -145,6 +148,7 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n      * @return 1 if row was inserted, 1 if row was updated by a MERGE statement,\n      *         and 2 if row was updated by a REPLACE statement\n      */\n+\n     private int merge(Row row) {\n         int count;\n         if (update == null) {\n@@ -207,8 +211,7 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n                         Column[] indexColumns;\n                         if (index instanceof MVPrimaryIndex) {\n                             MVPrimaryIndex foundMV = (MVPrimaryIndex) index;\n-                            indexColumns = new Column[] {\n-                                    foundMV.getIndexColumns()[foundMV.getMainIndexColumn()].column };\n+                            indexColumns = new Column[] { foundMV.getIndexColumns()[foundMV.getMainIndexColumn()].column };\n                         } else {\n                             indexColumns = index.getColumns();\n                         }\n@@ -270,9 +273,9 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n     public void prepare() {\n         if (columns == null) {\n //<<<<<<< HEAD\n-//        \t//\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n-//        \t//\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n-//        \t//UPDATE PUBLIC.MERGETEST SET  WHERE ID=?\n+//          //\u4f8b\u5982: MERGE INTO MergeTest VALUES()\n+//          //\u8fd9\u79cd\u60c5\u51b5\u6ca1\u7528\u7684\uff0c\u5e94\u8be5\u629b\u5f02\u5e38\u624d\u5bf9\uff0c\u5426\u5219\u4e0b\u9762\u751f\u6210update\u8bed\u53e5\u65f6\u4f1a\u51fa\u9519\uff0c\u50cf\u8fd9\u6837:\n+//          //UPDATE PUBLIC.MERGETEST SET  WHERE ID=?\n //            if (list.size() > 0 && list.get(0).length == 0) {\n //                // special case where table is used as a sequence\n //                columns = new Column[0];\n@@ -379,13 +382,15 @@ public class Merge extends CommandWithValues implements DataChangeStatement {\n         return true;\n     }\n \n+\n     public TableFilter getTableFilter() {\n         return tableFilter;\n     }\n \n+\n     public void setTableFilter(TableFilter tableFilter) {\n         this.tableFilter = tableFilter;\n         setTable(tableFilter.getTable());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "273",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "273",
                    "column": "11",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}