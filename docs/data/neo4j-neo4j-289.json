{
    "project_name": "neo4j-neo4j",
    "error_id": "289",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/289/InlineNodeLabels.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/289/InlineNodeLabels.java\nindex 950767c38ba..f4b13ae8a58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/289/InlineNodeLabels.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/289/InlineNodeLabels.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.util.Arrays;\n@@ -42,96 +43,96 @@ public class InlineNodeLabels implements NodeLabels\n     private static final int LABEL_BITS = 36;\n     private final NodeRecord node;\n \n-    public InlineNodeLabels( NodeRecord node )\n+    public InlineNodeLabels(NodeRecord node)\n     {\n         this.node = node;\n     }\n \n     @Override\n-    public long[] get( NodeStore nodeStore, PageCursorTracer cursorTracer )\n+    public long[] get(NodeStore nodeStore, PageCursorTracer cursorTracer)\n     {\n-        return get( node );\n+        return get(node);\n     }\n \n-    public static long[] get( NodeRecord node )\n+    public static long[] get(NodeRecord node)\n     {\n-        return parseInlined( node.getLabelField() );\n+        return parseInlined(node.getLabelField());\n     }\n \n     @Override\n     public long[] getIfLoaded()\n     {\n-        return parseInlined( node.getLabelField() );\n+        return parseInlined(node.getLabelField());\n     }\n \n     @Override\n-    public Collection<DynamicRecord> put( long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n-            MemoryTracker memoryTracker )\n+    public Collection<DynamicRecord> put(long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n+                                         MemoryTracker memoryTracker)\n     {\n-        Arrays.sort( labelIds );\n-        return putSorted( node, labelIds, nodeStore, allocator, cursorTracer, memoryTracker );\n+        Arrays.sort(labelIds);\n+        return putSorted(node, labelIds, nodeStore, allocator, cursorTracer, memoryTracker);\n     }\n \n-    public static Collection<DynamicRecord> putSorted( NodeRecord node, long[] labelIds,\n-            NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public static Collection<DynamicRecord> putSorted(NodeRecord node, long[] labelIds,\n+                                                      NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n+                                                      MemoryTracker memoryTracker)\n     {\n-        if ( tryInlineInNodeRecord( node, labelIds, node.getDynamicLabelRecords() ) )\n+        if (tryInlineInNodeRecord(node, labelIds, node.getDynamicLabelRecords()))\n         {\n             return Collections.emptyList();\n         }\n \n-        return DynamicNodeLabels.putSorted( node, labelIds, nodeStore, allocator, cursorTracer, memoryTracker );\n+        return DynamicNodeLabels.putSorted(node, labelIds, nodeStore, allocator, cursorTracer, memoryTracker);\n     }\n \n     @Override\n-    public Collection<DynamicRecord> add( long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n-            MemoryTracker memoryTracker )\n+    public Collection<DynamicRecord> add(long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n+                                         MemoryTracker memoryTracker)\n     {\n-        long[] augmentedLabelIds = labelCount( node.getLabelField() ) == 0 ? new long[]{labelId} :\n-                                   concatAndSort( parseInlined( node.getLabelField() ), labelId );\n+        long[] augmentedLabelIds = labelCount(node.getLabelField()) == 0 ? new long[] {labelId} :\n+          concatAndSort(parseInlined(node.getLabelField()), labelId);\n \n-        return putSorted( node, augmentedLabelIds, nodeStore, allocator, cursorTracer, memoryTracker );\n+        return putSorted(node, augmentedLabelIds, nodeStore, allocator, cursorTracer, memoryTracker);\n     }\n \n     @Override\n-    public Collection<DynamicRecord> remove( long labelId, NodeStore nodeStore, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public Collection<DynamicRecord> remove(long labelId, NodeStore nodeStore, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        long[] newLabelIds = filter( parseInlined( node.getLabelField() ), labelId );\n-        boolean inlined = tryInlineInNodeRecord( node, newLabelIds, node.getDynamicLabelRecords() );\n+        long[] newLabelIds = filter(parseInlined(node.getLabelField()), labelId);\n+        boolean inlined = tryInlineInNodeRecord(node, newLabelIds, node.getDynamicLabelRecords());\n         assert inlined;\n         return Collections.emptyList();\n     }\n \n-    static boolean tryInlineInNodeRecord( NodeRecord node, long[] ids, Collection<DynamicRecord> changedDynamicRecords )\n+    static boolean tryInlineInNodeRecord(NodeRecord node, long[] ids, Collection<DynamicRecord> changedDynamicRecords)\n     {\n         // We reserve the high header bit for future extensions of the format of the in-lined label bits\n         // i.e. the 0-valued high header bit can allow for 0-7 in-lined labels in the bit-packed format.\n-        if ( ids.length > 7 )\n+        if (ids.length > 7)\n         {\n             return false;\n         }\n \n         byte bitsPerLabel = (byte) (ids.length > 0 ? (LABEL_BITS / ids.length) : LABEL_BITS);\n-        Bits bits = bits( 5 );\n-        if ( !inlineValues( ids, bitsPerLabel, bits ) )\n+        Bits bits = bits(5);\n+        if (!inlineValues(ids, bitsPerLabel, bits))\n         {\n             return false;\n         }\n-        node.setLabelField( combineLabelCountAndLabelStorage( (byte) ids.length, bits.getLongs()[0] ),\n-                            changedDynamicRecords );\n+        node.setLabelField(combineLabelCountAndLabelStorage((byte) ids.length, bits.getLongs()[0]),\n+          changedDynamicRecords);\n         return true;\n     }\n \n-    private static boolean inlineValues( long[] values, int maxBitsPerLabel, Bits target )\n+    private static boolean inlineValues(long[] values, int maxBitsPerLabel, Bits target)\n     {\n         long limit = 1L << maxBitsPerLabel;\n-        for ( long value : values )\n+        for (long value : values)\n         {\n-            if ( highestOneBit( value ) < limit )\n+            if (highestOneBit(value) < limit)\n             {\n-                target.put( value, maxBitsPerLabel );\n-            }\n-            else\n+                target.put(value, maxBitsPerLabel);\n+            } else\n             {\n                 return false;\n             }\n@@ -139,19 +140,19 @@ public class InlineNodeLabels implements NodeLabels\n         return true;\n     }\n \n-    public static long[] parseInlined( long labelField )\n+    public static long[] parseInlined(long labelField)\n     {\n-        byte numberOfLabels = labelCount( labelField );\n-        if ( numberOfLabels == 0 )\n+        byte numberOfLabels = labelCount(labelField);\n+        if (numberOfLabels == 0)\n         {\n             return EMPTY_LONG_ARRAY;\n         }\n \n-        long existingLabelsField = parseLabelsBody( labelField );\n+        long existingLabelsField = parseLabelsBody(labelField);\n         byte bitsPerLabel = (byte) (LABEL_BITS / numberOfLabels);\n         long mask = (1L << bitsPerLabel) - 1;\n         long[] result = new long[numberOfLabels];\n-        for ( int i = 0; i < numberOfLabels; i++ )\n+        for (int i = 0; i < numberOfLabels; i++)\n         {\n             result[i] = existingLabelsField & mask;\n             existingLabelsField >>>= bitsPerLabel;\n@@ -159,21 +160,21 @@ public class InlineNodeLabels implements NodeLabels\n         return result;\n     }\n \n-    public static boolean hasLabel( NodeRecord node, int label )\n+    public static boolean hasLabel(NodeRecord node, int label)\n     {\n         long labelField = node.getLabelField();\n-        byte numberOfLabels = labelCount( labelField );\n-        if ( numberOfLabels == 0 )\n+        byte numberOfLabels = labelCount(labelField);\n+        if (numberOfLabels == 0)\n         {\n             return false;\n         }\n \n-        long existingLabelsField = parseLabelsBody( labelField );\n+        long existingLabelsField = parseLabelsBody(labelField);\n         byte bitsPerLabel = (byte) (LABEL_BITS / numberOfLabels);\n         long mask = (1L << bitsPerLabel) - 1;\n-        for ( int i = 0; i < numberOfLabels; i++ )\n+        for (int i = 0; i < numberOfLabels; i++)\n         {\n-            if ( (existingLabelsField & mask) == label )\n+            if ((existingLabelsField & mask) == label)\n             {\n                 return true;\n             }\n@@ -182,12 +183,12 @@ public class InlineNodeLabels implements NodeLabels\n         return false;\n     }\n \n-    private static long combineLabelCountAndLabelStorage( byte labelCount, long labelBits )\n+    private static long combineLabelCountAndLabelStorage(byte labelCount, long labelBits)\n     {\n-        return ((long)labelCount << 36) | labelBits;\n+        return ((long) labelCount << 36) | labelBits;\n     }\n \n-    private static byte labelCount( long labelField )\n+    private static byte labelCount(long labelField)\n     {\n         return (byte) ((labelField & 0xF000000000L) >>> 36);\n     }\n@@ -201,6 +202,6 @@ public class InlineNodeLabels implements NodeLabels\n     @Override\n     public String toString()\n     {\n-        return format( \"Inline(0x%x:%s)\", node.getLabelField(), Arrays.toString( getIfLoaded(/*it is*/ ) ) );\n+        return format(\"Inline(0x%x:%s)\", node.getLabelField(), Arrays.toString(getIfLoaded(/*it is*/)));\n     }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}