{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3003",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3003/TransactionStatusResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3003/TransactionStatusResult.java\nindex 56d47de2df8..58ba4b38c3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3003/TransactionStatusResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3003/TransactionStatusResult.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.enterprise.builtinprocs;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -36,90 +37,89 @@ import org.neo4j.kernel.impl.query.clientconnection.ClientConnectionInfo;\n import static java.lang.String.format;\n import static org.neo4j.kernel.enterprise.builtinprocs.QueryId.ofInternalId;\n \n-@SuppressWarnings( \"WeakerAccess\" )\n+@SuppressWarnings(\"WeakerAccess\")\n public class TransactionStatusResult\n {\n-    private static final String RUNNINS_STATE = \"Running\";\n-    private static final String TERMINATED_STATE = \"Terminated with reason: %s\";\n-\n-    public final String transactionId;\n-    public final String username;\n-    public final Map<String,Object> metaData;\n-    public final String startTime;\n-    public final String protocol;\n-    public final String clientAddress;\n-    public final String requestUri;\n+  private static final String RUNNINS_STATE = \"Running\";\n+  private static final String TERMINATED_STATE = \"Terminated with reason: %s\";\n \n-    public final String currentQueryId;\n-    public final String currentQuery;\n+  public final String transactionId;\n+  public final String username;\n+  public final Map<String, Object> metaData;\n+  public final String startTime;\n+  public final String protocol;\n+  public final String clientAddress;\n+  public final String requestUri;\n \n-    public final long activeLockCount;\n-    public final String status;\n-    public Map<String,Object> resourceInformation;\n+  public final String currentQueryId;\n+  public final String currentQuery;\n \n-    public final long elapsedTimeMillis;\n-    public final Long cpuTimeMillis;\n-    public final long waitTimeMillis;\n-    public final Long idleTimeMillis;\n-    public final Long allocatedBytes;\n-    public final Long allocatedDirectBytes;\n-    public final long pageHits;\n-    public final long pageFaults;\n+  public final long activeLockCount;\n+  public final String status;\n+  public Map<String, Object> resourceInformation;\n \n-    public TransactionStatusResult( KernelTransactionHandle transaction,\n-            TransactionDependenciesResolver transactionDependenciesResolver,\n-            Map<KernelTransactionHandle,List<QuerySnapshot>> handleSnapshotsMap, ZoneId zoneId ) throws InvalidArgumentsException\n-    {\n-        this.transactionId = transaction.getUserTransactionName();\n-        this.username = transaction.subject().username();\n-        this.startTime = ProceduresTimeFormatHelper.formatTime( transaction.startTime(), zoneId );\n-        Optional<Status> terminationReason = transaction.terminationReason();\n-        this.activeLockCount = transaction.activeLocks().count();\n-        List<QuerySnapshot> querySnapshots = handleSnapshotsMap.get( transaction );\n-        TransactionExecutionStatistic statistic = transaction.transactionStatistic();\n-        elapsedTimeMillis = statistic.getElapsedTimeMillis();\n-        cpuTimeMillis = statistic.getCpuTimeMillis();\n-        allocatedBytes = statistic.getHeapAllocatedBytes();\n-        allocatedDirectBytes = statistic.getDirectAllocatedBytes();\n-        waitTimeMillis = statistic.getWaitTimeMillis();\n-        idleTimeMillis = statistic.getIdleTimeMillis();\n-        pageHits = statistic.getPageHits();\n-        pageFaults = statistic.getPageFaults();\n+  public final long elapsedTimeMillis;\n+  public final Long cpuTimeMillis;\n+  public final long waitTimeMillis;\n+  public final Long idleTimeMillis;\n+  public final Long allocatedBytes;\n+  public final Long allocatedDirectBytes;\n+  public final long pageHits;\n+  public final long pageFaults;\n \n-        if ( !querySnapshots.isEmpty() )\n-        {\n-            QuerySnapshot snapshot = querySnapshots.get( 0 );\n-            ClientConnectionInfo clientConnectionInfo = snapshot.clientConnection();\n-            this.currentQueryId = ofInternalId( snapshot.internalQueryId() ).toString();\n-            this.currentQuery = snapshot.queryText();\n-            this.protocol = clientConnectionInfo.protocol();\n-            this.clientAddress = clientConnectionInfo.clientAddress();\n-            this.requestUri = clientConnectionInfo.requestURI();\n-        }\n-        else\n-        {\n-            this.currentQueryId = StringUtils.EMPTY;\n-            this.currentQuery = StringUtils.EMPTY;\n-            this.protocol = StringUtils.EMPTY;\n-            this.clientAddress = StringUtils.EMPTY;\n-            this.requestUri = StringUtils.EMPTY;\n-        }\n-        this.resourceInformation = transactionDependenciesResolver.describeBlockingLocks( transaction );\n-        this.status = getStatus( transaction, terminationReason, transactionDependenciesResolver );\n-        this.metaData = transaction.getMetaData();\n-    }\n+  public TransactionStatusResult(KernelTransactionHandle transaction,\n+                                 TransactionDependenciesResolver transactionDependenciesResolver,\n+                                 Map<KernelTransactionHandle, List<QuerySnapshot>> handleSnapshotsMap, ZoneId zoneId) throws InvalidArgumentsException\n+  {\n+    this.transactionId = transaction.getUserTransactionName();\n+    this.username = transaction.subject().username();\n+    this.startTime = ProceduresTimeFormatHelper.formatTime(transaction.startTime(), zoneId);\n+    Optional<Status> terminationReason = transaction.terminationReason();\n+    this.activeLockCount = transaction.activeLocks().count();\n+    List<QuerySnapshot> querySnapshots = handleSnapshotsMap.get(transaction);\n+    TransactionExecutionStatistic statistic = transaction.transactionStatistic();\n+    elapsedTimeMillis = statistic.getElapsedTimeMillis();\n+    cpuTimeMillis = statistic.getCpuTimeMillis();\n+    allocatedBytes = statistic.getHeapAllocatedBytes();\n+    allocatedDirectBytes = statistic.getDirectAllocatedBytes();\n+    waitTimeMillis = statistic.getWaitTimeMillis();\n+    idleTimeMillis = statistic.getIdleTimeMillis();\n+    pageHits = statistic.getPageHits();\n+    pageFaults = statistic.getPageFaults();\n \n-    private String getStatus( KernelTransactionHandle handle, Optional<Status> terminationReason,\n-            TransactionDependenciesResolver transactionDependenciesResolver )\n+    if (!querySnapshots.isEmpty())\n     {\n-        return terminationReason.map( reason -> format( TERMINATED_STATE, reason.code() ) )\n-                .orElseGet( () -> getExecutingStatus( handle, transactionDependenciesResolver ) );\n-    }\n-\n-    private String getExecutingStatus( KernelTransactionHandle handle,\n-            TransactionDependenciesResolver transactionDependenciesResolver )\n+      QuerySnapshot snapshot = querySnapshots.get(0);\n+      ClientConnectionInfo clientConnectionInfo = snapshot.clientConnection();\n+      this.currentQueryId = ofInternalId(snapshot.internalQueryId()).toString();\n+      this.currentQuery = snapshot.queryText();\n+      this.protocol = clientConnectionInfo.protocol();\n+      this.clientAddress = clientConnectionInfo.clientAddress();\n+      this.requestUri = clientConnectionInfo.requestURI();\n+    } else\n     {\n-        return transactionDependenciesResolver.isBlocked( handle ) ? \"Blocked by: \" +\n-                transactionDependenciesResolver.describeBlockingTransactions( handle ) : RUNNINS_STATE;\n+      this.currentQueryId = StringUtils.EMPTY;\n+      this.currentQuery = StringUtils.EMPTY;\n+      this.protocol = StringUtils.EMPTY;\n+      this.clientAddress = StringUtils.EMPTY;\n+      this.requestUri = StringUtils.EMPTY;\n     }\n+    this.resourceInformation = transactionDependenciesResolver.describeBlockingLocks(transaction);\n+    this.status = getStatus(transaction, terminationReason, transactionDependenciesResolver);\n+    this.metaData = transaction.getMetaData();\n+  }\n+\n+  private String getStatus(KernelTransactionHandle handle, Optional<Status> terminationReason,\n+                           TransactionDependenciesResolver transactionDependenciesResolver)\n+  {\n+    return terminationReason.map(reason -> format(TERMINATED_STATE, reason.code()))\n+        .orElseGet(() -> getExecutingStatus(handle, transactionDependenciesResolver));\n+  }\n+\n+  private String getExecutingStatus(KernelTransactionHandle handle,\n+                                    TransactionDependenciesResolver transactionDependenciesResolver)\n+  {\n+    return transactionDependenciesResolver.isBlocked(handle) ? \"Blocked by: \" +\n+        transactionDependenciesResolver.describeBlockingTransactions(handle) : RUNNINS_STATE;\n+  }\n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3003/TransactionStatusResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3003/TransactionStatusResult.java\nindex 56d47de2df8..39345d9c01c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3003/TransactionStatusResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3003/TransactionStatusResult.java\n@@ -43,33 +43,48 @@ public class TransactionStatusResult\n     private static final String TERMINATED_STATE = \"Terminated with reason: %s\";\n \n     public final String transactionId;\n-    public final String username;\n-    public final Map<String,Object> metaData;\n-    public final String startTime;\n-    public final String protocol;\n-    public final String clientAddress;\n-    public final String requestUri;\n+\n+public final String username;\n+\n+public final Map<String,Object> metaData;\n+\n+public final String startTime;\n+\n+public final String protocol;\n+\n+public final String clientAddress;\n+\n+public final String requestUri;\n \n     public final String currentQueryId;\n-    public final String currentQuery;\n+\n+public final String currentQuery;\n \n     public final long activeLockCount;\n-    public final String status;\n-    public Map<String,Object> resourceInformation;\n+\n+public final String status;\n+\n+public Map<String,Object> resourceInformation;\n \n     public final long elapsedTimeMillis;\n-    public final Long cpuTimeMillis;\n-    public final long waitTimeMillis;\n-    public final Long idleTimeMillis;\n-    public final Long allocatedBytes;\n-    public final Long allocatedDirectBytes;\n-    public final long pageHits;\n-    public final long pageFaults;\n+\n+public final Long cpuTimeMillis;\n+\n+public final long waitTimeMillis;\n+\n+public final Long idleTimeMillis;\n+\n+public final Long allocatedBytes;\n+\n+public final Long allocatedDirectBytes;\n+\n+public final long pageHits;\n+\n+public final long pageFaults;\n \n     public TransactionStatusResult( KernelTransactionHandle transaction,\n-            TransactionDependenciesResolver transactionDependenciesResolver,\n-            Map<KernelTransactionHandle,List<QuerySnapshot>> handleSnapshotsMap, ZoneId zoneId ) throws InvalidArgumentsException\n-    {\n+            TransactionDependenciesResolver transactionDependenciesResolver, Map<KernelTransactionHandle,List<QuerySnapshot>> handleSnapshotsMap, ZoneId zoneId ) throws InvalidArgumentsException\n+{\n         this.transactionId = transaction.getUserTransactionName();\n         this.username = transaction.subject().username();\n         this.startTime = ProceduresTimeFormatHelper.formatTime( transaction.startTime(), zoneId );\n@@ -85,8 +100,7 @@ public class TransactionStatusResult\n         idleTimeMillis = statistic.getIdleTimeMillis();\n         pageHits = statistic.getPageHits();\n         pageFaults = statistic.getPageFaults();\n-\n-        if ( !querySnapshots.isEmpty() )\n+if ( !querySnapshots.isEmpty() )\n         {\n             QuerySnapshot snapshot = querySnapshots.get( 0 );\n             ClientConnectionInfo clientConnectionInfo = snapshot.clientConnection();\n@@ -112,14 +126,12 @@ public class TransactionStatusResult\n     private String getStatus( KernelTransactionHandle handle, Optional<Status> terminationReason,\n             TransactionDependenciesResolver transactionDependenciesResolver )\n     {\n-        return terminationReason.map( reason -> format( TERMINATED_STATE, reason.code() ) )\n-                .orElseGet( () -> getExecutingStatus( handle, transactionDependenciesResolver ) );\n+        return terminationReason.map( reason -> format( TERMINATED_STATE, reason.code() ) ).orElseGet( () -> getExecutingStatus( handle, transactionDependenciesResolver ) );\n     }\n \n     private String getExecutingStatus( KernelTransactionHandle handle,\n             TransactionDependenciesResolver transactionDependenciesResolver )\n     {\n-        return transactionDependenciesResolver.isBlocked( handle ) ? \"Blocked by: \" +\n-                transactionDependenciesResolver.describeBlockingTransactions( handle ) : RUNNINS_STATE;\n+        return transactionDependenciesResolver.isBlocked( handle ) ? \"Blocked by: \" + transactionDependenciesResolver.describeBlockingTransactions( handle ) : RUNNINS_STATE;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}