{
    "project_name": "twilio-twilio-java",
    "error_id": "401",
    "information": {
        "errors": [
            {
                "line": "186",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 11, expected level should be 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                throw new ApiException(\"Server Error, no content\");\n            }\n           throw new ApiException(restException);\n        }\n\n        return Page.fromJson(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler/401/LogReader.java\nindex b54b142a5ae..bc06634ca55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler/401/LogReader.java\n@@ -183,7 +183,7 @@ public class LogReader extends Reader<Log> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/intellij/401/LogReader.java\nindex b54b142a5ae..c7374cc1619 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/intellij/401/LogReader.java\n@@ -1,8 +1,8 @@\n /**\n  * This code was generated by\n  * \\ / _    _  _|   _  _\n- *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n- *       /       /\n+ * | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n+ * /       /\n  */\n \n package com.twilio.rest.serverless.v1.service.environment;\n@@ -183,7 +183,7 @@ public class LogReader extends Reader<Log> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/codebuff/401/LogReader.java\nindex b54b142a5ae..2c8b3f90f8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/codebuff/401/LogReader.java\n@@ -19,13 +19,13 @@ import com.twilio.http.Request;\n import com.twilio.http.Response;\n import com.twilio.http.TwilioRestClient;\n import com.twilio.rest.Domains;\n-\n import java.time.ZonedDateTime;\n \n /**\n  * PLEASE NOTE that this class contains beta products that are subject to\n  * change. Use them with caution.\n  */\n+\n public class LogReader extends Reader<Log> {\n     private final String pathServiceSid;\n     private final String pathEnvironmentSid;\n@@ -40,6 +40,8 @@ public class LogReader extends Reader<Log> {\n      * @param pathEnvironmentSid The SID of the environment with the Log resources\n      *                           to read\n      */\n+\n+\n     public LogReader(final String pathServiceSid,\n                      final String pathEnvironmentSid) {\n         this.pathServiceSid = pathServiceSid;\n@@ -53,6 +55,8 @@ public class LogReader extends Reader<Log> {\n      *                    resources to read\n      * @return this\n      */\n+\n+\n     public LogReader setFunctionSid(final String functionSid) {\n         this.functionSid = functionSid;\n         return this;\n@@ -66,6 +70,8 @@ public class LogReader extends Reader<Log> {\n      *                  been created.\n      * @return this\n      */\n+\n+\n     public LogReader setStartDate(final ZonedDateTime startDate) {\n         this.startDate = startDate;\n         return this;\n@@ -79,6 +85,8 @@ public class LogReader extends Reader<Log> {\n      *                been created.\n      * @return this\n      */\n+\n+\n     public LogReader setEndDate(final ZonedDateTime endDate) {\n         this.endDate = endDate;\n         return this;\n@@ -90,6 +98,7 @@ public class LogReader extends Reader<Log> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Log ResourceSet\n      */\n+\n     @Override\n     public ResourceSet<Log> read(final TwilioRestClient client) {\n         return new ResourceSet<>(this, client, firstPage(client));\n@@ -101,13 +110,14 @@ public class LogReader extends Reader<Log> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Log ResourceSet\n      */\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n     public Page<Log> firstPage(final TwilioRestClient client) {\n         Request request = new Request(\n-            HttpMethod.GET,\n-            Domains.SERVERLESS.toString(),\n-            \"/v1/Services/\" + this.pathServiceSid + \"/Environments/\" + this.pathEnvironmentSid + \"/Logs\"\n+                              HttpMethod.GET,\n+                              Domains.SERVERLESS.toString(),\n+                              \"/v1/Services/\" + this.pathServiceSid + \"/Environments/\" + this.pathEnvironmentSid + \"/Logs\"\n         );\n \n         addQueryParams(request);\n@@ -121,14 +131,12 @@ public class LogReader extends Reader<Log> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Log ResourceSet\n      */\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n-    public Page<Log> getPage(final String targetUrl, final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            targetUrl\n-        );\n-\n+    public Page<Log> getPage(final String targetUrl,\n+                             final TwilioRestClient client) {\n+        Request request = new Request(HttpMethod.GET, targetUrl);\n         return pageForRequest(client, request);\n     }\n \n@@ -139,13 +147,11 @@ public class LogReader extends Reader<Log> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Next Page\n      */\n+\n     @Override\n     public Page<Log> nextPage(final Page<Log> page,\n                               final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getNextPageUrl(Domains.SERVERLESS.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getNextPageUrl(Domains.SERVERLESS.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -156,13 +162,11 @@ public class LogReader extends Reader<Log> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Previous Page\n      */\n+\n     @Override\n     public Page<Log> previousPage(final Page<Log> page,\n                                   final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            page.getPreviousPageUrl(Domains.SERVERLESS.toString())\n-        );\n+        Request request = new Request(HttpMethod.GET, page.getPreviousPageUrl(Domains.SERVERLESS.toString()));\n         return pageForRequest(client, request);\n     }\n \n@@ -173,9 +177,11 @@ public class LogReader extends Reader<Log> {\n      * @param request Request to generate a page for\n      * @return Page for the Request\n      */\n-    private Page<Log> pageForRequest(final TwilioRestClient client, final Request request) {\n-        Response response = client.request(request);\n \n+\n+    private Page<Log> pageForRequest(final TwilioRestClient client,\n+                                     final Request request) {\n+        Response response = client.request(request);\n         if (response == null) {\n             throw new ApiConnectionException(\"Log read failed: Unable to connect to server\");\n         } else if (!TwilioRestClient.SUCCESS.test(response.getStatusCode())) {\n@@ -183,15 +189,11 @@ public class LogReader extends Reader<Log> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n-        return Page.fromJson(\n-            \"logs\",\n-            response.getContent(),\n-            Log.class,\n-            client.getObjectMapper()\n-        );\n+        return Page.fromJson(\"logs\", response.getContent(), Log.class, client.getObjectMapper());\n     }\n \n     /**\n@@ -199,17 +201,21 @@ public class LogReader extends Reader<Log> {\n      *\n      * @param request Request to add query string arguments to\n      */\n+\n+\n     private void addQueryParams(final Request request) {\n         if (functionSid != null) {\n             request.addQueryParam(\"FunctionSid\", functionSid);\n         }\n \n         if (startDate != null) {\n-            request.addQueryParam(\"StartDate\", startDate.toInstant().toString());\n+            request.addQueryParam(\"StartDate\", startDate.toInstant()\n+                .toString());\n         }\n \n         if (endDate != null) {\n-            request.addQueryParam(\"EndDate\", endDate.toInstant().toString());\n+            request.addQueryParam(\"EndDate\", endDate.toInstant()\n+                .toString());\n         }\n \n         if (getPageSize() != null) {\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_random/401/LogReader.java\nindex b54b142a5ae..bc06634ca55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_random/401/LogReader.java\n@@ -183,7 +183,7 @@ public class LogReader extends Reader<Log> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_three_grams/401/LogReader.java\nindex b54b142a5ae..a521d1e47b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/401/LogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_three_grams/401/LogReader.java\n@@ -183,7 +183,8 @@ public class LogReader extends Reader<Log> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}