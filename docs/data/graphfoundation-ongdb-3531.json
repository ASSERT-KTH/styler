{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3531",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "100",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3531/Mkrel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3531/Mkrel.java\nindex 2f8e44f91fd..88ccae6615a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3531/Mkrel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3531/Mkrel.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.rmi.RemoteException;\n@@ -39,101 +40,99 @@ import org.neo4j.shell.ShellException;\n  * Mimics the POSIX application \"mkdir\", but neo4j has relationships instead of\n  * directories (if you look at Neo4j in a certain perspective).\n  */\n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Mkrel extends TransactionProvidingApp\n {\n-    public static final String KEY_LAST_CREATED_NODE = \"LAST_CREATED_NODE\";\n-    public static final String KEY_LAST_CREATED_RELATIONSHIP = \"LAST_CREATED_RELATIONSHIP\";\n+  public static final String KEY_LAST_CREATED_NODE = \"LAST_CREATED_NODE\";\n+  public static final String KEY_LAST_CREATED_RELATIONSHIP = \"LAST_CREATED_RELATIONSHIP\";\n+\n+  /**\n+   * Constructs a new application which can create relationships and nodes\n+   * in Neo4j.\n+   */\n+  public Mkrel()\n+  {\n+    this.addOptionDefinition(\"t\", new OptionDefinition(OptionValueType.MUST,\n+        \"The relationship type\"));\n+    this.addOptionDefinition(\"d\", new OptionDefinition(OptionValueType.MUST,\n+        \"The direction: \" + this.directionAlternatives() + \".\"));\n+    this.addOptionDefinition(\"c\", new OptionDefinition(OptionValueType.NONE,\n+        \"Supplied if there should be created a new node\"));\n+    this.addOptionDefinition(\"v\", new OptionDefinition(OptionValueType.NONE,\n+        \"Verbose mode: display created nodes/relationships\"));\n+    this.addOptionDefinition(\"np\", new OptionDefinition(OptionValueType.MUST,\n+        \"Properties (a json map) to set for the new node (if one is created)\"));\n+    addOptionDefinition(\"l\", new OptionDefinition(OptionValueType.MUST,\n+        \"Labels to attach to the created node (if one is created), either a single label or a JSON array\"));\n+    this.addOptionDefinition(\"rp\", new OptionDefinition(OptionValueType.MUST,\n+        \"Properties (a json map) to set for the new relationship\"));\n+    this.addOptionDefinition(\"cd\", new OptionDefinition(OptionValueType.NONE,\n+        \"Go to the created node, like doing 'cd'\"));\n+  }\n+\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Creates a relationship to a new or existing node, f.ex:\\n\" +\n+        \"mkrel -ct KNOWS (will create a relationship to a new node)\\n\" +\n+        \"mkrel -t KNOWS 123 (will create a relationship to node with id 123)\";\n+  }\n+\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session, Output out)\n+      throws ShellException, RemoteException\n+  {\n+    assertCurrentIsNode(session);\n \n-    /**\n-     * Constructs a new application which can create relationships and nodes\n-     * in Neo4j.\n-     */\n-    public Mkrel()\n+    boolean createNode = parser.options().containsKey(\"c\");\n+    boolean suppliedNode = !parser.arguments().isEmpty();\n+    Node node = null;\n+    if (createNode)\n     {\n-        this.addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST,\n-            \"The relationship type\" ) );\n-        this.addOptionDefinition( \"d\", new OptionDefinition( OptionValueType.MUST,\n-            \"The direction: \" + this.directionAlternatives() + \".\" ) );\n-        this.addOptionDefinition( \"c\", new OptionDefinition( OptionValueType.NONE,\n-            \"Supplied if there should be created a new node\" ) );\n-        this.addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE,\n-            \"Verbose mode: display created nodes/relationships\" ) );\n-        this.addOptionDefinition( \"np\", new OptionDefinition( OptionValueType.MUST,\n-            \"Properties (a json map) to set for the new node (if one is created)\" ) );\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST,\n-            \"Labels to attach to the created node (if one is created), either a single label or a JSON array\" ) );\n-        this.addOptionDefinition( \"rp\", new OptionDefinition( OptionValueType.MUST,\n-            \"Properties (a json map) to set for the new relationship\" ) );\n-        this.addOptionDefinition( \"cd\", new OptionDefinition( OptionValueType.NONE,\n-            \"Go to the created node, like doing 'cd'\" ) );\n+      node = getServer().getDb().createNode(parseLabels(parser));\n+      session.set(KEY_LAST_CREATED_NODE, \"\" + node.getId());\n+      setProperties(node, parser.options().get(\"np\"));\n+    } else if (suppliedNode)\n+    {\n+      node = getNodeById(Long.parseLong(parser.arguments().get(0)));\n+    } else\n+    {\n+      throw new ShellException(\"Must either create node (-c)\"\n+          + \" or supply node id as the first argument\");\n     }\n \n-    @Override\n-    public String getDescription()\n+    if (parser.options().get(\"t\") == null)\n     {\n-        return \"Creates a relationship to a new or existing node, f.ex:\\n\" +\n-                \"mkrel -ct KNOWS (will create a relationship to a new node)\\n\" +\n-                \"mkrel -t KNOWS 123 (will create a relationship to node with id 123)\";\n+      throw new ShellException(\"Must supply relationship type \"\n+          + \"(-t <relationship-type-name>)\");\n     }\n-\n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-        throws ShellException, RemoteException\n+    RelationshipType type = getRelationshipType(parser.options().get(\"t\"));\n+    Direction direction = getDirection(parser.options().get(\"d\"));\n+    NodeOrRelationship current = getCurrent(session);\n+    Node currentNode = current.asNode();\n+    Node startNode = direction == Direction.OUTGOING ? currentNode : node;\n+    Node endNode = direction == Direction.OUTGOING ? node : currentNode;\n+    Relationship relationship =\n+        startNode.createRelationshipTo(endNode, type);\n+    setProperties(relationship, parser.options().get(\"rp\"));\n+    session.set(KEY_LAST_CREATED_RELATIONSHIP, relationship.getId());\n+    boolean verbose = parser.options().containsKey(\"v\");\n+    if (createNode && verbose)\n     {\n-        assertCurrentIsNode( session );\n-\n-        boolean createNode = parser.options().containsKey( \"c\" );\n-        boolean suppliedNode = !parser.arguments().isEmpty();\n-        Node node = null;\n-        if ( createNode )\n-        {\n-            node = getServer().getDb().createNode( parseLabels( parser ) );\n-            session.set( KEY_LAST_CREATED_NODE, \"\" + node.getId() );\n-            setProperties( node, parser.options().get( \"np\" ) );\n-        }\n-        else if ( suppliedNode )\n-        {\n-            node = getNodeById( Long.parseLong( parser.arguments().get( 0 ) ) );\n-        }\n-        else\n-        {\n-            throw new ShellException( \"Must either create node (-c)\"\n-                + \" or supply node id as the first argument\" );\n-        }\n-\n-        if ( parser.options().get( \"t\" ) == null )\n-        {\n-            throw new ShellException( \"Must supply relationship type \"\n-                + \"(-t <relationship-type-name>)\" );\n-        }\n-        RelationshipType type = getRelationshipType( parser.options().get( \"t\" ) );\n-        Direction direction = getDirection( parser.options().get( \"d\" ) );\n-        NodeOrRelationship current = getCurrent( session );\n-        Node currentNode = current.asNode();\n-        Node startNode = direction == Direction.OUTGOING ? currentNode : node;\n-        Node endNode = direction == Direction.OUTGOING ? node : currentNode;\n-        Relationship relationship =\n-            startNode.createRelationshipTo( endNode, type );\n-        setProperties( relationship, parser.options().get( \"rp\" ) );\n-        session.set( KEY_LAST_CREATED_RELATIONSHIP, relationship.getId() );\n-        boolean verbose = parser.options().containsKey( \"v\" );\n-        if ( createNode && verbose )\n-        {\n-            out.println( \"Node \" + getDisplayName(\n-                getServer(), session, node, false ) + \" created\" );\n-        }\n-        if ( verbose )\n-        {\n-            out.println( \"Relationship \" + getDisplayName(\n-                getServer(), session, relationship, true, false ) +\n-                \" created\" );\n-        }\n+      out.println(\"Node \" + getDisplayName(\n+          getServer(), session, node, false) + \" created\");\n+    }\n+    if (verbose)\n+    {\n+      out.println(\"Relationship \" + getDisplayName(\n+          getServer(), session, relationship, true, false) +\n+          \" created\");\n+    }\n \n-        if ( parser.options().containsKey( \"cd\" ) )\n-        {\n-            cdTo( session, node );\n-        }\n-        return Continuation.INPUT_COMPLETE;\n+    if (parser.options().containsKey(\"cd\"))\n+    {\n+      cdTo(session, node);\n     }\n+    return Continuation.INPUT_COMPLETE;\n+  }\n }\n",
            "diff_size": 135
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3531/Mkrel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3531/Mkrel.java\nindex 2f8e44f91fd..9f03faf3a40 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3531/Mkrel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3531/Mkrel.java\n@@ -43,7 +43,8 @@ import org.neo4j.shell.ShellException;\n public class Mkrel extends TransactionProvidingApp\n {\n     public static final String KEY_LAST_CREATED_NODE = \"LAST_CREATED_NODE\";\n-    public static final String KEY_LAST_CREATED_RELATIONSHIP = \"LAST_CREATED_RELATIONSHIP\";\n+\n+public static final String KEY_LAST_CREATED_RELATIONSHIP = \"LAST_CREATED_RELATIONSHIP\";\n \n     /**\n      * Constructs a new application which can create relationships and nodes\n@@ -51,36 +52,25 @@ public class Mkrel extends TransactionProvidingApp\n      */\n     public Mkrel()\n     {\n-        this.addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST,\n-            \"The relationship type\" ) );\n-        this.addOptionDefinition( \"d\", new OptionDefinition( OptionValueType.MUST,\n-            \"The direction: \" + this.directionAlternatives() + \".\" ) );\n-        this.addOptionDefinition( \"c\", new OptionDefinition( OptionValueType.NONE,\n-            \"Supplied if there should be created a new node\" ) );\n-        this.addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE,\n-            \"Verbose mode: display created nodes/relationships\" ) );\n-        this.addOptionDefinition( \"np\", new OptionDefinition( OptionValueType.MUST,\n-            \"Properties (a json map) to set for the new node (if one is created)\" ) );\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST,\n-            \"Labels to attach to the created node (if one is created), either a single label or a JSON array\" ) );\n-        this.addOptionDefinition( \"rp\", new OptionDefinition( OptionValueType.MUST,\n-            \"Properties (a json map) to set for the new relationship\" ) );\n-        this.addOptionDefinition( \"cd\", new OptionDefinition( OptionValueType.NONE,\n-            \"Go to the created node, like doing 'cd'\" ) );\n+        this.addOptionDefinition( \"t\", new OptionDefinition( OptionValueType.MUST, \"The relationship type\" ) );\n+this.addOptionDefinition( \"d\", new OptionDefinition( OptionValueType.MUST, \"The direction: \" + this.directionAlternatives() + \".\" ) );\n+this.addOptionDefinition( \"c\", new OptionDefinition( OptionValueType.NONE, \"Supplied if there should be created a new node\" ) );\n+this.addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE, \"Verbose mode: display created nodes/relationships\" ) );\n+this.addOptionDefinition( \"np\", new OptionDefinition( OptionValueType.MUST, \"Properties (a json map) to set for the new node (if one is created)\" ) );\n+        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.MUST, \"Labels to attach to the created node (if one is created), either a single label or a JSON array\" ) );\n+this.addOptionDefinition( \"rp\", new OptionDefinition( OptionValueType.MUST, \"Properties (a json map) to set for the new relationship\" ) );\n+this.addOptionDefinition( \"cd\", new OptionDefinition( OptionValueType.NONE, \"Go to the created node, like doing 'cd'\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Creates a relationship to a new or existing node, f.ex:\\n\" +\n-                \"mkrel -ct KNOWS (will create a relationship to a new node)\\n\" +\n-                \"mkrel -t KNOWS 123 (will create a relationship to node with id 123)\";\n+        return \"Creates a relationship to a new or existing node, f.ex:\\n\" + \"mkrel -ct KNOWS (will create a relationship to a new node)\\n\" + \"mkrel -t KNOWS 123 (will create a relationship to node with id 123)\";\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session, Output out )\n-        throws ShellException, RemoteException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws ShellException, RemoteException\n+{\n         assertCurrentIsNode( session );\n \n         boolean createNode = parser.options().containsKey( \"c\" );\n@@ -98,42 +88,37 @@ public class Mkrel extends TransactionProvidingApp\n         }\n         else\n         {\n-            throw new ShellException( \"Must either create node (-c)\"\n-                + \" or supply node id as the first argument\" );\n-        }\n+            throw new ShellException( \"Must either create node (-c)\" + \" or supply node id as the first argument\" );\n+    }\n \n         if ( parser.options().get( \"t\" ) == null )\n         {\n-            throw new ShellException( \"Must supply relationship type \"\n-                + \"(-t <relationship-type-name>)\" );\n-        }\n+            throw new ShellException( \"Must supply relationship type \" + \"(-t <relationship-type-name>)\" );\n+    }\n         RelationshipType type = getRelationshipType( parser.options().get( \"t\" ) );\n         Direction direction = getDirection( parser.options().get( \"d\" ) );\n         NodeOrRelationship current = getCurrent( session );\n         Node currentNode = current.asNode();\n         Node startNode = direction == Direction.OUTGOING ? currentNode : node;\n         Node endNode = direction == Direction.OUTGOING ? node : currentNode;\n-        Relationship relationship =\n-            startNode.createRelationshipTo( endNode, type );\n+        Relationship relationship = startNode.createRelationshipTo( endNode, type );\n         setProperties( relationship, parser.options().get( \"rp\" ) );\n         session.set( KEY_LAST_CREATED_RELATIONSHIP, relationship.getId() );\n         boolean verbose = parser.options().containsKey( \"v\" );\n         if ( createNode && verbose )\n         {\n-            out.println( \"Node \" + getDisplayName(\n-                getServer(), session, node, false ) + \" created\" );\n-        }\n+            out.println( \"Node \" + getDisplayName( getServer(), session, node, false ) + \" created\" );\n+    }\n         if ( verbose )\n         {\n-            out.println( \"Relationship \" + getDisplayName(\n-                getServer(), session, relationship, true, false ) +\n-                \" created\" );\n-        }\n+            out.println( \"Relationship \" + getDisplayName( getServer(), session, relationship, true, false ) + \" created\" );\n+    }\n \n         if ( parser.options().containsKey( \"cd\" ) )\n         {\n             cdTo( session, node );\n         }\n-        return Continuation.INPUT_COMPLETE;\n+\n+return Continuation.INPUT_COMPLETE;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}