{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3063",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3063/BatchInserterIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3063/BatchInserterIndex.java\nindex e8b199f5ef1..03f1b680810 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3063/BatchInserterIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3063/BatchInserterIndex.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.batchinsert;\n \n import java.util.Map;\n@@ -31,7 +32,7 @@ import org.neo4j.graphdb.index.IndexHits;\n  * {@link BatchInserterIndex} doesn't necessarily gets added to the actual index\n  * immediately, but are instead forced to be written when the index is shut\n  * down, {@link BatchInserterIndexProvider#shutdown()}.\n- *\n+ * <p>\n  * To guarantee additions/updates are seen by {@link #updateOrAdd(long, Map)},\n  * {@link #get(String, Object)}, {@link #query(String, Object)} and\n  * {@link #query(Object)} a call to {@link #flush()} must be made prior to\n@@ -40,130 +41,130 @@ import org.neo4j.graphdb.index.IndexHits;\n  */\n public interface BatchInserterIndex\n {\n-    /**\n-     * Adds key/value pairs for {@code entity} to the index. If there's a\n-     * previous index for {@code entity} it will co-exist with this new one.\n-     * This behavior is because of performance reasons, to not being forced to\n-     * check if indexing for {@code entity} already exists or not. If you need\n-     * to update indexing for {@code entity} and it's ok with a slower indexing\n-     * process use {@link #updateOrAdd(long, Map)} instead.\n-     *\n-     * Entries added to the index aren't necessarily written to the index and to\n-     * disk until {@link BatchInserterIndexProvider#shutdown()} has been called.\n-     * Entries added to the index isn't necessarily seen by other methods:\n-     * {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n-     * {@link #query(String, Object)} and {@link #query(Object)} until a call to\n-     * {@link #flush()} has been made.\n-     *\n-     * @param entityId the entity (i.e id of {@link Node} or\n-     *            {@link Relationship}) to associate the key/value pairs with.\n-     * @param properties key/value pairs to index for {@code entity}.\n-     */\n-    void add( long entityId, Map<String, Object> properties );\n+  /**\n+   * Adds key/value pairs for {@code entity} to the index. If there's a\n+   * previous index for {@code entity} it will co-exist with this new one.\n+   * This behavior is because of performance reasons, to not being forced to\n+   * check if indexing for {@code entity} already exists or not. If you need\n+   * to update indexing for {@code entity} and it's ok with a slower indexing\n+   * process use {@link #updateOrAdd(long, Map)} instead.\n+   * <p>\n+   * Entries added to the index aren't necessarily written to the index and to\n+   * disk until {@link BatchInserterIndexProvider#shutdown()} has been called.\n+   * Entries added to the index isn't necessarily seen by other methods:\n+   * {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n+   * {@link #query(String, Object)} and {@link #query(Object)} until a call to\n+   * {@link #flush()} has been made.\n+   *\n+   * @param entityId   the entity (i.e id of {@link Node} or\n+   *                   {@link Relationship}) to associate the key/value pairs with.\n+   * @param properties key/value pairs to index for {@code entity}.\n+   */\n+  void add(long entityId, Map<String, Object> properties);\n \n-    /**\n-     * Adds key/value pairs for {@code entity} to the index. If there's any\n-     * previous index for {@code entity} all such indexed key/value pairs will\n-     * be deleted first. This method can be considerably slower than\n-     * {@link #add(long, Map)} because it must check if there are properties\n-     * already indexed for {@code entity}. So if you know that there's no\n-     * previous indexing for {@code entity} use {@link #add(long, Map)} instead.\n-     *\n-     * Entries added to the index aren't necessarily written to the index and to\n-     * disk until {@link BatchInserterIndexProvider#shutdown()} has been called.\n-     * Entries added to the index isn't necessarily seen by other methods:\n-     * {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n-     * {@link #query(String, Object)} and {@link #query(Object)} until a call to\n-     * {@link #flush()} has been made. So only entries added before the most\n-     * recent {@link #flush()} are guaranteed to be found by this method.\n-     *\n-     * @param entityId the entity (i.e id of {@link Node} or\n-     *            {@link Relationship}) to associate the key/value pairs with.\n-     * @param properties key/value pairs to index for {@code entity}.\n-     */\n-    void updateOrAdd( long entityId, Map<String, Object> properties );\n+  /**\n+   * Adds key/value pairs for {@code entity} to the index. If there's any\n+   * previous index for {@code entity} all such indexed key/value pairs will\n+   * be deleted first. This method can be considerably slower than\n+   * {@link #add(long, Map)} because it must check if there are properties\n+   * already indexed for {@code entity}. So if you know that there's no\n+   * previous indexing for {@code entity} use {@link #add(long, Map)} instead.\n+   * <p>\n+   * Entries added to the index aren't necessarily written to the index and to\n+   * disk until {@link BatchInserterIndexProvider#shutdown()} has been called.\n+   * Entries added to the index isn't necessarily seen by other methods:\n+   * {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n+   * {@link #query(String, Object)} and {@link #query(Object)} until a call to\n+   * {@link #flush()} has been made. So only entries added before the most\n+   * recent {@link #flush()} are guaranteed to be found by this method.\n+   *\n+   * @param entityId   the entity (i.e id of {@link Node} or\n+   *                   {@link Relationship}) to associate the key/value pairs with.\n+   * @param properties key/value pairs to index for {@code entity}.\n+   */\n+  void updateOrAdd(long entityId, Map<String, Object> properties);\n \n-    /**\n-     * Returns exact matches from this index, given the key/value pair. Matches\n-     * will be for key/value pairs just as they were added by the\n-     * {@link #add(long, Map)} or {@link #updateOrAdd(long, Map)} method.\n-     *\n-     * Entries added to the index aren't necessarily written to the index and to\n-     * disk until {@link BatchInserterIndexProvider#shutdown()} has been called.\n-     * Entries added to the index isn't necessarily seen by other methods:\n-     * {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n-     * {@link #query(String, Object)} and {@link #query(Object)} until a call to\n-     * {@link #flush()} has been made. So only entries added before the most\n-     * recent {@link #flush()} are guaranteed to be found by this method.\n-     *\n-     * @param key the key in the key/value pair to match.\n-     * @param value the value in the key/value pair to match.\n-     * @return the result wrapped in an {@link IndexHits} object. If the entire\n-     *         result set isn't looped through, {@link IndexHits#close()} must\n-     *         be called before disposing of the result.\n-     */\n-    IndexHits<Long> get( String key, Object value );\n+  /**\n+   * Returns exact matches from this index, given the key/value pair. Matches\n+   * will be for key/value pairs just as they were added by the\n+   * {@link #add(long, Map)} or {@link #updateOrAdd(long, Map)} method.\n+   * <p>\n+   * Entries added to the index aren't necessarily written to the index and to\n+   * disk until {@link BatchInserterIndexProvider#shutdown()} has been called.\n+   * Entries added to the index isn't necessarily seen by other methods:\n+   * {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n+   * {@link #query(String, Object)} and {@link #query(Object)} until a call to\n+   * {@link #flush()} has been made. So only entries added before the most\n+   * recent {@link #flush()} are guaranteed to be found by this method.\n+   *\n+   * @param key   the key in the key/value pair to match.\n+   * @param value the value in the key/value pair to match.\n+   * @return the result wrapped in an {@link IndexHits} object. If the entire\n+   * result set isn't looped through, {@link IndexHits#close()} must\n+   * be called before disposing of the result.\n+   */\n+  IndexHits<Long> get(String key, Object value);\n \n-    /**\n-     * Returns matches from this index based on the supplied {@code key} and\n-     * query object, which can be a query string or an implementation-specific\n-     * query object.\n-     *\n-     * Entries added to the index aren't necessarily written to the index and\n-     * to disk until {@link BatchInserterIndexProvider#shutdown()} has been\n-     * called. Entries added to the index isn't necessarily seen by other\n-     * methods: {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n-     * {@link #query(String, Object)} and {@link #query(Object)} until a call\n-     * to {@link #flush()} has been made. So only entries added before the most\n-     * recent {@link #flush()} are guaranteed to be found by this method.\n-     *\n-     * @param key the key in this query.\n-     * @param queryOrQueryObject the query for the {@code key} to match.\n-     * @return the result wrapped in an {@link IndexHits} object. If the entire\n-     * result set isn't looped through, {@link IndexHits#close()} must be\n-     * called before disposing of the result.\n-     */\n-    IndexHits<Long> query( String key, Object queryOrQueryObject );\n+  /**\n+   * Returns matches from this index based on the supplied {@code key} and\n+   * query object, which can be a query string or an implementation-specific\n+   * query object.\n+   * <p>\n+   * Entries added to the index aren't necessarily written to the index and\n+   * to disk until {@link BatchInserterIndexProvider#shutdown()} has been\n+   * called. Entries added to the index isn't necessarily seen by other\n+   * methods: {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n+   * {@link #query(String, Object)} and {@link #query(Object)} until a call\n+   * to {@link #flush()} has been made. So only entries added before the most\n+   * recent {@link #flush()} are guaranteed to be found by this method.\n+   *\n+   * @param key                the key in this query.\n+   * @param queryOrQueryObject the query for the {@code key} to match.\n+   * @return the result wrapped in an {@link IndexHits} object. If the entire\n+   * result set isn't looped through, {@link IndexHits#close()} must be\n+   * called before disposing of the result.\n+   */\n+  IndexHits<Long> query(String key, Object queryOrQueryObject);\n \n-    /**\n-     * Returns matches from this index based on the supplied query object,\n-     * which can be a query string or an implementation-specific query object.\n-     *\n-     * Entries added to the index aren't necessarily written to the index and\n-     * to disk until {@link BatchInserterIndexProvider#shutdown()} has been\n-     * called. Entries added to the index isn't necessarily seen by other\n-     * methods: {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n-     * {@link #query(String, Object)} and {@link #query(Object)} until a call\n-     * to {@link #flush()} has been made. So only entries added before the most\n-     * recent {@link #flush()} are guaranteed to be found by this method.\n-     *\n-     * @param queryOrQueryObject the query to match.\n-     * @return the result wrapped in an {@link IndexHits} object. If the entire\n-     * result set isn't looped through, {@link IndexHits#close()} must be\n-     * called before disposing of the result.\n-     */\n-    IndexHits<Long> query( Object queryOrQueryObject );\n+  /**\n+   * Returns matches from this index based on the supplied query object,\n+   * which can be a query string or an implementation-specific query object.\n+   * <p>\n+   * Entries added to the index aren't necessarily written to the index and\n+   * to disk until {@link BatchInserterIndexProvider#shutdown()} has been\n+   * called. Entries added to the index isn't necessarily seen by other\n+   * methods: {@link #updateOrAdd(long, Map)}, {@link #get(String, Object)},\n+   * {@link #query(String, Object)} and {@link #query(Object)} until a call\n+   * to {@link #flush()} has been made. So only entries added before the most\n+   * recent {@link #flush()} are guaranteed to be found by this method.\n+   *\n+   * @param queryOrQueryObject the query to match.\n+   * @return the result wrapped in an {@link IndexHits} object. If the entire\n+   * result set isn't looped through, {@link IndexHits#close()} must be\n+   * called before disposing of the result.\n+   */\n+  IndexHits<Long> query(Object queryOrQueryObject);\n \n-    /**\n-     * Makes sure additions/updates can be seen by {@link #get(String, Object)},\n-     * {@link #query(String, Object)} and {@link #query(Object)} so that they\n-     * are guaranteed to return correct results. Also\n-     * {@link #updateOrAdd(long, Map)} will find previous indexing correctly\n-     * after a flush.\n-     */\n-    void flush();\n+  /**\n+   * Makes sure additions/updates can be seen by {@link #get(String, Object)},\n+   * {@link #query(String, Object)} and {@link #query(Object)} so that they\n+   * are guaranteed to return correct results. Also\n+   * {@link #updateOrAdd(long, Map)} will find previous indexing correctly\n+   * after a flush.\n+   */\n+  void flush();\n \n-    /**\n-     * Sets the cache size for key/value pairs for the given {@code key}.\n-     * Caching values may increase {@link #get(String, Object)} lookups significantly,\n-     * but may at the same time slow down insertion of data some.\n-     *\n-     * Be sure to call this method to enable caching for keys that will be\n-     * used a lot in lookups. It's also best to call this method for your keys\n-     * right after the index has been created.\n-     *\n-     * @param key the key to set cache capacity for.\n-     * @param size the number of values to cache results for.\n-     */\n-    void setCacheCapacity( String key, int size );\n+  /**\n+   * Sets the cache size for key/value pairs for the given {@code key}.\n+   * Caching values may increase {@link #get(String, Object)} lookups significantly,\n+   * but may at the same time slow down insertion of data some.\n+   * <p>\n+   * Be sure to call this method to enable caching for keys that will be\n+   * used a lot in lookups. It's also best to call this method for your keys\n+   * right after the index has been created.\n+   *\n+   * @param key  the key to set cache capacity for.\n+   * @param size the number of values to cache results for.\n+   */\n+  void setCacheCapacity(String key, int size);\n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3063/BatchInserterIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3063/BatchInserterIndex.java\nindex e8b199f5ef1..20c3ec3ad67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3063/BatchInserterIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3063/BatchInserterIndex.java\n@@ -59,7 +59,7 @@ public interface BatchInserterIndex\n      *            {@link Relationship}) to associate the key/value pairs with.\n      * @param properties key/value pairs to index for {@code entity}.\n      */\n-    void add( long entityId, Map<String, Object> properties );\n+    void add( long entityId, Map<String,Object> properties );\n \n     /**\n      * Adds key/value pairs for {@code entity} to the index. If there's any\n@@ -81,7 +81,7 @@ public interface BatchInserterIndex\n      *            {@link Relationship}) to associate the key/value pairs with.\n      * @param properties key/value pairs to index for {@code entity}.\n      */\n-    void updateOrAdd( long entityId, Map<String, Object> properties );\n+    void updateOrAdd( long entityId, Map<String,Object> properties );\n \n     /**\n      * Returns exact matches from this index, given the key/value pair. Matches\n@@ -166,4 +166,4 @@ public interface BatchInserterIndex\n      * @param size the number of values to cache results for.\n      */\n     void setCacheCapacity( String key, int size );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}