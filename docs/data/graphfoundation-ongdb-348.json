{
    "project_name": "graphfoundation-ongdb",
    "error_id": "348",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/348/UserAggregationFunctionVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/348/UserAggregationFunctionVisitor.java\nindex 10200694afc..59f02cdca71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/348/UserAggregationFunctionVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/348/UserAggregationFunctionVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.visitors;\n \n import java.lang.annotation.Annotation;\n@@ -42,130 +43,130 @@ import org.neo4j.tooling.procedure.messages.CompilationMessage;\n \n import static javax.lang.model.type.TypeKind.VOID;\n \n-public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>,Void>\n+public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>, Void>\n {\n \n-    private final FunctionVisitor<UserAggregationFunction> functionVisitor;\n-    private final Types types;\n-    private final ElementVisitor<CharSequence,Void> typeVisitor;\n-\n-    public UserAggregationFunctionVisitor( FunctionVisitor<UserAggregationFunction> baseFunctionVisitor, Types types )\n+  private final FunctionVisitor<UserAggregationFunction> functionVisitor;\n+  private final Types types;\n+  private final ElementVisitor<CharSequence, Void> typeVisitor;\n+\n+  public UserAggregationFunctionVisitor(FunctionVisitor<UserAggregationFunction> baseFunctionVisitor, Types types)\n+  {\n+    this.functionVisitor = baseFunctionVisitor;\n+    this.types = types;\n+    this.typeVisitor = new QualifiedTypeVisitor();\n+  }\n+\n+  @Override\n+  public Stream<CompilationMessage> visitExecutable(ExecutableElement aggregationFunction, Void ignored)\n+  {\n+    return Stream.of(functionVisitor.validateEnclosingClass(aggregationFunction),\n+        validateParameters(aggregationFunction, UserAggregationFunction.class),\n+        functionVisitor.validateName(aggregationFunction), validateAggregationType(aggregationFunction))\n+        .flatMap(Function.identity());\n+  }\n+\n+  private Stream<CompilationMessage> validateAggregationType(ExecutableElement aggregationFunction)\n+  {\n+    TypeMirror returnType = aggregationFunction.getReturnType();\n+    Element returnTypeElement = types.asElement(returnType);\n+    if (returnTypeElement == null)\n     {\n-        this.functionVisitor = baseFunctionVisitor;\n-        this.types = types;\n-        this.typeVisitor = new QualifiedTypeVisitor();\n+      return Stream.of(new AggregationError(aggregationFunction,\n+          \"Unsupported return type <%s> of aggregation function.\", returnType.toString(),\n+          aggregationFunction.getEnclosingElement()));\n     }\n \n-    @Override\n-    public Stream<CompilationMessage> visitExecutable( ExecutableElement aggregationFunction, Void ignored )\n-    {\n-        return Stream.of( functionVisitor.validateEnclosingClass( aggregationFunction ),\n-                validateParameters( aggregationFunction, UserAggregationFunction.class ),\n-                functionVisitor.validateName( aggregationFunction ), validateAggregationType( aggregationFunction ) )\n-                .flatMap( Function.identity() );\n-    }\n+    List<ExecutableElement> updateMethods = methodsAnnotatedWith(returnTypeElement, UserAggregationUpdate.class);\n+    List<ExecutableElement> resultMethods = methodsAnnotatedWith(returnTypeElement, UserAggregationResult.class);\n \n-    private Stream<CompilationMessage> validateAggregationType( ExecutableElement aggregationFunction )\n-    {\n-        TypeMirror returnType = aggregationFunction.getReturnType();\n-        Element returnTypeElement = types.asElement( returnType );\n-        if ( returnTypeElement == null )\n-        {\n-            return Stream.of( new AggregationError( aggregationFunction,\n-                    \"Unsupported return type <%s> of aggregation function.\", returnType.toString(),\n-                    aggregationFunction.getEnclosingElement() ) );\n-        }\n-\n-        List<ExecutableElement> updateMethods = methodsAnnotatedWith( returnTypeElement, UserAggregationUpdate.class );\n-        List<ExecutableElement> resultMethods = methodsAnnotatedWith( returnTypeElement, UserAggregationResult.class );\n-\n-        return Stream.concat( validateAggregationUpdateMethod( aggregationFunction, returnTypeElement, updateMethods ),\n-                validateAggregationResultMethod( aggregationFunction, returnTypeElement, resultMethods ) );\n-    }\n+    return Stream.concat(validateAggregationUpdateMethod(aggregationFunction, returnTypeElement, updateMethods),\n+        validateAggregationResultMethod(aggregationFunction, returnTypeElement, resultMethods));\n+  }\n \n-    private List<ExecutableElement> methodsAnnotatedWith( Element returnType,\n-            Class<? extends Annotation> annotationType )\n-    {\n-        return ElementFilter.methodsIn( returnType.getEnclosedElements() ).stream()\n-                .filter( m -> m.getAnnotation( annotationType ) != null ).collect( Collectors.toList() );\n-    }\n+  private List<ExecutableElement> methodsAnnotatedWith(Element returnType,\n+                                                       Class<? extends Annotation> annotationType)\n+  {\n+    return ElementFilter.methodsIn(returnType.getEnclosedElements()).stream()\n+        .filter(m -> m.getAnnotation(annotationType) != null).collect(Collectors.toList());\n+  }\n \n-    private Stream<CompilationMessage> validateAggregationUpdateMethod( ExecutableElement aggregationFunction, Element returnType,\n-            List<ExecutableElement> updateMethods )\n+  private Stream<CompilationMessage> validateAggregationUpdateMethod(ExecutableElement aggregationFunction, Element returnType,\n+                                                                     List<ExecutableElement> updateMethods)\n+  {\n+    if (updateMethods.size() != 1)\n     {\n-        if ( updateMethods.size() != 1 )\n-        {\n-            return Stream.of( missingAnnotation( aggregationFunction, returnType, updateMethods, UserAggregationUpdate.class ) );\n-        }\n-\n-        Stream<CompilationMessage> errors = Stream.empty();\n-\n-        ExecutableElement updateMethod = updateMethods.iterator().next();\n-\n-        if ( !isValidUpdateSignature( updateMethod ) )\n-        {\n-            errors = Stream.of( new AggregationError( updateMethod,\n-                    \"@%s usage error: method should be public, non-static and define 'void' as return type.\",\n-                    UserAggregationUpdate.class.getSimpleName() ) );\n-        }\n-        return Stream.concat( errors, functionVisitor.validateParameters( updateMethod.getParameters() ) );\n+      return Stream.of(missingAnnotation(aggregationFunction, returnType, updateMethods, UserAggregationUpdate.class));\n     }\n \n-    private Stream<CompilationMessage> validateAggregationResultMethod( ExecutableElement aggregationFunction, Element returnType,\n-            List<ExecutableElement> resultMethods )\n-    {\n-        if ( resultMethods.size() != 1 )\n-        {\n-            return Stream.of( missingAnnotation( aggregationFunction, returnType, resultMethods, UserAggregationResult.class ) );\n-        }\n-\n-        ExecutableElement resultMethod = resultMethods.iterator().next();\n-        return Stream.concat( validateParameters( resultMethod, UserAggregationUpdate.class ),\n-                functionVisitor.validateReturnType( resultMethod ) );\n-    }\n-\n-    private Stream<CompilationMessage> validateParameters( ExecutableElement resultMethod,\n-            Class<? extends Annotation> annotation )\n-    {\n-        if ( !isValidAggregationSignature( resultMethod ) )\n-        {\n-            return Stream.of( new AggregationError( resultMethod,\n-                    \"@%s usage error: method should be public, non-static and without parameters.\",\n-                    annotation.getSimpleName() ) );\n-        }\n-        return Stream.empty();\n-    }\n+    Stream<CompilationMessage> errors = Stream.empty();\n \n-    private AggregationError missingAnnotation( ExecutableElement aggregationFunction, Element returnType,\n-            List<ExecutableElement> updateMethods, Class<? extends Annotation> annotation )\n-    {\n-        return new AggregationError( aggregationFunction,\n-                \"@%s usage error: expected aggregation type <%s> to define exactly 1 method with this annotation. %s.\",\n-                annotation.getSimpleName(), typeVisitor.visit( returnType ), updateMethods.isEmpty() ? \"Found none\"\n-                                                                                                     : \"Several methods found: \" +\n-                                                                                                      methodNames( updateMethods ) );\n-    }\n+    ExecutableElement updateMethod = updateMethods.iterator().next();\n \n-    private boolean isValidUpdateSignature( ExecutableElement updateMethod )\n+    if (!isValidUpdateSignature(updateMethod))\n     {\n-        // note: parameters are checked subsequently\n-        return isPublicNonStatic( updateMethod.getModifiers() ) &&\n-                updateMethod.getReturnType().getKind().equals( VOID );\n+      errors = Stream.of(new AggregationError(updateMethod,\n+          \"@%s usage error: method should be public, non-static and define 'void' as return type.\",\n+          UserAggregationUpdate.class.getSimpleName()));\n     }\n+    return Stream.concat(errors, functionVisitor.validateParameters(updateMethod.getParameters()));\n+  }\n \n-    private boolean isValidAggregationSignature( ExecutableElement resultMethod )\n+  private Stream<CompilationMessage> validateAggregationResultMethod(ExecutableElement aggregationFunction, Element returnType,\n+                                                                     List<ExecutableElement> resultMethods)\n+  {\n+    if (resultMethods.size() != 1)\n     {\n-        // note: return type is checked subsequently\n-        return isPublicNonStatic( resultMethod.getModifiers() ) && resultMethod.getParameters().isEmpty();\n+      return Stream.of(missingAnnotation(aggregationFunction, returnType, resultMethods, UserAggregationResult.class));\n     }\n \n-    private boolean isPublicNonStatic( Set<Modifier> modifiers )\n-    {\n-        return modifiers.contains( Modifier.PUBLIC ) && !modifiers.contains( Modifier.STATIC );\n-    }\n+    ExecutableElement resultMethod = resultMethods.iterator().next();\n+    return Stream.concat(validateParameters(resultMethod, UserAggregationUpdate.class),\n+        functionVisitor.validateReturnType(resultMethod));\n+  }\n \n-    private String methodNames( List<ExecutableElement> updateMethods )\n+  private Stream<CompilationMessage> validateParameters(ExecutableElement resultMethod,\n+                                                        Class<? extends Annotation> annotation)\n+  {\n+    if (!isValidAggregationSignature(resultMethod))\n     {\n-        return updateMethods.stream().map( ExecutableElement::getSimpleName ).collect( Collectors.joining( \",\" ) );\n+      return Stream.of(new AggregationError(resultMethod,\n+          \"@%s usage error: method should be public, non-static and without parameters.\",\n+          annotation.getSimpleName()));\n     }\n+    return Stream.empty();\n+  }\n+\n+  private AggregationError missingAnnotation(ExecutableElement aggregationFunction, Element returnType,\n+                                             List<ExecutableElement> updateMethods, Class<? extends Annotation> annotation)\n+  {\n+    return new AggregationError(aggregationFunction,\n+        \"@%s usage error: expected aggregation type <%s> to define exactly 1 method with this annotation. %s.\",\n+        annotation.getSimpleName(), typeVisitor.visit(returnType), updateMethods.isEmpty() ? \"Found none\"\n+        : \"Several methods found: \" +\n+        methodNames(updateMethods));\n+  }\n+\n+  private boolean isValidUpdateSignature(ExecutableElement updateMethod)\n+  {\n+    // note: parameters are checked subsequently\n+    return isPublicNonStatic(updateMethod.getModifiers()) &&\n+        updateMethod.getReturnType().getKind().equals(VOID);\n+  }\n+\n+  private boolean isValidAggregationSignature(ExecutableElement resultMethod)\n+  {\n+    // note: return type is checked subsequently\n+    return isPublicNonStatic(resultMethod.getModifiers()) && resultMethod.getParameters().isEmpty();\n+  }\n+\n+  private boolean isPublicNonStatic(Set<Modifier> modifiers)\n+  {\n+    return modifiers.contains(Modifier.PUBLIC) && !modifiers.contains(Modifier.STATIC);\n+  }\n+\n+  private String methodNames(List<ExecutableElement> updateMethods)\n+  {\n+    return updateMethods.stream().map(ExecutableElement::getSimpleName).collect(Collectors.joining(\",\"));\n+  }\n }\n",
            "diff_size": 172
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 296).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "column": "65",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/348/UserAggregationFunctionVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/348/UserAggregationFunctionVisitor.java\nindex 10200694afc..4d6b7baffd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/348/UserAggregationFunctionVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/348/UserAggregationFunctionVisitor.java\n@@ -44,7 +44,6 @@ import static javax.lang.model.type.TypeKind.VOID;\n \n public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream<CompilationMessage>,Void>\n {\n-\n     private final FunctionVisitor<UserAggregationFunction> functionVisitor;\n     private final Types types;\n     private final ElementVisitor<CharSequence,Void> typeVisitor;\n@@ -59,10 +58,7 @@ public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream\n     @Override\n     public Stream<CompilationMessage> visitExecutable( ExecutableElement aggregationFunction, Void ignored )\n     {\n-        return Stream.of( functionVisitor.validateEnclosingClass( aggregationFunction ),\n-                validateParameters( aggregationFunction, UserAggregationFunction.class ),\n-                functionVisitor.validateName( aggregationFunction ), validateAggregationType( aggregationFunction ) )\n-                .flatMap( Function.identity() );\n+        return Stream.of( functionVisitor.validateEnclosingClass( aggregationFunction ), validateParameters( aggregationFunction, UserAggregationFunction.class ), functionVisitor.validateName( aggregationFunction ), validateAggregationType( aggregationFunction ) ).flatMap( Function.identity() );\n     }\n \n     private Stream<CompilationMessage> validateAggregationType( ExecutableElement aggregationFunction )\n@@ -71,27 +67,20 @@ public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream\n         Element returnTypeElement = types.asElement( returnType );\n         if ( returnTypeElement == null )\n         {\n-            return Stream.of( new AggregationError( aggregationFunction,\n-                    \"Unsupported return type <%s> of aggregation function.\", returnType.toString(),\n-                    aggregationFunction.getEnclosingElement() ) );\n+            return Stream.of( new AggregationError( aggregationFunction, \"Unsupported return type <%s> of aggregation function.\", returnType.toString(), aggregationFunction.getEnclosingElement() ) );\n         }\n \n         List<ExecutableElement> updateMethods = methodsAnnotatedWith( returnTypeElement, UserAggregationUpdate.class );\n         List<ExecutableElement> resultMethods = methodsAnnotatedWith( returnTypeElement, UserAggregationResult.class );\n-\n-        return Stream.concat( validateAggregationUpdateMethod( aggregationFunction, returnTypeElement, updateMethods ),\n-                validateAggregationResultMethod( aggregationFunction, returnTypeElement, resultMethods ) );\n+return Stream.concat( validateAggregationUpdateMethod( aggregationFunction, returnTypeElement, updateMethods ), validateAggregationResultMethod( aggregationFunction, returnTypeElement, resultMethods ) );\n     }\n \n-    private List<ExecutableElement> methodsAnnotatedWith( Element returnType,\n-            Class<? extends Annotation> annotationType )\n+    private List<ExecutableElement> methodsAnnotatedWith( Element returnType, Class<? extends Annotation> annotationType )\n     {\n-        return ElementFilter.methodsIn( returnType.getEnclosedElements() ).stream()\n-                .filter( m -> m.getAnnotation( annotationType ) != null ).collect( Collectors.toList() );\n+        return ElementFilter.methodsIn( returnType.getEnclosedElements() ).stream().filter( m -> m.getAnnotation( annotationType ) != null ).collect( Collectors.toList() );\n     }\n \n-    private Stream<CompilationMessage> validateAggregationUpdateMethod( ExecutableElement aggregationFunction, Element returnType,\n-            List<ExecutableElement> updateMethods )\n+    private Stream<CompilationMessage> validateAggregationUpdateMethod( ExecutableElement aggregationFunction, Element returnType, List<ExecutableElement> updateMethods )\n     {\n         if ( updateMethods.size() != 1 )\n         {\n@@ -99,20 +88,17 @@ public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream\n         }\n \n         Stream<CompilationMessage> errors = Stream.empty();\n-\n-        ExecutableElement updateMethod = updateMethods.iterator().next();\n-\n-        if ( !isValidUpdateSignature( updateMethod ) )\n+ExecutableElement updateMethod = updateMethods.iterator().next();\n+if ( !isValidUpdateSignature( updateMethod ) )\n         {\n-            errors = Stream.of( new AggregationError( updateMethod,\n-                    \"@%s usage error: method should be public, non-static and define 'void' as return type.\",\n+            errors = Stream.of( new AggregationError( updateMethod, \"@%s usage error: method should be public, non-static and define 'void' as return type.\",\n                     UserAggregationUpdate.class.getSimpleName() ) );\n         }\n-        return Stream.concat( errors, functionVisitor.validateParameters( updateMethod.getParameters() ) );\n+\n+return Stream.concat( errors, functionVisitor.validateParameters( updateMethod.getParameters() ) );\n     }\n \n-    private Stream<CompilationMessage> validateAggregationResultMethod( ExecutableElement aggregationFunction, Element returnType,\n-            List<ExecutableElement> resultMethods )\n+    private Stream<CompilationMessage> validateAggregationResultMethod( ExecutableElement aggregationFunction, Element returnType, List<ExecutableElement> resultMethods )\n     {\n         if ( resultMethods.size() != 1 )\n         {\n@@ -120,37 +106,30 @@ public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream\n         }\n \n         ExecutableElement resultMethod = resultMethods.iterator().next();\n-        return Stream.concat( validateParameters( resultMethod, UserAggregationUpdate.class ),\n-                functionVisitor.validateReturnType( resultMethod ) );\n+        return Stream.concat( validateParameters( resultMethod, UserAggregationUpdate.class ), functionVisitor.validateReturnType( resultMethod ) );\n     }\n \n-    private Stream<CompilationMessage> validateParameters( ExecutableElement resultMethod,\n-            Class<? extends Annotation> annotation )\n+    private Stream<CompilationMessage> validateParameters( ExecutableElement resultMethod, Class<? extends Annotation> annotation )\n     {\n         if ( !isValidAggregationSignature( resultMethod ) )\n         {\n-            return Stream.of( new AggregationError( resultMethod,\n-                    \"@%s usage error: method should be public, non-static and without parameters.\",\n+            return Stream.of( new AggregationError( resultMethod, \"@%s usage error: method should be public, non-static and without parameters.\",\n                     annotation.getSimpleName() ) );\n         }\n-        return Stream.empty();\n+\n+return Stream.empty();\n     }\n \n-    private AggregationError missingAnnotation( ExecutableElement aggregationFunction, Element returnType,\n-            List<ExecutableElement> updateMethods, Class<? extends Annotation> annotation )\n+    private AggregationError missingAnnotation( ExecutableElement aggregationFunction, Element returnType, List<ExecutableElement> updateMethods, Class<? extends Annotation> annotation )\n     {\n-        return new AggregationError( aggregationFunction,\n-                \"@%s usage error: expected aggregation type <%s> to define exactly 1 method with this annotation. %s.\",\n-                annotation.getSimpleName(), typeVisitor.visit( returnType ), updateMethods.isEmpty() ? \"Found none\"\n-                                                                                                     : \"Several methods found: \" +\n-                                                                                                      methodNames( updateMethods ) );\n+        return new AggregationError( aggregationFunction, \"@%s usage error: expected aggregation type <%s> to define exactly 1 method with this annotation. %s.\",\n+                annotation.getSimpleName(), typeVisitor.visit( returnType ), updateMethods.isEmpty() ? \"Found none\" : \"Several methods found: \" + methodNames( updateMethods ) );\n     }\n \n     private boolean isValidUpdateSignature( ExecutableElement updateMethod )\n     {\n         // note: parameters are checked subsequently\n-        return isPublicNonStatic( updateMethod.getModifiers() ) &&\n-                updateMethod.getReturnType().getKind().equals( VOID );\n+        return isPublicNonStatic( updateMethod.getModifiers() ) &&updateMethod.getReturnType().getKind().equals( VOID );\n     }\n \n     private boolean isValidAggregationSignature( ExecutableElement resultMethod )\n@@ -168,4 +147,4 @@ public class UserAggregationFunctionVisitor extends SimpleElementVisitor8<Stream\n     {\n         return updateMethods.stream().map( ExecutableElement::getSimpleName ).collect( Collectors.joining( \",\" ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}