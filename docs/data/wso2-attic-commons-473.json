{
    "project_name": "wso2-attic-commons",
    "error_id": "473",
    "information": {
        "errors": [
            {
                "line": "94",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .append(\"@\").append(CARBON_CLIENT_ID)\n                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                .toString();\n    }\n    public void stop(){",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/473/DurableTopicSubscriber.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/473/DurableTopicSubscriber.java\nindex f22cd55842f..cc75480e052 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/473/DurableTopicSubscriber.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/473/DurableTopicSubscriber.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n import javax.jms.Message;\n import javax.jms.QueueSession;\n import javax.jms.TextMessage;\n@@ -25,76 +26,80 @@ import javax.jms.TopicSession;\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import java.util.Properties;\n- \n+\n public class DurableTopicSubscriber {\n-    public static final String ANDES_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n-    private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n-    private static final String CF_NAME = \"andesConnectionfactory\";\n-    String userName = \"admin\";\n-    String password = \"admin\";\n-    private static String CARBON_CLIENT_ID = \"carbon\";\n-    private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n-    private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";\n-    private static String CARBON_DEFAULT_PORT = \"5672\";\n-    private String topicName = \"myTopic.asanka\";\n-    private String subscriptionId = \"mySub1\";\n-    private boolean useListener = true;\n-    private int delayBetMessages = 200;\n-    private int messageCount = 100;\n-    private SampleMessageListener messageListener;\n-    public static void main(String[] args) {\n-        DurableTopicSubscriber durableTopicSubscriber = new DurableTopicSubscriber();\n-        durableTopicSubscriber.subscribe();\n-    }\n-    public void subscribe()  {\n-        try {\n-            Properties properties = new Properties();\n-            properties.put(Context.INITIAL_CONTEXT_FACTORY, ANDES_ICF);\n-            properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n-            properties.put(\"topic.\"+topicName,topicName);\n-            System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n-            InitialContext ctx = new InitialContext(properties);\n-            // Lookup connection factory\n-            TopicConnectionFactory connFactory = (TopicConnectionFactory) ctx.lookup(CF_NAME);\n-            TopicConnection topicConnection = connFactory.createTopicConnection();\n-            topicConnection.start();\n-            TopicSession topicSession =\n-                    topicConnection.createTopicSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n-            // create durable subscriber with subscription ID\n-            Topic topic = (Topic) ctx.lookup(topicName);\n-            javax.jms.TopicSubscriber  topicSubscriber = topicSession.createDurableSubscriber(topic,subscriptionId);\n-            if(!useListener)  {\n-                for(int count=0;count<messageCount;count++) {\n-                    Message message = topicSubscriber.receive();\n-                    System.out.println(\"count = \" + count);\n-                    if (message instanceof TextMessage) {\n-                        TextMessage textMessage = (TextMessage) message;\n-                        System.out.println(count+\". textMessage.getText() = \" + textMessage.getText());\n-                    }\n-                    if(delayBetMessages !=0)    {\n-                        Thread.sleep(delayBetMessages);\n-                    }\n-                }\n-                topicConnection.close();\n-            } else {\n-                 messageListener = new SampleMessageListener(topicConnection,topicSession,topicSubscriber,\n-                         delayBetMessages,messageCount,subscriptionId);\n-                 topicSubscriber.setMessageListener(messageListener);\n-                 Thread.sleep(90*1000*60);\n-            }\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+  public static final String ANDES_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n+  private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n+  private static final String CF_NAME = \"andesConnectionfactory\";\n+  String userName = \"admin\";\n+  String password = \"admin\";\n+  private static String CARBON_CLIENT_ID = \"carbon\";\n+  private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n+  private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";\n+  private static String CARBON_DEFAULT_PORT = \"5672\";\n+  private String topicName = \"myTopic.asanka\";\n+  private String subscriptionId = \"mySub1\";\n+  private boolean useListener = true;\n+  private int delayBetMessages = 200;\n+  private int messageCount = 100;\n+  private SampleMessageListener messageListener;\n+\n+  public static void main(String[] args) {\n+    DurableTopicSubscriber durableTopicSubscriber = new DurableTopicSubscriber();\n+    durableTopicSubscriber.subscribe();\n+  }\n+\n+  public void subscribe() {\n+    try {\n+      Properties properties = new Properties();\n+      properties.put(Context.INITIAL_CONTEXT_FACTORY, ANDES_ICF);\n+      properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n+      properties.put(\"topic.\" + topicName, topicName);\n+      System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n+      InitialContext ctx = new InitialContext(properties);\n+      // Lookup connection factory\n+      TopicConnectionFactory connFactory = (TopicConnectionFactory) ctx.lookup(CF_NAME);\n+      TopicConnection topicConnection = connFactory.createTopicConnection();\n+      topicConnection.start();\n+      TopicSession topicSession =\n+        topicConnection.createTopicSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n+      // create durable subscriber with subscription ID\n+      Topic topic = (Topic) ctx.lookup(topicName);\n+      javax.jms.TopicSubscriber topicSubscriber = topicSession.createDurableSubscriber(topic, subscriptionId);\n+      if (!useListener) {\n+        for (int count = 0; count < messageCount; count++) {\n+          Message message = topicSubscriber.receive();\n+          System.out.println(\"count = \" + count);\n+          if (message instanceof TextMessage) {\n+            TextMessage textMessage = (TextMessage) message;\n+            System.out.println(count + \". textMessage.getText() = \" + textMessage.getText());\n+          }\n+          if (delayBetMessages != 0) {\n+            Thread.sleep(delayBetMessages);\n+          }\n         }\n+        topicConnection.close();\n+      } else {\n+        messageListener = new SampleMessageListener(topicConnection, topicSession, topicSubscriber,\n+          delayBetMessages, messageCount, subscriptionId);\n+        topicSubscriber.setMessageListener(messageListener);\n+        Thread.sleep(90 * 1000 * 60);\n+      }\n+    } catch (Exception e) {\n+      e.printStackTrace();\n     }\n-    public String getTCPConnectionURL(String username, String password) {\n-        return new StringBuffer()\n-                .append(\"amqp://\").append(username).append(\":\").append(password)\n-                .append(\"@\").append(CARBON_CLIENT_ID)\n-                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n-                .toString();\n-    }\n-    public void stop(){\n-          this.messageListener.close();\n-    }\n+  }\n+\n+  public String getTCPConnectionURL(String username, String password) {\n+    return new StringBuffer()\n+      .append(\"amqp://\").append(username).append(\":\").append(password)\n+      .append(\"@\").append(CARBON_CLIENT_ID)\n+      .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n+      .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+      .toString();\n+  }\n+\n+  public void stop() {\n+    this.messageListener.close();\n+  }\n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/473/DurableTopicSubscriber.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/473/DurableTopicSubscriber.java\nindex f22cd55842f..190ffa1384b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/473/DurableTopicSubscriber.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/473/DurableTopicSubscriber.java\n@@ -25,8 +25,9 @@ import javax.jms.TopicSession;\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import java.util.Properties;\n- \n+\n public class DurableTopicSubscriber {\n+\n     public static final String ANDES_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n     private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n     private static final String CF_NAME = \"andesConnectionfactory\";\n@@ -46,7 +47,7 @@ public class DurableTopicSubscriber {\n         DurableTopicSubscriber durableTopicSubscriber = new DurableTopicSubscriber();\n         durableTopicSubscriber.subscribe();\n     }\n-    public void subscribe()  {\n+    public void subscribe() {\n         try {\n             Properties properties = new Properties();\n             properties.put(Context.INITIAL_CONTEXT_FACTORY, ANDES_ICF);\n@@ -62,8 +63,8 @@ public class DurableTopicSubscriber {\n                     topicConnection.createTopicSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n             // create durable subscriber with subscription ID\n             Topic topic = (Topic) ctx.lookup(topicName);\n-            javax.jms.TopicSubscriber  topicSubscriber = topicSession.createDurableSubscriber(topic,subscriptionId);\n-            if(!useListener)  {\n+            javax.jms.TopicSubscriber topicSubscriber = topicSession.createDurableSubscriber(topic,subscriptionId);\n+            if(!useListener) {\n                 for(int count=0;count<messageCount;count++) {\n                     Message message = topicSubscriber.receive();\n                     System.out.println(\"count = \" + count);\n@@ -71,7 +72,7 @@ public class DurableTopicSubscriber {\n                         TextMessage textMessage = (TextMessage) message;\n                         System.out.println(count+\". textMessage.getText() = \" + textMessage.getText());\n                     }\n-                    if(delayBetMessages !=0)    {\n+                    if(delayBetMessages != 0) {\n                         Thread.sleep(delayBetMessages);\n                     }\n                 }\n@@ -86,7 +87,8 @@ public class DurableTopicSubscriber {\n             e.printStackTrace();\n         }\n     }\n-    public String getTCPConnectionURL(String username, String password) {\n+\n+public String getTCPConnectionURL(String username, String password) {\n         return new StringBuffer()\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n@@ -95,6 +97,6 @@ public class DurableTopicSubscriber {\n                 .toString();\n     }\n     public void stop(){\n-          this.messageListener.close();\n+    this.messageListener.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}