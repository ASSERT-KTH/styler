{
    "project_name": "findbugsproject-findbugs",
    "error_id": "81",
    "information": {
        "errors": [
            {
                "line": "14",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class TestTestFields extends TestCase {\n\n\tTestFields test;\n\n\tpublic void setUp() {\n\t\ttest = new TestFields(null);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "16",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/81/TestTestFields.java\nindex 43aafa7cadf..3f63f853877 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/81/TestTestFields.java\n@@ -11,7 +11,7 @@ import junit.framework.TestCase;\n  */\n public class TestTestFields extends TestCase {\n \n-\tTestFields test;\n+TestFields test;\n \n \tpublic void setUp() {\n \t\ttest = new TestFields(null);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/81/TestTestFields.java\nindex 43aafa7cadf..0bd4401b9e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/81/TestTestFields.java\n@@ -5,138 +5,139 @@ import junit.framework.TestCase;\n /**\n  * This class just provides runtest test cases to verify that the true cases can\n  * throw null pointer exceptions and that the false positive cases do not.\n- * \n+ * <p>\n  * This code <em>must</em> be included in any static analysis.\n- * \n  */\n public class TestTestFields extends TestCase {\n \n-\tTestFields test;\n-\n-\tpublic void setUp() {\n-\t\ttest = new TestFields(null);\n-\t}\n-\n-\tpublic void testTP1() {\n-\t\ttry {\n-\t\t\tfor (int i = -1; i <= 5; i++)\n-\t\t\t\ttest.tp1(i);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testFP1() {\n-\t\tfor (int i = -1; i <= 5; i++)\n-\t\t\ttest.fp1(i);\n-\t}\n-\n-\tpublic void testTP2() {\n-\t\ttry {\n-\t\t\ttest.tp2(true);\n-\t\t\ttest.tp2(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testFP2() {\n-\t\ttest.fp2(true);\n-\t\ttest.fp2(false);\n-\t}\n-\n-\tpublic void testTP3() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n-\t\t\ttest.tp3();\n-\t\t\ttest.x = \"x\";\n-\t\t\ttest.tp3();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testTF3() {\n-\t\ttest.x = null;\n-\t\ttest.fp3();\n-\t\ttest.x = \"x\";\n-\t\ttest.fp3();\n-\t}\n-\n-\tpublic void testTP4() {\n-\t\ttry {\n-\t\t\ttest.tp4(true);\n-\t\t\ttest.tp4(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testFP4() {\n-\t\ttest.fp4(true);\n-\t\ttest.fp4(false);\n-\t}\n-\n-\tpublic void testTP5() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n-\t\t\ttest.tp5();\n-\t\t\ttest.x = \"x\";\n-\t\t\ttest.tp5();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testTP6() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n-\t\t\ttest.tp6();\n-\t\t\ttest.x = \"x\";\n-\t\t\ttest.tp6();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testIFP1() {\n-\t\ttest.ifp1(false);\n-\t\ttest.ifp1(true);\n-\t}\n-\n-\tpublic void testITP1() {\n-\t\ttry {\n-\t\t\ttest.itp1(false);\n-\t\t\ttest.itp1(true);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testITP2() {\n-\t\ttry {\n-\t\t\ttest.itp2();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testITP3() {\n-\t\ttry {\n-\t\t\ttest.itp3(true);\n-\t\t\ttest.itp3(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n+    TestFields test;\n+\n+    public void setUp() {\n+        test = new TestFields(null);\n+    }\n+\n+    public void testTP1() {\n+        try {\n+            for (int i = -1; i <= 5; i++) {\n+                test.tp1(i);\n+            }\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testFP1() {\n+        for (int i = -1; i <= 5; i++) {\n+            test.fp1(i);\n+        }\n+    }\n+\n+    public void testTP2() {\n+        try {\n+            test.tp2(true);\n+            test.tp2(false);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testFP2() {\n+        test.fp2(true);\n+        test.fp2(false);\n+    }\n+\n+    public void testTP3() {\n+        try {\n+            test.x = null;\n+            test.tp3();\n+            test.x = \"x\";\n+            test.tp3();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testTF3() {\n+        test.x = null;\n+        test.fp3();\n+        test.x = \"x\";\n+        test.fp3();\n+    }\n+\n+    public void testTP4() {\n+        try {\n+            test.tp4(true);\n+            test.tp4(false);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testFP4() {\n+        test.fp4(true);\n+        test.fp4(false);\n+    }\n+\n+    public void testTP5() {\n+        try {\n+            test.x = null;\n+            test.tp5();\n+            test.x = \"x\";\n+            test.tp5();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testTP6() {\n+        try {\n+            test.x = null;\n+            test.tp6();\n+            test.x = \"x\";\n+            test.tp6();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testIFP1() {\n+        test.ifp1(false);\n+        test.ifp1(true);\n+    }\n+\n+    public void testITP1() {\n+        try {\n+            test.itp1(false);\n+            test.itp1(true);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testITP2() {\n+        try {\n+            test.itp2();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testITP3() {\n+        try {\n+            test.itp3(true);\n+            test.itp3(false);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n \n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "16",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/81/TestTestFields.java\nindex 43aafa7cadf..dccc6bb2a97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/81/TestTestFields.java\n@@ -11,132 +11,131 @@ import junit.framework.TestCase;\n  */\n public class TestTestFields extends TestCase {\n \n-\tTestFields test;\n+    TestFields test;\n \n \tpublic void setUp() {\n-\t\ttest = new TestFields(null);\n-\t}\n+    test = new TestFields(null);\n+    }\n \n \tpublic void testTP1() {\n-\t\ttry {\n-\t\t\tfor (int i = -1; i <= 5; i++)\n-\t\t\t\ttest.tp1(i);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    try {\n+    for (int i = -1; i <= 5; i++)\n+    test.tp1(i);\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testFP1() {\n-\t\tfor (int i = -1; i <= 5; i++)\n-\t\t\ttest.fp1(i);\n-\t}\n+    for (int i = -1; i <= 5; i++)\n+    test.fp1(i);\n+    }\n \n \tpublic void testTP2() {\n-\t\ttry {\n-\t\t\ttest.tp2(true);\n+    try {\n+    test.tp2(true);\n \t\t\ttest.tp2(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testFP2() {\n-\t\ttest.fp2(true);\n+    test.fp2(true);\n \t\ttest.fp2(false);\n-\t}\n+    }\n \n \tpublic void testTP3() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n+    try {\n+    test.x = null;\n \t\t\ttest.tp3();\n \t\t\ttest.x = \"x\";\n \t\t\ttest.tp3();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testTF3() {\n-\t\ttest.x = null;\n+    test.x = null;\n \t\ttest.fp3();\n \t\ttest.x = \"x\";\n \t\ttest.fp3();\n-\t}\n+    }\n \n \tpublic void testTP4() {\n-\t\ttry {\n-\t\t\ttest.tp4(true);\n+    try {\n+    test.tp4(true);\n \t\t\ttest.tp4(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testFP4() {\n-\t\ttest.fp4(true);\n+    test.fp4(true);\n \t\ttest.fp4(false);\n-\t}\n+    }\n \n \tpublic void testTP5() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n+    try {\n+    test.x = null;\n \t\t\ttest.tp5();\n \t\t\ttest.x = \"x\";\n \t\t\ttest.tp5();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testTP6() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n+    try {\n+    test.x = null;\n \t\t\ttest.tp6();\n \t\t\ttest.x = \"x\";\n \t\t\ttest.tp6();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testIFP1() {\n-\t\ttest.ifp1(false);\n+    test.ifp1(false);\n \t\ttest.ifp1(true);\n-\t}\n+    }\n \n \tpublic void testITP1() {\n-\t\ttry {\n-\t\t\ttest.itp1(false);\n+    try {\n+    test.itp1(false);\n \t\t\ttest.itp1(true);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testITP2() {\n-\t\ttry {\n-\t\t\ttest.itp2();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    try {\n+    test.itp2();\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n+    }\n \n \tpublic void testITP3() {\n-\t\ttry {\n-\t\t\ttest.itp3(true);\n+    try {\n+    test.itp3(true);\n \t\t\ttest.itp3(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n+    } catch (NullPointerException e) {\n+    return;\n+    }\n \t\tfail();\n-\t}\n-\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 71
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/81/TestTestFields.java\nindex 43aafa7cadf..0cc95beb0b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/81/TestTestFields.java\n@@ -9,134 +9,134 @@ import junit.framework.TestCase;\n  * This code <em>must</em> be included in any static analysis.\n  * \n  */\n-public class TestTestFields extends TestCase {\n \n-\tTestFields test;\n-\n-\tpublic void setUp() {\n-\t\ttest = new TestFields(null);\n-\t}\n-\n-\tpublic void testTP1() {\n-\t\ttry {\n-\t\t\tfor (int i = -1; i <= 5; i++)\n-\t\t\t\ttest.tp1(i);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testFP1() {\n-\t\tfor (int i = -1; i <= 5; i++)\n-\t\t\ttest.fp1(i);\n-\t}\n-\n-\tpublic void testTP2() {\n-\t\ttry {\n-\t\t\ttest.tp2(true);\n-\t\t\ttest.tp2(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testFP2() {\n-\t\ttest.fp2(true);\n-\t\ttest.fp2(false);\n-\t}\n-\n-\tpublic void testTP3() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n-\t\t\ttest.tp3();\n-\t\t\ttest.x = \"x\";\n-\t\t\ttest.tp3();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testTF3() {\n-\t\ttest.x = null;\n-\t\ttest.fp3();\n-\t\ttest.x = \"x\";\n-\t\ttest.fp3();\n-\t}\n-\n-\tpublic void testTP4() {\n-\t\ttry {\n-\t\t\ttest.tp4(true);\n-\t\t\ttest.tp4(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testFP4() {\n-\t\ttest.fp4(true);\n-\t\ttest.fp4(false);\n-\t}\n-\n-\tpublic void testTP5() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n-\t\t\ttest.tp5();\n-\t\t\ttest.x = \"x\";\n-\t\t\ttest.tp5();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testTP6() {\n-\t\ttry {\n-\t\t\ttest.x = null;\n-\t\t\ttest.tp6();\n-\t\t\ttest.x = \"x\";\n-\t\t\ttest.tp6();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testIFP1() {\n-\t\ttest.ifp1(false);\n-\t\ttest.ifp1(true);\n-\t}\n-\n-\tpublic void testITP1() {\n-\t\ttry {\n-\t\t\ttest.itp1(false);\n-\t\t\ttest.itp1(true);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testITP2() {\n-\t\ttry {\n-\t\t\ttest.itp2();\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-\tpublic void testITP3() {\n-\t\ttry {\n-\t\t\ttest.itp3(true);\n-\t\t\ttest.itp3(false);\n-\t\t} catch (NullPointerException e) {\n-\t\t\treturn;\n-\t\t}\n-\t\tfail();\n-\t}\n-\n-}\n+public class TestTestFields extends TestCase {\n+    TestFields test;\n+\n+    public void setUp() {\n+        test = new TestFields(null);\n+    }\n+\n+    public void testTP1() {\n+        try {\n+            for (int i = -1; i <= 5; i++)\n+                test.tp1(i);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testFP1() {\n+        for (int i = -1; i <= 5; i++)\n+            test.fp1(i);\n+    }\n+\n+    public void testTP2() {\n+        try {\n+            test.tp2(true);\n+            test.tp2(false);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testFP2() {\n+        test.fp2(true);\n+        test.fp2(false);\n+    }\n+\n+    public void testTP3() {\n+        try {\n+            test.x = null;\n+            test.tp3();\n+            test.x = \"x\";\n+            test.tp3();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testTF3() {\n+        test.x = null;\n+        test.fp3();\n+        test.x = \"x\";\n+        test.fp3();\n+    }\n+\n+    public void testTP4() {\n+        try {\n+            test.tp4(true);\n+            test.tp4(false);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testFP4() {\n+        test.fp4(true);\n+        test.fp4(false);\n+    }\n+\n+    public void testTP5() {\n+        try {\n+            test.x = null;\n+            test.tp5();\n+            test.x = \"x\";\n+            test.tp5();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testTP6() {\n+        try {\n+            test.x = null;\n+            test.tp6();\n+            test.x = \"x\";\n+            test.tp6();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testIFP1() {\n+        test.ifp1(false);\n+        test.ifp1(true);\n+    }\n+\n+    public void testITP1() {\n+        try {\n+            test.itp1(false);\n+            test.itp1(true);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testITP2() {\n+        try {\n+            test.itp2();\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testITP3() {\n+        try {\n+            test.itp3(true);\n+            test.itp3(false);\n+        } catch (NullPointerException e) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 131
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "16",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/81/TestTestFields.java\nindex 43aafa7cadf..3f63f853877 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/81/TestTestFields.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/81/TestTestFields.java\n@@ -11,7 +11,7 @@ import junit.framework.TestCase;\n  */\n public class TestTestFields extends TestCase {\n \n-\tTestFields test;\n+TestFields test;\n \n \tpublic void setUp() {\n \t\ttest = new TestFields(null);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}