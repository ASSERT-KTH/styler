{
    "project_name": "benetech-ServiceNet",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "164",
                "severity": "error",
                "message": "Line is longer than 125 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private Set<SimpleLocationDTO> filterLocationRecords(Set<SimpleLocationDTO> locations, Set<LocationExclusion> locationExclusions) {\n        if (locationExclusions == null || locationExclusions.isEmpty()) {\n            return locations;\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/errored/1/4/RecordBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/intellij/4/RecordBuilder.java\nindex 5acf304a817..85d09fc6e39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/errored/1/4/RecordBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/intellij/4/RecordBuilder.java\n@@ -70,7 +70,7 @@ public class RecordBuilder {\n     private DailyUpdateMapper dailyUpdateMapper;\n \n     public ActivityRecordDTO buildBasicRecord(Organization organization, ZonedDateTime lastUpdated,\n-        List<ConflictDTO> conflictDTOS, Set<LocationExclusion> locationExclusions) {\n+                                              List<ConflictDTO> conflictDTOS, Set<LocationExclusion> locationExclusions) {\n         OwnerDTO owner = userService.getUserDtoOfOrganization(organization);\n         return new ActivityRecordDTO(\n             mapOrganization(organization),\n@@ -84,7 +84,8 @@ public class RecordBuilder {\n     }\n \n     public RecordDetailsDTO buildRecordDetails(Organization organization, List<ConflictDTO> conflictDTOs,\n-        List<OrganizationMatchDTO> orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs\n+                                               List<OrganizationMatchDTO> orgMatchDTOs,\n+                                               Set<RecordDetailsOrganizationDTO> partnerOrgs\n     ) {\n         return new RecordDetailsDTO(\n             mapOrganizationForRecordDetails(organization),\n@@ -95,7 +96,8 @@ public class RecordBuilder {\n     }\n \n     public ActivityRecordDTO buildFilteredRecord(Organization organization, ZonedDateTime lastUpdated,\n-        List<ConflictDTO> conflictDTOS, Set<FieldExclusion> baseExclusions, Set<LocationExclusion> locationExclusions)\n+                                                 List<ConflictDTO> conflictDTOS, Set<FieldExclusion> baseExclusions,\n+                                                 Set<LocationExclusion> locationExclusions)\n         throws IllegalAccessException {\n         OwnerDTO owner = userService.getUserDtoOfOrganization(organization);\n         return new ActivityRecordDTO(\n@@ -111,7 +113,7 @@ public class RecordBuilder {\n     }\n \n     public ProviderRecordDTO buildBasicProviderRecord(Organization organization, ZonedDateTime lastUpdated,\n-        Set<LocationExclusion> locationExclusions) {\n+                                                      Set<LocationExclusion> locationExclusions) {\n         UserDTO user = this.getUserDtoOfOrganization(organization);\n         return new ProviderRecordDTO(\n             mapOrganization(organization),\n@@ -125,7 +127,8 @@ public class RecordBuilder {\n     }\n \n     public ProviderRecordDTO buildFilteredProviderRecord(Organization organization, ZonedDateTime lastUpdated,\n-        Set<FieldExclusion> baseExclusions, Set<LocationExclusion> locationExclusions)\n+                                                         Set<FieldExclusion> baseExclusions,\n+                                                         Set<LocationExclusion> locationExclusions)\n         throws IllegalAccessException {\n         UserDTO user = this.getUserDtoOfOrganization(organization);\n         return new ProviderRecordDTO(\n@@ -141,7 +144,8 @@ public class RecordBuilder {\n     }\n \n     public ProviderRecordDTO filterProviderRecord(ProviderRecordDTO providerRecord,\n-        Set<FieldExclusion> baseExclusions, Set<LocationExclusion> locationExclusions) throws IllegalAccessException {\n+                                                  Set<FieldExclusion> baseExclusions,\n+                                                  Set<LocationExclusion> locationExclusions) throws IllegalAccessException {\n         UserDTO user = userService.getUser(providerRecord.getUserLogin());\n \n         providerRecord.setOwner(user);\n@@ -151,7 +155,7 @@ public class RecordBuilder {\n     }\n \n     public ProviderRecordDTO filterProviderRecord(ProviderRecordDTO providerRecord,\n-        Set<LocationExclusion> locationExclusions) throws IllegalAccessException {\n+                                                  Set<LocationExclusion> locationExclusions) throws IllegalAccessException {\n         if (providerRecord.getUserLogin() != null) {\n             UserDTO user = userService.getUser(providerRecord.getUserLogin());\n             providerRecord.setOwner(user);\n@@ -161,7 +165,8 @@ public class RecordBuilder {\n         return providerRecord;\n     }\n \n-    private Set<SimpleLocationDTO> filterLocationRecords(Set<SimpleLocationDTO> locations, Set<LocationExclusion> locationExclusions) {\n+    private Set<SimpleLocationDTO> filterLocationRecords(Set<SimpleLocationDTO> locations,\n+                                                         Set<LocationExclusion> locationExclusions) {\n         if (locationExclusions == null || locationExclusions.isEmpty()) {\n             return locations;\n         }\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/errored/1/4/RecordBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/naturalize/4/RecordBuilder.java\nindex 5acf304a817..289b6c0d699 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/errored/1/4/RecordBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/naturalize/4/RecordBuilder.java\n@@ -84,8 +84,7 @@ public class RecordBuilder {\n     }\n \n     public RecordDetailsDTO buildRecordDetails(Organization organization, List<ConflictDTO> conflictDTOs,\n-        List<OrganizationMatchDTO> orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs\n-    ) {\n+        List<OrganizationMatchDTO> orgMatchDTOs, Set<RecordDetailsOrganizationDTO> partnerOrgs) {\n         return new RecordDetailsDTO(\n             mapOrganizationForRecordDetails(organization),\n             partnerOrgs,\n@@ -257,4 +256,4 @@ public class RecordBuilder {\n         }\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Line is longer than 125 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "column": "90",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "164",
                    "column": "134",
                    "severity": "error",
                    "message": "'{' at column 134 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "134",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "164",
                    "column": "136",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/errored/1/4/RecordBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/styler_three_grams/4/RecordBuilder.java\nindex 5acf304a817..9dc65115336 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/errored/1/4/RecordBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/benetech-ServiceNet/styler_three_grams/4/RecordBuilder.java\n@@ -161,8 +161,7 @@ public class RecordBuilder {\n         return providerRecord;\n     }\n \n-    private Set<SimpleLocationDTO> filterLocationRecords(Set<SimpleLocationDTO> locations, Set<LocationExclusion> locationExclusions) {\n-        if (locationExclusions == null || locationExclusions.isEmpty()) {\n+    private Set <SimpleLocationDTO>filterLocationRecords(Set <SimpleLocationDTO>locations,Set <LocationExclusion >locationExclusions){ if(locationExclusions == null || locationExclusions.isEmpty()) {\n             return locations;\n         }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}