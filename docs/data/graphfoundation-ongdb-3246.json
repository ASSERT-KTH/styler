{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3246",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "272",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "307",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3246/TraversalBranchImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3246/TraversalBranchImpl.java\nindex d2fce2934a9..3ae9fe58ca4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3246/TraversalBranchImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3246/TraversalBranchImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.traversal;\n \n import java.util.Iterator;\n@@ -39,342 +40,338 @@ import static org.neo4j.helpers.collection.Iterators.asResourceIterator;\n \n class TraversalBranchImpl implements TraversalBranch\n {\n-    final TraversalBranch parent;\n-    private final Relationship howIGotHere;\n-    private final Node source;\n-    private ResourceIterator<Relationship> relationships;\n-    // high bit here [cidd,dddd][dddd,dddd][dddd,dddd][dddd,dddd]\n-    private int depthAndEvaluationBits;\n-    private int expandedCount;\n-\n-    /*\n-     * For expansion sources for all nodes except the start node\n-     */\n-    TraversalBranchImpl( TraversalBranch parent, int depth, Node source, Relationship toHere )\n-    {\n-        this.parent = parent;\n-        this.source = source;\n-        this.howIGotHere = toHere;\n-        this.depthAndEvaluationBits = depth;\n-    }\n-\n-    /*\n-     * For the start node branches\n-     */\n-    TraversalBranchImpl( TraversalBranch parent, Node source )\n-    {\n-        this.parent = parent;\n-        this.source = source;\n-        this.howIGotHere = null;\n-        this.depthAndEvaluationBits = 0;\n-    }\n-\n-    protected void setEvaluation( Evaluation evaluation )\n-    {\n-        this.depthAndEvaluationBits &= 0x3FFFFFFF; // First clear those evaluation bits\n-        this.depthAndEvaluationBits |= bitValue( evaluation.includes(), 30 ) | bitValue( evaluation.continues(), 31 );\n-    }\n-\n-    private int bitValue( boolean value, int bit )\n-    {\n-        return (value ? 1 : 0) << bit;\n-    }\n-\n-    protected void expandRelationships( PathExpander expander )\n-    {\n-        if ( continues() )\n-        {\n-            relationships = expandRelationshipsWithoutChecks( expander );\n-        }\n-        else\n+  final TraversalBranch parent;\n+  private final Relationship howIGotHere;\n+  private final Node source;\n+  private ResourceIterator<Relationship> relationships;\n+  // high bit here [cidd,dddd][dddd,dddd][dddd,dddd][dddd,dddd]\n+  private int depthAndEvaluationBits;\n+  private int expandedCount;\n+\n+  /*\n+   * For expansion sources for all nodes except the start node\n+   */\n+  TraversalBranchImpl(TraversalBranch parent, int depth, Node source, Relationship toHere)\n+  {\n+    this.parent = parent;\n+    this.source = source;\n+    this.howIGotHere = toHere;\n+    this.depthAndEvaluationBits = depth;\n+  }\n+\n+  /*\n+   * For the start node branches\n+   */\n+  TraversalBranchImpl(TraversalBranch parent, Node source)\n+  {\n+    this.parent = parent;\n+    this.source = source;\n+    this.howIGotHere = null;\n+    this.depthAndEvaluationBits = 0;\n+  }\n+\n+  protected void setEvaluation(Evaluation evaluation)\n+  {\n+    this.depthAndEvaluationBits &= 0x3FFFFFFF; // First clear those evaluation bits\n+    this.depthAndEvaluationBits |= bitValue(evaluation.includes(), 30) | bitValue(evaluation.continues(), 31);\n+  }\n+\n+  private int bitValue(boolean value, int bit)\n+  {\n+    return (value ? 1 : 0) << bit;\n+  }\n+\n+  protected void expandRelationships(PathExpander expander)\n+  {\n+    if (continues())\n+    {\n+      relationships = expandRelationshipsWithoutChecks(expander);\n+    } else\n+    {\n+      resetRelationships();\n+    }\n+  }\n+\n+  protected ResourceIterator expandRelationshipsWithoutChecks(PathExpander expander)\n+  {\n+    return asResourceIterator(expander.expand(this, BranchState.NO_STATE).iterator());\n+  }\n+\n+  protected boolean hasExpandedRelationships()\n+  {\n+    return relationships != null;\n+  }\n+\n+  protected void evaluate(TraversalContext context)\n+  {\n+    setEvaluation(context.evaluate(this, null));\n+  }\n+\n+  @Override\n+  public void initialize(final PathExpander expander, TraversalContext metadata)\n+  {\n+    evaluate(metadata);\n+  }\n+\n+  @Override\n+  public TraversalBranch next(PathExpander expander, TraversalContext context)\n+  {\n+    if (relationships == null)\n+    {\n+      expandRelationships(expander);\n+    }\n+    while (relationships.hasNext())\n+    {\n+      Relationship relationship = relationships.next();\n+      if (relationship.equals(howIGotHere))\n+      {\n+        context.unnecessaryRelationshipTraversed();\n+        continue;\n+      }\n+      expandedCount++;\n+      Node node = relationship.getOtherNode(source);\n+      // TODO maybe an unnecessary instantiation. Instead pass in this+node+relationship to uniqueness check\n+      TraversalBranch next = newNextBranch(node, relationship);\n+      if (context.isUnique(next))\n+      {\n+        context.relationshipTraversed();\n+        next.initialize(expander, context);\n+        return next;\n+      } else\n+      {\n+        context.unnecessaryRelationshipTraversed();\n+      }\n+    }\n+    resetRelationships();\n+    return null;\n+  }\n+\n+  protected TraversalBranch newNextBranch(Node node, Relationship relationship)\n+  {\n+    return new TraversalBranchImpl(this, length() + 1, node, relationship);\n+  }\n+\n+  @Override\n+  public void prune()\n+  {\n+    resetRelationships();\n+  }\n+\n+  private void resetRelationships()\n+  {\n+    if (relationships != null)\n+    {\n+      relationships.close();\n+    }\n+    relationships = Iterators.emptyResourceIterator();\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return depthAndEvaluationBits & 0x3FFFFFFF;\n+  }\n+\n+  @Override\n+  public TraversalBranch parent()\n+  {\n+    return this.parent;\n+  }\n+\n+  @Override\n+  public int expanded()\n+  {\n+    return expandedCount;\n+  }\n+\n+  @Override\n+  public boolean includes()\n+  {\n+    return (depthAndEvaluationBits & 0x40000000) != 0;\n+  }\n+\n+  @Override\n+  public boolean continues()\n+  {\n+    return (depthAndEvaluationBits & 0x80000000) != 0;\n+  }\n+\n+  @Override\n+  public void evaluation(Evaluation eval)\n+  {\n+    setEvaluation(Evaluation.of(includes() & eval.includes(), continues() & eval.continues()));\n+  }\n+\n+  @Override\n+  public Node startNode()\n+  {\n+    return findStartBranch().endNode();\n+  }\n+\n+  private TraversalBranch findStartBranch()\n+  {\n+    TraversalBranch branch = this;\n+    while (branch.length() > 0)\n+    {\n+      branch = branch.parent();\n+    }\n+    return branch;\n+  }\n+\n+  @Override\n+  public Node endNode()\n+  {\n+    return source;\n+  }\n+\n+  @Override\n+  public Relationship lastRelationship()\n+  {\n+    return howIGotHere;\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> relationships()\n+  {\n+    LinkedList<Relationship> relationships = new LinkedList<>();\n+    TraversalBranch branch = this;\n+    while (branch.length() > 0)\n+    {\n+      relationships.addFirst(branch.lastRelationship());\n+      branch = branch.parent();\n+    }\n+    return relationships;\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> reverseRelationships()\n+  {\n+    return () -> new PrefetchingIterator<Relationship>()\n+    {\n+      private TraversalBranch branch = TraversalBranchImpl.this;\n+\n+      @Override\n+      protected Relationship fetchNextOrNull()\n+      {\n+        try\n         {\n-            resetRelationships();\n-        }\n-    }\n-\n-    protected ResourceIterator expandRelationshipsWithoutChecks( PathExpander expander )\n-    {\n-        return asResourceIterator( expander.expand( this, BranchState.NO_STATE ).iterator() );\n-    }\n-\n-    protected boolean hasExpandedRelationships()\n-    {\n-        return relationships != null;\n-    }\n-\n-    protected void evaluate( TraversalContext context )\n-    {\n-        setEvaluation( context.evaluate( this, null ) );\n-    }\n-\n-    @Override\n-    public void initialize( final PathExpander expander, TraversalContext metadata )\n-    {\n-        evaluate( metadata );\n-    }\n-\n-    @Override\n-    public TraversalBranch next( PathExpander expander, TraversalContext context )\n-    {\n-        if ( relationships == null )\n+          return branch != null ? branch.lastRelationship() : null;\n+        } finally\n         {\n-            expandRelationships( expander );\n+          branch = branch != null ? branch.parent() : null;\n         }\n-        while ( relationships.hasNext() )\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Iterable<Node> nodes()\n+  {\n+    LinkedList<Node> nodes = new LinkedList<>();\n+    TraversalBranch branch = this;\n+    while (branch.length() > 0)\n+    {\n+      nodes.addFirst(branch.endNode());\n+      branch = branch.parent();\n+    }\n+    nodes.addFirst(branch.endNode());\n+    return nodes;\n+  }\n+\n+  @Override\n+  public Iterable<Node> reverseNodes()\n+  {\n+    return () -> new PrefetchingIterator<Node>()\n+    {\n+      private TraversalBranch branch = TraversalBranchImpl.this;\n+\n+      @Override\n+      protected Node fetchNextOrNull()\n+      {\n+        try\n         {\n-            Relationship relationship = relationships.next();\n-            if ( relationship.equals( howIGotHere ) )\n-            {\n-                context.unnecessaryRelationshipTraversed();\n-                continue;\n-            }\n-            expandedCount++;\n-            Node node = relationship.getOtherNode( source );\n-            // TODO maybe an unnecessary instantiation. Instead pass in this+node+relationship to uniqueness check\n-            TraversalBranch next = newNextBranch( node, relationship );\n-            if ( context.isUnique( next ) )\n-            {\n-                context.relationshipTraversed();\n-                next.initialize( expander, context );\n-                return next;\n-            }\n-            else\n-            {\n-                context.unnecessaryRelationshipTraversed();\n-            }\n-        }\n-        resetRelationships();\n-        return null;\n-    }\n-\n-    protected TraversalBranch newNextBranch( Node node, Relationship relationship )\n-    {\n-        return new TraversalBranchImpl( this, length() + 1, node, relationship );\n-    }\n-\n-    @Override\n-    public void prune()\n-    {\n-        resetRelationships();\n-    }\n-\n-    private void resetRelationships()\n-    {\n-        if ( relationships != null )\n+          return branch.length() >= 0 ? branch.endNode() : null;\n+        } finally\n         {\n-            relationships.close();\n+          branch = branch.parent();\n         }\n-        relationships = Iterators.emptyResourceIterator();\n-    }\n+      }\n+    };\n+  }\n \n-    @Override\n-    public int length()\n+  @Override\n+  public Iterator<PropertyContainer> iterator()\n+  {\n+    LinkedList<PropertyContainer> entities = new LinkedList<>();\n+    TraversalBranch branch = this;\n+    while (branch.length() > 0)\n     {\n-        return depthAndEvaluationBits & 0x3FFFFFFF;\n+      entities.addFirst(branch.endNode());\n+      entities.addFirst(branch.lastRelationship());\n+      branch = branch.parent();\n     }\n+    entities.addFirst(branch.endNode());\n+    return entities.iterator();\n+  }\n \n-    @Override\n-    public TraversalBranch parent()\n+  @Override\n+  public int hashCode()\n+  {\n+    TraversalBranch branch = this;\n+    int hashCode = 1;\n+    while (branch.length() > 0)\n     {\n-        return this.parent;\n+      Relationship relationship = branch.lastRelationship();\n+      hashCode = 31 * hashCode + relationship.hashCode();\n+      branch = branch.parent();\n     }\n-\n-    @Override\n-    public int expanded()\n+    if (hashCode == 1)\n     {\n-        return expandedCount;\n+      hashCode = endNode().hashCode();\n     }\n+    return hashCode;\n+  }\n \n-    @Override\n-    public boolean includes()\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (obj == this)\n     {\n-        return (depthAndEvaluationBits & 0x40000000) != 0;\n+      return true;\n     }\n-\n-    @Override\n-    public boolean continues()\n+    if (!(obj instanceof TraversalBranch))\n     {\n-        return (depthAndEvaluationBits & 0x80000000) != 0;\n+      return false;\n     }\n \n-    @Override\n-    public void evaluation( Evaluation eval )\n+    TraversalBranch branch = this;\n+    TraversalBranch other = (TraversalBranch) obj;\n+    if (branch.length() != other.length())\n     {\n-        setEvaluation( Evaluation.of( includes() & eval.includes(), continues() & eval.continues() ) );\n+      return false;\n     }\n \n-    @Override\n-    public Node startNode()\n+    while (branch.length() > 0)\n     {\n-        return findStartBranch().endNode();\n+      if (!branch.lastRelationship().equals(other.lastRelationship()))\n+      {\n+        return false;\n+      }\n+      branch = branch.parent();\n+      other = other.parent();\n     }\n+    return true;\n+  }\n \n-    private TraversalBranch findStartBranch()\n-    {\n-        TraversalBranch branch = this;\n-        while ( branch.length() > 0 )\n-        {\n-            branch = branch.parent();\n-        }\n-        return branch;\n-    }\n-\n-    @Override\n-    public Node endNode()\n-    {\n-        return source;\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return Paths.defaultPathToString(this);\n+  }\n \n-    @Override\n-    public Relationship lastRelationship()\n-    {\n-        return howIGotHere;\n-    }\n-\n-    @Override\n-    public Iterable<Relationship> relationships()\n-    {\n-        LinkedList<Relationship> relationships = new LinkedList<>();\n-        TraversalBranch branch = this;\n-        while ( branch.length() > 0 )\n-        {\n-            relationships.addFirst( branch.lastRelationship() );\n-            branch = branch.parent();\n-        }\n-        return relationships;\n-    }\n-\n-    @Override\n-    public Iterable<Relationship> reverseRelationships()\n-    {\n-        return () -> new PrefetchingIterator<Relationship>()\n-        {\n-            private TraversalBranch branch = TraversalBranchImpl.this;\n-\n-            @Override\n-            protected Relationship fetchNextOrNull()\n-            {\n-                try\n-                {\n-                    return branch != null ? branch.lastRelationship() : null;\n-                }\n-                finally\n-                {\n-                    branch = branch != null ? branch.parent() : null;\n-                }\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public Iterable<Node> nodes()\n-    {\n-        LinkedList<Node> nodes = new LinkedList<>();\n-        TraversalBranch branch = this;\n-        while ( branch.length() > 0 )\n-        {\n-            nodes.addFirst( branch.endNode() );\n-            branch = branch.parent();\n-        }\n-        nodes.addFirst( branch.endNode() );\n-        return nodes;\n-    }\n-\n-    @Override\n-    public Iterable<Node> reverseNodes()\n-    {\n-        return () -> new PrefetchingIterator<Node>()\n-        {\n-            private TraversalBranch branch = TraversalBranchImpl.this;\n-\n-            @Override\n-            protected Node fetchNextOrNull()\n-            {\n-                try\n-                {\n-                    return branch.length() >= 0 ? branch.endNode() : null;\n-                }\n-                finally\n-                {\n-                    branch = branch.parent();\n-                }\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public Iterator<PropertyContainer> iterator()\n-    {\n-        LinkedList<PropertyContainer> entities = new LinkedList<>();\n-        TraversalBranch branch = this;\n-        while ( branch.length() > 0 )\n-        {\n-            entities.addFirst( branch.endNode() );\n-            entities.addFirst( branch.lastRelationship() );\n-            branch = branch.parent();\n-        }\n-        entities.addFirst( branch.endNode() );\n-        return entities.iterator();\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        TraversalBranch branch = this;\n-        int hashCode = 1;\n-        while ( branch.length() > 0 )\n-        {\n-            Relationship relationship = branch.lastRelationship();\n-            hashCode = 31 * hashCode + relationship.hashCode();\n-            branch = branch.parent();\n-        }\n-        if ( hashCode == 1 )\n-        {\n-            hashCode = endNode().hashCode();\n-        }\n-        return hashCode;\n-    }\n-\n-    @Override\n-    public boolean equals( Object obj )\n-    {\n-        if ( obj == this )\n-        {\n-            return true;\n-        }\n-        if ( !( obj instanceof TraversalBranch ) )\n-        {\n-            return false;\n-        }\n-\n-        TraversalBranch branch = this;\n-        TraversalBranch other = (TraversalBranch) obj;\n-        if ( branch.length() != other.length() )\n-        {\n-            return false;\n-        }\n-\n-        while ( branch.length() > 0 )\n-        {\n-            if ( !branch.lastRelationship().equals( other.lastRelationship() ) )\n-            {\n-                return false;\n-            }\n-            branch = branch.parent();\n-            other = other.parent();\n-        }\n-        return true;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return Paths.defaultPathToString( this );\n-    }\n-\n-    @Override\n-    public Object state()\n-    {\n-        return null;\n-    }\n+  @Override\n+  public Object state()\n+  {\n+    return null;\n+  }\n }\n",
            "diff_size": 534
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3246/TraversalBranchImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3246/TraversalBranchImpl.java\nindex d2fce2934a9..06201f0217d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3246/TraversalBranchImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3246/TraversalBranchImpl.java\n@@ -77,7 +77,7 @@ class TraversalBranchImpl implements TraversalBranch\n \n     private int bitValue( boolean value, int bit )\n     {\n-        return (value ? 1 : 0) << bit;\n+        return ( value ? 1 : 0) << bit;\n     }\n \n     protected void expandRelationships( PathExpander expander )\n@@ -143,7 +143,8 @@ class TraversalBranchImpl implements TraversalBranch\n                 context.unnecessaryRelationshipTraversed();\n             }\n         }\n-        resetRelationships();\n+\n+resetRelationships();\n         return null;\n     }\n \n@@ -164,7 +165,8 @@ class TraversalBranchImpl implements TraversalBranch\n         {\n             relationships.close();\n         }\n-        relationships = Iterators.emptyResourceIterator();\n+\n+relationships = Iterators.emptyResourceIterator();\n     }\n \n     @Override\n@@ -188,13 +190,13 @@ class TraversalBranchImpl implements TraversalBranch\n     @Override\n     public boolean includes()\n     {\n-        return (depthAndEvaluationBits & 0x40000000) != 0;\n+        return ( depthAndEvaluationBits & 0x40000000) != 0;\n     }\n \n     @Override\n     public boolean continues()\n     {\n-        return (depthAndEvaluationBits & 0x80000000) != 0;\n+        return ( depthAndEvaluationBits & 0x80000000) != 0;\n     }\n \n     @Override\n@@ -216,7 +218,8 @@ class TraversalBranchImpl implements TraversalBranch\n         {\n             branch = branch.parent();\n         }\n-        return branch;\n+\n+return branch;\n     }\n \n     @Override\n@@ -241,7 +244,8 @@ class TraversalBranchImpl implements TraversalBranch\n             relationships.addFirst( branch.lastRelationship() );\n             branch = branch.parent();\n         }\n-        return relationships;\n+\n+return relationships;\n     }\n \n     @Override\n@@ -328,11 +332,13 @@ class TraversalBranchImpl implements TraversalBranch\n             hashCode = 31 * hashCode + relationship.hashCode();\n             branch = branch.parent();\n         }\n-        if ( hashCode == 1 )\n+\n+if ( hashCode == 1 )\n         {\n             hashCode = endNode().hashCode();\n         }\n-        return hashCode;\n+\n+return hashCode;\n     }\n \n     @Override\n@@ -342,7 +348,8 @@ class TraversalBranchImpl implements TraversalBranch\n         {\n             return true;\n         }\n-        if ( !( obj instanceof TraversalBranch ) )\n+\n+if ( !( obj instanceof TraversalBranch ) )\n         {\n             return false;\n         }\n@@ -360,7 +367,8 @@ class TraversalBranchImpl implements TraversalBranch\n             {\n                 return false;\n             }\n-            branch = branch.parent();\n+\n+branch = branch.parent();\n             other = other.parent();\n         }\n         return true;\n@@ -377,4 +385,4 @@ class TraversalBranchImpl implements TraversalBranch\n     {\n         return null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}