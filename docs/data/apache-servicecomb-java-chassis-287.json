{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "287",
    "information": {
        "errors": [
            {
                "line": "56",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n\n  // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance()\n      .getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false).get();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/287/BodyProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/287/BodyProcessorCreator.java\nindex b2fe14da980..e3bd81b8680 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/287/BodyProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/287/BodyProcessorCreator.java\n@@ -127,7 +127,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n      * Deserialize body object into body buffer, according to the Content-Type.\n      *\n      * @param contentType the Content-Type of request\n-     * @param arg body param object\n+     * @param arg         body param object\n      * @return the deserialized body buffer\n      * @throws IOException\n      */\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/287/BodyProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/287/BodyProcessorCreator.java\nindex b2fe14da980..55e7b735cd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/287/BodyProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/287/BodyProcessorCreator.java\n@@ -209,4 +209,4 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n \n     return new BodyProcessor(targetType, parameter.getRequired());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/287/BodyProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/287/BodyProcessorCreator.java\nindex b2fe14da980..2dbec5bee28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/287/BodyProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/287/BodyProcessorCreator.java\n@@ -21,11 +21,9 @@ import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Type;\n import java.util.Locale;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-\n import org.apache.commons.io.IOUtils;\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.codec.RestClientRequest;\n@@ -35,13 +33,11 @@ import org.apache.servicecomb.swagger.generator.core.utils.ClassUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n import com.fasterxml.jackson.databind.type.SimpleType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.swagger.models.parameters.Parameter;\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.buffer.impl.BufferImpl;\n@@ -54,8 +50,9 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n   private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n \n   // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n-  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance()\n-      .getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false).get();\n+\n+  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false)\n+                                                                              .get();\n \n   public static class BodyProcessor implements ParamValueProcessor {\n     protected JavaType targetType;\n@@ -75,16 +72,17 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n       }\n \n       // edge support convert from form-data or x-www-form-urlencoded to json automatically\n+\n       String contentType = request.getContentType();\n       contentType = contentType == null ? \"\" : contentType.toLowerCase(Locale.US);\n-      if (contentType.startsWith(MediaType.MULTIPART_FORM_DATA)\n-          || contentType.startsWith(MediaType.APPLICATION_FORM_URLENCODED)) {\n+      if (contentType.startsWith(MediaType.MULTIPART_FORM_DATA) || contentType.startsWith(MediaType.APPLICATION_FORM_URLENCODED)) {\n         return convertValue(request.getParameterMap(), targetType);\n       }\n \n       // for standard HttpServletRequest, getInputStream will never return null\n       // but for mocked HttpServletRequest, maybe get a null\n       //  like org.apache.servicecomb.provider.springmvc.reference.ClientToHttpServletRequest\n+\n       InputStream inputStream = request.getInputStream();\n       if (inputStream == null) {\n         return null;\n@@ -97,17 +95,16 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n \n       try {\n         if (decodeAsObject) {\n-          return RestObjectMapperFactory.getRestObjectMapper()\n-              .readValue(inputStream, OBJECT_TYPE);\n+          return RestObjectMapperFactory.getRestObjectMapper().readValue(inputStream, OBJECT_TYPE);\n         }\n-        return RestObjectMapperFactory.getRestObjectMapper()\n-            .readValue(inputStream, targetType);\n+        return RestObjectMapperFactory.getRestObjectMapper().readValue(inputStream, targetType);\n       } catch (MismatchedInputException e) {\n         // there is no way to detect InputStream is empty, so have to catch the exception\n         if (!isRequired && e.getMessage().contains(\"No content to map due to end-of-input\")) {\n           LOGGER.info(\"Empty content and required is false, taken as null\");\n           return null;\n         }\n+\n         throw e;\n       }\n     }\n@@ -116,9 +113,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n     public void setValue(RestClientRequest clientRequest, Object arg) throws Exception {\n       ensureContentType(clientRequest);\n       if (arg != null) {\n-        Buffer buffer = createBodyBuffer(\n-            clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE),\n-            arg);\n+        Buffer buffer = createBodyBuffer(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE), arg);\n         clientRequest.write(buffer);\n       }\n     }\n@@ -131,6 +126,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n      * @return the deserialized body buffer\n      * @throws IOException\n      */\n+\n     private Buffer createBodyBuffer(String contentType, Object arg) throws IOException {\n       if (MediaType.TEXT_PLAIN.equals(contentType)) {\n         if (!String.class.isInstance(arg)) {\n@@ -148,9 +144,9 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n     /**\n      * If the Content-Type has not been set yet, set application/json as default value.\n      */\n+\n     private void ensureContentType(RestClientRequest clientRequest) {\n-      if (null == clientRequest.getHeaders()\n-          || StringUtils.isEmpty(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE))) {\n+      if (null == clientRequest.getHeaders() || StringUtils.isEmpty(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE))) {\n         clientRequest.putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n       }\n     }\n@@ -167,7 +163,6 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n   }\n \n   public static class RawJsonBodyProcessor extends BodyProcessor {\n-\n     public RawJsonBodyProcessor(JavaType targetType, boolean isRequired) {\n       super(targetType, isRequired);\n     }\n@@ -206,7 +201,6 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n     if (genericParamType.getTypeName().equals(String.class.getTypeName()) && rawJson) {\n       return new RawJsonBodyProcessor(targetType, parameter.getRequired());\n     }\n-\n     return new BodyProcessor(targetType, parameter.getRequired());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}