{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "565",
    "information": {
        "errors": [
            {
                "line": "118",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 107).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    initializeExpectedMetric(2);\n    MetricInfo updatedInfo = METRIC_INFO.toBuilder().filter(NEW_FILTER).build();\n    Metric expectedMetric = new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n    expect(logging.options()).andReturn(mockOptions);\n    expect(logging.getMetricAsync(NAME))\n        .andReturn(Futures.immediateFuture(expectedMetric));",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/565/MetricTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/565/MetricTest.java\nindex 839745ca728..892cf50fcce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/565/MetricTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/565/MetricTest.java\n@@ -115,7 +115,8 @@ public class MetricTest {\n   public void testReloadAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedMetric(2);\n     MetricInfo updatedInfo = METRIC_INFO.toBuilder().filter(NEW_FILTER).build();\n-    Metric expectedMetric = new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n+    Metric expectedMetric =\n+        new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n     expect(logging.options()).andReturn(mockOptions);\n     expect(logging.getMetricAsync(NAME))\n         .andReturn(Futures.immediateFuture(expectedMetric));\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/565/MetricTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/565/MetricTest.java\nindex 839745ca728..d7c2f4106e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/565/MetricTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/565/MetricTest.java\n@@ -211,4 +211,4 @@ public class MetricTest {\n     assertEquals(expected.hashCode(), value.hashCode());\n     assertEquals(expected.toString(), value.toString());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/565/MetricTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/565/MetricTest.java\nindex 839745ca728..a8550755325 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/565/MetricTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/565/MetricTest.java\n@@ -27,12 +27,11 @@ import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n import com.google.common.util.concurrent.Futures;\n-\n import org.junit.After;\n import org.junit.Test;\n-\n import java.util.concurrent.ExecutionException;\n \n+\n public class MetricTest {\n \n   private static final String NAME = \"name\";\n@@ -41,15 +40,12 @@ public class MetricTest {\n   private static final String NEW_NAME = \"newName\";\n   private static final String NEW_FILTER = \"logName=projects/my-projectid/logs/newSyslog\";\n   private static final String NEW_DESCRIPTION = \"newDescription\";\n-  private static final MetricInfo METRIC_INFO = MetricInfo.builder(NAME, FILTER)\n-      .description(DESCRIPTION)\n-      .build();\n+  private static final MetricInfo METRIC_INFO = MetricInfo.builder(NAME, FILTER).description(DESCRIPTION).build();\n   private final Logging serviceMockReturnsOptions = createStrictMock(Logging.class);\n   private final LoggingOptions mockOptions = createMock(LoggingOptions.class);\n   private Logging logging;\n   private Metric expectedMetric;\n   private Metric metric;\n-\n   private void initializeExpectedMetric(int optionsCalls) {\n     expect(serviceMockReturnsOptions.options()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n@@ -70,11 +66,7 @@ public class MetricTest {\n   public void testBuilder() {\n     initializeExpectedMetric(2);\n     replay(logging);\n-    MetricInfo builtMetric = expectedMetric.toBuilder()\n-        .name(NEW_NAME)\n-        .filter(NEW_FILTER)\n-        .description(NEW_DESCRIPTION)\n-        .build();\n+    MetricInfo builtMetric = expectedMetric.toBuilder().name(NEW_NAME).filter(NEW_FILTER).description(NEW_DESCRIPTION).build();\n     assertEquals(NEW_NAME, builtMetric.name());\n     assertEquals(NEW_DESCRIPTION, builtMetric.description());\n     assertEquals(NEW_FILTER, builtMetric.filter());\n@@ -91,8 +83,7 @@ public class MetricTest {\n   public void testReload() {\n     initializeExpectedMetric(2);\n     MetricInfo updatedInfo = METRIC_INFO.toBuilder().filter(NEW_FILTER).build();\n-    Metric expectedMetric =\n-        new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n+    Metric expectedMetric = new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n     expect(logging.options()).andReturn(mockOptions);\n     expect(logging.getMetric(NAME)).andReturn(expectedMetric);\n     replay(logging);\n@@ -117,8 +108,7 @@ public class MetricTest {\n     MetricInfo updatedInfo = METRIC_INFO.toBuilder().filter(NEW_FILTER).build();\n     Metric expectedMetric = new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n     expect(logging.options()).andReturn(mockOptions);\n-    expect(logging.getMetricAsync(NAME))\n-        .andReturn(Futures.immediateFuture(expectedMetric));\n+    expect(logging.getMetricAsync(NAME)).andReturn(Futures.immediateFuture(expectedMetric));\n     replay(logging);\n     initializeMetric();\n     Metric updatedMetric = metric.reloadAsync().get();\n@@ -139,8 +129,7 @@ public class MetricTest {\n   public void testUpdate() {\n     initializeExpectedMetric(2);\n     MetricInfo updatedInfo = METRIC_INFO.toBuilder().filter(NEW_FILTER).build();\n-    Metric expectedMetric =\n-        new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n+    Metric expectedMetric = new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n     expect(logging.options()).andReturn(mockOptions).times(2);\n     expect(logging.update(expectedMetric)).andReturn(expectedMetric);\n     replay(logging);\n@@ -153,8 +142,7 @@ public class MetricTest {\n   public void testUpdateAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedMetric(2);\n     MetricInfo updatedInfo = METRIC_INFO.toBuilder().filter(NEW_FILTER).build();\n-    Metric expectedMetric =\n-        new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n+    Metric expectedMetric = new Metric(serviceMockReturnsOptions, new MetricInfo.BuilderImpl(updatedInfo));\n     expect(logging.options()).andReturn(mockOptions).times(2);\n     expect(logging.updateAsync(expectedMetric)).andReturn(Futures.immediateFuture(expectedMetric));\n     replay(logging);\n@@ -211,4 +199,4 @@ public class MetricTest {\n     assertEquals(expected.hashCode(), value.hashCode());\n     assertEquals(expected.toString(), value.toString());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}