{
    "project_name": "neo4j-neo4j",
    "error_id": "2965",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2965/IndexProgressor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2965/IndexProgressor.java\nindex 402fea69ff9..7f8e0a669b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2965/IndexProgressor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2965/IndexProgressor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.index;\n \n import org.neo4j.internal.kernel.api.IndexQuery;\n@@ -30,24 +31,24 @@ import org.neo4j.values.storable.Value;\n  * In contrast to a cursor, the progressor does not hold value state, but rather attempts to write the next entry to a\n  * Client. The client can them accept the entry, in which case next() returns, or reject it, in which case the\n  * progression continues until an acceptable entry is found, or the progression is done.\n- *\n+ * <p>\n  * A Progressor is expected to feed a single client, which is set up for example in the constructor. The typical\n  * interaction goes something like:\n- *\n- *   -- query(client) -> INDEX\n- *                       progressor = new Progressor( client )\n- *                       client.initialize( progressor, ... )\n- *\n- *   -- next() --> client\n- *                 client ---- next() --> progressor\n- *                        <-- accept() --\n- *                                 :false\n- *                        <-- accept() --\n- *                                 :false\n- *                        <-- accept() --\n- *                                  :true\n- *                 client <--------------\n- *   <-----------\n+ * <p>\n+ * -- query(client) -> INDEX\n+ * progressor = new Progressor( client )\n+ * client.initialize( progressor, ... )\n+ * <p>\n+ * -- next() --> client\n+ * client ---- next() --> progressor\n+ * <-- accept() --\n+ * :false\n+ * <-- accept() --\n+ * :false\n+ * <-- accept() --\n+ * :true\n+ * client <--------------\n+ * <-----------\n  */\n public interface IndexProgressor extends AutoCloseable\n {\n@@ -73,28 +74,30 @@ public interface IndexProgressor extends AutoCloseable\n         /**\n          * Setup the client for progressing using the supplied progressor. The values feed in accept map to the\n          * propertyIds provided here. Called by index implementation.\n-         * @param descriptor The descriptor\n-         * @param progressor The progressor\n-         * @param query The query of this progression\n-         * @param constraints Constraints on the produced results, like the required order the index should return entity ids in, or if the index should fetch\n-         * property values together with entity ids.\n+         *\n+         * @param descriptor                    The descriptor\n+         * @param progressor                    The progressor\n+         * @param query                         The query of this progression\n+         * @param constraints                   Constraints on the produced results, like the required order the index should return entity ids in, or if the index should fetch\n+         *                                      property values together with entity ids.\n          * @param indexIncludesTransactionState {@code true} if the index takes transaction state into account such that the entities delivered through\n-         * {@link #acceptEntity(long, float, Value...)} have already been filtered through, and merged with, the transaction state. If this is {@code true},\n-         * then the client does not need to do its own transaction state filtering. This is the case for the fulltext schema indexes, for instance.\n-         * Otherwise, if this parameter is {@code false}, then the client needs to filter and merge the transaction state in on their own.\n+         *                                      {@link #acceptEntity(long, float, Value...)} have already been filtered through, and merged with, the transaction state. If this is {@code true},\n+         *                                      then the client does not need to do its own transaction state filtering. This is the case for the fulltext schema indexes, for instance.\n+         *                                      Otherwise, if this parameter is {@code false}, then the client needs to filter and merge the transaction state in on their own.\n          */\n-        void initialize( IndexDescriptor descriptor, IndexProgressor progressor,\n-                         IndexQuery[] query, IndexQueryConstraints constraints, boolean indexIncludesTransactionState );\n+        void initialize(IndexDescriptor descriptor, IndexProgressor progressor,\n+                        IndexQuery[] query, IndexQueryConstraints constraints, boolean indexIncludesTransactionState);\n \n         /**\n          * Accept the entity id and values of a candidate index entry. Return true if the entry is\n          * accepted, false otherwise.\n+         *\n          * @param reference the entity id of the candidate index entry\n-         * @param score a score figure for the quality of the match, for indexes where this makes sense, otherwise {@link Float#NaN}.\n-         * @param values the values of the candidate index entry\n+         * @param score     a score figure for the quality of the match, for indexes where this makes sense, otherwise {@link Float#NaN}.\n+         * @param values    the values of the candidate index entry\n          * @return true if the entry is accepted, false otherwise\n          */\n-        boolean acceptEntity( long reference, float score, Value... values );\n+        boolean acceptEntity(long reference, float score, Value... values);\n \n         boolean needsValues();\n     }\n@@ -107,11 +110,12 @@ public interface IndexProgressor extends AutoCloseable\n         /**\n          * Accept the entity id and (some) tokens of a candidate index entry. Return true if the entry\n          * is accepted, false otherwise.\n+         *\n          * @param reference the entity id of the candidate index entry\n-         * @param tokens some tokens of the candidate index entry\n+         * @param tokens    some tokens of the candidate index entry\n          * @return true if the entry is accepted, false otherwise\n          */\n-        boolean acceptEntity( long reference, TokenSet tokens );\n+        boolean acceptEntity(long reference, TokenSet tokens);\n     }\n \n     IndexProgressor EMPTY = new IndexProgressor()\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}