{
    "project_name": "eclipse-kura",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "651",
                "column": "46",
                "severity": "error",
                "message": "';' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            if (this.selectedNetIfConfig.getReadOnlyDnsServers() != null) {\n                this.dnsRead.setText(this.selectedNetIfConfig.getReadOnlyDnsServers());\n                this.dnsRead.setVisible(true);// ???\n            } else {\n                this.dnsRead.setText(\"\");\n                this.dnsRead.setVisible(false);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/41/TabTcpIpUi.java\nindex 0b7c1bec6ce..90579f41f72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/41/TabTcpIpUi.java\n@@ -648,7 +648,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             this.gateway.setText(this.selectedNetIfConfig.getGateway());\n             if (this.selectedNetIfConfig.getReadOnlyDnsServers() != null) {\n                 this.dnsRead.setText(this.selectedNetIfConfig.getReadOnlyDnsServers());\n-                this.dnsRead.setVisible(true);// ???\n+                this.dnsRead.setVisible(true); // ???\n             } else {\n                 this.dnsRead.setText(\"\");\n                 this.dnsRead.setVisible(false);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "652",
                    "column": "46",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/41/TabTcpIpUi.java\nindex 0b7c1bec6ce..403b8a6ed12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/41/TabTcpIpUi.java\n@@ -9,6 +9,7 @@\n  * Contributors:\n  *     Eurotech\n  *******************************************************************************/\n+\n package org.eclipse.kura.web.client.ui.network;\n \n import java.util.List;\n@@ -279,9 +280,9 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         // check and make sure if 'Enabled for WAN' then either DHCP is selected\n         // or STATIC and a gateway is set\n         if (!IPV4_STATUS_DISABLED_MESSAGE.equals(this.status.getSelectedValue())\n-                && this.configure.getSelectedItemText().equalsIgnoreCase(VMSGS.netIPv4ConfigModeManual())) {\n+            && this.configure.getSelectedItemText().equalsIgnoreCase(VMSGS.netIPv4ConfigModeManual())) {\n             if ((this.gateway.getValue() == null || \"\".equals(this.gateway.getValue().trim()))\n-                    && IPV4_STATUS_WAN_MESSAGE.equals(this.status.getSelectedValue())) {\n+                && IPV4_STATUS_WAN_MESSAGE.equals(this.status.getSelectedValue())) {\n                 this.groupGateway.setValidationState(ValidationState.ERROR);\n                 this.helpGateway.setText(MSGS.netIPv4InvalidAddress());\n                 flag = false;\n@@ -292,9 +293,9 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             }\n         }\n         if (this.groupIp.getValidationState().equals(ValidationState.ERROR)\n-                || this.groupSubnet.getValidationState().equals(ValidationState.ERROR)\n-                || this.groupGateway.getValidationState().equals(ValidationState.ERROR)\n-                || this.groupDns.getValidationState().equals(ValidationState.ERROR)) {\n+            || this.groupSubnet.getValidationState().equals(ValidationState.ERROR)\n+            || this.groupGateway.getValidationState().equals(ValidationState.ERROR)\n+            || this.groupDns.getValidationState().equals(ValidationState.ERROR)) {\n             flag = false;\n         }\n         return flag;\n@@ -401,20 +402,20 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n                 @Override\n                 public void onSuccess(GwtXSRFToken token) {\n                     TabTcpIpUi.this.gwtNetworkService.renewDhcpLease(token,\n-                            TabTcpIpUi.this.selectedNetIfConfig.getName(), new AsyncCallback<Void>() {\n+                        TabTcpIpUi.this.selectedNetIfConfig.getName(), new AsyncCallback<Void>() {\n \n-                                @Override\n-                                public void onFailure(Throwable ex) {\n-                                    EntryClassUi.hideWaitModal();\n-                                    FailureHandler.handle(ex);\n-                                }\n+                            @Override\n+                            public void onFailure(Throwable ex) {\n+                                EntryClassUi.hideWaitModal();\n+                                FailureHandler.handle(ex);\n+                            }\n \n-                                @Override\n-                                public void onSuccess(Void result) {\n-                                    refresh();\n-                                    EntryClassUi.hideWaitModal();\n-                                }\n-                            });\n+                            @Override\n+                            public void onSuccess(Void result) {\n+                                refresh();\n+                                EntryClassUi.hideWaitModal();\n+                            }\n+                        });\n                 }\n \n             });\n@@ -448,13 +449,13 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n \n             String[] aDnsServers = TabTcpIpUi.this.dns.getText().split(DNS_REGEX);\n             boolean validDnsList = true;\n-            \n+\n             int dnsContentLength = TabTcpIpUi.this.dns.getText().trim().length();\n             int aDnsServersSize = aDnsServers.length;\n             if (dnsContentLength != 0 && aDnsServersSize == 0) {\n                 validDnsList = false;\n             }\n-            \n+\n             for (String dnsEntry : aDnsServers) {\n                 if (dnsEntry.trim().length() >= 0 && !dnsEntry.trim().matches(FieldType.IPv4_ADDRESS.getRegex())) {\n                     validDnsList = false;\n@@ -482,7 +483,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.gateway.addValueChangeHandler(event -> {\n             setDirty(true);\n             if (!TabTcpIpUi.this.gateway.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex())\n-                    && TabTcpIpUi.this.gateway.getText().trim().length() > 0) {\n+                && TabTcpIpUi.this.gateway.getText().trim().length() > 0) {\n                 TabTcpIpUi.this.groupGateway.setValidationState(ValidationState.ERROR);\n                 TabTcpIpUi.this.helpGateway.setText(MSGS.netIPv4InvalidAddress());\n             } else {\n@@ -503,7 +504,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.subnet.addValueChangeHandler(event -> {\n             setDirty(true);\n             if (!TabTcpIpUi.this.subnet.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex())\n-                    && TabTcpIpUi.this.subnet.getText().trim().length() > 0) {\n+                && TabTcpIpUi.this.subnet.getText().trim().length() > 0) {\n                 TabTcpIpUi.this.groupSubnet.setValidationState(ValidationState.ERROR);\n                 TabTcpIpUi.this.helpSubnet.setText(MSGS.netIPv4InvalidAddress());\n             } else {\n@@ -524,7 +525,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.ip.addValueChangeHandler(event -> {\n             setDirty(true);\n             if (!TabTcpIpUi.this.ip.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex())\n-                    || TabTcpIpUi.this.ip.getText().trim().length() <= 0) {\n+                || TabTcpIpUi.this.ip.getText().trim().length() <= 0) {\n                 TabTcpIpUi.this.groupIp.setValidationState(ValidationState.ERROR);\n                 TabTcpIpUi.this.helpIp.setText(MSGS.netIPv4InvalidAddress());\n             } else {\n@@ -572,7 +573,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             if (TabTcpIpUi.this.status.isEnabled()) {\n                 TabTcpIpUi.this.helpText.clear();\n                 if (TabTcpIpUi.this.selectedNetIfConfig != null\n-                        && TabTcpIpUi.this.selectedNetIfConfig.getHwTypeEnum() == GwtNetIfType.MODEM) {\n+                    && TabTcpIpUi.this.selectedNetIfConfig.getHwTypeEnum() == GwtNetIfType.MODEM) {\n                     TabTcpIpUi.this.helpText.add(new Span(MSGS.netIPv4ModemToolTipStatus()));\n                 } else {\n                     TabTcpIpUi.this.helpText.add(new Span(MSGS.netIPv4ToolTipStatus()));\n@@ -592,28 +593,28 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             if (isWanEnabled()) {\n                 EntryClassUi.showWaitModal();\n                 TabTcpIpUi.this.gwtNetworkService\n-                        .findNetInterfaceConfigurations(new AsyncCallback<List<GwtNetInterfaceConfig>>() {\n-\n-                            @Override\n-                            public void onFailure(Throwable caught) {\n-                                EntryClassUi.hideWaitModal();\n-                                FailureHandler.handle(caught);\n-                            }\n-\n-                            @Override\n-                            public void onSuccess(List<GwtNetInterfaceConfig> result) {\n-                                EntryClassUi.hideWaitModal();\n-                                for (GwtNetInterfaceConfig config : result) {\n-                                    if (config.getStatusEnum().equals(GwtNetIfStatus.netIPv4StatusEnabledWAN) && !config\n-                                            .getName().equals(TabTcpIpUi.this.selectedNetIfConfig.getName())) {\n-                                        logger.log(Level.SEVERE, \"Error: Status Invalid\");\n-                                        TabTcpIpUi.this.wanModal.show();\n-                                        break;\n-                                    }\n+                    .findNetInterfaceConfigurations(new AsyncCallback<List<GwtNetInterfaceConfig>>() {\n+\n+                        @Override\n+                        public void onFailure(Throwable caught) {\n+                            EntryClassUi.hideWaitModal();\n+                            FailureHandler.handle(caught);\n+                        }\n+\n+                        @Override\n+                        public void onSuccess(List<GwtNetInterfaceConfig> result) {\n+                            EntryClassUi.hideWaitModal();\n+                            for (GwtNetInterfaceConfig config : result) {\n+                                if (config.getStatusEnum().equals(GwtNetIfStatus.netIPv4StatusEnabledWAN) && !config\n+                                    .getName().equals(TabTcpIpUi.this.selectedNetIfConfig.getName())) {\n+                                    logger.log(Level.SEVERE, \"Error: Status Invalid\");\n+                                    TabTcpIpUi.this.wanModal.show();\n+                                    break;\n                                 }\n                             }\n+                        }\n \n-                        });\n+                    });\n             }\n         });\n     }\n@@ -673,7 +674,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             this.subnet.setEnabled(false);\n             this.gateway.setEnabled(false);\n             if (VMSGS.netIPv4StatusDisabled().equals(this.status.getSelectedValue())\n-                    || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())) {\n+                || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())) {\n                 this.dns.setEnabled(false);\n             } else {\n                 this.dns.setEnabled(true);\n@@ -681,8 +682,8 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             this.configure.setSelectedIndex(this.configure.getItemText(0).equals(IPV4_MODE_DHCP_MESSAGE) ? 0 : 1);\n         } else {\n             if (VMSGS.netIPv4StatusDisabled().equals(this.status.getSelectedValue())\n-                    || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())\n-                    || VMSGS.netIPv4StatusL2Only().equals(this.status.getSelectedValue())) {\n+                || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())\n+                || VMSGS.netIPv4StatusL2Only().equals(this.status.getSelectedValue())) {\n                 String configureVal = this.configure.getItemText(0);\n                 this.configure.setSelectedIndex(configureVal.equals(IPV4_MODE_DHCP_MESSAGE) ? 0 : 1);\n                 this.ip.setText(\"\");\n@@ -728,7 +729,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         // custom DNS entries\n         String configureValue = this.configure.getSelectedItemText();\n         if (configureValue.equals(IPV4_MODE_DHCP_MESSAGE)\n-                && (this.dns.getValue() == null || this.dns.getValue().isEmpty())) {\n+            && (this.dns.getValue() == null || this.dns.getValue().isEmpty())) {\n             this.dnsRead.setVisible(true);\n         } else {\n             this.dnsRead.setVisible(false);\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "259",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "447",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "468",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "489",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "567",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "609",
                    "column": "46",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "633",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "641",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/41/TabTcpIpUi.java\nindex 0b7c1bec6ce..b26e05e32ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/41/TabTcpIpUi.java\n@@ -14,7 +14,6 @@ package org.eclipse.kura.web.client.ui.network;\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n-\n import org.eclipse.kura.web.client.messages.Messages;\n import org.eclipse.kura.web.client.messages.ValidationMessages;\n import org.eclipse.kura.web.client.ui.EntryClassUi;\n@@ -47,7 +46,6 @@ import org.gwtbootstrap3.client.ui.TextBox;\n import org.gwtbootstrap3.client.ui.constants.ValidationState;\n import org.gwtbootstrap3.client.ui.html.Span;\n import org.gwtbootstrap3.client.ui.html.Text;\n-\n import com.google.gwt.core.client.GWT;\n import com.google.gwt.uibinder.client.UiBinder;\n import com.google.gwt.uibinder.client.UiField;\n@@ -73,16 +71,12 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n     private static final String IPV4_STATUS_LAN_MESSAGE = MessageUtils.get(IPV4_STATUS_LAN);\n     private static final String IPV4_STATUS_UNMANAGED = GwtNetIfStatus.netIPv4StatusUnmanaged.name();\n     private static final String IPV4_STATUS_L2ONLY = GwtNetIfStatus.netIPv4StatusL2Only.name();\n-\n     private static final String IPV4_STATUS_DISABLED = GwtNetIfStatus.netIPv4StatusDisabled.name();\n     private static final String IPV4_STATUS_DISABLED_MESSAGE = MessageUtils.get(IPV4_STATUS_DISABLED);\n-\n     private static TabTcpIpUiUiBinder uiBinder = GWT.create(TabTcpIpUiUiBinder.class);\n     private static final Logger logger = Logger.getLogger(TabTcpIpUi.class.getSimpleName());\n-\n     private static final Messages MSGS = GWT.create(Messages.class);\n     private static final ValidationMessages VMSGS = GWT.create(ValidationMessages.class);\n-\n     private final GwtSecurityTokenServiceAsync gwtXSRFService = GWT.create(GwtSecurityTokenService.class);\n     private final GwtNetworkServiceAsync gwtNetworkService = GWT.create(GwtNetworkService.class);\n \n@@ -93,7 +87,6 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n     boolean dirty;\n     GwtNetInterfaceConfig selectedNetIfConfig;\n     NetworkTabsUi tabs;\n-\n     @UiField\n     FormGroup groupIp;\n     @UiField\n@@ -102,7 +95,6 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n     FormGroup groupGateway;\n     @UiField\n     FormGroup groupDns;\n-\n     @UiField\n     FormLabel labelStatus;\n     @UiField\n@@ -123,7 +115,6 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n     HelpBlock helpGateway;\n     @UiField\n     HelpBlock helpDns;\n-\n     @UiField\n     TextBox ip;\n     @UiField\n@@ -136,31 +127,22 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n     ListBox status;\n     @UiField\n     ListBox configure;\n-\n     @UiField\n     Button renew;\n-\n     @UiField\n     PanelHeader helpTitle;\n-\n     @UiField\n     ScrollPanel helpText;\n-\n     @UiField\n     Form form;\n-\n     @UiField\n     FormControlStatic dnsRead;\n-\n     @UiField\n     Modal wanModal;\n-\n     @UiField\n     Alert multipleWanWarn;\n-\n     @UiField\n     Text multipleWanWarnText;\n-\n     @UiField\n     HelpButton statusHelp;\n     @UiField\n@@ -181,9 +163,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.helpTitle.setText(MSGS.netHelpTitle());\n         initForm();\n         this.dnsRead.setVisible(false);\n-\n         initModal();\n-\n         initHelpButtons();\n     }\n \n@@ -200,10 +180,10 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n     @Override\n     public void setNetInterface(GwtNetInterfaceConfig config) {\n         setDirty(true);\n+\n         if (config == null) {\n             return;\n         }\n-\n         if (config.getSubnetMask() != null && \"255.255.255.255\".equals(config.getSubnetMask())) {\n             config.setSubnetMask(\"\");\n         }\n@@ -212,7 +192,6 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         logger.fine(this.selectedNetIfConfig.getName());\n         logger.fine(this.selectedNetIfConfig.getConfigMode());\n         logger.fine(this.selectedNetIfConfig.getIpAddress());\n-\n         initStatusValues();\n     }\n \n@@ -225,31 +204,29 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             this.status.addItem(MessageUtils.get(NET_IPV4_STATUS_L2_ONLY));\n             this.status.addItem(MessageUtils.get(NET_IPV4_STATUS_ENABLED_LAN));\n         }\n+\n         this.status.addItem(MessageUtils.get(NET_IPV4_STATUS_ENABLED_WAN));\n     }\n \n     @Override\n     public void getUpdatedNetInterface(GwtNetInterfaceConfig updatedNetIf) {\n         if (this.form != null) {\n-\n             if (this.status.getSelectedItemText().equals(MessageUtils.get(NET_IPV4_STATUS_UNMANAGED))) {\n                 updatedNetIf.setStatus(IPV4_STATUS_UNMANAGED);\n             } else if (this.status.getSelectedItemText().equals(MessageUtils.get(NET_IPV4_STATUS_L2_ONLY))) {\n                 updatedNetIf.setStatus(IPV4_STATUS_L2ONLY);\n             } else if (this.status.getSelectedItemText().equals(MessageUtils.get(NET_IPV4_STATUS_ENABLED_LAN))) {\n-                updatedNetIf.setStatus(IPV4_STATUS_LAN);\n+                       updatedNetIf.setStatus(IPV4_STATUS_LAN);\n             } else if (this.status.getSelectedItemText().equals(MessageUtils.get(NET_IPV4_STATUS_ENABLED_WAN))) {\n-                updatedNetIf.setStatus(IPV4_STATUS_WAN);\n-            } else {\n-                updatedNetIf.setStatus(IPV4_STATUS_DISABLED);\n-            }\n-\n+                       updatedNetIf.setStatus(IPV4_STATUS_WAN);\n+                   } else {\n+                       updatedNetIf.setStatus(IPV4_STATUS_DISABLED);\n+                   }\n             if (IPV4_MODE_DHCP_MESSAGE.equals(this.configure.getSelectedItemText())) {\n                 updatedNetIf.setConfigMode(IPV4_MODE_DHCP);\n             } else {\n                 updatedNetIf.setConfigMode(IPV4_MODE_MANUAL);\n             }\n-\n             if (this.ip.getValue() != null && !\"\".equals(this.ip.getValue().trim())) {\n                 updatedNetIf.setIpAddress(this.ip.getValue());\n             } else {\n@@ -278,10 +255,8 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         boolean flag = true;\n         // check and make sure if 'Enabled for WAN' then either DHCP is selected\n         // or STATIC and a gateway is set\n-        if (!IPV4_STATUS_DISABLED_MESSAGE.equals(this.status.getSelectedValue())\n-                && this.configure.getSelectedItemText().equalsIgnoreCase(VMSGS.netIPv4ConfigModeManual())) {\n-            if ((this.gateway.getValue() == null || \"\".equals(this.gateway.getValue().trim()))\n-                    && IPV4_STATUS_WAN_MESSAGE.equals(this.status.getSelectedValue())) {\n+        if (!IPV4_STATUS_DISABLED_MESSAGE.equals(this.status.getSelectedValue()) && this.configure.getSelectedItemText().equalsIgnoreCase(VMSGS.netIPv4ConfigModeManual())) {\n+            if ((this.gateway.getValue() == null || \"\".equals(this.gateway.getValue().trim())) && IPV4_STATUS_WAN_MESSAGE.equals(this.status.getSelectedValue())) {\n                 this.groupGateway.setValidationState(ValidationState.ERROR);\n                 this.helpGateway.setText(MSGS.netIPv4InvalidAddress());\n                 flag = false;\n@@ -291,8 +266,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n                 this.helpIp.setText(MSGS.netIPv4InvalidAddress());\n             }\n         }\n-        if (this.groupIp.getValidationState().equals(ValidationState.ERROR)\n-                || this.groupSubnet.getValidationState().equals(ValidationState.ERROR)\n+        if (this.groupIp.getValidationState().equals(ValidationState.ERROR) || this.groupSubnet.getValidationState().equals(ValidationState.ERROR)\n                 || this.groupGateway.getValidationState().equals(ValidationState.ERROR)\n                 || this.groupDns.getValidationState().equals(ValidationState.ERROR)) {\n             flag = false;\n@@ -331,6 +305,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         if (isDirty()) {\n             setDirty(false);\n             resetValidations();\n+\n             if (this.selectedNetIfConfig == null) {\n                 reset();\n             } else {\n@@ -342,6 +317,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n     @Override\n     public void clear() {\n         // Not needed\n+\n     }\n \n     // ---------------Private Methods------------\n@@ -364,29 +340,20 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.labelSubnet.setText(MSGS.netIPv4SubnetMask());\n         this.labelGateway.setText(MSGS.netIPv4Gateway());\n         this.labelDns.setText(MSGS.netIPv4DNSServers());\n-\n         for (GwtNetIfConfigMode mode : GwtNetIfConfigMode.values()) {\n             this.configure.addItem(MessageUtils.get(mode.name()));\n         }\n-\n         initStatusField();\n-\n         initConfigureField();\n-\n         initIpAddressField();\n-\n         initSubnetMaskField();\n-\n         initGatewayField();\n-\n         initDnsServersField();\n-\n         initDHCPLeaseField();\n     }\n \n     private void initDHCPLeaseField() {\n         // Renew DHCP Lease\n-\n         this.renew.setText(MSGS.netIPv4RenewDHCPLease());\n         this.renew.addClickHandler(event -> {\n             EntryClassUi.showWaitModal();\n@@ -400,26 +367,23 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n \n                 @Override\n                 public void onSuccess(GwtXSRFToken token) {\n-                    TabTcpIpUi.this.gwtNetworkService.renewDhcpLease(token,\n-                            TabTcpIpUi.this.selectedNetIfConfig.getName(), new AsyncCallback<Void>() {\n-\n-                                @Override\n-                                public void onFailure(Throwable ex) {\n-                                    EntryClassUi.hideWaitModal();\n-                                    FailureHandler.handle(ex);\n-                                }\n-\n-                                @Override\n-                                public void onSuccess(Void result) {\n-                                    refresh();\n-                                    EntryClassUi.hideWaitModal();\n-                                }\n-                            });\n+                    TabTcpIpUi.this.gwtNetworkService.renewDhcpLease(token, TabTcpIpUi.this.selectedNetIfConfig.getName(), new AsyncCallback<Void>() {\n+\n+                        @Override\n+                        public void onFailure(Throwable ex) {\n+                            EntryClassUi.hideWaitModal();\n+                            FailureHandler.handle(ex);\n+                        }\n+\n+                        @Override\n+                        public void onSuccess(Void result) {\n+                            refresh();\n+                            EntryClassUi.hideWaitModal();\n+                        }\n+                    });\n                 }\n-\n             });\n         });\n-\n         this.renew.addMouseOverHandler(event -> {\n             if (TabTcpIpUi.this.renew.isEnabled()) {\n                 TabTcpIpUi.this.helpText.clear();\n@@ -448,13 +412,11 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n \n             String[] aDnsServers = TabTcpIpUi.this.dns.getText().split(DNS_REGEX);\n             boolean validDnsList = true;\n-            \n             int dnsContentLength = TabTcpIpUi.this.dns.getText().trim().length();\n             int aDnsServersSize = aDnsServers.length;\n             if (dnsContentLength != 0 && aDnsServersSize == 0) {\n                 validDnsList = false;\n             }\n-            \n             for (String dnsEntry : aDnsServers) {\n                 if (dnsEntry.trim().length() >= 0 && !dnsEntry.trim().matches(FieldType.IPv4_ADDRESS.getRegex())) {\n                     validDnsList = false;\n@@ -481,8 +443,8 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.gateway.addMouseOutHandler(event -> resetHelp());\n         this.gateway.addValueChangeHandler(event -> {\n             setDirty(true);\n-            if (!TabTcpIpUi.this.gateway.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex())\n-                    && TabTcpIpUi.this.gateway.getText().trim().length() > 0) {\n+\n+            if (!TabTcpIpUi.this.gateway.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex()) && TabTcpIpUi.this.gateway.getText().trim().length() > 0) {\n                 TabTcpIpUi.this.groupGateway.setValidationState(ValidationState.ERROR);\n                 TabTcpIpUi.this.helpGateway.setText(MSGS.netIPv4InvalidAddress());\n             } else {\n@@ -502,8 +464,8 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.subnet.addMouseOutHandler(event -> resetHelp());\n         this.subnet.addValueChangeHandler(event -> {\n             setDirty(true);\n-            if (!TabTcpIpUi.this.subnet.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex())\n-                    && TabTcpIpUi.this.subnet.getText().trim().length() > 0) {\n+\n+            if (!TabTcpIpUi.this.subnet.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex()) && TabTcpIpUi.this.subnet.getText().trim().length() > 0) {\n                 TabTcpIpUi.this.groupSubnet.setValidationState(ValidationState.ERROR);\n                 TabTcpIpUi.this.helpSubnet.setText(MSGS.netIPv4InvalidAddress());\n             } else {\n@@ -523,8 +485,8 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.ip.addMouseOutHandler(event -> resetHelp());\n         this.ip.addValueChangeHandler(event -> {\n             setDirty(true);\n-            if (!TabTcpIpUi.this.ip.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex())\n-                    || TabTcpIpUi.this.ip.getText().trim().length() <= 0) {\n+\n+            if (!TabTcpIpUi.this.ip.getText().trim().matches(FieldType.IPv4_ADDRESS.getRegex()) || TabTcpIpUi.this.ip.getText().trim().length() <= 0) {\n                 TabTcpIpUi.this.groupIp.setValidationState(ValidationState.ERROR);\n                 TabTcpIpUi.this.helpIp.setText(MSGS.netIPv4InvalidAddress());\n             } else {\n@@ -549,13 +511,13 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             resetValidations();\n         });\n         // Initial view of configure\n+\n         if (this.configure.getSelectedItemText().equalsIgnoreCase(VMSGS.netIPv4ConfigModeDHCP())) {\n             // Using DHCP selected\n             this.ip.setEnabled(false);\n             this.subnet.setEnabled(false);\n             this.gateway.setEnabled(false);\n             this.renew.setEnabled(true);\n-\n         } else if (this.configure.getSelectedItemText().equalsIgnoreCase(VMSGS.netIPv4ConfigModeManual())) {\n             // Manually selected\n             this.ip.setEnabled(true);\n@@ -567,12 +529,11 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n \n     private void initStatusField() {\n         initStatusValues();\n-\n         this.status.addMouseOverHandler(event -> {\n             if (TabTcpIpUi.this.status.isEnabled()) {\n                 TabTcpIpUi.this.helpText.clear();\n-                if (TabTcpIpUi.this.selectedNetIfConfig != null\n-                        && TabTcpIpUi.this.selectedNetIfConfig.getHwTypeEnum() == GwtNetIfType.MODEM) {\n+\n+                if (TabTcpIpUi.this.selectedNetIfConfig != null && TabTcpIpUi.this.selectedNetIfConfig.getHwTypeEnum() == GwtNetIfType.MODEM) {\n                     TabTcpIpUi.this.helpText.add(new Span(MSGS.netIPv4ModemToolTipStatus()));\n                 } else {\n                     TabTcpIpUi.this.helpText.add(new Span(MSGS.netIPv4ToolTipStatus()));\n@@ -583,37 +544,34 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n         this.status.addChangeHandler(event -> {\n             setDirty(true);\n             TabTcpIpUi.this.tabs.adjustInterfaceTabs();\n-\n             refreshForm();\n             resetValidations();\n \n             // Check for other WAN interfaces if current interface is\n             // changed to WAN\n+\n             if (isWanEnabled()) {\n                 EntryClassUi.showWaitModal();\n-                TabTcpIpUi.this.gwtNetworkService\n-                        .findNetInterfaceConfigurations(new AsyncCallback<List<GwtNetInterfaceConfig>>() {\n+                TabTcpIpUi.this.gwtNetworkService.findNetInterfaceConfigurations(new AsyncCallback<List<GwtNetInterfaceConfig>>() {\n \n-                            @Override\n-                            public void onFailure(Throwable caught) {\n-                                EntryClassUi.hideWaitModal();\n-                                FailureHandler.handle(caught);\n-                            }\n+                    @Override\n+                    public void onFailure(Throwable caught) {\n+                        EntryClassUi.hideWaitModal();\n+                        FailureHandler.handle(caught);\n+                    }\n \n-                            @Override\n-                            public void onSuccess(List<GwtNetInterfaceConfig> result) {\n-                                EntryClassUi.hideWaitModal();\n-                                for (GwtNetInterfaceConfig config : result) {\n-                                    if (config.getStatusEnum().equals(GwtNetIfStatus.netIPv4StatusEnabledWAN) && !config\n-                                            .getName().equals(TabTcpIpUi.this.selectedNetIfConfig.getName())) {\n-                                        logger.log(Level.SEVERE, \"Error: Status Invalid\");\n-                                        TabTcpIpUi.this.wanModal.show();\n-                                        break;\n-                                    }\n-                                }\n+                    @Override\n+                    public void onSuccess(List<GwtNetInterfaceConfig> result) {\n+                        EntryClassUi.hideWaitModal();\n+                        for (GwtNetInterfaceConfig config : result) {\n+                            if (config.getStatusEnum().equals(GwtNetIfStatus.netIPv4StatusEnabledWAN) && !config.getName().equals(TabTcpIpUi.this.selectedNetIfConfig.getName())) {\n+                                logger.log(Level.SEVERE, \"Error: Status Invalid\");\n+                                TabTcpIpUi.this.wanModal.show();\n+                                break;\n                             }\n-\n-                        });\n+                        }\n+                    }\n+                });\n             }\n         });\n     }\n@@ -642,10 +600,10 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             }\n \n             this.tabs.adjustInterfaceTabs();\n-\n             this.ip.setText(this.selectedNetIfConfig.getIpAddress());\n             this.subnet.setText(this.selectedNetIfConfig.getSubnetMask());\n             this.gateway.setText(this.selectedNetIfConfig.getGateway());\n+\n             if (this.selectedNetIfConfig.getReadOnlyDnsServers() != null) {\n                 this.dnsRead.setText(this.selectedNetIfConfig.getReadOnlyDnsServers());\n                 this.dnsRead.setVisible(true);// ???\n@@ -653,7 +611,6 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n                 this.dnsRead.setText(\"\");\n                 this.dnsRead.setVisible(false);\n             }\n-\n             if (this.selectedNetIfConfig.getDnsServers() != null) {\n                 String dnsServersUi = this.selectedNetIfConfig.getDnsServers().replace(\" \", \"\\n\");\n                 this.dns.setValue(dnsServersUi);\n@@ -672,17 +629,17 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             this.ip.setEnabled(false);\n             this.subnet.setEnabled(false);\n             this.gateway.setEnabled(false);\n-            if (VMSGS.netIPv4StatusDisabled().equals(this.status.getSelectedValue())\n-                    || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())) {\n+\n+            if (VMSGS.netIPv4StatusDisabled().equals(this.status.getSelectedValue()) || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())) {\n                 this.dns.setEnabled(false);\n             } else {\n                 this.dns.setEnabled(true);\n             }\n+\n             this.configure.setSelectedIndex(this.configure.getItemText(0).equals(IPV4_MODE_DHCP_MESSAGE) ? 0 : 1);\n         } else {\n-            if (VMSGS.netIPv4StatusDisabled().equals(this.status.getSelectedValue())\n-                    || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())\n-                    || VMSGS.netIPv4StatusL2Only().equals(this.status.getSelectedValue())) {\n+            if (VMSGS.netIPv4StatusDisabled().equals(this.status.getSelectedValue()) || VMSGS.netIPv4StatusUnmanaged().equals(this.status.getSelectedValue())\n+            || VMSGS.netIPv4StatusL2Only().equals(this.status.getSelectedValue())) {\n                 String configureVal = this.configure.getItemText(0);\n                 this.configure.setSelectedIndex(configureVal.equals(IPV4_MODE_DHCP_MESSAGE) ? 0 : 1);\n                 this.ip.setText(\"\");\n@@ -702,6 +659,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n                     this.subnet.setEnabled(false);\n                     this.gateway.setEnabled(false);\n                     this.renew.setEnabled(true);\n+\n                     if (this.status.getSelectedValue().equals(IPV4_STATUS_WAN_MESSAGE)) {\n                         this.dns.setEnabled(true);\n                     } else {\n@@ -719,6 +677,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n                         this.gateway.setEnabled(false);\n                         this.dns.setEnabled(false);\n                     }\n+\n                     this.renew.setEnabled(false);\n                 }\n             }\n@@ -726,14 +685,13 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n \n         // Show read-only dns field when DHCP is selected and there are no\n         // custom DNS entries\n+\n         String configureValue = this.configure.getSelectedItemText();\n-        if (configureValue.equals(IPV4_MODE_DHCP_MESSAGE)\n-                && (this.dns.getValue() == null || this.dns.getValue().isEmpty())) {\n+        if (configureValue.equals(IPV4_MODE_DHCP_MESSAGE) && (this.dns.getValue() == null || this.dns.getValue().isEmpty())) {\n             this.dnsRead.setVisible(true);\n         } else {\n             this.dnsRead.setVisible(false);\n         }\n-\n     }\n \n     private void reset() {\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/41/TabTcpIpUi.java\nindex 0b7c1bec6ce..90579f41f72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/41/TabTcpIpUi.java\n@@ -648,7 +648,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             this.gateway.setText(this.selectedNetIfConfig.getGateway());\n             if (this.selectedNetIfConfig.getReadOnlyDnsServers() != null) {\n                 this.dnsRead.setText(this.selectedNetIfConfig.getReadOnlyDnsServers());\n-                this.dnsRead.setVisible(true);// ???\n+                this.dnsRead.setVisible(true); // ???\n             } else {\n                 this.dnsRead.setText(\"\");\n                 this.dnsRead.setVisible(false);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/41/TabTcpIpUi.java\nindex 0b7c1bec6ce..90579f41f72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/41/TabTcpIpUi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/41/TabTcpIpUi.java\n@@ -648,7 +648,7 @@ public class TabTcpIpUi extends Composite implements NetworkTab {\n             this.gateway.setText(this.selectedNetIfConfig.getGateway());\n             if (this.selectedNetIfConfig.getReadOnlyDnsServers() != null) {\n                 this.dnsRead.setText(this.selectedNetIfConfig.getReadOnlyDnsServers());\n-                this.dnsRead.setVisible(true);// ???\n+                this.dnsRead.setVisible(true); // ???\n             } else {\n                 this.dnsRead.setText(\"\");\n                 this.dnsRead.setVisible(false);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}