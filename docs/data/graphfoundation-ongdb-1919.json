{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1919",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1919/PhysicalTransactionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1919/PhysicalTransactionRepresentation.java\nindex 8147c7906b7..2b3fb4c008e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1919/PhysicalTransactionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1919/PhysicalTransactionRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.IOException;\n@@ -29,141 +30,141 @@ import org.neo4j.storageengine.api.StorageCommand;\n \n public class PhysicalTransactionRepresentation implements TransactionRepresentation\n {\n-    private final Collection<StorageCommand> commands;\n-    private byte[] additionalHeader;\n-    private int masterId;\n-    private int authorId;\n-    private long timeStarted;\n-    private long latestCommittedTxWhenStarted;\n-    private long timeCommitted;\n-\n-    /**\n-     * This is a bit of a smell, it's used only for committing slave transactions on the master. Effectively, this\n-     * identifies the lock session used to guard this transaction. The master ensures that lock session is live before\n-     * committing, to guard against locks timing out. We may want to refactor this design later on.\n-     */\n-    private int lockSessionIdentifier;\n-\n-    public PhysicalTransactionRepresentation( Collection<StorageCommand> commands )\n-    {\n-        this.commands = commands;\n-    }\n-\n-    public void setHeader( byte[] additionalHeader, int masterId, int authorId, long timeStarted,\n-                           long latestCommittedTxWhenStarted, long timeCommitted, int lockSession )\n-    {\n-        this.additionalHeader = additionalHeader;\n-        this.masterId = masterId;\n-        this.authorId = authorId;\n-        this.timeStarted = timeStarted;\n-        this.latestCommittedTxWhenStarted = latestCommittedTxWhenStarted;\n-        this.timeCommitted = timeCommitted;\n-        this.lockSessionIdentifier = lockSession;\n-    }\n-\n-    @Override\n-    public boolean accept( Visitor<StorageCommand,IOException> visitor ) throws IOException\n-    {\n-        for ( StorageCommand command : commands )\n-        {\n-            if ( visitor.visit( command ) )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public byte[] additionalHeader()\n-    {\n-        return additionalHeader;\n-    }\n-\n-    @Override\n-    public int getMasterId()\n-    {\n-        return masterId;\n-    }\n-\n-    @Override\n-    public int getAuthorId()\n-    {\n-        return authorId;\n-    }\n-\n-    @Override\n-    public long getTimeStarted()\n+  private final Collection<StorageCommand> commands;\n+  private byte[] additionalHeader;\n+  private int masterId;\n+  private int authorId;\n+  private long timeStarted;\n+  private long latestCommittedTxWhenStarted;\n+  private long timeCommitted;\n+\n+  /**\n+   * This is a bit of a smell, it's used only for committing slave transactions on the master. Effectively, this\n+   * identifies the lock session used to guard this transaction. The master ensures that lock session is live before\n+   * committing, to guard against locks timing out. We may want to refactor this design later on.\n+   */\n+  private int lockSessionIdentifier;\n+\n+  public PhysicalTransactionRepresentation(Collection<StorageCommand> commands)\n+  {\n+    this.commands = commands;\n+  }\n+\n+  public void setHeader(byte[] additionalHeader, int masterId, int authorId, long timeStarted,\n+                        long latestCommittedTxWhenStarted, long timeCommitted, int lockSession)\n+  {\n+    this.additionalHeader = additionalHeader;\n+    this.masterId = masterId;\n+    this.authorId = authorId;\n+    this.timeStarted = timeStarted;\n+    this.latestCommittedTxWhenStarted = latestCommittedTxWhenStarted;\n+    this.timeCommitted = timeCommitted;\n+    this.lockSessionIdentifier = lockSession;\n+  }\n+\n+  @Override\n+  public boolean accept(Visitor<StorageCommand, IOException> visitor) throws IOException\n+  {\n+    for (StorageCommand command : commands)\n     {\n-        return timeStarted;\n+      if (visitor.visit(command))\n+      {\n+        return true;\n+      }\n     }\n-\n-    @Override\n-    public long getLatestCommittedTxWhenStarted()\n-    {\n-        return latestCommittedTxWhenStarted;\n-    }\n-\n-    @Override\n-    public long getTimeCommitted()\n+    return false;\n+  }\n+\n+  @Override\n+  public byte[] additionalHeader()\n+  {\n+    return additionalHeader;\n+  }\n+\n+  @Override\n+  public int getMasterId()\n+  {\n+    return masterId;\n+  }\n+\n+  @Override\n+  public int getAuthorId()\n+  {\n+    return authorId;\n+  }\n+\n+  @Override\n+  public long getTimeStarted()\n+  {\n+    return timeStarted;\n+  }\n+\n+  @Override\n+  public long getLatestCommittedTxWhenStarted()\n+  {\n+    return latestCommittedTxWhenStarted;\n+  }\n+\n+  @Override\n+  public long getTimeCommitted()\n+  {\n+    return timeCommitted;\n+  }\n+\n+  @Override\n+  public int getLockSessionId()\n+  {\n+    return lockSessionIdentifier;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return timeCommitted;\n+      return true;\n     }\n-\n-    @Override\n-    public int getLockSessionId()\n-    {\n-        return lockSessionIdentifier;\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        PhysicalTransactionRepresentation that = (PhysicalTransactionRepresentation) o;\n-        return authorId == that.authorId\n-               && latestCommittedTxWhenStarted == that.latestCommittedTxWhenStarted\n-               && masterId == that.masterId\n-               && timeStarted == that.timeStarted\n-               && Arrays.equals( additionalHeader, that.additionalHeader )\n-               && commands.equals( that.commands );\n-    }\n-\n-    @Override\n-    public int hashCode()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        int result = commands.hashCode();\n-        result = 31 * result + (additionalHeader != null ? Arrays.hashCode( additionalHeader ) : 0);\n-        result = 31 * result + masterId;\n-        result = 31 * result + authorId;\n-        result = 31 * result + (int) (timeStarted ^ (timeStarted >>> 32));\n-        result = 31 * result + (int) (latestCommittedTxWhenStarted ^ (latestCommittedTxWhenStarted >>> 32));\n-        return result;\n+      return false;\n     }\n \n-    @Override\n-    public String toString()\n+    PhysicalTransactionRepresentation that = (PhysicalTransactionRepresentation) o;\n+    return authorId == that.authorId\n+        && latestCommittedTxWhenStarted == that.latestCommittedTxWhenStarted\n+        && masterId == that.masterId\n+        && timeStarted == that.timeStarted\n+        && Arrays.equals(additionalHeader, that.additionalHeader)\n+        && commands.equals(that.commands);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = commands.hashCode();\n+    result = 31 * result + (additionalHeader != null ? Arrays.hashCode(additionalHeader) : 0);\n+    result = 31 * result + masterId;\n+    result = 31 * result + authorId;\n+    result = 31 * result + (int) (timeStarted ^ (timeStarted >>> 32));\n+    result = 31 * result + (int) (latestCommittedTxWhenStarted ^ (latestCommittedTxWhenStarted >>> 32));\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder builder = new StringBuilder(getClass().getSimpleName()).append('[');\n+    builder.append(\"masterId:\").append(masterId).append(',');\n+    builder.append(\"authorId:\").append(authorId).append(',');\n+    builder.append(\"timeStarted:\").append(timeStarted).append(',');\n+    builder.append(\"latestCommittedTxWhenStarted:\").append(latestCommittedTxWhenStarted).append(',');\n+    builder.append(\"timeCommitted:\").append(timeCommitted).append(',');\n+    builder.append(\"lockSession:\").append(lockSessionIdentifier).append(',');\n+    builder.append(\"additionalHeader:\").append(Arrays.toString(additionalHeader));\n+    for (StorageCommand command : commands)\n     {\n-        StringBuilder builder = new StringBuilder( getClass().getSimpleName() ).append( '[' );\n-        builder.append( \"masterId:\" ).append( masterId ).append( ',' );\n-        builder.append( \"authorId:\" ).append( authorId ).append( ',' );\n-        builder.append( \"timeStarted:\" ).append( timeStarted ).append( ',' );\n-        builder.append( \"latestCommittedTxWhenStarted:\" ).append( latestCommittedTxWhenStarted ).append( ',' );\n-        builder.append( \"timeCommitted:\" ).append( timeCommitted ).append( ',' );\n-        builder.append( \"lockSession:\" ).append( lockSessionIdentifier ).append( ',' );\n-        builder.append( \"additionalHeader:\" ).append( Arrays.toString( additionalHeader ) );\n-        for ( StorageCommand command : commands )\n-        {\n-            builder.append( '\\n' ).append( command );\n-        }\n-        return builder.toString();\n+      builder.append('\\n').append(command);\n     }\n+    return builder.toString();\n+  }\n }\n",
            "diff_size": 205
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "146",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1919/PhysicalTransactionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1919/PhysicalTransactionRepresentation.java\nindex 8147c7906b7..5902d49b6ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1919/PhysicalTransactionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1919/PhysicalTransactionRepresentation.java\n@@ -49,9 +49,8 @@ public class PhysicalTransactionRepresentation implements TransactionRepresentat\n         this.commands = commands;\n     }\n \n-    public void setHeader( byte[] additionalHeader, int masterId, int authorId, long timeStarted,\n-                           long latestCommittedTxWhenStarted, long timeCommitted, int lockSession )\n-    {\n+    public void setHeader( byte[] additionalHeader, int masterId, int authorId, long timeStarted, long latestCommittedTxWhenStarted, long timeCommitted, int lockSession )\n+{\n         this.additionalHeader = additionalHeader;\n         this.masterId = masterId;\n         this.authorId = authorId;\n@@ -123,14 +122,14 @@ public class PhysicalTransactionRepresentation implements TransactionRepresentat\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n \n         PhysicalTransactionRepresentation that = (PhysicalTransactionRepresentation) o;\n-        return authorId == that.authorId\n-               && latestCommittedTxWhenStarted == that.latestCommittedTxWhenStarted\n+        return authorId == that.authorId&& latestCommittedTxWhenStarted == that.latestCommittedTxWhenStarted\n                && masterId == that.masterId\n                && timeStarted == that.timeStarted\n                && Arrays.equals( additionalHeader, that.additionalHeader )\n@@ -141,11 +140,11 @@ public class PhysicalTransactionRepresentation implements TransactionRepresentat\n     public int hashCode()\n     {\n         int result = commands.hashCode();\n-        result = 31 * result + (additionalHeader != null ? Arrays.hashCode( additionalHeader ) : 0);\n+        result = 31 * result + (additionalHeader != null ? Arrays.hashCode( additionalHeader ) : 0 );\n         result = 31 * result + masterId;\n         result = 31 * result + authorId;\n-        result = 31 * result + (int) (timeStarted ^ (timeStarted >>> 32));\n-        result = 31 * result + (int) (latestCommittedTxWhenStarted ^ (latestCommittedTxWhenStarted >>> 32));\n+        result = 31 * result + ( int) ( timeStarted ^ ( timeStarted >>> 32 ));\n+        result = 31 * result + ( int) ( latestCommittedTxWhenStarted ^ ( latestCommittedTxWhenStarted >>> 32 ));\n         return result;\n     }\n \n@@ -164,6 +163,7 @@ public class PhysicalTransactionRepresentation implements TransactionRepresentat\n         {\n             builder.append( '\\n' ).append( command );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}