{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1219",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "129",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "183",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "190",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "203",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "213",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "220",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "233",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "245",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "259",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "281",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "312",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1219/CommunityLockClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1219/CommunityLockClient.java\nindex 6d5b4666d56..33e371543a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1219/CommunityLockClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1219/CommunityLockClient.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.locking.community;\n \n import java.util.ArrayList;\n@@ -46,407 +47,390 @@ import static java.lang.String.format;\n \n public class CommunityLockClient implements Locks.Client\n {\n-    private final LockManagerImpl manager;\n-    private final LockTransaction lockTransaction = new LockTransaction();\n-\n-    private final PrimitiveIntObjectMap<PrimitiveLongObjectMap<LockResource>> sharedLocks = Primitive.intObjectMap();\n-    private final PrimitiveIntObjectMap<PrimitiveLongObjectMap<LockResource>> exclusiveLocks = Primitive.intObjectMap();\n-    private final PrimitiveLongObjectVisitor<LockResource,RuntimeException> readReleaser;\n-    private final PrimitiveLongObjectVisitor<LockResource,RuntimeException> writeReleaser;\n-    private final PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException> typeReadReleaser;\n-    private final PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException> typeWriteReleaser;\n-\n-    // To be able to close Locks.Client instance properly we should be able to do couple of things:\n-    //  - have a possibility to prevent new clients to come\n-    //  - wake up all the waiters and let them go\n-    //  - have a possibility to see how many clients are still using us and wait for them to finish\n-    // We need to do all of that to prevent a situation when a closing client will get a lock that will never be\n-    // closed and eventually will block other clients.\n-    private final LockClientStateHolder stateHolder = new LockClientStateHolder();\n-\n-    public CommunityLockClient( LockManagerImpl manager )\n+  private final LockManagerImpl manager;\n+  private final LockTransaction lockTransaction = new LockTransaction();\n+\n+  private final PrimitiveIntObjectMap<PrimitiveLongObjectMap<LockResource>> sharedLocks = Primitive.intObjectMap();\n+  private final PrimitiveIntObjectMap<PrimitiveLongObjectMap<LockResource>> exclusiveLocks = Primitive.intObjectMap();\n+  private final PrimitiveLongObjectVisitor<LockResource, RuntimeException> readReleaser;\n+  private final PrimitiveLongObjectVisitor<LockResource, RuntimeException> writeReleaser;\n+  private final PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>, RuntimeException> typeReadReleaser;\n+  private final PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>, RuntimeException> typeWriteReleaser;\n+\n+  // To be able to close Locks.Client instance properly we should be able to do couple of things:\n+  //  - have a possibility to prevent new clients to come\n+  //  - wake up all the waiters and let them go\n+  //  - have a possibility to see how many clients are still using us and wait for them to finish\n+  // We need to do all of that to prevent a situation when a closing client will get a lock that will never be\n+  // closed and eventually will block other clients.\n+  private final LockClientStateHolder stateHolder = new LockClientStateHolder();\n+\n+  public CommunityLockClient(LockManagerImpl manager)\n+  {\n+    this.manager = manager;\n+\n+    readReleaser = (key, lockResource) ->\n     {\n-        this.manager = manager;\n-\n-        readReleaser = ( key, lockResource ) ->\n-        {\n-            manager.releaseReadLock( lockResource, lockTransaction );\n-            return false;\n-        };\n+      manager.releaseReadLock(lockResource, lockTransaction);\n+      return false;\n+    };\n \n-        writeReleaser = ( key, lockResource ) ->\n-        {\n-            manager.releaseWriteLock( lockResource, lockTransaction );\n-            return false;\n-        };\n-\n-        typeReadReleaser = ( key, value ) ->\n-        {\n-            value.visitEntries( readReleaser );\n-            return false;\n-        };\n-\n-        typeWriteReleaser = ( key, value ) ->\n-        {\n-            value.visitEntries( writeReleaser );\n-            return false;\n-        };\n-    }\n-\n-    @Override\n-    public void acquireShared( LockTracer tracer, ResourceType resourceType, long... resourceIds )\n+    writeReleaser = (key, lockResource) ->\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n-        {\n-            PrimitiveLongObjectMap<LockResource> localLocks = localShared( resourceType );\n-            for ( long resourceId : resourceIds )\n-            {\n-                LockResource resource = localLocks.get( resourceId );\n-                if ( resource != null )\n-                {\n-                    resource.acquireReference();\n-                }\n-                else\n-                {\n-                    resource = new LockResource( resourceType, resourceId );\n-                    if ( manager.getReadLock( tracer, resource, lockTransaction ) )\n-                    {\n-                        localLocks.put( resourceId, resource );\n-                    }\n-                    else\n-                    {\n-                        throw new LockClientStoppedException( this );\n-                    }\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n-        }\n-    }\n+      manager.releaseWriteLock(lockResource, lockTransaction);\n+      return false;\n+    };\n \n-    @Override\n-    public void acquireExclusive( LockTracer tracer, ResourceType resourceType, long... resourceIds )\n+    typeReadReleaser = (key, value) ->\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n-        {\n-            PrimitiveLongObjectMap<LockResource> localLocks = localExclusive( resourceType );\n-            for ( long resourceId : resourceIds )\n-            {\n-                LockResource resource = localLocks.get( resourceId );\n-                if ( resource != null )\n-                {\n-                    resource.acquireReference();\n-                }\n-                else\n-                {\n-                    resource = new LockResource( resourceType, resourceId );\n-                    if ( manager.getWriteLock( tracer, resource, lockTransaction ) )\n-                    {\n-                        localLocks.put( resourceId, resource );\n-                    }\n-                    else\n-                    {\n-                        throw new LockClientStoppedException( this );\n-                    }\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n-        }\n-    }\n+      value.visitEntries(readReleaser);\n+      return false;\n+    };\n \n-    @Override\n-    public boolean tryExclusiveLock( ResourceType resourceType, long resourceId )\n+    typeWriteReleaser = (key, value) ->\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n-        {\n-            PrimitiveLongObjectMap<LockResource> localLocks = localExclusive( resourceType );\n-            LockResource resource = localLocks.get( resourceId );\n-            if ( resource != null )\n-            {\n-                resource.acquireReference();\n-                return true;\n-            }\n-            else\n-            {\n-                resource = new LockResource( resourceType, resourceId );\n-                if ( manager.tryWriteLock( resource, lockTransaction ) )\n-                {\n-                    localLocks.put( resourceId, resource );\n-                    return true;\n-                }\n-                else\n-                {\n-                    return false;\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n-        }\n-    }\n-\n-    @Override\n-    public boolean trySharedLock( ResourceType resourceType, long resourceId )\n+      value.visitEntries(writeReleaser);\n+      return false;\n+    };\n+  }\n+\n+  @Override\n+  public void acquireShared(LockTracer tracer, ResourceType resourceType, long... resourceIds)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n+      PrimitiveLongObjectMap<LockResource> localLocks = localShared(resourceType);\n+      for (long resourceId : resourceIds)\n+      {\n+        LockResource resource = localLocks.get(resourceId);\n+        if (resource != null)\n         {\n-            PrimitiveLongObjectMap<LockResource> localLocks = localShared( resourceType );\n-            LockResource resource = localLocks.get( resourceId );\n-            if ( resource != null )\n-            {\n-                resource.acquireReference();\n-                return true;\n-            }\n-            else\n-            {\n-                resource = new LockResource( resourceType, resourceId );\n-                if ( manager.tryReadLock( resource, lockTransaction ) )\n-                {\n-                    localLocks.put( resourceId, resource );\n-                    return true;\n-                }\n-                else\n-                {\n-                    return false;\n-                }\n-            }\n-        }\n-        finally\n+          resource.acquireReference();\n+        } else\n         {\n-            stateHolder.decrementActiveClients();\n+          resource = new LockResource(resourceType, resourceId);\n+          if (manager.getReadLock(tracer, resource, lockTransaction))\n+          {\n+            localLocks.put(resourceId, resource);\n+          } else\n+          {\n+            throw new LockClientStoppedException(this);\n+          }\n         }\n-    }\n-\n-    @Override\n-    public boolean reEnterShared( ResourceType resourceType, long resourceId )\n+      }\n+    } finally\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n-        {\n-            return reEnter( localShared( resourceType ), resourceId );\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n-        }\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public boolean reEnterExclusive( ResourceType resourceType, long resourceId )\n+  @Override\n+  public void acquireExclusive(LockTracer tracer, ResourceType resourceType, long... resourceIds)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n+      PrimitiveLongObjectMap<LockResource> localLocks = localExclusive(resourceType);\n+      for (long resourceId : resourceIds)\n+      {\n+        LockResource resource = localLocks.get(resourceId);\n+        if (resource != null)\n         {\n-            return reEnter( localExclusive( resourceType ), resourceId );\n-        }\n-        finally\n+          resource.acquireReference();\n+        } else\n         {\n-            stateHolder.decrementActiveClients();\n+          resource = new LockResource(resourceType, resourceId);\n+          if (manager.getWriteLock(tracer, resource, lockTransaction))\n+          {\n+            localLocks.put(resourceId, resource);\n+          } else\n+          {\n+            throw new LockClientStoppedException(this);\n+          }\n         }\n+      }\n+    } finally\n+    {\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    private boolean reEnter( PrimitiveLongObjectMap<LockResource> localLocks, long resourceId )\n+  @Override\n+  public boolean tryExclusiveLock(ResourceType resourceType, long resourceId)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        LockResource resource = localLocks.get( resourceId );\n-        if ( resource != null )\n+      PrimitiveLongObjectMap<LockResource> localLocks = localExclusive(resourceType);\n+      LockResource resource = localLocks.get(resourceId);\n+      if (resource != null)\n+      {\n+        resource.acquireReference();\n+        return true;\n+      } else\n+      {\n+        resource = new LockResource(resourceType, resourceId);\n+        if (manager.tryWriteLock(resource, lockTransaction))\n         {\n-            resource.acquireReference();\n-            return true;\n-        }\n-        else\n+          localLocks.put(resourceId, resource);\n+          return true;\n+        } else\n         {\n-            return false;\n+          return false;\n         }\n+      }\n+    } finally\n+    {\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public void releaseShared( ResourceType resourceType, long... resourceIds )\n+  @Override\n+  public boolean trySharedLock(ResourceType resourceType, long resourceId)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n+      PrimitiveLongObjectMap<LockResource> localLocks = localShared(resourceType);\n+      LockResource resource = localLocks.get(resourceId);\n+      if (resource != null)\n+      {\n+        resource.acquireReference();\n+        return true;\n+      } else\n+      {\n+        resource = new LockResource(resourceType, resourceId);\n+        if (manager.tryReadLock(resource, lockTransaction))\n         {\n-            PrimitiveLongObjectMap<LockResource> localLocks = localShared( resourceType );\n-            for ( long resourceId : resourceIds )\n-            {\n-                LockResource resource = localLocks.get( resourceId );\n-                if ( resource.releaseReference() == 0 )\n-                {\n-                    localLocks.remove( resourceId );\n-                    manager.releaseReadLock( new LockResource( resourceType, resourceId ), lockTransaction );\n-                }\n-            }\n-        }\n-        finally\n+          localLocks.put(resourceId, resource);\n+          return true;\n+        } else\n         {\n-            stateHolder.decrementActiveClients();\n+          return false;\n         }\n+      }\n+    } finally\n+    {\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public void releaseExclusive( ResourceType resourceType, long... resourceIds )\n+  @Override\n+  public boolean reEnterShared(ResourceType resourceType, long resourceId)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n-        {\n-            PrimitiveLongObjectMap<LockResource> localLocks = localExclusive( resourceType );\n-            for ( long resourceId : resourceIds )\n-            {\n-                LockResource resource = localLocks.get( resourceId );\n-                if ( resource.releaseReference() == 0 )\n-                {\n-                    localLocks.remove( resourceId );\n-                    manager.releaseWriteLock( new LockResource( resourceType, resourceId ), lockTransaction );\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n-        }\n+      return reEnter(localShared(resourceType), resourceId);\n+    } finally\n+    {\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public void prepare()\n+  @Override\n+  public boolean reEnterExclusive(ResourceType resourceType, long resourceId)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n+    {\n+      return reEnter(localExclusive(resourceType), resourceId);\n+    } finally\n     {\n-        stateHolder.prepare( this );\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public void stop()\n+  private boolean reEnter(PrimitiveLongObjectMap<LockResource> localLocks, long resourceId)\n+  {\n+    LockResource resource = localLocks.get(resourceId);\n+    if (resource != null)\n     {\n-        // closing client to prevent any new client to come\n-        if ( stateHolder.stopClient() )\n-        {\n-            // wake up and terminate waiters\n-            terminateAllWaitersAndWaitForClientsToLeave();\n-            releaseLocks();\n-        }\n+      resource.acquireReference();\n+      return true;\n+    } else\n+    {\n+      return false;\n     }\n+  }\n \n-    private void terminateAllWaitersAndWaitForClientsToLeave()\n+  @Override\n+  public void releaseShared(ResourceType resourceType, long... resourceIds)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        terminateAllWaiters();\n-        // wait for all active clients to go and terminate latecomers\n-        while ( stateHolder.hasActiveClients() )\n+      PrimitiveLongObjectMap<LockResource> localLocks = localShared(resourceType);\n+      for (long resourceId : resourceIds)\n+      {\n+        LockResource resource = localLocks.get(resourceId);\n+        if (resource.releaseReference() == 0)\n         {\n-            terminateAllWaiters();\n-            LockSupport.parkNanos( TimeUnit.MILLISECONDS.toNanos( 20 ) );\n+          localLocks.remove(resourceId);\n+          manager.releaseReadLock(new LockResource(resourceType, resourceId), lockTransaction);\n         }\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        stateHolder.closeClient();\n-        terminateAllWaitersAndWaitForClientsToLeave();\n-        releaseLocks();\n-    }\n-\n-    private void releaseLocks()\n+      }\n+    } finally\n     {\n-        exclusiveLocks.visitEntries( typeWriteReleaser );\n-        sharedLocks.visitEntries( typeReadReleaser );\n-        exclusiveLocks.clear();\n-        sharedLocks.clear();\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    // waking up and terminate all waiters that were waiting for any lock for current client\n-    private void terminateAllWaiters()\n+  @Override\n+  public void releaseExclusive(ResourceType resourceType, long... resourceIds)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        manager.accept( lock ->\n+      PrimitiveLongObjectMap<LockResource> localLocks = localExclusive(resourceType);\n+      for (long resourceId : resourceIds)\n+      {\n+        LockResource resource = localLocks.get(resourceId);\n+        if (resource.releaseReference() == 0)\n         {\n-            lock.terminateLockRequestsForLockTransaction( lockTransaction );\n-            return false;\n-        } );\n-    }\n-\n-    @Override\n-    public int getLockSessionId()\n+          localLocks.remove(resourceId);\n+          manager.releaseWriteLock(new LockResource(resourceType, resourceId), lockTransaction);\n+        }\n+      }\n+    } finally\n     {\n-        return lockTransaction.getId();\n+      stateHolder.decrementActiveClients();\n     }\n-\n-    @Override\n-    public Stream<ActiveLock> activeLocks()\n+  }\n+\n+  @Override\n+  public void prepare()\n+  {\n+    stateHolder.prepare(this);\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    // closing client to prevent any new client to come\n+    if (stateHolder.stopClient())\n     {\n-        List<ActiveLock> locks = new ArrayList<>();\n-        exclusiveLocks.visitEntries( collectActiveLocks( locks, ActiveLock.Factory.EXCLUSIVE_LOCK ) );\n-        sharedLocks.visitEntries( collectActiveLocks( locks, ActiveLock.Factory.SHARED_LOCK ) );\n-        return locks.stream();\n+      // wake up and terminate waiters\n+      terminateAllWaitersAndWaitForClientsToLeave();\n+      releaseLocks();\n     }\n+  }\n \n-    @Override\n-    public long activeLockCount()\n+  private void terminateAllWaitersAndWaitForClientsToLeave()\n+  {\n+    terminateAllWaiters();\n+    // wait for all active clients to go and terminate latecomers\n+    while (stateHolder.hasActiveClients())\n     {\n-        LockCounter counter = new LockCounter();\n-        exclusiveLocks.visitEntries( counter );\n-        sharedLocks.visitEntries( counter );\n-        return counter.locks;\n+      terminateAllWaiters();\n+      LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(20));\n     }\n-\n-    private static class LockCounter\n-            implements PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException>\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    stateHolder.closeClient();\n+    terminateAllWaitersAndWaitForClientsToLeave();\n+    releaseLocks();\n+  }\n+\n+  private void releaseLocks()\n+  {\n+    exclusiveLocks.visitEntries(typeWriteReleaser);\n+    sharedLocks.visitEntries(typeReadReleaser);\n+    exclusiveLocks.clear();\n+    sharedLocks.clear();\n+  }\n+\n+  // waking up and terminate all waiters that were waiting for any lock for current client\n+  private void terminateAllWaiters()\n+  {\n+    manager.accept(lock ->\n     {\n-        long locks;\n+      lock.terminateLockRequestsForLockTransaction(lockTransaction);\n+      return false;\n+    });\n+  }\n+\n+  @Override\n+  public int getLockSessionId()\n+  {\n+    return lockTransaction.getId();\n+  }\n+\n+  @Override\n+  public Stream<ActiveLock> activeLocks()\n+  {\n+    List<ActiveLock> locks = new ArrayList<>();\n+    exclusiveLocks.visitEntries(collectActiveLocks(locks, ActiveLock.Factory.EXCLUSIVE_LOCK));\n+    sharedLocks.visitEntries(collectActiveLocks(locks, ActiveLock.Factory.SHARED_LOCK));\n+    return locks.stream();\n+  }\n+\n+  @Override\n+  public long activeLockCount()\n+  {\n+    LockCounter counter = new LockCounter();\n+    exclusiveLocks.visitEntries(counter);\n+    sharedLocks.visitEntries(counter);\n+    return counter.locks;\n+  }\n+\n+  private static class LockCounter\n+      implements PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>, RuntimeException>\n+  {\n+    long locks;\n \n-        @Override\n-        public boolean visited( int key, PrimitiveLongObjectMap<LockResource> value )\n-        {\n-            locks += value.size();\n-            return false;\n-        }\n-    }\n-\n-    private static PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException> collectActiveLocks(\n-            List<ActiveLock> locks, ActiveLock.Factory activeLock )\n+    @Override\n+    public boolean visited(int key, PrimitiveLongObjectMap<LockResource> value)\n     {\n-        return ( typeId, exclusive ) ->\n-        {\n-            ResourceType resourceType = ResourceTypes.fromId( typeId );\n-            exclusive.visitEntries( ( resourceId, lock ) ->\n-            {\n-                locks.add( activeLock.create( resourceType, resourceId ) );\n-                return false;\n-            } );\n-            return false;\n-        };\n+      locks += value.size();\n+      return false;\n     }\n+  }\n \n-    private PrimitiveLongObjectMap<LockResource> localShared( ResourceType resourceType )\n+  private static PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>, RuntimeException> collectActiveLocks(\n+      List<ActiveLock> locks, ActiveLock.Factory activeLock)\n+  {\n+    return (typeId, exclusive) ->\n     {\n-        PrimitiveLongObjectMap<LockResource> map = sharedLocks.get( resourceType.typeId() );\n-        if ( map == null )\n-        {\n-            map = Primitive.longObjectMap();\n-            sharedLocks.put( resourceType.typeId(), map );\n-        }\n-        return map;\n-    }\n-\n-    private PrimitiveLongObjectMap<LockResource> localExclusive( ResourceType resourceType )\n+      ResourceType resourceType = ResourceTypes.fromId(typeId);\n+      exclusive.visitEntries((resourceId, lock) ->\n+      {\n+        locks.add(activeLock.create(resourceType, resourceId));\n+        return false;\n+      });\n+      return false;\n+    };\n+  }\n+\n+  private PrimitiveLongObjectMap<LockResource> localShared(ResourceType resourceType)\n+  {\n+    PrimitiveLongObjectMap<LockResource> map = sharedLocks.get(resourceType.typeId());\n+    if (map == null)\n     {\n-        PrimitiveLongObjectMap<LockResource> map = exclusiveLocks.get( resourceType.typeId() );\n-        if ( map == null )\n-        {\n-            map = Primitive.longObjectMap();\n-            exclusiveLocks.put( resourceType.typeId(), map );\n-        }\n-        return map;\n+      map = Primitive.longObjectMap();\n+      sharedLocks.put(resourceType.typeId(), map);\n     }\n+    return map;\n+  }\n \n-    @Override\n-    public String toString()\n+  private PrimitiveLongObjectMap<LockResource> localExclusive(ResourceType resourceType)\n+  {\n+    PrimitiveLongObjectMap<LockResource> map = exclusiveLocks.get(resourceType.typeId());\n+    if (map == null)\n     {\n-        return format( \"%s[%d]\", getClass().getSimpleName(), getLockSessionId() );\n+      map = Primitive.longObjectMap();\n+      exclusiveLocks.put(resourceType.typeId(), map);\n     }\n+    return map;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"%s[%d]\", getClass().getSimpleName(), getLockSessionId());\n+  }\n }\n",
            "diff_size": 517
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "407",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1219/CommunityLockClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1219/CommunityLockClient.java\nindex 6d5b4666d56..c7575b38974 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1219/CommunityLockClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1219/CommunityLockClient.java\n@@ -39,8 +39,6 @@ import org.neo4j.kernel.impl.locking.ResourceTypes;\n import org.neo4j.storageengine.api.lock.ResourceType;\n \n import static java.lang.String.format;\n-\n-\n // Please note. Except separate test cases for particular classes related to community locking\n // see also org.neo4j.kernel.impl.locking.community.CommunityLocksCompatibility test suite\n \n@@ -394,8 +392,7 @@ public class CommunityLockClient implements Locks.Client\n         return counter.locks;\n     }\n \n-    private static class LockCounter\n-            implements PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException>\n+    private static class LockCounter implements PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException>\n     {\n         long locks;\n \n@@ -407,8 +404,7 @@ public class CommunityLockClient implements Locks.Client\n         }\n     }\n \n-    private static PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException> collectActiveLocks(\n-            List<ActiveLock> locks, ActiveLock.Factory activeLock )\n+    private static PrimitiveIntObjectVisitor<PrimitiveLongObjectMap<LockResource>,RuntimeException> collectActiveLocks( List<ActiveLock> locks, ActiveLock.Factory activeLock )\n     {\n         return ( typeId, exclusive ) ->\n         {\n@@ -430,7 +426,8 @@ public class CommunityLockClient implements Locks.Client\n             map = Primitive.longObjectMap();\n             sharedLocks.put( resourceType.typeId(), map );\n         }\n-        return map;\n+\n+return map;\n     }\n \n     private PrimitiveLongObjectMap<LockResource> localExclusive( ResourceType resourceType )\n@@ -441,7 +438,8 @@ public class CommunityLockClient implements Locks.Client\n             map = Primitive.longObjectMap();\n             exclusiveLocks.put( resourceType.typeId(), map );\n         }\n-        return map;\n+\n+return map;\n     }\n \n     @Override\n@@ -449,4 +447,4 @@ public class CommunityLockClient implements Locks.Client\n     {\n         return format( \"%s[%d]\", getClass().getSimpleName(), getLockSessionId() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}