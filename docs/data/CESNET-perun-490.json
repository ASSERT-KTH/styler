{
    "project_name": "CESNET-perun",
    "error_id": "490",
    "information": {
        "errors": [
            {
                "line": "46",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t * @param fileName if not null, use file for generating. if null use stdout\n\t * @param newLDAPversion if true, then do not use GroupOfUniqueNames object class\n\t * \n\t * @throws InternalErrorException\n\t */\n\tpublic Main(String fileName) throws InternalErrorException {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/490/Main.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/490/Main.java\nindex 85c45f64420..7842159995e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/490/Main.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/490/Main.java\n@@ -6,6 +6,7 @@ import cz.metacentrum.perun.core.api.exceptions.PrivilegeException;\n import cz.metacentrum.perun.core.api.exceptions.WrongAttributeAssignmentException;\n import cz.metacentrum.perun.ldapc.initializer.beans.PerunInitializer;\n import cz.metacentrum.perun.ldapc.initializer.utils.Utils;\n+\n import java.io.FileNotFoundException;\n import java.io.IOException;\n \n@@ -19,107 +20,106 @@ import org.slf4j.LoggerFactory;\n  */\n public class Main {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(Main.class);\n+    private final static Logger log = LoggerFactory.getLogger(Main.class);\n \n-\tpublic static void main(String[] args) throws Exception {\n-\t\t//Default is old version and stdout (null file)\n-\t\tString fileName = null;\n+    public static void main(String[] args) throws Exception {\n+        //Default is old version and stdout (null file)\n+        String fileName = null;\n \n-\t\tif(args.length > 1 || args.length == 0) {\n-\t\t\tSystem.out.println(help());\n-\t\t} else if(args[0].equals(\"-h\") || args[0].equals(\"--help\")) {\n-\t\t\tSystem.out.println(help());\n-\t\t} else {\n-\t\t\tfileName = args[0];\n-\t\t\tMain main;\n-\t\t\tmain = new Main(fileName);\n-\t\t}\n-\t}\n+        if (args.length > 1 || args.length == 0) {\n+            System.out.println(help());\n+        } else if (args[0].equals(\"-h\") || args[0].equals(\"--help\")) {\n+            System.out.println(help());\n+        } else {\n+            fileName = args[0];\n+            Main main;\n+            main = new Main(fileName);\n+        }\n+    }\n \n-\t/**\n-\t * Main class for purpose of generating LDIF\n-\t *\n-\t * GroupOfUniqueNames object class is not supported in new instances of perun LDAP\n-\t *\n-\t * @param fileName if not null, use file for generating. if null use stdout\n-\t * @param newLDAPversion if true, then do not use GroupOfUniqueNames object class\n-\t * \n-\t * @throws InternalErrorException\n-\t */\n-\tpublic Main(String fileName) throws InternalErrorException {\n-\t\tPerunInitializer perunInitializer = null;\n-\t\ttry {\n-\t\t\ttry {\n-\t\t\t\tperunInitializer = new PerunInitializer(fileName);\n-\t\t\t} catch (InternalErrorException ex) {\n-\t\t\t\tSystem.err.println(\"There is problem with Initializing of PerunInitializer. More info can be found in \" + fileName);\n-\t\t\t\tthrow ex;\n-\t\t\t} catch (FileNotFoundException ex) {\n-\t\t\t\tSystem.err.println(\"There is problem with preparing writer to file \" + fileName);\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n+    /**\n+     * Main class for purpose of generating LDIF\n+     * <p>\n+     * GroupOfUniqueNames object class is not supported in new instances of perun LDAP\n+     *\n+     * @param fileName       if not null, use file for generating. if null use stdout\n+     * @param newLDAPversion if true, then do not use GroupOfUniqueNames object class\n+     * @throws InternalErrorException\n+     */\n+    public Main(String fileName) throws InternalErrorException {\n+        PerunInitializer perunInitializer = null;\n+        try {\n+            try {\n+                perunInitializer = new PerunInitializer(fileName);\n+            } catch (InternalErrorException ex) {\n+                System.err.println(\"There is problem with Initializing of PerunInitializer. More info can be found in \" + fileName);\n+                throw ex;\n+            } catch (FileNotFoundException ex) {\n+                System.err.println(\"There is problem with preparing writer to file \" + fileName);\n+                throw new InternalErrorException(ex);\n+            }\n \n-\t\t\t//get last message id before start of initializing\n-\t\t\tint LastMessageBeforeInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n-\t\t\tSystem.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n+            //get last message id before start of initializing\n+            int LastMessageBeforeInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n+            System.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n \n-\t\t\ttry {\n-\t\t\t\tUtils.generateAllVosToWriter(perunInitializer);\n-\t\t\t\tUtils.generateAllGroupsToWriter(perunInitializer);\n-\t\t\t\tUtils.generateAllResourcesToWriter(perunInitializer);\n-\t\t\t\tUtils.generateAllUsersToWriter(perunInitializer);\n-\t\t\t} catch (IOException ex) {\n-\t\t\t\tSystem.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n-\t\t\t\tSystem.err.println(\"Problem with initializing users, there is an attribute which probably not exists.\");\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n+            try {\n+                Utils.generateAllVosToWriter(perunInitializer);\n+                Utils.generateAllGroupsToWriter(perunInitializer);\n+                Utils.generateAllResourcesToWriter(perunInitializer);\n+                Utils.generateAllUsersToWriter(perunInitializer);\n+            } catch (IOException ex) {\n+                System.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n+                throw new InternalErrorException(ex);\n+            } catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n+                System.err.println(\"Problem with initializing users, there is an attribute which probably not exists.\");\n+                throw new InternalErrorException(ex);\n+            }\n \n-\t\t\t//get last message id after initializing\n-\t\t\tint LastMessageAfterInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n-\t\t\tSystem.err.println(\"Last message id after initializing: \" + LastMessageAfterInitializingData + '\\n');\n+            //get last message id after initializing\n+            int LastMessageAfterInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n+            System.err.println(\"Last message id after initializing: \" + LastMessageAfterInitializingData + '\\n');\n \n-\t\t\t//This is the only operation of WRITING to the DB\n-\t\t\t//Call RPC-LIB for this purpose\n-\t\t\ttry {\n-\t\t\t\tUtils.setLastProcessedId(perunInitializer.getPerunPrincipal(), perunInitializer.getConsumerName(), LastMessageAfterInitializingData);\n-\t\t\t} catch (InternalErrorException | PrivilegeException ex) {\n-\t\t\t\tSystem.err.println(\"Can't set last processed ID because of lack of privileges or some Internal error.\");\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} finally {\n-\t\t\t//Close writer if already opened\n-\t\t\tif(perunInitializer != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tperunInitializer.closeWriter();\n-\t\t\t\t} catch(IOException ex) {\n-\t\t\t\t\tSystem.err.println(\"Can't close writer by normal way.\");\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+            //This is the only operation of WRITING to the DB\n+            //Call RPC-LIB for this purpose\n+            try {\n+                Utils.setLastProcessedId(perunInitializer.getPerunPrincipal(), perunInitializer.getConsumerName(), LastMessageAfterInitializingData);\n+            } catch (InternalErrorException | PrivilegeException ex) {\n+                System.err.println(\"Can't set last processed ID because of lack of privileges or some Internal error.\");\n+                throw new InternalErrorException(ex);\n+            }\n+        } finally {\n+            //Close writer if already opened\n+            if (perunInitializer != null) {\n+                try {\n+                    perunInitializer.closeWriter();\n+                } catch (IOException ex) {\n+                    System.err.println(\"Can't close writer by normal way.\");\n+                    throw new InternalErrorException(ex);\n+                }\n+            }\n+        }\n \n-\t\tSystem.err.println(\"Generating of initializing LDIF done without error!\");\n-\t}\n+        System.err.println(\"Generating of initializing LDIF done without error!\");\n+    }\n \n-\t/**\n-\t * Message with help about usage.\n-\t *\n-\t * @return message with help\n-\t */\n-\tprivate static String help() {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tsb.append(\"--------------HELP-------------\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-g           =>  generate ldif to stdout\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-gnew        =>  generate ldif without objectClass groupOfUniqueNames to stdout\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-g [file]    =>  generate ldif to file\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-gnew [file] =>  generate ldif without objectClass groupOfUniqueNames to file\");\n-\t\tsb.append('\\n');\n-\t\treturn sb.toString();\n-\t}\n+    /**\n+     * Message with help about usage.\n+     *\n+     * @return message with help\n+     */\n+    private static String help() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"--------------HELP-------------\");\n+        sb.append('\\n');\n+        sb.append(\"-g           =>  generate ldif to stdout\");\n+        sb.append('\\n');\n+        sb.append(\"-gnew        =>  generate ldif without objectClass groupOfUniqueNames to stdout\");\n+        sb.append('\\n');\n+        sb.append(\"-g [file]    =>  generate ldif to file\");\n+        sb.append('\\n');\n+        sb.append(\"-gnew [file] =>  generate ldif without objectClass groupOfUniqueNames to file\");\n+        sb.append('\\n');\n+        return sb.toString();\n+    }\n }\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/490/Main.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/490/Main.java\nindex 85c45f64420..7d677b7d57a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/490/Main.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/490/Main.java\n@@ -8,7 +8,6 @@ import cz.metacentrum.perun.ldapc.initializer.beans.PerunInitializer;\n import cz.metacentrum.perun.ldapc.initializer.utils.Utils;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -17,109 +16,120 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Michal Stava <stavamichal@gmail.com>\n  */\n+\n+\n public class Main {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(Main.class);\n-\n-\tpublic static void main(String[] args) throws Exception {\n-\t\t//Default is old version and stdout (null file)\n-\t\tString fileName = null;\n-\n-\t\tif(args.length > 1 || args.length == 0) {\n-\t\t\tSystem.out.println(help());\n-\t\t} else if(args[0].equals(\"-h\") || args[0].equals(\"--help\")) {\n-\t\t\tSystem.out.println(help());\n-\t\t} else {\n-\t\t\tfileName = args[0];\n-\t\t\tMain main;\n-\t\t\tmain = new Main(fileName);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Main class for purpose of generating LDIF\n-\t *\n-\t * GroupOfUniqueNames object class is not supported in new instances of perun LDAP\n-\t *\n-\t * @param fileName if not null, use file for generating. if null use stdout\n-\t * @param newLDAPversion if true, then do not use GroupOfUniqueNames object class\n-\t * \n-\t * @throws InternalErrorException\n-\t */\n-\tpublic Main(String fileName) throws InternalErrorException {\n-\t\tPerunInitializer perunInitializer = null;\n-\t\ttry {\n-\t\t\ttry {\n-\t\t\t\tperunInitializer = new PerunInitializer(fileName);\n-\t\t\t} catch (InternalErrorException ex) {\n-\t\t\t\tSystem.err.println(\"There is problem with Initializing of PerunInitializer. More info can be found in \" + fileName);\n-\t\t\t\tthrow ex;\n-\t\t\t} catch (FileNotFoundException ex) {\n-\t\t\t\tSystem.err.println(\"There is problem with preparing writer to file \" + fileName);\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//get last message id before start of initializing\n-\t\t\tint LastMessageBeforeInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n-\t\t\tSystem.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n-\n-\t\t\ttry {\n-\t\t\t\tUtils.generateAllVosToWriter(perunInitializer);\n-\t\t\t\tUtils.generateAllGroupsToWriter(perunInitializer);\n-\t\t\t\tUtils.generateAllResourcesToWriter(perunInitializer);\n-\t\t\t\tUtils.generateAllUsersToWriter(perunInitializer);\n-\t\t\t} catch (IOException ex) {\n-\t\t\t\tSystem.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n-\t\t\t\tSystem.err.println(\"Problem with initializing users, there is an attribute which probably not exists.\");\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//get last message id after initializing\n-\t\t\tint LastMessageAfterInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n-\t\t\tSystem.err.println(\"Last message id after initializing: \" + LastMessageAfterInitializingData + '\\n');\n-\n-\t\t\t//This is the only operation of WRITING to the DB\n-\t\t\t//Call RPC-LIB for this purpose\n-\t\t\ttry {\n-\t\t\t\tUtils.setLastProcessedId(perunInitializer.getPerunPrincipal(), perunInitializer.getConsumerName(), LastMessageAfterInitializingData);\n-\t\t\t} catch (InternalErrorException | PrivilegeException ex) {\n-\t\t\t\tSystem.err.println(\"Can't set last processed ID because of lack of privileges or some Internal error.\");\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} finally {\n-\t\t\t//Close writer if already opened\n-\t\t\tif(perunInitializer != null) {\n-\t\t\t\ttry {\n-\t\t\t\t\tperunInitializer.closeWriter();\n-\t\t\t\t} catch(IOException ex) {\n-\t\t\t\t\tSystem.err.println(\"Can't close writer by normal way.\");\n-\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tSystem.err.println(\"Generating of initializing LDIF done without error!\");\n-\t}\n-\n-\t/**\n-\t * Message with help about usage.\n-\t *\n-\t * @return message with help\n-\t */\n-\tprivate static String help() {\n-\t\tStringBuilder sb = new StringBuilder();\n-\t\tsb.append(\"--------------HELP-------------\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-g           =>  generate ldif to stdout\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-gnew        =>  generate ldif without objectClass groupOfUniqueNames to stdout\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-g [file]    =>  generate ldif to file\");\n-\t\tsb.append('\\n');\n-\t\tsb.append(\"-gnew [file] =>  generate ldif without objectClass groupOfUniqueNames to file\");\n-\t\tsb.append('\\n');\n-\t\treturn sb.toString();\n-\t}\n-}\n+\n+ private final static Logger log = LoggerFactory.getLogger(Main.class);\n+\n+ public static void main(String[] args) throws Exception {\n+  //Default is old version and stdout (null file)\n+  String fileName = null;\n+  if (args.length > 1 || args.length == 0) {\n+   System.out.println(help());\n+  } else if (args[0].equals(\"-h\") || args[0].equals(\"--help\")) {\n+   System.out.println(help());\n+  } else {\n+   fileName = args[0];\n+   Main main;\n+   main = new Main(fileName);\n+  }\n+ }\n+\n+ /**\n+  * Main class for purpose of generating LDIF\n+  *\n+  * GroupOfUniqueNames object class is not supported in new instances of perun LDAP\n+  *\n+  * @param fileName if not null, use file for generating. if null use stdout\n+  * @param newLDAPversion if true, then do not use GroupOfUniqueNames object class\n+  * \n+  * @throws InternalErrorException\n+  */\n+\n+\n+ public Main(String fileName) throws InternalErrorException {\n+  PerunInitializer perunInitializer = null;\n+  try {\n+   try {\n+    perunInitializer = new PerunInitializer(fileName);\n+   } catch (InternalErrorException ex) {\n+    System.err.println(\"There is problem with Initializing of PerunInitializer. More info can be found in \" + fileName);\n+    throw ex;\n+   } catch (FileNotFoundException ex) {\n+    System.err.println(\"There is problem with preparing writer to file \" + fileName);\n+    throw new InternalErrorException(ex);\n+   }\n+\n+   //get last message id before start of initializing\n+\n+   int LastMessageBeforeInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n+   System.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n+\n+   try {\n+    Utils.generateAllVosToWriter(perunInitializer);\n+    Utils.generateAllGroupsToWriter(perunInitializer);\n+    Utils.generateAllResourcesToWriter(perunInitializer);\n+    Utils.generateAllUsersToWriter(perunInitializer);\n+   } catch (IOException ex) {\n+    System.err.println(\"Last message id before starting initializing: \" + LastMessageBeforeInitializingData + '\\n');\n+    throw new InternalErrorException(ex);\n+   } catch (AttributeNotExistsException | WrongAttributeAssignmentException ex) {\n+    System.err.println(\"Problem with initializing users, there is an attribute which probably not exists.\");\n+    throw new InternalErrorException(ex);\n+   }\n+\n+   //get last message id after initializing\n+\n+   int LastMessageAfterInitializingData = perunInitializer.getPerunBl().getAuditer().getLastMessageId();\n+   System.err.println(\"Last message id after initializing: \" + LastMessageAfterInitializingData + '\\n');\n+\n+   //This is the only operation of WRITING to the DB\n+   //Call RPC-LIB for this purpose\n+\n+   try {\n+    Utils.setLastProcessedId(perunInitializer.getPerunPrincipal(),\n+    perunInitializer.getConsumerName(),\n+    LastMessageAfterInitializingData);\n+   } catch (InternalErrorException | PrivilegeException ex) {\n+    System.err.println(\"Can't set last processed ID because of lack of privileges or some Internal error.\");\n+    throw new InternalErrorException(ex);\n+   }\n+  } finally {\n+   //Close writer if already opened\n+   if (perunInitializer != null) {\n+    try {\n+     perunInitializer.closeWriter();\n+    } catch (IOException ex) {\n+     System.err.println(\"Can't close writer by normal way.\");\n+     throw new InternalErrorException(ex);\n+    }\n+   }\n+  }\n+  System.err.println(\"Generating of initializing LDIF done without error!\");\n+ }\n+\n+ /**\n+  * Message with help about usage.\n+  *\n+  * @return message with help\n+  */\n+\n+\n+ private static String help() {\n+  StringBuilder sb = new StringBuilder();\n+  sb.append(\"--------------HELP-------------\");\n+  sb.append('\\n');\n+  sb.append(\"-g           =>  generate ldif to stdout\");\n+  sb.append('\\n');\n+  sb.append(\"-gnew        =>  generate ldif without objectClass groupOfUniqueNames to stdout\");\n+  sb.append('\\n');\n+  sb.append(\"-g [file]    =>  generate ldif to file\");\n+  sb.append('\\n');\n+  sb.append(\"-gnew [file] =>  generate ldif without objectClass groupOfUniqueNames to file\");\n+  sb.append('\\n');\n+  return sb.toString();\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 116
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}