{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4306",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "130",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4306/PropertySettingStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4306/PropertySettingStrategy.java\nindex b88a410ac4e..c4d427b349b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4306/PropertySettingStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4306/PropertySettingStrategy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.domain;\n \n import java.lang.reflect.Array;\n@@ -36,143 +37,140 @@ import org.neo4j.server.rest.web.PropertyValueException;\n  */\n public class PropertySettingStrategy\n {\n-    private final GraphDatabaseAPI db;\n-\n-    public PropertySettingStrategy( GraphDatabaseAPI db )\n+  private final GraphDatabaseAPI db;\n+\n+  public PropertySettingStrategy(GraphDatabaseAPI db)\n+  {\n+    this.db = db;\n+  }\n+\n+  /**\n+   * Set all properties on an entity, deleting any properties that existed on the entity but not in the\n+   * provided map.\n+   *\n+   * @param entity\n+   * @param properties\n+   */\n+  public void setAllProperties(PropertyContainer entity, Map<String, Object> properties) throws PropertyValueException\n+  {\n+    Map<String, Object> propsToSet = properties == null ? new HashMap<>() : properties;\n+\n+    try (Transaction tx = db.beginTx())\n     {\n-        this.db = db;\n-    }\n-\n-    /**\n-     * Set all properties on an entity, deleting any properties that existed on the entity but not in the\n-     * provided map.\n-     *\n-     * @param entity\n-     * @param properties\n-     */\n-    public void setAllProperties( PropertyContainer entity, Map<String, Object> properties ) throws PropertyValueException\n-    {\n-        Map<String, Object> propsToSet = properties == null ? new HashMap<>() : properties;\n-\n-        try ( Transaction tx = db.beginTx() )\n-        {\n-            setProperties( entity, properties );\n-            ensureHasOnlyTheseProperties( entity, propsToSet.keySet() );\n+      setProperties(entity, properties);\n+      ensureHasOnlyTheseProperties(entity, propsToSet.keySet());\n \n-            tx.success();\n-        }\n+      tx.success();\n     }\n+  }\n \n-    private void ensureHasOnlyTheseProperties( PropertyContainer entity, Set<String> propertiesThatShouldExist )\n+  private void ensureHasOnlyTheseProperties(PropertyContainer entity, Set<String> propertiesThatShouldExist)\n+  {\n+    for (String entityPropertyKey : entity.getPropertyKeys())\n     {\n-        for ( String entityPropertyKey : entity.getPropertyKeys() )\n-        {\n-            if ( !propertiesThatShouldExist.contains( entityPropertyKey ) )\n-            {\n-                entity.removeProperty( entityPropertyKey );\n-            }\n-        }\n+      if (!propertiesThatShouldExist.contains(entityPropertyKey))\n+      {\n+        entity.removeProperty(entityPropertyKey);\n+      }\n     }\n+  }\n \n-    public void setProperties( PropertyContainer entity, Map<String, Object> properties ) throws PropertyValueException\n+  public void setProperties(PropertyContainer entity, Map<String, Object> properties) throws PropertyValueException\n+  {\n+    if (properties != null)\n     {\n-        if ( properties != null )\n+      try (Transaction tx = db.beginTx())\n+      {\n+        for (Map.Entry<String, Object> property : properties.entrySet())\n         {\n-            try ( Transaction tx = db.beginTx() )\n-            {\n-                for ( Map.Entry<String, Object> property : properties.entrySet() )\n-                {\n-                    setProperty( entity, property.getKey(), property.getValue() );\n-                }\n-                tx.success();\n-            }\n+          setProperty(entity, property.getKey(), property.getValue());\n         }\n+        tx.success();\n+      }\n     }\n+  }\n \n-    public void setProperty( PropertyContainer entity, String key, Object value ) throws PropertyValueException\n+  public void setProperty(PropertyContainer entity, String key, Object value) throws PropertyValueException\n+  {\n+    if (value instanceof Collection)\n     {\n-        if ( value instanceof Collection )\n-        {\n-            if ( ((Collection<?>) value).size() == 0 )\n-            {\n-                // Special case: Trying to set an empty array property. We cannot determine the type\n-                // of the collection now, so we fall back to checking if there already is a collection\n-                // on the entity, and either leave it intact if it is empty, or set it to an empty collection\n-                // of the same type as the original\n-                Object currentValue = entity.getProperty( key, null );\n-                if ( currentValue != null && currentValue.getClass().isArray() )\n-                {\n-                    if ( Array.getLength( currentValue ) == 0 )\n-                    {\n-                        // Ok, leave it this way\n-                        return;\n-                    }\n-                    value = emptyArrayOfType( currentValue.getClass().getComponentType() );\n-                }\n-                else\n-                {\n-                    throw new PropertyValueException( \"Unable to set property '\" + key + \"' to an empty array, \" +\n-                            \"because, since there are no values of any type in it, \" +\n-                            \"and no pre-existing collection to infer type from, it is not possible \" +\n-                            \"to determine what type of array to store.\" );\n-                }\n-            }\n-            else\n-            {\n-                // Non-empty collection\n-                value = convertToNativeArray( (Collection<?>) value );\n-            }\n-        }\n-\n-        try ( Transaction tx = db.beginTx() )\n+      if (((Collection<?>) value).size() == 0)\n+      {\n+        // Special case: Trying to set an empty array property. We cannot determine the type\n+        // of the collection now, so we fall back to checking if there already is a collection\n+        // on the entity, and either leave it intact if it is empty, or set it to an empty collection\n+        // of the same type as the original\n+        Object currentValue = entity.getProperty(key, null);\n+        if (currentValue != null && currentValue.getClass().isArray())\n         {\n-            entity.setProperty( key, value );\n-            tx.success();\n-        }\n-        catch ( IllegalArgumentException e )\n+          if (Array.getLength(currentValue) == 0)\n+          {\n+            // Ok, leave it this way\n+            return;\n+          }\n+          value = emptyArrayOfType(currentValue.getClass().getComponentType());\n+        } else\n         {\n-            throw new PropertyValueException( \"Could not set property \\\"\" + key + \"\\\", unsupported type: \" + value );\n+          throw new PropertyValueException(\"Unable to set property '\" + key + \"' to an empty array, \" +\n+              \"because, since there are no values of any type in it, \" +\n+              \"and no pre-existing collection to infer type from, it is not possible \" +\n+              \"to determine what type of array to store.\");\n         }\n+      } else\n+      {\n+        // Non-empty collection\n+        value = convertToNativeArray((Collection<?>) value);\n+      }\n     }\n \n-    public Object convert( Object value ) throws PropertyValueException\n+    try (Transaction tx = db.beginTx())\n     {\n-        if ( !(value instanceof Collection) )\n-        {\n-            return value;\n-        }\n-\n-        if ( ((Collection<?>) value).size() == 0 )\n-        {\n-            throw new PropertyValueException(\n-                    \"Unable to convert '\" + value + \"' to an empty array, \" +\n-                            \"because, since there are no values of any type in it, \" +\n-                            \"and no pre-existing collection to infer type from, it is not possible \" +\n-                            \"to determine what type of array to store.\" );\n-        }\n+      entity.setProperty(key, value);\n+      tx.success();\n+    } catch (IllegalArgumentException e)\n+    {\n+      throw new PropertyValueException(\"Could not set property \\\"\" + key + \"\\\", unsupported type: \" + value);\n+    }\n+  }\n \n-        return convertToNativeArray( (Collection<?>) value );\n+  public Object convert(Object value) throws PropertyValueException\n+  {\n+    if (!(value instanceof Collection))\n+    {\n+      return value;\n     }\n \n-    private Object emptyArrayOfType( Class<?> cls )\n+    if (((Collection<?>) value).size() == 0)\n     {\n-       return Array.newInstance( cls, 0);\n+      throw new PropertyValueException(\n+          \"Unable to convert '\" + value + \"' to an empty array, \" +\n+              \"because, since there are no values of any type in it, \" +\n+              \"and no pre-existing collection to infer type from, it is not possible \" +\n+              \"to determine what type of array to store.\");\n     }\n \n-    public static Object convertToNativeArray( Collection<?> collection )\n+    return convertToNativeArray((Collection<?>) value);\n+  }\n+\n+  private Object emptyArrayOfType(Class<?> cls)\n+  {\n+    return Array.newInstance(cls, 0);\n+  }\n+\n+  public static Object convertToNativeArray(Collection<?> collection)\n+  {\n+    Object[] array = null;\n+    Iterator<?> objects = collection.iterator();\n+    for (int i = 0; objects.hasNext(); i++)\n     {\n-        Object[] array = null;\n-        Iterator<?> objects = collection.iterator();\n-        for ( int i = 0; objects.hasNext(); i++ )\n-        {\n-            Object object = objects.next();\n-            if ( array == null )\n-            {\n-                array = (Object[]) Array.newInstance( object.getClass(),\n-                        collection.size() );\n-            }\n-            array[i] = object;\n-        }\n-        return array;\n+      Object object = objects.next();\n+      if (array == null)\n+      {\n+        array = (Object[]) Array.newInstance(object.getClass(),\n+            collection.size());\n+      }\n+      array[i] = object;\n     }\n+    return array;\n+  }\n }\n",
            "diff_size": 175
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 295).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 284).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4306/PropertySettingStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4306/PropertySettingStrategy.java\nindex b88a410ac4e..d2a07aacd59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4306/PropertySettingStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4306/PropertySettingStrategy.java\n@@ -50,16 +50,15 @@ public class PropertySettingStrategy\n      * @param entity\n      * @param properties\n      */\n-    public void setAllProperties( PropertyContainer entity, Map<String, Object> properties ) throws PropertyValueException\n+    public void setAllProperties( PropertyContainer entity, Map<String,Object> properties ) throws PropertyValueException\n     {\n-        Map<String, Object> propsToSet = properties == null ? new HashMap<>() : properties;\n+        Map<String,Object> propsToSet = properties == null ? new HashMap<>() : properties;\n \n         try ( Transaction tx = db.beginTx() )\n         {\n             setProperties( entity, properties );\n             ensureHasOnlyTheseProperties( entity, propsToSet.keySet() );\n-\n-            tx.success();\n+tx.success();\n         }\n     }\n \n@@ -74,13 +73,13 @@ public class PropertySettingStrategy\n         }\n     }\n \n-    public void setProperties( PropertyContainer entity, Map<String, Object> properties ) throws PropertyValueException\n+    public void setProperties( PropertyContainer entity, Map<String,Object> properties ) throws PropertyValueException\n     {\n         if ( properties != null )\n         {\n             try ( Transaction tx = db.beginTx() )\n             {\n-                for ( Map.Entry<String, Object> property : properties.entrySet() )\n+                for ( Map.Entry<String,Object> property : properties.entrySet() )\n                 {\n                     setProperty( entity, property.getKey(), property.getValue() );\n                 }\n@@ -107,15 +106,13 @@ public class PropertySettingStrategy\n                         // Ok, leave it this way\n                         return;\n                     }\n-                    value = emptyArrayOfType( currentValue.getClass().getComponentType() );\n+\n+value = emptyArrayOfType( currentValue.getClass().getComponentType() );\n                 }\n                 else\n                 {\n-                    throw new PropertyValueException( \"Unable to set property '\" + key + \"' to an empty array, \" +\n-                            \"because, since there are no values of any type in it, \" +\n-                            \"and no pre-existing collection to infer type from, it is not possible \" +\n-                            \"to determine what type of array to store.\" );\n-                }\n+                    throw new PropertyValueException( \"Unable to set property '\" + key + \"' to an empty array, \" + \"because, since there are no values of any type in it, \" + \"and no pre-existing collection to infer type from, it is not possible \" + \"to determine what type of array to store.\" );\n+    }\n             }\n             else\n             {\n@@ -137,26 +134,22 @@ public class PropertySettingStrategy\n \n     public Object convert( Object value ) throws PropertyValueException\n     {\n-        if ( !(value instanceof Collection) )\n+        if ( !( value instanceof Collection) )\n         {\n             return value;\n         }\n \n         if ( ((Collection<?>) value).size() == 0 )\n         {\n-            throw new PropertyValueException(\n-                    \"Unable to convert '\" + value + \"' to an empty array, \" +\n-                            \"because, since there are no values of any type in it, \" +\n-                            \"and no pre-existing collection to infer type from, it is not possible \" +\n-                            \"to determine what type of array to store.\" );\n-        }\n+            throw new PropertyValueException( \"Unable to convert '\" + value + \"' to an empty array, \" + \"because, since there are no values of any type in it, \" + \"and no pre-existing collection to infer type from, it is not possible \" + \"to determine what type of array to store.\" );\n+    }\n \n         return convertToNativeArray( (Collection<?>) value );\n     }\n \n     private Object emptyArrayOfType( Class<?> cls )\n     {\n-       return Array.newInstance( cls, 0);\n+    return Array.newInstance( cls, 0 );\n     }\n \n     public static Object convertToNativeArray( Collection<?> collection )\n@@ -168,11 +161,12 @@ public class PropertySettingStrategy\n             Object object = objects.next();\n             if ( array == null )\n             {\n-                array = (Object[]) Array.newInstance( object.getClass(),\n-                        collection.size() );\n+                array = (Object[]) Array.newInstance( object.getClass(), collection.size() );\n             }\n-            array[i] = object;\n+\n+array[i] = object;\n         }\n-        return array;\n+\n+return array;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "83",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "107",
                    "column": "42",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 294).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "column": "87",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "80",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 283).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "column": "76",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4306/PropertySettingStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4306/PropertySettingStrategy.java\nindex b88a410ac4e..6e358b0f218 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4306/PropertySettingStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4306/PropertySettingStrategy.java\n@@ -25,7 +25,6 @@ import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Set;\n-\n import org.neo4j.graphdb.PropertyContainer;\n import org.neo4j.graphdb.Transaction;\n import org.neo4j.kernel.internal.GraphDatabaseAPI;\n@@ -34,6 +33,7 @@ import org.neo4j.server.rest.web.PropertyValueException;\n /**\n  * Responsible for setting properties on primitive types.\n  */\n+\n public class PropertySettingStrategy\n {\n     private final GraphDatabaseAPI db;\n@@ -50,40 +50,44 @@ public class PropertySettingStrategy\n      * @param entity\n      * @param properties\n      */\n-    public void setAllProperties( PropertyContainer entity, Map<String, Object> properties ) throws PropertyValueException\n-    {\n-        Map<String, Object> propsToSet = properties == null ? new HashMap<>() : properties;\n \n-        try ( Transaction tx = db.beginTx() )\n+    public void setAllProperties( PropertyContainer entity, Map<String,Object> properties ) throws PropertyValueException\n+    {\n+        Map<String,Object> propsToSet = properties == null ? new HashMap<>() : properties;\n+        try\n+        ( Transaction tx = db.beginTx())\n         {\n             setProperties( entity, properties );\n             ensureHasOnlyTheseProperties( entity, propsToSet.keySet() );\n-\n             tx.success();\n         }\n     }\n \n     private void ensureHasOnlyTheseProperties( PropertyContainer entity, Set<String> propertiesThatShouldExist )\n     {\n-        for ( String entityPropertyKey : entity.getPropertyKeys() )\n+        for( String entityPropertyKey : entity.getPropertyKeys()\n+        )\n         {\n-            if ( !propertiesThatShouldExist.contains( entityPropertyKey ) )\n+            if ( ! propertiesThatShouldExist.contains( entityPropertyKey ) )\n             {\n                 entity.removeProperty( entityPropertyKey );\n             }\n         }\n     }\n \n-    public void setProperties( PropertyContainer entity, Map<String, Object> properties ) throws PropertyValueException\n+    public void setProperties( PropertyContainer entity, Map<String,Object> properties ) throws PropertyValueException\n     {\n         if ( properties != null )\n         {\n-            try ( Transaction tx = db.beginTx() )\n+            try\n+                ( Transaction tx = db.beginTx())\n             {\n-                for ( Map.Entry<String, Object> property : properties.entrySet() )\n+                for( Map.Entry<String,Object> property : properties.entrySet()\n+                )\n                 {\n                     setProperty( entity, property.getKey(), property.getValue() );\n                 }\n+\n                 tx.success();\n             }\n         }\n@@ -100,21 +104,19 @@ public class PropertySettingStrategy\n                 // on the entity, and either leave it intact if it is empty, or set it to an empty collection\n                 // of the same type as the original\n                 Object currentValue = entity.getProperty( key, null );\n-                if ( currentValue != null && currentValue.getClass().isArray() )\n+                if ( currentValue != null&& currentValue.getClass().isArray() )\n                 {\n                     if ( Array.getLength( currentValue ) == 0 )\n                     {\n                         // Ok, leave it this way\n                         return;\n                     }\n+\n                     value = emptyArrayOfType( currentValue.getClass().getComponentType() );\n                 }\n                 else\n                 {\n-                    throw new PropertyValueException( \"Unable to set property '\" + key + \"' to an empty array, \" +\n-                            \"because, since there are no values of any type in it, \" +\n-                            \"and no pre-existing collection to infer type from, it is not possible \" +\n-                            \"to determine what type of array to store.\" );\n+                    throw new PropertyValueException( \"Unable to set property '\" + key+ \"' to an empty array, \" + \"because, since there are no values of any type in it, \" + \"and no pre-existing collection to infer type from, it is not possible \" + \"to determine what type of array to store.\" );\n                 }\n             }\n             else\n@@ -124,31 +126,28 @@ public class PropertySettingStrategy\n             }\n         }\n \n-        try ( Transaction tx = db.beginTx() )\n+        try\n+        ( Transaction tx = db.beginTx())\n         {\n             entity.setProperty( key, value );\n             tx.success();\n         }\n         catch ( IllegalArgumentException e )\n         {\n-            throw new PropertyValueException( \"Could not set property \\\"\" + key + \"\\\", unsupported type: \" + value );\n+            throw new PropertyValueException( \"Could not set property \\\"\" + key+ \"\\\", unsupported type: \" + value );\n         }\n     }\n \n     public Object convert( Object value ) throws PropertyValueException\n     {\n-        if ( !(value instanceof Collection) )\n+        if ( ! ( value instanceof Collection) )\n         {\n             return value;\n         }\n \n         if ( ((Collection<?>) value).size() == 0 )\n         {\n-            throw new PropertyValueException(\n-                    \"Unable to convert '\" + value + \"' to an empty array, \" +\n-                            \"because, since there are no values of any type in it, \" +\n-                            \"and no pre-existing collection to infer type from, it is not possible \" +\n-                            \"to determine what type of array to store.\" );\n+            throw new PropertyValueException( \"Unable to convert '\" + value+ \"' to an empty array, \" + \"because, since there are no values of any type in it, \" + \"and no pre-existing collection to infer type from, it is not possible \" + \"to determine what type of array to store.\" );\n         }\n \n         return convertToNativeArray( (Collection<?>) value );\n@@ -156,7 +155,7 @@ public class PropertySettingStrategy\n \n     private Object emptyArrayOfType( Class<?> cls )\n     {\n-       return Array.newInstance( cls, 0);\n+        return Array.newInstance( cls, 0 );\n     }\n \n     public static Object convertToNativeArray( Collection<?> collection )\n@@ -168,11 +167,12 @@ public class PropertySettingStrategy\n             Object object = objects.next();\n             if ( array == null )\n             {\n-                array = (Object[]) Array.newInstance( object.getClass(),\n-                        collection.size() );\n+                array = (Object[]) Array.newInstance( object.getClass(), collection.size() );\n             }\n+\n             array[i] = object;\n         }\n+\n         return array;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}