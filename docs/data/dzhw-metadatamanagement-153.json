{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "153",
    "information": {
        "errors": [
            {
                "line": "61",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Override\n  protected URI buildLocationHeaderUri(Instrument domainObject) {\n    return UriComponentsBuilder.fromPath(\"/api/instruments/\" + domainObject.getId()).build().toUri();\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/153/InstrumentResourceController.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/153/InstrumentResourceController.java\nindex 5b60cf4b210..a14c3148e73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/153/InstrumentResourceController.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/153/InstrumentResourceController.java\n@@ -19,7 +19,7 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.Instrument;\n \n /**\n  * Instrument REST Controller which overrides default spring data rest methods.\n- * \n+ *\n  * @author Ren\u00e9 Reitmann\n  */\n @RepositoryRestController\n@@ -37,7 +37,7 @@ public class InstrumentResourceController extends GenericDomainObjectResourceCon\n     return super.getDomainObject(id);\n   }\n \n- \n+\n   @Override\n   @PostMapping(value = \"/instruments\")\n   public ResponseEntity<?> postDomainObject(@RequestBody Instrument instrument) {\n@@ -58,6 +58,7 @@ public class InstrumentResourceController extends GenericDomainObjectResourceCon\n \n   @Override\n   protected URI buildLocationHeaderUri(Instrument domainObject) {\n-    return UriComponentsBuilder.fromPath(\"/api/instruments/\" + domainObject.getId()).build().toUri();\n+    return UriComponentsBuilder.fromPath(\"/api/instruments/\" + domainObject.getId()).build()\n+        .toUri();\n   }\n }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Annotation 'PostMapping' have incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/153/InstrumentResourceController.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/153/InstrumentResourceController.java\nindex 5b60cf4b210..b762a21993e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/153/InstrumentResourceController.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/153/InstrumentResourceController.java\n@@ -23,8 +23,7 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.Instrument;\n  * @author Ren\u00e9 Reitmann\n  */\n @RepositoryRestController\n-public class InstrumentResourceController extends GenericDomainObjectResourceController\n-    <Instrument, CrudService<Instrument>> {\n+public class InstrumentResourceController extends GenericDomainObjectResourceController<Instrument, CrudService<Instrument>> {\n \n   @Autowired\n   public InstrumentResourceController(CrudService<Instrument> crudService) {\n@@ -37,9 +36,8 @@ public class InstrumentResourceController extends GenericDomainObjectResourceCon\n     return super.getDomainObject(id);\n   }\n \n- \n   @Override\n-  @PostMapping(value = \"/instruments\")\n+@PostMapping(value = \"/instruments\")\n   public ResponseEntity<?> postDomainObject(@RequestBody Instrument instrument) {\n     return super.postDomainObject(instrument);\n   }\n@@ -60,4 +58,4 @@ public class InstrumentResourceController extends GenericDomainObjectResourceCon\n   protected URI buildLocationHeaderUri(Instrument domainObject) {\n     return UriComponentsBuilder.fromPath(\"/api/instruments/\" + domainObject.getId()).build().toUri();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/153/InstrumentResourceController.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/153/InstrumentResourceController.java\nindex 5b60cf4b210..617f11bb1d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/153/InstrumentResourceController.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/153/InstrumentResourceController.java\n@@ -1,7 +1,6 @@\n package eu.dzhw.fdz.metadatamanagement.instrumentmanagement.rest;\n \n import java.net.URI;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.rest.webmvc.RepositoryRestController;\n import org.springframework.http.ResponseEntity;\n@@ -12,7 +11,6 @@ import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.util.UriComponentsBuilder;\n-\n import eu.dzhw.fdz.metadatamanagement.common.rest.GenericDomainObjectResourceController;\n import eu.dzhw.fdz.metadatamanagement.common.service.CrudService;\n import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.Instrument;\n@@ -22,42 +20,49 @@ import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.Instrument;\n  * \n  * @author Ren\u00e9 Reitmann\n  */\n+\n+\n @RepositoryRestController\n-public class InstrumentResourceController extends GenericDomainObjectResourceController\n-    <Instrument, CrudService<Instrument>> {\n+public class InstrumentResourceController extends GenericDomainObjectResourceController<Instrument, CrudService<Instrument>> {\n \n   @Autowired\n   public InstrumentResourceController(CrudService<Instrument> crudService) {\n     super(crudService);\n   }\n \n+\n   @Override\n   @GetMapping(value = \"/instruments/{id:.+}\")\n   public ResponseEntity<Instrument> getDomainObject(@PathVariable String id) {\n     return super.getDomainObject(id);\n   }\n \n- \n+\n   @Override\n   @PostMapping(value = \"/instruments\")\n   public ResponseEntity<?> postDomainObject(@RequestBody Instrument instrument) {\n     return super.postDomainObject(instrument);\n   }\n \n+\n   @Override\n   @PutMapping(value = \"/instruments/{id:.+}\")\n   public ResponseEntity<?> putDomainObject(@RequestBody Instrument instrument) {\n     return super.putDomainObject(instrument);\n   }\n \n+\n   @Override\n   @DeleteMapping(\"/instruments/{id:.+}\")\n   public ResponseEntity<?> deleteDomainObject(@PathVariable String id) {\n     return super.deleteDomainObject(id);\n   }\n \n+\n   @Override\n   protected URI buildLocationHeaderUri(Instrument domainObject) {\n-    return UriComponentsBuilder.fromPath(\"/api/instruments/\" + domainObject.getId()).build().toUri();\n+    return UriComponentsBuilder.fromPath(\"/api/instruments/\"\n+      + domainObject.getId()).build()\n+                             .toUri();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}