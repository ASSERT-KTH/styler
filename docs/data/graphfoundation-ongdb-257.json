{
    "project_name": "graphfoundation-ongdb",
    "error_id": "257",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "82",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "82",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/257/DependenciesProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/257/DependenciesProxy.java\nindex 9a6023b70d1..25f7e1616d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/257/DependenciesProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/257/DependenciesProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.lang.reflect.InvocationHandler;\n@@ -34,56 +35,54 @@ import org.neo4j.graphdb.DependencyResolver;\n  */\n public class DependenciesProxy\n {\n-    private DependenciesProxy()\n-    {\n-        throw new AssertionError(); // no instances\n-    }\n+  private DependenciesProxy()\n+  {\n+    throw new AssertionError(); // no instances\n+  }\n+\n+  /**\n+   * Create a dynamic proxy that implements the given interface and backs invocation with lookups into the given\n+   * dependency resolver.\n+   *\n+   * @param dependencyResolver    original resolver to proxy\n+   * @param dependenciesInterface interface to proxy\n+   * @param <T>                   type of the interface\n+   * @return a proxied {@link DependencyResolver} that will lookup dependencies in {@code dependencyResolver} based\n+   * on method names in the provided {@code dependenciesInterface}\n+   */\n+  public static <T> T dependencies(DependencyResolver dependencyResolver, Class<T> dependenciesInterface)\n+  {\n+    return dependenciesInterface.cast(\n+        Proxy.newProxyInstance(dependenciesInterface.getClassLoader(), new Class<?>[] {dependenciesInterface},\n+            new ProxyHandler(dependencyResolver)));\n+  }\n \n-    /**\n-     * Create a dynamic proxy that implements the given interface and backs invocation with lookups into the given\n-     * dependency resolver.\n-     *\n-     * @param dependencyResolver original resolver to proxy\n-     * @param dependenciesInterface interface to proxy\n-     * @param <T> type of the interface\n-     * @return a proxied {@link DependencyResolver} that will lookup dependencies in {@code dependencyResolver} based\n-     * on method names in the provided {@code dependenciesInterface}\n-     */\n-    public static <T> T dependencies( DependencyResolver dependencyResolver, Class<T> dependenciesInterface )\n+  private static class ProxyHandler implements InvocationHandler\n+  {\n+    private DependencyResolver dependencyResolver;\n+\n+    ProxyHandler(DependencyResolver dependencyResolver)\n     {\n-        return dependenciesInterface.cast(\n-                Proxy.newProxyInstance( dependenciesInterface.getClassLoader(), new Class<?>[]{dependenciesInterface},\n-                        new ProxyHandler( dependencyResolver ) ) );\n+      this.dependencyResolver = dependencyResolver;\n     }\n \n-    private static class ProxyHandler implements InvocationHandler\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args)\n     {\n-        private DependencyResolver dependencyResolver;\n-\n-        ProxyHandler( DependencyResolver dependencyResolver )\n+      try\n+      {\n+        if (method.getReturnType().equals(Supplier.class))\n         {\n-            this.dependencyResolver = dependencyResolver;\n-        }\n-\n-        @Override\n-        public Object invoke( Object proxy, Method method, Object[] args )\n+          return dependencyResolver.provideDependency(\n+              (Class<?>) ((ParameterizedType) method.getGenericReturnType()).getActualTypeArguments()[0]);\n+        } else\n         {\n-            try\n-            {\n-                if ( method.getReturnType().equals( Supplier.class ) )\n-                {\n-                    return dependencyResolver.provideDependency(\n-                            (Class<?>) ((ParameterizedType) method.getGenericReturnType()).getActualTypeArguments()[0] );\n-                }\n-                else\n-                {\n-                    return dependencyResolver.resolveDependency( method.getReturnType() );\n-                }\n-            }\n-            catch ( IllegalArgumentException e )\n-            {\n-                throw new UnsatisfiedDependencyException( e );\n-            }\n+          return dependencyResolver.resolveDependency(method.getReturnType());\n         }\n+      } catch (IllegalArgumentException e)\n+      {\n+        throw new UnsatisfiedDependencyException(e);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/257/DependenciesProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/257/DependenciesProxy.java\nindex 9a6023b70d1..cd74b1241f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/257/DependenciesProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/257/DependenciesProxy.java\n@@ -51,9 +51,7 @@ public class DependenciesProxy\n      */\n     public static <T> T dependencies( DependencyResolver dependencyResolver, Class<T> dependenciesInterface )\n     {\n-        return dependenciesInterface.cast(\n-                Proxy.newProxyInstance( dependenciesInterface.getClassLoader(), new Class<?>[]{dependenciesInterface},\n-                        new ProxyHandler( dependencyResolver ) ) );\n+        return dependenciesInterface.cast( Proxy.newProxyInstance( dependenciesInterface.getClassLoader(), new Class<?>[]{dependenciesInterface}, new ProxyHandler( dependencyResolver ) ) );\n     }\n \n     private static class ProxyHandler implements InvocationHandler\n@@ -72,8 +70,7 @@ public class DependenciesProxy\n             {\n                 if ( method.getReturnType().equals( Supplier.class ) )\n                 {\n-                    return dependencyResolver.provideDependency(\n-                            (Class<?>) ((ParameterizedType) method.getGenericReturnType()).getActualTypeArguments()[0] );\n+                    return dependencyResolver.provideDependency((Class<?>) ((ParameterizedType) method.getGenericReturnType()).getActualTypeArguments()[0] );\n                 }\n                 else\n                 {\n@@ -86,4 +83,4 @@ public class DependenciesProxy\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}