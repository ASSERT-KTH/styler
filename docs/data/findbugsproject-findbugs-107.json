{
    "project_name": "findbugsproject-findbugs",
    "error_id": "107",
    "information": {
        "errors": [
            {
                "line": "44",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n    private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n\t/**\n     * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n     * @param project The BProject to get the frame for\n     * @param createIfNeeded If there's not already a frame, should one be created?",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/107/ResultsFrame.java\nindex 28ca0585dc8..d570ff2a819 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/107/ResultsFrame.java\n@@ -41,7 +41,7 @@ public class ResultsFrame extends JFrame\n     private BProject currProject;\n \n     private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n+/**\n      * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n      * @param project The BProject to get the frame for\n      * @param createIfNeeded If there's not already a frame, should one be created?\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/107/ResultsFrame.java\nindex 28ca0585dc8..e387454f031 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/107/ResultsFrame.java\n@@ -30,10 +30,9 @@ import edu.umd.cs.findbugs.SortedBugCollection;\n import edu.umd.cs.findbugs.SourceLineAnnotation;\n \n @SuppressWarnings(\"serial\")\n-public class ResultsFrame extends JFrame\n-{\n-    private static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n-    private static final int[] columnWidths = { 150, 50, 475 };\n+public class ResultsFrame extends JFrame {\n+    private static final String[] columnNames = {\"File\", \"Line\", \"Description\"};\n+    private static final int[] columnWidths = {150, 50, 475};\n \n     private JEditorPane description;\n     private JScrollPane bottomScroll;\n@@ -41,75 +40,67 @@ public class ResultsFrame extends JFrame\n     private BProject currProject;\n \n     private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n+\n+    /**\n      * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n-     * @param project The BProject to get the frame for\n+     *\n+     * @param project        The BProject to get the frame for\n      * @param createIfNeeded If there's not already a frame, should one be created?\n-\t * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n+     * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n      */\n-    public static ResultsFrame getInstance(BProject project, boolean createIfNeeded)\n-    {\n-\t\tif (!instanceMap.containsKey(project))\n-        {\n-            if (createIfNeeded)\n+    public static ResultsFrame getInstance(BProject project, boolean createIfNeeded) {\n+        if (!instanceMap.containsKey(project)) {\n+            if (createIfNeeded) {\n                 instanceMap.put(project, new ResultsFrame());\n-\t\t\telse\n+            } else {\n                 return null;\n+            }\n         }\n         return instanceMap.get(project);\n-\t}\n-    private ResultsFrame() {}\n+    }\n+\n+    private ResultsFrame() {\n+    }\n \n     /**\n-\t * Update the view\n+     * Update the view\n      */\n-    public void update(final SortedBugCollection bugs, BProject project)\n-    {\n-\t\ttry\n-        {\n+    public void update(final SortedBugCollection bugs, BProject project) {\n+        try {\n             setTitle(\"FindBugs results [\" + project.getName() + \"]\");\n-        }\n-\t\tcatch (ProjectNotOpenException e)\n-        {\n+        } catch (ProjectNotOpenException e) {\n             setTitle(\"FindBugs results\");\n         }\n-\t\ttry\n-        {\n+        try {\n             setIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n-        }\n-\t\tcatch (IOException e)\n-        {\n+        } catch (IOException e) {\n             Log.recordBug(e);\n         }\n-\t\t\n+\n         currProject = project;\n         final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n-                .getCollection());\n-\t\t\n+            .getCollection());\n+\n         final JTable table = new JTable(new MyTableModel(bugList));\n \n-        for (int i = 0; i < columnNames.length; i++)\n-\t\t\ttable.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n+        for (int i = 0; i < columnNames.length; i++) {\n+            table.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n+        }\n \n         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n \n-\t\ttable.addMouseListener(new MouseAdapter()\n-                {\n+        table.addMouseListener(new MouseAdapter() {\n             @Override\n-            public void mouseClicked(MouseEvent evt)\n-\t\t\t{\n-                if (evt.getClickCount() == 2)\n+            public void mouseClicked(MouseEvent evt) {\n+                if (evt.getClickCount() == 2) {\n                     showEditorAndHighlight(bugList.get(table.getSelectedRow()));\n-                else\n-\t\t\t\t{\n+                } else {\n                     description.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n-                    SwingUtilities.invokeLater(new Runnable()\n-                    {\n-\t\t\t\t\t\tpublic void run()\n-                        {\n+                    SwingUtilities.invokeLater(new Runnable() {\n+                        public void run() {\n                             bottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n                         }\n-\t\t\t\t\t});\n+                    });\n                 }\n             }\n         });\n@@ -120,64 +111,57 @@ public class ResultsFrame extends JFrame\n         description = new JEditorPane();\n         description.setContentType(\"text/html\");\n         description.setEditable(false);\n-\t\t\n+\n         boolean allCompiled = true;\n-        for (BugInstance bug : bugs.getCollection())\n-        {\n-\t\t\ttry\n-            {\n-                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled())\n-                {\n-\t\t\t\t\tallCompiled = false;\n+        for (BugInstance bug : bugs.getCollection()) {\n+            try {\n+                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled()) {\n+                    allCompiled = false;\n                     break;\n                 }\n-            }\n-\t\t\tcatch (ExtensionException e)\n-            {\n+            } catch (ExtensionException e) {\n                 Log.recordBug(e);\n                 continue;\n-\t\t\t}\n+            }\n         }\n \n-            try {\n-\t\t\t\tdescription.setPage(ResultsFrame.class.getResource(\"about.html\"));\n-            } catch (IOException e) {\n-                description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n-                    \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n-\t\t\t\t\t\"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n-                    \"source code.</p>\"\n-                    + \"<p>Bug: \" + e.toString()));\n-            }\n+        try {\n+            description.setPage(ResultsFrame.class.getResource(\"about.html\"));\n+        } catch (IOException e) {\n+            description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n+                \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n+                \"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n+                \"source code.</p>\"\n+                + \"<p>Bug: \" + e.toString()));\n+        }\n \n \n         bottomScroll = new JScrollPane(description);\n         bottomScroll.setPreferredSize(new Dimension(675, 200));\n \n         JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n-                topScroll, bottomScroll);\n+            topScroll, bottomScroll);\n         setContentPane(splitPane);\n \n         pack();\n         setDefaultCloseOperation(HIDE_ON_CLOSE);\n         setVisible(true);\n-\t}\n+    }\n \n     /*\n      * Finds the editor that corresponds with the class the bug in the\n      * BugInstance is in. Opens the editor and then highlights the bug and\n-\t * places the cursor at the beginning if class is compiled. If the class\n+     * places the cursor at the beginning if class is compiled. If the class\n      * is not compiled than just opens the editor and moves the caret to the\n      * last known startline of that bug.\n      */\n-\tprivate void showEditorAndHighlight(BugInstance instance)\n-    {\n+    private void showEditorAndHighlight(BugInstance instance) {\n         SourceLineAnnotation srcLine = instance\n-                .getPrimarySourceLineAnnotation();\n-\t\ttry\n-        {\n+            .getPrimarySourceLineAnnotation();\n+        try {\n             BClass srcClass = currProject.getPackage(srcLine.getPackageName())\n-            .getBClass(getClassName(srcLine));\n-\t\t\tEditor srcEditor = srcClass.getEditor();\n+                .getBClass(getClassName(srcLine));\n+            Editor srcEditor = srcClass.getEditor();\n             srcEditor.setVisible(true);\n \n             // srcStartLine in case returned -1\n@@ -185,84 +169,68 @@ public class ResultsFrame extends JFrame\n \n             srcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n \n-            if (srcStartLine > 0 && srcClass.isCompiled())\n-\t\t\t{\t\t\t\t\n+            if (srcStartLine > 0 && srcClass.isCompiled()) {\n                 srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n-                        new TextLocation(srcLine.getEndLine(), 0));\n+                    new TextLocation(srcLine.getEndLine(), 0));\n             }\n-\t\t}\n-        catch (ProjectNotOpenException e)\n-        {\n+        } catch (ProjectNotOpenException e) {\n             Log.recordBug(e);\n-\t\t}\n-        catch (PackageNotFoundException e)\n-        {\n+        } catch (PackageNotFoundException e) {\n             Log.recordBug(e);\n-\t\t}\n+        }\n     }\n \n     /*\n      * Gets the source file and gets the name of the class from that.\n      */\n-\tprivate String getClassName(SourceLineAnnotation srcLine)\n-    {\n+    private String getClassName(SourceLineAnnotation srcLine) {\n         String str = srcLine.getSourceFile();\n         return str.substring(0, str.indexOf(\".\"));\n-\t}\n+    }\n \n-    private class MyTableModel extends AbstractTableModel\n-    {\n+    private class MyTableModel extends AbstractTableModel {\n         private ArrayList<BugInstance> bugList;\n \n-        public MyTableModel(ArrayList<BugInstance> bugList)\n-        {\n+        public MyTableModel(ArrayList<BugInstance> bugList) {\n             this.bugList = bugList;\n-\t\t}\n+        }\n \n-        public int getRowCount()\n-        {\n+        public int getRowCount() {\n             return bugList.size();\n-\t\t}\n+        }\n \n-        public int getColumnCount()\n-        {\n+        public int getColumnCount() {\n             return 3;\n-\t\t}\n+        }\n \n         @Override\n-        public String getColumnName(int column)\n-        {\n-\t\t\treturn columnNames[column];\n+        public String getColumnName(int column) {\n+            return columnNames[column];\n         }\n \n-        public Object getValueAt(int row, int column)\n-        {\n+        public Object getValueAt(int row, int column) {\n             SourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n-\t\t\t\n-            switch (column)\n-            {\n-            case 0:\n-\t\t\t\tboolean notCompiled = false;\n-\n-                try\n-                {\n-\t\t\t\t\tBClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n-                    notCompiled = !srcClass.isCompiled();\n-                }\n-                catch (ExtensionException e)\n-\t\t\t\t{\n-                    Log.recordBug(e);\n-                }\n \n-\t\t\t\treturn (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n-            case 1:\n-                int line = annotation.getStartLine();\n-                return (line != -1 ? String.valueOf(line) : \"\");\n-\t\t\tcase 2:\n-                return bugList.get(row).getMessageWithoutPrefix();\n-            default:\n-                throw new ArrayIndexOutOfBoundsException(\"Column \" + column\n-\t\t\t\t\t\t+ \" must be < 3\");\n+            switch (column) {\n+                case 0:\n+                    boolean notCompiled = false;\n+\n+                    try {\n+                        BClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n+                        notCompiled = !srcClass.isCompiled();\n+                    } catch (ExtensionException e) {\n+                        Log.recordBug(e);\n+                    }\n+\n+                    return (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n+                case 1:\n+                    int line = annotation.getStartLine();\n+                    return (line != -1 ? String.valueOf(line) : \"\");\n+                case 2:\n+                    return bugList.get(row).getMessageWithoutPrefix();\n+                default:\n+                    throw new ArrayIndexOutOfBoundsException(\"Column \" + column\n+                        + \" must be < 3\");\n             }\n         }\n \n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/107/ResultsFrame.java\nindex 28ca0585dc8..36a113b542a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/107/ResultsFrame.java\n@@ -30,8 +30,7 @@ import edu.umd.cs.findbugs.SortedBugCollection;\n import edu.umd.cs.findbugs.SourceLineAnnotation;\n \n @SuppressWarnings(\"serial\")\n-public class ResultsFrame extends JFrame\n-{\n+public class ResultsFrame extends JFrame {\n     private static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n     private static final int[] columnWidths = { 150, 50, 475 };\n \n@@ -41,76 +40,61 @@ public class ResultsFrame extends JFrame\n     private BProject currProject;\n \n     private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n+\n+/**\n      * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n      * @param project The BProject to get the frame for\n      * @param createIfNeeded If there's not already a frame, should one be created?\n \t * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n      */\n-    public static ResultsFrame getInstance(BProject project, boolean createIfNeeded)\n-    {\n-\t\tif (!instanceMap.containsKey(project))\n-        {\n+public static ResultsFrame getInstance(BProject project, boolean createIfNeeded) {\n+   if (!instanceMap.containsKey(project)) {\n             if (createIfNeeded)\n                 instanceMap.put(project, new ResultsFrame());\n-\t\t\telse\n-                return null;\n+    else\n+    return null;\n         }\n         return instanceMap.get(project);\n-\t}\n-    private ResultsFrame() {}\n+    }\n+\n+private ResultsFrame() {\n+}\n \n     /**\n \t * Update the view\n      */\n-    public void update(final SortedBugCollection bugs, BProject project)\n-    {\n-\t\ttry\n-        {\n+    public void update(final SortedBugCollection bugs, BProject project) {\n+    try {\n             setTitle(\"FindBugs results [\" + project.getName() + \"]\");\n-        }\n-\t\tcatch (ProjectNotOpenException e)\n-        {\n+        } catch (ProjectNotOpenException e) {\n             setTitle(\"FindBugs results\");\n         }\n-\t\ttry\n-        {\n+try {\n             setIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n-        }\n-\t\tcatch (IOException e)\n-        {\n+        } catch (IOException e) {\n             Log.recordBug(e);\n         }\n-\t\t\n-        currProject = project;\n-        final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n-                .getCollection());\n-\t\t\n-        final JTable table = new JTable(new MyTableModel(bugList));\n-\n-        for (int i = 0; i < columnNames.length; i++)\n-\t\t\ttable.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n+currProject = project;\n \n-        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n-\n-\t\ttable.addMouseListener(new MouseAdapter()\n-                {\n+final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n+                .getCollection());\n+final JTable table = new JTable(new MyTableModel(bugList));\n+for (int i = 0; i < columnNames.length; i++)\n+    table.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n+table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n+table.addMouseListener(new MouseAdapter() {\n             @Override\n-            public void mouseClicked(MouseEvent evt)\n-\t\t\t{\n-                if (evt.getClickCount() == 2)\n+            public void mouseClicked(MouseEvent evt) {\n+    if (evt.getClickCount() == 2)\n                     showEditorAndHighlight(bugList.get(table.getSelectedRow()));\n-                else\n-\t\t\t\t{\n-                    description.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n-                    SwingUtilities.invokeLater(new Runnable()\n-                    {\n-\t\t\t\t\t\tpublic void run()\n-                        {\n+                else {\n+    description.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n+                    SwingUtilities.invokeLater(new Runnable() {\n+    public void run() {\n                             bottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n                         }\n-\t\t\t\t\t});\n-                }\n+    });\n+    }\n             }\n         });\n \n@@ -120,37 +104,26 @@ public class ResultsFrame extends JFrame\n         description = new JEditorPane();\n         description.setContentType(\"text/html\");\n         description.setEditable(false);\n-\t\t\n-        boolean allCompiled = true;\n-        for (BugInstance bug : bugs.getCollection())\n-        {\n-\t\t\ttry\n-            {\n-                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled())\n-                {\n-\t\t\t\t\tallCompiled = false;\n-                    break;\n+boolean allCompiled = true;\n+for (BugInstance bug : bugs.getCollection()) {\n+    try {\n+                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled()) {\n+   allCompiled = false;\n+break;\n                 }\n-            }\n-\t\t\tcatch (ExtensionException e)\n-            {\n+            } catch (ExtensionException e) {\n                 Log.recordBug(e);\n                 continue;\n-\t\t\t}\n-        }\n+    }\n+  }\n \n             try {\n-\t\t\t\tdescription.setPage(ResultsFrame.class.getResource(\"about.html\"));\n-            } catch (IOException e) {\n-                description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n-                    \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n-\t\t\t\t\t\"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n-                    \"source code.</p>\"\n+    description.setPage(ResultsFrame.class.getResource(\"about.html\"));\n+    } catch (IOException e) {\n+                description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" + \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" + \"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" + \"source code.</p>\"\n                     + \"<p>Bug: \" + e.toString()));\n             }\n-\n-\n-        bottomScroll = new JScrollPane(description);\n+bottomScroll = new JScrollPane(description);\n         bottomScroll.setPreferredSize(new Dimension(675, 200));\n \n         JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n@@ -160,111 +133,91 @@ public class ResultsFrame extends JFrame\n         pack();\n         setDefaultCloseOperation(HIDE_ON_CLOSE);\n         setVisible(true);\n-\t}\n+    }\n \n-    /*\n+/*\n      * Finds the editor that corresponds with the class the bug in the\n      * BugInstance is in. Opens the editor and then highlights the bug and\n \t * places the cursor at the beginning if class is compiled. If the class\n      * is not compiled than just opens the editor and moves the caret to the\n      * last known startline of that bug.\n      */\n-\tprivate void showEditorAndHighlight(BugInstance instance)\n-    {\n+private void showEditorAndHighlight(BugInstance instance) {\n         SourceLineAnnotation srcLine = instance\n                 .getPrimarySourceLineAnnotation();\n-\t\ttry\n-        {\n+try {\n             BClass srcClass = currProject.getPackage(srcLine.getPackageName())\n             .getBClass(getClassName(srcLine));\n-\t\t\tEditor srcEditor = srcClass.getEditor();\n-            srcEditor.setVisible(true);\n+Editor srcEditor = srcClass.getEditor();\n+srcEditor.setVisible(true);\n \n             // srcStartLine in case returned -1\n             int srcStartLine = srcLine.getStartLine();\n \n             srcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n \n-            if (srcStartLine > 0 && srcClass.isCompiled())\n-\t\t\t{\t\t\t\t\n-                srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n-                        new TextLocation(srcLine.getEndLine(), 0));\n+            if (srcStartLine > 0 && srcClass.isCompiled()) {\n+    srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n+new TextLocation(srcLine.getEndLine(), 0));\n             }\n-\t\t}\n-        catch (ProjectNotOpenException e)\n-        {\n+    } catch (ProjectNotOpenException e) {\n             Log.recordBug(e);\n-\t\t}\n-        catch (PackageNotFoundException e)\n-        {\n+    } catch (PackageNotFoundException e) {\n             Log.recordBug(e);\n-\t\t}\n+    }\n     }\n \n     /*\n      * Gets the source file and gets the name of the class from that.\n      */\n-\tprivate String getClassName(SourceLineAnnotation srcLine)\n-    {\n+\n+private String getClassName(SourceLineAnnotation srcLine) {\n         String str = srcLine.getSourceFile();\n         return str.substring(0, str.indexOf(\".\"));\n-\t}\n+    }\n \n-    private class MyTableModel extends AbstractTableModel\n-    {\n+private class MyTableModel extends AbstractTableModel {\n         private ArrayList<BugInstance> bugList;\n \n-        public MyTableModel(ArrayList<BugInstance> bugList)\n-        {\n+        public MyTableModel(ArrayList<BugInstance> bugList) {\n             this.bugList = bugList;\n-\t\t}\n+    }\n \n-        public int getRowCount()\n-        {\n+public int getRowCount() {\n             return bugList.size();\n-\t\t}\n+    }\n \n-        public int getColumnCount()\n-        {\n+public int getColumnCount() {\n             return 3;\n-\t\t}\n+    }\n \n-        @Override\n-        public String getColumnName(int column)\n-        {\n-\t\t\treturn columnNames[column];\n-        }\n+@Override\n+        public String getColumnName(int column) {\n+   return columnNames[column];\n+    }\n \n-        public Object getValueAt(int row, int column)\n-        {\n+        public Object getValueAt(int row, int column) {\n             SourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n-\t\t\t\n-            switch (column)\n-            {\n+switch (column) {\n             case 0:\n-\t\t\t\tboolean notCompiled = false;\n-\n-                try\n-                {\n-\t\t\t\t\tBClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n-                    notCompiled = !srcClass.isCompiled();\n+    boolean notCompiled = false;\n+try {\n+    BClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n+notCompiled = !srcClass.isCompiled();\n                 }\n-                catch (ExtensionException e)\n-\t\t\t\t{\n-                    Log.recordBug(e);\n+                catch (ExtensionException e) {\n+    Log.recordBug(e);\n                 }\n-\n-\t\t\t\treturn (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n-            case 1:\n+return (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n+    case 1:\n                 int line = annotation.getStartLine();\n                 return (line != -1 ? String.valueOf(line) : \"\");\n-\t\t\tcase 2:\n-                return bugList.get(row).getMessageWithoutPrefix();\n+    case 2:\n+    return bugList.get(row).getMessageWithoutPrefix();\n             default:\n-                throw new ArrayIndexOutOfBoundsException(\"Column \" + column\n-\t\t\t\t\t\t+ \" must be < 3\");\n-            }\n+                throw new ArrayIndexOutOfBoundsException(\"Column \" + column + \" must be < 3\");\n+    }\n         }\n \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 139
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/107/ResultsFrame.java\nindex 28ca0585dc8..44c4ec65766 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/107/ResultsFrame.java\n@@ -6,7 +6,6 @@ import java.awt.event.MouseEvent;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.HashMap;\n-\n import javax.imageio.ImageIO;\n import javax.swing.JEditorPane;\n import javax.swing.JFrame;\n@@ -16,7 +15,6 @@ import javax.swing.JTable;\n import javax.swing.ListSelectionModel;\n import javax.swing.SwingUtilities;\n import javax.swing.table.AbstractTableModel;\n-\n import bluej.extensions.BClass;\n import bluej.extensions.BProject;\n import bluej.extensions.ExtensionException;\n@@ -24,247 +22,192 @@ import bluej.extensions.PackageNotFoundException;\n import bluej.extensions.ProjectNotOpenException;\n import bluej.extensions.editor.Editor;\n import bluej.extensions.editor.TextLocation;\n-\n import edu.umd.cs.findbugs.BugInstance;\n import edu.umd.cs.findbugs.SortedBugCollection;\n import edu.umd.cs.findbugs.SourceLineAnnotation;\n \n @SuppressWarnings(\"serial\")\n-public class ResultsFrame extends JFrame\n-{\n+public class ResultsFrame extends JFrame {\n     private static final String[] columnNames = { \"File\", \"Line\", \"Description\" };\n+\n     private static final int[] columnWidths = { 150, 50, 475 };\n \n     private JEditorPane description;\n+\n     private JScrollPane bottomScroll;\n \n     private BProject currProject;\n \n     private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n+    /**\n      * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n      * @param project The BProject to get the frame for\n      * @param createIfNeeded If there's not already a frame, should one be created?\n-\t * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n+     * @return A ResultsFrame, or null if none exists and createIfNeeded is false\n      */\n-    public static ResultsFrame getInstance(BProject project, boolean createIfNeeded)\n-    {\n-\t\tif (!instanceMap.containsKey(project))\n-        {\n+\n+    public static ResultsFrame getInstance(BProject project, boolean createIfNeeded) {\n+        if (!instanceMap.containsKey(project)) {\n             if (createIfNeeded)\n                 instanceMap.put(project, new ResultsFrame());\n-\t\t\telse\n+            else\n                 return null;\n         }\n         return instanceMap.get(project);\n-\t}\n+    }\n+\n     private ResultsFrame() {}\n \n     /**\n-\t * Update the view\n+     * Update the view\n      */\n-    public void update(final SortedBugCollection bugs, BProject project)\n-    {\n-\t\ttry\n-        {\n+\n+    public void update(final SortedBugCollection bugs, BProject project) {\n+        try {\n             setTitle(\"FindBugs results [\" + project.getName() + \"]\");\n-        }\n-\t\tcatch (ProjectNotOpenException e)\n-        {\n+        } catch (ProjectNotOpenException e) {\n             setTitle(\"FindBugs results\");\n         }\n-\t\ttry\n-        {\n+        try {\n             setIconImage(ImageIO.read(ResultsFrame.class.getResource(\"/smallBuggy.png\")));\n-        }\n-\t\tcatch (IOException e)\n-        {\n+        } catch (IOException e) {\n             Log.recordBug(e);\n         }\n-\t\t\n         currProject = project;\n-        final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs\n-                .getCollection());\n-\t\t\n-        final JTable table = new JTable(new MyTableModel(bugList));\n \n+        final ArrayList<BugInstance> bugList = new ArrayList<BugInstance>(bugs.getCollection());\n+        final JTable table = new JTable(new MyTableModel(bugList));\n         for (int i = 0; i < columnNames.length; i++)\n-\t\t\ttable.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n-\n+            table.getColumn(columnNames[i]).setPreferredWidth(columnWidths[i]);\n         table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n-\n-\t\ttable.addMouseListener(new MouseAdapter()\n-                {\n+        table.addMouseListener(new MouseAdapter() {\n             @Override\n-            public void mouseClicked(MouseEvent evt)\n-\t\t\t{\n+            public void mouseClicked(MouseEvent evt) {\n                 if (evt.getClickCount() == 2)\n                     showEditorAndHighlight(bugList.get(table.getSelectedRow()));\n-                else\n-\t\t\t\t{\n+                else {\n                     description.setText(bugList.get(table.getSelectedRow()).getBugPattern().getDetailHTML());\n-                    SwingUtilities.invokeLater(new Runnable()\n-                    {\n-\t\t\t\t\t\tpublic void run()\n-                        {\n+                    SwingUtilities.invokeLater(new Runnable() {\n+                        public void run() {\n                             bottomScroll.getVerticalScrollBar().setValue(bottomScroll.getVerticalScrollBar().getMinimum());\n                         }\n-\t\t\t\t\t});\n+                    });\n                 }\n             }\n         });\n-\n         JScrollPane topScroll = new JScrollPane(table);\n         topScroll.setPreferredSize(new Dimension(675, 200));\n-\n         description = new JEditorPane();\n         description.setContentType(\"text/html\");\n         description.setEditable(false);\n-\t\t\n         boolean allCompiled = true;\n-        for (BugInstance bug : bugs.getCollection())\n-        {\n-\t\t\ttry\n-            {\n-                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled())\n-                {\n-\t\t\t\t\tallCompiled = false;\n+        for (BugInstance bug : bugs.getCollection()) {\n+            try {\n+                if (!project.getPackage(bug.getPrimarySourceLineAnnotation().getPackageName()).getBClass(getClassName(bug.getPrimarySourceLineAnnotation())).isCompiled()) {\n+                    allCompiled = false;\n                     break;\n                 }\n-            }\n-\t\t\tcatch (ExtensionException e)\n-            {\n+            } catch (ExtensionException e) {\n                 Log.recordBug(e);\n                 continue;\n-\t\t\t}\n-        }\n-\n-            try {\n-\t\t\t\tdescription.setPage(ResultsFrame.class.getResource(\"about.html\"));\n-            } catch (IOException e) {\n-                description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" +\n-                    \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" +\n-\t\t\t\t\t\"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" +\n-                    \"source code.</p>\"\n-                    + \"<p>Bug: \" + e.toString()));\n             }\n-\n-\n+        }\n+        try {\n+            description.setPage(ResultsFrame.class.getResource(\"about.html\"));\n+        } catch (IOException e) {\n+            description.setText(\"<html><body><p>XXXX Click on a bug to view a detailed description.</p><p>Double-click to be \" + \"taken to its location in the source code.</p>\" + (allCompiled ? \"\" : \"<p>* Classes marked with an \" + \"asterisk were not compiled when Findbugs ran, so this list may not reflect recent changes in the \" + \"source code.</p>\" + \"<p>Bug: \" + e.toString()));\n+        }\n         bottomScroll = new JScrollPane(description);\n         bottomScroll.setPreferredSize(new Dimension(675, 200));\n-\n-        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,\n-                topScroll, bottomScroll);\n+        JSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, topScroll, bottomScroll);\n         setContentPane(splitPane);\n-\n         pack();\n         setDefaultCloseOperation(HIDE_ON_CLOSE);\n         setVisible(true);\n-\t}\n+    }\n \n     /*\n      * Finds the editor that corresponds with the class the bug in the\n      * BugInstance is in. Opens the editor and then highlights the bug and\n-\t * places the cursor at the beginning if class is compiled. If the class\n+     * places the cursor at the beginning if class is compiled. If the class\n      * is not compiled than just opens the editor and moves the caret to the\n      * last known startline of that bug.\n      */\n-\tprivate void showEditorAndHighlight(BugInstance instance)\n-    {\n-        SourceLineAnnotation srcLine = instance\n-                .getPrimarySourceLineAnnotation();\n-\t\ttry\n-        {\n-            BClass srcClass = currProject.getPackage(srcLine.getPackageName())\n-            .getBClass(getClassName(srcLine));\n-\t\t\tEditor srcEditor = srcClass.getEditor();\n+\n+\n+    private void showEditorAndHighlight(BugInstance instance) {\n+        SourceLineAnnotation srcLine = instance.getPrimarySourceLineAnnotation();\n+        try {\n+            BClass srcClass = currProject.getPackage(srcLine.getPackageName()).getBClass(getClassName(srcLine));\n+            Editor srcEditor = srcClass.getEditor();\n             srcEditor.setVisible(true);\n \n             // srcStartLine in case returned -1\n             int srcStartLine = srcLine.getStartLine();\n-\n             srcEditor.setCaretLocation(new TextLocation(srcStartLine - 1, 0));\n-\n-            if (srcStartLine > 0 && srcClass.isCompiled())\n-\t\t\t{\t\t\t\t\n-                srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0),\n-                        new TextLocation(srcLine.getEndLine(), 0));\n+            if (srcStartLine > 0 && srcClass.isCompiled()) {\n+                srcEditor.setSelection(new TextLocation(srcStartLine - 1, 0), new TextLocation(srcLine.getEndLine(), 0));\n             }\n-\t\t}\n-        catch (ProjectNotOpenException e)\n-        {\n+        } catch (ProjectNotOpenException e) {\n             Log.recordBug(e);\n-\t\t}\n-        catch (PackageNotFoundException e)\n-        {\n+        } catch (PackageNotFoundException e) {\n             Log.recordBug(e);\n-\t\t}\n+        }\n     }\n \n     /*\n      * Gets the source file and gets the name of the class from that.\n      */\n-\tprivate String getClassName(SourceLineAnnotation srcLine)\n-    {\n+\n+\n+    private String getClassName(SourceLineAnnotation srcLine) {\n         String str = srcLine.getSourceFile();\n         return str.substring(0, str.indexOf(\".\"));\n-\t}\n+    }\n+\n \n-    private class MyTableModel extends AbstractTableModel\n-    {\n+    private class MyTableModel extends AbstractTableModel {\n         private ArrayList<BugInstance> bugList;\n \n-        public MyTableModel(ArrayList<BugInstance> bugList)\n-        {\n+\n+        public MyTableModel(ArrayList<BugInstance> bugList) {\n             this.bugList = bugList;\n-\t\t}\n+        }\n+\n \n-        public int getRowCount()\n-        {\n+        public int getRowCount() {\n             return bugList.size();\n-\t\t}\n+        }\n \n-        public int getColumnCount()\n-        {\n+        public int getColumnCount() {\n             return 3;\n-\t\t}\n+        }\n \n         @Override\n-        public String getColumnName(int column)\n-        {\n-\t\t\treturn columnNames[column];\n+        public String getColumnName(int column) {\n+            return columnNames[column];\n         }\n \n-        public Object getValueAt(int row, int column)\n-        {\n+        public Object getValueAt(int row, int column) {\n             SourceLineAnnotation annotation = bugList.get(row).getPrimarySourceLineAnnotation();\n-\t\t\t\n-            switch (column)\n-            {\n+            switch (column) {\n             case 0:\n-\t\t\t\tboolean notCompiled = false;\n-\n-                try\n-                {\n-\t\t\t\t\tBClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n+                boolean notCompiled = false;\n+                try {\n+                    BClass srcClass = currProject.getPackage(annotation.getPackageName()).getBClass(getClassName(annotation));\n                     notCompiled = !srcClass.isCompiled();\n-                }\n-                catch (ExtensionException e)\n-\t\t\t\t{\n+                } catch (ExtensionException e) {\n                     Log.recordBug(e);\n                 }\n-\n-\t\t\t\treturn (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n+                return (notCompiled ? \"*\" : \"\") + annotation.getSourceFile();\n             case 1:\n                 int line = annotation.getStartLine();\n                 return (line != -1 ? String.valueOf(line) : \"\");\n-\t\t\tcase 2:\n+            case 2:\n                 return bugList.get(row).getMessageWithoutPrefix();\n             default:\n-                throw new ArrayIndexOutOfBoundsException(\"Column \" + column\n-\t\t\t\t\t\t+ \" must be < 3\");\n+                throw new ArrayIndexOutOfBoundsException(\"Column \" + column + \" must be < 3\");\n             }\n         }\n-\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 148
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "48",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/107/ResultsFrame.java\nindex 28ca0585dc8..d570ff2a819 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/107/ResultsFrame.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/107/ResultsFrame.java\n@@ -41,7 +41,7 @@ public class ResultsFrame extends JFrame\n     private BProject currProject;\n \n     private static HashMap<BProject, ResultsFrame> instanceMap = new HashMap<BProject, ResultsFrame>();\n-\t/**\n+/**\n      * \"Multipleton\" design pattern: return one ResultsFrame per BProject.\n      * @param project The BProject to get the frame for\n      * @param createIfNeeded If there's not already a frame, should one be created?\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}