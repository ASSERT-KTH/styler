{
    "project_name": "wso2-attic-commons",
    "error_id": "128",
    "information": {
        "errors": [
            {
                "line": "339",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    if (validator instanceof WSDLValidatorImpl)\n\t{\n    \t((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n    \t\t\tgetAnalyzerConfigIndex() == 0);\n\t}\n    else",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/128/BasicProfileAnalyzer.java\nindex 9a6ce4d0ef8..495f44f07e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/128/BasicProfileAnalyzer.java\n@@ -336,8 +336,8 @@ public class BasicProfileAnalyzer extends Analyzer\n   {\n     if (validator instanceof WSDLValidatorImpl)\n \t{\n-    \t((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n-    \t\t\tgetAnalyzerConfigIndex() == 0);\n+((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n+\t\t\t\t\t\t\tgetAnalyzerConfigIndex() == 0);\n \t}\n     else\n     {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/128/BasicProfileAnalyzer.java\nindex 9a6ce4d0ef8..5f297345914 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/128/BasicProfileAnalyzer.java\n@@ -10,6 +10,7 @@\n  *   Parasoft - Initial API and implementation\n  *   BeaconIT - Initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsi.internal.core.analyzer;\n \n import java.io.IOException;\n@@ -55,13 +56,12 @@ import org.uddi4j.transport.TransportFactory;\n /**\n  * Analyzes log files to confirm conformance to a profile.\n  *\n- * @version 1.0.1\n  * @author Jim Clune\n  * @author Peter Brittenham\n  * @author Graham Turrell\n+ * @version 1.0.1\n  */\n-public class BasicProfileAnalyzer extends Analyzer\n-{\n+public class BasicProfileAnalyzer extends Analyzer {\n   /**\n    * Tool information.\n    */\n@@ -75,125 +75,121 @@ public class BasicProfileAnalyzer extends Analyzer\n \n   /**\n    * Basic profile analyzer.\n+   *\n    * @param args command line arguments.\n    * @throws WSIException if unable to create a Basic profile analyzer.\n    */\n-  public BasicProfileAnalyzer(String[] args) throws WSIException\n-  {\n+  public BasicProfileAnalyzer(String[] args) throws WSIException {\n     super(args, new ToolInfo(TOOL_NAME));\n     new XMLDocumentCache();\n   }\n \n   /**\n    * Basic profile analyzer.\n-   * @param args command line arguments.\n+   *\n+   * @param args     command line arguments.\n    * @param validate flag for command line argument validation.\n    * @throws WSIException if unable to create a Basic profile analyzer.\n    */\n-  public BasicProfileAnalyzer(String[] args, boolean validate) throws WSIException\n-  {\n+  public BasicProfileAnalyzer(String[] args, boolean validate) throws WSIException {\n     super(args, new ToolInfo(TOOL_NAME), validate);\n     new XMLDocumentCache();\n   }\n \n   /**\n    * Basic profile analyzer.\n+   *\n    * @param analyzerConfigList a list of configurations for the analyzer.\n    * @throws WSIException if unable to create a Basic profile analyzer.\n    */\n-  public BasicProfileAnalyzer(List analyzerConfigList) throws WSIException\n-  {\n+  public BasicProfileAnalyzer(List analyzerConfigList) throws WSIException {\n     super(analyzerConfigList, new ToolInfo(TOOL_NAME));\n     new XMLDocumentCache();\n   }\n \n   /**\n    * Basic profile analyzer.\n+   *\n    * @param analyzerConfigList a list of configurations for the analyzer.\n-   * @param wsdlURI a wsdl document location.\n+   * @param wsdlURI            a wsdl document location.\n    * @throws WSIException if unable to create a Basic profile analyzer.\n    */\n   public BasicProfileAnalyzer(List analyzerConfigList, String wsdlURI)\n-    throws WSIException\n-  {\n+    throws WSIException {\n     super(analyzerConfigList, new ToolInfo(TOOL_NAME));\n     new XMLDocumentCache();\n-    \n-    try\n-    {\n+\n+    try {\n       // Get the WSDL document\n-      if (wsdlURI != null)\n+      if (wsdlURI != null) {\n         this.wsdlDocument = new WSDLDocument(wsdlURI);\n-    }\n-\n-    catch (WSDLException we)\n-    {\n+      }\n+    } catch (WSDLException we) {\n       throw new WSIException(we.getMessage(), we);\n     }\n \n   }\n-  \n+\n   private WSDLDocument getWsdlFromUddi() {\n-      WSDLDocument wsdlDoc = null;\n-      try {\n-          UDDIProxy uddiProxy = new UDDIProxy();\n-          UDDIReference uddiReference = getAnalyzerConfig().getUDDIReference();\n-          uddiProxy.setInquiryURL(uddiReference.getInquiryURL());\n-          TModel tModel = null;\n-\n-          if (uddiReference.getKeyType().equals(UDDIReference.BINDING_KEY)) {\n-              BindingDetail bindingDetail = uddiProxy.get_bindingDetail(\n-                      uddiReference.getKey());\n-              BindingTemplate bindingTemplate = (BindingTemplate) bindingDetail.\n-                      getBindingTemplateVector().elementAt(0);\n-              tModel = UDDIUtils.findTModel(uddiProxy, bindingTemplate, false);\n-          } else { // UDDIReference.TMODEL_KEY\n-              TModelDetail tModelDetail = uddiProxy.get_tModelDetail(\n-                          uddiReference.getKey());\n-              tModel = (TModel) tModelDetail.getTModelVector().elementAt(0);\n-          }\n-\n-          String overviewURL = UDDIUtils.getOverviewURL(tModel);\n-          String wsdlURI = UDDIUtils.getWSDLLocation(overviewURL);\n-          wsdlDoc = new WSDLDocument(wsdlURI);\n-\n-          /* TODO:  I refactored this code from BSP3001 but I'm not sure that\n-           * it's correct.  This overrides the <wsdlElement> child of\n-           * <uddiReference> from the config file, which never gets used.\n-           */\n-          // If the wsdlElement does not exist, then set it\n-          if (analyzerContext.getServiceReference().getWSDLElement() == null)\n-          {\n-              Binding binding = UDDIUtils.getBinding(overviewURL, wsdlDoc);\n-              String bindingName =\n-                  binding == null ? null : binding.getQName().getLocalPart();\n-                String namespace =\n-                  binding == null ? null : binding.getQName().getNamespaceURI();\n-\n-            // Get WSDL binding from the overviewURL and set in analyzerContext\n-            WSDLElement wsdlElement = new WSDLElementImpl();\n-            wsdlElement.setName(bindingName);\n-            wsdlElement.setNamespace(namespace);\n-            wsdlElement.setType(WSDLValidator.TYPE_DESCRIPTION_BINDING);\n-            analyzerContext.getServiceReference().setWSDLElement(wsdlElement);\n-          }\n-          return wsdlDoc;\n-\n-      } catch (Exception e) {\n-        /* If the wsdlDoc is set at the point of the exception, return it;\n-         * otherwise return null. */\n-        return wsdlDoc;\n+    WSDLDocument wsdlDoc = null;\n+    try {\n+      UDDIProxy uddiProxy = new UDDIProxy();\n+      UDDIReference uddiReference = getAnalyzerConfig().getUDDIReference();\n+      uddiProxy.setInquiryURL(uddiReference.getInquiryURL());\n+      TModel tModel = null;\n+\n+      if (uddiReference.getKeyType().equals(UDDIReference.BINDING_KEY)) {\n+        BindingDetail bindingDetail = uddiProxy.get_bindingDetail(\n+          uddiReference.getKey());\n+        BindingTemplate bindingTemplate = (BindingTemplate) bindingDetail.\n+          getBindingTemplateVector().elementAt(0);\n+        tModel = UDDIUtils.findTModel(uddiProxy, bindingTemplate, false);\n+      } else { // UDDIReference.TMODEL_KEY\n+        TModelDetail tModelDetail = uddiProxy.get_tModelDetail(\n+          uddiReference.getKey());\n+        tModel = (TModel) tModelDetail.getTModelVector().elementAt(0);\n+      }\n+\n+      String overviewURL = UDDIUtils.getOverviewURL(tModel);\n+      String wsdlURI = UDDIUtils.getWSDLLocation(overviewURL);\n+      wsdlDoc = new WSDLDocument(wsdlURI);\n+\n+      /* TODO:  I refactored this code from BSP3001 but I'm not sure that\n+       * it's correct.  This overrides the <wsdlElement> child of\n+       * <uddiReference> from the config file, which never gets used.\n+       */\n+      // If the wsdlElement does not exist, then set it\n+      if (analyzerContext.getServiceReference().getWSDLElement() == null) {\n+        Binding binding = UDDIUtils.getBinding(overviewURL, wsdlDoc);\n+        String bindingName =\n+          binding == null ? null : binding.getQName().getLocalPart();\n+        String namespace =\n+          binding == null ? null : binding.getQName().getNamespaceURI();\n+\n+        // Get WSDL binding from the overviewURL and set in analyzerContext\n+        WSDLElement wsdlElement = new WSDLElementImpl();\n+        wsdlElement.setName(bindingName);\n+        wsdlElement.setNamespace(namespace);\n+        wsdlElement.setType(WSDLValidator.TYPE_DESCRIPTION_BINDING);\n+        analyzerContext.getServiceReference().setWSDLElement(wsdlElement);\n+      }\n+      return wsdlDoc;\n+\n+    } catch (Exception e) {\n+      /* If the wsdlDoc is set at the point of the exception, return it;\n+       * otherwise return null. */\n+      return wsdlDoc;\n     }\n   }\n-  \n-  \n+\n+\n   /**\n    * Process all conformance validation functions.\n+   *\n    * @return status code.\n    * @throws WSIException if conformance validation process failed.\n    */\n-  public int validateConformance() throws WSIException\n-  {\n+  public int validateConformance() throws WSIException {\n     int statusCode = 0;\n \n     Report report = null;\n@@ -204,16 +200,14 @@ public class BasicProfileAnalyzer extends Analyzer\n       new AnalyzerContext(new ServiceReference(getAnalyzerConfig()));\n \n     ReportWriter reportWriter = null;\n-    try\n-    {\n+    try {\n       this.profileAssertions = WSITestToolsProperties.getProfileAssertions(\n-                getAnalyzerConfig().getTestAssertionsDocumentLocation());\n+        getAnalyzerConfig().getTestAssertionsDocumentLocation());\n \n-      if (this.profileAssertions == null)\n-      {\n+      if (this.profileAssertions == null) {\n         throw new WSIException(messageList.getMessage(\"config20\",\n-       \t\t   \"The WS-I Test Assertion Document (TAD)document was either not found or could not be processed.\"));  \n-      }\t\n+          \"The WS-I Test Assertion Document (TAD)document was either not found or could not be processed.\"));\n+      }\n \n       // Create report from document factory\n       report = documentFactory.newReport();\n@@ -238,31 +232,33 @@ public class BasicProfileAnalyzer extends Analyzer\n \n       // fetch WSDL if not set in constructor\n       // First, attempt to get the WSDL URI from a UDDI tModel\n-      if ((wsdlDocument == null) && (getAnalyzerConfig().isUDDIReferenceSet()))\n-              wsdlDocument = getWsdlFromUddi();\n+      if ((wsdlDocument == null) && (getAnalyzerConfig().isUDDIReferenceSet())) {\n+        wsdlDocument = getWsdlFromUddi();\n+      }\n \n       /* Next, try to use the WSDL settings from the config file.  If we can't\n        * fetch that WSDL, and the config file is set up to test a WSDL, then the\n        * validator fails here. */\n-      if ((wsdlDocument == null) && (getAnalyzerConfig().isWSDLReferenceSet()))\n-      {\n-          wsdlDocument = new WSDLDocument(getAnalyzerConfig().\n-                  getWSDLLocation());\n-\n-          if (wsdlDocument == null)\n-              throw new WSIException(messageList.getMessage(\"config05\",\n-                      \"WSDL document was either not found or could not be \" + \n-                      \"processed.\"));\n+      if ((wsdlDocument == null) && (getAnalyzerConfig().isWSDLReferenceSet())) {\n+        wsdlDocument = new WSDLDocument(getAnalyzerConfig().\n+          getWSDLLocation());\n+\n+        if (wsdlDocument == null) {\n+          throw new WSIException(messageList.getMessage(\"config05\",\n+            \"WSDL document was either not found or could not be \" +\n+              \"processed.\"));\n+        }\n       }\n-      \n+\n       /*\n        * Only validate messages against a wsdl document if the wsdl document\n-       * does not contain soap 1.2 bindings. \n+       * does not contain soap 1.2 bindings.\n        */\n-\t  if (WSDLUtils.isSOAP12WSDL(wsdlDocument) && getAnalyzerConfig().getLogLocation() != null)\n-\t\t  getAnalyzerConfig().setWSDLReference(null);\n-\t  else\n-\t\t  analyzerContext.setWsdlDocument(wsdlDocument);  \n+      if (WSDLUtils.isSOAP12WSDL(wsdlDocument) && getAnalyzerConfig().getLogLocation() != null) {\n+        getAnalyzerConfig().setWSDLReference(null);\n+      } else {\n+        analyzerContext.setWsdlDocument(wsdlDocument);\n+      }\n \n       // Start writing report\n       this.reporter.startReport();\n@@ -270,21 +266,19 @@ public class BasicProfileAnalyzer extends Analyzer\n       // Walk through the artifact elements from the TAD, validating each one\n       profileAssertions.getArtifactList().keySet().iterator();\n       for (Iterator i = profileAssertions.getArtifactList().keySet().iterator();\n-              i.hasNext(); ) {\n-          String artifactType = (String) i.next();\n-          // Set current artifact\n-          reportArtifact = setCurrentArtifact(ArtifactType.getArtifactType(\n-                  artifactType));\n-          validate(reportArtifact, factory.getValidatorForArtifact(\n-                  artifactType));\n-          this.reporter.endCurrentArtifact();\n+           i.hasNext(); ) {\n+        String artifactType = (String) i.next();\n+        // Set current artifact\n+        reportArtifact = setCurrentArtifact(ArtifactType.getArtifactType(\n+          artifactType));\n+        validate(reportArtifact, factory.getValidatorForArtifact(\n+          artifactType));\n+        this.reporter.endCurrentArtifact();\n       }\n \n       // Finish the conformance report\n       reporter.finishReport();\n-    }\n-    catch (Exception e)\n-    {\n+    } catch (Exception e) {\n       StringWriter sw = new StringWriter();\n       PrintWriter pw = new PrintWriter(sw);\n \n@@ -294,8 +288,7 @@ public class BasicProfileAnalyzer extends Analyzer\n           \"The conformance validation process failed.\");\n \n       // Finish report\n-      if (reporter != null)\n-      {\n+      if (reporter != null) {\n         pw.println(message);\n         pw.println(\n           messageList.getMessage(\"exception01\", \"Exception: \")\n@@ -304,21 +297,18 @@ public class BasicProfileAnalyzer extends Analyzer\n         reporter.finishReportWithError(sw.toString());\n       }\n \n-      if (e instanceof WSIException)\n+      if (e instanceof WSIException) {\n         throw (WSIException) e;\n-      else\n+      } else {\n         throw new WSIException(message, e);\n-    }\n-    finally \n-    {\n-      if (reportWriter != null)\n-      {\n+      }\n+    } finally {\n+      if (reportWriter != null) {\n         reportWriter.close();\n       }\n     }\n \n-    if (report != null)\n-    {\n+    if (report != null) {\n       statusCode =\n         (report.getSummaryResult().equals(AssertionResult.RESULT_PASSED)\n           ? 0\n@@ -332,40 +322,34 @@ public class BasicProfileAnalyzer extends Analyzer\n    * Run test assertions.\n    */\n   private void validate(ReportArtifact reportArtifact, BaseValidator validator)\n-          throws WSIException \n-  {\n-    if (validator instanceof WSDLValidatorImpl)\n-\t{\n-    \t((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n-    \t\t\tgetAnalyzerConfigIndex() == 0);\n-\t}\n-    else\n-    {\n+    throws WSIException {\n+    if (validator instanceof WSDLValidatorImpl) {\n+      ((WSDLValidatorImpl) validator)\n+        .init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n+          getAnalyzerConfigIndex() == 0);\n+    } else {\n       validator.init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter);\n     }\n \n     if (validator.runTests()) {\n-        validator.validateArtifact();\n-        validator.cleanup();\n-    } \n-    else \n-    {\n+      validator.validateArtifact();\n+      validator.cleanup();\n+    } else {\n       validator.setAllMissingInput();\n     }\n   }\n \n   /**\n    * Command line interface for the analyzer tool.\n+   *\n    * @param args command line arguments.\n    * @throws IOException if IO problems occur.\n    */\n-  public static void main(String[] args) throws IOException\n-  {\n+  public static void main(String[] args) throws IOException {\n     int statusCode = 0;\n     Analyzer analyzer = null;\n \n-    try\n-    {\n+    try {\n       // Set document builder factory class\n       System.setProperty(\n         WSIProperties.PROP_JAXP_DOCUMENT_FACTORY,\n@@ -387,10 +371,7 @@ public class BasicProfileAnalyzer extends Analyzer\n         \"created01\",\n         null,\n         \"Conformance report has been created.\");\n-    }\n-\n-    catch (Exception e)\n-    {\n+    } catch (Exception e) {\n       statusCode = 1;\n \n       String messageID;\n@@ -398,31 +379,29 @@ public class BasicProfileAnalyzer extends Analyzer\n       String messageData;\n \n       if ((e instanceof WSIFileNotFoundException)\n-        || (e instanceof IllegalArgumentException))\n-      {\n+        || (e instanceof IllegalArgumentException)) {\n         //printStackTrace = false;\n         messageID = \"error01\";\n         defaultMessage = \"Analyzer Error:\";\n         messageData = e.getMessage();\n-      }\n-\n-      else\n-      {\n+      } else {\n         //printStackTrace = true;\n         messageID = \"error02\";\n         defaultMessage = \"Analyzer Stopped By Exception:\";\n         messageData = e.toString();\n       }\n \n-      if (analyzer != null)\n+      if (analyzer != null) {\n         analyzer.printMessage(messageID, messageData, defaultMessage);\n-      else\n+      } else {\n         Analyzer.staticPrintMessage(messageID, messageData, defaultMessage);\n+      }\n \n       if (analyzer != null\n         && analyzer.getAnalyzerConfig() != null\n-        && analyzer.getAnalyzerConfig().getVerboseOption())\n+        && analyzer.getAnalyzerConfig().getVerboseOption()) {\n         dump(e);\n+      }\n     }\n \n     // Exit\n@@ -431,13 +410,13 @@ public class BasicProfileAnalyzer extends Analyzer\n \n   /**\n    * Set current artifact.\n+   *\n    * @param artifactType an ArtifactType object.\n    * @return a ReportArtifact object.\n    * @throws WSIException if problems creating report artifact.\n    */\n   protected ReportArtifact setCurrentArtifact(ArtifactType artifactType)\n-    throws WSIException\n-  {\n+    throws WSIException {\n     // Create artifact\n     ReportArtifact reportArtifact = reporter.createArtifact();\n     reportArtifact.setType(artifactType);\n@@ -450,17 +429,17 @@ public class BasicProfileAnalyzer extends Analyzer\n \n   /**\n    * Print exception.\n+   *\n    * @param t a Throwable object.\n    */\n-  public static void dump(Throwable t)\n-  {\n-    while (t instanceof WSIException)\n-    {\n+  public static void dump(Throwable t) {\n+    while (t instanceof WSIException) {\n       Throwable nested = ((WSIException) t).getTargetException();\n-      if (nested == null)\n+      if (nested == null) {\n         break;\n-      else\n+      } else {\n         t = nested;\n+      }\n     }\n     t.printStackTrace();\n   }\n",
            "diff_size": 175
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/128/BasicProfileAnalyzer.java\nindex 9a6ce4d0ef8..d543831f022 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/128/BasicProfileAnalyzer.java\n@@ -336,8 +336,9 @@ public class BasicProfileAnalyzer extends Analyzer\n   {\n     if (validator instanceof WSDLValidatorImpl)\n \t{\n-    \t((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n-    \t\t\tgetAnalyzerConfigIndex() == 0);\n+\n+((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n+\t\t\t\t\t\t\tgetAnalyzerConfigIndex() == 0);\n \t}\n     else\n     {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/128/BasicProfileAnalyzer.java\nindex 9a6ce4d0ef8..495f44f07e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/128/BasicProfileAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/128/BasicProfileAnalyzer.java\n@@ -336,8 +336,8 @@ public class BasicProfileAnalyzer extends Analyzer\n   {\n     if (validator instanceof WSDLValidatorImpl)\n \t{\n-    \t((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n-    \t\t\tgetAnalyzerConfigIndex() == 0);\n+((WSDLValidatorImpl)validator).init(analyzerContext, profileAssertions, reportArtifact, getAnalyzerConfig(), reporter,\n+\t\t\t\t\t\t\tgetAnalyzerConfigIndex() == 0);\n \t}\n     else\n     {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}