{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1080",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "51",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1080/PendingReferenceCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1080/PendingReferenceCheck.java\nindex c059fc524d2..02699acd2b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1080/PendingReferenceCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1080/PendingReferenceCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.report;\n \n import org.neo4j.consistency.checking.CheckerEngine;\n@@ -26,60 +27,58 @@ import org.neo4j.kernel.impl.store.record.AbstractBaseRecord;\n \n public class PendingReferenceCheck<REFERENCED extends AbstractBaseRecord>\n {\n-    private CheckerEngine engine;\n-    private final ComparativeRecordChecker checker;\n+  private CheckerEngine engine;\n+  private final ComparativeRecordChecker checker;\n \n-    PendingReferenceCheck( CheckerEngine engine, ComparativeRecordChecker checker )\n-    {\n-        this.engine = engine;\n-        this.checker = checker;\n-    }\n+  PendingReferenceCheck(CheckerEngine engine, ComparativeRecordChecker checker)\n+  {\n+    this.engine = engine;\n+    this.checker = checker;\n+  }\n \n-    @Override\n-    public synchronized String toString()\n+  @Override\n+  public synchronized String toString()\n+  {\n+    if (engine == null)\n     {\n-        if ( engine == null )\n-        {\n-            return String.format( \"CompletedReferenceCheck{%s}\", checker );\n-        }\n-        else\n-        {\n-            return ConsistencyReporter.pendingCheckToString( engine, checker );\n-        }\n-    }\n-\n-    public void checkReference( REFERENCED referenced, RecordAccess records )\n+      return String.format(\"CompletedReferenceCheck{%s}\", checker);\n+    } else\n     {\n-        ConsistencyReporter.dispatchReference( engine(), checker, referenced, records );\n+      return ConsistencyReporter.pendingCheckToString(engine, checker);\n     }\n+  }\n \n-    public void checkDiffReference( REFERENCED oldReferenced, REFERENCED newReferenced, RecordAccess records )\n+  public void checkReference(REFERENCED referenced, RecordAccess records)\n+  {\n+    ConsistencyReporter.dispatchReference(engine(), checker, referenced, records);\n+  }\n+\n+  public void checkDiffReference(REFERENCED oldReferenced, REFERENCED newReferenced, RecordAccess records)\n+  {\n+    ConsistencyReporter.dispatchChangeReference(engine(), checker, oldReferenced, newReferenced, records);\n+  }\n+\n+  public synchronized void skip()\n+  {\n+    if (engine != null)\n     {\n-        ConsistencyReporter.dispatchChangeReference( engine(), checker, oldReferenced, newReferenced, records );\n+      ConsistencyReporter.dispatchSkip(engine);\n+      engine = null;\n     }\n+  }\n \n-    public synchronized void skip()\n+  private synchronized CheckerEngine engine()\n+  {\n+    if (engine == null)\n     {\n-        if ( engine != null )\n-        {\n-            ConsistencyReporter.dispatchSkip( engine );\n-            engine = null;\n-        }\n+      throw new IllegalStateException(\"Reference has already been checked.\");\n     }\n-\n-    private synchronized CheckerEngine engine()\n+    try\n+    {\n+      return engine;\n+    } finally\n     {\n-        if ( engine == null )\n-        {\n-            throw new IllegalStateException( \"Reference has already been checked.\" );\n-        }\n-        try\n-        {\n-            return engine;\n-        }\n-        finally\n-        {\n-            engine = null;\n-        }\n+      engine = null;\n     }\n+  }\n }\n",
            "diff_size": 66
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1080/PendingReferenceCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1080/PendingReferenceCheck.java\nindex c059fc524d2..c532bb1423e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1080/PendingReferenceCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1080/PendingReferenceCheck.java\n@@ -73,7 +73,8 @@ public class PendingReferenceCheck<REFERENCED extends AbstractBaseRecord>\n         {\n             throw new IllegalStateException( \"Reference has already been checked.\" );\n         }\n-        try\n+\n+try\n         {\n             return engine;\n         }\n@@ -82,4 +83,4 @@ public class PendingReferenceCheck<REFERENCED extends AbstractBaseRecord>\n             engine = null;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}