{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4486",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "12",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "129",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "148",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "148",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "253",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "271",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "316",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "368",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4486/BufferedCharSeeker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4486/BufferedCharSeeker.java\nindex 0b8b81a0ad3..6febe3d37b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4486/BufferedCharSeeker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4486/BufferedCharSeeker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.BufferedReader;\n@@ -35,389 +36,376 @@ import static org.neo4j.csv.reader.Mark.END_OF_LINE_CHARACTER;\n  */\n public class BufferedCharSeeker implements CharSeeker\n {\n-    private static final char EOL_CHAR = '\\n';\n-    private static final char EOL_CHAR_2 = '\\r';\n-    private static final char EOF_CHAR = (char) -1;\n-    private static final char BACK_SLASH = '\\\\';\n-\n-    private char[] buffer;\n-    private int dataLength;\n-    private int dataCapacity;\n-\n-    // index into the buffer character array to read the next time nextChar() is called\n-    private int bufferPos;\n-    private int bufferStartPos;\n-    // last index (effectively length) of characters in use in the buffer\n-    private int bufferEnd;\n-    // bufferPos denoting the start of this current line that we're reading\n-    private int lineStartPos;\n-    // bufferPos when we started reading the current field\n-    private int seekStartPos;\n-    // 1-based value of which logical line we're reading a.t.m.\n-    private int lineNumber;\n-    // flag to know if we've read to the end\n-    private boolean eof;\n-    // char to recognize as quote start/end\n-    private final char quoteChar;\n-    // this absolute position + bufferPos is the current position in the source we're reading\n-    private long absoluteBufferStartPosition;\n-    private String sourceDescription;\n-    private final boolean multilineFields;\n-    private final boolean legacyStyleQuoting;\n-    private final Source source;\n-    private Chunk currentChunk;\n-    private final boolean trim;\n-\n-    public BufferedCharSeeker( Source source, Configuration config )\n-    {\n-        this.source = source;\n-        this.quoteChar = config.quotationCharacter();\n-        this.lineStartPos = this.bufferPos;\n-        this.multilineFields = config.multilineFields();\n-        this.legacyStyleQuoting = config.legacyStyleQuoting();\n-        this.trim = getTrimStringIgnoreErrors( config );\n+  private static final char EOL_CHAR = '\\n';\n+  private static final char EOL_CHAR_2 = '\\r';\n+  private static final char EOF_CHAR = (char) -1;\n+  private static final char BACK_SLASH = '\\\\';\n+\n+  private char[] buffer;\n+  private int dataLength;\n+  private int dataCapacity;\n+\n+  // index into the buffer character array to read the next time nextChar() is called\n+  private int bufferPos;\n+  private int bufferStartPos;\n+  // last index (effectively length) of characters in use in the buffer\n+  private int bufferEnd;\n+  // bufferPos denoting the start of this current line that we're reading\n+  private int lineStartPos;\n+  // bufferPos when we started reading the current field\n+  private int seekStartPos;\n+  // 1-based value of which logical line we're reading a.t.m.\n+  private int lineNumber;\n+  // flag to know if we've read to the end\n+  private boolean eof;\n+  // char to recognize as quote start/end\n+  private final char quoteChar;\n+  // this absolute position + bufferPos is the current position in the source we're reading\n+  private long absoluteBufferStartPosition;\n+  private String sourceDescription;\n+  private final boolean multilineFields;\n+  private final boolean legacyStyleQuoting;\n+  private final Source source;\n+  private Chunk currentChunk;\n+  private final boolean trim;\n+\n+  public BufferedCharSeeker(Source source, Configuration config)\n+  {\n+    this.source = source;\n+    this.quoteChar = config.quotationCharacter();\n+    this.lineStartPos = this.bufferPos;\n+    this.multilineFields = config.multilineFields();\n+    this.legacyStyleQuoting = config.legacyStyleQuoting();\n+    this.trim = getTrimStringIgnoreErrors(config);\n+  }\n+\n+  @Override\n+  public boolean seek(Mark mark, int untilChar) throws IOException\n+  {\n+    if (eof)\n+    {   // We're at the end\n+      return eof(mark);\n     }\n \n-    @Override\n-    public boolean seek( Mark mark, int untilChar ) throws IOException\n+    // Keep a start position in case we need to further fill the buffer in nextChar, a value can at maximum be the\n+    // whole buffer, so max one fill per value is supported.\n+    seekStartPos = bufferPos; // seekStartPos updated in nextChar if buffer flips over, that's why it's a member\n+    int ch;\n+    int endOffset = 1;\n+    int skippedChars = 0;\n+    int quoteDepth = 0;\n+    int quoteStartLine = 0;\n+    boolean isQuoted = false;\n+\n+    while (!eof)\n     {\n-        if ( eof )\n-        {   // We're at the end\n-            return eof( mark );\n+      ch = nextChar(skippedChars);\n+      if (quoteDepth == 0)\n+      {   // In normal mode, i.e. not within quotes\n+        if (ch == untilChar)\n+        {   // We found a delimiter, set marker and return true\n+          return setMark(mark, endOffset, skippedChars, ch, isQuoted);\n+        } else if (trim && isWhitespace(ch))\n+        {   // Only check for left+trim whitespace as long as we haven't found a non-whitespace character\n+          if (seekStartPos == bufferPos - 1/* -1 since we just advanced one */)\n+          {   // We found a whitespace, which is before the first non-whitespace of the value and we've been told to trim that off\n+            seekStartPos++;\n+          }\n+        } else if (ch == quoteChar && seekStartPos == bufferPos - 1/* -1 since we just advanced one */)\n+        {   // We found a quote, which was the first of the value, skip it and switch mode\n+          quoteDepth++;\n+          isQuoted = true;\n+          seekStartPos++;\n+          quoteStartLine = lineNumber;\n+        } else if (isNewLine(ch))\n+        {   // Encountered newline, done for now\n+          if (bufferPos - 1 == lineStartPos)\n+          {   // We're at the start of this read so just skip it\n+            seekStartPos++;\n+            lineStartPos++;\n+            continue;\n+          }\n+          break;\n+        } else if (isQuoted)\n+        {   // This value is quoted, i.e. started with a quote and has also seen a quote\n+          throw new DataAfterQuoteException(this,\n+              new String(buffer, seekStartPos, bufferPos - seekStartPos));\n         }\n-\n-        // Keep a start position in case we need to further fill the buffer in nextChar, a value can at maximum be the\n-        // whole buffer, so max one fill per value is supported.\n-        seekStartPos = bufferPos; // seekStartPos updated in nextChar if buffer flips over, that's why it's a member\n-        int ch;\n-        int endOffset = 1;\n-        int skippedChars = 0;\n-        int quoteDepth = 0;\n-        int quoteStartLine = 0;\n-        boolean isQuoted = false;\n-\n-        while ( !eof )\n+        // else this is a character to include as part of the current value\n+      } else\n+      {   // In quoted mode, i.e. within quotes\n+        if (ch == quoteChar)\n+        {   // Found a quote within a quote, peek at next char\n+          int nextCh = peekChar(skippedChars);\n+          if (nextCh == quoteChar)\n+          {   // Found a double quote, skip it and we're going down one more quote depth (quote-in-quote)\n+            repositionChar(bufferPos++, ++skippedChars);\n+          } else\n+          {   // Found an ending quote, skip it and switch mode\n+            endOffset++;\n+            quoteDepth--;\n+          }\n+        } else if (isNewLine(ch))\n+        {   // Found a new line inside a quotation...\n+          if (!multilineFields)\n+          {   // ...but we are configured to disallow it\n+            throw new IllegalMultilineFieldException(this);\n+          }\n+          // ... it's OK, just keep going\n+          if (ch == EOL_CHAR)\n+          {\n+            lineNumber++;\n+          }\n+        } else if (ch == BACK_SLASH && legacyStyleQuoting)\n+        {   // Legacy concern, support java style quote encoding\n+          int nextCh = peekChar(skippedChars);\n+          if (nextCh == quoteChar || nextCh == BACK_SLASH)\n+          {   // Found a slash encoded quote\n+            repositionChar(bufferPos++, ++skippedChars);\n+          }\n+        } else if (eof)\n         {\n-            ch = nextChar( skippedChars );\n-            if ( quoteDepth == 0 )\n-            {   // In normal mode, i.e. not within quotes\n-                if ( ch == untilChar )\n-                {   // We found a delimiter, set marker and return true\n-                    return setMark( mark, endOffset, skippedChars, ch, isQuoted );\n-                }\n-                else if ( trim && isWhitespace( ch ) )\n-                {   // Only check for left+trim whitespace as long as we haven't found a non-whitespace character\n-                    if ( seekStartPos == bufferPos - 1/* -1 since we just advanced one */ )\n-                    {   // We found a whitespace, which is before the first non-whitespace of the value and we've been told to trim that off\n-                        seekStartPos++;\n-                    }\n-                }\n-                else if ( ch == quoteChar && seekStartPos == bufferPos - 1/* -1 since we just advanced one */ )\n-                {   // We found a quote, which was the first of the value, skip it and switch mode\n-                    quoteDepth++;\n-                    isQuoted = true;\n-                    seekStartPos++;\n-                    quoteStartLine = lineNumber;\n-                }\n-                else if ( isNewLine( ch ) )\n-                {   // Encountered newline, done for now\n-                    if ( bufferPos - 1 == lineStartPos )\n-                    {   // We're at the start of this read so just skip it\n-                        seekStartPos++;\n-                        lineStartPos++;\n-                        continue;\n-                    }\n-                    break;\n-                }\n-                else if ( isQuoted )\n-                {   // This value is quoted, i.e. started with a quote and has also seen a quote\n-                    throw new DataAfterQuoteException( this,\n-                            new String( buffer, seekStartPos, bufferPos - seekStartPos ) );\n-                }\n-                // else this is a character to include as part of the current value\n-            }\n-            else\n-            {   // In quoted mode, i.e. within quotes\n-                if ( ch == quoteChar )\n-                {   // Found a quote within a quote, peek at next char\n-                    int nextCh = peekChar( skippedChars );\n-                    if ( nextCh == quoteChar )\n-                    {   // Found a double quote, skip it and we're going down one more quote depth (quote-in-quote)\n-                        repositionChar( bufferPos++, ++skippedChars );\n-                    }\n-                    else\n-                    {   // Found an ending quote, skip it and switch mode\n-                        endOffset++;\n-                        quoteDepth--;\n-                    }\n-                }\n-                else if ( isNewLine( ch ) )\n-                {   // Found a new line inside a quotation...\n-                    if ( !multilineFields )\n-                    {   // ...but we are configured to disallow it\n-                        throw new IllegalMultilineFieldException( this );\n-                    }\n-                    // ... it's OK, just keep going\n-                    if ( ch == EOL_CHAR )\n-                    {\n-                        lineNumber++;\n-                    }\n-                }\n-                else if ( ch == BACK_SLASH && legacyStyleQuoting )\n-                {   // Legacy concern, support java style quote encoding\n-                    int nextCh = peekChar( skippedChars );\n-                    if ( nextCh == quoteChar || nextCh == BACK_SLASH )\n-                    {   // Found a slash encoded quote\n-                        repositionChar( bufferPos++, ++skippedChars );\n-                    }\n-                }\n-                else if ( eof )\n-                {\n-                    // We have an open quote but have reached the end of the file, this is a formatting error\n-                    throw new MissingEndQuoteException( this, quoteStartLine, quoteChar );\n-                }\n-            }\n-        }\n-\n-        int valueLength = bufferPos - seekStartPos - 1;\n-        if ( eof && valueLength == 0 && seekStartPos == lineStartPos )\n-        {   // We didn't find any of the characters sought for\n-            return eof( mark );\n+          // We have an open quote but have reached the end of the file, this is a formatting error\n+          throw new MissingEndQuoteException(this, quoteStartLine, quoteChar);\n         }\n-\n-        // We found the last value of the line or stream\n-        lineNumber++;\n-        lineStartPos = bufferPos;\n-        return setMark( mark, endOffset, skippedChars, END_OF_LINE_CHARACTER, isQuoted );\n+      }\n     }\n \n-    @Override\n-    public <EXTRACTOR extends Extractor<?>> EXTRACTOR extract( Mark mark, EXTRACTOR extractor )\n-    {\n-        return extract( mark, extractor, null );\n+    int valueLength = bufferPos - seekStartPos - 1;\n+    if (eof && valueLength == 0 && seekStartPos == lineStartPos)\n+    {   // We didn't find any of the characters sought for\n+      return eof(mark);\n     }\n \n-    private boolean setMark( Mark mark, int endOffset, int skippedChars, int ch, boolean isQuoted )\n+    // We found the last value of the line or stream\n+    lineNumber++;\n+    lineStartPos = bufferPos;\n+    return setMark(mark, endOffset, skippedChars, END_OF_LINE_CHARACTER, isQuoted);\n+  }\n+\n+  @Override\n+  public <EXTRACTOR extends Extractor<?>> EXTRACTOR extract(Mark mark, EXTRACTOR extractor)\n+  {\n+    return extract(mark, extractor, null);\n+  }\n+\n+  private boolean setMark(Mark mark, int endOffset, int skippedChars, int ch, boolean isQuoted)\n+  {\n+    int pos = (trim ? rtrim() : bufferPos) - endOffset - skippedChars;\n+    mark.set(seekStartPos, pos, ch, isQuoted);\n+    return true;\n+  }\n+\n+  /**\n+   * Starting from the current position, {@link #bufferPos}, scan backwards as long as whitespace is found.\n+   * Although it cannot scan further back than the start of this field is, i.e. {@link #seekStartPos}.\n+   *\n+   * @return the right index of the value to pass into {@link Mark}. This is only called if {@link Configuration#trimStrings()} is {@code true}.\n+   */\n+  private int rtrim()\n+  {\n+    int index = bufferPos;\n+    while (index - 1 > seekStartPos && isWhitespace(buffer[index - 1 /*bufferPos has advanced*/ - 1 /*don't check the last read char (delim or EOF)*/]))\n     {\n-        int pos = (trim ? rtrim() : bufferPos) - endOffset - skippedChars;\n-        mark.set( seekStartPos, pos, ch, isQuoted );\n-        return true;\n+      index--;\n     }\n-\n-    /**\n-     * Starting from the current position, {@link #bufferPos}, scan backwards as long as whitespace is found.\n-     * Although it cannot scan further back than the start of this field is, i.e. {@link #seekStartPos}.\n-     *\n-     * @return the right index of the value to pass into {@link Mark}. This is only called if {@link Configuration#trimStrings()} is {@code true}.\n-     */\n-    private int rtrim()\n+    return index;\n+  }\n+\n+  private boolean isWhitespace(int ch)\n+  {\n+    return ch == ' ' ||\n+        ch == Character.SPACE_SEPARATOR ||\n+        ch == Character.PARAGRAPH_SEPARATOR ||\n+        ch == '\\u00A0' ||\n+        ch == '\\u001C' ||\n+        ch == '\\u001D' ||\n+        ch == '\\u001E' ||\n+        ch == '\\u001F' ||\n+        ch == '\\u2007' ||\n+        ch == '\\u202F' ||\n+        ch == '\\t';\n+\n+  }\n+\n+  private void repositionChar(int offset, int stepsBack)\n+  {\n+    // We reposition characters because we might have skipped some along the way, double-quotes and what not.\n+    // We want to take an as little hit as possible for that, so we reposition each character as long as\n+    // we're still reading the same value. All other values will not have to take any hit of skipped chars\n+    // for this particular value.\n+    buffer[offset - stepsBack] = buffer[offset];\n+  }\n+\n+  private boolean isNewLine(int ch)\n+  {\n+    return ch == EOL_CHAR || ch == EOL_CHAR_2;\n+  }\n+\n+  private int peekChar(int skippedChars) throws IOException\n+  {\n+    int ch = nextChar(skippedChars);\n+    try\n     {\n-        int index = bufferPos;\n-        while ( index - 1 > seekStartPos && isWhitespace( buffer[index - 1 /*bufferPos has advanced*/ - 1 /*don't check the last read char (delim or EOF)*/] ) )\n-        {\n-            index--;\n-        }\n-        return index;\n-    }\n-\n-    private boolean isWhitespace( int ch )\n+      return ch;\n+    } finally\n     {\n-        return ch == ' ' ||\n-                ch == Character.SPACE_SEPARATOR ||\n-                ch == Character.PARAGRAPH_SEPARATOR ||\n-                ch == '\\u00A0' ||\n-                ch == '\\u001C' ||\n-                ch == '\\u001D' ||\n-                ch == '\\u001E' ||\n-                ch == '\\u001F' ||\n-                ch == '\\u2007' ||\n-                ch == '\\u202F' ||\n-                ch == '\\t';\n-\n+      if (ch != EOF_CHAR)\n+      {\n+        bufferPos--;\n+      }\n     }\n+  }\n \n-    private void repositionChar( int offset, int stepsBack )\n-    {\n-        // We reposition characters because we might have skipped some along the way, double-quotes and what not.\n-        // We want to take an as little hit as possible for that, so we reposition each character as long as\n-        // we're still reading the same value. All other values will not have to take any hit of skipped chars\n-        // for this particular value.\n-        buffer[offset - stepsBack] = buffer[offset];\n-    }\n+  private boolean eof(Mark mark)\n+  {\n+    mark.set(-1, -1, Mark.END_OF_LINE_CHARACTER, false);\n+    return false;\n+  }\n \n-    private boolean isNewLine( int ch )\n+  private static boolean getTrimStringIgnoreErrors(Configuration config)\n+  {\n+    try\n     {\n-        return ch == EOL_CHAR || ch == EOL_CHAR_2;\n-    }\n-\n-    private int peekChar( int skippedChars ) throws IOException\n-    {\n-        int ch = nextChar( skippedChars );\n-        try\n-        {\n-            return ch;\n-        }\n-        finally\n-        {\n-            if ( ch != EOF_CHAR )\n-            {\n-                bufferPos--;\n-            }\n-        }\n-    }\n-\n-    private boolean eof( Mark mark )\n-    {\n-        mark.set( -1, -1, Mark.END_OF_LINE_CHARACTER, false );\n-        return false;\n-    }\n-\n-    private static boolean getTrimStringIgnoreErrors( Configuration config )\n-    {\n-        try\n-        {\n-            return config.trimStrings();\n-        }\n-        catch ( Throwable t )\n-        {\n-            // Cypher compatibility can result in older Cypher 2.3 code being passed here with older implementations of\n-            // Configuration. So we need to ignore the fact that those implementations do not include trimStrings().\n-            return Configuration.DEFAULT.trimStrings();\n-        }\n-    }\n-\n-    @Override\n-    public <EXTRACTOR extends Extractor<?>> EXTRACTOR extract( Mark mark, EXTRACTOR extractor, CSVHeaderInformation optionalData )\n+      return config.trimStrings();\n+    } catch (Throwable t)\n     {\n-        if ( !tryExtract( mark, extractor, optionalData ) )\n-        {\n-            throw new IllegalStateException( extractor + \" didn't extract value for \" + mark +\n-                    \". For values which are optional please use tryExtract method instead\" );\n-        }\n-        return extractor;\n+      // Cypher compatibility can result in older Cypher 2.3 code being passed here with older implementations of\n+      // Configuration. So we need to ignore the fact that those implementations do not include trimStrings().\n+      return Configuration.DEFAULT.trimStrings();\n     }\n+  }\n \n-    @Override\n-    public boolean tryExtract( Mark mark, Extractor<?> extractor, CSVHeaderInformation optionalData )\n+  @Override\n+  public <EXTRACTOR extends Extractor<?>> EXTRACTOR extract(Mark mark, EXTRACTOR extractor, CSVHeaderInformation optionalData)\n+  {\n+    if (!tryExtract(mark, extractor, optionalData))\n     {\n-        int from = mark.startPosition();\n-        int to = mark.position();\n-        return extractor.extract( buffer, from, to - from, mark.isQuoted(), optionalData );\n+      throw new IllegalStateException(extractor + \" didn't extract value for \" + mark +\n+          \". For values which are optional please use tryExtract method instead\");\n     }\n-\n-    @Override\n-    public boolean tryExtract( Mark mark, Extractor<?> extractor )\n+    return extractor;\n+  }\n+\n+  @Override\n+  public boolean tryExtract(Mark mark, Extractor<?> extractor, CSVHeaderInformation optionalData)\n+  {\n+    int from = mark.startPosition();\n+    int to = mark.position();\n+    return extractor.extract(buffer, from, to - from, mark.isQuoted(), optionalData);\n+  }\n+\n+  @Override\n+  public boolean tryExtract(Mark mark, Extractor<?> extractor)\n+  {\n+    return tryExtract(mark, extractor, null);\n+  }\n+\n+  private int nextChar(int skippedChars) throws IOException\n+  {\n+    int ch;\n+    if (bufferPos < bufferEnd || fillBuffer())\n     {\n-        return tryExtract( mark, extractor, null );\n-    }\n-\n-    private int nextChar( int skippedChars ) throws IOException\n+      ch = buffer[bufferPos];\n+    } else\n     {\n-        int ch;\n-        if ( bufferPos < bufferEnd || fillBuffer() )\n-        {\n-            ch = buffer[bufferPos];\n-        }\n-        else\n-        {\n-            ch = EOF_CHAR;\n-            eof = true;\n-        }\n-\n-        if ( skippedChars > 0 )\n-        {\n-            repositionChar( bufferPos, skippedChars );\n-        }\n-        bufferPos++;\n-        return ch;\n+      ch = EOF_CHAR;\n+      eof = true;\n     }\n \n-    /**\n-     * @return {@code true} if something was read, otherwise {@code false} which means that we reached EOF.\n-     */\n-    private boolean fillBuffer() throws IOException\n+    if (skippedChars > 0)\n     {\n-        boolean first = currentChunk == null;\n-\n-        if ( !first )\n-        {\n-            if ( bufferPos - seekStartPos >= dataCapacity )\n-            {\n-                throw new BufferOverflowException(  \"Tried to read a field larger than buffer size \" +\n-                        dataLength + \". A common cause of this is that a field has an unterminated \" +\n-                        \"quote and so will try to seek until the next quote, which ever line it may be on.\" +\n-                        \" This should not happen if multi-line fields are disabled, given that the fields contains \" +\n-                        \"no new-line characters. This field started at \" + sourceDescription() + \":\" + lineNumber() );\n-            }\n-        }\n-\n-        absoluteBufferStartPosition += dataLength;\n-\n-        // Fill the buffer with new characters\n-        Chunk nextChunk = source.nextChunk( first ? -1 : seekStartPos );\n-        if ( nextChunk == Source.EMPTY_CHUNK )\n-        {\n-            return false;\n-        }\n-\n-        buffer = nextChunk.data();\n-        dataLength = nextChunk.length();\n-        dataCapacity = nextChunk.maxFieldSize();\n-        bufferPos = nextChunk.startPosition();\n-        bufferStartPos = bufferPos;\n-        bufferEnd = bufferPos + dataLength;\n-        int shift = seekStartPos - nextChunk.backPosition();\n-        seekStartPos = nextChunk.backPosition();\n-        if ( first )\n-        {\n-            lineStartPos = seekStartPos;\n-        }\n-        else\n-        {\n-            lineStartPos -= shift;\n-        }\n-        String sourceDescriptionAfterRead = nextChunk.sourceDescription();\n-        if ( !sourceDescriptionAfterRead.equals( sourceDescription ) )\n-        {   // We moved over to a new source, reset line number\n-            lineNumber = 0;\n-            sourceDescription = sourceDescriptionAfterRead;\n-        }\n-        currentChunk = nextChunk;\n-        return dataLength > 0;\n+      repositionChar(bufferPos, skippedChars);\n     }\n-\n-    @Override\n-    public void close() throws IOException\n+    bufferPos++;\n+    return ch;\n+  }\n+\n+  /**\n+   * @return {@code true} if something was read, otherwise {@code false} which means that we reached EOF.\n+   */\n+  private boolean fillBuffer() throws IOException\n+  {\n+    boolean first = currentChunk == null;\n+\n+    if (!first)\n     {\n-        source.close();\n+      if (bufferPos - seekStartPos >= dataCapacity)\n+      {\n+        throw new BufferOverflowException(\"Tried to read a field larger than buffer size \" +\n+            dataLength + \". A common cause of this is that a field has an unterminated \" +\n+            \"quote and so will try to seek until the next quote, which ever line it may be on.\" +\n+            \" This should not happen if multi-line fields are disabled, given that the fields contains \" +\n+            \"no new-line characters. This field started at \" + sourceDescription() + \":\" + lineNumber());\n+      }\n     }\n \n-    @Override\n-    public long position()\n-    {\n-        return absoluteBufferStartPosition + (bufferPos - bufferStartPos);\n-    }\n+    absoluteBufferStartPosition += dataLength;\n \n-    @Override\n-    public String sourceDescription()\n+    // Fill the buffer with new characters\n+    Chunk nextChunk = source.nextChunk(first ? -1 : seekStartPos);\n+    if (nextChunk == Source.EMPTY_CHUNK)\n     {\n-        return sourceDescription;\n+      return false;\n     }\n \n-    public long lineNumber()\n+    buffer = nextChunk.data();\n+    dataLength = nextChunk.length();\n+    dataCapacity = nextChunk.maxFieldSize();\n+    bufferPos = nextChunk.startPosition();\n+    bufferStartPos = bufferPos;\n+    bufferEnd = bufferPos + dataLength;\n+    int shift = seekStartPos - nextChunk.backPosition();\n+    seekStartPos = nextChunk.backPosition();\n+    if (first)\n     {\n-        return lineNumber;\n-    }\n-\n-    @Override\n-    public String toString()\n+      lineStartPos = seekStartPos;\n+    } else\n     {\n-        return format( \"%s[source:%s, position:%d, line:%d]\", getClass().getSimpleName(),\n-                sourceDescription(), position(), lineNumber() );\n+      lineStartPos -= shift;\n     }\n-\n-    public static boolean isEolChar( char c )\n-    {\n-        return c == EOL_CHAR || c == EOL_CHAR_2;\n+    String sourceDescriptionAfterRead = nextChunk.sourceDescription();\n+    if (!sourceDescriptionAfterRead.equals(sourceDescription))\n+    {   // We moved over to a new source, reset line number\n+      lineNumber = 0;\n+      sourceDescription = sourceDescriptionAfterRead;\n     }\n+    currentChunk = nextChunk;\n+    return dataLength > 0;\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    source.close();\n+  }\n+\n+  @Override\n+  public long position()\n+  {\n+    return absoluteBufferStartPosition + (bufferPos - bufferStartPos);\n+  }\n+\n+  @Override\n+  public String sourceDescription()\n+  {\n+    return sourceDescription;\n+  }\n+\n+  public long lineNumber()\n+  {\n+    return lineNumber;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"%s[source:%s, position:%d, line:%d]\", getClass().getSimpleName(),\n+        sourceDescription(), position(), lineNumber());\n+  }\n+\n+  public static boolean isEolChar(char c)\n+  {\n+    return c == EOL_CHAR || c == EOL_CHAR_2;\n+  }\n }\n",
            "diff_size": 557
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}