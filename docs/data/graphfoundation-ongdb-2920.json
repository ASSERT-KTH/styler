{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2920",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2920/FailureHeaderWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2920/FailureHeaderWriter.java\nindex 6bbe87b9359..b51aea13b4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2920/FailureHeaderWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2920/FailureHeaderWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -30,29 +31,29 @@ import org.neo4j.io.pagecache.PageCursor;\n  */\n class FailureHeaderWriter implements Consumer<PageCursor>\n {\n-    /**\n-     * The {@code short} length field containing the length (number of bytes) of the failure message.\n-     */\n-    private static final int HEADER_LENGTH_FIELD_LENGTH = 2;\n+  /**\n+   * The {@code short} length field containing the length (number of bytes) of the failure message.\n+   */\n+  private static final int HEADER_LENGTH_FIELD_LENGTH = 2;\n \n-    private final byte[] failureBytes;\n+  private final byte[] failureBytes;\n \n-    FailureHeaderWriter( byte[] failureBytes )\n-    {\n-        this.failureBytes = failureBytes;\n-    }\n+  FailureHeaderWriter(byte[] failureBytes)\n+  {\n+    this.failureBytes = failureBytes;\n+  }\n \n-    @Override\n-    public void accept( PageCursor cursor )\n+  @Override\n+  public void accept(PageCursor cursor)\n+  {\n+    byte[] bytesToWrite = failureBytes;\n+    cursor.putByte(NativeSchemaIndexPopulator.BYTE_FAILED);\n+    int availableSpace = cursor.getCurrentPageSize() - cursor.getOffset();\n+    if (bytesToWrite.length + HEADER_LENGTH_FIELD_LENGTH > availableSpace)\n     {\n-        byte[] bytesToWrite = failureBytes;\n-        cursor.putByte( NativeSchemaIndexPopulator.BYTE_FAILED );\n-        int availableSpace = cursor.getCurrentPageSize() - cursor.getOffset();\n-        if ( bytesToWrite.length + HEADER_LENGTH_FIELD_LENGTH > availableSpace )\n-        {\n-            bytesToWrite = Arrays.copyOf( bytesToWrite, availableSpace - HEADER_LENGTH_FIELD_LENGTH );\n-        }\n-        cursor.putShort( (short) bytesToWrite.length );\n-        cursor.putBytes( bytesToWrite );\n+      bytesToWrite = Arrays.copyOf(bytesToWrite, availableSpace - HEADER_LENGTH_FIELD_LENGTH);\n     }\n+    cursor.putShort((short) bytesToWrite.length);\n+    cursor.putBytes(bytesToWrite);\n+  }\n }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "62",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2920/FailureHeaderWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2920/FailureHeaderWriter.java\nindex 6bbe87b9359..310db54dc81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2920/FailureHeaderWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2920/FailureHeaderWriter.java\n@@ -34,8 +34,7 @@ class FailureHeaderWriter implements Consumer<PageCursor>\n      * The {@code short} length field containing the length (number of bytes) of the failure message.\n      */\n     private static final int HEADER_LENGTH_FIELD_LENGTH = 2;\n-\n-    private final byte[] failureBytes;\n+private final byte[] failureBytes;\n \n     FailureHeaderWriter( byte[] failureBytes )\n     {\n@@ -48,11 +47,11 @@ class FailureHeaderWriter implements Consumer<PageCursor>\n         byte[] bytesToWrite = failureBytes;\n         cursor.putByte( NativeSchemaIndexPopulator.BYTE_FAILED );\n         int availableSpace = cursor.getCurrentPageSize() - cursor.getOffset();\n-        if ( bytesToWrite.length + HEADER_LENGTH_FIELD_LENGTH > availableSpace )\n+        if ( bytesToWrite.length + HEADER_LENGTH_FIELD_LENGTH> availableSpace )\n         {\n             bytesToWrite = Arrays.copyOf( bytesToWrite, availableSpace - HEADER_LENGTH_FIELD_LENGTH );\n         }\n         cursor.putShort( (short) bytesToWrite.length );\n         cursor.putBytes( bytesToWrite );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}