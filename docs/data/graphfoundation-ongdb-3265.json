{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3265",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "113",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "113",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "148",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "181",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "200",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "225",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "359",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "365",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "386",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "714",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "720",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "748",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "787",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "831",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "831",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "870",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "870",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "875",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "875",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "880",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "880",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "885",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "885",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "905",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "910",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "910",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "915",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "915",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "918",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "918",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "933",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "933",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "951",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "951",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "953",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "967",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "967",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1020",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1020",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1036",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1036",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1054",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1054",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1076",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1076",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1091",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1091",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1108",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1108",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3265/UnsafeUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3265/UnsafeUtil.java\nindex f27a479a912..238f495c998 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3265/UnsafeUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3265/UnsafeUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.internal.dragons;\n \n import sun.misc.Unsafe;\n@@ -53,1076 +54,1066 @@ import static org.neo4j.util.FeatureToggles.flag;\n  */\n public final class UnsafeUtil\n {\n-    /**\n-     * Whether or not to explicitly dirty the allocated memory. This is off by default.\n-     * The {@link UnsafeUtil#allocateMemory(long, MemoryAllocationTracker)} method is not guaranteed to allocate\n-     * zeroed out memory, but might often do so by pure chance.\n-     * <p>\n-     * Enabling this feature will make sure that the allocated memory is full of random data, such that we can test\n-     * and verify that our code does not assume that memory is clean when allocated.\n-     */\n-    private static final boolean DIRTY_MEMORY = flag( UnsafeUtil.class, \"DIRTY_MEMORY\", false );\n-    private static final boolean CHECK_NATIVE_ACCESS = flag( UnsafeUtil.class, \"CHECK_NATIVE_ACCESS\", false );\n-    // this allows us to temporarily disable the checking, for performance:\n-    private static boolean nativeAccessCheckEnabled = true;\n-\n-    private static final Unsafe unsafe;\n-    private static final MethodHandle sharedStringConstructor;\n-    private static final String allowUnalignedMemoryAccessProperty =\n-            \"org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil.allowUnalignedMemoryAccess\";\n-\n-    public static final Class<?> directByteBufferClass;\n-    private static final Constructor<?> directByteBufferCtor;\n-    private static final long directByteBufferMarkOffset;\n-    private static final long directByteBufferPositionOffset;\n-    private static final long directByteBufferLimitOffset;\n-    private static final long directByteBufferCapacityOffset;\n-    private static final long directByteBufferAddressOffset;\n-\n-    private static final int pageSize;\n-\n-    public static final boolean allowUnalignedMemoryAccess;\n-    public static final boolean storeByteOrderIsNative;\n-\n-    static\n-    {\n-        unsafe = getUnsafe();\n-\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n-        sharedStringConstructor = getSharedStringConstructorMethodHandle( lookup );\n-\n-        Class<?> dbbClass = null;\n-        Constructor<?> ctor = null;\n-        long dbbMarkOffset = 0;\n-        long dbbPositionOffset = 0;\n-        long dbbLimitOffset = 0;\n-        long dbbCapacityOffset = 0;\n-        long dbbAddressOffset = 0;\n-        int ps = 4096;\n+  /**\n+   * Whether or not to explicitly dirty the allocated memory. This is off by default.\n+   * The {@link UnsafeUtil#allocateMemory(long, MemoryAllocationTracker)} method is not guaranteed to allocate\n+   * zeroed out memory, but might often do so by pure chance.\n+   * <p>\n+   * Enabling this feature will make sure that the allocated memory is full of random data, such that we can test\n+   * and verify that our code does not assume that memory is clean when allocated.\n+   */\n+  private static final boolean DIRTY_MEMORY = flag(UnsafeUtil.class, \"DIRTY_MEMORY\", false);\n+  private static final boolean CHECK_NATIVE_ACCESS = flag(UnsafeUtil.class, \"CHECK_NATIVE_ACCESS\", false);\n+  // this allows us to temporarily disable the checking, for performance:\n+  private static boolean nativeAccessCheckEnabled = true;\n+\n+  private static final Unsafe unsafe;\n+  private static final MethodHandle sharedStringConstructor;\n+  private static final String allowUnalignedMemoryAccessProperty =\n+      \"org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil.allowUnalignedMemoryAccess\";\n+\n+  public static final Class<?> directByteBufferClass;\n+  private static final Constructor<?> directByteBufferCtor;\n+  private static final long directByteBufferMarkOffset;\n+  private static final long directByteBufferPositionOffset;\n+  private static final long directByteBufferLimitOffset;\n+  private static final long directByteBufferCapacityOffset;\n+  private static final long directByteBufferAddressOffset;\n+\n+  private static final int pageSize;\n+\n+  public static final boolean allowUnalignedMemoryAccess;\n+  public static final boolean storeByteOrderIsNative;\n+\n+  static\n+  {\n+    unsafe = getUnsafe();\n+\n+    MethodHandles.Lookup lookup = MethodHandles.lookup();\n+    sharedStringConstructor = getSharedStringConstructorMethodHandle(lookup);\n+\n+    Class<?> dbbClass = null;\n+    Constructor<?> ctor = null;\n+    long dbbMarkOffset = 0;\n+    long dbbPositionOffset = 0;\n+    long dbbLimitOffset = 0;\n+    long dbbCapacityOffset = 0;\n+    long dbbAddressOffset = 0;\n+    int ps = 4096;\n+    try\n+    {\n+      dbbClass = Class.forName(\"java.nio.DirectByteBuffer\");\n+      Class<?> bufferClass = Class.forName(\"java.nio.Buffer\");\n+      dbbMarkOffset = unsafe.objectFieldOffset(bufferClass.getDeclaredField(\"mark\"));\n+      dbbPositionOffset = unsafe.objectFieldOffset(bufferClass.getDeclaredField(\"position\"));\n+      dbbLimitOffset = unsafe.objectFieldOffset(bufferClass.getDeclaredField(\"limit\"));\n+      dbbCapacityOffset = unsafe.objectFieldOffset(bufferClass.getDeclaredField(\"capacity\"));\n+      dbbAddressOffset = unsafe.objectFieldOffset(bufferClass.getDeclaredField(\"address\"));\n+      ps = unsafe.pageSize();\n+    } catch (Throwable e)\n+    {\n+      if (dbbClass == null)\n+      {\n+        throw new LinkageError(\"Cannot to link java.nio.DirectByteBuffer\", e);\n+      }\n+      try\n+      {\n+        ctor = dbbClass.getConstructor(Long.TYPE, Integer.TYPE);\n+        ctor.setAccessible(true);\n+      } catch (NoSuchMethodException e1)\n+      {\n+        throw new LinkageError(\"Cannot find JNI constructor for java.nio.DirectByteBuffer\", e1);\n+      }\n+    }\n+    directByteBufferClass = dbbClass;\n+    directByteBufferCtor = ctor;\n+    directByteBufferMarkOffset = dbbMarkOffset;\n+    directByteBufferPositionOffset = dbbPositionOffset;\n+    directByteBufferLimitOffset = dbbLimitOffset;\n+    directByteBufferCapacityOffset = dbbCapacityOffset;\n+    directByteBufferAddressOffset = dbbAddressOffset;\n+    pageSize = ps;\n+\n+    // See java.nio.Bits.unaligned() and its uses.\n+    String alignmentProperty = System.getProperty(allowUnalignedMemoryAccessProperty);\n+    if (alignmentProperty != null &&\n+        (alignmentProperty.equalsIgnoreCase(\"true\")\n+            || alignmentProperty.equalsIgnoreCase(\"false\")))\n+    {\n+      allowUnalignedMemoryAccess = Boolean.parseBoolean(alignmentProperty);\n+    } else\n+    {\n+      boolean unaligned;\n+      String arch = System.getProperty(\"os.arch\", \"?\");\n+      switch (arch) // list of architectures that support unaligned access to memory\n+      {\n+        case \"x86_64\":\n+        case \"i386\":\n+        case \"x86\":\n+        case \"amd64\":\n+        case \"ppc64\":\n+        case \"ppc64le\":\n+        case \"ppc64be\":\n+          unaligned = true;\n+          break;\n+        default:\n+          unaligned = false;\n+          break;\n+      }\n+      allowUnalignedMemoryAccess = unaligned;\n+    }\n+    storeByteOrderIsNative = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;\n+  }\n+\n+  private UnsafeUtil()\n+  {\n+  }\n+\n+  private static Unsafe getUnsafe()\n+  {\n+    try\n+    {\n+      PrivilegedExceptionAction<Unsafe> getUnsafe = () ->\n+      {\n         try\n         {\n-            dbbClass = Class.forName( \"java.nio.DirectByteBuffer\" );\n-            Class<?> bufferClass = Class.forName( \"java.nio.Buffer\" );\n-            dbbMarkOffset = unsafe.objectFieldOffset( bufferClass.getDeclaredField( \"mark\" ) );\n-            dbbPositionOffset = unsafe.objectFieldOffset( bufferClass.getDeclaredField( \"position\" ) );\n-            dbbLimitOffset = unsafe.objectFieldOffset( bufferClass.getDeclaredField( \"limit\" ) );\n-            dbbCapacityOffset = unsafe.objectFieldOffset( bufferClass.getDeclaredField( \"capacity\" ) );\n-            dbbAddressOffset = unsafe.objectFieldOffset( bufferClass.getDeclaredField( \"address\" ) );\n-            ps = unsafe.pageSize();\n-        }\n-        catch ( Throwable e )\n-        {\n-            if ( dbbClass == null )\n-            {\n-                throw new LinkageError( \"Cannot to link java.nio.DirectByteBuffer\", e );\n-            }\n-            try\n-            {\n-                ctor = dbbClass.getConstructor( Long.TYPE, Integer.TYPE );\n-                ctor.setAccessible( true );\n-            }\n-            catch ( NoSuchMethodException e1 )\n-            {\n-                throw new LinkageError( \"Cannot find JNI constructor for java.nio.DirectByteBuffer\", e1 );\n-            }\n-        }\n-        directByteBufferClass = dbbClass;\n-        directByteBufferCtor = ctor;\n-        directByteBufferMarkOffset = dbbMarkOffset;\n-        directByteBufferPositionOffset = dbbPositionOffset;\n-        directByteBufferLimitOffset = dbbLimitOffset;\n-        directByteBufferCapacityOffset = dbbCapacityOffset;\n-        directByteBufferAddressOffset = dbbAddressOffset;\n-        pageSize = ps;\n-\n-        // See java.nio.Bits.unaligned() and its uses.\n-        String alignmentProperty = System.getProperty( allowUnalignedMemoryAccessProperty );\n-        if ( alignmentProperty != null &&\n-             (alignmentProperty.equalsIgnoreCase( \"true\" )\n-              || alignmentProperty.equalsIgnoreCase( \"false\" )) )\n-        {\n-            allowUnalignedMemoryAccess = Boolean.parseBoolean( alignmentProperty );\n-        }\n-        else\n+          return Unsafe.getUnsafe();\n+        } catch (Exception e)\n         {\n-            boolean unaligned;\n-            String arch = System.getProperty( \"os.arch\", \"?\" );\n-            switch ( arch ) // list of architectures that support unaligned access to memory\n+          Class<Unsafe> type = Unsafe.class;\n+          Field[] fields = type.getDeclaredFields();\n+          for (Field field : fields)\n+          {\n+            if (Modifier.isStatic(field.getModifiers())\n+                && type.isAssignableFrom(field.getType()))\n             {\n-            case \"x86_64\":\n-            case \"i386\":\n-            case \"x86\":\n-            case \"amd64\":\n-            case \"ppc64\":\n-            case \"ppc64le\":\n-            case \"ppc64be\":\n-                unaligned = true;\n-                break;\n-            default:\n-                unaligned = false;\n-                break;\n+              field.setAccessible(true);\n+              return type.cast(field.get(null));\n             }\n-            allowUnalignedMemoryAccess = unaligned;\n-        }\n-        storeByteOrderIsNative = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;\n-    }\n-\n-    private UnsafeUtil()\n-    {\n-    }\n-\n-    private static Unsafe getUnsafe()\n-    {\n-        try\n-        {\n-            PrivilegedExceptionAction<Unsafe> getUnsafe = () ->\n-            {\n-                try\n-                {\n-                    return Unsafe.getUnsafe();\n-                }\n-                catch ( Exception e )\n-                {\n-                    Class<Unsafe> type = Unsafe.class;\n-                    Field[] fields = type.getDeclaredFields();\n-                    for ( Field field : fields )\n-                    {\n-                        if ( Modifier.isStatic( field.getModifiers() )\n-                             && type.isAssignableFrom( field.getType() ) )\n-                        {\n-                            field.setAccessible( true );\n-                            return type.cast( field.get( null ) );\n-                        }\n-                    }\n-                    LinkageError error = new LinkageError( \"No static field of type sun.misc.Unsafe\" );\n-                    error.addSuppressed( e );\n-                    throw error;\n-                }\n-            };\n-            return AccessController.doPrivileged( getUnsafe );\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new LinkageError( \"Cannot access sun.misc.Unsafe\", e );\n-        }\n-    }\n-\n-    /**\n-     * @throws java.lang.LinkageError if the Unsafe tools are not available on in this JVM.\n-     */\n-    public static void assertHasUnsafe()\n-    {\n-        if ( unsafe == null )\n-        {\n-            throw new LinkageError( \"Unsafe not available\" );\n-        }\n-    }\n-\n-    private static MethodHandle getSharedStringConstructorMethodHandle(\n-            MethodHandles.Lookup lookup )\n-    {\n-        try\n-        {\n-            Constructor<String> constructor = String.class.getDeclaredConstructor( char[].class, Boolean.TYPE );\n-            constructor.setAccessible( true );\n-            return lookup.unreflectConstructor( constructor );\n-        }\n-        catch ( Exception e )\n-        {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Get the object-relative field offset.\n-     */\n-    public static long getFieldOffset( Class<?> type, String field )\n-    {\n-        try\n-        {\n-            return unsafe.objectFieldOffset( type.getDeclaredField( field ) );\n-        }\n-        catch ( NoSuchFieldException e )\n-        {\n-            String message = \"Could not get offset of '\" + field + \"' field on type \" + type;\n-            throw new LinkageError( message, e );\n-        }\n-    }\n-\n-    /**\n-     * Atomically add the given delta to the int field, and return its previous value.\n-     * <p>\n-     * This has the memory visibility semantics of a volatile read followed by a volatile write.\n-     */\n-    public static int getAndAddInt( Object obj, long offset, int delta )\n-    {\n-        return unsafe.getAndAddInt( obj, offset, delta );\n-    }\n-\n-    /**\n-     * Atomically add the given delta to the long field, and return its previous value.\n-     * <p>\n-     * This has the memory visibility semantics of a volatile read followed by a volatile write.\n-     */\n-    public static long getAndAddLong( Object obj, long offset, long delta )\n-    {\n-        return unsafe.getAndAddLong( obj, offset, delta );\n-    }\n-\n-    /**\n-     * Orders loads before the fence, with loads and stores after the fence.\n-     */\n-    public static void loadFence()\n-    {\n-        unsafe.loadFence();\n-    }\n-\n-    /**\n-     * Orders stores before the fence, with loads and stores after the fence.\n-     */\n-    public static void storeFence()\n-    {\n-        unsafe.storeFence();\n-    }\n-\n-    /**\n-     * Orders loads and stores before the fence, with loads and stores after the fence.\n-     */\n-    public static void fullFence()\n-    {\n-        unsafe.fullFence();\n-    }\n-\n-    /**\n-     * Atomically compare the current value of the given long field with the expected value, and if they are the\n-     * equal, set the field to the updated value and return true. Otherwise return false.\n-     * <p>\n-     * If this method returns true, then it has the memory visibility semantics of a volatile read followed by a\n-     * volatile write.\n-     */\n-    public static boolean compareAndSwapLong(\n-            Object obj, long offset, long expected, long update )\n-    {\n-        return unsafe.compareAndSwapLong( obj, offset, expected, update );\n-    }\n-\n-    /**\n-     * Same as compareAndSwapLong, but for object references.\n-     */\n-    public static boolean compareAndSwapObject(\n-            Object obj, long offset, Object expected, Object update )\n-    {\n-        return unsafe.compareAndSwapObject( obj, offset, expected, update );\n-    }\n-\n-    /**\n-     * Atomically return the current object reference value, and exchange it with the given new reference value.\n-     */\n-    public static Object getAndSetObject( Object obj, long offset, Object newValue )\n-    {\n-        return unsafe.getAndSetObject( obj, offset, newValue );\n-    }\n-\n-    /**\n-     * Atomically exchanges provided <code>newValue</code> with the current value of field or array element, with\n-     * provided <code>offset</code>.\n-     */\n-    public static long getAndSetLong( Object object, long offset, long newValue )\n-    {\n-        return unsafe.getAndSetLong( object, offset, newValue );\n-    }\n-\n-    /**\n-     * Atomically set field or array element to a maximum between current value and provided <code>newValue</code>\n-     */\n-    public static void compareAndSetMaxLong( Object object, long fieldOffset, long newValue )\n-    {\n-        long currentValue;\n-        do\n-        {\n-            currentValue = UnsafeUtil.getLongVolatile( object, fieldOffset );\n-            if ( currentValue >= newValue )\n-            {\n-                return;\n-            }\n-        }\n-        while ( !UnsafeUtil.compareAndSwapLong( object, fieldOffset, currentValue, newValue ) );\n-    }\n-\n-    /**\n-     * Create a string with a char[] that you know is not going to be modified, so avoid the copy constructor.\n-     *\n-     * @param chars array that will back the new string\n-     * @return the created string\n-     */\n-    public static String newSharedArrayString( char[] chars )\n-    {\n-        if ( sharedStringConstructor != null )\n-        {\n-            try\n-            {\n-                return (String) sharedStringConstructor.invokeExact( chars, true );\n-            }\n-            catch ( Throwable throwable )\n-            {\n-                throw new LinkageError( \"Unexpected 'String constructor' intrinsic failure\", throwable );\n-            }\n-        }\n-        else\n-        {\n-            return new String( chars );\n-        }\n-    }\n-\n-    public static long allocateMemory( long sizeInBytes ) throws NativeMemoryAllocationRefusedError\n-    {\n-        return allocateMemory( sizeInBytes, GlobalMemoryTracker.INSTANCE );\n-    }\n-\n-    /**\n-     * Allocate a block of memory of the given size in bytes, and return a pointer to that memory.\n-     * <p>\n-     * The memory is aligned such that it can be used for any data type.\n-     * The memory is uninitialised, so it may contain random garbage, or it may not.\n-     */\n-    public static long allocateMemory( long sizeInBytes, MemoryAllocationTracker allocationTracker ) throws NativeMemoryAllocationRefusedError\n-    {\n-        final long pointer;\n-        try\n-        {\n-            pointer = unsafe.allocateMemory( sizeInBytes );\n-        }\n-        catch ( Throwable e )\n-        {\n-            throw new NativeMemoryAllocationRefusedError( sizeInBytes, allocationTracker.usedDirectMemory(), e );\n-        }\n-        if ( DIRTY_MEMORY )\n-        {\n-            setMemory( pointer, sizeInBytes, (byte) 0xA5 );\n-        }\n-        addAllocatedPointer( pointer, sizeInBytes );\n-        allocationTracker.allocated( sizeInBytes );\n-        return pointer;\n-    }\n-\n-    /**\n-     * Returns address pointer equal to or slightly after the given {@code pointer}.\n-     * The returned pointer as aligned with {@code alignBy} such that {@code pointer % alignBy == 0}.\n-     * The given pointer should be allocated with at least the requested size + {@code alignBy - 1},\n-     * where the additional bytes will serve as padding for the worst case where the start of the usable\n-     * area of the allocated memory will need to be shifted at most {@code alignBy - 1} bytes to the right.\n-     * <p>\n-     * <pre><code>\n-     * 0   4   8   12  16  20        ; 4-byte alignments\n-     * |---|---|---|---|---|         ; memory\n-     *        --------===            ; allocated memory (-required, =padding)\n-     *         ^------^              ; used memory\n-     * </code></pre>\n-     *\n-     * @param pointer pointer to allocated memory from {@link #allocateMemory(long, MemoryAllocationTracker)} )}.\n-     * @param alignBy power-of-two size to align to, e.g. 4 or 8.\n-     * @return pointer to place inside the allocated memory to consider the effective start of the\n-     * memory, which from that point is aligned by {@code alignBy}.\n-     */\n-    public static long alignedMemory( long pointer, int alignBy )\n-    {\n-        assert Integer.bitCount( alignBy ) == 1 : \"Requires alignment to be power of 2, but was \" + alignBy;\n-\n-        long misalignment = pointer % alignBy;\n-        return misalignment == 0 ? pointer : pointer + (alignBy - misalignment);\n-    }\n-\n-    /**\n-     * Free the memory that was allocated with {@link #allocateMemory}.\n-     */\n-    public static void free( long pointer, long bytes, MemoryAllocationTracker allocationTracker )\n-    {\n-        checkFree( pointer );\n-        unsafe.freeMemory( pointer );\n-        allocationTracker.deallocated( bytes );\n-    }\n-\n-    private static final class FreeTrace extends Throwable implements Comparable<FreeTrace>\n-    {\n-        private final long pointer;\n-        private final long size;\n-        private final long id;\n-        private final long nanoTime;\n-        private long referenceTime;\n-\n-        private FreeTrace( long pointer, long size, long id )\n-        {\n-            this.pointer = pointer;\n-            this.size = size;\n-            this.id = id;\n-            this.nanoTime = System.nanoTime();\n-        }\n-\n-        private boolean contains( long pointer )\n-        {\n-            return this.pointer <= pointer && pointer <= this.pointer + size;\n-        }\n-\n-        @Override\n-        public int compareTo( FreeTrace that )\n-        {\n-            return Long.compare( this.id, that.id );\n-        }\n-\n-        @Override\n-        public String getMessage()\n-        {\n-            return format( \"0x%x of %6d bytes, freed %s \u00b5s ago at\", pointer, size, (referenceTime - nanoTime) / 1000 );\n-        }\n-    }\n-\n-    private static final ConcurrentSkipListMap<Long,Long> pointers = new ConcurrentSkipListMap<>();\n-    private static final FreeTrace[] freeTraces = CHECK_NATIVE_ACCESS ? new FreeTrace[4096] : null;\n-    private static final AtomicLong freeTraceCounter = new AtomicLong();\n-\n-    private static void addAllocatedPointer( long pointer, long sizeInBytes )\n-    {\n-        if ( CHECK_NATIVE_ACCESS )\n-        {\n-            pointers.put( pointer, sizeInBytes );\n-        }\n-    }\n-\n-    private static void checkFree( long pointer )\n-    {\n-        if ( CHECK_NATIVE_ACCESS )\n-        {\n-            doCheckFree( pointer );\n-        }\n-    }\n-\n-    private static void doCheckFree( long pointer )\n-    {\n-        Long size = pointers.remove( pointer );\n-        if ( size == null )\n-        {\n-            StringBuilder sb = new StringBuilder( format( \"Bad free: 0x%x, valid pointers are:\", pointer ) );\n-            pointers.forEach( ( k, v ) -> sb.append( '\\n' ).append( k ) );\n-            throw new AssertionError( sb.toString() );\n-        }\n-        long count = freeTraceCounter.getAndIncrement();\n-        int idx = (int) (count & 4095);\n-        freeTraces[idx] = new FreeTrace( pointer, size, count );\n-    }\n-\n-    private static void checkAccess( long pointer, int size )\n-    {\n-        if ( CHECK_NATIVE_ACCESS && nativeAccessCheckEnabled )\n-        {\n-            doCheckAccess( pointer, size );\n-        }\n-    }\n-\n-    private static void doCheckAccess( long pointer, int size )\n-    {\n-        Map.Entry<Long,Long> fentry = pointers.floorEntry( pointer + size );\n-        if ( fentry == null || fentry.getKey() + fentry.getValue() < pointer + size )\n-        {\n-            Map.Entry<Long,Long> centry = pointers.ceilingEntry( pointer );\n-            throwBadAccess( pointer, size, fentry, centry );\n-        }\n-    }\n-\n-    private static void throwBadAccess( long pointer, int size, Map.Entry<Long,Long> fentry,\n-                                        Map.Entry<Long,Long> centry )\n-    {\n-        long now = System.nanoTime();\n-        long faddr = fentry == null ? 0 : fentry.getKey();\n-        long fsize = fentry == null ? 0 : fentry.getValue();\n-        long foffset = pointer - (faddr + fsize);\n-        long caddr = centry == null ? 0 : centry.getKey();\n-        long csize = centry == null ? 0 : centry.getValue();\n-        long coffset = caddr - (pointer + size);\n-        boolean floorIsNearest = foffset < coffset;\n-        long naddr = floorIsNearest ? faddr : caddr;\n-        long nsize = floorIsNearest ? fsize : csize;\n-        long noffset = floorIsNearest ? foffset : coffset;\n-        List<FreeTrace> recentFrees = Arrays.stream( freeTraces )\n-                                            .filter( Objects::nonNull )\n-                                            .filter( trace -> trace.contains( pointer ) )\n-                                            .sorted()\n-                                            .collect( Collectors.toList() );\n-        AssertionError error = new AssertionError( format(\n-                \"Bad access to address 0x%x with size %s, nearest valid allocation is \" +\n-                \"0x%x (%s bytes, off by %s bytes). \" +\n-                \"Recent relevant frees (of %s) are attached as suppressed exceptions.\",\n-                pointer, size, naddr, nsize, noffset, freeTraceCounter.get() ) );\n-        for ( FreeTrace recentFree : recentFrees )\n-        {\n-            recentFree.referenceTime = now;\n-            error.addSuppressed( recentFree );\n-        }\n-        throw error;\n-    }\n-\n-    /**\n-     * Return the power-of-2 native memory page size.\n-     */\n-    public static int pageSize()\n-    {\n-        return pageSize;\n-    }\n-\n-    public static void putBoolean( Object obj, long offset, boolean value )\n-    {\n-        unsafe.putBoolean( obj, offset, value );\n-    }\n-\n-    public static boolean getBoolean( Object obj, long offset )\n-    {\n-        return unsafe.getBoolean( obj, offset );\n-    }\n-\n-    public static void putBooleanVolatile( Object obj, long offset, boolean value )\n-    {\n-        unsafe.putBooleanVolatile( obj, offset, value );\n-    }\n-\n-    public static boolean getBooleanVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getBooleanVolatile( obj, offset );\n-    }\n-\n-    public static void putByte( long address, byte value )\n-    {\n-        checkAccess( address, Byte.BYTES );\n-        unsafe.putByte( address, value );\n-    }\n-\n-    public static byte getByte( long address )\n-    {\n-        checkAccess( address, Byte.BYTES );\n-        return unsafe.getByte( address );\n-    }\n-\n-    public static void putByteVolatile( long address, byte value )\n-    {\n-        checkAccess( address, Byte.BYTES );\n-        unsafe.putByteVolatile( null, address, value );\n-    }\n-\n-    public static byte getByteVolatile( long address )\n-    {\n-        checkAccess( address, Byte.BYTES );\n-        return unsafe.getByteVolatile( null, address );\n-    }\n-\n-    public static void putByte( Object obj, long offset, byte value )\n-    {\n-        unsafe.putByte( obj, offset, value );\n-    }\n-\n-    public static byte getByte( Object obj, long offset )\n-    {\n-        return unsafe.getByte( obj, offset );\n-    }\n-\n-    public static byte getByteVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getByteVolatile( obj, offset );\n-    }\n-\n-    public static void putByteVolatile( Object obj, long offset, byte value )\n-    {\n-        unsafe.putByteVolatile( obj, offset, value );\n-    }\n-\n-    public static void putShort( long address, short value )\n-    {\n-        checkAccess( address, Short.BYTES );\n-        unsafe.putShort( address, value );\n-    }\n-\n-    public static short getShort( long address )\n-    {\n-        checkAccess( address, Short.BYTES );\n-        return unsafe.getShort( address );\n-    }\n-\n-    public static void putShortVolatile( long address, short value )\n-    {\n-        checkAccess( address, Short.BYTES );\n-        unsafe.putShortVolatile( null, address, value );\n-    }\n-\n-    public static short getShortVolatile( long address )\n-    {\n-        checkAccess( address, Short.BYTES );\n-        return unsafe.getShortVolatile( null, address );\n-    }\n-\n-    public static void putShort( Object obj, long offset, short value )\n-    {\n-        unsafe.putShort( obj, offset, value );\n-    }\n-\n-    public static short getShort( Object obj, long offset )\n-    {\n-        return unsafe.getShort( obj, offset );\n-    }\n-\n-    public static void putShortVolatile( Object obj, long offset, short value )\n-    {\n-        unsafe.putShortVolatile( obj, offset, value );\n-    }\n-\n-    public static short getShortVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getShortVolatile( obj, offset );\n-    }\n-\n-    public static void putFloat( long address, float value )\n-    {\n-        checkAccess( address, Float.BYTES );\n-        unsafe.putFloat( address, value );\n-    }\n-\n-    public static float getFloat( long address )\n-    {\n-        checkAccess( address, Float.BYTES );\n-        return unsafe.getFloat( address );\n-    }\n-\n-    public static void putFloatVolatile( long address, float value )\n-    {\n-        checkAccess( address, Float.BYTES );\n-        unsafe.putFloatVolatile( null, address, value );\n-    }\n-\n-    public static float getFloatVolatile( long address )\n-    {\n-        checkAccess( address, Float.BYTES );\n-        return unsafe.getFloatVolatile( null, address );\n-    }\n-\n-    public static void putFloat( Object obj, long offset, float value )\n-    {\n-        unsafe.putFloat( obj, offset, value );\n-    }\n-\n-    public static float getFloat( Object obj, long offset )\n-    {\n-        return unsafe.getFloat( obj, offset );\n-    }\n-\n-    public static void putFloatVolatile( Object obj, long offset, float value )\n-    {\n-        unsafe.putFloatVolatile( obj, offset, value );\n-    }\n-\n-    public static float getFloatVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getFloatVolatile( obj, offset );\n-    }\n-\n-    public static void putChar( long address, char value )\n-    {\n-        checkAccess( address, Character.BYTES );\n-        unsafe.putChar( address, value );\n-    }\n-\n-    public static char getChar( long address )\n-    {\n-        checkAccess( address, Character.BYTES );\n-        return unsafe.getChar( address );\n-    }\n-\n-    public static void putCharVolatile( long address, char value )\n-    {\n-        checkAccess( address, Character.BYTES );\n-        unsafe.putCharVolatile( null, address, value );\n-    }\n-\n-    public static char getCharVolatile( long address )\n-    {\n-        checkAccess( address, Character.BYTES );\n-        return unsafe.getCharVolatile( null, address );\n-    }\n-\n-    public static void putChar( Object obj, long offset, char value )\n-    {\n-        unsafe.putChar( obj, offset, value );\n-    }\n-\n-    public static char getChar( Object obj, long offset )\n-    {\n-        return unsafe.getChar( obj, offset );\n-    }\n-\n-    public static void putCharVolatile( Object obj, long offset, char value )\n-    {\n-        unsafe.putCharVolatile( obj, offset, value );\n-    }\n-\n-    public static char getCharVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getCharVolatile( obj, offset );\n-    }\n-\n-    public static void putInt( long address, int value )\n-    {\n-        checkAccess( address, Integer.BYTES );\n-        unsafe.putInt( address, value );\n-    }\n-\n-    public static int getInt( long address )\n-    {\n-        checkAccess( address, Integer.BYTES );\n-        return unsafe.getInt( address );\n-    }\n-\n-    public static void putIntVolatile( long address, int value )\n-    {\n-        checkAccess( address, Integer.BYTES );\n-        unsafe.putIntVolatile( null, address, value );\n-    }\n-\n-    public static int getIntVolatile( long address )\n-    {\n-        checkAccess( address, Integer.BYTES );\n-        return unsafe.getIntVolatile( null, address );\n-    }\n-\n-    public static void putInt( Object obj, long offset, int value )\n-    {\n-        unsafe.putInt( obj, offset, value );\n-    }\n-\n-    public static int getInt( Object obj, long offset )\n-    {\n-        return unsafe.getInt( obj, offset );\n-    }\n-\n-    public static void putIntVolatile( Object obj, long offset, int value )\n-    {\n-        unsafe.putIntVolatile( obj, offset, value );\n-    }\n-\n-    public static int getIntVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getIntVolatile( obj, offset );\n-    }\n-\n-    public static void putLongVolatile( long address, long value )\n-    {\n-        checkAccess( address, Long.BYTES );\n-        unsafe.putLongVolatile( null, address, value );\n-    }\n-\n-    public static long getLongVolatile( long address )\n-    {\n-        checkAccess( address, Long.BYTES );\n-        return unsafe.getLongVolatile( null, address );\n-    }\n-\n-    public static void putLong( long address, long value )\n-    {\n-        checkAccess( address, Long.BYTES );\n-        unsafe.putLong( address, value );\n-    }\n-\n-    public static long getLong( long address )\n-    {\n-        checkAccess( address, Long.BYTES );\n-        return unsafe.getLong( address );\n-    }\n-\n-    public static void putLong( Object obj, long offset, long value )\n-    {\n-        unsafe.putLong( obj, offset, value );\n-    }\n-\n-    public static long getLong( Object obj, long offset )\n-    {\n-        return unsafe.getLong( obj, offset );\n-    }\n-\n-    public static void putLongVolatile( Object obj, long offset, long value )\n-    {\n-        unsafe.putLongVolatile( obj, offset, value );\n-    }\n-\n-    public static long getLongVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getLongVolatile( obj, offset );\n-    }\n-\n-    public static void putDouble( long address, double value )\n-    {\n-        checkAccess( address, Double.BYTES );\n-        unsafe.putDouble( address, value );\n-    }\n-\n-    public static double getDouble( long address )\n-    {\n-        checkAccess( address, Double.BYTES );\n-        return unsafe.getDouble( address );\n-    }\n-\n-    public static void putDoubleVolatile( long address, double value )\n-    {\n-        checkAccess( address, Double.BYTES );\n-        unsafe.putDoubleVolatile( null, address, value );\n-    }\n-\n-    public static double getDoubleVolatile( long address )\n-    {\n-        checkAccess( address, Double.BYTES );\n-        return unsafe.getDoubleVolatile( null, address );\n-    }\n-\n-    public static void putDouble( Object obj, long offset, double value )\n-    {\n-        unsafe.putDouble( obj, offset, value );\n-    }\n-\n-    public static double getDouble( Object obj, long offset )\n-    {\n-        return unsafe.getDouble( obj, offset );\n-    }\n-\n-    public static void putDoubleVolatile( Object obj, long offset, double value )\n-    {\n-        unsafe.putDoubleVolatile( obj, offset, value );\n-    }\n-\n-    public static double getDoubleVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getDoubleVolatile( obj, offset );\n-    }\n-\n-    public static void putObject( Object obj, long offset, Object value )\n-    {\n-        unsafe.putObject( obj, offset, value );\n-    }\n-\n-    public static Object getObject( Object obj, long offset )\n-    {\n-        return unsafe.getObject( obj, offset );\n-    }\n-\n-    public static Object getObjectVolatile( Object obj, long offset )\n-    {\n-        return unsafe.getObjectVolatile( obj, offset );\n-    }\n-\n-    public static void putObjectVolatile( Object obj, long offset, Object value )\n-    {\n-        unsafe.putObjectVolatile( obj, offset, value );\n-    }\n-\n-    public static int arrayBaseOffset( Class klass )\n-    {\n-        return unsafe.arrayBaseOffset( klass );\n-    }\n-\n-    public static int arrayIndexScale( Class klass )\n-    {\n-        int scale = unsafe.arrayIndexScale( klass );\n-        if ( scale == 0 )\n-        {\n-            throw new AssertionError( \"Array type too narrow for unsafe access: \" + klass );\n+          }\n+          LinkageError error = new LinkageError(\"No static field of type sun.misc.Unsafe\");\n+          error.addSuppressed(e);\n+          throw error;\n         }\n-        return scale;\n-    }\n-\n-    public static int arrayOffset( int index, int base, int scale )\n-    {\n-        return base + index * scale;\n-    }\n-\n-    /**\n-     * Set the given number of bytes to the given value, starting from the given address.\n-     */\n-    public static void setMemory( long address, long bytes, byte value )\n-    {\n-        unsafe.setMemory( address, bytes, value );\n-    }\n-\n-    /**\n-     * Copy the given number of bytes from the source address to the destination address.\n-     */\n-    public static void copyMemory( long srcAddress, long destAddress, long bytes )\n-    {\n-        unsafe.copyMemory( srcAddress, destAddress, bytes );\n-    }\n-\n-    /**\n-     * Create a new DirectByteBuffer that wraps the given address and has the given capacity.\n-     * <p>\n-     * The ByteBuffer does NOT create a Cleaner, or otherwise register the pointer for freeing.\n-     */\n-    public static ByteBuffer newDirectByteBuffer( long addr, int cap ) throws Exception\n-    {\n-        if ( directByteBufferCtor == null )\n-        {\n-            // Simulate the JNI NewDirectByteBuffer(void*, long) invocation.\n-            Object dbb = unsafe.allocateInstance( directByteBufferClass );\n-            initDirectByteBuffer( dbb, addr, cap );\n-            return (ByteBuffer) dbb;\n-        }\n-        // Reflection based fallback code.\n-        return (ByteBuffer) directByteBufferCtor.newInstance( addr, cap );\n-    }\n-\n-    /**\n-     * Initialize (simulate calling the constructor of) the given DirectByteBuffer.\n-     */\n-    public static void initDirectByteBuffer( Object dbb, long addr, int cap )\n-    {\n-        unsafe.putInt( dbb, directByteBufferMarkOffset, -1 );\n-        unsafe.putInt( dbb, directByteBufferPositionOffset, 0 );\n-        unsafe.putInt( dbb, directByteBufferLimitOffset, cap );\n-        unsafe.putInt( dbb, directByteBufferCapacityOffset, cap );\n-        unsafe.putLong( dbb, directByteBufferAddressOffset, addr );\n-    }\n-\n-    /**\n-     * Read the value of the address field in the (assumed to be) DirectByteBuffer.\n-     * <p>\n-     * <strong>NOTE:</strong> calling this method on a non-direct ByteBuffer is undefined behaviour.\n-     *\n-     * @param dbb The direct byte buffer to read the address field from.\n-     * @return The native memory address in the given direct byte buffer.\n-     */\n-    public static long getDirectByteBufferAddress( ByteBuffer dbb )\n-    {\n-        return unsafe.getLong( dbb, directByteBufferAddressOffset );\n-    }\n-\n-    /**\n-     * Change if native access checking is enabled by setting it to the given new setting, and returning the old\n-     * setting.\n-     * <p>\n-     * This is only useful for speeding up tests when you have a lot of them, and they access native memory a lot.\n-     * This does not disable the recording of memory allocations or frees.\n-     * <p>\n-     * Remember to restore the old value so other tests in the same JVM get the benefit of native access checks.\n-     * <p>\n-     * The changing of this setting is completely unsynchronised, so you have to order this modification before and\n-     * after the tests that you want to run without native access checks.\n-     *\n-     * @param newSetting The new setting.\n-     * @return the previous value of this setting.\n-     */\n-    public static boolean exchangeNativeAccessCheckEnabled( boolean newSetting )\n-    {\n-        boolean previousSetting = nativeAccessCheckEnabled;\n-        nativeAccessCheckEnabled = newSetting;\n-        return previousSetting;\n-    }\n-\n-    /**\n-     * Gets a {@code short} at memory address {@code p} by reading byte for byte, instead of the whole value\n-     * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n-     * is {@code false} and {@code p} isn't aligned properly. Values read with this method should have been\n-     * previously put using {@link #putShortByteWiseLittleEndian(long, short)}.\n-     *\n-     * @param p address pointer to start reading at.\n-     * @return the read value, which was read byte for byte.\n-     */\n-    public static short getShortByteWiseLittleEndian( long p )\n-    {\n-        short a = (short) (UnsafeUtil.getByte( p ) & 0xFF);\n-        short b = (short) (UnsafeUtil.getByte( p + 1 ) & 0xFF);\n-        return (short) ((b << 8) | a);\n-    }\n-\n-    /**\n-     * Gets a {@code int} at memory address {@code p} by reading byte for byte, instead of the whole value\n-     * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n-     * is {@code false} and {@code p} isn't aligned properly. Values read with this method should have been\n-     * previously put using {@link #putIntByteWiseLittleEndian(long, int)}.\n-     *\n-     * @param p address pointer to start reading at.\n-     * @return the read value, which was read byte for byte.\n-     */\n-    public static int getIntByteWiseLittleEndian( long p )\n-    {\n-        int a = UnsafeUtil.getByte( p ) & 0xFF;\n-        int b = UnsafeUtil.getByte( p + 1 ) & 0xFF;\n-        int c = UnsafeUtil.getByte( p + 2 ) & 0xFF;\n-        int d = UnsafeUtil.getByte( p + 3 ) & 0xFF;\n-        return (d << 24) | (c << 16) | (b << 8) | a;\n-    }\n-\n-    /**\n-     * Gets a {@code long} at memory address {@code p} by reading byte for byte, instead of the whole value\n-     * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n-     * is {@code false} and {@code p} isn't aligned properly. Values read with this method should have been\n-     * previously put using {@link #putLongByteWiseLittleEndian(long, long)}.\n-     *\n-     * @param p address pointer to start reading at.\n-     * @return the read value, which was read byte for byte.\n-     */\n-    public static long getLongByteWiseLittleEndian( long p )\n-    {\n-        long a = UnsafeUtil.getByte( p ) & 0xFF;\n-        long b = UnsafeUtil.getByte( p + 1 ) & 0xFF;\n-        long c = UnsafeUtil.getByte( p + 2 ) & 0xFF;\n-        long d = UnsafeUtil.getByte( p + 3 ) & 0xFF;\n-        long e = UnsafeUtil.getByte( p + 4 ) & 0xFF;\n-        long f = UnsafeUtil.getByte( p + 5 ) & 0xFF;\n-        long g = UnsafeUtil.getByte( p + 6 ) & 0xFF;\n-        long h = UnsafeUtil.getByte( p + 7 ) & 0xFF;\n-        return (h << 56) | (g << 48) | (f << 40) | (e << 32) | (d << 24) | (c << 16) | (b << 8) | a;\n-    }\n-\n-    /**\n-     * Puts a {@code short} at memory address {@code p} by writing byte for byte, instead of the whole value\n-     * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n-     * is {@code false} and {@code p} isn't aligned properly. Values written with this method should be\n-     * read using {@link #getShortByteWiseLittleEndian(long)}.\n-     *\n-     * @param p address pointer to start writing at.\n-     * @param value value to write byte for byte.\n-     */\n-    public static void putShortByteWiseLittleEndian( long p, short value )\n-    {\n-        UnsafeUtil.putByte( p, (byte) value );\n-        UnsafeUtil.putByte( p + 1, (byte) (value >> 8) );\n-    }\n-\n-    /**\n-     * Puts a {@code int} at memory address {@code p} by writing byte for byte, instead of the whole value\n-     * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n-     * is {@code false} and {@code p} isn't aligned properly. Values written with this method should be\n-     * read using {@link #getIntByteWiseLittleEndian(long)}.\n-     *\n-     * @param p address pointer to start writing at.\n-     * @param value value to write byte for byte.\n-     */\n-    public static void putIntByteWiseLittleEndian( long p, int value )\n-    {\n-        UnsafeUtil.putByte( p, (byte) value );\n-        UnsafeUtil.putByte( p + 1, (byte) (value >> 8) );\n-        UnsafeUtil.putByte( p + 2, (byte) (value >> 16) );\n-        UnsafeUtil.putByte( p + 3, (byte) (value >> 24) );\n-    }\n-\n-    /**\n-     * Puts a {@code long} at memory address {@code p} by writing byte for byte, instead of the whole value\n-     * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n-     * is {@code false} and {@code p} isn't aligned properly. Values written with this method should be\n-     * read using {@link #getShortByteWiseLittleEndian(long)}.\n-     *\n-     * @param p address pointer to start writing at.\n-     * @param value value to write byte for byte.\n-     */\n-    public static void putLongByteWiseLittleEndian( long p, long value )\n-    {\n-        UnsafeUtil.putByte( p, (byte) value );\n-        UnsafeUtil.putByte( p + 1, (byte) (value >> 8) );\n-        UnsafeUtil.putByte( p + 2, (byte) (value >> 16) );\n-        UnsafeUtil.putByte( p + 3, (byte) (value >> 24) );\n-        UnsafeUtil.putByte( p + 4, (byte) (value >> 32) );\n-        UnsafeUtil.putByte( p + 5, (byte) (value >> 40) );\n-        UnsafeUtil.putByte( p + 6, (byte) (value >> 48) );\n-        UnsafeUtil.putByte( p + 7, (byte) (value >> 56) );\n-    }\n+      };\n+      return AccessController.doPrivileged(getUnsafe);\n+    } catch (Exception e)\n+    {\n+      throw new LinkageError(\"Cannot access sun.misc.Unsafe\", e);\n+    }\n+  }\n+\n+  /**\n+   * @throws java.lang.LinkageError if the Unsafe tools are not available on in this JVM.\n+   */\n+  public static void assertHasUnsafe()\n+  {\n+    if (unsafe == null)\n+    {\n+      throw new LinkageError(\"Unsafe not available\");\n+    }\n+  }\n+\n+  private static MethodHandle getSharedStringConstructorMethodHandle(\n+      MethodHandles.Lookup lookup)\n+  {\n+    try\n+    {\n+      Constructor<String> constructor = String.class.getDeclaredConstructor(char[].class, Boolean.TYPE);\n+      constructor.setAccessible(true);\n+      return lookup.unreflectConstructor(constructor);\n+    } catch (Exception e)\n+    {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Get the object-relative field offset.\n+   */\n+  public static long getFieldOffset(Class<?> type, String field)\n+  {\n+    try\n+    {\n+      return unsafe.objectFieldOffset(type.getDeclaredField(field));\n+    } catch (NoSuchFieldException e)\n+    {\n+      String message = \"Could not get offset of '\" + field + \"' field on type \" + type;\n+      throw new LinkageError(message, e);\n+    }\n+  }\n+\n+  /**\n+   * Atomically add the given delta to the int field, and return its previous value.\n+   * <p>\n+   * This has the memory visibility semantics of a volatile read followed by a volatile write.\n+   */\n+  public static int getAndAddInt(Object obj, long offset, int delta)\n+  {\n+    return unsafe.getAndAddInt(obj, offset, delta);\n+  }\n+\n+  /**\n+   * Atomically add the given delta to the long field, and return its previous value.\n+   * <p>\n+   * This has the memory visibility semantics of a volatile read followed by a volatile write.\n+   */\n+  public static long getAndAddLong(Object obj, long offset, long delta)\n+  {\n+    return unsafe.getAndAddLong(obj, offset, delta);\n+  }\n+\n+  /**\n+   * Orders loads before the fence, with loads and stores after the fence.\n+   */\n+  public static void loadFence()\n+  {\n+    unsafe.loadFence();\n+  }\n+\n+  /**\n+   * Orders stores before the fence, with loads and stores after the fence.\n+   */\n+  public static void storeFence()\n+  {\n+    unsafe.storeFence();\n+  }\n+\n+  /**\n+   * Orders loads and stores before the fence, with loads and stores after the fence.\n+   */\n+  public static void fullFence()\n+  {\n+    unsafe.fullFence();\n+  }\n+\n+  /**\n+   * Atomically compare the current value of the given long field with the expected value, and if they are the\n+   * equal, set the field to the updated value and return true. Otherwise return false.\n+   * <p>\n+   * If this method returns true, then it has the memory visibility semantics of a volatile read followed by a\n+   * volatile write.\n+   */\n+  public static boolean compareAndSwapLong(\n+      Object obj, long offset, long expected, long update)\n+  {\n+    return unsafe.compareAndSwapLong(obj, offset, expected, update);\n+  }\n+\n+  /**\n+   * Same as compareAndSwapLong, but for object references.\n+   */\n+  public static boolean compareAndSwapObject(\n+      Object obj, long offset, Object expected, Object update)\n+  {\n+    return unsafe.compareAndSwapObject(obj, offset, expected, update);\n+  }\n+\n+  /**\n+   * Atomically return the current object reference value, and exchange it with the given new reference value.\n+   */\n+  public static Object getAndSetObject(Object obj, long offset, Object newValue)\n+  {\n+    return unsafe.getAndSetObject(obj, offset, newValue);\n+  }\n+\n+  /**\n+   * Atomically exchanges provided <code>newValue</code> with the current value of field or array element, with\n+   * provided <code>offset</code>.\n+   */\n+  public static long getAndSetLong(Object object, long offset, long newValue)\n+  {\n+    return unsafe.getAndSetLong(object, offset, newValue);\n+  }\n+\n+  /**\n+   * Atomically set field or array element to a maximum between current value and provided <code>newValue</code>\n+   */\n+  public static void compareAndSetMaxLong(Object object, long fieldOffset, long newValue)\n+  {\n+    long currentValue;\n+    do\n+    {\n+      currentValue = UnsafeUtil.getLongVolatile(object, fieldOffset);\n+      if (currentValue >= newValue)\n+      {\n+        return;\n+      }\n+    }\n+    while (!UnsafeUtil.compareAndSwapLong(object, fieldOffset, currentValue, newValue));\n+  }\n+\n+  /**\n+   * Create a string with a char[] that you know is not going to be modified, so avoid the copy constructor.\n+   *\n+   * @param chars array that will back the new string\n+   * @return the created string\n+   */\n+  public static String newSharedArrayString(char[] chars)\n+  {\n+    if (sharedStringConstructor != null)\n+    {\n+      try\n+      {\n+        return (String) sharedStringConstructor.invokeExact(chars, true);\n+      } catch (Throwable throwable)\n+      {\n+        throw new LinkageError(\"Unexpected 'String constructor' intrinsic failure\", throwable);\n+      }\n+    } else\n+    {\n+      return new String(chars);\n+    }\n+  }\n+\n+  public static long allocateMemory(long sizeInBytes) throws NativeMemoryAllocationRefusedError\n+  {\n+    return allocateMemory(sizeInBytes, GlobalMemoryTracker.INSTANCE);\n+  }\n+\n+  /**\n+   * Allocate a block of memory of the given size in bytes, and return a pointer to that memory.\n+   * <p>\n+   * The memory is aligned such that it can be used for any data type.\n+   * The memory is uninitialised, so it may contain random garbage, or it may not.\n+   */\n+  public static long allocateMemory(long sizeInBytes, MemoryAllocationTracker allocationTracker) throws NativeMemoryAllocationRefusedError\n+  {\n+    final long pointer;\n+    try\n+    {\n+      pointer = unsafe.allocateMemory(sizeInBytes);\n+    } catch (Throwable e)\n+    {\n+      throw new NativeMemoryAllocationRefusedError(sizeInBytes, allocationTracker.usedDirectMemory(), e);\n+    }\n+    if (DIRTY_MEMORY)\n+    {\n+      setMemory(pointer, sizeInBytes, (byte) 0xA5);\n+    }\n+    addAllocatedPointer(pointer, sizeInBytes);\n+    allocationTracker.allocated(sizeInBytes);\n+    return pointer;\n+  }\n+\n+  /**\n+   * Returns address pointer equal to or slightly after the given {@code pointer}.\n+   * The returned pointer as aligned with {@code alignBy} such that {@code pointer % alignBy == 0}.\n+   * The given pointer should be allocated with at least the requested size + {@code alignBy - 1},\n+   * where the additional bytes will serve as padding for the worst case where the start of the usable\n+   * area of the allocated memory will need to be shifted at most {@code alignBy - 1} bytes to the right.\n+   * <p>\n+   * <pre><code>\n+   * 0   4   8   12  16  20        ; 4-byte alignments\n+   * |---|---|---|---|---|         ; memory\n+   *        --------===            ; allocated memory (-required, =padding)\n+   *         ^------^              ; used memory\n+   * </code></pre>\n+   *\n+   * @param pointer pointer to allocated memory from {@link #allocateMemory(long, MemoryAllocationTracker)} )}.\n+   * @param alignBy power-of-two size to align to, e.g. 4 or 8.\n+   * @return pointer to place inside the allocated memory to consider the effective start of the\n+   * memory, which from that point is aligned by {@code alignBy}.\n+   */\n+  public static long alignedMemory(long pointer, int alignBy)\n+  {\n+    assert Integer.bitCount(alignBy) == 1 : \"Requires alignment to be power of 2, but was \" + alignBy;\n+\n+    long misalignment = pointer % alignBy;\n+    return misalignment == 0 ? pointer : pointer + (alignBy - misalignment);\n+  }\n+\n+  /**\n+   * Free the memory that was allocated with {@link #allocateMemory}.\n+   */\n+  public static void free(long pointer, long bytes, MemoryAllocationTracker allocationTracker)\n+  {\n+    checkFree(pointer);\n+    unsafe.freeMemory(pointer);\n+    allocationTracker.deallocated(bytes);\n+  }\n+\n+  private static final class FreeTrace extends Throwable implements Comparable<FreeTrace>\n+  {\n+    private final long pointer;\n+    private final long size;\n+    private final long id;\n+    private final long nanoTime;\n+    private long referenceTime;\n+\n+    private FreeTrace(long pointer, long size, long id)\n+    {\n+      this.pointer = pointer;\n+      this.size = size;\n+      this.id = id;\n+      this.nanoTime = System.nanoTime();\n+    }\n+\n+    private boolean contains(long pointer)\n+    {\n+      return this.pointer <= pointer && pointer <= this.pointer + size;\n+    }\n+\n+    @Override\n+    public int compareTo(FreeTrace that)\n+    {\n+      return Long.compare(this.id, that.id);\n+    }\n+\n+    @Override\n+    public String getMessage()\n+    {\n+      return format(\"0x%x of %6d bytes, freed %s \u00b5s ago at\", pointer, size, (referenceTime - nanoTime) / 1000);\n+    }\n+  }\n+\n+  private static final ConcurrentSkipListMap<Long, Long> pointers = new ConcurrentSkipListMap<>();\n+  private static final FreeTrace[] freeTraces = CHECK_NATIVE_ACCESS ? new FreeTrace[4096] : null;\n+  private static final AtomicLong freeTraceCounter = new AtomicLong();\n+\n+  private static void addAllocatedPointer(long pointer, long sizeInBytes)\n+  {\n+    if (CHECK_NATIVE_ACCESS)\n+    {\n+      pointers.put(pointer, sizeInBytes);\n+    }\n+  }\n+\n+  private static void checkFree(long pointer)\n+  {\n+    if (CHECK_NATIVE_ACCESS)\n+    {\n+      doCheckFree(pointer);\n+    }\n+  }\n+\n+  private static void doCheckFree(long pointer)\n+  {\n+    Long size = pointers.remove(pointer);\n+    if (size == null)\n+    {\n+      StringBuilder sb = new StringBuilder(format(\"Bad free: 0x%x, valid pointers are:\", pointer));\n+      pointers.forEach((k, v) -> sb.append('\\n').append(k));\n+      throw new AssertionError(sb.toString());\n+    }\n+    long count = freeTraceCounter.getAndIncrement();\n+    int idx = (int) (count & 4095);\n+    freeTraces[idx] = new FreeTrace(pointer, size, count);\n+  }\n+\n+  private static void checkAccess(long pointer, int size)\n+  {\n+    if (CHECK_NATIVE_ACCESS && nativeAccessCheckEnabled)\n+    {\n+      doCheckAccess(pointer, size);\n+    }\n+  }\n+\n+  private static void doCheckAccess(long pointer, int size)\n+  {\n+    Map.Entry<Long, Long> fentry = pointers.floorEntry(pointer + size);\n+    if (fentry == null || fentry.getKey() + fentry.getValue() < pointer + size)\n+    {\n+      Map.Entry<Long, Long> centry = pointers.ceilingEntry(pointer);\n+      throwBadAccess(pointer, size, fentry, centry);\n+    }\n+  }\n+\n+  private static void throwBadAccess(long pointer, int size, Map.Entry<Long, Long> fentry,\n+                                     Map.Entry<Long, Long> centry)\n+  {\n+    long now = System.nanoTime();\n+    long faddr = fentry == null ? 0 : fentry.getKey();\n+    long fsize = fentry == null ? 0 : fentry.getValue();\n+    long foffset = pointer - (faddr + fsize);\n+    long caddr = centry == null ? 0 : centry.getKey();\n+    long csize = centry == null ? 0 : centry.getValue();\n+    long coffset = caddr - (pointer + size);\n+    boolean floorIsNearest = foffset < coffset;\n+    long naddr = floorIsNearest ? faddr : caddr;\n+    long nsize = floorIsNearest ? fsize : csize;\n+    long noffset = floorIsNearest ? foffset : coffset;\n+    List<FreeTrace> recentFrees = Arrays.stream(freeTraces)\n+        .filter(Objects::nonNull)\n+        .filter(trace -> trace.contains(pointer))\n+        .sorted()\n+        .collect(Collectors.toList());\n+    AssertionError error = new AssertionError(format(\n+        \"Bad access to address 0x%x with size %s, nearest valid allocation is \" +\n+            \"0x%x (%s bytes, off by %s bytes). \" +\n+            \"Recent relevant frees (of %s) are attached as suppressed exceptions.\",\n+        pointer, size, naddr, nsize, noffset, freeTraceCounter.get()));\n+    for (FreeTrace recentFree : recentFrees)\n+    {\n+      recentFree.referenceTime = now;\n+      error.addSuppressed(recentFree);\n+    }\n+    throw error;\n+  }\n+\n+  /**\n+   * Return the power-of-2 native memory page size.\n+   */\n+  public static int pageSize()\n+  {\n+    return pageSize;\n+  }\n+\n+  public static void putBoolean(Object obj, long offset, boolean value)\n+  {\n+    unsafe.putBoolean(obj, offset, value);\n+  }\n+\n+  public static boolean getBoolean(Object obj, long offset)\n+  {\n+    return unsafe.getBoolean(obj, offset);\n+  }\n+\n+  public static void putBooleanVolatile(Object obj, long offset, boolean value)\n+  {\n+    unsafe.putBooleanVolatile(obj, offset, value);\n+  }\n+\n+  public static boolean getBooleanVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getBooleanVolatile(obj, offset);\n+  }\n+\n+  public static void putByte(long address, byte value)\n+  {\n+    checkAccess(address, Byte.BYTES);\n+    unsafe.putByte(address, value);\n+  }\n+\n+  public static byte getByte(long address)\n+  {\n+    checkAccess(address, Byte.BYTES);\n+    return unsafe.getByte(address);\n+  }\n+\n+  public static void putByteVolatile(long address, byte value)\n+  {\n+    checkAccess(address, Byte.BYTES);\n+    unsafe.putByteVolatile(null, address, value);\n+  }\n+\n+  public static byte getByteVolatile(long address)\n+  {\n+    checkAccess(address, Byte.BYTES);\n+    return unsafe.getByteVolatile(null, address);\n+  }\n+\n+  public static void putByte(Object obj, long offset, byte value)\n+  {\n+    unsafe.putByte(obj, offset, value);\n+  }\n+\n+  public static byte getByte(Object obj, long offset)\n+  {\n+    return unsafe.getByte(obj, offset);\n+  }\n+\n+  public static byte getByteVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getByteVolatile(obj, offset);\n+  }\n+\n+  public static void putByteVolatile(Object obj, long offset, byte value)\n+  {\n+    unsafe.putByteVolatile(obj, offset, value);\n+  }\n+\n+  public static void putShort(long address, short value)\n+  {\n+    checkAccess(address, Short.BYTES);\n+    unsafe.putShort(address, value);\n+  }\n+\n+  public static short getShort(long address)\n+  {\n+    checkAccess(address, Short.BYTES);\n+    return unsafe.getShort(address);\n+  }\n+\n+  public static void putShortVolatile(long address, short value)\n+  {\n+    checkAccess(address, Short.BYTES);\n+    unsafe.putShortVolatile(null, address, value);\n+  }\n+\n+  public static short getShortVolatile(long address)\n+  {\n+    checkAccess(address, Short.BYTES);\n+    return unsafe.getShortVolatile(null, address);\n+  }\n+\n+  public static void putShort(Object obj, long offset, short value)\n+  {\n+    unsafe.putShort(obj, offset, value);\n+  }\n+\n+  public static short getShort(Object obj, long offset)\n+  {\n+    return unsafe.getShort(obj, offset);\n+  }\n+\n+  public static void putShortVolatile(Object obj, long offset, short value)\n+  {\n+    unsafe.putShortVolatile(obj, offset, value);\n+  }\n+\n+  public static short getShortVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getShortVolatile(obj, offset);\n+  }\n+\n+  public static void putFloat(long address, float value)\n+  {\n+    checkAccess(address, Float.BYTES);\n+    unsafe.putFloat(address, value);\n+  }\n+\n+  public static float getFloat(long address)\n+  {\n+    checkAccess(address, Float.BYTES);\n+    return unsafe.getFloat(address);\n+  }\n+\n+  public static void putFloatVolatile(long address, float value)\n+  {\n+    checkAccess(address, Float.BYTES);\n+    unsafe.putFloatVolatile(null, address, value);\n+  }\n+\n+  public static float getFloatVolatile(long address)\n+  {\n+    checkAccess(address, Float.BYTES);\n+    return unsafe.getFloatVolatile(null, address);\n+  }\n+\n+  public static void putFloat(Object obj, long offset, float value)\n+  {\n+    unsafe.putFloat(obj, offset, value);\n+  }\n+\n+  public static float getFloat(Object obj, long offset)\n+  {\n+    return unsafe.getFloat(obj, offset);\n+  }\n+\n+  public static void putFloatVolatile(Object obj, long offset, float value)\n+  {\n+    unsafe.putFloatVolatile(obj, offset, value);\n+  }\n+\n+  public static float getFloatVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getFloatVolatile(obj, offset);\n+  }\n+\n+  public static void putChar(long address, char value)\n+  {\n+    checkAccess(address, Character.BYTES);\n+    unsafe.putChar(address, value);\n+  }\n+\n+  public static char getChar(long address)\n+  {\n+    checkAccess(address, Character.BYTES);\n+    return unsafe.getChar(address);\n+  }\n+\n+  public static void putCharVolatile(long address, char value)\n+  {\n+    checkAccess(address, Character.BYTES);\n+    unsafe.putCharVolatile(null, address, value);\n+  }\n+\n+  public static char getCharVolatile(long address)\n+  {\n+    checkAccess(address, Character.BYTES);\n+    return unsafe.getCharVolatile(null, address);\n+  }\n+\n+  public static void putChar(Object obj, long offset, char value)\n+  {\n+    unsafe.putChar(obj, offset, value);\n+  }\n+\n+  public static char getChar(Object obj, long offset)\n+  {\n+    return unsafe.getChar(obj, offset);\n+  }\n+\n+  public static void putCharVolatile(Object obj, long offset, char value)\n+  {\n+    unsafe.putCharVolatile(obj, offset, value);\n+  }\n+\n+  public static char getCharVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getCharVolatile(obj, offset);\n+  }\n+\n+  public static void putInt(long address, int value)\n+  {\n+    checkAccess(address, Integer.BYTES);\n+    unsafe.putInt(address, value);\n+  }\n+\n+  public static int getInt(long address)\n+  {\n+    checkAccess(address, Integer.BYTES);\n+    return unsafe.getInt(address);\n+  }\n+\n+  public static void putIntVolatile(long address, int value)\n+  {\n+    checkAccess(address, Integer.BYTES);\n+    unsafe.putIntVolatile(null, address, value);\n+  }\n+\n+  public static int getIntVolatile(long address)\n+  {\n+    checkAccess(address, Integer.BYTES);\n+    return unsafe.getIntVolatile(null, address);\n+  }\n+\n+  public static void putInt(Object obj, long offset, int value)\n+  {\n+    unsafe.putInt(obj, offset, value);\n+  }\n+\n+  public static int getInt(Object obj, long offset)\n+  {\n+    return unsafe.getInt(obj, offset);\n+  }\n+\n+  public static void putIntVolatile(Object obj, long offset, int value)\n+  {\n+    unsafe.putIntVolatile(obj, offset, value);\n+  }\n+\n+  public static int getIntVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getIntVolatile(obj, offset);\n+  }\n+\n+  public static void putLongVolatile(long address, long value)\n+  {\n+    checkAccess(address, Long.BYTES);\n+    unsafe.putLongVolatile(null, address, value);\n+  }\n+\n+  public static long getLongVolatile(long address)\n+  {\n+    checkAccess(address, Long.BYTES);\n+    return unsafe.getLongVolatile(null, address);\n+  }\n+\n+  public static void putLong(long address, long value)\n+  {\n+    checkAccess(address, Long.BYTES);\n+    unsafe.putLong(address, value);\n+  }\n+\n+  public static long getLong(long address)\n+  {\n+    checkAccess(address, Long.BYTES);\n+    return unsafe.getLong(address);\n+  }\n+\n+  public static void putLong(Object obj, long offset, long value)\n+  {\n+    unsafe.putLong(obj, offset, value);\n+  }\n+\n+  public static long getLong(Object obj, long offset)\n+  {\n+    return unsafe.getLong(obj, offset);\n+  }\n+\n+  public static void putLongVolatile(Object obj, long offset, long value)\n+  {\n+    unsafe.putLongVolatile(obj, offset, value);\n+  }\n+\n+  public static long getLongVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getLongVolatile(obj, offset);\n+  }\n+\n+  public static void putDouble(long address, double value)\n+  {\n+    checkAccess(address, Double.BYTES);\n+    unsafe.putDouble(address, value);\n+  }\n+\n+  public static double getDouble(long address)\n+  {\n+    checkAccess(address, Double.BYTES);\n+    return unsafe.getDouble(address);\n+  }\n+\n+  public static void putDoubleVolatile(long address, double value)\n+  {\n+    checkAccess(address, Double.BYTES);\n+    unsafe.putDoubleVolatile(null, address, value);\n+  }\n+\n+  public static double getDoubleVolatile(long address)\n+  {\n+    checkAccess(address, Double.BYTES);\n+    return unsafe.getDoubleVolatile(null, address);\n+  }\n+\n+  public static void putDouble(Object obj, long offset, double value)\n+  {\n+    unsafe.putDouble(obj, offset, value);\n+  }\n+\n+  public static double getDouble(Object obj, long offset)\n+  {\n+    return unsafe.getDouble(obj, offset);\n+  }\n+\n+  public static void putDoubleVolatile(Object obj, long offset, double value)\n+  {\n+    unsafe.putDoubleVolatile(obj, offset, value);\n+  }\n+\n+  public static double getDoubleVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getDoubleVolatile(obj, offset);\n+  }\n+\n+  public static void putObject(Object obj, long offset, Object value)\n+  {\n+    unsafe.putObject(obj, offset, value);\n+  }\n+\n+  public static Object getObject(Object obj, long offset)\n+  {\n+    return unsafe.getObject(obj, offset);\n+  }\n+\n+  public static Object getObjectVolatile(Object obj, long offset)\n+  {\n+    return unsafe.getObjectVolatile(obj, offset);\n+  }\n+\n+  public static void putObjectVolatile(Object obj, long offset, Object value)\n+  {\n+    unsafe.putObjectVolatile(obj, offset, value);\n+  }\n+\n+  public static int arrayBaseOffset(Class klass)\n+  {\n+    return unsafe.arrayBaseOffset(klass);\n+  }\n+\n+  public static int arrayIndexScale(Class klass)\n+  {\n+    int scale = unsafe.arrayIndexScale(klass);\n+    if (scale == 0)\n+    {\n+      throw new AssertionError(\"Array type too narrow for unsafe access: \" + klass);\n+    }\n+    return scale;\n+  }\n+\n+  public static int arrayOffset(int index, int base, int scale)\n+  {\n+    return base + index * scale;\n+  }\n+\n+  /**\n+   * Set the given number of bytes to the given value, starting from the given address.\n+   */\n+  public static void setMemory(long address, long bytes, byte value)\n+  {\n+    unsafe.setMemory(address, bytes, value);\n+  }\n+\n+  /**\n+   * Copy the given number of bytes from the source address to the destination address.\n+   */\n+  public static void copyMemory(long srcAddress, long destAddress, long bytes)\n+  {\n+    unsafe.copyMemory(srcAddress, destAddress, bytes);\n+  }\n+\n+  /**\n+   * Create a new DirectByteBuffer that wraps the given address and has the given capacity.\n+   * <p>\n+   * The ByteBuffer does NOT create a Cleaner, or otherwise register the pointer for freeing.\n+   */\n+  public static ByteBuffer newDirectByteBuffer(long addr, int cap) throws Exception\n+  {\n+    if (directByteBufferCtor == null)\n+    {\n+      // Simulate the JNI NewDirectByteBuffer(void*, long) invocation.\n+      Object dbb = unsafe.allocateInstance(directByteBufferClass);\n+      initDirectByteBuffer(dbb, addr, cap);\n+      return (ByteBuffer) dbb;\n+    }\n+    // Reflection based fallback code.\n+    return (ByteBuffer) directByteBufferCtor.newInstance(addr, cap);\n+  }\n+\n+  /**\n+   * Initialize (simulate calling the constructor of) the given DirectByteBuffer.\n+   */\n+  public static void initDirectByteBuffer(Object dbb, long addr, int cap)\n+  {\n+    unsafe.putInt(dbb, directByteBufferMarkOffset, -1);\n+    unsafe.putInt(dbb, directByteBufferPositionOffset, 0);\n+    unsafe.putInt(dbb, directByteBufferLimitOffset, cap);\n+    unsafe.putInt(dbb, directByteBufferCapacityOffset, cap);\n+    unsafe.putLong(dbb, directByteBufferAddressOffset, addr);\n+  }\n+\n+  /**\n+   * Read the value of the address field in the (assumed to be) DirectByteBuffer.\n+   * <p>\n+   * <strong>NOTE:</strong> calling this method on a non-direct ByteBuffer is undefined behaviour.\n+   *\n+   * @param dbb The direct byte buffer to read the address field from.\n+   * @return The native memory address in the given direct byte buffer.\n+   */\n+  public static long getDirectByteBufferAddress(ByteBuffer dbb)\n+  {\n+    return unsafe.getLong(dbb, directByteBufferAddressOffset);\n+  }\n+\n+  /**\n+   * Change if native access checking is enabled by setting it to the given new setting, and returning the old\n+   * setting.\n+   * <p>\n+   * This is only useful for speeding up tests when you have a lot of them, and they access native memory a lot.\n+   * This does not disable the recording of memory allocations or frees.\n+   * <p>\n+   * Remember to restore the old value so other tests in the same JVM get the benefit of native access checks.\n+   * <p>\n+   * The changing of this setting is completely unsynchronised, so you have to order this modification before and\n+   * after the tests that you want to run without native access checks.\n+   *\n+   * @param newSetting The new setting.\n+   * @return the previous value of this setting.\n+   */\n+  public static boolean exchangeNativeAccessCheckEnabled(boolean newSetting)\n+  {\n+    boolean previousSetting = nativeAccessCheckEnabled;\n+    nativeAccessCheckEnabled = newSetting;\n+    return previousSetting;\n+  }\n+\n+  /**\n+   * Gets a {@code short} at memory address {@code p} by reading byte for byte, instead of the whole value\n+   * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n+   * is {@code false} and {@code p} isn't aligned properly. Values read with this method should have been\n+   * previously put using {@link #putShortByteWiseLittleEndian(long, short)}.\n+   *\n+   * @param p address pointer to start reading at.\n+   * @return the read value, which was read byte for byte.\n+   */\n+  public static short getShortByteWiseLittleEndian(long p)\n+  {\n+    short a = (short) (UnsafeUtil.getByte(p) & 0xFF);\n+    short b = (short) (UnsafeUtil.getByte(p + 1) & 0xFF);\n+    return (short) ((b << 8) | a);\n+  }\n+\n+  /**\n+   * Gets a {@code int} at memory address {@code p} by reading byte for byte, instead of the whole value\n+   * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n+   * is {@code false} and {@code p} isn't aligned properly. Values read with this method should have been\n+   * previously put using {@link #putIntByteWiseLittleEndian(long, int)}.\n+   *\n+   * @param p address pointer to start reading at.\n+   * @return the read value, which was read byte for byte.\n+   */\n+  public static int getIntByteWiseLittleEndian(long p)\n+  {\n+    int a = UnsafeUtil.getByte(p) & 0xFF;\n+    int b = UnsafeUtil.getByte(p + 1) & 0xFF;\n+    int c = UnsafeUtil.getByte(p + 2) & 0xFF;\n+    int d = UnsafeUtil.getByte(p + 3) & 0xFF;\n+    return (d << 24) | (c << 16) | (b << 8) | a;\n+  }\n+\n+  /**\n+   * Gets a {@code long} at memory address {@code p} by reading byte for byte, instead of the whole value\n+   * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n+   * is {@code false} and {@code p} isn't aligned properly. Values read with this method should have been\n+   * previously put using {@link #putLongByteWiseLittleEndian(long, long)}.\n+   *\n+   * @param p address pointer to start reading at.\n+   * @return the read value, which was read byte for byte.\n+   */\n+  public static long getLongByteWiseLittleEndian(long p)\n+  {\n+    long a = UnsafeUtil.getByte(p) & 0xFF;\n+    long b = UnsafeUtil.getByte(p + 1) & 0xFF;\n+    long c = UnsafeUtil.getByte(p + 2) & 0xFF;\n+    long d = UnsafeUtil.getByte(p + 3) & 0xFF;\n+    long e = UnsafeUtil.getByte(p + 4) & 0xFF;\n+    long f = UnsafeUtil.getByte(p + 5) & 0xFF;\n+    long g = UnsafeUtil.getByte(p + 6) & 0xFF;\n+    long h = UnsafeUtil.getByte(p + 7) & 0xFF;\n+    return (h << 56) | (g << 48) | (f << 40) | (e << 32) | (d << 24) | (c << 16) | (b << 8) | a;\n+  }\n+\n+  /**\n+   * Puts a {@code short} at memory address {@code p} by writing byte for byte, instead of the whole value\n+   * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n+   * is {@code false} and {@code p} isn't aligned properly. Values written with this method should be\n+   * read using {@link #getShortByteWiseLittleEndian(long)}.\n+   *\n+   * @param p     address pointer to start writing at.\n+   * @param value value to write byte for byte.\n+   */\n+  public static void putShortByteWiseLittleEndian(long p, short value)\n+  {\n+    UnsafeUtil.putByte(p, (byte) value);\n+    UnsafeUtil.putByte(p + 1, (byte) (value >> 8));\n+  }\n+\n+  /**\n+   * Puts a {@code int} at memory address {@code p} by writing byte for byte, instead of the whole value\n+   * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n+   * is {@code false} and {@code p} isn't aligned properly. Values written with this method should be\n+   * read using {@link #getIntByteWiseLittleEndian(long)}.\n+   *\n+   * @param p     address pointer to start writing at.\n+   * @param value value to write byte for byte.\n+   */\n+  public static void putIntByteWiseLittleEndian(long p, int value)\n+  {\n+    UnsafeUtil.putByte(p, (byte) value);\n+    UnsafeUtil.putByte(p + 1, (byte) (value >> 8));\n+    UnsafeUtil.putByte(p + 2, (byte) (value >> 16));\n+    UnsafeUtil.putByte(p + 3, (byte) (value >> 24));\n+  }\n+\n+  /**\n+   * Puts a {@code long} at memory address {@code p} by writing byte for byte, instead of the whole value\n+   * in one go. This can be useful, even necessary in some scenarios where {@link #allowUnalignedMemoryAccess}\n+   * is {@code false} and {@code p} isn't aligned properly. Values written with this method should be\n+   * read using {@link #getShortByteWiseLittleEndian(long)}.\n+   *\n+   * @param p     address pointer to start writing at.\n+   * @param value value to write byte for byte.\n+   */\n+  public static void putLongByteWiseLittleEndian(long p, long value)\n+  {\n+    UnsafeUtil.putByte(p, (byte) value);\n+    UnsafeUtil.putByte(p + 1, (byte) (value >> 8));\n+    UnsafeUtil.putByte(p + 2, (byte) (value >> 16));\n+    UnsafeUtil.putByte(p + 3, (byte) (value >> 24));\n+    UnsafeUtil.putByte(p + 4, (byte) (value >> 32));\n+    UnsafeUtil.putByte(p + 5, (byte) (value >> 40));\n+    UnsafeUtil.putByte(p + 6, (byte) (value >> 48));\n+    UnsafeUtil.putByte(p + 7, (byte) (value >> 56));\n+  }\n }\n",
            "diff_size": 1869
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "140",
                    "column": "88",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "190",
                    "column": "71",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "507",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "542",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "543",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 301).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3265/UnsafeUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3265/UnsafeUtil.java\nindex f27a479a912..f1eb8666dde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3265/UnsafeUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3265/UnsafeUtil.java\n@@ -68,10 +68,9 @@ public final class UnsafeUtil\n \n     private static final Unsafe unsafe;\n     private static final MethodHandle sharedStringConstructor;\n-    private static final String allowUnalignedMemoryAccessProperty =\n-            \"org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil.allowUnalignedMemoryAccess\";\n+    private static final String allowUnalignedMemoryAccessProperty = \"org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil.allowUnalignedMemoryAccess\";\n \n-    public static final Class<?> directByteBufferClass;\n+public static final Class<?> directByteBufferClass;\n     private static final Constructor<?> directByteBufferCtor;\n     private static final long directByteBufferMarkOffset;\n     private static final long directByteBufferPositionOffset;\n@@ -82,13 +81,13 @@ public final class UnsafeUtil\n     private static final int pageSize;\n \n     public static final boolean allowUnalignedMemoryAccess;\n-    public static final boolean storeByteOrderIsNative;\n+\n+public static final boolean storeByteOrderIsNative;\n \n     static\n     {\n         unsafe = getUnsafe();\n-\n-        MethodHandles.Lookup lookup = MethodHandles.lookup();\n+MethodHandles.Lookup lookup = MethodHandles.lookup();\n         sharedStringConstructor = getSharedStringConstructorMethodHandle( lookup );\n \n         Class<?> dbbClass = null;\n@@ -116,7 +115,8 @@ public final class UnsafeUtil\n             {\n                 throw new LinkageError( \"Cannot to link java.nio.DirectByteBuffer\", e );\n             }\n-            try\n+\n+try\n             {\n                 ctor = dbbClass.getConstructor( Long.TYPE, Integer.TYPE );\n                 ctor.setAccessible( true );\n@@ -137,10 +137,8 @@ public final class UnsafeUtil\n \n         // See java.nio.Bits.unaligned() and its uses.\n         String alignmentProperty = System.getProperty( allowUnalignedMemoryAccessProperty );\n-        if ( alignmentProperty != null &&\n-             (alignmentProperty.equalsIgnoreCase( \"true\" )\n-              || alignmentProperty.equalsIgnoreCase( \"false\" )) )\n-        {\n+        if ( alignmentProperty != null && (alignmentProperty.equalsIgnoreCase( \"true\" )|| alignmentProperty.equalsIgnoreCase( \"false\" )) )\n+{\n             allowUnalignedMemoryAccess = Boolean.parseBoolean( alignmentProperty );\n         }\n         else\n@@ -162,9 +160,11 @@ public final class UnsafeUtil\n                 unaligned = false;\n                 break;\n             }\n-            allowUnalignedMemoryAccess = unaligned;\n+\n+allowUnalignedMemoryAccess = unaligned;\n         }\n-        storeByteOrderIsNative = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;\n+\n+storeByteOrderIsNative = ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN;\n     }\n \n     private UnsafeUtil()\n@@ -187,9 +187,8 @@ public final class UnsafeUtil\n                     Field[] fields = type.getDeclaredFields();\n                     for ( Field field : fields )\n                     {\n-                        if ( Modifier.isStatic( field.getModifiers() )\n-                             && type.isAssignableFrom( field.getType() ) )\n-                        {\n+                        if ( Modifier.isStatic( field.getModifiers() )&& type.isAssignableFrom( field.getType() ) )\n+{\n                             field.setAccessible( true );\n                             return type.cast( field.get( null ) );\n                         }\n@@ -218,8 +217,7 @@ public final class UnsafeUtil\n         }\n     }\n \n-    private static MethodHandle getSharedStringConstructorMethodHandle(\n-            MethodHandles.Lookup lookup )\n+    private static MethodHandle getSharedStringConstructorMethodHandle( MethodHandles.Lookup lookup )\n     {\n         try\n         {\n@@ -300,8 +298,7 @@ public final class UnsafeUtil\n      * If this method returns true, then it has the memory visibility semantics of a volatile read followed by a\n      * volatile write.\n      */\n-    public static boolean compareAndSwapLong(\n-            Object obj, long offset, long expected, long update )\n+    public static boolean compareAndSwapLong( Object obj, long offset, long expected, long update )\n     {\n         return unsafe.compareAndSwapLong( obj, offset, expected, update );\n     }\n@@ -309,8 +306,7 @@ public final class UnsafeUtil\n     /**\n      * Same as compareAndSwapLong, but for object references.\n      */\n-    public static boolean compareAndSwapObject(\n-            Object obj, long offset, Object expected, Object update )\n+    public static boolean compareAndSwapObject( Object obj, long offset, Object expected, Object update )\n     {\n         return unsafe.compareAndSwapObject( obj, offset, expected, update );\n     }\n@@ -396,11 +392,13 @@ public final class UnsafeUtil\n         {\n             throw new NativeMemoryAllocationRefusedError( sizeInBytes, allocationTracker.usedDirectMemory(), e );\n         }\n-        if ( DIRTY_MEMORY )\n+\n+if ( DIRTY_MEMORY )\n         {\n             setMemory( pointer, sizeInBytes, (byte) 0xA5 );\n         }\n-        addAllocatedPointer( pointer, sizeInBytes );\n+\n+addAllocatedPointer( pointer, sizeInBytes );\n         allocationTracker.allocated( sizeInBytes );\n         return pointer;\n     }\n@@ -429,7 +427,7 @@ public final class UnsafeUtil\n         assert Integer.bitCount( alignBy ) == 1 : \"Requires alignment to be power of 2, but was \" + alignBy;\n \n         long misalignment = pointer % alignBy;\n-        return misalignment == 0 ? pointer : pointer + (alignBy - misalignment);\n+        return misalignment == 0 ? pointer : pointer + ( alignBy - misalignment);\n     }\n \n     /**\n@@ -472,7 +470,7 @@ public final class UnsafeUtil\n         @Override\n         public String getMessage()\n         {\n-            return format( \"0x%x of %6d bytes, freed %s \u00b5s ago at\", pointer, size, (referenceTime - nanoTime) / 1000 );\n+            return format( \"0x%x of %6d bytes, freed %s \u00b5s ago at\", pointer, size, ( referenceTime - nanoTime) / 1000 );\n         }\n     }\n \n@@ -506,7 +504,7 @@ public final class UnsafeUtil\n             throw new AssertionError( sb.toString() );\n         }\n         long count = freeTraceCounter.getAndIncrement();\n-        int idx = (int) (count & 4095);\n+        int idx = ( int) ( count & 4095 );\n         freeTraces[idx] = new FreeTrace( pointer, size, count );\n     }\n \n@@ -528,9 +526,8 @@ public final class UnsafeUtil\n         }\n     }\n \n-    private static void throwBadAccess( long pointer, int size, Map.Entry<Long,Long> fentry,\n-                                        Map.Entry<Long,Long> centry )\n-    {\n+    private static void throwBadAccess( long pointer, int size, Map.Entry<Long,Long> fentry, Map.Entry<Long,Long> centry )\n+{\n         long now = System.nanoTime();\n         long faddr = fentry == null ? 0 : fentry.getKey();\n         long fsize = fentry == null ? 0 : fentry.getValue();\n@@ -542,17 +539,9 @@ public final class UnsafeUtil\n         long naddr = floorIsNearest ? faddr : caddr;\n         long nsize = floorIsNearest ? fsize : csize;\n         long noffset = floorIsNearest ? foffset : coffset;\n-        List<FreeTrace> recentFrees = Arrays.stream( freeTraces )\n-                                            .filter( Objects::nonNull )\n-                                            .filter( trace -> trace.contains( pointer ) )\n-                                            .sorted()\n-                                            .collect( Collectors.toList() );\n-        AssertionError error = new AssertionError( format(\n-                \"Bad access to address 0x%x with size %s, nearest valid allocation is \" +\n-                \"0x%x (%s bytes, off by %s bytes). \" +\n-                \"Recent relevant frees (of %s) are attached as suppressed exceptions.\",\n-                pointer, size, naddr, nsize, noffset, freeTraceCounter.get() ) );\n-        for ( FreeTrace recentFree : recentFrees )\n+        List<FreeTrace> recentFrees = Arrays.stream( freeTraces ).filter( Objects::nonNull ).filter( trace -> trace.contains( pointer ) ).sorted().collect( Collectors.toList() );\n+AssertionError error = new AssertionError( format( \"Bad access to address 0x%x with size %s, nearest valid allocation is \" + \"0x%x (%s bytes, off by %s bytes). \" + \"Recent relevant frees (of %s) are attached as suppressed exceptions.\", pointer, size, naddr, nsize, noffset, freeTraceCounter.get() ) );\n+for ( FreeTrace recentFree : recentFrees )\n         {\n             recentFree.referenceTime = now;\n             error.addSuppressed( recentFree );\n@@ -928,7 +917,8 @@ public final class UnsafeUtil\n         {\n             throw new AssertionError( \"Array type too narrow for unsafe access: \" + klass );\n         }\n-        return scale;\n+\n+return scale;\n     }\n \n     public static int arrayOffset( int index, int base, int scale )\n@@ -1028,9 +1018,9 @@ public final class UnsafeUtil\n      */\n     public static short getShortByteWiseLittleEndian( long p )\n     {\n-        short a = (short) (UnsafeUtil.getByte( p ) & 0xFF);\n-        short b = (short) (UnsafeUtil.getByte( p + 1 ) & 0xFF);\n-        return (short) ((b << 8) | a);\n+        short a = (short) (UnsafeUtil.getByte( p ) & 0xFF );\n+        short b = (short) (UnsafeUtil.getByte( p + 1 ) & 0xFF );\n+        return (short) ((b << 8) | a );\n     }\n \n     /**\n@@ -1048,7 +1038,7 @@ public final class UnsafeUtil\n         int b = UnsafeUtil.getByte( p + 1 ) & 0xFF;\n         int c = UnsafeUtil.getByte( p + 2 ) & 0xFF;\n         int d = UnsafeUtil.getByte( p + 3 ) & 0xFF;\n-        return (d << 24) | (c << 16) | (b << 8) | a;\n+        return ( d << 24) | ( c << 16) | ( b << 8) | a;\n     }\n \n     /**\n@@ -1070,7 +1060,7 @@ public final class UnsafeUtil\n         long f = UnsafeUtil.getByte( p + 5 ) & 0xFF;\n         long g = UnsafeUtil.getByte( p + 6 ) & 0xFF;\n         long h = UnsafeUtil.getByte( p + 7 ) & 0xFF;\n-        return (h << 56) | (g << 48) | (f << 40) | (e << 32) | (d << 24) | (c << 16) | (b << 8) | a;\n+        return ( h << 56) | ( g << 48) | ( f << 40) | ( e << 32) | ( d << 24) | ( c << 16) | ( b << 8) | a;\n     }\n \n     /**\n@@ -1085,7 +1075,7 @@ public final class UnsafeUtil\n     public static void putShortByteWiseLittleEndian( long p, short value )\n     {\n         UnsafeUtil.putByte( p, (byte) value );\n-        UnsafeUtil.putByte( p + 1, (byte) (value >> 8) );\n+        UnsafeUtil.putByte( p + 1, (byte) ( value >> 8) );\n     }\n \n     /**\n@@ -1100,9 +1090,9 @@ public final class UnsafeUtil\n     public static void putIntByteWiseLittleEndian( long p, int value )\n     {\n         UnsafeUtil.putByte( p, (byte) value );\n-        UnsafeUtil.putByte( p + 1, (byte) (value >> 8) );\n-        UnsafeUtil.putByte( p + 2, (byte) (value >> 16) );\n-        UnsafeUtil.putByte( p + 3, (byte) (value >> 24) );\n+        UnsafeUtil.putByte( p + 1, (byte) ( value >> 8) );\n+        UnsafeUtil.putByte( p + 2, (byte) ( value >> 16) );\n+        UnsafeUtil.putByte( p + 3, (byte) ( value >> 24) );\n     }\n \n     /**\n@@ -1117,12 +1107,12 @@ public final class UnsafeUtil\n     public static void putLongByteWiseLittleEndian( long p, long value )\n     {\n         UnsafeUtil.putByte( p, (byte) value );\n-        UnsafeUtil.putByte( p + 1, (byte) (value >> 8) );\n-        UnsafeUtil.putByte( p + 2, (byte) (value >> 16) );\n-        UnsafeUtil.putByte( p + 3, (byte) (value >> 24) );\n-        UnsafeUtil.putByte( p + 4, (byte) (value >> 32) );\n-        UnsafeUtil.putByte( p + 5, (byte) (value >> 40) );\n-        UnsafeUtil.putByte( p + 6, (byte) (value >> 48) );\n-        UnsafeUtil.putByte( p + 7, (byte) (value >> 56) );\n-    }\n-}\n+        UnsafeUtil.putByte( p + 1, (byte) ( value >> 8) );\n+        UnsafeUtil.putByte( p + 2, (byte) ( value >> 16) );\n+        UnsafeUtil.putByte( p + 3, (byte) ( value >> 24) );\n+        UnsafeUtil.putByte( p + 4, (byte) ( value >> 32) );\n+        UnsafeUtil.putByte( p + 5, (byte) ( value >> 40) );\n+        UnsafeUtil.putByte( p + 6, (byte) ( value >> 48) );\n+        UnsafeUtil.putByte( p + 7, (byte) ( value >> 56) );\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 67
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}