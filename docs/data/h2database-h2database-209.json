{
    "project_name": "h2database-h2database",
    "error_id": "209",
    "information": {
        "errors": [
            {
                "line": "2024",
                "column": "70",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n        debugCodeCall(\"supportsMixedCaseIdentifiers\");\n        SessionInterface.StaticSettings settings = conn.getStaticSettings();\n        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/209/JdbcDatabaseMetaData.java\nindex ed886995b6d..294a0ddac68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/209/JdbcDatabaseMetaData.java\n@@ -2021,7 +2021,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/209/JdbcDatabaseMetaData.java\nindex ed886995b6d..0a6775ed359 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/209/JdbcDatabaseMetaData.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.sql.Connection;\n@@ -132,25 +133,27 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SQL (String) the create table statement or NULL for systems tables.</li>\n      * </ol>\n      *\n-     * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalogPattern   null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param types null or a list of table types\n+     *                         (uppercase for unquoted names)\n+     * @param types            null or a list of table types\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getTables(String catalogPattern, String schemaPattern,\n-            String tableNamePattern, String[] types) throws SQLException {\n+                               String tableNamePattern, String[] types)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getTables(\" + quote(catalogPattern) + \", \" +\n                         quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n                         \", \" + quoteArray(types) + \");\");\n             }\n-            return getResultSet(meta.getTables(catalogPattern, schemaPattern, tableNamePattern, types));\n+            return getResultSet(meta.getTables(catalogPattern, schemaPattern,\n+                    tableNamePattern, types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -188,27 +191,29 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>IS_GENERATEDCOLUMN (String) \"NO\" or \"YES\"</li>\n      * </ol>\n      *\n-     * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalogPattern    null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumns(String catalogPattern, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalogPattern, String schemaPattern,\n+                                String tableNamePattern,\n+                                String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumns(catalogPattern, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getColumns(catalogPattern, schemaPattern,\n+                    tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -239,17 +244,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableName table name (must be specified)\n-     * @param unique only unique indexes\n-     * @param approximate is ignored\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n+     * @param tableName      table name (must be specified)\n+     * @param unique         only unique indexes\n+     * @param approximate    is ignored\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getIndexInfo(String catalogPattern, String schemaPattern,\n-            String tableName, boolean unique, boolean approximate)\n+                                  String tableName, boolean unique,\n+                                  boolean approximate)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n@@ -257,7 +263,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n                         quote(schemaPattern) + \", \" + quote(tableName) + \", \" +\n                         unique + \", \" + approximate + \");\");\n             }\n-            return getResultSet(meta.getIndexInfo(catalogPattern, schemaPattern, tableName, unique, approximate));\n+            return getResultSet(\n+                    meta.getIndexInfo(catalogPattern, schemaPattern, tableName,\n+                            unique, approximate));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -277,23 +285,26 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableName table name (must be specified)\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n+     * @param tableName      table name (must be specified)\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getPrimaryKeys(String catalogPattern,\n-            String schemaPattern, String tableName) throws SQLException {\n+                                    String schemaPattern, String tableName)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableName) + \");\");\n             }\n-            return getResultSet(meta.getPrimaryKeys(catalogPattern, schemaPattern, tableName));\n+            return getResultSet(\n+                    meta.getPrimaryKeys(catalogPattern, schemaPattern,\n+                            tableName));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -371,7 +382,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Checks if NULL is sorted high (bigger than anything that is not null).\n      *\n      * @return false by default; true if the system property h2.sortNullsHigh is\n-     *         set to true\n+     * set to true\n      */\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n@@ -387,7 +398,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Checks if NULL is sorted low (smaller than anything that is not null).\n      *\n      * @return true by default; false if the system property h2.sortNullsHigh is\n-     *         set to true\n+     * set to true\n      */\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n@@ -452,24 +463,27 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SPECIFIC_NAME (String) name</li>\n      * </ol>\n      *\n-     * @param catalogPattern null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalogPattern       null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getProcedures(String catalogPattern, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+                                   String procedureNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedures(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getProcedures(catalogPattern, schemaPattern, procedureNamePattern));\n+            return getResultSet(\n+                    meta.getProcedures(catalogPattern, schemaPattern,\n+                            procedureNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -508,28 +522,32 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SPECIFIC_NAME (String) name</li>\n      * </ol>\n      *\n-     * @param catalogPattern null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalogPattern       null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n-     * @param columnNamePattern the procedure name pattern\n+     * @param columnNamePattern    the procedure name pattern\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getProcedureColumns(String catalogPattern, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalogPattern,\n+                                         String schemaPattern,\n+                                         String procedureNamePattern,\n+                                         String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedureColumns(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(\n-                    meta.getProcedureColumns(catalogPattern, schemaPattern, procedureNamePattern, columnNamePattern));\n+                    meta.getProcedureColumns(catalogPattern, schemaPattern,\n+                            procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -616,28 +634,31 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * others</li>\n      * </ol>\n      *\n-     * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table a table name (uppercase for unquoted names)\n+     * @param catalogPattern    null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param table             a table name (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getColumnPrivileges(String catalogPattern,\n-            String schemaPattern, String table, String columnNamePattern)\n+                                         String schemaPattern, String table,\n+                                         String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(table) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumnPrivileges(catalogPattern, schemaPattern, table, columnNamePattern));\n+            return getResultSet(\n+                    meta.getColumnPrivileges(catalogPattern, schemaPattern,\n+                            table, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -659,26 +680,30 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * others</li>\n      * </ol>\n      *\n-     * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalogPattern   null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getTablePrivileges(String catalogPattern,\n-            String schemaPattern, String tableNamePattern) throws SQLException {\n+                                        String schemaPattern,\n+                                        String tableNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getTablePrivileges(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(meta.getTablePrivileges(catalogPattern, schemaPattern, tableNamePattern));\n+            return getResultSet(\n+                    meta.getTablePrivileges(catalogPattern, schemaPattern,\n+                            tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -701,26 +726,31 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableName table name (must be specified)\n-     * @param scope ignored\n-     * @param nullable ignored\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n+     * @param tableName      table name (must be specified)\n+     * @param scope          ignored\n+     * @param nullable       ignored\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalogPattern, String schemaPattern, String tableName, int scope,\n-            boolean nullable) throws SQLException {\n+    public ResultSet getBestRowIdentifier(String catalogPattern,\n+                                          String schemaPattern,\n+                                          String tableName, int scope,\n+                                          boolean nullable)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableName) + \", \"\n+                        + scope + \", \" + nullable + \");\");\n             }\n-            return getResultSet(meta.getBestRowIdentifier(catalogPattern, schemaPattern, tableName, scope, nullable));\n+            return getResultSet(\n+                    meta.getBestRowIdentifier(catalogPattern, schemaPattern,\n+                            tableName, scope, nullable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -742,23 +772,24 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>8 PSEUDO_COLUMN (int) is this column a pseudo column</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n+     * @param catalog   null (to get all objects) or the catalog name\n+     * @param schema    null (to get all objects) or a schema name\n      * @param tableName table name (must be specified)\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getVersionColumns(String catalog, String schema,\n-            String tableName) throws SQLException {\n+                                       String tableName) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(tableName)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(tableName) + \");\");\n             }\n-            return getResultSet(meta.getVersionColumns(catalog, schema, tableName));\n+            return getResultSet(\n+                    meta.getVersionColumns(catalog, schema, tableName));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -790,22 +821,25 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern the schema name of the foreign table\n-     * @param tableName the name of the foreign table\n+     * @param schemaPattern  the schema name of the foreign table\n+     * @param tableName      the name of the foreign table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getImportedKeys(String catalogPattern,\n-            String schemaPattern, String tableName) throws SQLException {\n+                                     String schemaPattern, String tableName)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getImportedKeys(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableName) + \");\");\n             }\n-            return getResultSet(meta.getImportedKeys(catalogPattern, schemaPattern, tableName));\n+            return getResultSet(\n+                    meta.getImportedKeys(catalogPattern, schemaPattern,\n+                            tableName));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -837,22 +871,25 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null or the catalog name\n-     * @param schemaPattern the schema name of the primary table\n-     * @param tableName the name of the primary table\n+     * @param schemaPattern  the schema name of the primary table\n+     * @param tableName      the name of the primary table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getExportedKeys(String catalogPattern,\n-            String schemaPattern, String tableName) throws SQLException {\n+                                     String schemaPattern, String tableName)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getExportedKeys(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\");\");\n+                        + quote(catalogPattern) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableName) + \");\");\n             }\n-            return getResultSet(meta.getExportedKeys(catalogPattern, schemaPattern, tableName));\n+            return getResultSet(\n+                    meta.getExportedKeys(catalogPattern, schemaPattern,\n+                            tableName));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -885,31 +922,36 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param primaryCatalogPattern null or the catalog name\n-     * @param primarySchemaPattern the schema name of the primary table\n-     *          (optional)\n-     * @param primaryTable the name of the primary table (must be specified)\n+     * @param primarySchemaPattern  the schema name of the primary table\n+     *                              (optional)\n+     * @param primaryTable          the name of the primary table (must be specified)\n      * @param foreignCatalogPattern null or the catalog name\n-     * @param foreignSchemaPattern the schema name of the foreign table\n-     *          (optional)\n-     * @param foreignTable the name of the foreign table (must be specified)\n+     * @param foreignSchemaPattern  the schema name of the foreign table\n+     *                              (optional)\n+     * @param foreignTable          the name of the foreign table (must be specified)\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getCrossReference(String primaryCatalogPattern,\n-            String primarySchemaPattern, String primaryTable, String foreignCatalogPattern,\n-            String foreignSchemaPattern, String foreignTable) throws SQLException {\n+                                       String primarySchemaPattern,\n+                                       String primaryTable,\n+                                       String foreignCatalogPattern,\n+                                       String foreignSchemaPattern,\n+                                       String foreignTable)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalogPattern)+\", \"\n-                        +quote(primarySchemaPattern)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalogPattern)+\", \"\n-                        +quote(foreignSchemaPattern)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                        + quote(primaryCatalogPattern) + \", \"\n+                        + quote(primarySchemaPattern) + \", \"\n+                        + quote(primaryTable) + \", \"\n+                        + quote(foreignCatalogPattern) + \", \"\n+                        + quote(foreignSchemaPattern) + \", \"\n+                        + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalogPattern, primarySchemaPattern, primaryTable,\n+            return getResultSet(meta.getCrossReference(primaryCatalogPattern,\n+                    primarySchemaPattern, primaryTable,\n                     foreignCatalogPattern, foreignSchemaPattern, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n@@ -930,25 +972,28 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>BASE_TYPE (short) base type - see also java.sql.Types</li>\n      * </ol>\n      *\n-     * @param catalog ignored\n-     * @param schemaPattern ignored\n+     * @param catalog         ignored\n+     * @param schemaPattern   ignored\n      * @param typeNamePattern ignored\n-     * @param types ignored\n+     * @param types           ignored\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+                             String typeNamePattern, int[] types)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quoteIntArray(types) + \");\");\n             }\n-            return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n+            return getResultSet(\n+                    meta.getUDTs(catalog, schemaPattern, typeNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1107,7 +1152,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * patterns.\n      *\n      * @return the default escape character (always '\\', independent on the\n-     *         mode)\n+     * mode)\n      */\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n@@ -1133,6 +1178,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n \n     /**\n      * Returns whether alter table with add column is supported.\n+     *\n      * @return true\n      */\n     @Override\n@@ -1189,13 +1235,13 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether CONVERT is supported for one datatype to another.\n      *\n      * @param fromType the source SQL type\n-     * @param toType the target SQL type\n+     * @param toType   the target SQL type\n      * @return true\n      */\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \" + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1785,17 +1831,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true\n      */\n     @Override\n-    public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n+    public boolean supportsTransactionIsolationLevel(int level)\n+            throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n         switch (level) {\n-        case Connection.TRANSACTION_READ_UNCOMMITTED:\n-        case Connection.TRANSACTION_READ_COMMITTED:\n-        case Connection.TRANSACTION_REPEATABLE_READ:\n-        case Constants.TRANSACTION_SNAPSHOT:\n-        case Connection.TRANSACTION_SERIALIZABLE:\n-            return true;\n-        default:\n-            return false;\n+            case Connection.TRANSACTION_READ_UNCOMMITTED:\n+            case Connection.TRANSACTION_READ_COMMITTED:\n+            case Connection.TRANSACTION_REPEATABLE_READ:\n+            case Constants.TRANSACTION_SNAPSHOT:\n+            case Connection.TRANSACTION_SERIALIZABLE:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -1861,14 +1908,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether a specific result set concurrency is supported.\n      * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n      *\n-     * @param type the result set type\n+     * @param type        the result set type\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \" +\n+                    concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -2021,10 +2069,11 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                !settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2061,7 +2110,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2380,15 +2430,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n+    public ResultSet getSuperTypes(String catalog, String schemaPattern,\n+                                   String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n+            return getResultSet(meta.getSuperTypes(catalog, schemaPattern,\n+                    typeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2404,24 +2456,26 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SUPERTABLE_NAME (String) the name of the super table</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name pattern\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return an empty result set\n      */\n     @Override\n     public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+                                    String tableNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getSuperTables(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2431,17 +2485,21 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern,\n+                                   String typeNamePattern,\n+                                   String attributeNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quote(attributeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n+            return getResultSet(\n+                    meta.getAttributes(catalog, schemaPattern, typeNamePattern,\n+                            attributeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2451,7 +2509,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Does this database supports a result set holdability.\n      *\n      * @param holdability ResultSet.HOLD_CURSORS_OVER_COMMIT or\n-     *            CLOSE_CURSORS_AT_COMMIT\n+     *                    CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n     @Override\n@@ -2584,8 +2642,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n@@ -2635,12 +2693,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()),\n+                    ValueInteger.get(Integer.MAX_VALUE),\n+                    ValueVarchar.EMPTY, ValueVarchar.EMPTY,\n+                    ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                    \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2680,18 +2741,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      */\n     @Override\n     public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n+                                        String functionNamePattern,\n+                                        String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+                    meta.getFunctionColumns(catalog, schemaPattern,\n+                            functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2702,15 +2765,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      */\n     @Override\n     public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+                                  String functionNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n+            return getResultSet(meta.getFunctions(catalog, schemaPattern,\n+                    functionNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2730,26 +2795,29 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      */\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern,\n+                                      String tableNamePattern,\n+                                      String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern,\n+                    tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2764,7 +2832,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn, null, null, result,\n+                getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n }\n",
            "diff_size": 271
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/209/JdbcDatabaseMetaData.java\nindex ed886995b6d..46e22387913 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/209/JdbcDatabaseMetaData.java\n@@ -2021,7 +2021,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2767,4 +2767,4 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/209/JdbcDatabaseMetaData.java\nindex ed886995b6d..9302369819f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/209/JdbcDatabaseMetaData.java\n@@ -12,7 +12,6 @@ import java.sql.RowIdLifetime;\n import java.sql.SQLException;\n import java.util.Map.Entry;\n import java.util.Properties;\n-\n import org.h2.engine.Constants;\n import org.h2.engine.SessionInterface;\n import org.h2.jdbc.meta.DatabaseMeta;\n@@ -28,11 +27,11 @@ import org.h2.value.ValueVarchar;\n /**\n  * Represents the meta data for a database.\n  */\n-public class JdbcDatabaseMetaData extends TraceObject implements\n-        DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n \n-    private final JdbcConnection conn;\n \n+public class JdbcDatabaseMetaData extends TraceObject implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+\n+    private final JdbcConnection conn;\n     private final DatabaseMeta meta;\n \n     JdbcDatabaseMetaData(JdbcConnection conn, Trace trace, int id) {\n@@ -46,6 +45,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version number\n      */\n+\n     @Override\n     public int getDriverMajorVersion() {\n         debugCodeCall(\"getDriverMajorVersion\");\n@@ -57,6 +57,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version number\n      */\n+\n     @Override\n     public int getDriverMinorVersion() {\n         debugCodeCall(\"getDriverMinorVersion\");\n@@ -68,6 +69,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product name (\"H2\")\n      */\n+\n     @Override\n     public String getDatabaseProductName() {\n         debugCodeCall(\"getDatabaseProductName\");\n@@ -81,6 +83,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product version\n      */\n+\n     @Override\n     public String getDatabaseProductVersion() throws SQLException {\n         try {\n@@ -96,6 +99,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the driver name (\"H2 JDBC Driver\")\n      */\n+\n     @Override\n     public String getDriverName() {\n         debugCodeCall(\"getDriverName\");\n@@ -108,6 +112,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the version number\n      */\n+\n     @Override\n     public String getDriverVersion() {\n         debugCodeCall(\"getDriverVersion\");\n@@ -141,14 +146,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTables(String catalogPattern, String schemaPattern,\n-            String tableNamePattern, String[] types) throws SQLException {\n+    public ResultSet getTables(String catalogPattern, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTables(\" + quote(catalogPattern) + \", \" +\n-                        quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n-                        \", \" + quoteArray(types) + \");\");\n+                debugCode(\"getTables(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quoteArray(types) + \");\");\n             }\n             return getResultSet(meta.getTables(catalogPattern, schemaPattern, tableNamePattern, types));\n         } catch (Exception e) {\n@@ -198,15 +204,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumns(String catalogPattern, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalogPattern, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumns(catalogPattern, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -247,15 +253,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getIndexInfo(String catalogPattern, String schemaPattern,\n-            String tableName, boolean unique, boolean approximate)\n-            throws SQLException {\n+    public ResultSet getIndexInfo(String catalogPattern, String schemaPattern, String tableName, boolean unique, boolean approximate) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getIndexInfo(\" + quote(catalogPattern) + \", \" +\n-                        quote(schemaPattern) + \", \" + quote(tableName) + \", \" +\n-                        unique + \", \" + approximate + \");\");\n+                debugCode(\"getIndexInfo(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableName) + \", \"\n+                + unique + \", \"\n+                + approximate + \");\");\n             }\n             return getResultSet(meta.getIndexInfo(catalogPattern, schemaPattern, tableName, unique, approximate));\n         } catch (Exception e) {\n@@ -283,15 +290,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getPrimaryKeys(String catalogPattern,\n-            String schemaPattern, String tableName) throws SQLException {\n+        String schemaPattern, String tableName) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\");\");\n+                debugCode(\"getPrimaryKeys(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableName) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalogPattern, schemaPattern, tableName));\n         } catch (Exception e) {\n@@ -304,6 +311,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allProceduresAreCallable() {\n         debugCodeCall(\"allProceduresAreCallable\");\n@@ -315,6 +323,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allTablesAreSelectable() {\n         debugCodeCall(\"allTablesAreSelectable\");\n@@ -326,6 +335,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the url\n      */\n+\n     @Override\n     public String getURL() throws SQLException {\n         try {\n@@ -342,6 +352,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the user name\n      */\n+\n     @Override\n     public String getUserName() throws SQLException {\n         try {\n@@ -357,6 +368,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return if read only optimization is switched on\n      */\n+\n     @Override\n     public boolean isReadOnly() throws SQLException {\n         try {\n@@ -373,6 +385,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return false by default; true if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n         try {\n@@ -389,6 +402,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true by default; false if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n         try {\n@@ -405,6 +419,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtStart() {\n         debugCodeCall(\"nullsAreSortedAtStart\");\n@@ -416,6 +431,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtEnd() {\n         debugCodeCall(\"nullsAreSortedAtEnd\");\n@@ -427,6 +443,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the connection\n      */\n+\n     @Override\n     public Connection getConnection() {\n         debugCodeCall(\"getConnection\");\n@@ -459,15 +476,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedures(String catalogPattern, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+    public ResultSet getProcedures(String catalogPattern,\n+        String schemaPattern, String procedureNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedures(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                debugCode(\"getProcedures(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \");\");\n             }\n             return getResultSet(meta.getProcedures(catalogPattern, schemaPattern, procedureNamePattern));\n         } catch (Exception e) {\n@@ -516,20 +533,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedureColumns(String catalogPattern, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalogPattern, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedureColumns(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getProcedureColumns(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(\n-                    meta.getProcedureColumns(catalogPattern, schemaPattern, procedureNamePattern, columnNamePattern));\n+            return getResultSet(meta.getProcedureColumns(catalogPattern, schemaPattern, procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -548,6 +563,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getSchemas() throws SQLException {\n         try {\n@@ -569,6 +585,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the catalog list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getCatalogs() throws SQLException {\n         try {\n@@ -589,6 +606,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the table types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTableTypes() throws SQLException {\n         try {\n@@ -625,17 +643,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumnPrivileges(String catalogPattern,\n-            String schemaPattern, String table, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getColumnPrivileges(String catalogPattern, String schemaPattern, String table, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumnPrivileges(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(table) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumnPrivileges(catalogPattern, schemaPattern, table, columnNamePattern));\n         } catch (Exception e) {\n@@ -667,15 +683,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTablePrivileges(String catalogPattern,\n-            String schemaPattern, String tableNamePattern) throws SQLException {\n+        String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTablePrivileges(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getTablePrivileges(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(meta.getTablePrivileges(catalogPattern, schemaPattern, tableNamePattern));\n@@ -709,16 +725,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalogPattern, String schemaPattern, String tableName, int scope,\n-            boolean nullable) throws SQLException {\n+    public ResultSet getBestRowIdentifier(String catalogPattern, String schemaPattern, String tableName, int scope, boolean nullable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                debugCode(\"getBestRowIdentifier(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableName) + \", \"\n+                + scope + \", \"\n+                + nullable + \");\");\n             }\n             return getResultSet(meta.getBestRowIdentifier(catalogPattern, schemaPattern, tableName, scope, nullable));\n         } catch (Exception e) {\n@@ -748,15 +764,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getVersionColumns(String catalog, String schema,\n-            String tableName) throws SQLException {\n+    public ResultSet getVersionColumns(String catalog, String schema, String tableName) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(tableName)+\");\");\n+                debugCode(\"getVersionColumns(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(tableName) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, tableName));\n         } catch (Exception e) {\n@@ -795,15 +810,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getImportedKeys(String catalogPattern,\n-            String schemaPattern, String tableName) throws SQLException {\n+        String schemaPattern, String tableName) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getImportedKeys(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\");\");\n+                debugCode(\"getImportedKeys(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableName) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalogPattern, schemaPattern, tableName));\n         } catch (Exception e) {\n@@ -842,15 +857,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getExportedKeys(String catalogPattern,\n-            String schemaPattern, String tableName) throws SQLException {\n+        String schemaPattern, String tableName) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getExportedKeys(\"\n-                        +quote(catalogPattern)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableName)+\");\");\n+                debugCode(\"getExportedKeys(\" + quote(catalogPattern) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableName) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalogPattern, schemaPattern, tableName));\n         } catch (Exception e) {\n@@ -895,22 +910,19 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalogPattern,\n-            String primarySchemaPattern, String primaryTable, String foreignCatalogPattern,\n-            String foreignSchemaPattern, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalogPattern, String primarySchemaPattern, String primaryTable, String foreignCatalogPattern, String foreignSchemaPattern, String foreignTable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalogPattern)+\", \"\n-                        +quote(primarySchemaPattern)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalogPattern)+\", \"\n-                        +quote(foreignSchemaPattern)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                debugCode(\"getCrossReference(\" + quote(primaryCatalogPattern) + \", \"\n+                + quote(primarySchemaPattern) + \", \"\n+                + quote(primaryTable) + \", \"\n+                + quote(foreignCatalogPattern) + \", \"\n+                + quote(foreignSchemaPattern) + \", \"\n+                + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalogPattern, primarySchemaPattern, primaryTable,\n-                    foreignCatalogPattern, foreignSchemaPattern, foreignTable));\n+            return getResultSet(meta.getCrossReference(primaryCatalogPattern, primarySchemaPattern, primaryTable, foreignCatalogPattern, foreignSchemaPattern, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -937,16 +949,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                debugCode(\"getUDTs(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quoteIntArray(types) + \");\");\n             }\n             return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n         } catch (Exception e) {\n@@ -983,6 +994,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of data types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTypeInfo() throws SQLException {\n         try {\n@@ -998,6 +1010,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean usesLocalFiles() {\n         debugCodeCall(\"usesLocalFiles\");\n@@ -1009,6 +1022,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean usesLocalFilePerTable() {\n         debugCodeCall(\"usesLocalFilePerTable\");\n@@ -1020,6 +1034,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a double quote\n      */\n+\n     @Override\n     public String getIdentifierQuoteString() {\n         debugCodeCall(\"getIdentifierQuoteString\");\n@@ -1032,6 +1047,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a list of additional the keywords\n      */\n+\n     @Override\n     public String getSQLKeywords() throws SQLException {\n         try {\n@@ -1047,6 +1063,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getNumericFunctions() throws SQLException {\n         try {\n@@ -1062,6 +1079,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getStringFunctions() throws SQLException {\n         try {\n@@ -1077,6 +1095,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getSystemFunctions() throws SQLException {\n         try {\n@@ -1092,6 +1111,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getTimeDateFunctions() throws SQLException {\n         try {\n@@ -1109,6 +1129,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the default escape character (always '\\', independent on the\n      *         mode)\n      */\n+\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n         try {\n@@ -1125,6 +1146,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return an empty String (\"\")\n      */\n+\n     @Override\n     public String getExtraNameCharacters() {\n         debugCodeCall(\"getExtraNameCharacters\");\n@@ -1135,6 +1157,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether alter table with add column is supported.\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithAddColumn() {\n         debugCodeCall(\"supportsAlterTableWithAddColumn\");\n@@ -1146,6 +1169,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithDropColumn() {\n         debugCodeCall(\"supportsAlterTableWithDropColumn\");\n@@ -1157,6 +1181,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsColumnAliasing() {\n         debugCodeCall(\"supportsColumnAliasing\");\n@@ -1168,6 +1193,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean nullPlusNonNullIsNull() {\n         debugCodeCall(\"nullPlusNonNullIsNull\");\n@@ -1179,6 +1205,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert() {\n         debugCodeCall(\"supportsConvert\");\n@@ -1192,10 +1219,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param toType the target SQL type\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \"\n+            + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1205,6 +1234,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTableCorrelationNames() {\n         debugCodeCall(\"supportsTableCorrelationNames\");\n@@ -1217,6 +1247,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDifferentTableCorrelationNames() {\n         debugCodeCall(\"supportsDifferentTableCorrelationNames\");\n@@ -1228,6 +1259,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsExpressionsInOrderBy() {\n         debugCodeCall(\"supportsExpressionsInOrderBy\");\n@@ -1240,6 +1272,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOrderByUnrelated() {\n         debugCodeCall(\"supportsOrderByUnrelated\");\n@@ -1251,6 +1284,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupBy() {\n         debugCodeCall(\"supportsGroupBy\");\n@@ -1263,6 +1297,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByUnrelated() {\n         debugCodeCall(\"supportsGroupByUnrelated\");\n@@ -1276,6 +1311,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByBeyondSelect() {\n         debugCodeCall(\"supportsGroupByBeyondSelect\");\n@@ -1287,6 +1323,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLikeEscapeClause() {\n         debugCodeCall(\"supportsLikeEscapeClause\");\n@@ -1298,6 +1335,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsMultipleResultSets() {\n         debugCodeCall(\"supportsMultipleResultSets\");\n@@ -1310,6 +1348,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleTransactions() {\n         debugCodeCall(\"supportsMultipleTransactions\");\n@@ -1321,6 +1360,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsNonNullableColumns() {\n         debugCodeCall(\"supportsNonNullableColumns\");\n@@ -1332,6 +1372,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMinimumSQLGrammar() {\n         debugCodeCall(\"supportsMinimumSQLGrammar\");\n@@ -1343,6 +1384,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCoreSQLGrammar() {\n         debugCodeCall(\"supportsCoreSQLGrammar\");\n@@ -1354,6 +1396,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsExtendedSQLGrammar() {\n         debugCodeCall(\"supportsExtendedSQLGrammar\");\n@@ -1365,6 +1408,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsANSI92EntryLevelSQL() {\n         debugCodeCall(\"supportsANSI92EntryLevelSQL\");\n@@ -1376,6 +1420,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92IntermediateSQL() {\n         debugCodeCall(\"supportsANSI92IntermediateSQL\");\n@@ -1387,6 +1432,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92FullSQL() {\n         debugCodeCall(\"supportsANSI92FullSQL\");\n@@ -1398,6 +1444,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsIntegrityEnhancementFacility() {\n         debugCodeCall(\"supportsIntegrityEnhancementFacility\");\n@@ -1409,6 +1456,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOuterJoins() {\n         debugCodeCall(\"supportsOuterJoins\");\n@@ -1420,6 +1468,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsFullOuterJoins() {\n         debugCodeCall(\"supportsFullOuterJoins\");\n@@ -1431,6 +1480,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLimitedOuterJoins() {\n         debugCodeCall(\"supportsLimitedOuterJoins\");\n@@ -1442,6 +1492,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"schema\"\n      */\n+\n     @Override\n     public String getSchemaTerm() {\n         debugCodeCall(\"getSchemaTerm\");\n@@ -1453,6 +1504,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"procedure\"\n      */\n+\n     @Override\n     public String getProcedureTerm() {\n         debugCodeCall(\"getProcedureTerm\");\n@@ -1464,6 +1516,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"catalog\"\n      */\n+\n     @Override\n     public String getCatalogTerm() {\n         debugCodeCall(\"getCatalogTerm\");\n@@ -1475,6 +1528,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean isCatalogAtStart() {\n         debugCodeCall(\"isCatalogAtStart\");\n@@ -1486,6 +1540,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \".\"\n      */\n+\n     @Override\n     public String getCatalogSeparator() {\n         debugCodeCall(\"getCatalogSeparator\");\n@@ -1497,6 +1552,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInDataManipulation() {\n         debugCodeCall(\"supportsSchemasInDataManipulation\");\n@@ -1508,6 +1564,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInProcedureCalls() {\n         debugCodeCall(\"supportsSchemasInProcedureCalls\");\n@@ -1519,6 +1576,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInTableDefinitions() {\n         debugCodeCall(\"supportsSchemasInTableDefinitions\");\n@@ -1530,6 +1588,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInIndexDefinitions() {\n         debugCodeCall(\"supportsSchemasInIndexDefinitions\");\n@@ -1541,6 +1600,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsSchemasInPrivilegeDefinitions\");\n@@ -1552,6 +1612,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInDataManipulation() {\n         debugCodeCall(\"supportsCatalogsInDataManipulation\");\n@@ -1563,6 +1624,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsCatalogsInProcedureCalls() {\n         debugCodeCall(\"supportsCatalogsInProcedureCalls\");\n@@ -1574,6 +1636,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInTableDefinitions() {\n         debugCodeCall(\"supportsCatalogsInTableDefinitions\");\n@@ -1585,6 +1648,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInIndexDefinitions() {\n         debugCodeCall(\"supportsCatalogsInIndexDefinitions\");\n@@ -1596,6 +1660,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsCatalogsInPrivilegeDefinitions\");\n@@ -1607,6 +1672,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedDelete() {\n         debugCodeCall(\"supportsPositionedDelete\");\n@@ -1618,6 +1684,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedUpdate() {\n         debugCodeCall(\"supportsPositionedUpdate\");\n@@ -1629,6 +1696,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSelectForUpdate() {\n         debugCodeCall(\"supportsSelectForUpdate\");\n@@ -1640,6 +1708,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStoredProcedures() {\n         debugCodeCall(\"supportsStoredProcedures\");\n@@ -1651,6 +1720,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInComparisons() {\n         debugCodeCall(\"supportsSubqueriesInComparisons\");\n@@ -1662,6 +1732,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInExists() {\n         debugCodeCall(\"supportsSubqueriesInExists\");\n@@ -1673,6 +1744,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInIns() {\n         debugCodeCall(\"supportsSubqueriesInIns\");\n@@ -1684,6 +1756,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInQuantifieds() {\n         debugCodeCall(\"supportsSubqueriesInQuantifieds\");\n@@ -1695,6 +1768,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCorrelatedSubqueries() {\n         debugCodeCall(\"supportsCorrelatedSubqueries\");\n@@ -1706,6 +1780,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnion() {\n         debugCodeCall(\"supportsUnion\");\n@@ -1717,6 +1792,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnionAll() {\n         debugCodeCall(\"supportsUnionAll\");\n@@ -1728,6 +1804,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossCommit() {\n         debugCodeCall(\"supportsOpenCursorsAcrossCommit\");\n@@ -1739,6 +1816,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossRollback() {\n         debugCodeCall(\"supportsOpenCursorsAcrossRollback\");\n@@ -1750,6 +1828,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossCommit() {\n         debugCodeCall(\"supportsOpenStatementsAcrossCommit\");\n@@ -1761,6 +1840,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossRollback() {\n         debugCodeCall(\"supportsOpenStatementsAcrossRollback\");\n@@ -1772,6 +1852,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactions() {\n         debugCodeCall(\"supportsTransactions\");\n@@ -1784,6 +1865,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param level the transaction isolation level (Connection.TRANSACTION_*)\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n@@ -1805,6 +1887,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDataDefinitionAndDataManipulationTransactions() {\n         debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n@@ -1816,6 +1899,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsDataManipulationTransactionsOnly() {\n         debugCodeCall(\"supportsDataManipulationTransactionsOnly\");\n@@ -1827,6 +1911,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean dataDefinitionCausesTransactionCommit() {\n         debugCodeCall(\"dataDefinitionCausesTransactionCommit\");\n@@ -1838,6 +1923,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean dataDefinitionIgnoredInTransactions() {\n         debugCodeCall(\"dataDefinitionIgnoredInTransactions\");\n@@ -1851,6 +1937,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true for all types except ResultSet.TYPE_FORWARD_ONLY\n      */\n+\n     @Override\n     public boolean supportsResultSetType(int type) {\n         debugCodeCall(\"supportsResultSetType\", type);\n@@ -1865,10 +1952,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n+\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \"\n+            + concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -1879,6 +1968,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true\n      */\n+\n     @Override\n     public boolean ownUpdatesAreVisible(int type) {\n         debugCodeCall(\"ownUpdatesAreVisible\", type);\n@@ -1891,6 +1981,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownDeletesAreVisible(int type) {\n         debugCodeCall(\"ownDeletesAreVisible\", type);\n@@ -1903,6 +1994,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownInsertsAreVisible(int type) {\n         debugCodeCall(\"ownInsertsAreVisible\", type);\n@@ -1915,6 +2007,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersUpdatesAreVisible(int type) {\n         debugCodeCall(\"othersUpdatesAreVisible\", type);\n@@ -1927,6 +2020,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersDeletesAreVisible(int type) {\n         debugCodeCall(\"othersDeletesAreVisible\", type);\n@@ -1939,6 +2033,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersInsertsAreVisible(int type) {\n         debugCodeCall(\"othersInsertsAreVisible\", type);\n@@ -1951,6 +2046,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean updatesAreDetected(int type) {\n         debugCodeCall(\"updatesAreDetected\", type);\n@@ -1963,6 +2059,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean deletesAreDetected(int type) {\n         debugCodeCall(\"deletesAreDetected\", type);\n@@ -1975,6 +2072,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean insertsAreDetected(int type) {\n         debugCodeCall(\"insertsAreDetected\", type);\n@@ -1986,6 +2084,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsBatchUpdates() {\n         debugCodeCall(\"supportsBatchUpdates\");\n@@ -1997,6 +2096,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean doesMaxRowSizeIncludeBlobs() {\n         debugCodeCall(\"doesMaxRowSizeIncludeBlobs\");\n@@ -2008,6 +2108,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return Connection.TRANSACTION_READ_COMMITTED\n      */\n+\n     @Override\n     public int getDefaultTransactionIsolation() {\n         debugCodeCall(\"getDefaultTransactionIsolation\");\n@@ -2020,8 +2121,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2033,6 +2135,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesUpperCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseIdentifiers\");\n@@ -2045,6 +2148,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesLowerCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseIdentifiers\");\n@@ -2057,6 +2161,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n@@ -2070,6 +2175,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseQuotedIdentifiers\");\n@@ -2082,6 +2188,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n@@ -2094,6 +2201,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseQuotedIdentifiers\");\n@@ -2106,6 +2214,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseQuotedIdentifiers\");\n@@ -2117,6 +2226,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxBinaryLiteralLength() {\n         debugCodeCall(\"getMaxBinaryLiteralLength\");\n@@ -2128,6 +2238,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCharLiteralLength() {\n         debugCodeCall(\"getMaxCharLiteralLength\");\n@@ -2139,6 +2250,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnNameLength() {\n         debugCodeCall(\"getMaxColumnNameLength\");\n@@ -2150,6 +2262,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInGroupBy() {\n         debugCodeCall(\"getMaxColumnsInGroupBy\");\n@@ -2161,6 +2274,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInIndex() {\n         debugCodeCall(\"getMaxColumnsInIndex\");\n@@ -2172,6 +2286,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInOrderBy() {\n         debugCodeCall(\"getMaxColumnsInOrderBy\");\n@@ -2183,6 +2298,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInSelect() {\n         debugCodeCall(\"getMaxColumnsInSelect\");\n@@ -2194,6 +2310,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInTable() {\n         debugCodeCall(\"getMaxColumnsInTable\");\n@@ -2205,6 +2322,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxConnections() {\n         debugCodeCall(\"getMaxConnections\");\n@@ -2216,6 +2334,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCursorNameLength() {\n         debugCodeCall(\"getMaxCursorNameLength\");\n@@ -2227,6 +2346,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxIndexLength() {\n         debugCodeCall(\"getMaxIndexLength\");\n@@ -2238,6 +2358,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxSchemaNameLength() {\n         debugCodeCall(\"getMaxSchemaNameLength\");\n@@ -2249,6 +2370,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxProcedureNameLength() {\n         debugCodeCall(\"getMaxProcedureNameLength\");\n@@ -2260,6 +2382,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCatalogNameLength() {\n         debugCodeCall(\"getMaxCatalogNameLength\");\n@@ -2271,6 +2394,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxRowSize() {\n         debugCodeCall(\"getMaxRowSize\");\n@@ -2282,6 +2406,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatementLength() {\n         debugCodeCall(\"getMaxStatementLength\");\n@@ -2293,6 +2418,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatements() {\n         debugCodeCall(\"getMaxStatements\");\n@@ -2304,6 +2430,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTableNameLength() {\n         debugCodeCall(\"getMaxTableNameLength\");\n@@ -2315,6 +2442,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTablesInSelect() {\n         debugCodeCall(\"getMaxTablesInSelect\");\n@@ -2326,6 +2454,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxUserNameLength() {\n         debugCodeCall(\"getMaxUserNameLength\");\n@@ -2337,6 +2466,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSavepoints() {\n         debugCodeCall(\"supportsSavepoints\");\n@@ -2348,6 +2478,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsNamedParameters() {\n         debugCodeCall(\"supportsNamedParameters\");\n@@ -2359,6 +2490,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleOpenResults() {\n         debugCodeCall(\"supportsMultipleOpenResults\");\n@@ -2370,6 +2502,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGetGeneratedKeys() {\n         debugCodeCall(\"supportsGetGeneratedKeys\");\n@@ -2379,14 +2512,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n     public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                debugCode(\"getSuperTypes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n         } catch (Exception e) {\n@@ -2411,15 +2544,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            (uppercase for unquoted names)\n      * @return an empty result set\n      */\n+\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getSuperTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n         } catch (Exception e) {\n@@ -2430,16 +2562,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                debugCode(\"getAttributes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quote(attributeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n         } catch (Exception e) {\n@@ -2454,6 +2585,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public boolean supportsResultSetHoldability(int holdability) {\n         debugCodeCall(\"supportsResultSetHoldability\", holdability);\n@@ -2465,6 +2597,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public int getResultSetHoldability() {\n         debugCodeCall(\"getResultSetHoldability\");\n@@ -2476,6 +2609,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version\n      */\n+\n     @Override\n     public int getDatabaseMajorVersion() throws SQLException {\n         try {\n@@ -2491,6 +2625,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version\n      */\n+\n     @Override\n     public int getDatabaseMinorVersion() throws SQLException {\n         try {\n@@ -2506,6 +2641,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version (4)\n      */\n+\n     @Override\n     public int getJDBCMajorVersion() {\n         debugCodeCall(\"getJDBCMajorVersion\");\n@@ -2517,6 +2653,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version (2)\n      */\n+\n     @Override\n     public int getJDBCMinorVersion() {\n         debugCodeCall(\"getJDBCMinorVersion\");\n@@ -2528,6 +2665,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return {@link DatabaseMetaData#sqlStateSQL}\n      */\n+\n     @Override\n     public int getSQLStateType() {\n         debugCodeCall(\"getSQLStateType\");\n@@ -2539,6 +2677,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean locatorsUpdateCopy() {\n         debugCodeCall(\"locatorsUpdateCopy\");\n@@ -2550,6 +2689,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStatementPooling() {\n         debugCodeCall(\"supportsStatementPooling\");\n@@ -2567,6 +2707,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ROWID_UNSUPPORTED\n      */\n+\n     @Override\n     public RowIdLifetime getRowIdLifetime() {\n         debugCodeCall(\"getRowIdLifetime\");\n@@ -2589,9 +2730,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getSchemas(String catalogPattern, String schemaPattern)\n-            throws SQLException {\n+    public ResultSet getSchemas(String catalogPattern, String schemaPattern) throws SQLException {\n         try {\n             debugCodeCall(\"getSchemas(String,String)\");\n             return getResultSet(meta.getSchemas(catalogPattern, schemaPattern));\n@@ -2606,6 +2747,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsStoredFunctionsUsingCallSyntax() {\n         debugCodeCall(\"supportsStoredFunctionsUsingCallSyntax\");\n@@ -2618,6 +2760,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean autoCommitFailureClosesAllResultSets() {\n         debugCodeCall(\"autoCommitFailureClosesAllResultSets\");\n@@ -2635,12 +2778,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE), ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                                         \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2651,6 +2794,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return this\n      */\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T unwrap(Class<T> iface) throws SQLException {\n@@ -2670,6 +2814,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return whether or not the interface is assignable from this class\n      */\n+\n     @Override\n     public boolean isWrapperFor(Class<?> iface) throws SQLException {\n         return iface != null && iface.isAssignableFrom(getClass());\n@@ -2678,20 +2823,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of function columns.\n      */\n+\n     @Override\n-    public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getFunctionColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+            return getResultSet(meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2700,15 +2842,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of functions.\n      */\n+\n     @Override\n-    public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+    public ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                debugCode(\"getFunctions(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \");\");\n             }\n             return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n         } catch (Exception e) {\n@@ -2722,6 +2863,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean generatedKeyAlwaysReturned() {\n         return true;\n@@ -2738,16 +2880,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param columnNamePattern null (to get all objects) or a column name\n      *            (uppercase for unquoted names)\n      */\n+\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getPseudoColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -2758,13 +2899,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * INTERNAL\n      */\n+\n     @Override\n     public String toString() {\n         return getTraceObjectName() + \": \" + conn;\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn,\n+               null,\n+               null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 333
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/209/JdbcDatabaseMetaData.java\nindex ed886995b6d..294a0ddac68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/209/JdbcDatabaseMetaData.java\n@@ -2021,7 +2021,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/209/JdbcDatabaseMetaData.java\nindex ed886995b6d..294a0ddac68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/209/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/209/JdbcDatabaseMetaData.java\n@@ -2021,7 +2021,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}