{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4395",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4395/StageExecution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4395/StageExecution.java\nindex 6e3ae0cdf0f..eda316767fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4395/StageExecution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4395/StageExecution.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.util.ArrayList;\n@@ -40,191 +41,190 @@ import static org.neo4j.helpers.Exceptions.throwIfUnchecked;\n  */\n public class StageExecution implements StageControl, AutoCloseable\n {\n-    private final String stageName;\n-    private final String part;\n-    private final Configuration config;\n-    private final Collection<Step<?>> pipeline;\n-    private long startTime;\n-    private final int orderingGuarantees;\n-    private volatile Throwable panic;\n-    private final boolean shouldRecycle;\n-    private final ConcurrentLinkedQueue<Object> recycled;\n-\n-    public StageExecution( String stageName, String part, Configuration config, Collection<Step<?>> pipeline,\n-            int orderingGuarantees )\n-    {\n-        this.stageName = stageName;\n-        this.part = part;\n-        this.config = config;\n-        this.pipeline = pipeline;\n-        this.orderingGuarantees = orderingGuarantees;\n-        this.shouldRecycle = (orderingGuarantees & Step.RECYCLE_BATCHES) != 0;\n-        this.recycled = shouldRecycle ? new ConcurrentLinkedQueue<>() : null;\n-    }\n-\n-    public boolean stillExecuting()\n-    {\n-        for ( Step<?> step : pipeline )\n-        {\n-            if ( !step.isCompleted() )\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    public void start()\n-    {\n-        this.startTime = currentTimeMillis();\n-        for ( Step<?> step : pipeline )\n+  private final String stageName;\n+  private final String part;\n+  private final Configuration config;\n+  private final Collection<Step<?>> pipeline;\n+  private long startTime;\n+  private final int orderingGuarantees;\n+  private volatile Throwable panic;\n+  private final boolean shouldRecycle;\n+  private final ConcurrentLinkedQueue<Object> recycled;\n+\n+  public StageExecution(String stageName, String part, Configuration config, Collection<Step<?>> pipeline,\n+                        int orderingGuarantees)\n+  {\n+    this.stageName = stageName;\n+    this.part = part;\n+    this.config = config;\n+    this.pipeline = pipeline;\n+    this.orderingGuarantees = orderingGuarantees;\n+    this.shouldRecycle = (orderingGuarantees & Step.RECYCLE_BATCHES) != 0;\n+    this.recycled = shouldRecycle ? new ConcurrentLinkedQueue<>() : null;\n+  }\n+\n+  public boolean stillExecuting()\n+  {\n+    for (Step<?> step : pipeline)\n+    {\n+      if (!step.isCompleted())\n+      {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  public void start()\n+  {\n+    this.startTime = currentTimeMillis();\n+    for (Step<?> step : pipeline)\n+    {\n+      step.start(orderingGuarantees);\n+    }\n+  }\n+\n+  public long getExecutionTime()\n+  {\n+    return currentTimeMillis() - startTime;\n+  }\n+\n+  public String getStageName()\n+  {\n+    return stageName;\n+  }\n+\n+  public String name()\n+  {\n+    return stageName + (part != null ? part : \"\");\n+  }\n+\n+  public Configuration getConfig()\n+  {\n+    return config;\n+  }\n+\n+  public Iterable<Step<?>> steps()\n+  {\n+    return pipeline;\n+  }\n+\n+  /**\n+   * @param stat             statistics {@link Key}.\n+   * @param trueForAscending {@code true} for ordering by ascending, otherwise descending.\n+   * @return the steps ordered by the {@link Stat#asLong() long value representation} of the given\n+   * {@code stat} accompanied a factor by how it compares to the next value, where a value close to\n+   * {@code 1.0} signals them being close to equal, and a value of for example {@code 0.5} signals that\n+   * the value of the current step is half that of the next step.\n+   */\n+  public Iterable<Pair<Step<?>, Float>> stepsOrderedBy(final Key stat, final boolean trueForAscending)\n+  {\n+    final List<Step<?>> steps = new ArrayList<>(pipeline);\n+    steps.sort((o1, o2) -> {\n+      Long stat1 = o1.stats().stat(stat).asLong();\n+      Long stat2 = o2.stats().stat(stat).asLong();\n+      return trueForAscending ? stat1.compareTo(stat2) : stat2.compareTo(stat1);\n+    });\n+\n+    return () -> new PrefetchingIterator<Pair<Step<?>, Float>>()\n+    {\n+      private final Iterator<Step<?>> source = steps.iterator();\n+      private Step<?> next = source.hasNext() ? source.next() : null;\n+\n+      @Override\n+      protected Pair<Step<?>, Float> fetchNextOrNull()\n+      {\n+        if (next == null)\n         {\n-            step.start( orderingGuarantees );\n+          return null;\n         }\n-    }\n-\n-    public long getExecutionTime()\n-    {\n-        return currentTimeMillis() - startTime;\n-    }\n-\n-    public String getStageName()\n-    {\n-        return stageName;\n-    }\n-\n-    public String name()\n-    {\n-        return stageName + (part != null ? part : \"\");\n-    }\n-\n-    public Configuration getConfig()\n-    {\n-        return config;\n-    }\n-\n-    public Iterable<Step<?>> steps()\n-    {\n-        return pipeline;\n-    }\n-\n-    /**\n-     * @param stat statistics {@link Key}.\n-     * @param trueForAscending {@code true} for ordering by ascending, otherwise descending.\n-     * @return the steps ordered by the {@link Stat#asLong() long value representation} of the given\n-     * {@code stat} accompanied a factor by how it compares to the next value, where a value close to\n-     * {@code 1.0} signals them being close to equal, and a value of for example {@code 0.5} signals that\n-     * the value of the current step is half that of the next step.\n-     */\n-    public Iterable<Pair<Step<?>,Float>> stepsOrderedBy( final Key stat, final boolean trueForAscending )\n-    {\n-        final List<Step<?>> steps = new ArrayList<>( pipeline );\n-        steps.sort( ( o1, o2 ) -> {\n-            Long stat1 = o1.stats().stat( stat ).asLong();\n-            Long stat2 = o2.stats().stat( stat ).asLong();\n-            return trueForAscending ? stat1.compareTo( stat2 ) : stat2.compareTo( stat1 );\n-        } );\n-\n-        return () -> new PrefetchingIterator<Pair<Step<?>,Float>>()\n-        {\n-            private final Iterator<Step<?>> source = steps.iterator();\n-            private Step<?> next = source.hasNext() ? source.next() : null;\n-\n-            @Override\n-            protected Pair<Step<?>,Float> fetchNextOrNull()\n-            {\n-                if ( next == null )\n-                {\n-                    return null;\n-                }\n-\n-                Step<?> current = next;\n-                next = source.hasNext() ? source.next() : null;\n-                float factor = next != null\n-                        ? (float) stat( current, stat ) / (float) stat( next, stat )\n-                        : 1.0f;\n-                return Pair.of( current, factor );\n-            }\n-\n-            private long stat( Step<?> step, Key stat12 )\n-            {\n-                return step.stats().stat( stat12 ).asLong();\n-            }\n-        };\n-    }\n \n-    public int size()\n-    {\n-        return pipeline.size();\n-    }\n-\n-    @Override\n-    public synchronized void panic( Throwable cause )\n-    {\n-        if ( panic == null )\n-        {\n-            panic = cause;\n-            for ( Step<?> step : pipeline )\n-            {\n-                step.receivePanic( cause );\n-            }\n-        }\n-        else\n-        {\n-            if ( !panic.equals( cause ) )\n-            {\n-                panic.addSuppressed( cause );\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void assertHealthy()\n-    {\n-        if ( panic != null )\n-        {\n-            throwIfUnchecked( panic );\n-            throw new RuntimeException( panic );\n-        }\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return getClass().getSimpleName() + \"[\" + name() + \"]\";\n-    }\n-\n-    @Override\n-    public void recycle( Object batch )\n-    {\n-        if ( shouldRecycle )\n-        {\n-            recycled.offer( batch );\n-        }\n-    }\n-\n-    @Override\n-    public <T> T reuse( Supplier<T> fallback )\n-    {\n-        if ( shouldRecycle )\n-        {\n-            @SuppressWarnings( \"unchecked\" )\n-            T result = (T) recycled.poll();\n-            if ( result != null )\n-            {\n-                return result;\n-            }\n-        }\n-\n-        return fallback.get();\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        if ( shouldRecycle )\n-        {\n-            recycled.clear();\n-        }\n-    }\n+        Step<?> current = next;\n+        next = source.hasNext() ? source.next() : null;\n+        float factor = next != null\n+            ? (float) stat(current, stat) / (float) stat(next, stat)\n+            : 1.0f;\n+        return Pair.of(current, factor);\n+      }\n+\n+      private long stat(Step<?> step, Key stat12)\n+      {\n+        return step.stats().stat(stat12).asLong();\n+      }\n+    };\n+  }\n+\n+  public int size()\n+  {\n+    return pipeline.size();\n+  }\n+\n+  @Override\n+  public synchronized void panic(Throwable cause)\n+  {\n+    if (panic == null)\n+    {\n+      panic = cause;\n+      for (Step<?> step : pipeline)\n+      {\n+        step.receivePanic(cause);\n+      }\n+    } else\n+    {\n+      if (!panic.equals(cause))\n+      {\n+        panic.addSuppressed(cause);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void assertHealthy()\n+  {\n+    if (panic != null)\n+    {\n+      throwIfUnchecked(panic);\n+      throw new RuntimeException(panic);\n+    }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[\" + name() + \"]\";\n+  }\n+\n+  @Override\n+  public void recycle(Object batch)\n+  {\n+    if (shouldRecycle)\n+    {\n+      recycled.offer(batch);\n+    }\n+  }\n+\n+  @Override\n+  public <T> T reuse(Supplier<T> fallback)\n+  {\n+    if (shouldRecycle)\n+    {\n+      @SuppressWarnings(\"unchecked\")\n+      T result = (T) recycled.poll();\n+      if (result != null)\n+      {\n+        return result;\n+      }\n+    }\n+\n+    return fallback.get();\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    if (shouldRecycle)\n+    {\n+      recycled.clear();\n+    }\n+  }\n }\n",
            "diff_size": 255
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4395/StageExecution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4395/StageExecution.java\nindex 6e3ae0cdf0f..31b2984082c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4395/StageExecution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4395/StageExecution.java\n@@ -50,8 +50,7 @@ public class StageExecution implements StageControl, AutoCloseable\n     private final boolean shouldRecycle;\n     private final ConcurrentLinkedQueue<Object> recycled;\n \n-    public StageExecution( String stageName, String part, Configuration config, Collection<Step<?>> pipeline,\n-            int orderingGuarantees )\n+    public StageExecution( String stageName, String part, Configuration config, Collection<Step<?>> pipeline, int orderingGuarantees )\n     {\n         this.stageName = stageName;\n         this.part = part;\n@@ -95,7 +94,7 @@ public class StageExecution implements StageControl, AutoCloseable\n \n     public String name()\n     {\n-        return stageName + (part != null ? part : \"\");\n+        return stageName + (part != null ? part : \"\" );\n     }\n \n     public Configuration getConfig()\n@@ -119,13 +118,13 @@ public class StageExecution implements StageControl, AutoCloseable\n     public Iterable<Pair<Step<?>,Float>> stepsOrderedBy( final Key stat, final boolean trueForAscending )\n     {\n         final List<Step<?>> steps = new ArrayList<>( pipeline );\n-        steps.sort( ( o1, o2 ) -> {\n+        steps.sort( ( o1, o2 ) ->\n+{\n             Long stat1 = o1.stats().stat( stat ).asLong();\n             Long stat2 = o2.stats().stat( stat ).asLong();\n             return trueForAscending ? stat1.compareTo( stat2 ) : stat2.compareTo( stat1 );\n         } );\n-\n-        return () -> new PrefetchingIterator<Pair<Step<?>,Float>>()\n+return () -> new PrefetchingIterator<Pair<Step<?>,Float>>()\n         {\n             private final Iterator<Step<?>> source = steps.iterator();\n             private Step<?> next = source.hasNext() ? source.next() : null;\n@@ -140,10 +139,8 @@ public class StageExecution implements StageControl, AutoCloseable\n \n                 Step<?> current = next;\n                 next = source.hasNext() ? source.next() : null;\n-                float factor = next != null\n-                        ? (float) stat( current, stat ) / (float) stat( next, stat )\n-                        : 1.0f;\n-                return Pair.of( current, factor );\n+                float factor = next != null ? (float) stat( current, stat ) / (float) stat( next, stat ) : 1.0f;\n+return Pair.of( current, factor );\n             }\n \n             private long stat( Step<?> step, Key stat12 )\n@@ -227,4 +224,4 @@ public class StageExecution implements StageControl, AutoCloseable\n             recycled.clear();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "50",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "66",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "66",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "68",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4395/StageExecution.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4395/StageExecution.java\nindex 6e3ae0cdf0f..4cf855442f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4395/StageExecution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4395/StageExecution.java\n@@ -25,19 +25,19 @@ import java.util.Iterator;\n import java.util.List;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.function.Supplier;\n-\n import org.neo4j.helpers.collection.Pair;\n import org.neo4j.helpers.collection.PrefetchingIterator;\n import org.neo4j.unsafe.impl.batchimport.Configuration;\n import org.neo4j.unsafe.impl.batchimport.stats.Key;\n import org.neo4j.unsafe.impl.batchimport.stats.Stat;\n-\n import static java.lang.System.currentTimeMillis;\n+\n import static org.neo4j.helpers.Exceptions.throwIfUnchecked;\n \n /**\n  * Default implementation of {@link StageControl}\n  */\n+\n public class StageExecution implements StageControl, AutoCloseable\n {\n     private final String stageName;\n@@ -50,34 +50,34 @@ public class StageExecution implements StageControl, AutoCloseable\n     private final boolean shouldRecycle;\n     private final ConcurrentLinkedQueue<Object> recycled;\n \n-    public StageExecution( String stageName, String part, Configuration config, Collection<Step<?>> pipeline,\n-            int orderingGuarantees )\n+    public StageExecution( String stageName, String part, Configuration config, Collection<Step<?>> pipeline, int orderingGuarantees )\n     {\n         this.stageName = stageName;\n         this.part = part;\n         this.config = config;\n         this.pipeline = pipeline;\n         this.orderingGuarantees = orderingGuarantees;\n-        this.shouldRecycle = (orderingGuarantees & Step.RECYCLE_BATCHES) != 0;\n+        this.shouldRecycle = ( orderingGuarantees& Step.RECYCLE_BATCHES) != 0;\n         this.recycled = shouldRecycle ? new ConcurrentLinkedQueue<>() : null;\n     }\n \n     public boolean stillExecuting()\n     {\n-        for ( Step<?> step : pipeline )\n+        for( Step<?> step : pipeline)\n         {\n-            if ( !step.isCompleted() )\n+            if ( ! step.isCompleted() )\n             {\n                 return true;\n             }\n         }\n+\n         return false;\n     }\n \n     public void start()\n     {\n         this.startTime = currentTimeMillis();\n-        for ( Step<?> step : pipeline )\n+        for( Step<?> step : pipeline)\n         {\n             step.start( orderingGuarantees );\n         }\n@@ -95,7 +95,7 @@ public class StageExecution implements StageControl, AutoCloseable\n \n     public String name()\n     {\n-        return stageName + (part != null ? part : \"\");\n+        return stageName + ( part != null ? part : \"\");\n     }\n \n     public Configuration getConfig()\n@@ -116,41 +116,39 @@ public class StageExecution implements StageControl, AutoCloseable\n      * {@code 1.0} signals them being close to equal, and a value of for example {@code 0.5} signals that\n      * the value of the current step is half that of the next step.\n      */\n+\n     public Iterable<Pair<Step<?>,Float>> stepsOrderedBy( final Key stat, final boolean trueForAscending )\n     {\n         final List<Step<?>> steps = new ArrayList<>( pipeline );\n-        steps.sort( ( o1, o2 ) -> {\n-            Long stat1 = o1.stats().stat( stat ).asLong();\n-            Long stat2 = o2.stats().stat( stat ).asLong();\n-            return trueForAscending ? stat1.compareTo( stat2 ) : stat2.compareTo( stat1 );\n-        } );\n-\n+        steps.sort( ( o1, o2 ) ->\n+                    {\n+                        Long stat1 = o1.stats().stat( stat ).asLong();\n+                        Long stat2 = o2.stats().stat( stat ).asLong();\n+                        return trueForAscending ? stat1.compareTo( stat2 ) : stat2.compareTo( stat1 );\n+                    } );\n         return () -> new PrefetchingIterator<Pair<Step<?>,Float>>()\n+{\n+    private final Iterator<Step<?>> source = steps.iterator();\n+    private Step<?> next = source.hasNext() ? source.next() : null;\n+    @Override\n+    protected Pair<Step<?>,Float> fetchNextOrNull()\n+    {\n+        if ( next == null )\n         {\n-            private final Iterator<Step<?>> source = steps.iterator();\n-            private Step<?> next = source.hasNext() ? source.next() : null;\n+            return null;\n+        }\n \n-            @Override\n-            protected Pair<Step<?>,Float> fetchNextOrNull()\n-            {\n-                if ( next == null )\n-                {\n-                    return null;\n-                }\n-\n-                Step<?> current = next;\n-                next = source.hasNext() ? source.next() : null;\n-                float factor = next != null\n-                        ? (float) stat( current, stat ) / (float) stat( next, stat )\n-                        : 1.0f;\n-                return Pair.of( current, factor );\n-            }\n+        Step<?> current = next;\n+        next = source.hasNext() ? source.next() : null;\n+        float factor = next != null ? (float) stat( current, stat )/ (float) stat( next, stat ) : 1.0f;\n+        return Pair.of( current, factor );\n+    }\n \n-            private long stat( Step<?> step, Key stat12 )\n-            {\n-                return step.stats().stat( stat12 ).asLong();\n-            }\n-        };\n+    private long stat( Step<?> step, Key stat12 )\n+    {\n+        return step.stats().stat( stat12 ).asLong();\n+    }\n+};\n     }\n \n     public int size()\n@@ -164,14 +162,14 @@ public class StageExecution implements StageControl, AutoCloseable\n         if ( panic == null )\n         {\n             panic = cause;\n-            for ( Step<?> step : pipeline )\n+            for( Step<?> step : pipeline)\n             {\n                 step.receivePanic( cause );\n             }\n         }\n         else\n         {\n-            if ( !panic.equals( cause ) )\n+            if ( ! panic.equals( cause ) )\n             {\n                 panic.addSuppressed( cause );\n             }\n@@ -208,8 +206,7 @@ public class StageExecution implements StageControl, AutoCloseable\n     {\n         if ( shouldRecycle )\n         {\n-            @SuppressWarnings( \"unchecked\" )\n-            T result = (T) recycled.poll();\n+            @ SuppressWarnings( \"unchecked\") T result = (T) recycled.poll();\n             if ( result != null )\n             {\n                 return result;\n@@ -227,4 +224,4 @@ public class StageExecution implements StageControl, AutoCloseable\n             recycled.clear();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}