{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1626",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1626/AllowedTypesValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1626/AllowedTypesValidator.java\nindex 7860f229087..a10d1a0ac91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1626/AllowedTypesValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1626/AllowedTypesValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.validators;\n \n import java.util.Collection;\n@@ -37,96 +38,96 @@ import org.neo4j.tooling.procedure.compilerutils.TypeMirrorUtils;\n public class AllowedTypesValidator implements Predicate<TypeMirror>\n {\n \n-    private final TypeMirrorUtils typeMirrors;\n-    private final Collection<TypeMirror> whitelistedTypes;\n-    private final Types typeUtils;\n+  private final TypeMirrorUtils typeMirrors;\n+  private final Collection<TypeMirror> whitelistedTypes;\n+  private final Types typeUtils;\n \n-    public AllowedTypesValidator( TypeMirrorUtils typeMirrors, Types typeUtils )\n-    {\n+  public AllowedTypesValidator(TypeMirrorUtils typeMirrors, Types typeUtils)\n+  {\n \n-        this.typeMirrors = typeMirrors;\n-        this.whitelistedTypes = typeMirrors.procedureAllowedTypes();\n-        this.typeUtils = typeUtils;\n-    }\n+    this.typeMirrors = typeMirrors;\n+    this.whitelistedTypes = typeMirrors.procedureAllowedTypes();\n+    this.typeUtils = typeUtils;\n+  }\n \n-    @Override\n-    public boolean test( TypeMirror typeMirror )\n-    {\n-        TypeMirror erasedActualType = typeUtils.erasure( typeMirror );\n+  @Override\n+  public boolean test(TypeMirror typeMirror)\n+  {\n+    TypeMirror erasedActualType = typeUtils.erasure(typeMirror);\n \n-        return isValidErasedType( erasedActualType ) &&\n-                (!isSameErasedType( List.class, typeMirror ) || isValidListType( typeMirror )) &&\n-                (!isSameErasedType( Map.class, typeMirror ) || isValidMapType( typeMirror ));\n-    }\n+    return isValidErasedType(erasedActualType) &&\n+        (!isSameErasedType(List.class, typeMirror) || isValidListType(typeMirror)) &&\n+        (!isSameErasedType(Map.class, typeMirror) || isValidMapType(typeMirror));\n+  }\n \n-    private boolean isValidErasedType( TypeMirror actualType )\n+  private boolean isValidErasedType(TypeMirror actualType)\n+  {\n+    return whitelistedTypes.stream().anyMatch(type ->\n     {\n-        return whitelistedTypes.stream().anyMatch( type ->\n-        {\n-            TypeMirror erasedAllowedType = typeUtils.erasure( type );\n-\n-            TypeMirror map = typeUtils.erasure( typeMirrors.typeMirror( Map.class ) );\n-            TypeMirror list = typeUtils.erasure( typeMirrors.typeMirror( List.class ) );\n-            if ( typeUtils.isSameType( erasedAllowedType, map ) || typeUtils.isSameType( erasedAllowedType, list ) )\n-            {\n-                return typeUtils.isSubtype( actualType, erasedAllowedType );\n-            }\n-\n-            return typeUtils.isSameType( actualType, erasedAllowedType );\n-        } );\n-    }\n-\n-    /**\n-     * Recursively visits List type arguments\n-     *\n-     * @param typeMirror the List type mirror\n-     * @return true if the declaration is valid, false otherwise\n-     */\n-    private boolean isValidListType( TypeMirror typeMirror )\n+      TypeMirror erasedAllowedType = typeUtils.erasure(type);\n+\n+      TypeMirror map = typeUtils.erasure(typeMirrors.typeMirror(Map.class));\n+      TypeMirror list = typeUtils.erasure(typeMirrors.typeMirror(List.class));\n+      if (typeUtils.isSameType(erasedAllowedType, map) || typeUtils.isSameType(erasedAllowedType, list))\n+      {\n+        return typeUtils.isSubtype(actualType, erasedAllowedType);\n+      }\n+\n+      return typeUtils.isSameType(actualType, erasedAllowedType);\n+    });\n+  }\n+\n+  /**\n+   * Recursively visits List type arguments\n+   *\n+   * @param typeMirror the List type mirror\n+   * @return true if the declaration is valid, false otherwise\n+   */\n+  private boolean isValidListType(TypeMirror typeMirror)\n+  {\n+    return new SimpleTypeVisitor8<Boolean, Void>()\n     {\n-        return new SimpleTypeVisitor8<Boolean,Void>()\n-        {\n-            @Override\n-            public Boolean visitDeclared( DeclaredType list, Void aVoid )\n-            {\n-                List<? extends TypeMirror> typeArguments = list.getTypeArguments();\n-                return typeArguments.size() == 1 && test( typeArguments.get( 0 ) );\n-            }\n-        }.visit( typeMirror );\n-    }\n-\n-    /**\n-     * Recursively visits Map type arguments\n-     * Map key type argument must be a String as of Neo4j stored procedure specification\n-     * Map value type argument is recursively visited\n-     *\n-     * @param typeMirror Map type mirror\n-     * @return true if the declaration is valid, false otherwise\n-     */\n-    private boolean isValidMapType( TypeMirror typeMirror )\n+      @Override\n+      public Boolean visitDeclared(DeclaredType list, Void aVoid)\n+      {\n+        List<? extends TypeMirror> typeArguments = list.getTypeArguments();\n+        return typeArguments.size() == 1 && test(typeArguments.get(0));\n+      }\n+    }.visit(typeMirror);\n+  }\n+\n+  /**\n+   * Recursively visits Map type arguments\n+   * Map key type argument must be a String as of Neo4j stored procedure specification\n+   * Map value type argument is recursively visited\n+   *\n+   * @param typeMirror Map type mirror\n+   * @return true if the declaration is valid, false otherwise\n+   */\n+  private boolean isValidMapType(TypeMirror typeMirror)\n+  {\n+    return new SimpleTypeVisitor8<Boolean, Void>()\n     {\n-        return new SimpleTypeVisitor8<Boolean,Void>()\n+      @Override\n+      public Boolean visitDeclared(DeclaredType map, Void ignored)\n+      {\n+        List<? extends TypeMirror> typeArguments = map.getTypeArguments();\n+        if (typeArguments.size() != 2)\n         {\n-            @Override\n-            public Boolean visitDeclared( DeclaredType map, Void ignored )\n-            {\n-                List<? extends TypeMirror> typeArguments = map.getTypeArguments();\n-                if ( typeArguments.size() != 2 )\n-                {\n-                    return Boolean.FALSE;\n-                }\n-\n-                TypeMirror key = typeArguments.get( 0 );\n-                return typeUtils.isSameType( key, typeMirrors.typeMirror( String.class ) ) &&\n-                        test( typeArguments.get( 1 ) );\n-            }\n-        }.visit( typeMirror );\n-    }\n-\n-    private boolean isSameErasedType( Class<?> type, TypeMirror typeMirror )\n-    {\n-        return typeUtils\n-                .isSameType( typeUtils.erasure( typeMirrors.typeMirror( type ) ), typeUtils.erasure( typeMirror ) );\n-    }\n+          return Boolean.FALSE;\n+        }\n+\n+        TypeMirror key = typeArguments.get(0);\n+        return typeUtils.isSameType(key, typeMirrors.typeMirror(String.class)) &&\n+            test(typeArguments.get(1));\n+      }\n+    }.visit(typeMirror);\n+  }\n+\n+  private boolean isSameErasedType(Class<?> type, TypeMirror typeMirror)\n+  {\n+    return typeUtils\n+        .isSameType(typeUtils.erasure(typeMirrors.typeMirror(type)), typeUtils.erasure(typeMirror));\n+  }\n \n }\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "46",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1626/AllowedTypesValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1626/AllowedTypesValidator.java\nindex 7860f229087..26a415e20bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1626/AllowedTypesValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1626/AllowedTypesValidator.java\n@@ -36,15 +36,13 @@ import org.neo4j.tooling.procedure.compilerutils.TypeMirrorUtils;\n  */\n public class AllowedTypesValidator implements Predicate<TypeMirror>\n {\n-\n     private final TypeMirrorUtils typeMirrors;\n     private final Collection<TypeMirror> whitelistedTypes;\n     private final Types typeUtils;\n \n     public AllowedTypesValidator( TypeMirrorUtils typeMirrors, Types typeUtils )\n     {\n-\n-        this.typeMirrors = typeMirrors;\n+    this.typeMirrors = typeMirrors;\n         this.whitelistedTypes = typeMirrors.procedureAllowedTypes();\n         this.typeUtils = typeUtils;\n     }\n@@ -53,9 +51,7 @@ public class AllowedTypesValidator implements Predicate<TypeMirror>\n     public boolean test( TypeMirror typeMirror )\n     {\n         TypeMirror erasedActualType = typeUtils.erasure( typeMirror );\n-\n-        return isValidErasedType( erasedActualType ) &&\n-                (!isSameErasedType( List.class, typeMirror ) || isValidListType( typeMirror )) &&\n+return isValidErasedType( erasedActualType ) &&(!isSameErasedType( List.class, typeMirror ) || isValidListType( typeMirror )) &&\n                 (!isSameErasedType( Map.class, typeMirror ) || isValidMapType( typeMirror ));\n     }\n \n@@ -64,8 +60,7 @@ public class AllowedTypesValidator implements Predicate<TypeMirror>\n         return whitelistedTypes.stream().anyMatch( type ->\n         {\n             TypeMirror erasedAllowedType = typeUtils.erasure( type );\n-\n-            TypeMirror map = typeUtils.erasure( typeMirrors.typeMirror( Map.class ) );\n+TypeMirror map = typeUtils.erasure( typeMirrors.typeMirror( Map.class ) );\n             TypeMirror list = typeUtils.erasure( typeMirrors.typeMirror( List.class ) );\n             if ( typeUtils.isSameType( erasedAllowedType, map ) || typeUtils.isSameType( erasedAllowedType, list ) )\n             {\n@@ -117,16 +112,13 @@ public class AllowedTypesValidator implements Predicate<TypeMirror>\n                 }\n \n                 TypeMirror key = typeArguments.get( 0 );\n-                return typeUtils.isSameType( key, typeMirrors.typeMirror( String.class ) ) &&\n-                        test( typeArguments.get( 1 ) );\n-            }\n+                return typeUtils.isSameType( key, typeMirrors.typeMirror( String.class ) ) && test( typeArguments.get( 1 ) );\n+    }\n         }.visit( typeMirror );\n     }\n \n     private boolean isSameErasedType( Class<?> type, TypeMirror typeMirror )\n     {\n-        return typeUtils\n-                .isSameType( typeUtils.erasure( typeMirrors.typeMirror( type ) ), typeUtils.erasure( typeMirror ) );\n+        return typeUtils.isSameType( typeUtils.erasure( typeMirrors.typeMirror( type ) ), typeUtils.erasure( typeMirror ) );\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "column": "53",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "54",
                    "column": "102",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "54",
                    "column": "135",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "54",
                    "column": "183",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "64",
                    "column": "107",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "39",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "39",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "116",
                    "column": "83",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1626/AllowedTypesValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1626/AllowedTypesValidator.java\nindex 7860f229087..dd2d05fceda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1626/AllowedTypesValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1626/AllowedTypesValidator.java\n@@ -27,23 +27,21 @@ import javax.lang.model.type.DeclaredType;\n import javax.lang.model.type.TypeMirror;\n import javax.lang.model.util.SimpleTypeVisitor8;\n import javax.lang.model.util.Types;\n-\n import org.neo4j.tooling.procedure.compilerutils.TypeMirrorUtils;\n \n /**\n  * This predicate makes sure that a given declared type (record field type,\n  * procedure parameter type...) is supported by Neo4j stored procedures.\n  */\n+\n public class AllowedTypesValidator implements Predicate<TypeMirror>\n {\n-\n     private final TypeMirrorUtils typeMirrors;\n     private final Collection<TypeMirror> whitelistedTypes;\n     private final Types typeUtils;\n \n     public AllowedTypesValidator( TypeMirrorUtils typeMirrors, Types typeUtils )\n     {\n-\n         this.typeMirrors = typeMirrors;\n         this.whitelistedTypes = typeMirrors.procedureAllowedTypes();\n         this.typeUtils = typeUtils;\n@@ -53,27 +51,23 @@ public class AllowedTypesValidator implements Predicate<TypeMirror>\n     public boolean test( TypeMirror typeMirror )\n     {\n         TypeMirror erasedActualType = typeUtils.erasure( typeMirror );\n-\n-        return isValidErasedType( erasedActualType ) &&\n-                (!isSameErasedType( List.class, typeMirror ) || isValidListType( typeMirror )) &&\n-                (!isSameErasedType( Map.class, typeMirror ) || isValidMapType( typeMirror ));\n+        return isValidErasedType( erasedActualType )&& ( ! isSameErasedType( List.class, typeMirror )|| isValidListType( typeMirror ))&& ( ! isSameErasedType( Map.class, typeMirror )|| isValidMapType( typeMirror ));\n     }\n \n     private boolean isValidErasedType( TypeMirror actualType )\n     {\n         return whitelistedTypes.stream().anyMatch( type ->\n-        {\n-            TypeMirror erasedAllowedType = typeUtils.erasure( type );\n-\n-            TypeMirror map = typeUtils.erasure( typeMirrors.typeMirror( Map.class ) );\n-            TypeMirror list = typeUtils.erasure( typeMirrors.typeMirror( List.class ) );\n-            if ( typeUtils.isSameType( erasedAllowedType, map ) || typeUtils.isSameType( erasedAllowedType, list ) )\n-            {\n-                return typeUtils.isSubtype( actualType, erasedAllowedType );\n-            }\n-\n-            return typeUtils.isSameType( actualType, erasedAllowedType );\n-        } );\n+                                                   {\n+                                                       TypeMirror erasedAllowedType = typeUtils.erasure( type );\n+                                                       TypeMirror map = typeUtils.erasure( typeMirrors.typeMirror( Map.class ) );\n+                                                       TypeMirror list = typeUtils.erasure( typeMirrors.typeMirror( List.class ) );\n+                                                       if ( typeUtils.isSameType( erasedAllowedType, map )|| typeUtils.isSameType( erasedAllowedType, list ) )\n+                                                       {\n+                                                           return typeUtils.isSubtype( actualType, erasedAllowedType );\n+                                                       }\n+\n+                                                       return typeUtils.isSameType( actualType, erasedAllowedType );\n+                                                   } );\n     }\n \n     /**\n@@ -82,17 +76,18 @@ public class AllowedTypesValidator implements Predicate<TypeMirror>\n      * @param typeMirror the List type mirror\n      * @return true if the declaration is valid, false otherwise\n      */\n+\n     private boolean isValidListType( TypeMirror typeMirror )\n     {\n-        return new SimpleTypeVisitor8<Boolean,Void>()\n-        {\n-            @Override\n-            public Boolean visitDeclared( DeclaredType list, Void aVoid )\n-            {\n-                List<? extends TypeMirror> typeArguments = list.getTypeArguments();\n-                return typeArguments.size() == 1 && test( typeArguments.get( 0 ) );\n-            }\n-        }.visit( typeMirror );\n+        return new SimpleTypeVisitor8 <Boolean,Void>()\n+{\n+    @Override\n+    public Boolean visitDeclared( DeclaredType list, Void aVoid )\n+    {\n+        List<? extends TypeMirror> typeArguments = list.getTypeArguments();\n+        return typeArguments.size() == 1&& test( typeArguments.get( 0 ) );\n+    }\n+}.visit( typeMirror );\n     }\n \n     /**\n@@ -103,30 +98,28 @@ public class AllowedTypesValidator implements Predicate<TypeMirror>\n      * @param typeMirror Map type mirror\n      * @return true if the declaration is valid, false otherwise\n      */\n+\n     private boolean isValidMapType( TypeMirror typeMirror )\n     {\n-        return new SimpleTypeVisitor8<Boolean,Void>()\n+        return new SimpleTypeVisitor8 <Boolean,Void>()\n+{\n+    @Override\n+    public Boolean visitDeclared( DeclaredType map, Void ignored )\n+    {\n+        List<? extends TypeMirror> typeArguments = map.getTypeArguments();\n+        if ( typeArguments.size() != 2 )\n         {\n-            @Override\n-            public Boolean visitDeclared( DeclaredType map, Void ignored )\n-            {\n-                List<? extends TypeMirror> typeArguments = map.getTypeArguments();\n-                if ( typeArguments.size() != 2 )\n-                {\n-                    return Boolean.FALSE;\n-                }\n+            return Boolean.FALSE;\n+        }\n \n-                TypeMirror key = typeArguments.get( 0 );\n-                return typeUtils.isSameType( key, typeMirrors.typeMirror( String.class ) ) &&\n-                        test( typeArguments.get( 1 ) );\n-            }\n-        }.visit( typeMirror );\n+        TypeMirror key = typeArguments.get( 0 );\n+        return typeUtils.isSameType( key, typeMirrors.typeMirror( String.class ) )&& test( typeArguments.get( 1 ) );\n+    }\n+}.visit( typeMirror );\n     }\n \n     private boolean isSameErasedType( Class<?> type, TypeMirror typeMirror )\n     {\n-        return typeUtils\n-                .isSameType( typeUtils.erasure( typeMirrors.typeMirror( type ) ), typeUtils.erasure( typeMirror ) );\n+        return typeUtils.isSameType( typeUtils.erasure( typeMirrors.typeMirror( type ) ), typeUtils.erasure( typeMirror ) );\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}