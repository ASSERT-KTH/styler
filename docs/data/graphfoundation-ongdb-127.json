{
    "project_name": "graphfoundation-ongdb",
    "error_id": "127",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "128",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "261",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "276",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "292",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "359",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "413",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "420",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "461",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "470",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "474",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "479",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "491",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "524",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "548",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "576",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "604",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "607",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "610",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "619",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "628",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "641",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "650",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "657",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "661",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "688",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "703",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "758",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "788",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "788",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "833",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "833",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "836",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "853",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "854",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "875",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "880",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "880",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "891",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "899",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "899",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "899",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "904",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "917",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "919",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "919",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "936",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "936",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "936",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "943",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "943",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "944",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "946",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "946",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "962",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "962",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "970",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "970",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "983",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "983",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "991",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "991",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "994",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "994",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1000",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1012",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1012",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1019",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1019",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1030",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1030",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1035",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1036",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1039",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1039",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1060",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1060",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1064",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1064",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1073",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1073",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1075",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1078",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1078",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1101",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1101",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1109",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1111",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1111",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1115",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1115",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1117",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1119",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1136",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1136",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1143",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1143",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1159",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1160",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1168",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1168",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1174",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1174",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/127/ForsetiClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/127/ForsetiClient.java\nindex 203759e4e25..90cbdb8d554 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/127/ForsetiClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/127/ForsetiClient.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.enterprise.lock.forseti;\n \n import java.time.Clock;\n@@ -69,1117 +70,1112 @@ import static java.lang.String.format;\n  */\n public class ForsetiClient implements Locks.Client\n {\n-    /** Id for this client */\n-    private final int clientId;\n-\n-    /** resourceType -> lock map. These are the global lock maps, shared across all clients. */\n-    private final ConcurrentMap<Long,ForsetiLockManager.Lock>[] lockMaps;\n-\n-    /** resourceType -> wait strategy */\n-    private final WaitStrategy<AcquireLockTimeoutException>[] waitStrategies;\n-\n-    /** How to resolve deadlocks. */\n-    private final DeadlockResolutionStrategy deadlockResolutionStrategy;\n-\n-    /** Handle to return client to pool when closed. */\n-    private final Pool<ForsetiClient> clientPool;\n-\n-    /** Look up a client by id */\n-    private final IntFunction<ForsetiClient> clientById;\n-\n-    /**\n-     * The client uses this to track which locks it holds. It is solely an optimization to ensure we don't need to\n-     * coordinate if we grab the same lock multiple times.\n-     * <p/>\n-     * The data structure looks like:\n-     * Array[ resourceType -> Map( resourceId -> num locks ) ]\n-     */\n-    private final PrimitiveLongIntMap[] sharedLockCounts;\n-\n-    /** @see #sharedLockCounts */\n-    private final PrimitiveLongIntMap[] exclusiveLockCounts;\n-\n-    /**\n-     * Time within which any particular lock should be acquired.\n-     *\n-     * @see GraphDatabaseSettings#lock_acquisition_timeout\n-     */\n-    private final long lockAcquisitionTimeoutMillis;\n-    private final Clock clock;\n-\n-    /** List of other clients this client is waiting for. */\n-    private final SimpleBitSet waitList = new SimpleBitSet( 64 );\n-    private long waitListCheckPoint;\n-\n-    // To be able to close Locks.Client instance properly we should be able to do couple of things:\n-    //  - have a possibility to prevent new clients to come\n-    //  - wake up all the waiters and let them go\n-    //  - have a possibility to see how many clients are still using us and wait for them to finish\n-    // We need to do all of that to prevent a situation when a closing client will get a lock that will never be\n-    // closed and eventually will block other clients.\n-    private final LockClientStateHolder stateHolder = new LockClientStateHolder();\n-\n-    /**\n-     * For exclusive locks, we only need a single re-usable one per client. We simply CAS this lock into whatever slots\n-     * we want to hold in the global lock map.\n-     */\n-    private final ExclusiveLock myExclusiveLock = new ExclusiveLock( this );\n-\n-    private volatile boolean hasLocks;\n-\n-    private final ReleaseExclusiveLocksAndClearSharedVisitor releaseExclusiveAndClearSharedVisitor =\n-            new ReleaseExclusiveLocksAndClearSharedVisitor();\n-    private final ReleaseSharedDontCheckExclusiveVisitor releaseSharedDontCheckExclusiveVisitor =\n-            new ReleaseSharedDontCheckExclusiveVisitor();\n-\n-    /**\n-     * When we *wait* for a specific lock to be released to us, we assign it to this field. This helps us during the\n-     * secondary deadlock verification process, where we traverse the waiter/lock-owner dependency graph.\n-     */\n-    private volatile ForsetiLockManager.Lock waitingForLock;\n-\n-    public ForsetiClient( int id, ConcurrentMap<Long,ForsetiLockManager.Lock>[] lockMaps,\n-                          WaitStrategy<AcquireLockTimeoutException>[] waitStrategies, Pool<ForsetiClient> clientPool,\n-                          DeadlockResolutionStrategy deadlockResolutionStrategy, IntFunction<ForsetiClient> clientById,\n-                          long lockAcquisitionTimeoutMillis, Clock clock )\n-    {\n-        this.clientId = id;\n-        this.lockMaps = lockMaps;\n-        this.waitStrategies = waitStrategies;\n-        this.deadlockResolutionStrategy = deadlockResolutionStrategy;\n-        this.clientPool = clientPool;\n-        this.clientById = clientById;\n-        this.sharedLockCounts = new PrimitiveLongIntMap[lockMaps.length];\n-        this.exclusiveLockCounts = new PrimitiveLongIntMap[lockMaps.length];\n-        this.lockAcquisitionTimeoutMillis = lockAcquisitionTimeoutMillis;\n-        this.clock = clock;\n-\n-        for ( int i = 0; i < sharedLockCounts.length; i++ )\n-        {\n-            sharedLockCounts[i] = Primitive.longIntMap();\n-            exclusiveLockCounts[i] = Primitive.longIntMap();\n-        }\n-    }\n-\n-    /**\n-     * Reset current client state. Make it ready for next bunch of operations.\n-     * Should be used before factory release client to public usage.\n-     */\n-    public void reset()\n+  /**\n+   * Id for this client\n+   */\n+  private final int clientId;\n+\n+  /**\n+   * resourceType -> lock map. These are the global lock maps, shared across all clients.\n+   */\n+  private final ConcurrentMap<Long, ForsetiLockManager.Lock>[] lockMaps;\n+\n+  /**\n+   * resourceType -> wait strategy\n+   */\n+  private final WaitStrategy<AcquireLockTimeoutException>[] waitStrategies;\n+\n+  /**\n+   * How to resolve deadlocks.\n+   */\n+  private final DeadlockResolutionStrategy deadlockResolutionStrategy;\n+\n+  /**\n+   * Handle to return client to pool when closed.\n+   */\n+  private final Pool<ForsetiClient> clientPool;\n+\n+  /**\n+   * Look up a client by id\n+   */\n+  private final IntFunction<ForsetiClient> clientById;\n+\n+  /**\n+   * The client uses this to track which locks it holds. It is solely an optimization to ensure we don't need to\n+   * coordinate if we grab the same lock multiple times.\n+   * <p/>\n+   * The data structure looks like:\n+   * Array[ resourceType -> Map( resourceId -> num locks ) ]\n+   */\n+  private final PrimitiveLongIntMap[] sharedLockCounts;\n+\n+  /**\n+   * @see #sharedLockCounts\n+   */\n+  private final PrimitiveLongIntMap[] exclusiveLockCounts;\n+\n+  /**\n+   * Time within which any particular lock should be acquired.\n+   *\n+   * @see GraphDatabaseSettings#lock_acquisition_timeout\n+   */\n+  private final long lockAcquisitionTimeoutMillis;\n+  private final Clock clock;\n+\n+  /**\n+   * List of other clients this client is waiting for.\n+   */\n+  private final SimpleBitSet waitList = new SimpleBitSet(64);\n+  private long waitListCheckPoint;\n+\n+  // To be able to close Locks.Client instance properly we should be able to do couple of things:\n+  //  - have a possibility to prevent new clients to come\n+  //  - wake up all the waiters and let them go\n+  //  - have a possibility to see how many clients are still using us and wait for them to finish\n+  // We need to do all of that to prevent a situation when a closing client will get a lock that will never be\n+  // closed and eventually will block other clients.\n+  private final LockClientStateHolder stateHolder = new LockClientStateHolder();\n+\n+  /**\n+   * For exclusive locks, we only need a single re-usable one per client. We simply CAS this lock into whatever slots\n+   * we want to hold in the global lock map.\n+   */\n+  private final ExclusiveLock myExclusiveLock = new ExclusiveLock(this);\n+\n+  private volatile boolean hasLocks;\n+\n+  private final ReleaseExclusiveLocksAndClearSharedVisitor releaseExclusiveAndClearSharedVisitor =\n+      new ReleaseExclusiveLocksAndClearSharedVisitor();\n+  private final ReleaseSharedDontCheckExclusiveVisitor releaseSharedDontCheckExclusiveVisitor =\n+      new ReleaseSharedDontCheckExclusiveVisitor();\n+\n+  /**\n+   * When we *wait* for a specific lock to be released to us, we assign it to this field. This helps us during the\n+   * secondary deadlock verification process, where we traverse the waiter/lock-owner dependency graph.\n+   */\n+  private volatile ForsetiLockManager.Lock waitingForLock;\n+\n+  public ForsetiClient(int id, ConcurrentMap<Long, ForsetiLockManager.Lock>[] lockMaps,\n+                       WaitStrategy<AcquireLockTimeoutException>[] waitStrategies, Pool<ForsetiClient> clientPool,\n+                       DeadlockResolutionStrategy deadlockResolutionStrategy, IntFunction<ForsetiClient> clientById,\n+                       long lockAcquisitionTimeoutMillis, Clock clock)\n+  {\n+    this.clientId = id;\n+    this.lockMaps = lockMaps;\n+    this.waitStrategies = waitStrategies;\n+    this.deadlockResolutionStrategy = deadlockResolutionStrategy;\n+    this.clientPool = clientPool;\n+    this.clientById = clientById;\n+    this.sharedLockCounts = new PrimitiveLongIntMap[lockMaps.length];\n+    this.exclusiveLockCounts = new PrimitiveLongIntMap[lockMaps.length];\n+    this.lockAcquisitionTimeoutMillis = lockAcquisitionTimeoutMillis;\n+    this.clock = clock;\n+\n+    for (int i = 0; i < sharedLockCounts.length; i++)\n     {\n-        stateHolder.reset();\n+      sharedLockCounts[i] = Primitive.longIntMap();\n+      exclusiveLockCounts[i] = Primitive.longIntMap();\n     }\n-\n-    @Override\n-    public void acquireShared( LockTracer tracer, ResourceType resourceType, long... resourceIds )\n-            throws AcquireLockTimeoutException\n+  }\n+\n+  /**\n+   * Reset current client state. Make it ready for next bunch of operations.\n+   * Should be used before factory release client to public usage.\n+   */\n+  public void reset()\n+  {\n+    stateHolder.reset();\n+  }\n+\n+  @Override\n+  public void acquireShared(LockTracer tracer, ResourceType resourceType, long... resourceIds)\n+      throws AcquireLockTimeoutException\n+  {\n+    hasLocks = true;\n+    stateHolder.incrementActiveClients(this);\n+    LockWaitEvent waitEvent = null;\n+\n+    try\n     {\n-        hasLocks = true;\n-        stateHolder.incrementActiveClients( this );\n-        LockWaitEvent waitEvent = null;\n-\n-        try\n+      // Grab the global lock map we will be using\n+      ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n+\n+      // And grab our local lock maps\n+      PrimitiveLongIntMap heldShareLocks = sharedLockCounts[resourceType.typeId()];\n+      PrimitiveLongIntMap heldExclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n+\n+      for (long resourceId : resourceIds)\n+      {\n+        // First, check if we already hold this as a shared lock\n+        int heldCount = heldShareLocks.get(resourceId);\n+        if (heldCount != -1)\n         {\n-            // Grab the global lock map we will be using\n-            ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n-\n-            // And grab our local lock maps\n-            PrimitiveLongIntMap heldShareLocks = sharedLockCounts[resourceType.typeId()];\n-            PrimitiveLongIntMap heldExclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n-\n-            for ( long resourceId : resourceIds )\n-            {\n-                // First, check if we already hold this as a shared lock\n-                int heldCount = heldShareLocks.get( resourceId );\n-                if ( heldCount != -1 )\n-                {\n-                    // We already have a lock on this, just increment our local reference counter.\n-                    heldShareLocks.put( resourceId, Math.incrementExact( heldCount ) );\n-                    continue;\n-                }\n-\n-                // Second, check if we hold it as an exclusive lock\n-                if ( heldExclusiveLocks.containsKey( resourceId ) )\n-                {\n-                    // We already have an exclusive lock, so just leave that in place.\n-                    // When the exclusive lock is released, it will be automatically downgraded to a shared lock,\n-                    // since we bumped the share lock reference count.\n-                    heldShareLocks.put( resourceId, 1 );\n-                    continue;\n-                }\n-\n-                // We don't hold the lock, so we need to grab it via the global lock map\n-                int tries = 0;\n-                SharedLock mySharedLock = null;\n-                long waitStartMillis = clock.millis();\n-\n-                // Retry loop\n-                while ( true )\n-                {\n-                    assertValid( waitStartMillis, resourceType, resourceId );\n-\n-                    // Check if there is a lock for this entity in the map\n-                    ForsetiLockManager.Lock existingLock = lockMap.get( resourceId );\n-\n-                    // No lock\n-                    if ( existingLock == null )\n-                    {\n-                        // Try to create a new shared lock\n-                        if ( mySharedLock == null )\n-                        {\n-                            mySharedLock = new SharedLock( this );\n-                        }\n-\n-                        if ( lockMap.putIfAbsent( resourceId, mySharedLock ) == null )\n-                        {\n-                            // Success, we now hold the shared lock.\n-                            break;\n-                        }\n-                        else\n-                        {\n-                            continue;\n-                        }\n-                    }\n-\n-                    // Someone holds shared lock on this entity, try and get in on that action\n-                    else if ( existingLock instanceof SharedLock )\n-                    {\n-                        if ( ((SharedLock) existingLock).acquire( this ) )\n-                        {\n-                            // Success!\n-                            break;\n-                        }\n-                    }\n-\n-                    // Someone holds an exclusive lock on this entity\n-                    else if ( existingLock instanceof ExclusiveLock )\n-                    {\n-                        // We need to wait, just let the loop run.\n-                    }\n-                    else\n-                    {\n-                        throw new UnsupportedOperationException( \"Unknown lock type: \" + existingLock );\n-                    }\n-\n-                    if ( waitEvent == null )\n-                    {\n-                        waitEvent = tracer.waitForLock( false, resourceType, resourceId );\n-                    }\n-                    // And take note of who we are waiting for. This is used for deadlock detection.\n-                    waitFor( existingLock, resourceType, resourceId, tries++ );\n-                }\n-\n-                // Make a local note about the fact that we now hold this lock\n-                heldShareLocks.put( resourceId, 1 );\n-            }\n+          // We already have a lock on this, just increment our local reference counter.\n+          heldShareLocks.put(resourceId, Math.incrementExact(heldCount));\n+          continue;\n         }\n-        finally\n+\n+        // Second, check if we hold it as an exclusive lock\n+        if (heldExclusiveLocks.containsKey(resourceId))\n         {\n-            if ( waitEvent != null )\n-            {\n-                waitEvent.close();\n-            }\n-            clearWaitList();\n-            waitingForLock = null;\n-            stateHolder.decrementActiveClients();\n+          // We already have an exclusive lock, so just leave that in place.\n+          // When the exclusive lock is released, it will be automatically downgraded to a shared lock,\n+          // since we bumped the share lock reference count.\n+          heldShareLocks.put(resourceId, 1);\n+          continue;\n         }\n-    }\n \n-    @Override\n-    public void acquireExclusive( LockTracer tracer, ResourceType resourceType, long... resourceIds )\n-            throws AcquireLockTimeoutException\n-    {\n-        hasLocks = true;\n-        stateHolder.incrementActiveClients( this );\n-        LockWaitEvent waitEvent = null;\n+        // We don't hold the lock, so we need to grab it via the global lock map\n+        int tries = 0;\n+        SharedLock mySharedLock = null;\n+        long waitStartMillis = clock.millis();\n \n-        try\n+        // Retry loop\n+        while (true)\n         {\n-            ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n-            PrimitiveLongIntMap heldLocks = exclusiveLockCounts[resourceType.typeId()];\n+          assertValid(waitStartMillis, resourceType, resourceId);\n \n-            for ( long resourceId : resourceIds )\n-            {\n-                int heldCount = heldLocks.get( resourceId );\n-                if ( heldCount != -1 )\n-                {\n-                    // We already have a lock on this, just increment our local reference counter.\n-                    heldLocks.put( resourceId, Math.incrementExact( heldCount ) );\n-                    continue;\n-                }\n-\n-                // Grab the global lock\n-                ForsetiLockManager.Lock existingLock;\n-                int tries = 0;\n-                long waitStartMillis = clock.millis();\n-                while ( (existingLock = lockMap.putIfAbsent( resourceId, myExclusiveLock )) != null )\n-                {\n-                    assertValid( waitStartMillis, resourceType, resourceId );\n-\n-                    // If this is a shared lock:\n-                    // Given a grace period of tries (to try and not starve readers), grab an update lock and wait\n-                    // for it to convert to an exclusive lock.\n-                    if ( tries > 50 && existingLock instanceof SharedLock )\n-                    {\n-                        // Then we should upgrade that lock\n-                        SharedLock sharedLock = (SharedLock) existingLock;\n-                        if ( tryUpgradeSharedToExclusive( tracer, waitEvent, resourceType, lockMap, resourceId,\n-                                sharedLock,\n-                                waitStartMillis ) )\n-                        {\n-                            break;\n-                        }\n-                    }\n-\n-                    if ( waitEvent == null )\n-                    {\n-                        waitEvent = tracer.waitForLock( true, resourceType, resourceId );\n-                    }\n-                    waitFor( existingLock, resourceType, resourceId, tries++ );\n-                }\n-\n-                heldLocks.put( resourceId, 1 );\n-            }\n-        }\n-        finally\n-        {\n-            if ( waitEvent != null )\n+          // Check if there is a lock for this entity in the map\n+          ForsetiLockManager.Lock existingLock = lockMap.get(resourceId);\n+\n+          // No lock\n+          if (existingLock == null)\n+          {\n+            // Try to create a new shared lock\n+            if (mySharedLock == null)\n             {\n-                waitEvent.close();\n+              mySharedLock = new SharedLock(this);\n             }\n-            clearWaitList();\n-            waitingForLock = null;\n-            stateHolder.decrementActiveClients();\n-        }\n-    }\n-\n-    @Override\n-    public boolean tryExclusiveLock( ResourceType resourceType, long resourceId )\n-    {\n-        hasLocks = true;\n-        stateHolder.incrementActiveClients( this );\n \n-        try\n-        {\n-            ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n-            PrimitiveLongIntMap heldLocks = exclusiveLockCounts[resourceType.typeId()];\n-\n-            int heldCount = heldLocks.get( resourceId );\n-            if ( heldCount != -1 )\n+            if (lockMap.putIfAbsent(resourceId, mySharedLock) == null)\n             {\n-                // We already have a lock on this, just increment our local reference counter.\n-                heldLocks.put( resourceId, Math.incrementExact( heldCount ) );\n-                return true;\n+              // Success, we now hold the shared lock.\n+              break;\n+            } else\n+            {\n+              continue;\n             }\n+          }\n \n-            // Grab the global lock\n-            ForsetiLockManager.Lock lock;\n-            if ( (lock = lockMap.putIfAbsent( resourceId, myExclusiveLock )) != null )\n+          // Someone holds shared lock on this entity, try and get in on that action\n+          else if (existingLock instanceof SharedLock)\n+          {\n+            if (((SharedLock) existingLock).acquire(this))\n             {\n-                if ( lock instanceof SharedLock && sharedLockCounts[resourceType.typeId()].containsKey( resourceId ) )\n-                {\n-                    SharedLock sharedLock = (SharedLock) lock;\n-                    if ( sharedLock.tryAcquireUpdateLock( this ) )\n-                    {\n-                        if ( sharedLock.numberOfHolders() == 1 )\n-                        {\n-                            heldLocks.put( resourceId, 1 );\n-                            return true;\n-                        }\n-                        else\n-                        {\n-                            sharedLock.releaseUpdateLock();\n-                            return false;\n-                        }\n-                    }\n-                }\n-                return false;\n+              // Success!\n+              break;\n             }\n-\n-            heldLocks.put( resourceId, 1 );\n-            return true;\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n+          }\n+\n+          // Someone holds an exclusive lock on this entity\n+          else if (existingLock instanceof ExclusiveLock)\n+          {\n+            // We need to wait, just let the loop run.\n+          } else\n+          {\n+            throw new UnsupportedOperationException(\"Unknown lock type: \" + existingLock);\n+          }\n+\n+          if (waitEvent == null)\n+          {\n+            waitEvent = tracer.waitForLock(false, resourceType, resourceId);\n+          }\n+          // And take note of who we are waiting for. This is used for deadlock detection.\n+          waitFor(existingLock, resourceType, resourceId, tries++);\n         }\n+\n+        // Make a local note about the fact that we now hold this lock\n+        heldShareLocks.put(resourceId, 1);\n+      }\n+    } finally\n+    {\n+      if (waitEvent != null)\n+      {\n+        waitEvent.close();\n+      }\n+      clearWaitList();\n+      waitingForLock = null;\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public boolean trySharedLock( ResourceType resourceType, long resourceId )\n+  @Override\n+  public void acquireExclusive(LockTracer tracer, ResourceType resourceType, long... resourceIds)\n+      throws AcquireLockTimeoutException\n+  {\n+    hasLocks = true;\n+    stateHolder.incrementActiveClients(this);\n+    LockWaitEvent waitEvent = null;\n+\n+    try\n     {\n-        hasLocks = true;\n-        stateHolder.incrementActiveClients( this );\n+      ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n+      PrimitiveLongIntMap heldLocks = exclusiveLockCounts[resourceType.typeId()];\n \n-        try\n+      for (long resourceId : resourceIds)\n+      {\n+        int heldCount = heldLocks.get(resourceId);\n+        if (heldCount != -1)\n         {\n-            ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n-            PrimitiveLongIntMap heldShareLocks = sharedLockCounts[resourceType.typeId()];\n-            PrimitiveLongIntMap heldExclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n-\n-            int heldCount = heldShareLocks.get( resourceId );\n-            if ( heldCount != -1 )\n-            {\n-                // We already have a lock on this, just increment our local reference counter.\n-                heldShareLocks.put( resourceId, Math.incrementExact( heldCount ) );\n-                return true;\n-            }\n+          // We already have a lock on this, just increment our local reference counter.\n+          heldLocks.put(resourceId, Math.incrementExact(heldCount));\n+          continue;\n+        }\n \n-            if ( heldExclusiveLocks.containsKey( resourceId ) )\n+        // Grab the global lock\n+        ForsetiLockManager.Lock existingLock;\n+        int tries = 0;\n+        long waitStartMillis = clock.millis();\n+        while ((existingLock = lockMap.putIfAbsent(resourceId, myExclusiveLock)) != null)\n+        {\n+          assertValid(waitStartMillis, resourceType, resourceId);\n+\n+          // If this is a shared lock:\n+          // Given a grace period of tries (to try and not starve readers), grab an update lock and wait\n+          // for it to convert to an exclusive lock.\n+          if (tries > 50 && existingLock instanceof SharedLock)\n+          {\n+            // Then we should upgrade that lock\n+            SharedLock sharedLock = (SharedLock) existingLock;\n+            if (tryUpgradeSharedToExclusive(tracer, waitEvent, resourceType, lockMap, resourceId,\n+                sharedLock,\n+                waitStartMillis))\n             {\n-                // We already have an exclusive lock, so just leave that in place. When the exclusive lock is released,\n-                // it will be automatically downgraded to a shared lock, since we bumped the share lock reference count.\n-                heldShareLocks.put( resourceId, 1 );\n-                return true;\n+              break;\n             }\n+          }\n \n-            long waitStartMillis = clock.millis();\n-            while ( true )\n-            {\n-                assertValid( waitStartMillis, resourceType, resourceId );\n-\n-                ForsetiLockManager.Lock existingLock = lockMap.get( resourceId );\n-                if ( existingLock == null )\n-                {\n-                    // Try to create a new shared lock\n-                    if ( lockMap.putIfAbsent( resourceId, new SharedLock( this ) ) == null )\n-                    {\n-                        // Success!\n-                        break;\n-                    }\n-                }\n-                else if ( existingLock instanceof SharedLock )\n-                {\n-                    // Note that there is a \"safe\" race here where someone may be releasing the last reference to a lock\n-                    // and thus removing that lock instance (making it unacquirable). In this case, we allow retrying,\n-                    // even though this is a try-lock call.\n-                    if ( ((SharedLock) existingLock).acquire( this ) )\n-                    {\n-                        // Success!\n-                        break;\n-                    }\n-                    else if ( ((SharedLock) existingLock).isUpdateLock() )\n-                    {\n-                        return false;\n-                    }\n-                }\n-                else if ( existingLock instanceof ExclusiveLock )\n-                {\n-                    return false;\n-                }\n-                else\n-                {\n-                    throw new UnsupportedOperationException( \"Unknown lock type: \" + existingLock );\n-                }\n-            }\n-            heldShareLocks.put( resourceId, 1 );\n-            return true;\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n+          if (waitEvent == null)\n+          {\n+            waitEvent = tracer.waitForLock(true, resourceType, resourceId);\n+          }\n+          waitFor(existingLock, resourceType, resourceId, tries++);\n         }\n+\n+        heldLocks.put(resourceId, 1);\n+      }\n+    } finally\n+    {\n+      if (waitEvent != null)\n+      {\n+        waitEvent.close();\n+      }\n+      clearWaitList();\n+      waitingForLock = null;\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public boolean reEnterShared( ResourceType resourceType, long resourceId )\n+  @Override\n+  public boolean tryExclusiveLock(ResourceType resourceType, long resourceId)\n+  {\n+    hasLocks = true;\n+    stateHolder.incrementActiveClients(this);\n+\n+    try\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n+      ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n+      PrimitiveLongIntMap heldLocks = exclusiveLockCounts[resourceType.typeId()];\n+\n+      int heldCount = heldLocks.get(resourceId);\n+      if (heldCount != -1)\n+      {\n+        // We already have a lock on this, just increment our local reference counter.\n+        heldLocks.put(resourceId, Math.incrementExact(heldCount));\n+        return true;\n+      }\n+\n+      // Grab the global lock\n+      ForsetiLockManager.Lock lock;\n+      if ((lock = lockMap.putIfAbsent(resourceId, myExclusiveLock)) != null)\n+      {\n+        if (lock instanceof SharedLock && sharedLockCounts[resourceType.typeId()].containsKey(resourceId))\n         {\n-            PrimitiveLongIntMap heldShareLocks = sharedLockCounts[resourceType.typeId()];\n-            PrimitiveLongIntMap heldExclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n-\n-            int heldCount = heldShareLocks.get( resourceId );\n-            if ( heldCount != -1 )\n+          SharedLock sharedLock = (SharedLock) lock;\n+          if (sharedLock.tryAcquireUpdateLock(this))\n+          {\n+            if (sharedLock.numberOfHolders() == 1)\n             {\n-                // We already have a lock on this, just increment our local reference counter.\n-                heldShareLocks.put( resourceId, Math.incrementExact( heldCount ) );\n-                return true;\n-            }\n-\n-            if ( heldExclusiveLocks.containsKey( resourceId ) )\n+              heldLocks.put(resourceId, 1);\n+              return true;\n+            } else\n             {\n-                // We already have an exclusive lock, so just leave that in place. When the exclusive lock is released,\n-                // it will be automatically downgraded to a shared lock, since we bumped the share lock reference count.\n-                heldShareLocks.put( resourceId, 1 );\n-                return true;\n+              sharedLock.releaseUpdateLock();\n+              return false;\n             }\n-\n-            // We didn't hold a lock already, so we cannot re-enter.\n-            return false;\n+          }\n         }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n-        }\n-    }\n+        return false;\n+      }\n \n-    @Override\n-    public boolean reEnterExclusive( ResourceType resourceType, long resourceId )\n+      heldLocks.put(resourceId, 1);\n+      return true;\n+    } finally\n     {\n-        stateHolder.incrementActiveClients( this );\n-        try\n-        {\n-            PrimitiveLongIntMap heldLocks = exclusiveLockCounts[resourceType.typeId()];\n+      stateHolder.decrementActiveClients();\n+    }\n+  }\n \n-            int heldCount = heldLocks.get( resourceId );\n-            if ( heldCount != -1 )\n-            {\n-                // We already have a lock on this, just increment our local reference counter.\n-                heldLocks.put( resourceId, Math.incrementExact( heldCount ) );\n-                return true;\n-            }\n+  @Override\n+  public boolean trySharedLock(ResourceType resourceType, long resourceId)\n+  {\n+    hasLocks = true;\n+    stateHolder.incrementActiveClients(this);\n \n-            // We didn't hold a lock already, so we cannot re-enter.\n+    try\n+    {\n+      ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap = lockMaps[resourceType.typeId()];\n+      PrimitiveLongIntMap heldShareLocks = sharedLockCounts[resourceType.typeId()];\n+      PrimitiveLongIntMap heldExclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n+\n+      int heldCount = heldShareLocks.get(resourceId);\n+      if (heldCount != -1)\n+      {\n+        // We already have a lock on this, just increment our local reference counter.\n+        heldShareLocks.put(resourceId, Math.incrementExact(heldCount));\n+        return true;\n+      }\n+\n+      if (heldExclusiveLocks.containsKey(resourceId))\n+      {\n+        // We already have an exclusive lock, so just leave that in place. When the exclusive lock is released,\n+        // it will be automatically downgraded to a shared lock, since we bumped the share lock reference count.\n+        heldShareLocks.put(resourceId, 1);\n+        return true;\n+      }\n+\n+      long waitStartMillis = clock.millis();\n+      while (true)\n+      {\n+        assertValid(waitStartMillis, resourceType, resourceId);\n+\n+        ForsetiLockManager.Lock existingLock = lockMap.get(resourceId);\n+        if (existingLock == null)\n+        {\n+          // Try to create a new shared lock\n+          if (lockMap.putIfAbsent(resourceId, new SharedLock(this)) == null)\n+          {\n+            // Success!\n+            break;\n+          }\n+        } else if (existingLock instanceof SharedLock)\n+        {\n+          // Note that there is a \"safe\" race here where someone may be releasing the last reference to a lock\n+          // and thus removing that lock instance (making it unacquirable). In this case, we allow retrying,\n+          // even though this is a try-lock call.\n+          if (((SharedLock) existingLock).acquire(this))\n+          {\n+            // Success!\n+            break;\n+          } else if (((SharedLock) existingLock).isUpdateLock())\n+          {\n             return false;\n-        }\n-        finally\n+          }\n+        } else if (existingLock instanceof ExclusiveLock)\n+        {\n+          return false;\n+        } else\n         {\n-            stateHolder.decrementActiveClients();\n+          throw new UnsupportedOperationException(\"Unknown lock type: \" + existingLock);\n         }\n+      }\n+      heldShareLocks.put(resourceId, 1);\n+      return true;\n+    } finally\n+    {\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public void releaseShared( ResourceType resourceType, long... resourceIds )\n+  @Override\n+  public boolean reEnterShared(ResourceType resourceType, long resourceId)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n     {\n-        stateHolder.incrementActiveClients( this );\n-\n-        try\n-        {\n-            PrimitiveLongIntMap sharedLocks = sharedLockCounts[resourceType.typeId()];\n-            PrimitiveLongIntMap exclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n-            ConcurrentMap<Long,ForsetiLockManager.Lock> resourceTypeLocks = lockMaps[resourceType.typeId()];\n-            for ( long resourceId : resourceIds )\n-            {\n-                if ( releaseLocalLock( resourceType, resourceId, sharedLocks ) )\n-                {\n-                    continue;\n-                }\n-                // Only release if we were not holding an exclusive lock as well\n-                if ( !exclusiveLocks.containsKey( resourceId ) )\n-                {\n-                    releaseGlobalLock( resourceTypeLocks, resourceId );\n-                }\n-            }\n-        }\n-        finally\n-        {\n-            stateHolder.decrementActiveClients();\n-        }\n+      PrimitiveLongIntMap heldShareLocks = sharedLockCounts[resourceType.typeId()];\n+      PrimitiveLongIntMap heldExclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n+\n+      int heldCount = heldShareLocks.get(resourceId);\n+      if (heldCount != -1)\n+      {\n+        // We already have a lock on this, just increment our local reference counter.\n+        heldShareLocks.put(resourceId, Math.incrementExact(heldCount));\n+        return true;\n+      }\n+\n+      if (heldExclusiveLocks.containsKey(resourceId))\n+      {\n+        // We already have an exclusive lock, so just leave that in place. When the exclusive lock is released,\n+        // it will be automatically downgraded to a shared lock, since we bumped the share lock reference count.\n+        heldShareLocks.put(resourceId, 1);\n+        return true;\n+      }\n+\n+      // We didn't hold a lock already, so we cannot re-enter.\n+      return false;\n+    } finally\n+    {\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public void releaseExclusive( ResourceType resourceType, long... resourceIds )\n+  @Override\n+  public boolean reEnterExclusive(ResourceType resourceType, long resourceId)\n+  {\n+    stateHolder.incrementActiveClients(this);\n+    try\n+    {\n+      PrimitiveLongIntMap heldLocks = exclusiveLockCounts[resourceType.typeId()];\n+\n+      int heldCount = heldLocks.get(resourceId);\n+      if (heldCount != -1)\n+      {\n+        // We already have a lock on this, just increment our local reference counter.\n+        heldLocks.put(resourceId, Math.incrementExact(heldCount));\n+        return true;\n+      }\n+\n+      // We didn't hold a lock already, so we cannot re-enter.\n+      return false;\n+    } finally\n     {\n-        stateHolder.incrementActiveClients( this );\n+      stateHolder.decrementActiveClients();\n+    }\n+  }\n+\n+  @Override\n+  public void releaseShared(ResourceType resourceType, long... resourceIds)\n+  {\n+    stateHolder.incrementActiveClients(this);\n \n-        try\n+    try\n+    {\n+      PrimitiveLongIntMap sharedLocks = sharedLockCounts[resourceType.typeId()];\n+      PrimitiveLongIntMap exclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n+      ConcurrentMap<Long, ForsetiLockManager.Lock> resourceTypeLocks = lockMaps[resourceType.typeId()];\n+      for (long resourceId : resourceIds)\n+      {\n+        if (releaseLocalLock(resourceType, resourceId, sharedLocks))\n         {\n-            PrimitiveLongIntMap exclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n-            ConcurrentMap<Long,ForsetiLockManager.Lock> resourceTypeLocks = lockMaps[resourceType.typeId()];\n-            PrimitiveLongIntMap sharedLocks = sharedLockCounts[resourceType.typeId()];\n-            for ( long resourceId : resourceIds )\n-            {\n-                if ( releaseLocalLock( resourceType, resourceId, exclusiveLocks ) )\n-                {\n-                    continue;\n-                }\n-\n-                if ( sharedLocks.containsKey( resourceId ) )\n-                {\n-                    // We are still holding a shared lock, so we will release it to be reused\n-                    ForsetiLockManager.Lock lock = resourceTypeLocks.get( resourceId );\n-                    if ( lock instanceof SharedLock )\n-                    {\n-                        SharedLock sharedLock = (SharedLock) lock;\n-                        if ( sharedLock.isUpdateLock() )\n-                        {\n-                            sharedLock.releaseUpdateLock();\n-                        }\n-                        else\n-                        {\n-                            throw new IllegalStateException( \"Incorrect state of exclusive lock. Lock should be updated \" +\n-                                    \"to exclusive before attempt to release it. Lock: \" + this );\n-                        }\n-                    }\n-                    else\n-                    {\n-                        // in case if current lock is exclusive we swap it to new shared lock\n-                        SharedLock sharedLock = new SharedLock( this );\n-                        resourceTypeLocks.put( resourceId, sharedLock );\n-                    }\n-                }\n-                else\n-                {\n-                    // we do not hold shared lock so we just releasing it\n-                    releaseGlobalLock( resourceTypeLocks, resourceId );\n-                }\n-            }\n+          continue;\n         }\n-        finally\n+        // Only release if we were not holding an exclusive lock as well\n+        if (!exclusiveLocks.containsKey(resourceId))\n         {\n-            stateHolder.decrementActiveClients();\n+          releaseGlobalLock(resourceTypeLocks, resourceId);\n         }\n-    }\n-\n-    private void releaseAllClientLocks()\n+      }\n+    } finally\n     {\n-        // Force the release of all locks held.\n-        for ( int i = 0; i < exclusiveLockCounts.length; i++ )\n-        {\n-            PrimitiveLongIntMap exclusiveLocks = exclusiveLockCounts[i];\n-            PrimitiveLongIntMap sharedLocks = sharedLockCounts[i];\n-\n-            // Begin releasing exclusive locks, as we may hold both exclusive and shared locks on the same resource,\n-            // and so releasing exclusive locks means we can \"throw away\" our shared lock (which would normally have\n-            // been re-instated after releasing the exclusive lock).\n-            if ( exclusiveLocks != null )\n-            {\n-                int size = exclusiveLocks.size();\n-                exclusiveLocks.visitKeys(\n-                        releaseExclusiveAndClearSharedVisitor.initialize( sharedLocks, lockMaps[i] ) );\n-                if ( size <= 32 )\n-                {\n-                    // If the map is small, its fast and nice to GC to clear it. However, if its large, it is\n-                    // 1) Faster to simply allocate a new one and\n-                    // 2) Safer, because we guard against clients getting giant maps over time\n-                    if ( size > 0 )\n-                    {\n-                        exclusiveLocks.clear();\n-                    }\n-                }\n-                else\n-                {\n-                    exclusiveLockCounts[i] = Primitive.longIntMap();\n-                }\n-            }\n-\n-            // Then release all remaining shared locks\n-            if ( sharedLocks != null )\n-            {\n-                int size = sharedLocks.size();\n-                sharedLocks.visitKeys( releaseSharedDontCheckExclusiveVisitor.initialize( lockMaps[i] ) );\n-                if ( size <= 32 )\n-                {\n-                    // If the map is small, its fast and nice to GC to clear it. However, if its large, it is\n-                    // 1) Faster to simply allocate a new one and\n-                    // 2) Safer, because we guard against clients getting giant maps over time\n-                    if ( size > 0 )\n-                    {\n-                        sharedLocks.clear();\n-                    }\n-                }\n-                else\n-                {\n-                    sharedLockCounts[i] = Primitive.longIntMap();\n-                }\n-            }\n-        }\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    @Override\n-    public void prepare()\n-    {\n-        stateHolder.prepare( this );\n-    }\n+  @Override\n+  public void releaseExclusive(ResourceType resourceType, long... resourceIds)\n+  {\n+    stateHolder.incrementActiveClients(this);\n \n-    @Override\n-    public void stop()\n+    try\n     {\n-        // marking client as closed\n-        if ( stateHolder.stopClient() )\n+      PrimitiveLongIntMap exclusiveLocks = exclusiveLockCounts[resourceType.typeId()];\n+      ConcurrentMap<Long, ForsetiLockManager.Lock> resourceTypeLocks = lockMaps[resourceType.typeId()];\n+      PrimitiveLongIntMap sharedLocks = sharedLockCounts[resourceType.typeId()];\n+      for (long resourceId : resourceIds)\n+      {\n+        if (releaseLocalLock(resourceType, resourceId, exclusiveLocks))\n         {\n-            // waiting for all operations to be completed\n-            waitForAllClientsToLeave();\n-            releaseAllLocks();\n+          continue;\n         }\n-    }\n \n-    private void waitForAllClientsToLeave()\n-    {\n-        while ( stateHolder.hasActiveClients() )\n+        if (sharedLocks.containsKey(resourceId))\n         {\n-            try\n+          // We are still holding a shared lock, so we will release it to be reused\n+          ForsetiLockManager.Lock lock = resourceTypeLocks.get(resourceId);\n+          if (lock instanceof SharedLock)\n+          {\n+            SharedLock sharedLock = (SharedLock) lock;\n+            if (sharedLock.isUpdateLock())\n             {\n-                Thread.sleep( 10 );\n-            }\n-            catch ( InterruptedException e )\n+              sharedLock.releaseUpdateLock();\n+            } else\n             {\n-                Thread.interrupted();\n+              throw new IllegalStateException(\"Incorrect state of exclusive lock. Lock should be updated \" +\n+                  \"to exclusive before attempt to release it. Lock: \" + this);\n             }\n+          } else\n+          {\n+            // in case if current lock is exclusive we swap it to new shared lock\n+            SharedLock sharedLock = new SharedLock(this);\n+            resourceTypeLocks.put(resourceId, sharedLock);\n+          }\n+        } else\n+        {\n+          // we do not hold shared lock so we just releasing it\n+          releaseGlobalLock(resourceTypeLocks, resourceId);\n         }\n-    }\n-\n-    @Override\n-    public void close()\n+      }\n+    } finally\n     {\n-        stateHolder.closeClient();\n-        waitForAllClientsToLeave();\n-        releaseAllLocks();\n-        clientPool.release( this );\n+      stateHolder.decrementActiveClients();\n     }\n+  }\n \n-    private void releaseAllLocks()\n+  private void releaseAllClientLocks()\n+  {\n+    // Force the release of all locks held.\n+    for (int i = 0; i < exclusiveLockCounts.length; i++)\n     {\n-        if ( hasLocks )\n+      PrimitiveLongIntMap exclusiveLocks = exclusiveLockCounts[i];\n+      PrimitiveLongIntMap sharedLocks = sharedLockCounts[i];\n+\n+      // Begin releasing exclusive locks, as we may hold both exclusive and shared locks on the same resource,\n+      // and so releasing exclusive locks means we can \"throw away\" our shared lock (which would normally have\n+      // been re-instated after releasing the exclusive lock).\n+      if (exclusiveLocks != null)\n+      {\n+        int size = exclusiveLocks.size();\n+        exclusiveLocks.visitKeys(\n+            releaseExclusiveAndClearSharedVisitor.initialize(sharedLocks, lockMaps[i]));\n+        if (size <= 32)\n+        {\n+          // If the map is small, its fast and nice to GC to clear it. However, if its large, it is\n+          // 1) Faster to simply allocate a new one and\n+          // 2) Safer, because we guard against clients getting giant maps over time\n+          if (size > 0)\n+          {\n+            exclusiveLocks.clear();\n+          }\n+        } else\n         {\n-            releaseAllClientLocks();\n-            clearWaitList();\n-            hasLocks = false;\n+          exclusiveLockCounts[i] = Primitive.longIntMap();\n         }\n+      }\n+\n+      // Then release all remaining shared locks\n+      if (sharedLocks != null)\n+      {\n+        int size = sharedLocks.size();\n+        sharedLocks.visitKeys(releaseSharedDontCheckExclusiveVisitor.initialize(lockMaps[i]));\n+        if (size <= 32)\n+        {\n+          // If the map is small, its fast and nice to GC to clear it. However, if its large, it is\n+          // 1) Faster to simply allocate a new one and\n+          // 2) Safer, because we guard against clients getting giant maps over time\n+          if (size > 0)\n+          {\n+            sharedLocks.clear();\n+          }\n+        } else\n+        {\n+          sharedLockCounts[i] = Primitive.longIntMap();\n+        }\n+      }\n     }\n-\n-    @Override\n-    public int getLockSessionId()\n+  }\n+\n+  @Override\n+  public void prepare()\n+  {\n+    stateHolder.prepare(this);\n+  }\n+\n+  @Override\n+  public void stop()\n+  {\n+    // marking client as closed\n+    if (stateHolder.stopClient())\n     {\n-        return clientId;\n+      // waiting for all operations to be completed\n+      waitForAllClientsToLeave();\n+      releaseAllLocks();\n     }\n+  }\n \n-    @Override\n-    public Stream<ActiveLock> activeLocks()\n+  private void waitForAllClientsToLeave()\n+  {\n+    while (stateHolder.hasActiveClients())\n     {\n-        List<ActiveLock> locks = new ArrayList<>();\n-        collectActiveLocks( exclusiveLockCounts, locks, ActiveLock.Factory.EXCLUSIVE_LOCK );\n-        collectActiveLocks( sharedLockCounts, locks, ActiveLock.Factory.SHARED_LOCK );\n-        return locks.stream();\n+      try\n+      {\n+        Thread.sleep(10);\n+      } catch (InterruptedException e)\n+      {\n+        Thread.interrupted();\n+      }\n     }\n-\n-    @Override\n-    public long activeLockCount()\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    stateHolder.closeClient();\n+    waitForAllClientsToLeave();\n+    releaseAllLocks();\n+    clientPool.release(this);\n+  }\n+\n+  private void releaseAllLocks()\n+  {\n+    if (hasLocks)\n     {\n-        return countLocks( exclusiveLockCounts ) + countLocks( sharedLockCounts );\n+      releaseAllClientLocks();\n+      clearWaitList();\n+      hasLocks = false;\n     }\n-\n-    private static void collectActiveLocks(\n-            PrimitiveLongIntMap[] counts,\n-            List<ActiveLock> locks,\n-            ActiveLock.Factory activeLock )\n+  }\n+\n+  @Override\n+  public int getLockSessionId()\n+  {\n+    return clientId;\n+  }\n+\n+  @Override\n+  public Stream<ActiveLock> activeLocks()\n+  {\n+    List<ActiveLock> locks = new ArrayList<>();\n+    collectActiveLocks(exclusiveLockCounts, locks, ActiveLock.Factory.EXCLUSIVE_LOCK);\n+    collectActiveLocks(sharedLockCounts, locks, ActiveLock.Factory.SHARED_LOCK);\n+    return locks.stream();\n+  }\n+\n+  @Override\n+  public long activeLockCount()\n+  {\n+    return countLocks(exclusiveLockCounts) + countLocks(sharedLockCounts);\n+  }\n+\n+  private static void collectActiveLocks(\n+      PrimitiveLongIntMap[] counts,\n+      List<ActiveLock> locks,\n+      ActiveLock.Factory activeLock)\n+  {\n+    for (int typeId = 0; typeId < counts.length; typeId++)\n     {\n-        for ( int typeId = 0; typeId < counts.length; typeId++ )\n+      PrimitiveLongIntMap lockCounts = counts[typeId];\n+      if (lockCounts != null)\n+      {\n+        ResourceType resourceType = ResourceTypes.fromId(typeId);\n+        lockCounts.visitEntries((resourceId, count) ->\n         {\n-            PrimitiveLongIntMap lockCounts = counts[typeId];\n-            if ( lockCounts != null )\n-            {\n-                ResourceType resourceType = ResourceTypes.fromId( typeId );\n-                lockCounts.visitEntries( ( resourceId, count ) ->\n-                {\n-                    locks.add( activeLock.create( resourceType, resourceId ) );\n-                    return false;\n-                } );\n-            }\n-        }\n+          locks.add(activeLock.create(resourceType, resourceId));\n+          return false;\n+        });\n+      }\n     }\n+  }\n \n-    private long countLocks( PrimitiveLongIntMap[] lockCounts )\n+  private long countLocks(PrimitiveLongIntMap[] lockCounts)\n+  {\n+    long count = 0;\n+    for (PrimitiveLongIntMap lockCount : lockCounts)\n     {\n-        long count = 0;\n-        for ( PrimitiveLongIntMap lockCount : lockCounts )\n-        {\n-            if ( lockCount != null )\n-            {\n-                count += lockCount.size();\n-            }\n-        }\n-        return count;\n+      if (lockCount != null)\n+      {\n+        count += lockCount.size();\n+      }\n     }\n-\n-    int waitListSize()\n+    return count;\n+  }\n+\n+  int waitListSize()\n+  {\n+    return waitList.size();\n+  }\n+\n+  void copyWaitListTo(SimpleBitSet other)\n+  {\n+    other.put(waitList);\n+  }\n+\n+  boolean isWaitingFor(int clientId)\n+  {\n+    return clientId != this.clientId && waitList.contains(clientId);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return waitList.size();\n+      return true;\n     }\n-\n-    void copyWaitListTo( SimpleBitSet other )\n+    if (o == null || getClass() != o.getClass())\n     {\n-        other.put( waitList );\n+      return false;\n     }\n \n-    boolean isWaitingFor( int clientId )\n+    ForsetiClient that = (ForsetiClient) o;\n+\n+    return clientId == that.clientId;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return clientId;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return String.format(\"ForsetiClient[%d]\", clientId);\n+  }\n+\n+  /**\n+   * Release a lock from the global pool.\n+   */\n+  private void releaseGlobalLock(ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap, long resourceId)\n+  {\n+    ForsetiLockManager.Lock lock = lockMap.get(resourceId);\n+    if (lock instanceof ExclusiveLock)\n     {\n-        return clientId != this.clientId && waitList.contains( clientId );\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n+      lockMap.remove(resourceId);\n+    } else if (lock instanceof SharedLock && ((SharedLock) lock).release(this))\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        ForsetiClient that = (ForsetiClient) o;\n-\n-        return clientId == that.clientId;\n+      // We were the last to hold this lock, it is now dead and we should remove it.\n+      // Also cleaning updater referense that can hold lock in memory\n+      ((SharedLock) lock).cleanUpdateHolder();\n+      lockMap.remove(resourceId);\n     }\n-\n-    @Override\n-    public int hashCode()\n+  }\n+\n+  /**\n+   * Release a lock locally, and return true if we still hold more references to that lock.\n+   */\n+  private boolean releaseLocalLock(ResourceType type, long resourceId, PrimitiveLongIntMap localLocks)\n+  {\n+    int lockCount = localLocks.remove(resourceId);\n+    if (lockCount == -1)\n     {\n-        return clientId;\n+      throw new IllegalStateException(this + \" cannot release lock that it does not hold: \" +\n+          type + \"[\" + resourceId + \"].\");\n     }\n \n-    @Override\n-    public String toString()\n+    if (lockCount > 1)\n     {\n-        return String.format( \"ForsetiClient[%d]\", clientId );\n+      localLocks.put(resourceId, lockCount - 1);\n+      return true;\n     }\n-\n-    /** Release a lock from the global pool. */\n-    private void releaseGlobalLock( ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap, long resourceId )\n+    return false;\n+  }\n+\n+  /**\n+   * Attempt to upgrade a share lock to an exclusive lock, grabbing the share lock if we don't hold it.\n+   **/\n+  private boolean tryUpgradeSharedToExclusive(\n+      LockTracer tracer,\n+      LockWaitEvent waitEvent,\n+      ResourceType resourceType,\n+      ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap,\n+      long resourceId,\n+      SharedLock sharedLock,\n+      long waitStartMillis)\n+      throws AcquireLockTimeoutException\n+  {\n+    int tries = 0;\n+    boolean holdsSharedLock = sharedLockCounts[resourceType.typeId()].containsKey(resourceId);\n+    if (!holdsSharedLock)\n     {\n-        ForsetiLockManager.Lock lock = lockMap.get( resourceId );\n-        if ( lock instanceof ExclusiveLock )\n+      // We don't hold the shared lock, we need to grab it to upgrade it to an exclusive one\n+      if (!sharedLock.acquire(this))\n+      {\n+        return false;\n+      }\n+\n+      try\n+      {\n+        if (tryUpgradeToExclusiveWithShareLockHeld(tracer, waitEvent, resourceType, resourceId, sharedLock,\n+            tries, waitStartMillis))\n         {\n-            lockMap.remove( resourceId );\n-        }\n-        else if ( lock instanceof SharedLock && ((SharedLock) lock).release( this ) )\n+          return true;\n+        } else\n         {\n-            // We were the last to hold this lock, it is now dead and we should remove it.\n-            // Also cleaning updater referense that can hold lock in memory\n-            ((SharedLock) lock).cleanUpdateHolder();\n-            lockMap.remove( resourceId );\n+          releaseGlobalLock(lockMap, resourceId);\n+          return false;\n         }\n+      } catch (Throwable e)\n+      {\n+        releaseGlobalLock(lockMap, resourceId);\n+        throw e;\n+      }\n+    } else\n+    {\n+      // We do hold the shared lock, so no reason to deal with the complexity in the case above.\n+      return tryUpgradeToExclusiveWithShareLockHeld(tracer, waitEvent, resourceType, resourceId, sharedLock,\n+          tries, waitStartMillis);\n     }\n-\n-    /** Release a lock locally, and return true if we still hold more references to that lock. */\n-    private boolean releaseLocalLock( ResourceType type, long resourceId, PrimitiveLongIntMap localLocks )\n+  }\n+\n+  /**\n+   * Attempt to upgrade a share lock that we hold to an exclusive lock.\n+   */\n+  private boolean tryUpgradeToExclusiveWithShareLockHeld(\n+      LockTracer tracer, LockWaitEvent priorEvent, ResourceType resourceType, long resourceId,\n+      SharedLock sharedLock, int tries, long waitStartMillis) throws AcquireLockTimeoutException\n+  {\n+    if (sharedLock.tryAcquireUpdateLock(this))\n     {\n-        int lockCount = localLocks.remove( resourceId );\n-        if ( lockCount == -1 )\n+      LockWaitEvent waitEvent = null;\n+      try\n+      {\n+        // Now we just wait for all clients to release the the share lock\n+        while (sharedLock.numberOfHolders() > 1)\n         {\n-            throw new IllegalStateException( this + \" cannot release lock that it does not hold: \" +\n-                                             type + \"[\" + resourceId + \"].\" );\n+          assertValid(waitStartMillis, resourceType, resourceId);\n+          if (waitEvent == null && priorEvent == null)\n+          {\n+            waitEvent = tracer.waitForLock(true, resourceType, resourceId);\n+          }\n+          waitFor(sharedLock, resourceType, resourceId, tries++);\n         }\n \n-        if ( lockCount > 1 )\n+        return true;\n+      } catch (Throwable e)\n+      {\n+        sharedLock.releaseUpdateLock();\n+        if (e instanceof DeadlockDetectedException || e instanceof LockClientStoppedException)\n         {\n-            localLocks.put( resourceId, lockCount - 1 );\n-            return true;\n+          throw (RuntimeException) e;\n         }\n-        return false;\n-    }\n-\n-    /**\n-     * Attempt to upgrade a share lock to an exclusive lock, grabbing the share lock if we don't hold it.\n-     **/\n-    private boolean tryUpgradeSharedToExclusive(\n-            LockTracer tracer,\n-            LockWaitEvent waitEvent,\n-            ResourceType resourceType,\n-            ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap,\n-            long resourceId,\n-            SharedLock sharedLock,\n-            long waitStartMillis )\n-            throws AcquireLockTimeoutException\n-    {\n-        int tries = 0;\n-        boolean holdsSharedLock = sharedLockCounts[resourceType.typeId()].containsKey( resourceId );\n-        if ( !holdsSharedLock )\n+        throw new TransactionFailureException(\"Failed to upgrade shared lock to exclusive: \" + sharedLock, e);\n+      } finally\n+      {\n+        if (waitEvent != null)\n         {\n-            // We don't hold the shared lock, we need to grab it to upgrade it to an exclusive one\n-            if ( !sharedLock.acquire( this ) )\n-            {\n-                return false;\n-            }\n-\n-            try\n-            {\n-                if ( tryUpgradeToExclusiveWithShareLockHeld( tracer, waitEvent, resourceType, resourceId, sharedLock,\n-                        tries, waitStartMillis ) )\n-                {\n-                    return true;\n-                }\n-                else\n-                {\n-                    releaseGlobalLock( lockMap, resourceId );\n-                    return false;\n-                }\n-            }\n-            catch ( Throwable e )\n-            {\n-                releaseGlobalLock( lockMap, resourceId );\n-                throw e;\n-            }\n-        }\n-        else\n-        {\n-            // We do hold the shared lock, so no reason to deal with the complexity in the case above.\n-            return tryUpgradeToExclusiveWithShareLockHeld( tracer, waitEvent, resourceType, resourceId, sharedLock,\n-                    tries, waitStartMillis );\n+          waitEvent.close();\n         }\n+        clearWaitList();\n+        waitingForLock = null;\n+      }\n     }\n-\n-    /** Attempt to upgrade a share lock that we hold to an exclusive lock. */\n-    private boolean tryUpgradeToExclusiveWithShareLockHeld(\n-            LockTracer tracer, LockWaitEvent priorEvent, ResourceType resourceType, long resourceId,\n-            SharedLock sharedLock, int tries, long waitStartMillis ) throws AcquireLockTimeoutException\n+    return false;\n+  }\n+\n+  private void clearWaitList()\n+  {\n+    waitListCheckPoint = waitList.checkPointAndPut(waitListCheckPoint, clientId);\n+  }\n+\n+  private void waitFor(ForsetiLockManager.Lock lock, ResourceType type, long resourceId, int tries)\n+  {\n+    waitingForLock = lock;\n+    clearWaitList();\n+    lock.copyHolderWaitListsInto(waitList);\n+    applyWaitStrategy(type, tries);\n+\n+    int b = lock.detectDeadlock(id());\n+    if (b != -1 && deadlockResolutionStrategy.shouldAbort(this, clientById.apply(b)))\n     {\n-        if ( sharedLock.tryAcquireUpdateLock( this ) )\n+      // Force the operations below to happen after the reads we do for deadlock\n+      // detection in the lines above, as a way to cut down on false-positive deadlocks\n+      UnsafeUtil.loadFence();\n+\n+      // Create message before we clear the wait-list, to lower the chance of the message being insane\n+      String message = this + \" can't acquire \" + lock + \" on \" + type + \"(\" + resourceId +\n+          \"), because holders of that lock \" +\n+          \"are waiting for \" + this + \".\\n Wait list:\" + lock.describeWaitList();\n+\n+      // Minimize the risk of false positives by double-checking that the deadlock remains\n+      // after we've generated a description of it.\n+      if (lock.detectDeadlock(id()) != -1)\n+      {\n+        // If the deadlock is real, then an owner of this lock must be (transitively) waiting on a lock that\n+        // we own. So to verify the deadlock, we traverse the lock owners and their `waitingForLock` fields,\n+        // to find a lock that has us among the owners.\n+        // We only act upon the result of this method if the `tries` count is above some threshold. The reason\n+        // is that the Lock.collectOwners, which is algorithm relies upon, is inherently racy, and so only\n+        // reduces the probably of a false positive, but does not eliminate them.\n+        if (isDeadlockReal(lock, tries))\n         {\n-            LockWaitEvent waitEvent = null;\n-            try\n-            {\n-                // Now we just wait for all clients to release the the share lock\n-                while ( sharedLock.numberOfHolders() > 1 )\n-                {\n-                    assertValid( waitStartMillis, resourceType, resourceId );\n-                    if ( waitEvent == null && priorEvent == null )\n-                    {\n-                        waitEvent = tracer.waitForLock( true, resourceType, resourceId );\n-                    }\n-                    waitFor( sharedLock, resourceType, resourceId, tries++ );\n-                }\n-\n-                return true;\n-            }\n-            catch ( Throwable e )\n-            {\n-                sharedLock.releaseUpdateLock();\n-                if ( e instanceof DeadlockDetectedException || e instanceof LockClientStoppedException )\n-                {\n-                    throw (RuntimeException) e;\n-                }\n-                throw new TransactionFailureException( \"Failed to upgrade shared lock to exclusive: \" + sharedLock, e );\n-            }\n-            finally\n-            {\n-                if ( waitEvent != null )\n-                {\n-                    waitEvent.close();\n-                }\n-                clearWaitList();\n-                waitingForLock = null;\n-            }\n+          // After checking several times, this really does look like a real deadlock.\n+          throw new DeadlockDetectedException(message);\n         }\n-        return false;\n+      }\n     }\n+  }\n \n-    private void clearWaitList()\n-    {\n-        waitListCheckPoint = waitList.checkPointAndPut( waitListCheckPoint, clientId );\n-    }\n+  private boolean isDeadlockReal(ForsetiLockManager.Lock lock, int tries)\n+  {\n+    Set<ForsetiLockManager.Lock> waitedUpon = new HashSet<>();\n+    Set<ForsetiClient> owners = new HashSet<>();\n+    Set<ForsetiLockManager.Lock> nextWaitedUpon = new HashSet<>();\n+    Set<ForsetiClient> nextOwners = new HashSet<>();\n+    lock.collectOwners(owners);\n \n-    private void waitFor( ForsetiLockManager.Lock lock, ResourceType type, long resourceId, int tries )\n+    do\n     {\n-        waitingForLock = lock;\n-        clearWaitList();\n-        lock.copyHolderWaitListsInto( waitList );\n-        applyWaitStrategy( type, tries );\n-\n-        int b = lock.detectDeadlock( id() );\n-        if ( b != -1 && deadlockResolutionStrategy.shouldAbort( this, clientById.apply( b ) ) )\n+      waitedUpon.addAll(nextWaitedUpon);\n+      collectNextOwners(waitedUpon, owners, nextWaitedUpon, nextOwners);\n+      if (nextOwners.contains(this) && tries > 20)\n+      {\n+        // Worrying... let's take a deep breath\n+        nextOwners.clear();\n+        LockSupport.parkNanos(TimeUnit.MILLISECONDS.toNanos(10));\n+        // ... and check again\n+        collectNextOwners(waitedUpon, owners, nextWaitedUpon, nextOwners);\n+        if (nextOwners.contains(this))\n         {\n-            // Force the operations below to happen after the reads we do for deadlock\n-            // detection in the lines above, as a way to cut down on false-positive deadlocks\n-            UnsafeUtil.loadFence();\n-\n-            // Create message before we clear the wait-list, to lower the chance of the message being insane\n-            String message = this + \" can't acquire \" + lock + \" on \" + type + \"(\" + resourceId +\n-                             \"), because holders of that lock \" +\n-                             \"are waiting for \" + this + \".\\n Wait list:\" + lock.describeWaitList();\n-\n-            // Minimize the risk of false positives by double-checking that the deadlock remains\n-            // after we've generated a description of it.\n-            if ( lock.detectDeadlock( id() ) != -1 )\n-            {\n-                // If the deadlock is real, then an owner of this lock must be (transitively) waiting on a lock that\n-                // we own. So to verify the deadlock, we traverse the lock owners and their `waitingForLock` fields,\n-                // to find a lock that has us among the owners.\n-                // We only act upon the result of this method if the `tries` count is above some threshold. The reason\n-                // is that the Lock.collectOwners, which is algorithm relies upon, is inherently racy, and so only\n-                // reduces the probably of a false positive, but does not eliminate them.\n-                if ( isDeadlockReal( lock, tries ) )\n-                {\n-                    // After checking several times, this really does look like a real deadlock.\n-                    throw new DeadlockDetectedException( message );\n-                }\n-            }\n+          // Yes, this deadlock looks real.\n+          return true;\n         }\n+      }\n+      owners.clear();\n+      Set<ForsetiClient> ownersTmp = owners;\n+      owners = nextOwners;\n+      nextOwners = ownersTmp;\n     }\n-\n-    private boolean isDeadlockReal( ForsetiLockManager.Lock lock, int tries )\n+    while (!nextWaitedUpon.isEmpty());\n+    // Nope, we didn't find any real wait cycles.\n+    return false;\n+  }\n+\n+  private void collectNextOwners(Set<ForsetiLockManager.Lock> waitedUpon, Set<ForsetiClient> owners,\n+                                 Set<ForsetiLockManager.Lock> nextWaitedUpon, Set<ForsetiClient> nextOwners)\n+  {\n+    nextWaitedUpon.clear();\n+    for (ForsetiClient owner : owners)\n     {\n-        Set<ForsetiLockManager.Lock> waitedUpon = new HashSet<>();\n-        Set<ForsetiClient> owners = new HashSet<>();\n-        Set<ForsetiLockManager.Lock> nextWaitedUpon = new HashSet<>();\n-        Set<ForsetiClient> nextOwners = new HashSet<>();\n-        lock.collectOwners( owners );\n-\n-        do\n-        {\n-            waitedUpon.addAll( nextWaitedUpon );\n-            collectNextOwners( waitedUpon, owners, nextWaitedUpon, nextOwners );\n-            if ( nextOwners.contains( this ) && tries > 20 )\n-            {\n-                // Worrying... let's take a deep breath\n-                nextOwners.clear();\n-                LockSupport.parkNanos( TimeUnit.MILLISECONDS.toNanos( 10 ) );\n-                // ... and check again\n-                collectNextOwners( waitedUpon, owners, nextWaitedUpon, nextOwners );\n-                if ( nextOwners.contains( this ) )\n-                {\n-                    // Yes, this deadlock looks real.\n-                    return true;\n-                }\n-            }\n-            owners.clear();\n-            Set<ForsetiClient> ownersTmp = owners;\n-            owners = nextOwners;\n-            nextOwners = ownersTmp;\n-        }\n-        while ( !nextWaitedUpon.isEmpty() );\n-        // Nope, we didn't find any real wait cycles.\n-        return false;\n+      ForsetiLockManager.Lock waitingForLock = owner.waitingForLock;\n+      if (waitingForLock != null && !waitedUpon.contains(waitingForLock))\n+      {\n+        nextWaitedUpon.add(waitingForLock);\n+      }\n     }\n-\n-    private void collectNextOwners( Set<ForsetiLockManager.Lock> waitedUpon, Set<ForsetiClient> owners,\n-                                    Set<ForsetiLockManager.Lock> nextWaitedUpon, Set<ForsetiClient> nextOwners )\n+    for (ForsetiLockManager.Lock lck : nextWaitedUpon)\n     {\n-        nextWaitedUpon.clear();\n-        for ( ForsetiClient owner : owners )\n-        {\n-            ForsetiLockManager.Lock waitingForLock = owner.waitingForLock;\n-            if ( waitingForLock != null && !waitedUpon.contains( waitingForLock ) )\n-            {\n-                nextWaitedUpon.add( waitingForLock );\n-            }\n-        }\n-        for ( ForsetiLockManager.Lock lck : nextWaitedUpon )\n-        {\n-            lck.collectOwners( nextOwners );\n-        }\n+      lck.collectOwners(nextOwners);\n     }\n-\n-    /**\n-     * @return an approximate (assuming data is concurrently being edited) count of the number of locks held by this\n-     * client.\n-     */\n-    int lockCount()\n+  }\n+\n+  /**\n+   * @return an approximate (assuming data is concurrently being edited) count of the number of locks held by this\n+   * client.\n+   */\n+  int lockCount()\n+  {\n+    int count = 0;\n+    for (PrimitiveLongIntMap sharedLockCount : sharedLockCounts)\n     {\n-        int count = 0;\n-        for ( PrimitiveLongIntMap sharedLockCount : sharedLockCounts )\n-        {\n-            count += sharedLockCount.size();\n-        }\n-        for ( PrimitiveLongIntMap exclusiveLockCount : exclusiveLockCounts )\n-        {\n-            count += exclusiveLockCount.size();\n-        }\n-        return count;\n+      count += sharedLockCount.size();\n     }\n-\n-    String describeWaitList()\n+    for (PrimitiveLongIntMap exclusiveLockCount : exclusiveLockCounts)\n     {\n-        StringBuilder sb = new StringBuilder( format( \"%nClient[%d] waits for [\", id() ) );\n-        PrimitiveIntIterator iter = waitList.iterator();\n-        for ( boolean first = true; iter.hasNext(); )\n-        {\n-            int next = iter.next();\n-            if ( next == clientId )\n-            {\n-                // Skip our own id from the wait list, that's an implementation detail\n-                continue;\n-            }\n-            sb.append( (!first) ? \",\" : \"\" ).append( next );\n-            first = false;\n-        }\n-        sb.append( \"]\" );\n-        return sb.toString();\n+      count += exclusiveLockCount.size();\n     }\n-\n-    public int id()\n+    return count;\n+  }\n+\n+  String describeWaitList()\n+  {\n+    StringBuilder sb = new StringBuilder(format(\"%nClient[%d] waits for [\", id()));\n+    PrimitiveIntIterator iter = waitList.iterator();\n+    for (boolean first = true; iter.hasNext(); )\n     {\n-        return clientId;\n+      int next = iter.next();\n+      if (next == clientId)\n+      {\n+        // Skip our own id from the wait list, that's an implementation detail\n+        continue;\n+      }\n+      sb.append((!first) ? \",\" : \"\").append(next);\n+      first = false;\n     }\n-\n-    private void applyWaitStrategy( ResourceType resourceType, int tries )\n+    sb.append(\"]\");\n+    return sb.toString();\n+  }\n+\n+  public int id()\n+  {\n+    return clientId;\n+  }\n+\n+  private void applyWaitStrategy(ResourceType resourceType, int tries)\n+  {\n+    WaitStrategy<AcquireLockTimeoutException> waitStrategy = waitStrategies[resourceType.typeId()];\n+    waitStrategy.apply(tries);\n+  }\n+\n+  private void assertValid(long waitStartMillis, ResourceType resourceType, long resourceId)\n+  {\n+    assertNotStopped();\n+    assertNotExpired(waitStartMillis, resourceType, resourceId);\n+  }\n+\n+  private void assertNotStopped()\n+  {\n+    if (stateHolder.isStopped())\n     {\n-        WaitStrategy<AcquireLockTimeoutException> waitStrategy = waitStrategies[resourceType.typeId()];\n-        waitStrategy.apply( tries );\n+      throw new LockClientStoppedException(this);\n     }\n+  }\n \n-    private void assertValid( long waitStartMillis, ResourceType resourceType, long resourceId )\n+  private void assertNotExpired(long waitStartMillis, ResourceType resourceType, long resourceId)\n+  {\n+    if (lockAcquisitionTimeoutMillis > 0)\n     {\n-        assertNotStopped();\n-        assertNotExpired( waitStartMillis, resourceType, resourceId );\n+      if ((lockAcquisitionTimeoutMillis + waitStartMillis) < clock.millis())\n+      {\n+        throw new LockAcquisitionTimeoutException(resourceType, resourceId, lockAcquisitionTimeoutMillis);\n+      }\n     }\n+  }\n \n-    private void assertNotStopped()\n+  // Visitors used for bulk ops on the lock maps (such as releasing all locks)\n+\n+  /**\n+   * Release all shared locks, assuming that there will be no exclusive locks held by this client, such that there\n+   * is no need to check for those. It is used when releasing all locks.\n+   */\n+  private class ReleaseSharedDontCheckExclusiveVisitor implements PrimitiveLongVisitor<RuntimeException>\n+  {\n+    private ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap;\n+\n+    private PrimitiveLongVisitor<RuntimeException> initialize(ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap)\n     {\n-        if ( stateHolder.isStopped() )\n-        {\n-            throw new LockClientStoppedException( this );\n-        }\n+      this.lockMap = lockMap;\n+      return this;\n     }\n \n-    private void assertNotExpired( long waitStartMillis, ResourceType resourceType, long resourceId )\n+    @Override\n+    public boolean visited(long resourceId)\n     {\n-        if ( lockAcquisitionTimeoutMillis > 0 )\n-        {\n-            if ( (lockAcquisitionTimeoutMillis + waitStartMillis) < clock.millis() )\n-            {\n-                throw new LockAcquisitionTimeoutException( resourceType, resourceId, lockAcquisitionTimeoutMillis );\n-            }\n-        }\n+      releaseGlobalLock(lockMap, resourceId);\n+      return false;\n     }\n-\n-    // Visitors used for bulk ops on the lock maps (such as releasing all locks)\n-\n-    /**\n-     * Release all shared locks, assuming that there will be no exclusive locks held by this client, such that there\n-     * is no need to check for those. It is used when releasing all locks.\n-     */\n-    private class ReleaseSharedDontCheckExclusiveVisitor implements PrimitiveLongVisitor<RuntimeException>\n+  }\n+\n+  /**\n+   * Release exclusive locks and remove any local reference to the shared lock.\n+   * This is an optimization used when releasing all locks.\n+   */\n+  private class ReleaseExclusiveLocksAndClearSharedVisitor implements PrimitiveLongVisitor<RuntimeException>\n+  {\n+    private PrimitiveLongIntMap sharedLockCounts;\n+    private ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap;\n+\n+    private PrimitiveLongVisitor<RuntimeException> initialize(PrimitiveLongIntMap sharedLockCounts,\n+                                                              ConcurrentMap<Long, ForsetiLockManager.Lock> lockMap)\n     {\n-        private ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap;\n-\n-        private PrimitiveLongVisitor<RuntimeException> initialize( ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap )\n-        {\n-            this.lockMap = lockMap;\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean visited( long resourceId )\n-        {\n-            releaseGlobalLock( lockMap, resourceId );\n-            return false;\n-        }\n+      this.sharedLockCounts = sharedLockCounts;\n+      this.lockMap = lockMap;\n+      return this;\n     }\n \n-    /**\n-     * Release exclusive locks and remove any local reference to the shared lock.\n-     * This is an optimization used when releasing all locks.\n-     */\n-    private class ReleaseExclusiveLocksAndClearSharedVisitor implements PrimitiveLongVisitor<RuntimeException>\n+    @Override\n+    public boolean visited(long resourceId)\n     {\n-        private PrimitiveLongIntMap sharedLockCounts;\n-        private ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap;\n-\n-        private PrimitiveLongVisitor<RuntimeException> initialize( PrimitiveLongIntMap sharedLockCounts,\n-                                                                   ConcurrentMap<Long,ForsetiLockManager.Lock> lockMap )\n-        {\n-            this.sharedLockCounts = sharedLockCounts;\n-            this.lockMap = lockMap;\n-            return this;\n-        }\n-\n-        @Override\n-        public boolean visited( long resourceId )\n-        {\n-            releaseGlobalLock( lockMap, resourceId );\n-\n-            // If we hold this as a shared lock, we can throw that shared lock away directly, since we haven't\n-            // followed the down-grade protocol.\n-            if ( sharedLockCounts != null )\n-            {\n-                sharedLockCounts.remove( resourceId );\n-            }\n-            return false;\n-        }\n+      releaseGlobalLock(lockMap, resourceId);\n+\n+      // If we hold this as a shared lock, we can throw that shared lock away directly, since we haven't\n+      // followed the down-grade protocol.\n+      if (sharedLockCounts != null)\n+      {\n+        sharedLockCounts.remove(resourceId);\n+      }\n+      return false;\n     }\n+  }\n }\n",
            "diff_size": 1522
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}