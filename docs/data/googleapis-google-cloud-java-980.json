{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "980",
    "information": {
        "errors": [
            {
                "line": "90",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 111).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    expect(resourceManager.options()).andReturn(mockOptions).times(4);\n    replay(resourceManager);\n    Project.Builder builder = new Project.Builder(new Project(resourceManager, new ProjectInfo.BuilderImpl()));\n    Project project = builder.name(NAME)\n        .projectId(PROJECT_ID)\n        .labels(LABELS)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/980/ProjectTest.java\nindex 80e35837997..4906683120a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/980/ProjectTest.java\n@@ -87,7 +87,8 @@ public class ProjectTest {\n     initializeExpectedProject(4);\n     expect(resourceManager.options()).andReturn(mockOptions).times(4);\n     replay(resourceManager);\n-    Project.Builder builder = new Project.Builder(new Project(resourceManager, new ProjectInfo.BuilderImpl()));\n+    Project.Builder builder =\n+        new Project.Builder(new Project(resourceManager, new ProjectInfo.BuilderImpl()));\n     Project project = builder.name(NAME)\n         .projectId(PROJECT_ID)\n         .labels(LABELS)\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/980/ProjectTest.java\nindex 80e35837997..8375ba35f4c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/980/ProjectTest.java\n@@ -34,6 +34,7 @@ import org.junit.Test;\n import java.util.Map;\n \n public class ProjectTest {\n+\n   private static final String PROJECT_ID = \"project-id\";\n   private static final String NAME = \"myProj\";\n   private static final Map<String, String> LABELS = ImmutableMap.of(\"k1\", \"v1\", \"k2\", \"v2\");\n@@ -202,4 +203,4 @@ public class ProjectTest {\n     assertEquals(expected.state(), value.state());\n     assertEquals(expected.parent(), value.parent());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/980/ProjectTest.java\nindex 80e35837997..32d972b1a02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/980/ProjectTest.java\n@@ -26,28 +26,21 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n \n import com.google.common.collect.ImmutableMap;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-\n import java.util.Map;\n \n+\n public class ProjectTest {\n+\n   private static final String PROJECT_ID = \"project-id\";\n   private static final String NAME = \"myProj\";\n   private static final Map<String, String> LABELS = ImmutableMap.of(\"k1\", \"v1\", \"k2\", \"v2\");\n   private static final Long PROJECT_NUMBER = 123L;\n   private static final Long CREATE_TIME_MILLIS = 123456789L;\n   private static final ProjectInfo.State STATE = ProjectInfo.State.DELETE_REQUESTED;\n-  private static final ProjectInfo PROJECT_INFO = ProjectInfo.builder(PROJECT_ID)\n-      .name(NAME)\n-      .labels(LABELS)\n-      .projectNumber(PROJECT_NUMBER)\n-      .createTimeMillis(CREATE_TIME_MILLIS)\n-      .state(STATE)\n-      .build();\n-\n+  private static final ProjectInfo PROJECT_INFO = ProjectInfo.builder(PROJECT_ID).name(NAME).labels(LABELS).projectNumber(PROJECT_NUMBER).createTimeMillis(CREATE_TIME_MILLIS).state(STATE).build();\n   private ResourceManager serviceMockReturnsOptions = createStrictMock(ResourceManager.class);\n   private ResourceManagerOptions mockOptions = createMock(ResourceManagerOptions.class);\n   private ResourceManager resourceManager;\n@@ -67,8 +60,7 @@ public class ProjectTest {\n   private void initializeExpectedProject(int optionsCalls) {\n     expect(serviceMockReturnsOptions.options()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n-    expectedProject =\n-        new Project(serviceMockReturnsOptions, new ProjectInfo.BuilderImpl(PROJECT_INFO));\n+    expectedProject = new Project(serviceMockReturnsOptions, new ProjectInfo.BuilderImpl(PROJECT_INFO));\n   }\n \n   private void initializeProject() {\n@@ -88,13 +80,7 @@ public class ProjectTest {\n     expect(resourceManager.options()).andReturn(mockOptions).times(4);\n     replay(resourceManager);\n     Project.Builder builder = new Project.Builder(new Project(resourceManager, new ProjectInfo.BuilderImpl()));\n-    Project project = builder.name(NAME)\n-        .projectId(PROJECT_ID)\n-        .labels(LABELS)\n-        .projectNumber(PROJECT_NUMBER)\n-        .createTimeMillis(CREATE_TIME_MILLIS)\n-        .state(STATE)\n-        .build();\n+    Project project = builder.name(NAME).projectId(PROJECT_ID).labels(LABELS).projectNumber(PROJECT_NUMBER).createTimeMillis(CREATE_TIME_MILLIS).state(STATE).build();\n     assertEquals(PROJECT_ID, project.projectId());\n     assertEquals(NAME, project.name());\n     assertEquals(LABELS, project.labels());\n@@ -117,8 +103,7 @@ public class ProjectTest {\n   public void testReload() {\n     initializeExpectedProject(2);\n     ProjectInfo newInfo = PROJECT_INFO.toBuilder().addLabel(\"k3\", \"v3\").build();\n-    Project expectedProject =\n-        new Project(serviceMockReturnsOptions, new ProjectInfo.BuilderImpl(newInfo));\n+    Project expectedProject = new Project(serviceMockReturnsOptions, new ProjectInfo.BuilderImpl(newInfo));\n     expect(resourceManager.options()).andReturn(mockOptions);\n     expect(resourceManager.get(PROJECT_INFO.projectId())).andReturn(expectedProject);\n     replay(resourceManager);\n@@ -141,8 +126,7 @@ public class ProjectTest {\n     expect(resourceManager.options()).andReturn(mockOptions);\n     expect(resourceManager.get(PROJECT_INFO.projectId())).andReturn(null);\n     replay(resourceManager);\n-    Project reloadedProject =\n-        new Project(resourceManager, new ProjectInfo.BuilderImpl(PROJECT_INFO)).reload();\n+    Project reloadedProject = new Project(resourceManager, new ProjectInfo.BuilderImpl(PROJECT_INFO)).reload();\n     assertNull(reloadedProject);\n   }\n \n@@ -181,8 +165,7 @@ public class ProjectTest {\n     expect(resourceManager.replace(anyObject(Project.class))).andReturn(expectedReplacedProject);\n     replay(resourceManager);\n     initializeProject();\n-    Project newProject =\n-        new Project(resourceManager, new ProjectInfo.BuilderImpl(expectedReplacedProject));\n+    Project newProject = new Project(resourceManager, new ProjectInfo.BuilderImpl(expectedReplacedProject));\n     Project actualReplacedProject = newProject.replace();\n     compareProjectInfos(expectedReplacedProject, actualReplacedProject);\n   }\n@@ -202,4 +185,4 @@ public class ProjectTest {\n     assertEquals(expected.state(), value.state());\n     assertEquals(expected.parent(), value.parent());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/980/ProjectTest.java\nindex 80e35837997..197c2913576 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/980/ProjectTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/980/ProjectTest.java\n@@ -87,8 +87,9 @@ public class ProjectTest {\n     initializeExpectedProject(4);\n     expect(resourceManager.options()).andReturn(mockOptions).times(4);\n     replay(resourceManager);\n-    Project.Builder builder = new Project.Builder(new Project(resourceManager, new ProjectInfo.BuilderImpl()));\n-    Project project = builder.name(NAME)\n+Project.Builder builder = newProject.Builder(newProject(\n+    resourceManager , new ProjectInfo.BuilderImpl()));\n+    Project project = project = builder.name(NAME)\n         .projectId(PROJECT_ID)\n         .labels(LABELS)\n         .projectNumber(PROJECT_NUMBER)\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}