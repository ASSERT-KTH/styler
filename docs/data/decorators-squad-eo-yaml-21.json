{
    "project_name": "decorators-squad-eo-yaml",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "111",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        final YamlNode node;\n        final String prevLine = prev.trimmed();\n        if(prevLine.isEmpty()) {\n            node = this.mappingSequenceOrPlainScalar(prev, guessIndentation);\n        } else {\n            final String lastChar = prevLine.substring(prevLine.length() - 1);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/21/AllYamlLines.java\nindex 6b7c134765f..35a00bba1cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/21/AllYamlLines.java\n@@ -108,7 +108,7 @@ final class AllYamlLines implements YamlLines {\n     ) {\n         final YamlNode node;\n         final String prevLine = prev.trimmed();\n-        if(prevLine.isEmpty()) {\n+        if (prevLine.isEmpty()) {\n             node = this.mappingSequenceOrPlainScalar(prev, guessIndentation);\n         } else {\n             final String lastChar = prevLine.substring(prevLine.length() - 1);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Line cannot end with this symbol, move it to the next line",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line cannot end with this symbol, move it to the next line",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/21/AllYamlLines.java\nindex 6b7c134765f..4940974b767 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/21/AllYamlLines.java\n@@ -1,17 +1,17 @@\n /**\n  * Copyright (c) 2016-2020, Mihai Emil Andronache\n  * All rights reserved.\n- *\n+ * <p>\n  * Redistribution and use in source and binary forms, with or without\n- *  modification, are permitted provided that the following conditions are met:\n+ * modification, are permitted provided that the following conditions are met:\n  * Redistributions of source code must retain the above copyright notice, this\n- *  list of conditions and the following disclaimer.\n- *  Redistributions in binary form must reproduce the above copyright notice,\n- *  this list of conditions and the following disclaimer in the documentation\n- *  and/or other materials provided with the distribution.\n+ * list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n  * Neither the name of the copyright holder nor the names of its\n- *  contributors may be used to endorse or promote products derived from\n- *  this software without specific prior written permission.\n+ * contributors may be used to endorse or promote products derived from\n+ * this software without specific prior written permission.\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n@@ -25,6 +25,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n package com.amihaiemil.eoyaml;\n \n import com.amihaiemil.eoyaml.exceptions.YamlReadingException;\n@@ -66,13 +67,13 @@ final class AllYamlLines implements YamlLines {\n      *            and any other characters.\n      */\n     private static final Pattern SEQUENCE_OR_MAP = Pattern.compile(\"^(\"\n-            + \"([ ]*[\\\\-](|[ ]+.*))|\"\n-            + \"([ ]*\"\n-                + \"('(?:[^'\\\\\\\\]|\\\\\\\\.)*')|\"\n-                  + \"(\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\")|\"\n-                  + \"([^\\\"']*)\"\n-                + \":(|[ ].*))\"\n-            + \")$\");\n+        + \"([ ]*[\\\\-](|[ ]+.*))|\"\n+        + \"([ ]*\"\n+        + \"('(?:[^'\\\\\\\\]|\\\\\\\\.)*')|\"\n+        + \"(\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\")|\"\n+        + \"([^\\\"']*)\"\n+        + \":(|[ ].*))\"\n+        + \")$\");\n \n     /**\n      * Yaml lines.\n@@ -108,7 +109,7 @@ final class AllYamlLines implements YamlLines {\n     ) {\n         final YamlNode node;\n         final String prevLine = prev.trimmed();\n-        if(prevLine.isEmpty()) {\n+        if (prevLine.isEmpty()) {\n             node = this.mappingSequenceOrPlainScalar(prev, guessIndentation);\n         } else {\n             final String lastChar = prevLine.substring(prevLine.length() - 1);\n@@ -161,7 +162,7 @@ final class AllYamlLines implements YamlLines {\n                 node = new ReadYamlSequence(prev, this, guessIndentation);\n             } else if (matcher.group(4) != null) {\n                 node = new ReadYamlMapping(prev.number(),\n-                        prev, this, guessIndentation);\n+                    prev, this, guessIndentation);\n             }\n         } else if (this.original().size() == 1) {\n             node = new ReadPlainScalar(this, first);\n@@ -169,10 +170,12 @@ final class AllYamlLines implements YamlLines {\n         if (node == null) {\n             throw new YamlReadingException(\n                 \"Could not parse YAML starting at line \" + (first.number() + 1)\n-                + \" . It should be a sequence (line should start with '-'), \"\n-                + \"a mapping (line should contain ':') or it should be a plain \"\n-                + \"scalar, but it has \" + this.lines.size() + \" lines, \"\n-                + \"while a plain scalar should be only 1 line!\"\n+                    +\n+                    \" . It should be a sequence (line should start with '-'), \"\n+                    +\n+                    \"a mapping (line should contain ':') or it should be a plain \"\n+                    + \"scalar, but it has \" + this.lines.size() + \" lines, \"\n+                    + \"while a plain scalar should be only 1 line!\"\n             );\n         } else {\n             return node;\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 73.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 313).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/21/AllYamlLines.java\nindex 6b7c134765f..c71058d5c01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/21/AllYamlLines.java\n@@ -65,16 +65,9 @@ final class AllYamlLines implements YamlLines {\n      *          - :(|[ ].*) : a colon (:) optionally followed by a space\n      *            and any other characters.\n      */\n-    private static final Pattern SEQUENCE_OR_MAP = Pattern.compile(\"^(\"\n-            + \"([ ]*[\\\\-](|[ ]+.*))|\"\n-            + \"([ ]*\"\n-                + \"('(?:[^'\\\\\\\\]|\\\\\\\\.)*')|\"\n-                  + \"(\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\")|\"\n-                  + \"([^\\\"']*)\"\n-                + \":(|[ ].*))\"\n-            + \")$\");\n+    private static final Pattern SEQUENCE_OR_MAP = Pattern.compile(\"^(\" + \"([ ]*[\\\\-](|[ ]+.*))|\" + \"([ ]*\" + \"('(?:[^'\\\\\\\\]|\\\\\\\\.)*')|\" + \"(\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\")|\" + \"([^\\\"']*)\" + \":(|[ ].*))\" + \")$\");\n \n-    /**\n+/**\n      * Yaml lines.\n      */\n     private Collection<YamlLine> lines;\n@@ -108,12 +101,11 @@ final class AllYamlLines implements YamlLines {\n     ) {\n         final YamlNode node;\n         final String prevLine = prev.trimmed();\n-        if(prevLine.isEmpty()) {\n+        if (prevLine.isEmpty()) {\n             node = this.mappingSequenceOrPlainScalar(prev, guessIndentation);\n         } else {\n-            final String lastChar = prevLine.substring(prevLine.length() - 1);\n-\n-            if (lastChar.equals(Follows.LITERAL_BLOCK_SCALAR)) {\n+            final String lastChar = prevLine.substring(prevLine.length() -1);\n+if (lastChar.equals(Follows.LITERAL_BLOCK_SCALAR)) {\n                 node = new ReadLiteralBlockScalar(prev, this);\n             } else if (lastChar.equals(Follows.FOLDED_BLOCK_SCALAR)) {\n                 node = new ReadFoldedBlockScalar(prev, this);\n@@ -146,8 +138,7 @@ final class AllYamlLines implements YamlLines {\n         final boolean guessIndentation\n     ) {\n         YamlNode node = null;\n-        final YamlLine first = new Skip(\n-            this,\n+        final YamlLine first = new Skip(this,\n             line -> line.number() <= prev.number(),\n             line -> line.trimmed().startsWith(\"#\"),\n             line -> line.trimmed().startsWith(\"---\"),\n@@ -161,21 +152,16 @@ final class AllYamlLines implements YamlLines {\n                 node = new ReadYamlSequence(prev, this, guessIndentation);\n             } else if (matcher.group(4) != null) {\n                 node = new ReadYamlMapping(prev.number(),\n-                        prev, this, guessIndentation);\n-            }\n+prev, this, guessIndentation);\n+    }\n         } else if (this.original().size() == 1) {\n             node = new ReadPlainScalar(this, first);\n         }\n         if (node == null) {\n             throw new YamlReadingException(\n-                \"Could not parse YAML starting at line \" + (first.number() + 1)\n-                + \" . It should be a sequence (line should start with '-'), \"\n-                + \"a mapping (line should contain ':') or it should be a plain \"\n-                + \"scalar, but it has \" + this.lines.size() + \" lines, \"\n-                + \"while a plain scalar should be only 1 line!\"\n-            );\n+                \"Could not parse YAML starting at line \" + (first.number() + 1) + \" . It should be a sequence (line should start with '-'), \" + \"a mapping (line should contain ':') or it should be a plain \" + \"scalar, but it has \" + this.lines.size() + \" lines, \" + \"while a plain scalar should be only 1 line!\");\n         } else {\n             return node;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 30, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 26, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 30, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 26, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 303).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "167",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 309).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/21/AllYamlLines.java\nindex 6b7c134765f..ca114b99078 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/21/AllYamlLines.java\n@@ -45,6 +45,8 @@ import java.util.regex.Pattern;\n  * @version $Id: 575ee132f318940c9370932f8cc8c6b573392535 $\n  * @since 1.0.0\n  */\n+\n+\n final class AllYamlLines implements YamlLines {\n \n     /**\n@@ -65,24 +67,25 @@ final class AllYamlLines implements YamlLines {\n      *          - :(|[ ].*) : a colon (:) optionally followed by a space\n      *            and any other characters.\n      */\n-    private static final Pattern SEQUENCE_OR_MAP = Pattern.compile(\"^(\"\n-            + \"([ ]*[\\\\-](|[ ]+.*))|\"\n-            + \"([ ]*\"\n-                + \"('(?:[^'\\\\\\\\]|\\\\\\\\.)*')|\"\n-                  + \"(\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\")|\"\n-                  + \"([^\\\"']*)\"\n-                + \":(|[ ].*))\"\n-            + \")$\");\n+\n+\n+    private static final Pattern SEQUENCE_OR_MAP = Pattern.compile(\n+                                                       \"^(\" + \"([ ]*[\\\\-](|[ ]+.*))|\" + \"([ ]*\" + \"('(?:[^'\\\\\\\\]|\\\\\\\\.)*')|\" + \"(\\\"(?:[^\\\"\\\\\\\\]|\\\\\\\\.)*\\\")|\" + \"([^\\\"']*)\" + \":(|[ ].*))\" + \")$\"\n+                                                   );\n \n     /**\n      * Yaml lines.\n      */\n+\n+\n     private Collection<YamlLine> lines;\n \n     /**\n      * Ctor.\n      * @param lines Yaml lines collection.\n      */\n+\n+\n     AllYamlLines(final Collection<YamlLine> lines) {\n         this.lines = lines;\n     }\n@@ -91,7 +94,9 @@ final class AllYamlLines implements YamlLines {\n     public String toString() {\n         final StringBuilder builder = new StringBuilder();\n         for (final YamlLine line : this.lines) {\n-            builder.append(line.toString()).append(System.lineSeparator());\n+            builder.append(\n+                                 line.toString()\n+                             ).append(System.lineSeparator());\n         }\n         return builder.toString();\n     }\n@@ -102,28 +107,31 @@ final class AllYamlLines implements YamlLines {\n     }\n \n     @Override\n-    public YamlNode toYamlNode(\n-        final YamlLine prev,\n-        final boolean guessIndentation\n-    ) {\n+    public YamlNode toYamlNode(final YamlLine prev,\n+                               final boolean guessIndentation) {\n         final YamlNode node;\n         final String prevLine = prev.trimmed();\n-        if(prevLine.isEmpty()) {\n+        if (prevLine.isEmpty()) {\n             node = this.mappingSequenceOrPlainScalar(prev, guessIndentation);\n         } else {\n-            final String lastChar = prevLine.substring(prevLine.length() - 1);\n-\n-            if (lastChar.equals(Follows.LITERAL_BLOCK_SCALAR)) {\n+            final String lastChar = prevLine.substring(\n+                                        prevLine.length() - 1\n+                                    );\n+            if (lastChar.equals(\n+                Follows.LITERAL_BLOCK_SCALAR\n+            )) {\n                 node = new ReadLiteralBlockScalar(prev, this);\n-            } else if (lastChar.equals(Follows.FOLDED_BLOCK_SCALAR)) {\n-                node = new ReadFoldedBlockScalar(prev, this);\n-            } else if (prevLine.matches(Follows.FOLDED_SEQUENCE)) {\n-                node = new ReadYamlSequence(prev, this, guessIndentation);\n-            } else {\n-                node = this.mappingSequenceOrPlainScalar(\n-                    prev, guessIndentation\n-                );\n-            }\n+            } else if (lastChar.equals(\n+                       Follows.FOLDED_BLOCK_SCALAR\n+                   )) {\n+                       node = new ReadFoldedBlockScalar(prev, this);\n+                   } else if (prevLine.matches(\n+                              Follows.FOLDED_SEQUENCE\n+                          )) {\n+                              node = new ReadYamlSequence(prev, this, guessIndentation);\n+                          } else {\n+                              node = this.mappingSequenceOrPlainScalar(prev, guessIndentation);\n+                          }\n         }\n         return node;\n     }\n@@ -141,41 +149,32 @@ final class AllYamlLines implements YamlLines {\n      *  if any YAML line is misplaced.\n      * @return Found YamlNode.\n      */\n-    private YamlNode mappingSequenceOrPlainScalar(\n-        final YamlLine prev,\n-        final boolean guessIndentation\n-    ) {\n+\n+    private YamlNode mappingSequenceOrPlainScalar(final YamlLine prev,\n+                                                  final boolean guessIndentation) {\n         YamlNode node = null;\n-        final YamlLine first = new Skip(\n-            this,\n-            line -> line.number() <= prev.number(),\n-            line -> line.trimmed().startsWith(\"#\"),\n-            line -> line.trimmed().startsWith(\"---\"),\n-            line -> line.trimmed().startsWith(\"...\"),\n-            line -> line.trimmed().startsWith(\"%\"),\n-            line -> line.trimmed().startsWith(\"!!\")\n-        ).iterator().next();\n-        Matcher matcher = SEQUENCE_OR_MAP.matcher(first.trimmed());\n+        final YamlLine first = new Skip(this, line-> line.number() <= prev.number(), line-> line.trimmed().startsWith(\"#\"), line-> line.trimmed().startsWith(\"---\"), line-> line.trimmed().startsWith(\"...\"), line-> line.trimmed().startsWith(\"%\"), line-> line.trimmed().startsWith(\"!!\")).iterator().next();\n+        Matcher matcher = SEQUENCE_OR_MAP.matcher(\n+                              first.trimmed()\n+                          );\n         if (matcher.matches()) {\n-            if (matcher.group(2) != null) {\n+            if (matcher.group(\n+                    2) != null) {\n                 node = new ReadYamlSequence(prev, this, guessIndentation);\n-            } else if (matcher.group(4) != null) {\n-                node = new ReadYamlMapping(prev.number(),\n-                        prev, this, guessIndentation);\n-            }\n+            } else if (matcher.group(\n+                           4) != null) {\n+                       node = new ReadYamlMapping(prev.number(), prev, this, guessIndentation);\n+                   }\n         } else if (this.original().size() == 1) {\n-            node = new ReadPlainScalar(this, first);\n-        }\n+                   node = new ReadPlainScalar(this, first);\n+               }\n         if (node == null) {\n             throw new YamlReadingException(\n-                \"Could not parse YAML starting at line \" + (first.number() + 1)\n-                + \" . It should be a sequence (line should start with '-'), \"\n-                + \"a mapping (line should contain ':') or it should be a plain \"\n-                + \"scalar, but it has \" + this.lines.size() + \" lines, \"\n-                + \"while a plain scalar should be only 1 line!\"\n+                \"Could not parse YAML starting at line \" + (first.number() + 1)+ \" . It should be a sequence (line should start with '-'), \" + \"a mapping (line should contain ':') or it should be a plain \" + \"scalar, but it has \" + this.lines.size()+ \" lines, \" + \"while a plain scalar should be only 1 line!\"\n             );\n         } else {\n             return node;\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/21/AllYamlLines.java\nindex 6b7c134765f..35a00bba1cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/21/AllYamlLines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/21/AllYamlLines.java\n@@ -108,7 +108,7 @@ final class AllYamlLines implements YamlLines {\n     ) {\n         final YamlNode node;\n         final String prevLine = prev.trimmed();\n-        if(prevLine.isEmpty()) {\n+        if (prevLine.isEmpty()) {\n             node = this.mappingSequenceOrPlainScalar(prev, guessIndentation);\n         } else {\n             final String lastChar = prevLine.substring(prevLine.length() - 1);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "111",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}