{
    "project_name": "graphfoundation-ongdb",
    "error_id": "103",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/103/EntityImporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/103/EntityImporter.java\nindex 03c0f6569c4..16cb6b7211d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/103/EntityImporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/103/EntityImporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import java.util.Arrays;\n@@ -40,144 +41,144 @@ import org.neo4j.unsafe.impl.batchimport.store.BatchingTokenRepository.BatchingP\n  */\n abstract class EntityImporter extends InputEntityVisitor.Adapter\n {\n-    private final BatchingPropertyKeyTokenRepository propertyKeyTokenRepository;\n-    private final PropertyStore propertyStore;\n-    private final PropertyRecord propertyRecord;\n-    private PropertyBlock[] propertyBlocks = new PropertyBlock[100];\n-    private int propertyBlocksCursor;\n-    private final BatchingIdGetter propertyIds;\n-    protected final Monitor monitor;\n-    private long propertyCount;\n-    private boolean hasPropertyId;\n-    private long propertyId;\n-    private final DynamicRecordAllocator dynamicStringRecordAllocator;\n-    private final DynamicRecordAllocator dynamicArrayRecordAllocator;\n-\n-    protected EntityImporter( BatchingNeoStores stores, Monitor monitor )\n-    {\n-        this.propertyStore = stores.getPropertyStore();\n-        this.propertyKeyTokenRepository = stores.getPropertyKeyRepository();\n-        this.monitor = monitor;\n-        for ( int i = 0; i < propertyBlocks.length; i++ )\n-        {\n-            propertyBlocks[i] = new PropertyBlock();\n-        }\n-        this.propertyRecord = propertyStore.newRecord();\n-        this.propertyIds = new BatchingIdGetter( propertyStore );\n-        this.dynamicStringRecordAllocator = new StandardDynamicRecordAllocator(\n-                new BatchingIdGetter( propertyStore.getStringStore(), propertyStore.getStringStore().getRecordsPerPage() ),\n-                propertyStore.getStringStore().getRecordDataSize() );\n-        this.dynamicArrayRecordAllocator = new StandardDynamicRecordAllocator(\n-                new BatchingIdGetter( propertyStore.getArrayStore(), propertyStore.getArrayStore().getRecordsPerPage() ),\n-                propertyStore.getStringStore().getRecordDataSize() );\n-    }\n-\n-    @Override\n-    public boolean property( String key, Object value )\n+  private final BatchingPropertyKeyTokenRepository propertyKeyTokenRepository;\n+  private final PropertyStore propertyStore;\n+  private final PropertyRecord propertyRecord;\n+  private PropertyBlock[] propertyBlocks = new PropertyBlock[100];\n+  private int propertyBlocksCursor;\n+  private final BatchingIdGetter propertyIds;\n+  protected final Monitor monitor;\n+  private long propertyCount;\n+  private boolean hasPropertyId;\n+  private long propertyId;\n+  private final DynamicRecordAllocator dynamicStringRecordAllocator;\n+  private final DynamicRecordAllocator dynamicArrayRecordAllocator;\n+\n+  protected EntityImporter(BatchingNeoStores stores, Monitor monitor)\n+  {\n+    this.propertyStore = stores.getPropertyStore();\n+    this.propertyKeyTokenRepository = stores.getPropertyKeyRepository();\n+    this.monitor = monitor;\n+    for (int i = 0; i < propertyBlocks.length; i++)\n     {\n-        assert !hasPropertyId;\n-        return property( propertyKeyTokenRepository.getOrCreateId( key ), value );\n+      propertyBlocks[i] = new PropertyBlock();\n     }\n-\n-    @Override\n-    public boolean property( int propertyKeyId, Object value )\n+    this.propertyRecord = propertyStore.newRecord();\n+    this.propertyIds = new BatchingIdGetter(propertyStore);\n+    this.dynamicStringRecordAllocator = new StandardDynamicRecordAllocator(\n+        new BatchingIdGetter(propertyStore.getStringStore(), propertyStore.getStringStore().getRecordsPerPage()),\n+        propertyStore.getStringStore().getRecordDataSize());\n+    this.dynamicArrayRecordAllocator = new StandardDynamicRecordAllocator(\n+        new BatchingIdGetter(propertyStore.getArrayStore(), propertyStore.getArrayStore().getRecordsPerPage()),\n+        propertyStore.getStringStore().getRecordDataSize());\n+  }\n+\n+  @Override\n+  public boolean property(String key, Object value)\n+  {\n+    assert !hasPropertyId;\n+    return property(propertyKeyTokenRepository.getOrCreateId(key), value);\n+  }\n+\n+  @Override\n+  public boolean property(int propertyKeyId, Object value)\n+  {\n+    assert !hasPropertyId;\n+    encodeProperty(nextPropertyBlock(), propertyKeyId, value);\n+    propertyCount++;\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean propertyId(long nextProp)\n+  {\n+    assert !hasPropertyId;\n+    hasPropertyId = true;\n+    propertyId = nextProp;\n+    return true;\n+  }\n+\n+  @Override\n+  public void endOfEntity()\n+  {\n+    propertyBlocksCursor = 0;\n+    hasPropertyId = false;\n+  }\n+\n+  private PropertyBlock nextPropertyBlock()\n+  {\n+    if (propertyBlocksCursor == propertyBlocks.length)\n     {\n-        assert !hasPropertyId;\n-        encodeProperty( nextPropertyBlock(), propertyKeyId, value );\n-        propertyCount++;\n-        return true;\n+      propertyBlocks = Arrays.copyOf(propertyBlocks, propertyBlocksCursor * 2);\n+      for (int i = propertyBlocksCursor; i < propertyBlocks.length; i++)\n+      {\n+        propertyBlocks[i] = new PropertyBlock();\n+      }\n     }\n-\n-    @Override\n-    public boolean propertyId( long nextProp )\n+    return propertyBlocks[propertyBlocksCursor++];\n+  }\n+\n+  private void encodeProperty(PropertyBlock block, int key, Object value)\n+  {\n+    PropertyStore.encodeValue(block, key, ValueUtils.asValue(value), dynamicStringRecordAllocator, dynamicArrayRecordAllocator,\n+        propertyStore.allowStorePointsAndTemporal());\n+  }\n+\n+  protected long createAndWritePropertyChain()\n+  {\n+    if (hasPropertyId)\n     {\n-        assert !hasPropertyId;\n-        hasPropertyId = true;\n-        propertyId = nextProp;\n-        return true;\n+      return propertyId;\n     }\n \n-    @Override\n-    public void endOfEntity()\n+    if (propertyBlocksCursor == 0)\n     {\n-        propertyBlocksCursor = 0;\n-        hasPropertyId = false;\n+      return Record.NO_NEXT_PROPERTY.longValue();\n     }\n \n-    private PropertyBlock nextPropertyBlock()\n+    PropertyRecord currentRecord = propertyRecord(propertyIds.next());\n+    long firstRecordId = currentRecord.getId();\n+    for (int i = 0; i < propertyBlocksCursor; i++)\n     {\n-        if ( propertyBlocksCursor == propertyBlocks.length )\n-        {\n-            propertyBlocks = Arrays.copyOf( propertyBlocks, propertyBlocksCursor * 2 );\n-            for ( int i = propertyBlocksCursor; i < propertyBlocks.length; i++ )\n-            {\n-                propertyBlocks[i] = new PropertyBlock();\n-            }\n-        }\n-        return propertyBlocks[propertyBlocksCursor++];\n+      PropertyBlock block = propertyBlocks[i];\n+      if (currentRecord.size() + block.getSize() > PropertyType.getPayloadSize())\n+      {\n+        // This record is full or couldn't fit this block, write it to property store\n+        long nextPropertyId = propertyIds.next();\n+        long prevId = currentRecord.getId();\n+        currentRecord.setNextProp(nextPropertyId);\n+        propertyStore.updateRecord(currentRecord);\n+        currentRecord = propertyRecord(nextPropertyId);\n+        currentRecord.setPrevProp(prevId);\n+      }\n+\n+      // Add this block, there's room for it\n+      currentRecord.addPropertyBlock(block);\n     }\n \n-    private void encodeProperty( PropertyBlock block, int key, Object value )\n+    if (currentRecord.size() > 0)\n     {\n-        PropertyStore.encodeValue( block, key, ValueUtils.asValue( value ), dynamicStringRecordAllocator, dynamicArrayRecordAllocator,\n-                propertyStore.allowStorePointsAndTemporal() );\n+      propertyStore.updateRecord(currentRecord);\n     }\n \n-    protected long createAndWritePropertyChain()\n-    {\n-        if ( hasPropertyId )\n-        {\n-            return propertyId;\n-        }\n-\n-        if ( propertyBlocksCursor == 0 )\n-        {\n-            return Record.NO_NEXT_PROPERTY.longValue();\n-        }\n-\n-        PropertyRecord currentRecord = propertyRecord( propertyIds.next() );\n-        long firstRecordId = currentRecord.getId();\n-        for ( int i = 0; i < propertyBlocksCursor; i++ )\n-        {\n-            PropertyBlock block = propertyBlocks[i];\n-            if ( currentRecord.size() + block.getSize() > PropertyType.getPayloadSize() )\n-            {\n-                // This record is full or couldn't fit this block, write it to property store\n-                long nextPropertyId = propertyIds.next();\n-                long prevId = currentRecord.getId();\n-                currentRecord.setNextProp( nextPropertyId );\n-                propertyStore.updateRecord( currentRecord );\n-                currentRecord = propertyRecord( nextPropertyId );\n-                currentRecord.setPrevProp( prevId );\n-            }\n-\n-            // Add this block, there's room for it\n-            currentRecord.addPropertyBlock( block );\n-        }\n-\n-        if ( currentRecord.size() > 0 )\n-        {\n-            propertyStore.updateRecord( currentRecord );\n-        }\n-\n-        return firstRecordId;\n-    }\n-\n-    protected abstract PrimitiveRecord primitiveRecord();\n-\n-    private PropertyRecord propertyRecord( long nextPropertyId )\n-    {\n-        propertyRecord.clear();\n-        propertyRecord.setInUse( true );\n-        propertyRecord.setId( nextPropertyId );\n-        primitiveRecord().setIdTo( propertyRecord );\n-        propertyRecord.setCreated();\n-        return propertyRecord;\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        monitor.propertiesImported( propertyCount );\n-    }\n+    return firstRecordId;\n+  }\n+\n+  protected abstract PrimitiveRecord primitiveRecord();\n+\n+  private PropertyRecord propertyRecord(long nextPropertyId)\n+  {\n+    propertyRecord.clear();\n+    propertyRecord.setInUse(true);\n+    propertyRecord.setId(nextPropertyId);\n+    primitiveRecord().setIdTo(propertyRecord);\n+    propertyRecord.setCreated();\n+    return propertyRecord;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    monitor.propertiesImported(propertyCount);\n+  }\n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 241).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/103/EntityImporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/103/EntityImporter.java\nindex 03c0f6569c4..dc6adcdf77b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/103/EntityImporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/103/EntityImporter.java\n@@ -64,12 +64,8 @@ abstract class EntityImporter extends InputEntityVisitor.Adapter\n         }\n         this.propertyRecord = propertyStore.newRecord();\n         this.propertyIds = new BatchingIdGetter( propertyStore );\n-        this.dynamicStringRecordAllocator = new StandardDynamicRecordAllocator(\n-                new BatchingIdGetter( propertyStore.getStringStore(), propertyStore.getStringStore().getRecordsPerPage() ),\n-                propertyStore.getStringStore().getRecordDataSize() );\n-        this.dynamicArrayRecordAllocator = new StandardDynamicRecordAllocator(\n-                new BatchingIdGetter( propertyStore.getArrayStore(), propertyStore.getArrayStore().getRecordsPerPage() ),\n-                propertyStore.getStringStore().getRecordDataSize() );\n+        this.dynamicStringRecordAllocator = new StandardDynamicRecordAllocator( new BatchingIdGetter( propertyStore.getStringStore(), propertyStore.getStringStore().getRecordsPerPage() ), propertyStore.getStringStore().getRecordDataSize() );\n+this.dynamicArrayRecordAllocator = new StandardDynamicRecordAllocator( new BatchingIdGetter( propertyStore.getArrayStore(), propertyStore.getArrayStore().getRecordsPerPage() ), propertyStore.getStringStore().getRecordDataSize() );\n     }\n \n     @Override\n@@ -180,4 +176,4 @@ abstract class EntityImporter extends InputEntityVisitor.Adapter\n     {\n         monitor.propertiesImported( propertyCount );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}