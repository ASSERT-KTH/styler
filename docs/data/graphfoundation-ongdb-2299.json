{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2299",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "8",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "394",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "397",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "404",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "409",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "504",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "96",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "8",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "621",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "648",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "672",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "721",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "743",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "763",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "763",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "769",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "816",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "830",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "832",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "842",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "845",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "845",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "852",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "853",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "858",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "870",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "870",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "871",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "871",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "883",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "884",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "891",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "892",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "909",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "920",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2299/StandardExpander.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2299/StandardExpander.java\nindex 3422621b946..ccfa96ef274 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2299/StandardExpander.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2299/StandardExpander.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.impl;\n \n import java.lang.reflect.Array;\n@@ -51,875 +52,871 @@ import static org.neo4j.helpers.collection.ResourceClosingIterator.newResourceIt\n \n public abstract class StandardExpander implements PathExpander\n {\n-    private StandardExpander()\n+  private StandardExpander()\n+  {\n+  }\n+\n+  abstract static class StandardExpansion<T> implements ResourceIterable<T>\n+  {\n+    final StandardExpander expander;\n+    final Path path;\n+    final BranchState state;\n+\n+    StandardExpansion(StandardExpander expander, Path path, BranchState state)\n     {\n+      this.expander = expander;\n+      this.path = path;\n+      this.state = state;\n     }\n \n-    abstract static class StandardExpansion<T> implements ResourceIterable<T>\n+    String stringRepresentation(String nodesORrelationships)\n     {\n-        final StandardExpander expander;\n-        final Path path;\n-        final BranchState state;\n-\n-        StandardExpansion( StandardExpander expander, Path path, BranchState state )\n-        {\n-            this.expander = expander;\n-            this.path = path;\n-            this.state = state;\n-        }\n+      return \"Expansion[\" + path + \".expand( \" + expander + \" ).\" + nodesORrelationships + \"()]\";\n+    }\n \n-        String stringRepresentation( String nodesORrelationships )\n-        {\n-            return \"Expansion[\" + path + \".expand( \" + expander + \" ).\" + nodesORrelationships + \"()]\";\n-        }\n+    abstract StandardExpansion<T> createNew(StandardExpander expander);\n \n-        abstract StandardExpansion<T> createNew( StandardExpander expander );\n+    public StandardExpansion<T> including(RelationshipType type)\n+    {\n+      return createNew(expander.add(type));\n+    }\n \n-        public StandardExpansion<T> including( RelationshipType type )\n-        {\n-            return createNew( expander.add( type ) );\n-        }\n+    public StandardExpansion<T> including(RelationshipType type, Direction direction)\n+    {\n+      return createNew(expander.add(type, direction));\n+    }\n \n-        public StandardExpansion<T> including( RelationshipType type, Direction direction )\n-        {\n-            return createNew( expander.add( type, direction ) );\n-        }\n+    public StandardExpansion<T> excluding(RelationshipType type)\n+    {\n+      return createNew(expander.remove(type));\n+    }\n \n-        public StandardExpansion<T> excluding( RelationshipType type )\n-        {\n-            return createNew( expander.remove( type ) );\n-        }\n+    public StandardExpansion<T> filterNodes(Predicate<? super Node> filter)\n+    {\n+      return createNew(expander.addNodeFilter(filter));\n+    }\n \n-        public StandardExpansion<T> filterNodes( Predicate<? super Node> filter )\n-        {\n-            return createNew( expander.addNodeFilter( filter ) );\n-        }\n+    public StandardExpansion<T> filterRelationships(Predicate<? super Relationship> filter)\n+    {\n+      return createNew(expander.addRelationshipFilter(filter));\n+    }\n \n-        public StandardExpansion<T> filterRelationships( Predicate<? super Relationship> filter )\n+    public T getSingle()\n+    {\n+      final Iterator<T> expanded = iterator();\n+      if (expanded.hasNext())\n+      {\n+        final T result = expanded.next();\n+        if (expanded.hasNext())\n         {\n-            return createNew( expander.addRelationshipFilter( filter ) );\n+          throw new NotFoundException(\"More than one relationship found for \" + this);\n         }\n+        return result;\n+      }\n+      return null;\n+    }\n \n-        public T getSingle()\n-        {\n-            final Iterator<T> expanded = iterator();\n-            if ( expanded.hasNext() )\n-            {\n-                final T result = expanded.next();\n-                if ( expanded.hasNext() )\n-                {\n-                    throw new NotFoundException( \"More than one relationship found for \" + this );\n-                }\n-                return result;\n-            }\n-            return null;\n-        }\n+    public boolean isEmpty()\n+    {\n+      return !expander.doExpand(path, state).hasNext();\n+    }\n \n-        public boolean isEmpty()\n-        {\n-            return !expander.doExpand( path, state ).hasNext();\n-        }\n+    public StandardExpansion<Node> nodes()\n+    {\n+      return new NodeExpansion(expander, path, state);\n+    }\n \n-        public StandardExpansion<Node> nodes()\n-        {\n-            return new NodeExpansion( expander, path, state );\n-        }\n+    public StandardExpansion<Relationship> relationships()\n+    {\n+      return new RelationshipExpansion(expander, path, state);\n+    }\n+  }\n \n-        public StandardExpansion<Relationship> relationships()\n-        {\n-            return new RelationshipExpansion( expander, path, state );\n-        }\n+  private static final class RelationshipExpansion extends\n+      StandardExpansion<Relationship>\n+  {\n+    RelationshipExpansion(StandardExpander expander, Path path, BranchState state)\n+    {\n+      super(expander, path, state);\n     }\n \n-    private static final class RelationshipExpansion extends\n-            StandardExpansion<Relationship>\n+    @Override\n+    public String toString()\n     {\n-        RelationshipExpansion( StandardExpander expander, Path path, BranchState state )\n-        {\n-            super( expander, path, state );\n-        }\n+      return stringRepresentation(\"relationships\");\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return stringRepresentation( \"relationships\" );\n-        }\n+    @Override\n+    StandardExpansion<Relationship> createNew(StandardExpander expander)\n+    {\n+      return new RelationshipExpansion(expander, path, state);\n+    }\n \n-        @Override\n-        StandardExpansion<Relationship> createNew( StandardExpander expander )\n-        {\n-            return new RelationshipExpansion( expander, path, state );\n-        }\n+    @Override\n+    public StandardExpansion<Relationship> relationships()\n+    {\n+      return this;\n+    }\n \n-        @Override\n-        public StandardExpansion<Relationship> relationships()\n-        {\n-            return this;\n-        }\n+    @Override\n+    public ResourceIterator<Relationship> iterator()\n+    {\n+      return expander.doExpand(path, state);\n+    }\n+  }\n \n-        @Override\n-        public ResourceIterator<Relationship> iterator()\n-        {\n-            return expander.doExpand( path, state );\n-        }\n+  private static final class NodeExpansion extends StandardExpansion<Node>\n+  {\n+    NodeExpansion(StandardExpander expander, Path path, BranchState state)\n+    {\n+      super(expander, path, state);\n     }\n \n-    private static final class NodeExpansion extends StandardExpansion<Node>\n+    @Override\n+    public String toString()\n     {\n-        NodeExpansion( StandardExpander expander, Path path, BranchState state )\n-        {\n-            super( expander, path, state );\n-        }\n+      return stringRepresentation(\"nodes\");\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return stringRepresentation( \"nodes\" );\n-        }\n+    @Override\n+    StandardExpansion<Node> createNew(StandardExpander expander)\n+    {\n+      return new NodeExpansion(expander, path, state);\n+    }\n \n-        @Override\n-        StandardExpansion<Node> createNew( StandardExpander expander )\n-        {\n-            return new NodeExpansion( expander, path, state );\n-        }\n+    @Override\n+    public StandardExpansion<Node> nodes()\n+    {\n+      return this;\n+    }\n \n-        @Override\n-        public StandardExpansion<Node> nodes()\n-        {\n-            return this;\n-        }\n+    @Override\n+    public ResourceIterator<Node> iterator()\n+    {\n+      final Node node = path.endNode();\n \n+      return new MappingResourceIterator<Node, Relationship>(expander.doExpand(path, state))\n+      {\n         @Override\n-        public ResourceIterator<Node> iterator()\n+        protected Node map(Relationship rel)\n         {\n-            final Node node = path.endNode();\n-\n-            return new MappingResourceIterator<Node, Relationship>( expander.doExpand( path, state ) )\n-            {\n-                @Override\n-                protected Node map( Relationship rel )\n-                {\n-                    return rel.getOtherNode( node );\n-                }\n-            };\n+          return rel.getOtherNode(node);\n         }\n+      };\n     }\n+  }\n \n-    private static class AllExpander extends StandardExpander\n-    {\n-        private final Direction direction;\n+  private static class AllExpander extends StandardExpander\n+  {\n+    private final Direction direction;\n \n-        AllExpander( Direction direction )\n-        {\n-            this.direction = direction;\n-        }\n-\n-        @Override\n-        void buildString( StringBuilder result )\n-        {\n-            if ( direction != Direction.BOTH )\n-            {\n-                result.append( direction );\n-                result.append( \":\" );\n-            }\n-            result.append( \"*\" );\n-        }\n+    AllExpander(Direction direction)\n+    {\n+      this.direction = direction;\n+    }\n \n-        @Override\n-        ResourceIterator<Relationship> doExpand( Path path, BranchState state )\n-        {\n-            return asResourceIterator( path.endNode().getRelationships( direction ).iterator() );\n-        }\n+    @Override\n+    void buildString(StringBuilder result)\n+    {\n+      if (direction != Direction.BOTH)\n+      {\n+        result.append(direction);\n+        result.append(\":\");\n+      }\n+      result.append(\"*\");\n+    }\n \n-        @Override\n-        public StandardExpander add( RelationshipType type, Direction dir )\n-        {\n-            return this;\n-        }\n+    @Override\n+    ResourceIterator<Relationship> doExpand(Path path, BranchState state)\n+    {\n+      return asResourceIterator(path.endNode().getRelationships(direction).iterator());\n+    }\n \n-        @Override\n-        public StandardExpander remove( RelationshipType type )\n-        {\n-            Map<String, Exclusion> exclude = new HashMap<>();\n-            exclude.put( type.name(), Exclusion.ALL );\n-            return new ExcludingExpander( Exclusion.include( direction ), exclude );\n-        }\n+    @Override\n+    public StandardExpander add(RelationshipType type, Direction dir)\n+    {\n+      return this;\n+    }\n \n-        @Override\n-        public StandardExpander reversed()\n-        {\n-            return reverse();\n-        }\n+    @Override\n+    public StandardExpander remove(RelationshipType type)\n+    {\n+      Map<String, Exclusion> exclude = new HashMap<>();\n+      exclude.put(type.name(), Exclusion.ALL);\n+      return new ExcludingExpander(Exclusion.include(direction), exclude);\n+    }\n \n-        @Override\n-        public StandardExpander reverse()\n-        {\n-            return new AllExpander( direction.reverse() );\n-        }\n+    @Override\n+    public StandardExpander reversed()\n+    {\n+      return reverse();\n     }\n \n-    private enum Exclusion\n+    @Override\n+    public StandardExpander reverse()\n     {\n-        ALL( null, \"!\" )\n+      return new AllExpander(direction.reverse());\n+    }\n+  }\n+\n+  private enum Exclusion\n+  {\n+    ALL(null, \"!\")\n         {\n-            @Override\n-            public boolean accept( Node start, Relationship rel )\n-            {\n-                return false;\n-            }\n+          @Override\n+          public boolean accept(Node start, Relationship rel)\n+          {\n+            return false;\n+          }\n         },\n-        INCOMING( Direction.OUTGOING )\n+    INCOMING(Direction.OUTGOING)\n         {\n-            @Override\n-            Exclusion reversed()\n-            {\n-                return OUTGOING;\n-            }\n+          @Override\n+          Exclusion reversed()\n+          {\n+            return OUTGOING;\n+          }\n         },\n-        OUTGOING( Direction.INCOMING )\n+    OUTGOING(Direction.INCOMING)\n         {\n-            @Override\n-            Exclusion reversed()\n-            {\n-                return INCOMING;\n-            }\n+          @Override\n+          Exclusion reversed()\n+          {\n+            return INCOMING;\n+          }\n         },\n-        NONE( Direction.BOTH, \"\" )\n+    NONE(Direction.BOTH, \"\")\n         {\n-            @Override\n-            boolean includes( Direction direction )\n-            {\n-                return true;\n-            }\n+          @Override\n+          boolean includes(Direction direction)\n+          {\n+            return true;\n+          }\n         };\n \n-        private final String string;\n-        private final Direction direction;\n-\n-        Exclusion( Direction direction, String string )\n-        {\n-            this.direction = direction;\n-            this.string = string;\n-        }\n-\n-        Exclusion( Direction direction )\n-        {\n-            this.direction = direction;\n-            this.string = \"!\" + name() + \":\";\n-        }\n-\n-        @Override\n-        public final String toString()\n-        {\n-            return string;\n-        }\n-\n-        boolean accept( Node start, Relationship rel )\n-        {\n-            return matchDirection( direction, start, rel );\n-        }\n-\n-        Exclusion reversed()\n-        {\n-            return this;\n-        }\n-\n-        boolean includes( Direction dir )\n-        {\n-            return this.direction == dir;\n-        }\n+    private final String string;\n+    private final Direction direction;\n \n-        static Exclusion include( Direction direction )\n-        {\n-            switch ( direction )\n-            {\n-                case INCOMING:\n-                    return OUTGOING;\n-                case OUTGOING:\n-                    return INCOMING;\n-                default:\n-                    return NONE;\n-            }\n-        }\n+    Exclusion(Direction direction, String string)\n+    {\n+      this.direction = direction;\n+      this.string = string;\n     }\n \n-    private static final class ExcludingExpander extends StandardExpander\n+    Exclusion(Direction direction)\n     {\n-        private final Exclusion defaultExclusion;\n-        private final Map<String, Exclusion> exclusion;\n-\n-        ExcludingExpander( Exclusion defaultExclusion,\n-                           Map<String, Exclusion> exclusion )\n-        {\n-            this.defaultExclusion = defaultExclusion;\n-            this.exclusion = exclusion;\n-        }\n-\n-        @Override\n-        void buildString( StringBuilder result )\n-        {\n-            // FIXME: not really correct\n-            result.append( defaultExclusion );\n-            result.append( \"*\" );\n-            for ( Map.Entry<String, Exclusion> entry : exclusion.entrySet() )\n-            {\n-                result.append( \",\" );\n-                result.append( entry.getValue() );\n-                result.append( entry.getKey() );\n-            }\n-        }\n-\n-        @Override\n-        ResourceIterator<Relationship> doExpand( Path path, BranchState state )\n-        {\n-            final Node node = path.endNode();\n-            ResourceIterator<Relationship> resourceIterator = asResourceIterator( node.getRelationships().iterator() );\n-            return newResourceIterator( new FilteringIterator<>( resourceIterator, rel ->\n-            {\n-                Exclusion exclude = exclusion.get( rel.getType().name() );\n-                exclude = (exclude == null) ? defaultExclusion : exclude;\n-                return exclude.accept( node, rel );\n-            } ), resourceIterator );\n-        }\n-\n-        @Override\n-        public StandardExpander add( RelationshipType type, Direction direction )\n-        {\n-            Exclusion excluded = exclusion.get( type.name() );\n-            final Map<String, Exclusion> newExclusion;\n-            if ( (excluded == null ? defaultExclusion : excluded).includes( direction ) )\n-            {\n-                return this;\n-            }\n-            else\n-            {\n-                excluded = Exclusion.include( direction );\n-                if ( excluded == defaultExclusion )\n-                {\n-                    if ( exclusion.size() == 1 )\n-                    {\n-                        return new AllExpander( defaultExclusion.direction );\n-                    }\n-                    else\n-                    {\n-                        newExclusion = new HashMap<>( exclusion );\n-                        newExclusion.remove( type.name() );\n-                    }\n-                }\n-                else\n-                {\n-                    newExclusion = new HashMap<>( exclusion );\n-                    newExclusion.put( type.name(), excluded );\n-                }\n-            }\n-            return new ExcludingExpander( defaultExclusion, newExclusion );\n-        }\n-\n-        @Override\n-        public StandardExpander remove( RelationshipType type )\n-        {\n-            Exclusion excluded = exclusion.get( type.name() );\n-            if ( excluded == Exclusion.ALL )\n-            {\n-                return this;\n-            }\n-            Map<String, Exclusion> newExclusion = new HashMap<>( exclusion );\n-            newExclusion.put( type.name(), Exclusion.ALL );\n-            return new ExcludingExpander( defaultExclusion, newExclusion );\n-        }\n-\n-        @Override\n-        public StandardExpander reversed()\n-        {\n-            return reverse();\n-        }\n-\n-        @Override\n-        public StandardExpander reverse()\n-        {\n-            Map<String, Exclusion> newExclusion = new HashMap<>();\n-            for ( Map.Entry<String, Exclusion> entry : exclusion.entrySet() )\n-            {\n-                newExclusion.put( entry.getKey(), entry.getValue().reversed() );\n-            }\n-            return new ExcludingExpander( defaultExclusion.reversed(), newExclusion );\n-        }\n+      this.direction = direction;\n+      this.string = \"!\" + name() + \":\";\n     }\n \n-    public static final StandardExpander DEFAULT = new AllExpander(\n-            Direction.BOTH )\n+    @Override\n+    public final String toString()\n     {\n-        @Override\n-        public StandardExpander add( RelationshipType type, Direction direction )\n-        {\n-            return create( type, direction );\n-        }\n-    };\n-\n-    public static final StandardExpander EMPTY =\n-            new RegularExpander( Collections.emptyMap() );\n+      return string;\n+    }\n \n-    private static class DirectionAndTypes\n+    boolean accept(Node start, Relationship rel)\n     {\n-        final Direction direction;\n-        final RelationshipType[] types;\n-\n-        DirectionAndTypes( Direction direction, RelationshipType[] types )\n-        {\n-            this.direction = direction;\n-            this.types = types;\n-        }\n+      return matchDirection(direction, start, rel);\n     }\n \n-    static class RegularExpander extends StandardExpander\n+    Exclusion reversed()\n     {\n-        final Map<Direction, RelationshipType[]> typesMap;\n-        final DirectionAndTypes[] directions;\n+      return this;\n+    }\n \n-        RegularExpander( Map<Direction, RelationshipType[]> types )\n-        {\n-            this.typesMap = types;\n-            this.directions = new DirectionAndTypes[types.size()];\n-            int i = 0;\n-            for ( Map.Entry<Direction, RelationshipType[]> entry : types.entrySet() )\n-            {\n-                this.directions[i++] = new DirectionAndTypes( entry.getKey(), entry.getValue() );\n-            }\n-        }\n+    boolean includes(Direction dir)\n+    {\n+      return this.direction == dir;\n+    }\n \n-        @Override\n-        void buildString( StringBuilder result )\n-        {\n-            result.append( typesMap.toString() );\n-        }\n+    static Exclusion include(Direction direction)\n+    {\n+      switch (direction)\n+      {\n+        case INCOMING:\n+          return OUTGOING;\n+        case OUTGOING:\n+          return INCOMING;\n+        default:\n+          return NONE;\n+      }\n+    }\n+  }\n \n-        @Override\n-        ResourceIterator<Relationship> doExpand( Path path, BranchState state )\n-        {\n-            final Node node = path.endNode();\n-            if ( directions.length == 1 )\n-            {\n-                DirectionAndTypes direction = directions[0];\n-                return asResourceIterator( node.getRelationships( direction.direction, direction.types ).iterator() );\n-            }\n-            else\n-            {\n-                return new NestingResourceIterator<Relationship, DirectionAndTypes>( new ArrayIterator<>( directions ) )\n-                {\n-                    @Override\n-                    protected ResourceIterator<Relationship> createNestedIterator( DirectionAndTypes item )\n-                    {\n-                        return asResourceIterator( node.getRelationships( item.direction, item.types ).iterator() );\n-                    }\n-                };\n-            }\n-        }\n+  private static final class ExcludingExpander extends StandardExpander\n+  {\n+    private final Exclusion defaultExclusion;\n+    private final Map<String, Exclusion> exclusion;\n \n-        StandardExpander createNew( Map<Direction, RelationshipType[]> types )\n-        {\n-            if ( types.isEmpty() )\n-            {\n-                return new AllExpander( Direction.BOTH );\n-            }\n-            return new RegularExpander( types );\n-        }\n+    ExcludingExpander(Exclusion defaultExclusion,\n+                      Map<String, Exclusion> exclusion)\n+    {\n+      this.defaultExclusion = defaultExclusion;\n+      this.exclusion = exclusion;\n+    }\n \n-        @Override\n-        public StandardExpander add( RelationshipType type, Direction direction )\n-        {\n-            Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMapFrom( typesMap );\n-            tempMap.get( direction ).add( type );\n-            return createNew( toTypeMap( tempMap ) );\n-        }\n+    @Override\n+    void buildString(StringBuilder result)\n+    {\n+      // FIXME: not really correct\n+      result.append(defaultExclusion);\n+      result.append(\"*\");\n+      for (Map.Entry<String, Exclusion> entry : exclusion.entrySet())\n+      {\n+        result.append(\",\");\n+        result.append(entry.getValue());\n+        result.append(entry.getKey());\n+      }\n+    }\n \n-        @Override\n-        public StandardExpander remove( RelationshipType type )\n-        {\n-            Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMapFrom( typesMap );\n-            for ( Direction direction : Direction.values() )\n-            {\n-                tempMap.get( direction ).remove( type );\n-            }\n-            return createNew( toTypeMap( tempMap ) );\n-        }\n+    @Override\n+    ResourceIterator<Relationship> doExpand(Path path, BranchState state)\n+    {\n+      final Node node = path.endNode();\n+      ResourceIterator<Relationship> resourceIterator = asResourceIterator(node.getRelationships().iterator());\n+      return newResourceIterator(new FilteringIterator<>(resourceIterator, rel ->\n+      {\n+        Exclusion exclude = exclusion.get(rel.getType().name());\n+        exclude = (exclude == null) ? defaultExclusion : exclude;\n+        return exclude.accept(node, rel);\n+      }), resourceIterator);\n+    }\n \n-        @Override\n-        public StandardExpander reversed()\n-        {\n-            return reverse();\n-        }\n+    @Override\n+    public StandardExpander add(RelationshipType type, Direction direction)\n+    {\n+      Exclusion excluded = exclusion.get(type.name());\n+      final Map<String, Exclusion> newExclusion;\n+      if ((excluded == null ? defaultExclusion : excluded).includes(direction))\n+      {\n+        return this;\n+      } else\n+      {\n+        excluded = Exclusion.include(direction);\n+        if (excluded == defaultExclusion)\n+        {\n+          if (exclusion.size() == 1)\n+          {\n+            return new AllExpander(defaultExclusion.direction);\n+          } else\n+          {\n+            newExclusion = new HashMap<>(exclusion);\n+            newExclusion.remove(type.name());\n+          }\n+        } else\n+        {\n+          newExclusion = new HashMap<>(exclusion);\n+          newExclusion.put(type.name(), excluded);\n+        }\n+      }\n+      return new ExcludingExpander(defaultExclusion, newExclusion);\n+    }\n \n-        @Override\n-        public StandardExpander reverse()\n-        {\n-            Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMapFrom( typesMap );\n-            Collection<RelationshipType> out = tempMap.get( Direction.OUTGOING );\n-            Collection<RelationshipType> in = tempMap.get( Direction.INCOMING );\n-            tempMap.put( Direction.OUTGOING, in );\n-            tempMap.put( Direction.INCOMING, out );\n-            return createNew( toTypeMap( tempMap ) );\n-        }\n+    @Override\n+    public StandardExpander remove(RelationshipType type)\n+    {\n+      Exclusion excluded = exclusion.get(type.name());\n+      if (excluded == Exclusion.ALL)\n+      {\n+        return this;\n+      }\n+      Map<String, Exclusion> newExclusion = new HashMap<>(exclusion);\n+      newExclusion.put(type.name(), Exclusion.ALL);\n+      return new ExcludingExpander(defaultExclusion, newExclusion);\n     }\n \n-    private static final class FilteringExpander extends StandardExpander\n+    @Override\n+    public StandardExpander reversed()\n     {\n-        private final StandardExpander expander;\n-        private final Filter[] filters;\n-\n-        FilteringExpander( StandardExpander expander, Filter... filters )\n-        {\n-            this.expander = expander;\n-            this.filters = filters;\n-        }\n+      return reverse();\n+    }\n \n-        @Override\n-        void buildString( StringBuilder result )\n-        {\n-            expander.buildString( result );\n-            result.append( \"; filter:\" );\n-            for ( Filter filter : filters )\n-            {\n-                result.append( \" \" );\n-                result.append( filter );\n-            }\n-        }\n+    @Override\n+    public StandardExpander reverse()\n+    {\n+      Map<String, Exclusion> newExclusion = new HashMap<>();\n+      for (Map.Entry<String, Exclusion> entry : exclusion.entrySet())\n+      {\n+        newExclusion.put(entry.getKey(), entry.getValue().reversed());\n+      }\n+      return new ExcludingExpander(defaultExclusion.reversed(), newExclusion);\n+    }\n+  }\n \n-        @Override\n-        ResourceIterator<Relationship> doExpand( final Path path, BranchState state )\n-        {\n-            ResourceIterator<Relationship> resourceIterator = expander.doExpand( path, state );\n-            return newResourceIterator( new FilteringIterator<>( resourceIterator, item ->\n-            {\n-                Path extendedPath = ExtendedPath.extend( path, item );\n-                for ( Filter filter : filters )\n-                {\n-                    if ( filter.exclude( extendedPath ) )\n-                    {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            } ), resourceIterator );\n-        }\n+  public static final StandardExpander DEFAULT = new AllExpander(\n+      Direction.BOTH)\n+  {\n+    @Override\n+    public StandardExpander add(RelationshipType type, Direction direction)\n+    {\n+      return create(type, direction);\n+    }\n+  };\n \n-        @Override\n-        public StandardExpander addNodeFilter( Predicate<? super Node> filter )\n-        {\n-            return new FilteringExpander( expander, append( filters,\n-                    new NodeFilter( filter ) ) );\n-        }\n+  public static final StandardExpander EMPTY =\n+      new RegularExpander(Collections.emptyMap());\n \n-        @Override\n-        public StandardExpander addRelationshipFilter(\n-                Predicate<? super Relationship> filter )\n-        {\n-            return new FilteringExpander( expander, append( filters,\n-                    new RelationshipFilter( filter ) ) );\n-        }\n+  private static class DirectionAndTypes\n+  {\n+    final Direction direction;\n+    final RelationshipType[] types;\n \n-        @Override\n-        public StandardExpander add( RelationshipType type, Direction direction )\n-        {\n-            return new FilteringExpander( expander.add( type, direction ),\n-                    filters );\n-        }\n+    DirectionAndTypes(Direction direction, RelationshipType[] types)\n+    {\n+      this.direction = direction;\n+      this.types = types;\n+    }\n+  }\n+\n+  static class RegularExpander extends StandardExpander\n+  {\n+    final Map<Direction, RelationshipType[]> typesMap;\n+    final DirectionAndTypes[] directions;\n+\n+    RegularExpander(Map<Direction, RelationshipType[]> types)\n+    {\n+      this.typesMap = types;\n+      this.directions = new DirectionAndTypes[types.size()];\n+      int i = 0;\n+      for (Map.Entry<Direction, RelationshipType[]> entry : types.entrySet())\n+      {\n+        this.directions[i++] = new DirectionAndTypes(entry.getKey(), entry.getValue());\n+      }\n+    }\n \n-        @Override\n-        public StandardExpander remove( RelationshipType type )\n-        {\n-            return new FilteringExpander( expander.remove( type ), filters );\n-        }\n+    @Override\n+    void buildString(StringBuilder result)\n+    {\n+      result.append(typesMap.toString());\n+    }\n \n-        @Override\n-        public StandardExpander reversed()\n-        {\n-            return reverse();\n-        }\n+    @Override\n+    ResourceIterator<Relationship> doExpand(Path path, BranchState state)\n+    {\n+      final Node node = path.endNode();\n+      if (directions.length == 1)\n+      {\n+        DirectionAndTypes direction = directions[0];\n+        return asResourceIterator(node.getRelationships(direction.direction, direction.types).iterator());\n+      } else\n+      {\n+        return new NestingResourceIterator<Relationship, DirectionAndTypes>(new ArrayIterator<>(directions))\n+        {\n+          @Override\n+          protected ResourceIterator<Relationship> createNestedIterator(DirectionAndTypes item)\n+          {\n+            return asResourceIterator(node.getRelationships(item.direction, item.types).iterator());\n+          }\n+        };\n+      }\n+    }\n \n-        @Override\n-        public StandardExpander reverse()\n-        {\n-            return new FilteringExpander( expander.reversed(), filters );\n-        }\n+    StandardExpander createNew(Map<Direction, RelationshipType[]> types)\n+    {\n+      if (types.isEmpty())\n+      {\n+        return new AllExpander(Direction.BOTH);\n+      }\n+      return new RegularExpander(types);\n     }\n \n-    private static final class WrappingExpander extends StandardExpander\n+    @Override\n+    public StandardExpander add(RelationshipType type, Direction direction)\n     {\n-        private static final String IMMUTABLE = \"Immutable Expander \";\n-        private final PathExpander expander;\n+      Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMapFrom(typesMap);\n+      tempMap.get(direction).add(type);\n+      return createNew(toTypeMap(tempMap));\n+    }\n \n-        WrappingExpander( PathExpander expander )\n-        {\n-            this.expander = expander;\n-        }\n+    @Override\n+    public StandardExpander remove(RelationshipType type)\n+    {\n+      Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMapFrom(typesMap);\n+      for (Direction direction : Direction.values())\n+      {\n+        tempMap.get(direction).remove(type);\n+      }\n+      return createNew(toTypeMap(tempMap));\n+    }\n \n-        @Override\n-        void buildString( StringBuilder result )\n-        {\n-            result.append( expander );\n-        }\n+    @Override\n+    public StandardExpander reversed()\n+    {\n+      return reverse();\n+    }\n \n-        @Override\n-        ResourceIterator<Relationship> doExpand( Path path, BranchState state )\n-        {\n-            return asResourceIterator( expander.expand( path, state ).iterator() );\n-        }\n+    @Override\n+    public StandardExpander reverse()\n+    {\n+      Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMapFrom(typesMap);\n+      Collection<RelationshipType> out = tempMap.get(Direction.OUTGOING);\n+      Collection<RelationshipType> in = tempMap.get(Direction.INCOMING);\n+      tempMap.put(Direction.OUTGOING, in);\n+      tempMap.put(Direction.INCOMING, out);\n+      return createNew(toTypeMap(tempMap));\n+    }\n+  }\n \n-        @Override\n-        public StandardExpander add( RelationshipType type, Direction direction )\n-        {\n-            throw new UnsupportedOperationException( IMMUTABLE + expander );\n-        }\n+  private static final class FilteringExpander extends StandardExpander\n+  {\n+    private final StandardExpander expander;\n+    private final Filter[] filters;\n \n-        @Override\n-        public StandardExpander remove( RelationshipType type )\n-        {\n-            throw new UnsupportedOperationException( IMMUTABLE + expander );\n-        }\n+    FilteringExpander(StandardExpander expander, Filter... filters)\n+    {\n+      this.expander = expander;\n+      this.filters = filters;\n+    }\n \n-        @Override\n-        public StandardExpander reversed()\n-        {\n-            return reverse();\n-        }\n+    @Override\n+    void buildString(StringBuilder result)\n+    {\n+      expander.buildString(result);\n+      result.append(\"; filter:\");\n+      for (Filter filter : filters)\n+      {\n+        result.append(\" \");\n+        result.append(filter);\n+      }\n+    }\n \n-        @Override\n-        public StandardExpander reverse()\n+    @Override\n+    ResourceIterator<Relationship> doExpand(final Path path, BranchState state)\n+    {\n+      ResourceIterator<Relationship> resourceIterator = expander.doExpand(path, state);\n+      return newResourceIterator(new FilteringIterator<>(resourceIterator, item ->\n+      {\n+        Path extendedPath = ExtendedPath.extend(path, item);\n+        for (Filter filter : filters)\n         {\n-            throw new UnsupportedOperationException( IMMUTABLE + expander );\n+          if (filter.exclude(extendedPath))\n+          {\n+            return false;\n+          }\n         }\n+        return true;\n+      }), resourceIterator);\n     }\n \n-    private abstract static class Filter\n+    @Override\n+    public StandardExpander addNodeFilter(Predicate<? super Node> filter)\n     {\n-        abstract boolean exclude( Path path );\n+      return new FilteringExpander(expander, append(filters,\n+          new NodeFilter(filter)));\n     }\n \n-    private static final class NodeFilter extends Filter\n+    @Override\n+    public StandardExpander addRelationshipFilter(\n+        Predicate<? super Relationship> filter)\n     {\n-        private final Predicate<? super Node> predicate;\n-\n-        NodeFilter( Predicate<? super Node> predicate )\n-        {\n-            this.predicate = predicate;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return predicate.toString();\n-        }\n-\n-        @Override\n-        boolean exclude( Path path )\n-        {\n-            return !predicate.test( path.endNode() );\n-        }\n+      return new FilteringExpander(expander, append(filters,\n+          new RelationshipFilter(filter)));\n     }\n \n-    private static final class RelationshipFilter extends Filter\n+    @Override\n+    public StandardExpander add(RelationshipType type, Direction direction)\n     {\n-        private final Predicate<? super Relationship> predicate;\n-\n-        RelationshipFilter( Predicate<? super Relationship> predicate )\n-        {\n-            this.predicate = predicate;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return predicate.toString();\n-        }\n+      return new FilteringExpander(expander.add(type, direction),\n+          filters);\n+    }\n \n-        @Override\n-        boolean exclude( Path path )\n-        {\n-            return !predicate.test( path.lastRelationship() );\n-        }\n+    @Override\n+    public StandardExpander remove(RelationshipType type)\n+    {\n+      return new FilteringExpander(expander.remove(type), filters);\n     }\n \n-    private static final class PathFilter extends Filter\n+    @Override\n+    public StandardExpander reversed()\n     {\n-        private final Predicate<? super Path> predicate;\n+      return reverse();\n+    }\n \n-        PathFilter( Predicate<? super Path> predicate )\n-        {\n-            this.predicate = predicate;\n-        }\n+    @Override\n+    public StandardExpander reverse()\n+    {\n+      return new FilteringExpander(expander.reversed(), filters);\n+    }\n+  }\n \n-        @Override\n-        public String toString()\n-        {\n-            return predicate.toString();\n-        }\n+  private static final class WrappingExpander extends StandardExpander\n+  {\n+    private static final String IMMUTABLE = \"Immutable Expander \";\n+    private final PathExpander expander;\n \n-        @Override\n-        boolean exclude( Path path )\n-        {\n-            return !predicate.test( path );\n-        }\n+    WrappingExpander(PathExpander expander)\n+    {\n+      this.expander = expander;\n     }\n \n-    public final StandardExpansion<Relationship> expand( Node node )\n+    @Override\n+    void buildString(StringBuilder result)\n     {\n-        return new RelationshipExpansion( this, singleNodePath( node ), BranchState.NO_STATE );\n+      result.append(expander);\n     }\n \n     @Override\n-    public final StandardExpansion<Relationship> expand( Path path, BranchState state )\n+    ResourceIterator<Relationship> doExpand(Path path, BranchState state)\n     {\n-        return new RelationshipExpansion( this, path, state );\n+      return asResourceIterator(expander.expand(path, state).iterator());\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    static <T> T[] append( T[] array, T item )\n+    @Override\n+    public StandardExpander add(RelationshipType type, Direction direction)\n     {\n-        T[] result = (T[]) Array.newInstance(\n-                array.getClass().getComponentType(), array.length + 1 );\n-        System.arraycopy( array, 0, result, 0, array.length );\n-        result[array.length] = item;\n-        return result;\n+      throw new UnsupportedOperationException(IMMUTABLE + expander);\n     }\n \n-    static boolean matchDirection( Direction dir, Node start, Relationship rel )\n+    @Override\n+    public StandardExpander remove(RelationshipType type)\n     {\n-        switch ( dir )\n-        {\n-            case INCOMING:\n-                return rel.getEndNode().equals( start );\n-            case OUTGOING:\n-                return rel.getStartNode().equals( start );\n-            case BOTH:\n-                return true;\n-            default:\n-                throw new IllegalArgumentException( \"Unknown direction: \" + dir );\n-        }\n+      throw new UnsupportedOperationException(IMMUTABLE + expander);\n     }\n \n-    abstract ResourceIterator<Relationship> doExpand( Path path, BranchState state );\n-\n     @Override\n-    public final String toString()\n+    public StandardExpander reversed()\n     {\n-        StringBuilder result = new StringBuilder( \"Expander[\" );\n-        buildString( result );\n-        result.append( \"]\" );\n-        return result.toString();\n+      return reverse();\n     }\n \n-    abstract void buildString( StringBuilder result );\n-\n-    public final StandardExpander add( RelationshipType type )\n+    @Override\n+    public StandardExpander reverse()\n     {\n-        return add( type, Direction.BOTH );\n+      throw new UnsupportedOperationException(IMMUTABLE + expander);\n     }\n+  }\n \n-    public abstract StandardExpander add( RelationshipType type,\n-                                          Direction direction );\n+  private abstract static class Filter\n+  {\n+    abstract boolean exclude(Path path);\n+  }\n \n-    public abstract StandardExpander remove( RelationshipType type );\n+  private static final class NodeFilter extends Filter\n+  {\n+    private final Predicate<? super Node> predicate;\n \n-    @Override\n-    public abstract StandardExpander reverse();\n-\n-    public abstract StandardExpander reversed();\n-\n-    public StandardExpander addNodeFilter( Predicate<? super Node> filter )\n+    NodeFilter(Predicate<? super Node> predicate)\n     {\n-        return new FilteringExpander( this, new NodeFilter( filter ) );\n+      this.predicate = predicate;\n     }\n \n-    public StandardExpander addRelationshipFilter( Predicate<? super Relationship> filter )\n+    @Override\n+    public String toString()\n     {\n-        return new FilteringExpander( this, new RelationshipFilter( filter ) );\n+      return predicate.toString();\n     }\n \n-    static StandardExpander wrap( PathExpander expander )\n+    @Override\n+    boolean exclude(Path path)\n     {\n-        return new WrappingExpander( expander );\n+      return !predicate.test(path.endNode());\n     }\n+  }\n+\n+  private static final class RelationshipFilter extends Filter\n+  {\n+    private final Predicate<? super Relationship> predicate;\n \n-    public static StandardExpander create( Direction direction )\n+    RelationshipFilter(Predicate<? super Relationship> predicate)\n     {\n-        return new AllExpander( direction );\n+      this.predicate = predicate;\n     }\n \n-    public static StandardExpander create( RelationshipType type, Direction dir )\n+    @Override\n+    public String toString()\n     {\n-        Map<Direction, RelationshipType[]> types = new EnumMap<>( Direction.class );\n-        types.put( dir, new RelationshipType[]{type} );\n-        return new RegularExpander( types );\n+      return predicate.toString();\n     }\n \n-    static StandardExpander create( RelationshipType type1, Direction dir1,\n-                                    RelationshipType type2, Direction dir2 )\n+    @Override\n+    boolean exclude(Path path)\n     {\n-        Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMap();\n-        tempMap.get( dir1 ).add( type1 );\n-        tempMap.get( dir2 ).add( type2 );\n-        return new RegularExpander( toTypeMap( tempMap ) );\n+      return !predicate.test(path.lastRelationship());\n     }\n+  }\n \n-    private static Map<Direction, RelationshipType[]> toTypeMap(\n-            Map<Direction, Collection<RelationshipType>> tempMap )\n-    {\n-        // Remove OUT/IN where there is a BOTH\n-        Collection<RelationshipType> both = tempMap.get( Direction.BOTH );\n-        tempMap.get( Direction.OUTGOING ).removeAll( both );\n-        tempMap.get( Direction.INCOMING ).removeAll( both );\n+  private static final class PathFilter extends Filter\n+  {\n+    private final Predicate<? super Path> predicate;\n \n-        // Convert into a final map\n-        Map<Direction, RelationshipType[]> map = new EnumMap<>( Direction.class );\n-        for ( Map.Entry<Direction, Collection<RelationshipType>> entry : tempMap.entrySet() )\n-        {\n-            if ( !entry.getValue().isEmpty() )\n-            {\n-                map.put( entry.getKey(), entry.getValue().toArray( new RelationshipType[entry.getValue().size()] ) );\n-            }\n-        }\n-        return map;\n+    PathFilter(Predicate<? super Path> predicate)\n+    {\n+      this.predicate = predicate;\n     }\n \n-    private static Map<Direction, Collection<RelationshipType>> temporaryTypeMap()\n+    @Override\n+    public String toString()\n     {\n-        Map<Direction, Collection<RelationshipType>> map = new EnumMap<>( Direction.class );\n-        for ( Direction direction : Direction.values() )\n-        {\n-            map.put( direction, new ArrayList<>() );\n-        }\n-        return map;\n+      return predicate.toString();\n     }\n \n-    private static Map<Direction, Collection<RelationshipType>> temporaryTypeMapFrom( Map<Direction,\n-            RelationshipType[]> typeMap )\n+    @Override\n+    boolean exclude(Path path)\n     {\n-        Map<Direction, Collection<RelationshipType>> map = new EnumMap<>( Direction.class );\n-        for ( Direction direction : Direction.values() )\n-        {\n-            ArrayList<RelationshipType> types = new ArrayList<>();\n-            map.put( direction, types );\n-            RelationshipType[] existing = typeMap.get( direction );\n-            if ( existing != null )\n-            {\n-                types.addAll( asList( existing ) );\n-            }\n-        }\n-        return map;\n+      return !predicate.test(path);\n+    }\n+  }\n+\n+  public final StandardExpansion<Relationship> expand(Node node)\n+  {\n+    return new RelationshipExpansion(this, singleNodePath(node), BranchState.NO_STATE);\n+  }\n+\n+  @Override\n+  public final StandardExpansion<Relationship> expand(Path path, BranchState state)\n+  {\n+    return new RelationshipExpansion(this, path, state);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  static <T> T[] append(T[] array, T item)\n+  {\n+    T[] result = (T[]) Array.newInstance(\n+        array.getClass().getComponentType(), array.length + 1);\n+    System.arraycopy(array, 0, result, 0, array.length);\n+    result[array.length] = item;\n+    return result;\n+  }\n+\n+  static boolean matchDirection(Direction dir, Node start, Relationship rel)\n+  {\n+    switch (dir)\n+    {\n+      case INCOMING:\n+        return rel.getEndNode().equals(start);\n+      case OUTGOING:\n+        return rel.getStartNode().equals(start);\n+      case BOTH:\n+        return true;\n+      default:\n+        throw new IllegalArgumentException(\"Unknown direction: \" + dir);\n     }\n+  }\n+\n+  abstract ResourceIterator<Relationship> doExpand(Path path, BranchState state);\n+\n+  @Override\n+  public final String toString()\n+  {\n+    StringBuilder result = new StringBuilder(\"Expander[\");\n+    buildString(result);\n+    result.append(\"]\");\n+    return result.toString();\n+  }\n+\n+  abstract void buildString(StringBuilder result);\n+\n+  public final StandardExpander add(RelationshipType type)\n+  {\n+    return add(type, Direction.BOTH);\n+  }\n+\n+  public abstract StandardExpander add(RelationshipType type,\n+                                       Direction direction);\n+\n+  public abstract StandardExpander remove(RelationshipType type);\n+\n+  @Override\n+  public abstract StandardExpander reverse();\n+\n+  public abstract StandardExpander reversed();\n+\n+  public StandardExpander addNodeFilter(Predicate<? super Node> filter)\n+  {\n+    return new FilteringExpander(this, new NodeFilter(filter));\n+  }\n+\n+  public StandardExpander addRelationshipFilter(Predicate<? super Relationship> filter)\n+  {\n+    return new FilteringExpander(this, new RelationshipFilter(filter));\n+  }\n+\n+  static StandardExpander wrap(PathExpander expander)\n+  {\n+    return new WrappingExpander(expander);\n+  }\n+\n+  public static StandardExpander create(Direction direction)\n+  {\n+    return new AllExpander(direction);\n+  }\n+\n+  public static StandardExpander create(RelationshipType type, Direction dir)\n+  {\n+    Map<Direction, RelationshipType[]> types = new EnumMap<>(Direction.class);\n+    types.put(dir, new RelationshipType[] {type});\n+    return new RegularExpander(types);\n+  }\n+\n+  static StandardExpander create(RelationshipType type1, Direction dir1,\n+                                 RelationshipType type2, Direction dir2)\n+  {\n+    Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMap();\n+    tempMap.get(dir1).add(type1);\n+    tempMap.get(dir2).add(type2);\n+    return new RegularExpander(toTypeMap(tempMap));\n+  }\n+\n+  private static Map<Direction, RelationshipType[]> toTypeMap(\n+      Map<Direction, Collection<RelationshipType>> tempMap)\n+  {\n+    // Remove OUT/IN where there is a BOTH\n+    Collection<RelationshipType> both = tempMap.get(Direction.BOTH);\n+    tempMap.get(Direction.OUTGOING).removeAll(both);\n+    tempMap.get(Direction.INCOMING).removeAll(both);\n+\n+    // Convert into a final map\n+    Map<Direction, RelationshipType[]> map = new EnumMap<>(Direction.class);\n+    for (Map.Entry<Direction, Collection<RelationshipType>> entry : tempMap.entrySet())\n+    {\n+      if (!entry.getValue().isEmpty())\n+      {\n+        map.put(entry.getKey(), entry.getValue().toArray(new RelationshipType[entry.getValue().size()]));\n+      }\n+    }\n+    return map;\n+  }\n \n-    public static StandardExpander create( RelationshipType type1, Direction dir1,\n-                                           RelationshipType type2, Direction dir2, Object... more )\n+  private static Map<Direction, Collection<RelationshipType>> temporaryTypeMap()\n+  {\n+    Map<Direction, Collection<RelationshipType>> map = new EnumMap<>(Direction.class);\n+    for (Direction direction : Direction.values())\n     {\n-        Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMap();\n-        tempMap.get( dir1 ).add( type1 );\n-        tempMap.get( dir2 ).add( type2 );\n-        for ( int i = 0; i < more.length; i++ )\n-        {\n-            RelationshipType type = (RelationshipType) more[i++];\n-            Direction direction = (Direction) more[i];\n-            tempMap.get( direction ).add( type );\n-        }\n-        return new RegularExpander( toTypeMap( tempMap ) );\n+      map.put(direction, new ArrayList<>());\n+    }\n+    return map;\n+  }\n+\n+  private static Map<Direction, Collection<RelationshipType>> temporaryTypeMapFrom(Map<Direction,\n+      RelationshipType[]> typeMap)\n+  {\n+    Map<Direction, Collection<RelationshipType>> map = new EnumMap<>(Direction.class);\n+    for (Direction direction : Direction.values())\n+    {\n+      ArrayList<RelationshipType> types = new ArrayList<>();\n+      map.put(direction, types);\n+      RelationshipType[] existing = typeMap.get(direction);\n+      if (existing != null)\n+      {\n+        types.addAll(asList(existing));\n+      }\n+    }\n+    return map;\n+  }\n+\n+  public static StandardExpander create(RelationshipType type1, Direction dir1,\n+                                        RelationshipType type2, Direction dir2, Object... more)\n+  {\n+    Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMap();\n+    tempMap.get(dir1).add(type1);\n+    tempMap.get(dir2).add(type2);\n+    for (int i = 0; i < more.length; i++)\n+    {\n+      RelationshipType type = (RelationshipType) more[i++];\n+      Direction direction = (Direction) more[i];\n+      tempMap.get(direction).add(type);\n     }\n+    return new RegularExpander(toTypeMap(tempMap));\n+  }\n }\n",
            "diff_size": 1025
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2299/StandardExpander.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2299/StandardExpander.java\nindex 3422621b946..e3b326526c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2299/StandardExpander.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2299/StandardExpander.java\n@@ -110,7 +110,8 @@ public abstract class StandardExpander implements PathExpander\n                 {\n                     throw new NotFoundException( \"More than one relationship found for \" + this );\n                 }\n-                return result;\n+\n+return result;\n             }\n             return null;\n         }\n@@ -131,8 +132,7 @@ public abstract class StandardExpander implements PathExpander\n         }\n     }\n \n-    private static final class RelationshipExpansion extends\n-            StandardExpansion<Relationship>\n+    private static final class RelationshipExpansion extends StandardExpansion<Relationship>\n     {\n         RelationshipExpansion( StandardExpander expander, Path path, BranchState state )\n         {\n@@ -193,8 +193,7 @@ public abstract class StandardExpander implements PathExpander\n         public ResourceIterator<Node> iterator()\n         {\n             final Node node = path.endNode();\n-\n-            return new MappingResourceIterator<Node, Relationship>( expander.doExpand( path, state ) )\n+return new MappingResourceIterator<Node, Relationship>( expander.doExpand( path, state ) )\n             {\n                 @Override\n                 protected Node map( Relationship rel )\n@@ -240,7 +239,7 @@ public abstract class StandardExpander implements PathExpander\n         @Override\n         public StandardExpander remove( RelationshipType type )\n         {\n-            Map<String, Exclusion> exclude = new HashMap<>();\n+            Map<String,Exclusion> exclude = new HashMap<>();\n             exclude.put( type.name(), Exclusion.ALL );\n             return new ExcludingExpander( Exclusion.include( direction ), exclude );\n         }\n@@ -333,24 +332,23 @@ public abstract class StandardExpander implements PathExpander\n         {\n             switch ( direction )\n             {\n-                case INCOMING:\n+case INCOMING:\n                     return OUTGOING;\n                 case OUTGOING:\n                     return INCOMING;\n                 default:\n                     return NONE;\n-            }\n+    }\n         }\n     }\n \n     private static final class ExcludingExpander extends StandardExpander\n     {\n         private final Exclusion defaultExclusion;\n-        private final Map<String, Exclusion> exclusion;\n+        private final Map<String,Exclusion> exclusion;\n \n-        ExcludingExpander( Exclusion defaultExclusion,\n-                           Map<String, Exclusion> exclusion )\n-        {\n+        ExcludingExpander( Exclusion defaultExclusion, Map<String,Exclusion> exclusion )\n+{\n             this.defaultExclusion = defaultExclusion;\n             this.exclusion = exclusion;\n         }\n@@ -361,7 +359,7 @@ public abstract class StandardExpander implements PathExpander\n             // FIXME: not really correct\n             result.append( defaultExclusion );\n             result.append( \"*\" );\n-            for ( Map.Entry<String, Exclusion> entry : exclusion.entrySet() )\n+            for ( Map.Entry<String,Exclusion> entry : exclusion.entrySet() )\n             {\n                 result.append( \",\" );\n                 result.append( entry.getValue() );\n@@ -377,7 +375,7 @@ public abstract class StandardExpander implements PathExpander\n             return newResourceIterator( new FilteringIterator<>( resourceIterator, rel ->\n             {\n                 Exclusion exclude = exclusion.get( rel.getType().name() );\n-                exclude = (exclude == null) ? defaultExclusion : exclude;\n+                exclude = (exclude == null ) ? defaultExclusion : exclude;\n                 return exclude.accept( node, rel );\n             } ), resourceIterator );\n         }\n@@ -386,8 +384,8 @@ public abstract class StandardExpander implements PathExpander\n         public StandardExpander add( RelationshipType type, Direction direction )\n         {\n             Exclusion excluded = exclusion.get( type.name() );\n-            final Map<String, Exclusion> newExclusion;\n-            if ( (excluded == null ? defaultExclusion : excluded).includes( direction ) )\n+            final Map<String,Exclusion> newExclusion;\n+            if ( ( excluded == null ? defaultExclusion : excluded).includes( direction ) )\n             {\n                 return this;\n             }\n@@ -423,7 +421,7 @@ public abstract class StandardExpander implements PathExpander\n             {\n                 return this;\n             }\n-            Map<String, Exclusion> newExclusion = new HashMap<>( exclusion );\n+            Map<String,Exclusion> newExclusion = new HashMap<>( exclusion );\n             newExclusion.put( type.name(), Exclusion.ALL );\n             return new ExcludingExpander( defaultExclusion, newExclusion );\n         }\n@@ -437,8 +435,8 @@ public abstract class StandardExpander implements PathExpander\n         @Override\n         public StandardExpander reverse()\n         {\n-            Map<String, Exclusion> newExclusion = new HashMap<>();\n-            for ( Map.Entry<String, Exclusion> entry : exclusion.entrySet() )\n+            Map<String,Exclusion> newExclusion = new HashMap<>();\n+            for ( Map.Entry<String,Exclusion> entry : exclusion.entrySet() )\n             {\n                 newExclusion.put( entry.getKey(), entry.getValue().reversed() );\n             }\n@@ -446,8 +444,7 @@ public abstract class StandardExpander implements PathExpander\n         }\n     }\n \n-    public static final StandardExpander DEFAULT = new AllExpander(\n-            Direction.BOTH )\n+    public static final StandardExpander DEFAULT = new AllExpander( Direction.BOTH )\n     {\n         @Override\n         public StandardExpander add( RelationshipType type, Direction direction )\n@@ -456,10 +453,9 @@ public abstract class StandardExpander implements PathExpander\n         }\n     };\n \n-    public static final StandardExpander EMPTY =\n-            new RegularExpander( Collections.emptyMap() );\n+    public static final StandardExpander EMPTY = new RegularExpander( Collections.emptyMap() );\n \n-    private static class DirectionAndTypes\n+private static class DirectionAndTypes\n     {\n         final Direction direction;\n         final RelationshipType[] types;\n@@ -540,7 +536,8 @@ public abstract class StandardExpander implements PathExpander\n             {\n                 tempMap.get( direction ).remove( type );\n             }\n-            return createNew( toTypeMap( tempMap ) );\n+\n+return createNew( toTypeMap( tempMap ) );\n         }\n \n         @Override\n@@ -605,16 +602,13 @@ public abstract class StandardExpander implements PathExpander\n         @Override\n         public StandardExpander addNodeFilter( Predicate<? super Node> filter )\n         {\n-            return new FilteringExpander( expander, append( filters,\n-                    new NodeFilter( filter ) ) );\n+            return new FilteringExpander( expander, append( filters, new NodeFilter( filter ) ) );\n         }\n \n         @Override\n-        public StandardExpander addRelationshipFilter(\n-                Predicate<? super Relationship> filter )\n+        public StandardExpander addRelationshipFilter( Predicate<? super Relationship> filter )\n         {\n-            return new FilteringExpander( expander, append( filters,\n-                    new RelationshipFilter( filter ) ) );\n+            return new FilteringExpander( expander, append( filters, new RelationshipFilter( filter ) ) );\n         }\n \n         @Override\n@@ -775,9 +769,8 @@ public abstract class StandardExpander implements PathExpander\n     @SuppressWarnings( \"unchecked\" )\n     static <T> T[] append( T[] array, T item )\n     {\n-        T[] result = (T[]) Array.newInstance(\n-                array.getClass().getComponentType(), array.length + 1 );\n-        System.arraycopy( array, 0, result, 0, array.length );\n+        T[] result = (T[]) Array.newInstance( array.getClass().getComponentType(), array.length + 1 );\n+System.arraycopy( array, 0, result, 0, array.length );\n         result[array.length] = item;\n         return result;\n     }\n@@ -786,7 +779,7 @@ public abstract class StandardExpander implements PathExpander\n     {\n         switch ( dir )\n         {\n-            case INCOMING:\n+case INCOMING:\n                 return rel.getEndNode().equals( start );\n             case OUTGOING:\n                 return rel.getStartNode().equals( start );\n@@ -794,7 +787,7 @@ public abstract class StandardExpander implements PathExpander\n                 return true;\n             default:\n                 throw new IllegalArgumentException( \"Unknown direction: \" + dir );\n-        }\n+    }\n     }\n \n     abstract ResourceIterator<Relationship> doExpand( Path path, BranchState state );\n@@ -815,10 +808,9 @@ public abstract class StandardExpander implements PathExpander\n         return add( type, Direction.BOTH );\n     }\n \n-    public abstract StandardExpander add( RelationshipType type,\n-                                          Direction direction );\n+    public abstract StandardExpander add( RelationshipType type, Direction direction );\n \n-    public abstract StandardExpander remove( RelationshipType type );\n+public abstract StandardExpander remove( RelationshipType type );\n \n     @Override\n     public abstract StandardExpander reverse();\n@@ -852,17 +844,15 @@ public abstract class StandardExpander implements PathExpander\n         return new RegularExpander( types );\n     }\n \n-    static StandardExpander create( RelationshipType type1, Direction dir1,\n-                                    RelationshipType type2, Direction dir2 )\n-    {\n+    static StandardExpander create( RelationshipType type1, Direction dir1, RelationshipType type2, Direction dir2 )\n+{\n         Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMap();\n         tempMap.get( dir1 ).add( type1 );\n         tempMap.get( dir2 ).add( type2 );\n         return new RegularExpander( toTypeMap( tempMap ) );\n     }\n \n-    private static Map<Direction, RelationshipType[]> toTypeMap(\n-            Map<Direction, Collection<RelationshipType>> tempMap )\n+    private static Map<Direction, RelationshipType[]> toTypeMap( Map<Direction, Collection<RelationshipType>> tempMap )\n     {\n         // Remove OUT/IN where there is a BOTH\n         Collection<RelationshipType> both = tempMap.get( Direction.BOTH );\n@@ -888,7 +878,8 @@ public abstract class StandardExpander implements PathExpander\n         {\n             map.put( direction, new ArrayList<>() );\n         }\n-        return map;\n+\n+return map;\n     }\n \n     private static Map<Direction, Collection<RelationshipType>> temporaryTypeMapFrom( Map<Direction,\n@@ -908,9 +899,8 @@ public abstract class StandardExpander implements PathExpander\n         return map;\n     }\n \n-    public static StandardExpander create( RelationshipType type1, Direction dir1,\n-                                           RelationshipType type2, Direction dir2, Object... more )\n-    {\n+    public static StandardExpander create( RelationshipType type1, Direction dir1, RelationshipType type2, Direction dir2, Object... more )\n+{\n         Map<Direction, Collection<RelationshipType>> tempMap = temporaryTypeMap();\n         tempMap.get( dir1 ).add( type1 );\n         tempMap.get( dir2 ).add( type2 );\n@@ -922,4 +912,4 @@ public abstract class StandardExpander implements PathExpander\n         }\n         return new RegularExpander( toTypeMap( tempMap ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}