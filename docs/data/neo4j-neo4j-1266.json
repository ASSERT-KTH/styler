{
    "project_name": "neo4j-neo4j",
    "error_id": "1266",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1266/Validators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1266/Validators.java\nindex 9f1b25b9f8e..f9790d97e33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1266/Validators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1266/Validators.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.io.File;\n@@ -37,9 +38,9 @@ public final class Validators\n {\n     public static final Validator<String> REGEX_FILE_EXISTS = fileWithRegexInName ->\n     {\n-        if ( matchingFiles( fileWithRegexInName ).isEmpty() )\n+        if (matchingFiles(fileWithRegexInName).isEmpty())\n         {\n-            throw new IllegalArgumentException( \"File '\" + fileWithRegexInName + \"' doesn't exist\" );\n+            throw new IllegalArgumentException(\"File '\" + fileWithRegexInName + \"' doesn't exist\");\n         }\n     };\n \n@@ -47,27 +48,27 @@ public final class Validators\n     {\n     }\n \n-    static List<Path> matchingFiles( String fileWithRegexInName )\n+    static List<Path> matchingFiles(String fileWithRegexInName)\n     {\n         // Special handling of regex patterns for Windows since Windows paths naturally contains \\ characters and also regex can contain those\n         // so in order to support this on Windows then \\\\ will be required in regex patterns and will not be treated as directory delimiter.\n         // Get those double backslashes out of the way so that we can trust the File operations to return correct parent etc.\n-        String parentSafeFileName = fileWithRegexInName.replace( \"\\\\\\\\\", \"__\" );\n-        File absoluteParentSafeFile = new File( parentSafeFileName ).getAbsoluteFile();\n+        String parentSafeFileName = fileWithRegexInName.replace(\"\\\\\\\\\", \"__\");\n+        File absoluteParentSafeFile = new File(parentSafeFileName).getAbsoluteFile();\n         File parent = absoluteParentSafeFile.getParentFile();\n-        Preconditions.checkState( parent != null && parent.exists(), \"Directory %s of %s doesn't exist\", parent, fileWithRegexInName );\n+        Preconditions.checkState(parent != null && parent.exists(), \"Directory %s of %s doesn't exist\", parent, fileWithRegexInName);\n \n         // Then since we can't trust the file operations to do the right thing on Windows if there are regex backslashes we instead\n         // get the pattern by cutting off the parent directory from the name manually.\n         int fileNameLength = absoluteParentSafeFile.getAbsolutePath().length() - parent.getAbsolutePath().length() - 1;\n-        String patternString = fileWithRegexInName.substring( fileWithRegexInName.length() - fileNameLength ).replace( \"\\\\\\\\\", \"\\\\\" );\n-        final Pattern pattern = Pattern.compile( patternString );\n+        String patternString = fileWithRegexInName.substring(fileWithRegexInName.length() - fileNameLength).replace(\"\\\\\\\\\", \"\\\\\");\n+        final Pattern pattern = Pattern.compile(patternString);\n         List<Path> paths = new ArrayList<>();\n-        for ( File file : parent.listFiles() )\n+        for (File file : parent.listFiles())\n         {\n-            if ( pattern.matcher( file.getName() ).matches() )\n+            if (pattern.matcher(file.getName()).matches())\n             {\n-                paths.add( file.toPath() );\n+                paths.add(file.toPath());\n             }\n         }\n         return paths;\n@@ -75,26 +76,26 @@ public final class Validators\n \n     public static final Validator<Path> CONTAINS_EXISTING_DATABASE = dbDir ->\n     {\n-        try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction() )\n+        try (FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction())\n         {\n-            if ( !isExistingDatabase( fileSystem, DatabaseLayout.ofFlat( dbDir ) ) )\n+            if (!isExistingDatabase(fileSystem, DatabaseLayout.ofFlat(dbDir)))\n             {\n-                throw new IllegalArgumentException( \"Directory '\" + dbDir + \"' does not contain a database\" );\n+                throw new IllegalArgumentException(\"Directory '\" + dbDir + \"' does not contain a database\");\n             }\n-        }\n-        catch ( IOException e )\n+        } catch (IOException e)\n         {\n-            throw new UncheckedIOException( e );\n+            throw new UncheckedIOException(e);\n         }\n     };\n \n-    public static boolean isExistingDatabase( FileSystemAbstraction fileSystem, DatabaseLayout layout )\n+    public static boolean isExistingDatabase(FileSystemAbstraction fileSystem, DatabaseLayout layout)\n     {\n-        return fileSystem.fileExists( layout.metadataStore() );\n+        return fileSystem.fileExists(layout.metadataStore());\n     }\n \n     public static <T> Validator<T> emptyValidator()\n     {\n-        return value -> {};\n+        return value -> {\n+        };\n     }\n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1266/Validators.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1266/Validators.java\nindex 9f1b25b9f8e..d87c6e6a0ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1266/Validators.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1266/Validators.java\n@@ -97,4 +97,4 @@ public final class Validators\n     {\n         return value -> {};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}