{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1197",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1197/HaIdReuseEligibility.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1197/HaIdReuseEligibility.java\nindex 570120caf34..772c99614b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1197/HaIdReuseEligibility.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1197/HaIdReuseEligibility.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.id;\n \n import java.time.Clock;\n@@ -32,40 +33,40 @@ import org.neo4j.kernel.impl.store.id.IdReuseEligibility;\n  */\n public class HaIdReuseEligibility implements IdReuseEligibility\n {\n-    private final ClusterMembers members;\n-    private final Clock clock;\n-    private final long idReuseSafeZone;\n+  private final ClusterMembers members;\n+  private final Clock clock;\n+  private final long idReuseSafeZone;\n \n-    public HaIdReuseEligibility( ClusterMembers members, Clock clock, long idReuseSafeZone )\n-    {\n-        this.members = members;\n-        this.clock = clock;\n-        this.idReuseSafeZone = idReuseSafeZone;\n-    }\n+  public HaIdReuseEligibility(ClusterMembers members, Clock clock, long idReuseSafeZone)\n+  {\n+    this.members = members;\n+    this.clock = clock;\n+    this.idReuseSafeZone = idReuseSafeZone;\n+  }\n \n-    @Override\n-    public boolean isEligible( KernelTransactionsSnapshot snapshot )\n+  @Override\n+  public boolean isEligible(KernelTransactionsSnapshot snapshot)\n+  {\n+    switch (members.getCurrentMemberRole())\n     {\n-        switch ( members.getCurrentMemberRole() )\n-        {\n-        case HighAvailabilityModeSwitcher.SLAVE:\n-            // If we're slave right now then just release them because the id generators in slave mode\n-            // will throw them away anyway, no need to keep them in memory. The architecture around\n-            // how buffering is done isn't a 100% fit for HA since the wrapping if IdGeneratorFactory\n-            // where the buffering takes place is done in a place which is oblivious to HA and roles\n-            // which means that buffering will always take place. For now we'll have to live with\n-            // always buffering and only just release them as soon as possible when slave.\n-            return true;\n-        case HighAvailabilityModeSwitcher.MASTER:\n-            // If we're master then we have to keep these ids around during the configured safe zone time\n-            // so that slaves have a chance to read consistently as well (slaves will know and compensate\n-            // for falling outside of safe zone).\n-            return clock.millis() - snapshot.snapshotTime() >= idReuseSafeZone;\n-        default:\n-            // If we're anything other than slave, i.e. also pending then retain the ids since we're\n-            // not quite sure what state we're in at the moment and we clear the id buffers anyway\n-            // during state switch.\n-            return false;\n-        }\n+      case HighAvailabilityModeSwitcher.SLAVE:\n+        // If we're slave right now then just release them because the id generators in slave mode\n+        // will throw them away anyway, no need to keep them in memory. The architecture around\n+        // how buffering is done isn't a 100% fit for HA since the wrapping if IdGeneratorFactory\n+        // where the buffering takes place is done in a place which is oblivious to HA and roles\n+        // which means that buffering will always take place. For now we'll have to live with\n+        // always buffering and only just release them as soon as possible when slave.\n+        return true;\n+      case HighAvailabilityModeSwitcher.MASTER:\n+        // If we're master then we have to keep these ids around during the configured safe zone time\n+        // so that slaves have a chance to read consistently as well (slaves will know and compensate\n+        // for falling outside of safe zone).\n+        return clock.millis() - snapshot.snapshotTime() >= idReuseSafeZone;\n+      default:\n+        // If we're anything other than slave, i.e. also pending then retain the ids since we're\n+        // not quite sure what state we're in at the moment and we clear the id buffers anyway\n+        // during state switch.\n+        return false;\n     }\n+  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1197/HaIdReuseEligibility.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1197/HaIdReuseEligibility.java\nindex 570120caf34..a7cc03811ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1197/HaIdReuseEligibility.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1197/HaIdReuseEligibility.java\n@@ -68,4 +68,4 @@ public class HaIdReuseEligibility implements IdReuseEligibility\n             return false;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}