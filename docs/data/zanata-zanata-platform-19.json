{
    "project_name": "zanata-zanata-platform",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "159",
                "column": "13",
                "severity": "error",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\n            // attach the extensions to the authentication request\n            for(MessageExtension ext : extensions) {\n                authReq.addExtension(ext,\n                        openIdProvider.getAliasForExtension(ext));\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/19/ZanataOpenId.java\nindex 95a2d09b93f..dbd877bfb9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/19/ZanataOpenId.java\n@@ -156,7 +156,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/19/ZanataOpenId.java\nindex 95a2d09b93f..3a7e2da94c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/19/ZanataOpenId.java\n@@ -18,6 +18,7 @@\n  * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n  * 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n  */\n+\n package org.zanata.security;\n \n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n@@ -72,335 +73,335 @@ import java.util.List;\n  * based on org.jboss.seam.security.openid.OpenId class\n  */\n public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n-    private static final Logger LOGGER = LoggerFactory\n-            .getLogger(ZanataOpenId.class);\n-    private static final long serialVersionUID = 275020888578950801L;\n+  private static final Logger LOGGER = LoggerFactory\n+    .getLogger(ZanataOpenId.class);\n+  private static final long serialVersionUID = 275020888578950801L;\n \n-    @Inject\n-    private ZanataIdentity identity;\n+  @Inject\n+  private ZanataIdentity identity;\n \n-    @Inject\n-    private ApplicationConfiguration applicationConfiguration;\n+  @Inject\n+  private ApplicationConfiguration applicationConfiguration;\n \n-    @Inject\n-    private FacesMessages facesMessages;\n+  @Inject\n+  private FacesMessages facesMessages;\n \n-    @Inject\n-    private ZanataCredentials credentials;\n+  @Inject\n+  private ZanataCredentials credentials;\n \n-    @Inject\n-    private UserRedirectBean userRedirect;\n+  @Inject\n+  private UserRedirectBean userRedirect;\n \n-    @Inject\n-    private AccountDAO accountDAO;\n+  @Inject\n+  private AccountDAO accountDAO;\n \n-    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n-    @Inject\n-    private Event<LoginCompleted> loginCompletedEvent;\n+  @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+  @Inject\n+  private Event<LoginCompleted> loginCompletedEvent;\n \n-    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n-    @Inject\n-    private Event<PostAuthenticateEvent> postAuthenticateEvent;\n+  @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+  @Inject\n+  private Event<PostAuthenticateEvent> postAuthenticateEvent;\n \n-    @Inject\n-    private UrlUtil urlUtil;\n+  @Inject\n+  private UrlUtil urlUtil;\n \n-    @Inject\n-    private OpenIdProviderTypeHolder openIdProviderType;\n+  @Inject\n+  private OpenIdProviderTypeHolder openIdProviderType;\n \n-    /**\n-     * An OpenID string: often a URL, but not always.\n-     */\n-    private String id;\n-    private OpenIdAuthenticationResult authResult;\n-    private OpenIdAuthCallback callback;\n+  /**\n+   * An OpenID string: often a URL, but not always.\n+   */\n+  private String id;\n+  private OpenIdAuthenticationResult authResult;\n+  private OpenIdAuthCallback callback;\n \n-    @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n-    private ConsumerManager manager;\n-    private DiscoveryInformation discovered;\n+  @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n+  private ConsumerManager manager;\n+  private DiscoveryInformation discovered;\n \n-    public String getId() {\n-        return id;\n-    }\n+  public String getId() {\n+    return id;\n+  }\n \n-    public void setId(String id) {\n-        this.id = id;\n-    }\n+  public void setId(String id) {\n+    this.id = id;\n+  }\n \n-    public OpenIdAuthenticationResult getAuthResult() {\n-        return authResult;\n-    }\n+  public OpenIdAuthenticationResult getAuthResult() {\n+    return authResult;\n+  }\n \n-    public void setCallback(OpenIdAuthCallback callback) {\n-        this.callback = callback;\n-    }\n+  public void setCallback(OpenIdAuthCallback callback) {\n+    this.callback = callback;\n+  }\n \n-    @SuppressWarnings(\"rawtypes\")\n-    protected String authRequest(OpenIdProvider openIdProvider, String userSuppliedString, String returnToUrl) {\n-        try {\n-            // perform discovery on the user-supplied identifier\n-            List discoveries = manager.discover(userSuppliedString);\n+  @SuppressWarnings(\"rawtypes\")\n+  protected String authRequest(OpenIdProvider openIdProvider, String userSuppliedString, String returnToUrl) {\n+    try {\n+      // perform discovery on the user-supplied identifier\n+      List discoveries = manager.discover(userSuppliedString);\n \n-            // attempt to associate with the OpenID providerType\n-            // and retrieve one service endpoint for authentication\n-            discovered = manager.associate(discoveries);\n+      // attempt to associate with the OpenID providerType\n+      // and retrieve one service endpoint for authentication\n+      discovered = manager.associate(discoveries);\n \n-            // // store the discovery information in the user's session\n-            // httpReq.getSession().setAttribute(\"openid-disc\", discovered);\n+      // // store the discovery information in the user's session\n+      // httpReq.getSession().setAttribute(\"openid-disc\", discovered);\n \n-            // obtain a AuthRequest message to be sent to the OpenID\n-            // providerType\n-            AuthRequest authReq = manager.authenticate(discovered, returnToUrl, realm());\n-\n-            Collection<MessageExtension> extensions =\n-                    openIdProvider.createExtensions();\n-\n-            // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n-                authReq.addExtension(ext,\n-                        openIdProvider.getAliasForExtension(ext));\n-            }\n-\n-            return authReq.getDestinationUrl(true);\n-        } catch (OpenIDException e) {\n-            LOGGER.warn(\"exception\", e);\n-        }\n+      // obtain a AuthRequest message to be sent to the OpenID\n+      // providerType\n+      AuthRequest authReq = manager.authenticate(discovered, returnToUrl, realm());\n \n-        return null;\n-    }\n+      Collection<MessageExtension> extensions =\n+        openIdProvider.createExtensions();\n \n-    public void verify() {\n-        ExternalContext context =\n-                javax.faces.context.FacesContext.getCurrentInstance()\n-                        .getExternalContext();\n-        HttpServletRequest request = (HttpServletRequest) context.getRequest();\n+      // attach the extensions to the authentication request\n+      for (MessageExtension ext : extensions) {\n+        authReq.addExtension(ext,\n+          openIdProvider.getAliasForExtension(ext));\n+      }\n \n-        authResult.setAuthenticatedId(verifyResponse(request));\n+      return authReq.getDestinationUrl(true);\n+    } catch (OpenIDException e) {\n+      LOGGER.warn(\"exception\", e);\n     }\n \n-    public boolean loginImmediately() {\n-        if (authResult.isAuthenticated()) {\n-            ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                    (new SimplePrincipal(authResult.getAuthenticatedId())));\n-            return true;\n-        }\n+    return null;\n+  }\n \n-        return false;\n-    }\n+  public void verify() {\n+    ExternalContext context =\n+      javax.faces.context.FacesContext.getCurrentInstance()\n+        .getExternalContext();\n+    HttpServletRequest request = (HttpServletRequest) context.getRequest();\n \n-    // returns a verified id (external username), or null\n-    @Transactional\n-    public String verifyResponse(HttpServletRequest httpReq) {\n-        try {\n-            // clear any previous messages which might have been generated\n-            // before the openId authentication took place\n-            facesMessages.clear();\n-            /**\n-             * extract the parameters from the authentication response query string\n-             * (which comes in as a HTTP request from the OpenID providerType)\n-             * instead of from httpReq.getParameterMap() to make sure params\n-             * is encoded correctly bypassing default servlets encoding.\n-             *\n-             * httpReq.getParameterMap() failed check in\n-             * {@link org.openid4java.consumer.ConsumerManager#verifySignature}\n-             * due to the unicode encoding in URI is different from signature.\n-             * Reported issue: https://zanata.atlassian.net/browse/ZNTA-1275\n-             */\n-            ParameterList respParams =\n-                ParameterList.createFromQueryString(httpReq.getQueryString());\n-            AuthSuccess authSuccess = AuthSuccess.createAuthSuccess(respParams);\n-\n-            // strip existing params (eg dswid)\n-            String urlWithoutParams = returnToUrl().split(\"\\\\?\", 2)[0];\n-            StringBuilder receivingURL = new StringBuilder(urlWithoutParams);\n-            String queryString = httpReq.getQueryString();\n-            if (queryString != null && queryString.length() > 0) {\n-                receivingURL.append(\"?\").append(queryString);\n-            }\n-\n-            // verify the response; ConsumerManager needs to be the same\n-            // (static) instance used to place the authentication request\n-            VerificationResult verification =\n-                    manager.verify(receivingURL.toString(), respParams,\n-                            discovered);\n-\n-            // The OpenId provider cancelled the authentication\n-            // TODO shouldn't we check verification.getAuthResponse() instanceof AuthFailure ?\n-            if (\"cancel\".equals(respParams.getParameterValue(\"openid.mode\"))) {\n-                // TODO This should be done at a higher level. i.e. instead of\n-                // returning a string, return an\n-                // object that holds more information for the UI to render\n-                facesMessages.addGlobal(\"Authentication Request Cancelled\");\n-            }\n-\n-            // examine the verification result and extract the verified\n-            // identifier\n-            Identifier verified = verification.getVerifiedId();\n-            if (verified != null) {\n-                authResult = new OpenIdAuthenticationResult();\n-                authResult.setAuthenticatedId(verified.getIdentifier());\n-                OpenIdProvider openIdProvider = newOpenIdProvider(openIdProviderType.get());\n-                authResult.setEmail(openIdProvider.getEmail(authSuccess));\n-                authResult.setFullName(openIdProvider.getFullName(authSuccess));\n-                authResult.setUsername(openIdProvider.getUsername(authSuccess));\n-            }\n-\n-            // invoke the callbacks\n-            if (callback != null) {\n-                // CredentialsCreationCallback needs a transaction, but it isn't a CDI bean\n-                // (so @Transactional won't work on it).\n-                callback.afterOpenIdAuth(authResult);\n-                if (callback.getRedirectToUrl() != null) {\n-                    userRedirect.setUrl(callback.getRedirectToUrl());\n-                }\n-            }\n-\n-            if (verified != null) {\n-                return verified.getIdentifier();\n-            }\n-        } catch (OpenIDException e) {\n-            LOGGER.warn(\"exception\", e);\n-        }\n+    authResult.setAuthenticatedId(verifyResponse(request));\n+  }\n \n-        return null;\n+  public boolean loginImmediately() {\n+    if (authResult.isAuthenticated()) {\n+      ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n+        (new SimplePrincipal(authResult.getAuthenticatedId())));\n+      return true;\n     }\n \n-    public void logout() {\n-        init();\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        manager = new ConsumerManager();\n-        discovered = null;\n-        id = null;\n+    return false;\n+  }\n+\n+  // returns a verified id (external username), or null\n+  @Transactional\n+  public String verifyResponse(HttpServletRequest httpReq) {\n+    try {\n+      // clear any previous messages which might have been generated\n+      // before the openId authentication took place\n+      facesMessages.clear();\n+      /**\n+       * extract the parameters from the authentication response query string\n+       * (which comes in as a HTTP request from the OpenID providerType)\n+       * instead of from httpReq.getParameterMap() to make sure params\n+       * is encoded correctly bypassing default servlets encoding.\n+       *\n+       * httpReq.getParameterMap() failed check in\n+       * {@link org.openid4java.consumer.ConsumerManager#verifySignature}\n+       * due to the unicode encoding in URI is different from signature.\n+       * Reported issue: https://zanata.atlassian.net/browse/ZNTA-1275\n+       */\n+      ParameterList respParams =\n+        ParameterList.createFromQueryString(httpReq.getQueryString());\n+      AuthSuccess authSuccess = AuthSuccess.createAuthSuccess(respParams);\n+\n+      // strip existing params (eg dswid)\n+      String urlWithoutParams = returnToUrl().split(\"\\\\?\", 2)[0];\n+      StringBuilder receivingURL = new StringBuilder(urlWithoutParams);\n+      String queryString = httpReq.getQueryString();\n+      if (queryString != null && queryString.length() > 0) {\n+        receivingURL.append(\"?\").append(queryString);\n+      }\n+\n+      // verify the response; ConsumerManager needs to be the same\n+      // (static) instance used to place the authentication request\n+      VerificationResult verification =\n+        manager.verify(receivingURL.toString(), respParams,\n+          discovered);\n+\n+      // The OpenId provider cancelled the authentication\n+      // TODO shouldn't we check verification.getAuthResponse() instanceof AuthFailure ?\n+      if (\"cancel\".equals(respParams.getParameterValue(\"openid.mode\"))) {\n+        // TODO This should be done at a higher level. i.e. instead of\n+        // returning a string, return an\n+        // object that holds more information for the UI to render\n+        facesMessages.addGlobal(\"Authentication Request Cancelled\");\n+      }\n+\n+      // examine the verification result and extract the verified\n+      // identifier\n+      Identifier verified = verification.getVerifiedId();\n+      if (verified != null) {\n         authResult = new OpenIdAuthenticationResult();\n-    }\n-\n-    @SuppressWarnings(\"deprecation\")\n-    private void loginImmediate() {\n-        if (loginImmediately()) {\n-            if (org.zanata.util.Contexts.isRequestContextActive()) {\n-                HAccount authenticatedAccount =\n-                        ServiceLocator.instance().getInstance(\n-                                HAccount.class, new AuthenticatedLiteral());\n-                postAuthenticateEvent.fire(new PostAuthenticateEvent(\n-                        authenticatedAccount));\n-            }\n-\n-            // Events.instance().raiseEvent(Identity.EVENT_LOGIN_SUCCESSFUL,\n-            // AuthenticationType.OPENID);\n-            loginCompletedEvent.fire(new LoginCompleted(AuthenticationType.OPENID));\n+        authResult.setAuthenticatedId(verified.getIdentifier());\n+        OpenIdProvider openIdProvider = newOpenIdProvider(openIdProviderType.get());\n+        authResult.setEmail(openIdProvider.getEmail(authSuccess));\n+        authResult.setFullName(openIdProvider.getFullName(authSuccess));\n+        authResult.setUsername(openIdProvider.getUsername(authSuccess));\n+      }\n+\n+      // invoke the callbacks\n+      if (callback != null) {\n+        // CredentialsCreationCallback needs a transaction, but it isn't a CDI bean\n+        // (so @Transactional won't work on it).\n+        callback.afterOpenIdAuth(authResult);\n+        if (callback.getRedirectToUrl() != null) {\n+          userRedirect.setUrl(callback.getRedirectToUrl());\n         }\n-    }\n+      }\n \n-    private void authenticate(String username, OpenIdProvider openIdProvider,\n-            OpenIdAuthCallback callback) {\n-        String var = openIdProvider.getOpenId(username);\n-        setId(var);\n-        setCallback(callback);\n-        LOGGER.info(\"openid: {}\", getId());\n-        authenticate(openIdProvider);\n+      if (verified != null) {\n+        return verified.getIdentifier();\n+      }\n+    } catch (OpenIDException e) {\n+      LOGGER.warn(\"exception\", e);\n     }\n \n-    public void login(ZanataCredentials credentials) {\n-        this.authenticate(credentials, this);\n+    return null;\n+  }\n+\n+  public void logout() {\n+    init();\n+  }\n+\n+  @PostConstruct\n+  public void init() {\n+    manager = new ConsumerManager();\n+    discovered = null;\n+    id = null;\n+    authResult = new OpenIdAuthenticationResult();\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private void loginImmediate() {\n+    if (loginImmediately()) {\n+      if (org.zanata.util.Contexts.isRequestContextActive()) {\n+        HAccount authenticatedAccount =\n+          ServiceLocator.instance().getInstance(\n+            HAccount.class, new AuthenticatedLiteral());\n+        postAuthenticateEvent.fire(new PostAuthenticateEvent(\n+          authenticatedAccount));\n+      }\n+\n+      // Events.instance().raiseEvent(Identity.EVENT_LOGIN_SUCCESSFUL,\n+      // AuthenticationType.OPENID);\n+      loginCompletedEvent.fire(new LoginCompleted(AuthenticationType.OPENID));\n     }\n-\n-    public void authenticate(ZanataCredentials credentials, OpenIdAuthCallback callback) {\n-        OpenIdProviderType type = credentials.getOpenIdProviderType();\n-        openIdProviderType.set(type);\n-        OpenIdProvider openIdProvider = newOpenIdProvider(type);\n-        this.authenticate(credentials.getUsername(), openIdProvider, callback);\n-    }\n-\n-    private void authenticate(OpenIdProvider openIdProvider) {\n-        authResult = new OpenIdAuthenticationResult();\n-        String returnToUrl = returnToUrl();\n-\n-        String url = authRequest(openIdProvider, id, returnToUrl);\n-\n-        if (url != null) {\n-            // TODO [CDI] commented out seam Redirect.captureCurrentView(). verify this still works\n+  }\n+\n+  private void authenticate(String username, OpenIdProvider openIdProvider,\n+                            OpenIdAuthCallback callback) {\n+    String var = openIdProvider.getOpenId(username);\n+    setId(var);\n+    setCallback(callback);\n+    LOGGER.info(\"openid: {}\", getId());\n+    authenticate(openIdProvider);\n+  }\n+\n+  public void login(ZanataCredentials credentials) {\n+    this.authenticate(credentials, this);\n+  }\n+\n+  public void authenticate(ZanataCredentials credentials, OpenIdAuthCallback callback) {\n+    OpenIdProviderType type = credentials.getOpenIdProviderType();\n+    openIdProviderType.set(type);\n+    OpenIdProvider openIdProvider = newOpenIdProvider(type);\n+    this.authenticate(credentials.getUsername(), openIdProvider, callback);\n+  }\n+\n+  private void authenticate(OpenIdProvider openIdProvider) {\n+    authResult = new OpenIdAuthenticationResult();\n+    String returnToUrl = returnToUrl();\n+\n+    String url = authRequest(openIdProvider, id, returnToUrl);\n+\n+    if (url != null) {\n+      // TODO [CDI] commented out seam Redirect.captureCurrentView(). verify this still works\n //            Redirect redirect = Redirect.instance();\n //            redirect.captureCurrentView();\n-            try {\n-                FacesContext.getCurrentInstance().getExternalContext().redirect(url);\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n+      try {\n+        FacesContext.getCurrentInstance().getExternalContext().redirect(url);\n+      } catch (IOException e) {\n+        throw new RuntimeException(e);\n+      }\n     }\n-\n-    private String realm() {\n-        return applicationConfiguration.getServerPath() + \"/\";\n+  }\n+\n+  private String realm() {\n+    return applicationConfiguration.getServerPath() + \"/\";\n+  }\n+\n+  public String returnToUrl() {\n+    String url = applicationConfiguration.getServerPath() + \"/openid\";\n+    return urlUtil.addWindowId(url);\n+  }\n+\n+  /**\n+   * Default implementation for an authentication callback. This\n+   * implementations simply authenticates the user locally.\n+   */\n+  @Override\n+  public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n+    if (result.isAuthenticated()) {\n+      HAccount authenticatedAccount =\n+        accountDAO.getByCredentialsId(result.getAuthenticatedId());\n+\n+      identity.setPreAuthenticated(true);\n+\n+      // TODO check authenticatedAccount != null only once\n+      if (authenticatedAccount != null\n+        && authenticatedAccount.isEnabled()) {\n+        credentials.setUsername(authenticatedAccount.getUsername());\n+        ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n+          (new SimplePrincipal(result.getAuthenticatedId())));\n+        this.loginImmediate();\n+      } else if (authenticatedAccount != null) {\n+        credentials.setUsername(authenticatedAccount.getUsername());\n+      } else {\n+        // If the user hasn't been registered yet\n+        // this is the full open id\n+        credentials.setUsername(result.getAuthenticatedId());\n+      }\n     }\n-\n-    public String returnToUrl() {\n-        String url = applicationConfiguration.getServerPath() + \"/openid\";\n-        return urlUtil.addWindowId(url);\n+  }\n+\n+  /**\n+   * Default implementation for an authentication callback. This\n+   * implementation does not provide a redirect url.\n+   */\n+  @Override\n+  public String getRedirectToUrl() {\n+    return null;\n+  }\n+\n+  private static OpenIdProvider newOpenIdProvider(OpenIdProviderType openIdProviderType) {\n+    if (openIdProviderType == null) {\n+      throw new RuntimeException(\"OpenIdProviderType is null\");\n     }\n+    switch (openIdProviderType) {\n+    case Fedora:\n+      return new FedoraOpenIdProvider();\n \n-    /**\n-     * Default implementation for an authentication callback. This\n-     * implementations simply authenticates the user locally.\n-     */\n-    @Override\n-    public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n-        if (result.isAuthenticated()) {\n-            HAccount authenticatedAccount =\n-                    accountDAO.getByCredentialsId(result.getAuthenticatedId());\n-\n-            identity.setPreAuthenticated(true);\n-\n-            // TODO check authenticatedAccount != null only once\n-            if (authenticatedAccount != null\n-                    && authenticatedAccount.isEnabled()) {\n-                credentials.setUsername(authenticatedAccount.getUsername());\n-                ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                        (new SimplePrincipal(result.getAuthenticatedId())));\n-                this.loginImmediate();\n-            } else if (authenticatedAccount != null) {\n-                credentials.setUsername(authenticatedAccount.getUsername());\n-            }  else {\n-                // If the user hasn't been registered yet\n-                // this is the full open id\n-                credentials.setUsername(result.getAuthenticatedId());\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Default implementation for an authentication callback. This\n-     * implementation does not provide a redirect url.\n-     */\n-    @Override\n-    public String getRedirectToUrl() {\n-        return null;\n-    }\n+    case Google:\n+      return new GoogleOpenIdProvider();\n \n-    private static OpenIdProvider newOpenIdProvider(OpenIdProviderType openIdProviderType) {\n-        if (openIdProviderType == null) {\n-            throw new RuntimeException(\"OpenIdProviderType is null\");\n-        }\n-        switch (openIdProviderType) {\n-            case Fedora:\n-                return new FedoraOpenIdProvider();\n-\n-            case Google:\n-                return new GoogleOpenIdProvider();\n+    case MyOpenId:\n+      return new MyOpenIdProvider();\n \n-            case MyOpenId:\n-                return new MyOpenIdProvider();\n+    case Yahoo:\n+      return new YahooOpenIdProvider();\n \n-            case Yahoo:\n-                return new YahooOpenIdProvider();\n+    case Generic:\n+      return new GenericOpenIdProvider();\n \n-            case Generic:\n-                return new GenericOpenIdProvider();\n-\n-            default:\n-                throw new RuntimeException(\"Unexpected OpenIdProviderType\");\n-        }\n+    default:\n+      throw new RuntimeException(\"Unexpected OpenIdProviderType\");\n     }\n+  }\n }\n",
            "diff_size": 426
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/19/ZanataOpenId.java\nindex 95a2d09b93f..610ce153ab2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/19/ZanataOpenId.java\n@@ -156,7 +156,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n@@ -321,10 +321,8 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n         String url = authRequest(openIdProvider, id, returnToUrl);\n \n         if (url != null) {\n-            // TODO [CDI] commented out seam Redirect.captureCurrentView(). verify this still works\n-//            Redirect redirect = Redirect.instance();\n-//            redirect.captureCurrentView();\n-            try {\n+            // TO\n+try {\n                 FacesContext.getCurrentInstance().getExternalContext().redirect(url);\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n@@ -362,7 +360,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                 this.loginImmediate();\n             } else if (authenticatedAccount != null) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n-            }  else {\n+            } else {\n                 // If the user hasn't been registered yet\n                 // this is the full open id\n                 credentials.setUsername(result.getAuthenticatedId());\n@@ -403,4 +401,4 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                 throw new RuntimeException(\"Unexpected OpenIdProviderType\");\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/19/ZanataOpenId.java\nindex 95a2d09b93f..e704363769f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/19/ZanataOpenId.java\n@@ -53,7 +53,6 @@ import org.zanata.ui.faces.FacesMessages;\n import org.zanata.util.ServiceLocator;\n import org.zanata.util.Synchronized;\n import org.zanata.util.UrlUtil;\n-\n import javax.annotation.PostConstruct;\n import javax.enterprise.context.SessionScoped;\n import javax.enterprise.event.Event;\n@@ -66,45 +65,35 @@ import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n \n+\n @SessionScoped\n @Synchronized\n /*\n  * based on org.jboss.seam.security.openid.OpenId class\n  */\n public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n-    private static final Logger LOGGER = LoggerFactory\n-            .getLogger(ZanataOpenId.class);\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ZanataOpenId.class);\n     private static final long serialVersionUID = 275020888578950801L;\n-\n     @Inject\n     private ZanataIdentity identity;\n-\n     @Inject\n     private ApplicationConfiguration applicationConfiguration;\n-\n     @Inject\n     private FacesMessages facesMessages;\n-\n     @Inject\n     private ZanataCredentials credentials;\n-\n     @Inject\n     private UserRedirectBean userRedirect;\n-\n     @Inject\n     private AccountDAO accountDAO;\n-\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n     @Inject\n     private Event<LoginCompleted> loginCompletedEvent;\n-\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n     @Inject\n     private Event<PostAuthenticateEvent> postAuthenticateEvent;\n-\n     @Inject\n     private UrlUtil urlUtil;\n-\n     @Inject\n     private OpenIdProviderTypeHolder openIdProviderType;\n \n@@ -114,11 +103,9 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     private String id;\n     private OpenIdAuthenticationResult authResult;\n     private OpenIdAuthCallback callback;\n-\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n     private ConsumerManager manager;\n     private DiscoveryInformation discovered;\n-\n     public String getId() {\n         return id;\n     }\n@@ -151,44 +138,35 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n             // obtain a AuthRequest message to be sent to the OpenID\n             // providerType\n             AuthRequest authReq = manager.authenticate(discovered, returnToUrl, realm());\n-\n-            Collection<MessageExtension> extensions =\n-                    openIdProvider.createExtensions();\n+            Collection<MessageExtension> extensions = openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n-                authReq.addExtension(ext,\n-                        openIdProvider.getAliasForExtension(ext));\n+            for (MessageExtension ext : extensions) {\n+                authReq.addExtension(ext, openIdProvider.getAliasForExtension(ext));\n             }\n-\n             return authReq.getDestinationUrl(true);\n         } catch (OpenIDException e) {\n             LOGGER.warn(\"exception\", e);\n         }\n-\n         return null;\n     }\n \n     public void verify() {\n-        ExternalContext context =\n-                javax.faces.context.FacesContext.getCurrentInstance()\n-                        .getExternalContext();\n+        ExternalContext context = javax.faces.context.FacesContext.getCurrentInstance().getExternalContext();\n         HttpServletRequest request = (HttpServletRequest) context.getRequest();\n-\n         authResult.setAuthenticatedId(verifyResponse(request));\n     }\n \n     public boolean loginImmediately() {\n         if (authResult.isAuthenticated()) {\n-            ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                    (new SimplePrincipal(authResult.getAuthenticatedId())));\n+            ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal((new SimplePrincipal(authResult.getAuthenticatedId())));\n             return true;\n         }\n-\n         return false;\n     }\n \n     // returns a verified id (external username), or null\n+\n     @Transactional\n     public String verifyResponse(HttpServletRequest httpReq) {\n         try {\n@@ -206,8 +184,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n              * due to the unicode encoding in URI is different from signature.\n              * Reported issue: https://zanata.atlassian.net/browse/ZNTA-1275\n              */\n-            ParameterList respParams =\n-                ParameterList.createFromQueryString(httpReq.getQueryString());\n+            ParameterList respParams = ParameterList.createFromQueryString(httpReq.getQueryString());\n             AuthSuccess authSuccess = AuthSuccess.createAuthSuccess(respParams);\n \n             // strip existing params (eg dswid)\n@@ -220,9 +197,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n \n             // verify the response; ConsumerManager needs to be the same\n             // (static) instance used to place the authentication request\n-            VerificationResult verification =\n-                    manager.verify(receivingURL.toString(), respParams,\n-                            discovered);\n+            VerificationResult verification = manager.verify(receivingURL.toString(), respParams, discovered);\n \n             // The OpenId provider cancelled the authentication\n             // TODO shouldn't we check verification.getAuthResponse() instanceof AuthFailure ?\n@@ -254,14 +229,12 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     userRedirect.setUrl(callback.getRedirectToUrl());\n                 }\n             }\n-\n             if (verified != null) {\n                 return verified.getIdentifier();\n             }\n         } catch (OpenIDException e) {\n             LOGGER.warn(\"exception\", e);\n         }\n-\n         return null;\n     }\n \n@@ -281,11 +254,8 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     private void loginImmediate() {\n         if (loginImmediately()) {\n             if (org.zanata.util.Contexts.isRequestContextActive()) {\n-                HAccount authenticatedAccount =\n-                        ServiceLocator.instance().getInstance(\n-                                HAccount.class, new AuthenticatedLiteral());\n-                postAuthenticateEvent.fire(new PostAuthenticateEvent(\n-                        authenticatedAccount));\n+                HAccount authenticatedAccount = ServiceLocator.instance().getInstance(HAccount.class, new AuthenticatedLiteral());\n+                postAuthenticateEvent.fire(new PostAuthenticateEvent(authenticatedAccount));\n             }\n \n             // Events.instance().raiseEvent(Identity.EVENT_LOGIN_SUCCESSFUL,\n@@ -294,8 +264,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n         }\n     }\n \n-    private void authenticate(String username, OpenIdProvider openIdProvider,\n-            OpenIdAuthCallback callback) {\n+    private void authenticate(String username, OpenIdProvider openIdProvider, OpenIdAuthCallback callback) {\n         String var = openIdProvider.getOpenId(username);\n         setId(var);\n         setCallback(callback);\n@@ -317,9 +286,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n     private void authenticate(OpenIdProvider openIdProvider) {\n         authResult = new OpenIdAuthenticationResult();\n         String returnToUrl = returnToUrl();\n-\n         String url = authRequest(openIdProvider, id, returnToUrl);\n-\n         if (url != null) {\n             // TODO [CDI] commented out seam Redirect.captureCurrentView(). verify this still works\n //            Redirect redirect = Redirect.instance();\n@@ -345,24 +312,21 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n      * Default implementation for an authentication callback. This\n      * implementations simply authenticates the user locally.\n      */\n+\n     @Override\n     public void afterOpenIdAuth(OpenIdAuthenticationResult result) {\n         if (result.isAuthenticated()) {\n-            HAccount authenticatedAccount =\n-                    accountDAO.getByCredentialsId(result.getAuthenticatedId());\n-\n+            HAccount authenticatedAccount = accountDAO.getByCredentialsId(result.getAuthenticatedId());\n             identity.setPreAuthenticated(true);\n \n             // TODO check authenticatedAccount != null only once\n-            if (authenticatedAccount != null\n-                    && authenticatedAccount.isEnabled()) {\n+            if (authenticatedAccount != null && authenticatedAccount.isEnabled()) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n-                ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal(\n-                        (new SimplePrincipal(result.getAuthenticatedId())));\n+                ZanataIdentity.instance().acceptExternallyAuthenticatedPrincipal((new SimplePrincipal(result.getAuthenticatedId())));\n                 this.loginImmediate();\n             } else if (authenticatedAccount != null) {\n                 credentials.setUsername(authenticatedAccount.getUsername());\n-            }  else {\n+            } else {\n                 // If the user hasn't been registered yet\n                 // this is the full open id\n                 credentials.setUsername(result.getAuthenticatedId());\n@@ -374,6 +338,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n      * Default implementation for an authentication callback. This\n      * implementation does not provide a redirect url.\n      */\n+\n     @Override\n     public String getRedirectToUrl() {\n         return null;\n@@ -386,21 +351,16 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n         switch (openIdProviderType) {\n             case Fedora:\n                 return new FedoraOpenIdProvider();\n-\n             case Google:\n                 return new GoogleOpenIdProvider();\n-\n             case MyOpenId:\n                 return new MyOpenIdProvider();\n-\n             case Yahoo:\n                 return new YahooOpenIdProvider();\n-\n             case Generic:\n                 return new GenericOpenIdProvider();\n-\n             default:\n                 throw new RuntimeException(\"Unexpected OpenIdProviderType\");\n-        }\n+            }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/19/ZanataOpenId.java\nindex 95a2d09b93f..dbd877bfb9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/19/ZanataOpenId.java\n@@ -156,7 +156,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/19/ZanataOpenId.java\nindex 95a2d09b93f..dbd877bfb9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/19/ZanataOpenId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/19/ZanataOpenId.java\n@@ -156,7 +156,7 @@ public class ZanataOpenId implements OpenIdAuthCallback, Serializable {\n                     openIdProvider.createExtensions();\n \n             // attach the extensions to the authentication request\n-            for(MessageExtension ext : extensions) {\n+            for (MessageExtension ext : extensions) {\n                 authReq.addExtension(ext,\n                         openIdProvider.getAliasForExtension(ext));\n             }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}