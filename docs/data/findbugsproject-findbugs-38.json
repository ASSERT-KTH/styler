{
    "project_name": "findbugsproject-findbugs",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "59",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "     * Creates new form ConfigureDetectorsDialog\n     */\n\tpublic ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n        super(parent, modal);\n        initComponents();\n        postInitComponents();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "63",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/38/ConfigureDetectorsDialog.java\nindex ec2dadec08d..926bbf24521 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler/38/ConfigureDetectorsDialog.java\n@@ -56,7 +56,7 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     /**\n      * Creates new form ConfigureDetectorsDialog\n      */\n-\tpublic ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n+public ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n         super(parent, modal);\n         initComponents();\n         postInitComponents();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/38/ConfigureDetectorsDialog.java\nindex ec2dadec08d..f78e67889bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/38/ConfigureDetectorsDialog.java\n@@ -56,29 +56,29 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     /**\n      * Creates new form ConfigureDetectorsDialog\n      */\n-\tpublic ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n+    public ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n         super(parent, modal);\n         initComponents();\n         postInitComponents();\n-\t}\n+    }\n \n     /**\n      * This method is called from within the constructor to\n      * initialize the form.\n-\t * WARNING: Do NOT modify this code. The content of this method is\n+     * WARNING: Do NOT modify this code. The content of this method is\n      * always regenerated by the Form Editor.\n      */\n     private void initComponents() {//GEN-BEGIN:initComponents\n-\t\tjava.awt.GridBagConstraints gridBagConstraints;\n+        java.awt.GridBagConstraints gridBagConstraints;\n \n         detectorTableScrollPane = new javax.swing.JScrollPane();\n         detectorTable = new javax.swing.JTable();\n         detectorDescriptionScrollPane = new javax.swing.JScrollPane();\n-\t\tdetectorDescription = new javax.swing.JEditorPane();\n+        detectorDescription = new javax.swing.JEditorPane();\n         jSeparator1 = new javax.swing.JSeparator();\n         okButton = new javax.swing.JButton();\n         cancelButton = new javax.swing.JButton();\n-\t\tspacer = new javax.swing.JLabel();\n+        spacer = new javax.swing.JLabel();\n         restoreDefaultsButton = new javax.swing.JButton();\n \n         getContentPane().setLayout(new java.awt.GridBagLayout());\n@@ -86,145 +86,146 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n         setTitle(\"Configure Detectors\");\n         addWindowListener(new java.awt.event.WindowAdapter() {\n             @Override\n-\t\t\tpublic void windowClosing(java.awt.event.WindowEvent evt) {\n+            public void windowClosing(java.awt.event.WindowEvent evt) {\n                 closeDialog(evt);\n             }\n+\n             @Override\n-\t\t\tpublic void windowOpened(java.awt.event.WindowEvent evt) {\n+            public void windowOpened(java.awt.event.WindowEvent evt) {\n                 formWindowOpened(evt);\n             }\n         });\n \n         detectorTableScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));\n         detectorTable.setModel(new javax.swing.table.DefaultTableModel(\n-            new Object [][] {\n+            new Object[][] {\n \n             },\n-            new String [] {\n+            new String[] {\n                 \"Bug Detector\", \"Speed\", \"Enabled\"\n-\t\t\t}\n+            }\n         ) {\n             private static final long serialVersionUID = 1L;\n-            Class[] types = new Class [] {\n-\t\t\t\tjava.lang.String.class, java.lang.String.class, java.lang.Boolean.class\n+            Class[] types = new Class[] {\n+                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class\n             };\n-            boolean[] canEdit = new boolean [] {\n+            boolean[] canEdit = new boolean[] {\n                 false, false, true\n-\t\t\t};\n+            };\n \n             @Override\n             public Class<?> getColumnClass(int columnIndex) {\n-                return types [columnIndex];\n-\t\t\t}\n+                return types[columnIndex];\n+            }\n \n             @Override\n             public boolean isCellEditable(int rowIndex, int columnIndex) {\n-                return canEdit [columnIndex];\n-\t\t\t}\n+                return canEdit[columnIndex];\n+            }\n         });\n         populateTable();\n         detectorTable.getColumnModel().getColumn(ENABLED_COLUMN).setMaxWidth(60);\n-\t\tdetectorTable.getColumnModel().getColumn(SPEED_COLUMN).setMaxWidth(60);\n+        detectorTable.getColumnModel().getColumn(SPEED_COLUMN).setMaxWidth(60);\n         detectorTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n \n         {\n-            DefaultTableModel m = (DefaultTableModel)detectorTable.getModel();\n-            m.setColumnIdentifiers( new String[]\n-\t\t\t\t{\n+            DefaultTableModel m = (DefaultTableModel) detectorTable.getModel();\n+            m.setColumnIdentifiers(new String[]\n+                {\n                     L10N.getLocalString(\"dlg.bugdetector_lbl\", \"Bug Detector\"),\n                     L10N.getLocalString(\"dlg.speed_lbl\", \"Speed\"),\n                     L10N.getLocalString(\"dlg.enabled_lbl\", \"Enabled\"),\n-\t\t\t\t});\n+                });\n+\n+            DefaultSortedTableModel sortedModel = new DefaultSortedTableModel(m, detectorTable.getTableHeader());\n+            detectorTable.setModel(sortedModel);\n+        }\n \n-                DefaultSortedTableModel sortedModel = new DefaultSortedTableModel(m, detectorTable.getTableHeader());\n-                detectorTable.setModel(sortedModel);\n+        detectorTableScrollPane.setViewportView(detectorTable);\n+\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridwidth = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.8;\n+        gridBagConstraints.insets = new java.awt.Insets(6, 6, 2, 6);\n+        getContentPane().add(detectorTableScrollPane, gridBagConstraints);\n+\n+        detectorDescriptionScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));\n+        detectorDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(110, 120));\n+        detectorDescriptionScrollPane.setViewportView(detectorDescription);\n+\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridwidth = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.weighty = 0.3;\n+        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);\n+        getContentPane().add(detectorDescriptionScrollPane, gridBagConstraints);\n+\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 2;\n+        gridBagConstraints.gridwidth = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);\n+        getContentPane().add(jSeparator1, gridBagConstraints);\n+\n+        okButton.setMnemonic('O');\n+        okButton.setText(\"OK\");\n+        okButton.setText(L10N.getLocalString(\"dlg.ok_btn\", \"OK\"));\n+        okButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                okButtonActionPerformed(evt);\n             }\n+        });\n \n-            detectorTableScrollPane.setViewportView(detectorTable);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridwidth = 4;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-\t\t\tgridBagConstraints.weightx = 1.0;\n-            gridBagConstraints.weighty = 0.8;\n-            gridBagConstraints.insets = new java.awt.Insets(6, 6, 2, 6);\n-            getContentPane().add(detectorTableScrollPane, gridBagConstraints);\n-\n-            detectorDescriptionScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));\n-            detectorDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(110, 120));\n-            detectorDescriptionScrollPane.setViewportView(detectorDescription);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 0;\n-            gridBagConstraints.gridy = 1;\n-\t\t\tgridBagConstraints.gridwidth = 4;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-            gridBagConstraints.weighty = 0.3;\n-            gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);\n-\t\t\tgetContentPane().add(detectorDescriptionScrollPane, gridBagConstraints);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 0;\n-            gridBagConstraints.gridy = 2;\n-\t\t\tgridBagConstraints.gridwidth = 4;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-            gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);\n-            getContentPane().add(jSeparator1, gridBagConstraints);\n-\n-            okButton.setMnemonic('O');\n-            okButton.setText(\"OK\");\n-            okButton.setText(L10N.getLocalString(\"dlg.ok_btn\",\"OK\"));\n-\t\t\tokButton.addActionListener(new java.awt.event.ActionListener() {\n-                public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                    okButtonActionPerformed(evt);\n-                }\n-\t\t\t});\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 2;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 2);\n-            getContentPane().add(okButton, gridBagConstraints);\n-\n-            cancelButton.setMnemonic('C');\n-            cancelButton.setText(\"Cancel\");\n-            cancelButton.setText(L10N.getLocalString(\"dlg.cancel_btn\", \"Cancel\"));\n-\t\t\tcancelButton.addActionListener(new java.awt.event.ActionListener() {\n-                public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                    cancelButtonActionPerformed(evt);\n-                }\n-\t\t\t});\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 3;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.insets = new java.awt.Insets(0, 2, 4, 6);\n-            getContentPane().add(cancelButton, gridBagConstraints);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 1;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-            gridBagConstraints.weightx = 1.0;\n-            getContentPane().add(spacer, gridBagConstraints);\n-\n-            restoreDefaultsButton.setText(\"Restore Defaults\");\n-            restoreDefaultsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n-            restoreDefaultsButton.setText(L10N.getLocalString(\"dlg.restoredefaults_btn\", \"Restore Defaults\"));\n-\t\t\trestoreDefaultsButton.addActionListener(new java.awt.event.ActionListener() {\n-                public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                    restoreDefaultsButtonActionPerformed(evt);\n-                }\n-\t\t\t});\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 2);\n+        getContentPane().add(okButton, gridBagConstraints);\n+\n+        cancelButton.setMnemonic('C');\n+        cancelButton.setText(\"Cancel\");\n+        cancelButton.setText(L10N.getLocalString(\"dlg.cancel_btn\", \"Cancel\"));\n+        cancelButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                cancelButtonActionPerformed(evt);\n+            }\n+        });\n \n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 0;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.insets = new java.awt.Insets(0, 6, 4, 0);\n-            getContentPane().add(restoreDefaultsButton, gridBagConstraints);\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 2, 4, 6);\n+        getContentPane().add(cancelButton, gridBagConstraints);\n+\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+        gridBagConstraints.weightx = 1.0;\n+        getContentPane().add(spacer, gridBagConstraints);\n+\n+        restoreDefaultsButton.setText(\"Restore Defaults\");\n+        restoreDefaultsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n+        restoreDefaultsButton.setText(L10N.getLocalString(\"dlg.restoredefaults_btn\", \"Restore Defaults\"));\n+        restoreDefaultsButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                restoreDefaultsButtonActionPerformed(evt);\n+            }\n+        });\n+\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 6, 4, 0);\n+        getContentPane().add(restoreDefaultsButton, gridBagConstraints);\n \n-            pack();\n-        }//GEN-END:initComponents\n+        pack();\n+    }//GEN-END:initComponents\n \n     private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened\n         setTitle(L10N.getLocalString(\"dlg.configuredetectors_ttl\", \"Configure Detectors\"));\n@@ -233,19 +234,20 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     /**\n      * reverts the selected state of all the detectors to their defaults as specified in the findbugs.xml file\n      *\n-\t * @param evt the swing event corresponding to the mouse click of the Restore Defaults button\n+     * @param evt the swing event corresponding to the mouse click of the Restore Defaults button\n      */\n     private void restoreDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreDefaultsButtonActionPerformed\n         Iterator<DetectorFactory> i = DetectorFactoryCollection.instance().factoryIterator();\n-\t\tDefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n+        DefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n         TableModel model = sorter.getBaseTableModel();\n         int row = 0;\n         while (i.hasNext()) {\n-\t\t\tDetectorFactory factory = i.next();\n-            if (factory.isHidden())\n+            DetectorFactory factory = i.next();\n+            if (factory.isHidden()) {\n                 continue;\n+            }\n             model.setValueAt(factory.isDefaultEnabled() ? Boolean.TRUE : Boolean.FALSE, row++, ENABLED_COLUMN);\n-\t\t}\n+        }\n     }//GEN-LAST:event_restoreDefaultsButtonActionPerformed\n \n     private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed\n@@ -255,21 +257,21 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed\n         // Update new enabled/disabled status for the Detectors\n         int num = factoryList.size();\n-\t\tDefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n+        DefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n         TableModel model = sorter.getBaseTableModel();\n         for (int i = 0; i < num; ++i) {\n             DetectorFactory factory = factoryList.get(i);\n-\t\t\tBoolean enabled = (Boolean) model.getValueAt(i, ENABLED_COLUMN);\n+            Boolean enabled = (Boolean) model.getValueAt(i, ENABLED_COLUMN);\n             UserPreferences.getUserPreferences().enableDetector(\n-                    factory, enabled.booleanValue());\n+                factory, enabled.booleanValue());\n         }\n-\t\tcloseDialog();\n+        closeDialog();\n     }//GEN-LAST:event_okButtonActionPerformed\n \n     /**\n      * Closes the dialog\n      */\n-\tprivate void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog\n+    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog\n         setVisible(false);\n         dispose();\n     }//GEN-LAST:event_closeDialog\n@@ -277,7 +279,7 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     /**\n      * installs a list selection listener to populate the bottom details page based on selection changes in top grid.\n      * A conversion from the table sorter index to the base model index is done to get the correct details\n-\t */\n+     */\n     private void postInitComponents() {\n         // Listen to detector table selections so we can (hopefully)\n         // display the description of the detector\n@@ -285,82 +287,85 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n         ListSelectionModel rowSM = detectorTable.getSelectionModel();\n         rowSM.addListSelectionListener(new ListSelectionListener() {\n             public void valueChanged(ListSelectionEvent e) {\n-\t\t\t\tif (e.getValueIsAdjusting()) return;\n+                if (e.getValueIsAdjusting()) {\n+                    return;\n+                }\n \n                 ListSelectionModel lsm = (ListSelectionModel) e.getSource();\n                 if (!lsm.isSelectionEmpty()) {\n                     int selectedRow = lsm.getMinSelectionIndex();\n-\t\t\t\t\tDefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n+                    DefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n                     viewDetectorDetails(factoryList.get(sorter.getBaseModelIndex(selectedRow)));\n                 }\n             }\n-\t\t});\n+        });\n     }\n \n     /**\n      * populates the bottom detector details pane based on the detector selected\n      *\n-\t * @param factory the detector that is currently selected\n+     * @param factory the detector that is currently selected\n      */\n     private void viewDetectorDetails(DetectorFactory factory) {\n         String detailHTML = factory.getDetailHTML();\n-\t\tif (detailHTML == null) {\n+        if (detailHTML == null) {\n             detectorDescription.setText(\"\");\n         } else {\n             detectorDescription.setContentType(\"text/html\");\n-\t\t\tdetectorDescription.setText(detailHTML);\n+            detectorDescription.setText(detailHTML);\n             StringBuilder toolTip = new StringBuilder(100);\n             toolTip.append(\"<html><body><b>\");\n             toolTip.append(factory.getFullName());\n-\t\t\ttoolTip.append(\"</b><br><br><table border='1' width='100%'><tr><th>\");\n+            toolTip.append(\"</b><br><br><table border='1' width='100%'><tr><th>\");\n             toolTip.append(L10N.getLocalString(\"msg.bugpatternsreported_txt\", \"Bug Patterns Reported\"));\n             toolTip.append(\"</th></tr>\");\n \n             Collection<BugPattern> patterns = factory.getReportedBugPatterns();\n             for (BugPattern pattern : patterns) {\n                 toolTip.append(\"<tr><td align='center'>\");\n-\t\t\t\ttoolTip.append(\"[\");\n+                toolTip.append(\"[\");\n                 toolTip.append(pattern.getAbbrev());\n                 toolTip.append(\"] \");\n                 toolTip.append(pattern.getType());\n-\t\t\t\ttoolTip.append(\"</td></tr>\");\n+                toolTip.append(\"</td></tr>\");\n             }\n             toolTip.append(\"</body></html>\");\n             detectorDescription.setToolTipText(toolTip.toString());\n-\t\t}\n+        }\n     }\n \n     /**\n      * populates the Detector JTable model with all available detectors\n      * Due to Netbeans form builder, populate table gets called before the tablesorter is installed,\n-\t * so it is correct for the model retrieved from the table to be assumed to be the base DefaultTableModel.\n+     * so it is correct for the model retrieved from the table to be assumed to be the base DefaultTableModel.\n      */\n     private void populateTable() {\n         Iterator<DetectorFactory> i = DetectorFactoryCollection.instance().factoryIterator();\n-\t\twhile (i.hasNext()) {\n+        while (i.hasNext()) {\n             DetectorFactory factory = i.next();\n-            if (factory.isHidden())\n+            if (factory.isHidden()) {\n                 continue;\n-\t\t\tDefaultTableModel model = (DefaultTableModel) detectorTable.getModel();\n-            model.addRow(new Object[]{\n-                    factory.getShortName(),\n-                    factory.getSpeed(),\n-\t\t\t\t\tUserPreferences.getUserPreferences().isDetectorEnabled(factory)\n-                        ? Boolean.TRUE : Boolean.FALSE\n-                    });\n+            }\n+            DefaultTableModel model = (DefaultTableModel) detectorTable.getModel();\n+            model.addRow(new Object[] {\n+                factory.getShortName(),\n+                factory.getSpeed(),\n+                UserPreferences.getUserPreferences().isDetectorEnabled(factory)\n+                    ? Boolean.TRUE : Boolean.FALSE\n+            });\n             factoryList.add(factory);\n-\t\t}\n+        }\n     }\n \n     private void closeDialog() {\n         setVisible(false);\n         dispose();\n-\t}\n+    }\n \n     /**\n      * @param args the command line arguments\n      */\n-\tpublic static void main(String args[]) {\n+    public static void main(String args[]) {\n         new ConfigureDetectorsDialog(new javax.swing.JFrame(), true).setVisible(true);\n     }\n \n@@ -368,11 +373,11 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     // Variables declaration - do not modify//GEN-BEGIN:variables\n     private javax.swing.JButton cancelButton;\n     private javax.swing.JEditorPane detectorDescription;\n-\tprivate javax.swing.JScrollPane detectorDescriptionScrollPane;\n+    private javax.swing.JScrollPane detectorDescriptionScrollPane;\n     private javax.swing.JTable detectorTable;\n     private javax.swing.JScrollPane detectorTableScrollPane;\n     private javax.swing.JSeparator jSeparator1;\n-\tprivate javax.swing.JButton okButton;\n+    private javax.swing.JButton okButton;\n     private javax.swing.JButton restoreDefaultsButton;\n     private javax.swing.JLabel spacer;\n     // End of variables declaration//GEN-END:variables\n",
            "diff_size": 212
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/38/ConfigureDetectorsDialog.java\nindex ec2dadec08d..138f4ade8eb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/38/ConfigureDetectorsDialog.java\n@@ -29,13 +29,11 @@ package edu.umd.cs.findbugs.gui;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n-\n import javax.swing.ListSelectionModel;\n import javax.swing.event.ListSelectionEvent;\n import javax.swing.event.ListSelectionListener;\n import javax.swing.table.DefaultTableModel;\n import javax.swing.table.TableModel;\n-\n import edu.umd.cs.findbugs.BugPattern;\n import edu.umd.cs.findbugs.DetectorFactory;\n import edu.umd.cs.findbugs.DetectorFactoryCollection;\n@@ -47,184 +45,159 @@ import edu.umd.cs.findbugs.config.UserPreferences;\n  *\n  * @author David Hovemeyer\n  */\n-public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n+\n+public class ConfigureDetectorsDialog extends\n+    javax.swing.JDialog {\n     private static final long serialVersionUID = 1L;\n \n     private static final int SPEED_COLUMN = 1;\n+\n     private static final int ENABLED_COLUMN = 2;\n \n     /**\n      * Creates new form ConfigureDetectorsDialog\n      */\n-\tpublic ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n+\n+\n+    public ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n         super(parent, modal);\n         initComponents();\n         postInitComponents();\n-\t}\n+    }\n \n     /**\n      * This method is called from within the constructor to\n      * initialize the form.\n-\t * WARNING: Do NOT modify this code. The content of this method is\n+     * WARNING: Do NOT modify this code. The content of this method is\n      * always regenerated by the Form Editor.\n      */\n-    private void initComponents() {//GEN-BEGIN:initComponents\n-\t\tjava.awt.GridBagConstraints gridBagConstraints;\n \n+    private void initComponents() {//GEN-BEGIN:initComponents\n+        java.awt.GridBagConstraints gridBagConstraints;\n         detectorTableScrollPane = new javax.swing.JScrollPane();\n         detectorTable = new javax.swing.JTable();\n         detectorDescriptionScrollPane = new javax.swing.JScrollPane();\n-\t\tdetectorDescription = new javax.swing.JEditorPane();\n+        detectorDescription = new javax.swing.JEditorPane();\n         jSeparator1 = new javax.swing.JSeparator();\n         okButton = new javax.swing.JButton();\n         cancelButton = new javax.swing.JButton();\n-\t\tspacer = new javax.swing.JLabel();\n+        spacer = new javax.swing.JLabel();\n         restoreDefaultsButton = new javax.swing.JButton();\n-\n         getContentPane().setLayout(new java.awt.GridBagLayout());\n-\n         setTitle(\"Configure Detectors\");\n         addWindowListener(new java.awt.event.WindowAdapter() {\n             @Override\n-\t\t\tpublic void windowClosing(java.awt.event.WindowEvent evt) {\n+            public void windowClosing(java.awt.event.WindowEvent evt) {\n                 closeDialog(evt);\n             }\n+\n             @Override\n-\t\t\tpublic void windowOpened(java.awt.event.WindowEvent evt) {\n+            public void windowOpened(java.awt.event.WindowEvent evt) {\n                 formWindowOpened(evt);\n             }\n         });\n-\n         detectorTableScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));\n-        detectorTable.setModel(new javax.swing.table.DefaultTableModel(\n-            new Object [][] {\n-\n-            },\n-            new String [] {\n-                \"Bug Detector\", \"Speed\", \"Enabled\"\n-\t\t\t}\n-        ) {\n-            private static final long serialVersionUID = 1L;\n-            Class[] types = new Class [] {\n-\t\t\t\tjava.lang.String.class, java.lang.String.class, java.lang.Boolean.class\n-            };\n-            boolean[] canEdit = new boolean [] {\n-                false, false, true\n-\t\t\t};\n+        detectorTable.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {}, new String[] { \"Bug Detector\", \"Speed\", \"Enabled\" }) {\n+                                   private static final long serialVersionUID = 1L;\n \n-            @Override\n-            public Class<?> getColumnClass(int columnIndex) {\n-                return types [columnIndex];\n-\t\t\t}\n+                                   Class[] types = new Class[] { java.lang.String.class, java.lang.String.class, java.lang.Boolean.class };\n \n-            @Override\n-            public boolean isCellEditable(int rowIndex, int columnIndex) {\n-                return canEdit [columnIndex];\n-\t\t\t}\n+                                   boolean[] canEdit = new boolean[] { false, false, true };\n+\n+                                   @Override\n+                                   public Class<?> getColumnClass(int columnIndex) {\n+                                       return types[columnIndex];\n+                                   }\n+\n+                                   @Override\n+                                   public boolean isCellEditable(int rowIndex, int columnIndex) {\n+                                       return canEdit[columnIndex];\n+                                   }\n         });\n         populateTable();\n         detectorTable.getColumnModel().getColumn(ENABLED_COLUMN).setMaxWidth(60);\n-\t\tdetectorTable.getColumnModel().getColumn(SPEED_COLUMN).setMaxWidth(60);\n+        detectorTable.getColumnModel().getColumn(SPEED_COLUMN).setMaxWidth(60);\n         detectorTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n-\n         {\n-            DefaultTableModel m = (DefaultTableModel)detectorTable.getModel();\n-            m.setColumnIdentifiers( new String[]\n-\t\t\t\t{\n-                    L10N.getLocalString(\"dlg.bugdetector_lbl\", \"Bug Detector\"),\n-                    L10N.getLocalString(\"dlg.speed_lbl\", \"Speed\"),\n-                    L10N.getLocalString(\"dlg.enabled_lbl\", \"Enabled\"),\n-\t\t\t\t});\n-\n-                DefaultSortedTableModel sortedModel = new DefaultSortedTableModel(m, detectorTable.getTableHeader());\n-                detectorTable.setModel(sortedModel);\n+            DefaultTableModel m = (DefaultTableModel) detectorTable.getModel();\n+            m.setColumnIdentifiers(new String[] { L10N.getLocalString(\"dlg.bugdetector_lbl\", \"Bug Detector\"), L10N.getLocalString(\"dlg.speed_lbl\", \"Speed\"), L10N.getLocalString(\"dlg.enabled_lbl\", \"Enabled\"), });\n+            DefaultSortedTableModel sortedModel = new DefaultSortedTableModel(m, detectorTable.getTableHeader());\n+            detectorTable.setModel(sortedModel);\n+        }\n+        detectorTableScrollPane.setViewportView(detectorTable);\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridwidth = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.weightx = 1.0;\n+        gridBagConstraints.weighty = 0.8;\n+        gridBagConstraints.insets = new java.awt.Insets(6, 6, 2, 6);\n+        getContentPane().add(detectorTableScrollPane, gridBagConstraints);\n+        detectorDescriptionScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));\n+        detectorDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(110, 120));\n+        detectorDescriptionScrollPane.setViewportView(detectorDescription);\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 1;\n+        gridBagConstraints.gridwidth = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n+        gridBagConstraints.weighty = 0.3;\n+        gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);\n+        getContentPane().add(detectorDescriptionScrollPane, gridBagConstraints);\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 2;\n+        gridBagConstraints.gridwidth = 4;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);\n+        getContentPane().add(jSeparator1, gridBagConstraints);\n+        okButton.setMnemonic('O');\n+        okButton.setText(\"OK\");\n+        okButton.setText(L10N.getLocalString(\"dlg.ok_btn\", \"OK\"));\n+        okButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                okButtonActionPerformed(evt);\n             }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 2;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 2);\n+        getContentPane().add(okButton, gridBagConstraints);\n+        cancelButton.setMnemonic('C');\n+        cancelButton.setText(\"Cancel\");\n+        cancelButton.setText(L10N.getLocalString(\"dlg.cancel_btn\", \"Cancel\"));\n+        cancelButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                cancelButtonActionPerformed(evt);\n+            }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 3;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 2, 4, 6);\n+        getContentPane().add(cancelButton, gridBagConstraints);\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 1;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n+        gridBagConstraints.weightx = 1.0;\n+        getContentPane().add(spacer, gridBagConstraints);\n+        restoreDefaultsButton.setText(\"Restore Defaults\");\n+        restoreDefaultsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n+        restoreDefaultsButton.setText(L10N.getLocalString(\"dlg.restoredefaults_btn\", \"Restore Defaults\"));\n+        restoreDefaultsButton.addActionListener(new java.awt.event.ActionListener() {\n+            public void actionPerformed(java.awt.event.ActionEvent evt) {\n+                restoreDefaultsButtonActionPerformed(evt);\n+            }\n+        });\n+        gridBagConstraints = new java.awt.GridBagConstraints();\n+        gridBagConstraints.gridx = 0;\n+        gridBagConstraints.gridy = 3;\n+        gridBagConstraints.insets = new java.awt.Insets(0, 6, 4, 0);\n+        getContentPane().add(restoreDefaultsButton, gridBagConstraints);\n+        pack();\n+    }//GEN-END:initComponents\n \n-            detectorTableScrollPane.setViewportView(detectorTable);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridwidth = 4;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-\t\t\tgridBagConstraints.weightx = 1.0;\n-            gridBagConstraints.weighty = 0.8;\n-            gridBagConstraints.insets = new java.awt.Insets(6, 6, 2, 6);\n-            getContentPane().add(detectorTableScrollPane, gridBagConstraints);\n-\n-            detectorDescriptionScrollPane.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));\n-            detectorDescriptionScrollPane.setPreferredSize(new java.awt.Dimension(110, 120));\n-            detectorDescriptionScrollPane.setViewportView(detectorDescription);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 0;\n-            gridBagConstraints.gridy = 1;\n-\t\t\tgridBagConstraints.gridwidth = 4;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;\n-            gridBagConstraints.weighty = 0.3;\n-            gridBagConstraints.insets = new java.awt.Insets(2, 6, 2, 6);\n-\t\t\tgetContentPane().add(detectorDescriptionScrollPane, gridBagConstraints);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 0;\n-            gridBagConstraints.gridy = 2;\n-\t\t\tgridBagConstraints.gridwidth = 4;\n-            gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-            gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);\n-            getContentPane().add(jSeparator1, gridBagConstraints);\n-\n-            okButton.setMnemonic('O');\n-            okButton.setText(\"OK\");\n-            okButton.setText(L10N.getLocalString(\"dlg.ok_btn\",\"OK\"));\n-\t\t\tokButton.addActionListener(new java.awt.event.ActionListener() {\n-                public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                    okButtonActionPerformed(evt);\n-                }\n-\t\t\t});\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 2;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 2);\n-            getContentPane().add(okButton, gridBagConstraints);\n-\n-            cancelButton.setMnemonic('C');\n-            cancelButton.setText(\"Cancel\");\n-            cancelButton.setText(L10N.getLocalString(\"dlg.cancel_btn\", \"Cancel\"));\n-\t\t\tcancelButton.addActionListener(new java.awt.event.ActionListener() {\n-                public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                    cancelButtonActionPerformed(evt);\n-                }\n-\t\t\t});\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 3;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.insets = new java.awt.Insets(0, 2, 4, 6);\n-            getContentPane().add(cancelButton, gridBagConstraints);\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 1;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;\n-            gridBagConstraints.weightx = 1.0;\n-            getContentPane().add(spacer, gridBagConstraints);\n-\n-            restoreDefaultsButton.setText(\"Restore Defaults\");\n-            restoreDefaultsButton.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);\n-            restoreDefaultsButton.setText(L10N.getLocalString(\"dlg.restoredefaults_btn\", \"Restore Defaults\"));\n-\t\t\trestoreDefaultsButton.addActionListener(new java.awt.event.ActionListener() {\n-                public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                    restoreDefaultsButtonActionPerformed(evt);\n-                }\n-\t\t\t});\n-\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n-            gridBagConstraints.gridx = 0;\n-            gridBagConstraints.gridy = 3;\n-\t\t\tgridBagConstraints.insets = new java.awt.Insets(0, 6, 4, 0);\n-            getContentPane().add(restoreDefaultsButton, gridBagConstraints);\n-\n-            pack();\n-        }//GEN-END:initComponents\n \n     private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened\n         setTitle(L10N.getLocalString(\"dlg.configuredetectors_ttl\", \"Configure Detectors\"));\n@@ -233,43 +206,48 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     /**\n      * reverts the selected state of all the detectors to their defaults as specified in the findbugs.xml file\n      *\n-\t * @param evt the swing event corresponding to the mouse click of the Restore Defaults button\n+     * @param evt the swing event corresponding to the mouse click of the Restore Defaults button\n      */\n+\n+\n     private void restoreDefaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreDefaultsButtonActionPerformed\n         Iterator<DetectorFactory> i = DetectorFactoryCollection.instance().factoryIterator();\n-\t\tDefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n+        DefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n         TableModel model = sorter.getBaseTableModel();\n         int row = 0;\n         while (i.hasNext()) {\n-\t\t\tDetectorFactory factory = i.next();\n+            DetectorFactory factory = i.next();\n             if (factory.isHidden())\n                 continue;\n             model.setValueAt(factory.isDefaultEnabled() ? Boolean.TRUE : Boolean.FALSE, row++, ENABLED_COLUMN);\n-\t\t}\n+        }\n     }//GEN-LAST:event_restoreDefaultsButtonActionPerformed\n \n+\n     private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed\n         closeDialog();\n     }//GEN-LAST:event_cancelButtonActionPerformed\n \n+\n     private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed\n         // Update new enabled/disabled status for the Detectors\n         int num = factoryList.size();\n-\t\tDefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n+        DefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n         TableModel model = sorter.getBaseTableModel();\n         for (int i = 0; i < num; ++i) {\n             DetectorFactory factory = factoryList.get(i);\n-\t\t\tBoolean enabled = (Boolean) model.getValueAt(i, ENABLED_COLUMN);\n-            UserPreferences.getUserPreferences().enableDetector(\n-                    factory, enabled.booleanValue());\n+            Boolean enabled = (Boolean) model.getValueAt(i, ENABLED_COLUMN);\n+            UserPreferences.getUserPreferences().enableDetector(factory, enabled.booleanValue());\n         }\n-\t\tcloseDialog();\n+        closeDialog();\n     }//GEN-LAST:event_okButtonActionPerformed\n \n     /**\n      * Closes the dialog\n      */\n-\tprivate void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog\n+\n+\n+    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog\n         setVisible(false);\n         dispose();\n     }//GEN-LAST:event_closeDialog\n@@ -277,106 +255,118 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     /**\n      * installs a list selection listener to populate the bottom details page based on selection changes in top grid.\n      * A conversion from the table sorter index to the base model index is done to get the correct details\n-\t */\n+     */\n+\n+\n     private void postInitComponents() {\n         // Listen to detector table selections so we can (hopefully)\n         // display the description of the detector\n-\n         ListSelectionModel rowSM = detectorTable.getSelectionModel();\n         rowSM.addListSelectionListener(new ListSelectionListener() {\n             public void valueChanged(ListSelectionEvent e) {\n-\t\t\t\tif (e.getValueIsAdjusting()) return;\n-\n+                if (e.getValueIsAdjusting())\n+                    return;\n                 ListSelectionModel lsm = (ListSelectionModel) e.getSource();\n                 if (!lsm.isSelectionEmpty()) {\n                     int selectedRow = lsm.getMinSelectionIndex();\n-\t\t\t\t\tDefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n+                    DefaultSortedTableModel sorter = (DefaultSortedTableModel) detectorTable.getModel();\n                     viewDetectorDetails(factoryList.get(sorter.getBaseModelIndex(selectedRow)));\n                 }\n             }\n-\t\t});\n+        });\n     }\n \n     /**\n      * populates the bottom detector details pane based on the detector selected\n      *\n-\t * @param factory the detector that is currently selected\n+     * @param factory the detector that is currently selected\n      */\n+\n+\n     private void viewDetectorDetails(DetectorFactory factory) {\n         String detailHTML = factory.getDetailHTML();\n-\t\tif (detailHTML == null) {\n+        if (detailHTML == null) {\n             detectorDescription.setText(\"\");\n         } else {\n             detectorDescription.setContentType(\"text/html\");\n-\t\t\tdetectorDescription.setText(detailHTML);\n+            detectorDescription.setText(detailHTML);\n             StringBuilder toolTip = new StringBuilder(100);\n             toolTip.append(\"<html><body><b>\");\n             toolTip.append(factory.getFullName());\n-\t\t\ttoolTip.append(\"</b><br><br><table border='1' width='100%'><tr><th>\");\n+            toolTip.append(\"</b><br><br><table border='1' width='100%'><tr><th>\");\n             toolTip.append(L10N.getLocalString(\"msg.bugpatternsreported_txt\", \"Bug Patterns Reported\"));\n             toolTip.append(\"</th></tr>\");\n-\n             Collection<BugPattern> patterns = factory.getReportedBugPatterns();\n             for (BugPattern pattern : patterns) {\n                 toolTip.append(\"<tr><td align='center'>\");\n-\t\t\t\ttoolTip.append(\"[\");\n+                toolTip.append(\"[\");\n                 toolTip.append(pattern.getAbbrev());\n                 toolTip.append(\"] \");\n                 toolTip.append(pattern.getType());\n-\t\t\t\ttoolTip.append(\"</td></tr>\");\n+                toolTip.append(\"</td></tr>\");\n             }\n             toolTip.append(\"</body></html>\");\n             detectorDescription.setToolTipText(toolTip.toString());\n-\t\t}\n+        }\n     }\n \n     /**\n      * populates the Detector JTable model with all available detectors\n      * Due to Netbeans form builder, populate table gets called before the tablesorter is installed,\n-\t * so it is correct for the model retrieved from the table to be assumed to be the base DefaultTableModel.\n+     * so it is correct for the model retrieved from the table to be assumed to be the base DefaultTableModel.\n      */\n+\n+\n     private void populateTable() {\n         Iterator<DetectorFactory> i = DetectorFactoryCollection.instance().factoryIterator();\n-\t\twhile (i.hasNext()) {\n+        while (i.hasNext()) {\n             DetectorFactory factory = i.next();\n             if (factory.isHidden())\n                 continue;\n-\t\t\tDefaultTableModel model = (DefaultTableModel) detectorTable.getModel();\n-            model.addRow(new Object[]{\n-                    factory.getShortName(),\n-                    factory.getSpeed(),\n-\t\t\t\t\tUserPreferences.getUserPreferences().isDetectorEnabled(factory)\n-                        ? Boolean.TRUE : Boolean.FALSE\n-                    });\n+            DefaultTableModel model = (DefaultTableModel) detectorTable.getModel();\n+            model.addRow(new Object[] { factory.getShortName(), factory.getSpeed(), UserPreferences.getUserPreferences().isDetectorEnabled(factory) ? Boolean.TRUE : Boolean.FALSE });\n             factoryList.add(factory);\n-\t\t}\n+        }\n     }\n \n+\n     private void closeDialog() {\n         setVisible(false);\n         dispose();\n-\t}\n+    }\n \n     /**\n      * @param args the command line arguments\n      */\n-\tpublic static void main(String args[]) {\n+\n+    public static void main(String args[]) {\n         new ConfigureDetectorsDialog(new javax.swing.JFrame(), true).setVisible(true);\n     }\n \n \n     // Variables declaration - do not modify//GEN-BEGIN:variables\n+\n+\n     private javax.swing.JButton cancelButton;\n+\n     private javax.swing.JEditorPane detectorDescription;\n-\tprivate javax.swing.JScrollPane detectorDescriptionScrollPane;\n+\n+    private javax.swing.JScrollPane detectorDescriptionScrollPane;\n+\n     private javax.swing.JTable detectorTable;\n+\n     private javax.swing.JScrollPane detectorTableScrollPane;\n+\n     private javax.swing.JSeparator jSeparator1;\n-\tprivate javax.swing.JButton okButton;\n+\n+    private javax.swing.JButton okButton;\n+\n     private javax.swing.JButton restoreDefaultsButton;\n+\n     private javax.swing.JLabel spacer;\n     // End of variables declaration//GEN-END:variables\n \n     // My variables\n+\n     private ArrayList<DetectorFactory> factoryList = new ArrayList<DetectorFactory>();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 281
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/38/ConfigureDetectorsDialog.java\nindex ec2dadec08d..926bbf24521 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/38/ConfigureDetectorsDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/styler_random/38/ConfigureDetectorsDialog.java\n@@ -56,7 +56,7 @@ public class ConfigureDetectorsDialog extends javax.swing.JDialog {\n     /**\n      * Creates new form ConfigureDetectorsDialog\n      */\n-\tpublic ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n+public ConfigureDetectorsDialog(java.awt.Frame parent, boolean modal) {\n         super(parent, modal);\n         initComponents();\n         postInitComponents();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}