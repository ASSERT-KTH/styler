{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2304",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "201",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "270",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "300",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2304/AppCommandParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2304/AppCommandParser.java\nindex 85aa43716a6..e948193d2e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2304/AppCommandParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2304/AppCommandParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell;\n \n import java.util.ArrayList;\n@@ -31,9 +32,9 @@ import static org.neo4j.helpers.TextUtil.tokenizeStringWithQuotes;\n /**\n  * Parses a line from the client with the intention of interpreting it as\n  * an \"app\" command, f.ex. like:\n- *\n+ * <p>\n  * \"ls -pf --long-option title.* 12\"\n- *\n+ * <p>\n  * o ls is the app.\n  * o p and f are options, p w/o value and f has the value \"title.*\"\n  * (defined in {@link App#getOptionDefinition(String)}.\n@@ -42,281 +43,287 @@ import static org.neo4j.helpers.TextUtil.tokenizeStringWithQuotes;\n  */\n public class AppCommandParser\n {\n-    private final AppShellServer server;\n-    private final String line;\n-    private String appName;\n-    private App app;\n-    private final Map<String, String> options = new HashMap<>();\n-    private final List<String> arguments = new ArrayList<>();\n-\n-    /**\n-     * @param server the server used to find apps.\n-     * @param line   the line from the client to interpret.\n-     * @throws Exception if there's something wrong with the line.\n-     */\n-    public AppCommandParser( AppShellServer server, String line )\n-            throws Exception\n-    {\n-        this.server = server;\n-        this.line = line;\n-        String trimmedLine = line != null ? prepareLine( line ) : line;\n-        this.parse( trimmedLine );\n-    }\n-\n-    private String prepareLine( String line )\n-    {\n-        // Replace \\n with space, and remove comments\n-        line = line.trim();\n-        String[] lines = line.split( \"\\n\" );\n-        StringBuilder builder = new StringBuilder();\n-        for ( String singleLine : lines )\n-        {\n-            if ( singleLine.startsWith( \"//\" ) )\n-            {\n-                continue; // Skip comments\n-            }\n-\n-            if ( builder.length() > 0 )\n-            {\n-                builder.append( ' ' );\n-            }\n-\n-            builder.append( singleLine );\n-        }\n-\n-        return builder.toString();\n-    }\n-\n-    private void parse( String line ) throws Exception\n-    {\n-        if ( line == null || line.trim().length() == 0 )\n-        {\n-            app = new NoopApp();\n-            return;\n-        }\n-\n-        this.parseApp( line );\n-        this.parseParameters( line );\n-    }\n-\n-    /**\n-     * Extracts the app name (f.ex. ls or rm) from the supplied line.\n-     *\n-     * @param line the line to extract the app name from.\n-     * @return the app name for {@code line}.\n-     */\n-    public static String parseOutAppName( String line )\n-    {\n-        int index = findNextWhiteSpaceOrLeftParenthesis( line, 0 );\n-        return index == -1 ? line : line.substring( 0, index );\n-    }\n-\n-    private void parseApp( String line ) throws Exception\n-    {\n-        int index = findNextWhiteSpaceOrLeftParenthesis( line, 0 );\n-        appName = index == -1 ? line : line.substring( 0, index );\n-        appName = appName.toLowerCase();\n-        app = server.findApp( appName );\n-        if ( app == null )\n-        {\n-            throw new ShellException( \"Unknown command '\" + appName + \"'\" );\n-        }\n-    }\n-\n-    private void parseParameters( String line ) throws ShellException\n+  private final AppShellServer server;\n+  private final String line;\n+  private String appName;\n+  private App app;\n+  private final Map<String, String> options = new HashMap<>();\n+  private final List<String> arguments = new ArrayList<>();\n+\n+  /**\n+   * @param server the server used to find apps.\n+   * @param line   the line from the client to interpret.\n+   * @throws Exception if there's something wrong with the line.\n+   */\n+  public AppCommandParser(AppShellServer server, String line)\n+      throws Exception\n+  {\n+    this.server = server;\n+    this.line = line;\n+    String trimmedLine = line != null ? prepareLine(line) : line;\n+    this.parse(trimmedLine);\n+  }\n+\n+  private String prepareLine(String line)\n+  {\n+    // Replace \\n with space, and remove comments\n+    line = line.trim();\n+    String[] lines = line.split(\"\\n\");\n+    StringBuilder builder = new StringBuilder();\n+    for (String singleLine : lines)\n     {\n-        String rest = line.substring( appName.length() ).trim();\n-        String[] parsed = tokenizeStringWithQuotes( rest, false, false );\n-        for ( int i = 0; i < parsed.length; i++ )\n-        {\n-            String string = parsed[i];\n-            if ( app.takesOptions() && isMultiCharOption( string ) )\n-            {\n-                String name = string.substring( 2 );\n-                i = fetchArguments( parsed, i, name );\n-            }\n-            else if ( app.takesOptions() && isSingleCharOption( string ) )\n-            {\n-                String options = string.substring( 1 );\n-                for ( int o = 0; o < options.length(); o++ )\n-                {\n-                    String name = String.valueOf( options.charAt( o ) );\n-                    i = fetchArguments( parsed, i, name );\n-                }\n-            }\n-            else if ( string.length() > 0 )\n-            {\n-                this.arguments.add( string );\n-            }\n-        }\n-    }\n+      if (singleLine.startsWith(\"//\"))\n+      {\n+        continue; // Skip comments\n+      }\n \n-    private boolean isOption( String string )\n-    {\n-        return isSingleCharOption( string ) || isMultiCharOption( string );\n-    }\n-\n-    private boolean isMultiCharOption( String string )\n-    {\n-        return string.startsWith( \"--\" );\n-    }\n+      if (builder.length() > 0)\n+      {\n+        builder.append(' ');\n+      }\n \n-    private boolean isSingleCharOption( String string )\n-    {\n-        return string.startsWith( \"-\" ) && !isANegativeNumber( string );\n+      builder.append(singleLine);\n     }\n \n-    private boolean isANegativeNumber( String string )\n-    {\n-        try\n-        {\n-            Integer.parseInt( string );\n-            return true;\n-        }\n-        catch ( NumberFormatException e )\n-        {\n-            return false;\n-        }\n-    }\n+    return builder.toString();\n+  }\n \n-    private int fetchArguments( String[] parsed, int whereAreWe, String optionName ) throws ShellException\n+  private void parse(String line) throws Exception\n+  {\n+    if (line == null || line.trim().length() == 0)\n     {\n-        String value = null;\n-        OptionDefinition definition =\n-                this.app.getOptionDefinition( optionName );\n-        if ( definition == null )\n-        {\n-            throw new ShellException( \"Unrecognized option '\" + optionName + \"'\" );\n-        }\n-\n-        OptionValueType type = definition.getType();\n-        if ( type == OptionValueType.MUST )\n-        {\n-            whereAreWe++;\n-            String message = \"Value required for '\" + optionName + \"'\";\n-            this.assertHasIndex( parsed, whereAreWe, message );\n-            value = parsed[whereAreWe];\n-            if ( this.isOption( value ) )\n-            {\n-                throw new ShellException( message );\n-            }\n-        }\n-        else if ( type == OptionValueType.MAY )\n-        {\n-            if ( this.hasIndex( parsed, whereAreWe + 1 ) &&\n-                 !this.isOption( parsed[whereAreWe + 1] ) )\n-            {\n-                whereAreWe++;\n-                value = parsed[whereAreWe];\n-            }\n-        }\n-        this.options.put( optionName, value );\n-        return whereAreWe;\n+      app = new NoopApp();\n+      return;\n     }\n \n-    private boolean hasIndex( String[] array, int index )\n+    this.parseApp(line);\n+    this.parseParameters(line);\n+  }\n+\n+  /**\n+   * Extracts the app name (f.ex. ls or rm) from the supplied line.\n+   *\n+   * @param line the line to extract the app name from.\n+   * @return the app name for {@code line}.\n+   */\n+  public static String parseOutAppName(String line)\n+  {\n+    int index = findNextWhiteSpaceOrLeftParenthesis(line, 0);\n+    return index == -1 ? line : line.substring(0, index);\n+  }\n+\n+  private void parseApp(String line) throws Exception\n+  {\n+    int index = findNextWhiteSpaceOrLeftParenthesis(line, 0);\n+    appName = index == -1 ? line : line.substring(0, index);\n+    appName = appName.toLowerCase();\n+    app = server.findApp(appName);\n+    if (app == null)\n     {\n-        return index >= 0 && index < array.length;\n+      throw new ShellException(\"Unknown command '\" + appName + \"'\");\n     }\n+  }\n \n-    private void assertHasIndex( String[] array, int index, String message ) throws ShellException\n+  private void parseParameters(String line) throws ShellException\n+  {\n+    String rest = line.substring(appName.length()).trim();\n+    String[] parsed = tokenizeStringWithQuotes(rest, false, false);\n+    for (int i = 0; i < parsed.length; i++)\n     {\n-        if ( !this.hasIndex( array, index ) )\n+      String string = parsed[i];\n+      if (app.takesOptions() && isMultiCharOption(string))\n+      {\n+        String name = string.substring(2);\n+        i = fetchArguments(parsed, i, name);\n+      } else if (app.takesOptions() && isSingleCharOption(string))\n+      {\n+        String options = string.substring(1);\n+        for (int o = 0; o < options.length(); o++)\n         {\n-            throw new ShellException( message );\n+          String name = String.valueOf(options.charAt(o));\n+          i = fetchArguments(parsed, i, name);\n         }\n+      } else if (string.length() > 0)\n+      {\n+        this.arguments.add(string);\n+      }\n     }\n-\n-    private static int findNextWhiteSpaceOrLeftParenthesis( String line, int fromIndex )\n+  }\n+\n+  private boolean isOption(String string)\n+  {\n+    return isSingleCharOption(string) || isMultiCharOption(string);\n+  }\n+\n+  private boolean isMultiCharOption(String string)\n+  {\n+    return string.startsWith(\"--\");\n+  }\n+\n+  private boolean isSingleCharOption(String string)\n+  {\n+    return string.startsWith(\"-\") && !isANegativeNumber(string);\n+  }\n+\n+  private boolean isANegativeNumber(String string)\n+  {\n+    try\n     {\n-        int indexOfWhiteSpace = line.indexOf( ' ', fromIndex );\n-        if ( indexOfWhiteSpace == -1 )\n-        {\n-            indexOfWhiteSpace = line.indexOf( '\\t', fromIndex );\n-        }\n-        //allow using both create () and create()\n-        int indexOfLeftParenthesis = line.indexOf( '(', fromIndex );\n-\n-        if ( indexOfLeftParenthesis != -1 )\n-        {\n-            return Math.min(indexOfWhiteSpace, indexOfLeftParenthesis);\n-        }\n-        else\n-        {\n-            return indexOfWhiteSpace;\n-        }\n-    }\n-\n-    /** @return the name of the app (from {@link #getLine()}). */\n-    public String getAppName()\n+      Integer.parseInt(string);\n+      return true;\n+    } catch (NumberFormatException e)\n     {\n-        return this.appName;\n+      return false;\n     }\n-\n-    /** @return the app corresponding to the {@link #getAppName()}. */\n-    public App app()\n+  }\n+\n+  private int fetchArguments(String[] parsed, int whereAreWe, String optionName) throws ShellException\n+  {\n+    String value = null;\n+    OptionDefinition definition =\n+        this.app.getOptionDefinition(optionName);\n+    if (definition == null)\n     {\n-        return this.app;\n+      throw new ShellException(\"Unrecognized option '\" + optionName + \"'\");\n     }\n \n-    /** @return the supplied options (from {@link #getLine()}). */\n-    public Map<String, String> options()\n+    OptionValueType type = definition.getType();\n+    if (type == OptionValueType.MUST)\n     {\n-        return this.options;\n-    }\n-\n-    public String option( String name, String defaultValue )\n+      whereAreWe++;\n+      String message = \"Value required for '\" + optionName + \"'\";\n+      this.assertHasIndex(parsed, whereAreWe, message);\n+      value = parsed[whereAreWe];\n+      if (this.isOption(value))\n+      {\n+        throw new ShellException(message);\n+      }\n+    } else if (type == OptionValueType.MAY)\n     {\n-        String result = options.get( name );\n-        return result != null ? result : defaultValue;\n+      if (this.hasIndex(parsed, whereAreWe + 1) &&\n+          !this.isOption(parsed[whereAreWe + 1]))\n+      {\n+        whereAreWe++;\n+        value = parsed[whereAreWe];\n+      }\n     }\n-\n-    public Number optionAsNumber( String name, Number defaultValue )\n+    this.options.put(optionName, value);\n+    return whereAreWe;\n+  }\n+\n+  private boolean hasIndex(String[] array, int index)\n+  {\n+    return index >= 0 && index < array.length;\n+  }\n+\n+  private void assertHasIndex(String[] array, int index, String message) throws ShellException\n+  {\n+    if (!this.hasIndex(array, index))\n     {\n-        String value = option( name, null );\n-        if ( value != null )\n-        {\n-            if ( value.indexOf( ',' ) != -1 || value.indexOf( '.' ) != -1 )\n-            {\n-                return Double.valueOf( value );\n-            }\n-            else\n-            {\n-                return Integer.valueOf( value );\n-            }\n-        }\n-        return defaultValue;\n+      throw new ShellException(message);\n     }\n+  }\n \n-    /** @return the arguments (from {@link #getLine()}). */\n-    public List<String> arguments()\n+  private static int findNextWhiteSpaceOrLeftParenthesis(String line, int fromIndex)\n+  {\n+    int indexOfWhiteSpace = line.indexOf(' ', fromIndex);\n+    if (indexOfWhiteSpace == -1)\n     {\n-        return this.arguments;\n+      indexOfWhiteSpace = line.indexOf('\\t', fromIndex);\n     }\n+    //allow using both create () and create()\n+    int indexOfLeftParenthesis = line.indexOf('(', fromIndex);\n \n-    public String argumentWithDefault( int index, String defaultValue )\n+    if (indexOfLeftParenthesis != -1)\n     {\n-        return index < arguments.size() ? arguments.get( index ) : defaultValue;\n-    }\n-\n-    public String argument( int index, String errorMessageIfItDoesNotExist ) throws ShellException\n+      return Math.min(indexOfWhiteSpace, indexOfLeftParenthesis);\n+    } else\n     {\n-        if ( index >= arguments.size() )\n-        {\n-            throw new ShellException( errorMessageIfItDoesNotExist );\n-        }\n-        return arguments.get( index );\n+      return indexOfWhiteSpace;\n     }\n-\n-    /** @return the entire line from the client. */\n-    public String getLine()\n+  }\n+\n+  /**\n+   * @return the name of the app (from {@link #getLine()}).\n+   */\n+  public String getAppName()\n+  {\n+    return this.appName;\n+  }\n+\n+  /**\n+   * @return the app corresponding to the {@link #getAppName()}.\n+   */\n+  public App app()\n+  {\n+    return this.app;\n+  }\n+\n+  /**\n+   * @return the supplied options (from {@link #getLine()}).\n+   */\n+  public Map<String, String> options()\n+  {\n+    return this.options;\n+  }\n+\n+  public String option(String name, String defaultValue)\n+  {\n+    String result = options.get(name);\n+    return result != null ? result : defaultValue;\n+  }\n+\n+  public Number optionAsNumber(String name, Number defaultValue)\n+  {\n+    String value = option(name, null);\n+    if (value != null)\n     {\n-        return this.line;\n+      if (value.indexOf(',') != -1 || value.indexOf('.') != -1)\n+      {\n+        return Double.valueOf(value);\n+      } else\n+      {\n+        return Integer.valueOf(value);\n+      }\n     }\n-\n-    /** @return the line w/o the app (just the options and arguments). */\n-    public String getLineWithoutApp()\n+    return defaultValue;\n+  }\n+\n+  /**\n+   * @return the arguments (from {@link #getLine()}).\n+   */\n+  public List<String> arguments()\n+  {\n+    return this.arguments;\n+  }\n+\n+  public String argumentWithDefault(int index, String defaultValue)\n+  {\n+    return index < arguments.size() ? arguments.get(index) : defaultValue;\n+  }\n+\n+  public String argument(int index, String errorMessageIfItDoesNotExist) throws ShellException\n+  {\n+    if (index >= arguments.size())\n     {\n-        return this.line.substring( this.appName.length() ).trim();\n+      throw new ShellException(errorMessageIfItDoesNotExist);\n     }\n+    return arguments.get(index);\n+  }\n+\n+  /**\n+   * @return the entire line from the client.\n+   */\n+  public String getLine()\n+  {\n+    return this.line;\n+  }\n+\n+  /**\n+   * @return the line w/o the app (just the options and arguments).\n+   */\n+  public String getLineWithoutApp()\n+  {\n+    return this.line.substring(this.appName.length()).trim();\n+  }\n }\n",
            "diff_size": 404
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "204",
                    "column": "58",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2304/AppCommandParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2304/AppCommandParser.java\nindex 85aa43716a6..1ad72d2027b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2304/AppCommandParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2304/AppCommandParser.java\n@@ -46,7 +46,7 @@ public class AppCommandParser\n     private final String line;\n     private String appName;\n     private App app;\n-    private final Map<String, String> options = new HashMap<>();\n+    private final Map<String,String> options = new HashMap<>();\n     private final List<String> arguments = new ArrayList<>();\n \n     /**\n@@ -54,9 +54,8 @@ public class AppCommandParser\n      * @param line   the line from the client to interpret.\n      * @throws Exception if there's something wrong with the line.\n      */\n-    public AppCommandParser( AppShellServer server, String line )\n-            throws Exception\n-    {\n+    public AppCommandParser( AppShellServer server, String line ) throws Exception\n+{\n         this.server = server;\n         this.line = line;\n         String trimmedLine = line != null ? prepareLine( line ) : line;\n@@ -182,9 +181,8 @@ public class AppCommandParser\n     private int fetchArguments( String[] parsed, int whereAreWe, String optionName ) throws ShellException\n     {\n         String value = null;\n-        OptionDefinition definition =\n-                this.app.getOptionDefinition( optionName );\n-        if ( definition == null )\n+        OptionDefinition definition = this.app.getOptionDefinition( optionName );\n+if ( definition == null )\n         {\n             throw new ShellException( \"Unrecognized option '\" + optionName + \"'\" );\n         }\n@@ -203,9 +201,8 @@ public class AppCommandParser\n         }\n         else if ( type == OptionValueType.MAY )\n         {\n-            if ( this.hasIndex( parsed, whereAreWe + 1 ) &&\n-                 !this.isOption( parsed[whereAreWe + 1] ) )\n-            {\n+            if ( this.hasIndex( parsed, whereAreWe + 1 ) &&!this.isOption( parsed[whereAreWe + 1] ) )\n+{\n                 whereAreWe++;\n                 value = parsed[whereAreWe];\n             }\n@@ -236,10 +233,9 @@ public class AppCommandParser\n         }\n         //allow using both create () and create()\n         int indexOfLeftParenthesis = line.indexOf( '(', fromIndex );\n-\n-        if ( indexOfLeftParenthesis != -1 )\n+if ( indexOfLeftParenthesis != -1 )\n         {\n-            return Math.min(indexOfWhiteSpace, indexOfLeftParenthesis);\n+            return Math.min( indexOfWhiteSpace, indexOfLeftParenthesis );\n         }\n         else\n         {\n@@ -260,7 +256,7 @@ public class AppCommandParser\n     }\n \n     /** @return the supplied options (from {@link #getLine()}). */\n-    public Map<String, String> options()\n+    public Map<String,String> options()\n     {\n         return this.options;\n     }\n@@ -305,7 +301,8 @@ public class AppCommandParser\n         {\n             throw new ShellException( errorMessageIfItDoesNotExist );\n         }\n-        return arguments.get( index );\n+\n+return arguments.get( index );\n     }\n \n     /** @return the entire line from the client. */\n@@ -319,4 +316,4 @@ public class AppCommandParser\n     {\n         return this.line.substring( this.appName.length() ).trim();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}