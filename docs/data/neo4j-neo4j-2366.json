{
    "project_name": "neo4j-neo4j",
    "error_id": "2366",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "30",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "30",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2366/StandardConstraintRuleAccessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2366/StandardConstraintRuleAccessor.java\nindex 1ef74a895ef..e456a82a1d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2366/StandardConstraintRuleAccessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2366/StandardConstraintRuleAccessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api;\n \n import org.neo4j.internal.schema.ConstraintDescriptor;\n@@ -26,28 +27,28 @@ import org.neo4j.internal.schema.constraints.UniquenessConstraintDescriptor;\n public class StandardConstraintRuleAccessor implements ConstraintRuleAccessor\n {\n     @Override\n-    public ConstraintDescriptor readConstraint( ConstraintDescriptor constraint )\n+    public ConstraintDescriptor readConstraint(ConstraintDescriptor constraint)\n     {\n         return constraint;\n     }\n \n     @Override\n     public ConstraintDescriptor createUniquenessConstraintRule(\n-            long ruleId, UniquenessConstraintDescriptor constraint, long indexId )\n+      long ruleId, UniquenessConstraintDescriptor constraint, long indexId)\n     {\n-        return constraint.withId( ruleId ).withOwnedIndexId( indexId );\n+        return constraint.withId(ruleId).withOwnedIndexId(indexId);\n     }\n \n     @Override\n     public ConstraintDescriptor createNodeKeyConstraintRule(\n-            long ruleId, NodeKeyConstraintDescriptor constraint, long indexId )\n+      long ruleId, NodeKeyConstraintDescriptor constraint, long indexId)\n     {\n-        return constraint.withId( ruleId ).withOwnedIndexId( indexId );\n+        return constraint.withId(ruleId).withOwnedIndexId(indexId);\n     }\n \n     @Override\n-    public ConstraintDescriptor createExistenceConstraint( long ruleId, ConstraintDescriptor constraint )\n+    public ConstraintDescriptor createExistenceConstraint(long ruleId, ConstraintDescriptor constraint)\n     {\n-        return constraint.withId( ruleId );\n+        return constraint.withId(ruleId);\n     }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}