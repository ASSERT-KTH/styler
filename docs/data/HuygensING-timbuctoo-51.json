{
    "project_name": "HuygensING-timbuctoo",
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "263",
                "severity": "error",
                "message": "'catch' child has incorrect indentation level 10, expected level should be 8.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "          );\n        } catch (\n          PermissionFetchingException | AuthorizationCreationException | IOException | ResourceSyncException e1) {\n          throw new DataStoreCreationException(e1);\n        }\n      }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "263",
                    "severity": "error",
                    "message": "'catch' child has incorrect indentation level 10, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "263",
                    "severity": "error",
                    "message": "'catch' child has incorrect indentation level 10, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 280).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "'lambda arguments' has incorrect indentation level 48, expected level should be 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "'lambda arguments' has incorrect indentation level 46, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "254",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 35, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "255",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 35, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 33, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/51/DataSetRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/51/DataSetRepository.java\nindex 24d76737804..280b3d24913 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/51/DataSetRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/51/DataSetRepository.java\n@@ -27,7 +27,6 @@ import nl.knaw.huygens.timbuctoo.v5.util.TimbuctooRdfIdHelper;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n@@ -52,10 +51,9 @@ import static nl.knaw.huygens.timbuctoo.v5.dataset.dto.DataSet.dataSet;\n  * - makes CreateDataSet a singleton\n  * - keeps track of all created dataSets across restarts (stores them in a file)\n  */\n-public class DataSetRepository {\n \n+public class DataSetRepository {\n   private static final Logger LOG = LoggerFactory.getLogger(DataSetRepository.class);\n-\n   private final ExecutorService executorService;\n   private final PermissionFetcher permissionFetcher;\n   private final DataSetConfiguration configuration;\n@@ -70,55 +68,37 @@ public class DataSetRepository {\n   private final ResourceSync resourceSync;\n   private Consumer<String> onUpdated;\n \n-\n-  public DataSetRepository(ExecutorService executorService, PermissionFetcher permissionFetcher,\n-                           DataSetConfiguration configuration, BdbEnvironmentCreator dataStoreFactory,\n-                           TimbuctooRdfIdHelper rdfIdHelper, Consumer<String> onUpdated,\n-                           boolean publicByDefault) throws IOException {\n+  public DataSetRepository(ExecutorService executorService, PermissionFetcher permissionFetcher, DataSetConfiguration configuration, BdbEnvironmentCreator dataStoreFactory, TimbuctooRdfIdHelper rdfIdHelper, Consumer<String> onUpdated, boolean publicByDefault) throws IOException {\n     this.executorService = executorService;\n     this.permissionFetcher = permissionFetcher;\n     this.configuration = configuration;\n     this.dataStoreFactory = dataStoreFactory;\n-\n     metaDataSet = Maps.newHashMap();\n-\n     File[] directories = new File(configuration.getDataSetMetadataLocation()).listFiles(File::isDirectory);\n-\n     for (int i = 0; i < directories.length; i++) {\n       String dirName = directories[i].toString();\n       String currentOwnerId = dirName.substring(dirName.lastIndexOf(\"/\") + 1, dirName.length());\n       Set<DataSetMetaData> tempMetaDataSet = new HashSet<>();\n-      Files.walk(directories[i].toPath())\n-        .filter(current -> Files.isDirectory(current))\n-        .forEach(\n-          path -> {\n-            File tempFile = new File(path.toString() + \"/metaData.json\");\n-            if (tempFile.exists()) {\n-              JsonFileBackedData<BasicDataSetMetaData> metaDataFromFile = null;\n-              try {\n-                metaDataFromFile = JsonFileBackedData.getOrCreate(\n-                  tempFile,\n-                  null,\n-                  new TypeReference<BasicDataSetMetaData>() {\n-                  });\n-                tempMetaDataSet.add(metaDataFromFile.getData());\n-              } catch (IOException e) {\n-                e.printStackTrace();\n-              }\n-            }\n+      Files.walk(directories[i].toPath()).filter(current -> Files.isDirectory(current)).forEach(path -> {\n+        File tempFile = new File(path.toString() + \"/metaData.json\");\n+        if (tempFile.exists()) {\n+          JsonFileBackedData<BasicDataSetMetaData> metaDataFromFile = null;\n+          try {\n+            metaDataFromFile = JsonFileBackedData.getOrCreate(tempFile, null, new TypeReference<BasicDataSetMetaData>() {});\n+            tempMetaDataSet.add(metaDataFromFile.getData());\n+          } catch (IOException e) {\n+            e.printStackTrace();\n           }\n-        );\n+        }\n+      });\n       metaDataSet.put(currentOwnerId, tempMetaDataSet);\n     }\n-\n     fileHelper = new FileHelper(configuration.getDataSetMetadataLocation());\n-\n     this.rdfIdHelper = rdfIdHelper;\n     this.rdfBaseUri = rdfIdHelper.instanceBaseUri();\n     this.publicByDefault = publicByDefault;\n     statusMap = new HashMap<>();\n     resourceSync = configuration.getResourceSync();\n-\n     dataSetMap = new HashMap<>();\n     this.onUpdated = onUpdated;\n   }\n@@ -131,19 +111,8 @@ public class DataSetRepository {\n         for (DataSetMetaData dataSetMetaData : ownerMetaDatas) {\n           String dataSetName = dataSetMetaData.getDataSetId();\n           try {\n-            ownersSets.put(\n-              dataSetName,\n-              dataSet(\n-                dataSetMetaData,\n-                configuration,\n-                fileHelper,\n-                executorService,\n-                rdfBaseUri,\n-                dataStoreFactory,\n-                resourceSync,\n-                () -> onUpdated.accept(dataSetMetaData.getCombinedId())\n-              )\n-            );\n+            ownersSets.put(dataSetName, dataSet(dataSetMetaData, configuration, fileHelper, executorService, rdfBaseUri, dataStoreFactory, resourceSync,\n+                                                () -> onUpdated.accept(dataSetMetaData.getCombinedId())));\n           } catch (IOException | DataStoreCreationException | ResourceSyncException e) {\n             e.printStackTrace();\n           }\n@@ -156,8 +125,8 @@ public class DataSetRepository {\n     synchronized (dataSetMap) {\n       if (dataSetMap.containsKey(ownerId) && dataSetMap.get(ownerId).containsKey(dataSetId)) {\n         try {\n-          if (permissionFetcher.getPermissions(userId, dataSetMap.get(ownerId).get(dataSetId).getMetadata()\n-          ).contains(Permission.READ)) {\n+          if (permissionFetcher.getPermissions(userId, dataSetMap.get(ownerId).get(dataSetId)\n+                                                                              .getMetadata()).contains(Permission.READ)) {\n             return Optional.ofNullable(dataSetMap.get(ownerId).get(dataSetId));\n           }\n         } catch (PermissionFetchingException e) {\n@@ -179,12 +148,11 @@ public class DataSetRepository {\n   }\n \n   public boolean userMatchesPrefix(User user, String prefix) {\n-    return user != null && user.getPersistentId() != null && (\"u\" + user.getPersistentId()).equals(prefix);\n+    return user != null && user.getPersistentId() != null &&\n+      (\"u\" + user.getPersistentId()).equals(prefix);\n   }\n \n-\n-  public DataSet createDataSet(User user, String dataSetId) throws DataStoreCreationException,\n-    IllegalDataSetNameException {\n+  public DataSet createDataSet(User user, String dataSetId) throws DataStoreCreationException, IllegalDataSetNameException {\n     //The ownerId might not be valid (i.e. a safe string). We make it safe here:\n     //dataSetId is under the control of the user so we simply throw if it's not valid\n     String ownerPrefix = \"u\" + user.getPersistentId();\n@@ -214,53 +182,25 @@ public class DataSetRepository {\n       uriPrefix = baseUri;\n     }\n \n-    final DataSetMetaData dataSet = new BasicDataSetMetaData(\n-      ownerPrefix,\n-      dataSetId,\n-      baseUri,\n-      uriPrefix,\n-      false,\n-      publicByDefault\n-    );\n-\n-    ObjectMapper objectMapper = new ObjectMapper()\n-      .registerModule(new Jdk8Module())\n-      .registerModule(new GuavaModule())\n-      .registerModule(new TimbuctooCustomSerializers())\n-      .enable(SerializationFeature.INDENT_OUTPUT);\n-\n+    final DataSetMetaData dataSet = new BasicDataSetMetaData(ownerPrefix, dataSetId, baseUri, uriPrefix, false, publicByDefault);\n+    ObjectMapper objectMapper = new ObjectMapper().registerModule(new Jdk8Module())\n+                                                  .registerModule(new GuavaModule())\n+                                                  .registerModule(new TimbuctooCustomSerializers())\n+                                                  .enable(SerializationFeature.INDENT_OUTPUT);\n     File metaDataFile = fileHelper.fileInDataSet(ownerPrefix, dataSetId, \"metaData.json\");\n-\n-\n     try {\n       objectMapper.writeValue(metaDataFile, dataSet);\n     } catch (IOException e) {\n       e.printStackTrace();\n     }\n-\n-\n     synchronized (dataSetMap) {\n       Map<String, DataSet> userDataSets = dataSetMap.computeIfAbsent(ownerPrefix, key -> new HashMap<>());\n-\n       if (!userDataSets.containsKey(dataSetId)) {\n         try {\n-          permissionFetcher.initializeOwnerAuthorization(user.getPersistentId(),\n-            dataSet.getOwnerId(), dataSet.getDataSetId());\n-          userDataSets.put(\n-            dataSetId,\n-            dataSet(\n-              dataSet,\n-              configuration,\n-              fileHelper,\n-              executorService,\n-              rdfBaseUri,\n-              dataStoreFactory,\n-              resourceSync,\n-              () -> onUpdated.accept(dataSet.getCombinedId())\n-            )\n-          );\n-        } catch (\n-          PermissionFetchingException | AuthorizationCreationException | IOException | ResourceSyncException e1) {\n+          permissionFetcher.initializeOwnerAuthorization(user.getPersistentId(), dataSet.getOwnerId(), dataSet.getDataSetId());\n+          userDataSets.put(dataSetId, dataSet(dataSet, configuration, fileHelper, executorService, rdfBaseUri, dataStoreFactory, resourceSync,\n+                                              () -> onUpdated.accept(dataSet.getCombinedId())));\n+        } catch (PermissionFetchingException | AuthorizationCreationException | IOException | ResourceSyncException e1) {\n           throw new DataStoreCreationException(e1);\n         }\n       }\n@@ -273,24 +213,24 @@ public class DataSetRepository {\n   }\n \n   public Collection<DataSet> getDataSets() {\n-    return dataSetMap.values().stream().flatMap(x -> x.values().stream())\n-      .collect(Collectors.toList());\n+    return dataSetMap.values().stream()\n+                              .flatMap(x -> x.values().stream())\n+                              .collect(Collectors.toList());\n   }\n \n   public Collection<DataSet> getPromotedDataSets() {\n-    return dataSetMap.values().stream().flatMap(x -> x.values().stream())\n-      .filter(x -> x.getMetadata().isPromoted())\n-      .collect(Collectors.toList());\n+    return dataSetMap.values().stream()\n+                              .flatMap(x -> x.values().stream())\n+                              .filter(x -> x.getMetadata().isPromoted())\n+                              .collect(Collectors.toList());\n   }\n \n   public Collection<DataSet> getDataSetsWithWriteAccess(String userId) {\n     List<DataSet> dataSetsWithWriteAccess = new ArrayList<>();\n-\n     for (Map<String, DataSet> userDataSets : dataSetMap.values()) {\n       for (DataSet dataSet : userDataSets.values()) {\n         try {\n-          boolean isAllowedToWrite = permissionFetcher.getOldPermissions(userId, dataSet.getMetadata().getCombinedId())\n-            .contains(Permission.WRITE);\n+          boolean isAllowedToWrite = permissionFetcher.getOldPermissions(userId, dataSet.getMetadata().getCombinedId()).contains(Permission.WRITE);\n           if (isAllowedToWrite) {\n             dataSetsWithWriteAccess.add(dataSet);\n           }\n@@ -306,31 +246,25 @@ public class DataSetRepository {\n     return statusMap.containsKey(uuid) ? Optional.of(statusMap.get(uuid).toString()) : Optional.empty();\n   }\n \n-  public Tuple<UUID, PlainRdfCreator> registerRdfCreator(\n-    Function<Consumer<String>, PlainRdfCreator> rdfCreatorBuilder) {\n+  public Tuple<UUID, PlainRdfCreator> registerRdfCreator(Function<Consumer<String>, PlainRdfCreator> rdfCreatorBuilder) {\n     StringBuffer stringBuffer = new StringBuffer();\n     UUID uuid = UUID.randomUUID();\n     statusMap.put(uuid, stringBuffer);\n-\n     PlainRdfCreator rdfCreator = rdfCreatorBuilder.apply((str) -> {\n-      stringBuffer.setLength(0);\n-      stringBuffer.append(str);\n-    });\n-\n+                                   stringBuffer.setLength(0);\n+                                   stringBuffer.append(str);\n+                                 });\n     return Tuple.tuple(uuid, rdfCreator);\n   }\n \n   public void removeDataSet(String combinedId) throws IOException {\n     Tuple<String, String> ownerIdDataSetName = DataSetMetaData.splitCombinedId(combinedId);\n-\n     this.removeDataSet(ownerIdDataSetName.getLeft(), ownerIdDataSetName.getRight());\n   }\n \n   public void removeDataSet(String ownerId, String dataSetName) throws IOException {\n     dataStoreFactory.removeDatabasesFor(ownerId, dataSetName);\n-\n     dataSetMap.get(ownerId).remove(dataSetName);\n-\n     try {\n       resourceSync.removeDataSet(ownerId, dataSetName);\n     } catch (ResourceSyncException e) {\n@@ -345,7 +279,6 @@ public class DataSetRepository {\n     for (DataSet dataSet : getDataSets()) {\n       dataSet.stop();\n     }\n-\n     dataStoreFactory.stop();\n   }\n \n@@ -353,5 +286,4 @@ public class DataSetRepository {\n     dataStoreFactory.start();\n     loadDataSetsFromJson();\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 115
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "263",
                    "severity": "error",
                    "message": "'catch' child has incorrect indentation level 10, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/51/DataSetRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/51/DataSetRepository.java\nindex 24d76737804..068d9cbb782 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/51/DataSetRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/51/DataSetRepository.java\n@@ -259,8 +259,7 @@ public class DataSetRepository {\n               () -> onUpdated.accept(dataSet.getCombinedId())\n             )\n           );\n-        } catch (\n-          PermissionFetchingException | AuthorizationCreationException | IOException | ResourceSyncException e1) {\n+        } catch (PermissionFetchingException | AuthorizationCreationException | IOException | ResourceSyncException e1) {\n           throw new DataStoreCreationException(e1);\n         }\n       }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}