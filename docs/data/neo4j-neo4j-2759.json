{
    "project_name": "neo4j-neo4j",
    "error_id": "2759",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2759/JsonMessageBodyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2759/JsonMessageBodyWriter.java\nindex 1463530ef31..64843975615 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2759/JsonMessageBodyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2759/JsonMessageBodyWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.http.cypher.format.output.json;\n \n import java.io.OutputStream;\n@@ -35,30 +36,30 @@ import org.neo4j.server.http.cypher.format.api.OutputEventSource;\n import org.neo4j.server.http.cypher.format.common.Neo4jJsonCodec;\n \n @Provider\n-@Produces( JsonMessageBodyWriter.JSON_MIME_TYPE_WITH_QUALITY )\n+@Produces(JsonMessageBodyWriter.JSON_MIME_TYPE_WITH_QUALITY)\n public class JsonMessageBodyWriter implements MessageBodyWriter<OutputEventSource>\n {\n     // ensures this MessageBodyWriter is the default when no accept header is provided by giving it a higher qs score\n     public static final String JSON_MIME_TYPE_WITH_QUALITY = MediaType.APPLICATION_JSON + \";qs=0.9\";\n \n     @Override\n-    public boolean isWriteable( Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType )\n+    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n     {\n-        return OutputEventSource.class.isAssignableFrom( type );\n+        return OutputEventSource.class.isAssignableFrom(type);\n     }\n \n     @Override\n-    public void writeTo( OutputEventSource outputEventSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n-            MultivaluedMap<String,Object> httpHeaders, OutputStream entityStream ) throws WebApplicationException\n+    public void writeTo(OutputEventSource outputEventSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n+                        MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws WebApplicationException\n     {\n         var transaction = outputEventSource.getTransactionHandle();\n         var parameters = outputEventSource.getParameters();\n         var uriInfo = outputEventSource.getUriInfo();\n \n         var jsonFactory = DefaultJsonFactory.INSTANCE.get();\n-        var serializer = new ExecutionResultSerializer( transaction, parameters, uriInfo.dbUri(),\n-            Neo4jJsonCodec.class, jsonFactory, entityStream );\n+        var serializer = new ExecutionResultSerializer(transaction, parameters, uriInfo.dbUri(),\n+          Neo4jJsonCodec.class, jsonFactory, entityStream);\n \n-        outputEventSource.produceEvents( serializer::handleEvent );\n+        outputEventSource.produceEvents(serializer::handleEvent);\n     }\n }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}