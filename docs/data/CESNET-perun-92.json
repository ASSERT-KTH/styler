{
    "project_name": "CESNET-perun",
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "179",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "        List<Map<String, String>> subjects = new ArrayList<>();\n\n\t\tCSVReader reader = initializeCSVReader(file);\n\n        header = reader.readNext();\n        if (header == null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/92/ExtSourceCSV.java\nindex e138bf67c0b..90f7436b4f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/92/ExtSourceCSV.java\n@@ -176,7 +176,8 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n     private List<Map<String, String>> csvParsing(String query, int maxResults) throws InternalErrorException, IOException {\n         List<Map<String, String>> subjects = new ArrayList<>();\n \n-\t\tCSVReader reader = initializeCSVReader(file);\n+CSVReader reader = initializeCSVReader(file);\n+\n \n         header = reader.readNext();\n         if (header == null) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/92/ExtSourceCSV.java\nindex e138bf67c0b..450e97111de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/92/ExtSourceCSV.java\n@@ -154,7 +154,7 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n                 throw new InternalErrorException(\"Attribute \" + GroupsManager.GROUPSQUERY_ATTRNAME + \" can't be null.\");\n             }\n \n-\t\t\t// Get CSV file\n+            // Get CSV file\n             prepareFile();\n \n             return csvParsing(queryForGroup, 0);\n@@ -176,7 +176,7 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n     private List<Map<String, String>> csvParsing(String query, int maxResults) throws InternalErrorException, IOException {\n         List<Map<String, String>> subjects = new ArrayList<>();\n \n-\t\tCSVReader reader = initializeCSVReader(file);\n+        CSVReader reader = initializeCSVReader(file);\n \n         header = reader.readNext();\n         if (header == null) {\n@@ -208,24 +208,24 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n         return subjects;\n     }\n \n-\t/**\n-\t * Initialize CSVReader object to read CSV file from path defined in parameter.\n-\t *\n-\t * @param fileName Path to file\n-\t * @return CSVReader object\n-\t * @throws FileNotFoundException\n-\t */\n-\tprivate CSVReader initializeCSVReader(String fileName) throws FileNotFoundException {\n-\t\tFileReader fileReader = new FileReader(fileName);\n-\t\treturn new CSVReader(fileReader);\n-\t}\n+    /**\n+     * Initialize CSVReader object to read CSV file from path defined in parameter.\n+     *\n+     * @param fileName Path to file\n+     * @return CSVReader object\n+     * @throws FileNotFoundException\n+     */\n+    private CSVReader initializeCSVReader(String fileName) throws FileNotFoundException {\n+        FileReader fileReader = new FileReader(fileName);\n+        return new CSVReader(fileReader);\n+    }\n \n     /**\n      * Comparison of one row in CSV file with the query.\n      * - if the row would be result of the query, then this method returns true\n      * - if not, then this method returns false\n      *\n-     * @param row one row from CSV file\n+     * @param row   one row from CSV file\n      * @param query query we want to 'execute' on the row, e.g. nameOfColumn=valueInRow\n      * @return boolean\n      * @throws InternalErrorException\n@@ -317,13 +317,13 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n         return lineAsMap;\n     }\n \n-\t/**\n-\t * Get attributes of the external source (defined in perun-extSources.xml).\n-\t *\n-\t * @return map with attributes about the external source\n-\t * @throws InternalErrorException\n-\t */\n-    protected Map<String,String> getAttributes() throws InternalErrorException {\n+    /**\n+     * Get attributes of the external source (defined in perun-extSources.xml).\n+     *\n+     * @return map with attributes about the external source\n+     * @throws InternalErrorException\n+     */\n+    protected Map<String, String> getAttributes() throws InternalErrorException {\n         return perunBl.getExtSourcesManagerBl().getAttributes(this);\n     }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/92/ExtSourceCSV.java\nindex e138bf67c0b..22165f6d80b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/92/ExtSourceCSV.java\n@@ -10,7 +10,6 @@ import cz.metacentrum.perun.core.blImpl.PerunBlImpl;\n import cz.metacentrum.perun.core.implApi.ExtSourceApi;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.FileNotFoundException;\n import java.io.FileReader;\n import java.io.IOException;\n@@ -22,203 +21,190 @@ import java.util.Map;\n /**\n  * @author Sona Mastrakova\n  */\n-public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n-\n-    private final static Logger log = LoggerFactory.getLogger(ExtSourceCSV.class);\n-\n-    private String file = null;\n-    private String query = null;\n-    private String[] header = null;\n-\n-    private static PerunBlImpl perunBl;\n-\n-    // Filled by Spring (perun-core.xml)\n-    public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun) {\n-        perunBl = perun;\n-        return perun;\n-    }\n \n-    @Override\n-    public List<Map<String, String>> findSubjectsLogins(String searchString) throws ExtSourceUnsupportedOperationException {\n-        throw new ExtSourceUnsupportedOperationException(\"For CSV using this method is not optimized, use findSubjects instead.\");\n-    }\n \n-    @Override\n-    public List<Map<String, String>> findSubjectsLogins(String searchString, int maxResults) throws ExtSourceUnsupportedOperationException {\n-        throw new ExtSourceUnsupportedOperationException(\"For CSV using this method is not optimized, use findSubjects instead.\");\n-    }\n+public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n \n-    @Override\n-    public List<Map<String, String>> findSubjects(String searchString) throws InternalErrorException {\n-        return findSubjects(searchString, 0);\n-    }\n \n-    @Override\n-    public List<Map<String, String>> findSubjects(String searchString, int maxResults) throws InternalErrorException {\n-        try {\n-            query = getAttributes().get(\"query\");\n+ private final static Logger log = LoggerFactory.getLogger(ExtSourceCSV.class);\n+ private String file = null;\n+ private String query = null;\n+ private String[] header = null;\n+ private static PerunBlImpl perunBl;\n \n-            if (query == null || query.isEmpty()) {\n-                throw new InternalErrorException(\"query attribute is required\");\n-            }\n+    // Filled by Spring (perun-core.xml)\n \n-            if (searchString == null) {\n-                throw new InternalErrorException(\"search string can't be null\");\n-            }\n+ public static PerunBlImpl setPerunBlImpl(PerunBlImpl perun) {\n+  perunBl = perun;\n+  return perun;\n+ }\n+\n+ @Override\n+ public List<Map<String, String>> findSubjectsLogins(String searchString) throws ExtSourceUnsupportedOperationException {\n+  throw new ExtSourceUnsupportedOperationException(\"For CSV using this method is not optimized, use findSubjects instead.\");\n+ }\n+\n+ @Override\n+ public List<Map<String, String>> findSubjectsLogins(String searchString, int maxResults) throws ExtSourceUnsupportedOperationException {\n+  throw new ExtSourceUnsupportedOperationException(\"For CSV using this method is not optimized, use findSubjects instead.\");\n+ }\n+\n+ @Override\n+ public List<Map<String, String>> findSubjects(String searchString) throws InternalErrorException {\n+  return findSubjects(searchString, 0);\n+ }\n+\n+ @Override\n+ public List<Map<String, String>> findSubjects(String searchString, int maxResults) throws InternalErrorException {\n+  try {\n+   query = getAttributes().get(\"query\");\n+   if (query == null || query.isEmpty()) {\n+    throw new InternalErrorException(\"query attribute is required\");\n+   }\n+   if (searchString == null) {\n+    throw new InternalErrorException(\"search string can't be null\");\n+   }\n \n             //Replace '?' by searchString\n-            query = query.replaceAll(\"\\\\?\", searchString);\n+   query = query.replaceAll(\"\\\\?\", searchString);\n \n             //Get CSV file\n-            prepareFile();\n-\n-            return csvParsing(query, maxResults);\n-\n-        } catch (IOException ex) {\n-            log.error(\"IOException in findSubjects() method while parsing csv file\", ex);\n-        }\n-\n-        return null;\n-    }\n-\n-    @Override\n-    public Map<String, String> getSubjectByLogin(String login) throws InternalErrorException, SubjectNotExistsException {\n-        try {\n-            query = getAttributes().get(\"loginQuery\");\n-\n-            if (query == null || query.isEmpty()) {\n-                throw new InternalErrorException(\"loginQuery attribute is required\");\n-            }\n-\n-            if (login == null || login.isEmpty()) {\n-                throw new InternalErrorException(\"login string can't be null or empty\");\n-            }\n+   prepareFile();\n+   return csvParsing(query, maxResults);\n+  } catch (IOException ex) {\n+   log.error(\"IOException in findSubjects() method while parsing csv file\", ex);\n+  }\n+\n+  return null;\n+ }\n+\n+ @Override\n+ public Map<String, String> getSubjectByLogin(String login) throws InternalErrorException, SubjectNotExistsException {\n+  try {\n+   query = getAttributes().get(\"loginQuery\");\n+   if (query == null || query.isEmpty()) {\n+    throw new InternalErrorException(\"loginQuery attribute is required\");\n+   }\n+   if (login == null || login.isEmpty()) {\n+    throw new InternalErrorException(\"login string can't be null or empty\");\n+   }\n \n             //Replace '?' by searchString\n-            query = query.replaceAll(\"\\\\?\", login);\n+   query = query.replaceAll(\"\\\\?\", login);\n \n             //Get CSV file\n-            prepareFile();\n-\n-            List<Map<String, String>> subjects = this.csvParsing(query, 0);\n-\n-            if (subjects.isEmpty()) {\n-                throw new SubjectNotExistsException(\"Login: \" + login);\n-            }\n-            if (subjects.size() > 1) {\n-                throw new InternalErrorException(\"External source must return exactly one result, search string: \" + login);\n-            }\n-\n-            return subjects.get(0);\n-\n-        } catch (IOException ex) {\n-            log.error(\"IOException in getSubjectByLogin() method while parsing csv file\", ex);\n-        }\n-\n-        return null;\n-    }\n-\n-    @Override\n-    public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes) throws InternalErrorException {\n-        try {\n+   prepareFile();\n+   List<Map<String, String>> subjects = this.csvParsing(query, 0);\n+   if (subjects.isEmpty()) {\n+    throw new SubjectNotExistsException(\"Login: \" + login);\n+   }\n+   if (subjects.size() > 1) {\n+    throw new InternalErrorException(\"External source must return exactly one result, search string: \" + login);\n+   }\n+\n+   return subjects.get(0);\n+  } catch (IOException ex) {\n+   log.error(\"IOException in getSubjectByLogin() method while parsing csv file\", ex);\n+  }\n+\n+  return null;\n+ }\n+\n+ @Override\n+ public List<Map<String, String>> getGroupSubjects(Map<String, String> attributes) throws InternalErrorException {\n+  try {\n             // Get the query for the group subjects\n-            String queryForGroup = attributes.get(GroupsManager.GROUPMEMBERSQUERY_ATTRNAME);\n+   String queryForGroup = attributes.get(GroupsManager.GROUPMEMBERSQUERY_ATTRNAME);\n \n             // If there is no query for group, throw exception\n-            if (queryForGroup == null) {\n-                throw new InternalErrorException(\"Attribute \" + GroupsManager.GROUPMEMBERSQUERY_ATTRNAME + \" can't be null.\");\n-            }\n+   if (queryForGroup == null) {\n+    throw new InternalErrorException(\"Attribute \" + GroupsManager.GROUPMEMBERSQUERY_ATTRNAME + \" can't be null.\");\n+   }\n \n             // Get CSV file\n-            prepareFile();\n-\n-            return csvParsing(queryForGroup, 0);\n-\n-        } catch (IOException ex) {\n-            log.error(\"IOException in getGroupSubjects() method while parsing csv file\", ex);\n-        }\n-        return null;\n-    }\n-\n-    @Override\n-    public void close() throws ExtSourceUnsupportedOperationException {\n-        throw new ExtSourceUnsupportedOperationException(\"Using this method is not supported for CSV.\");\n-    }\n-\n-    @Override\n-    public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes) throws InternalErrorException {\n-        try {\n-            String queryForGroup = attributes.get(GroupsManager.GROUPSQUERY_ATTRNAME);\n-\n-            if (queryForGroup == null) {\n-                throw new InternalErrorException(\"Attribute \" + GroupsManager.GROUPSQUERY_ATTRNAME + \" can't be null.\");\n-            }\n-\n-\t\t\t// Get CSV file\n-            prepareFile();\n-\n-            return csvParsing(queryForGroup, 0);\n-\n-        } catch (IOException ex) {\n-            log.error(\"IOException in getSubjectGroups() method while parsing csv file\", ex);\n-        }\n-        return null;\n-    }\n-\n-    private void prepareFile() throws InternalErrorException {\n+   prepareFile();\n+   return csvParsing(queryForGroup, 0);\n+  } catch (IOException ex) {\n+   log.error(\"IOException in getGroupSubjects() method while parsing csv file\", ex);\n+  }\n+\n+  return null;\n+ }\n+\n+ @Override\n+ public void close() throws ExtSourceUnsupportedOperationException {\n+  throw new ExtSourceUnsupportedOperationException(\"Using this method is not supported for CSV.\");\n+ }\n+\n+ @Override\n+ public List<Map<String, String>> getSubjectGroups(Map<String, String> attributes) throws InternalErrorException {\n+  try {\n+   String queryForGroup = attributes.get(GroupsManager.GROUPSQUERY_ATTRNAME);\n+   if (queryForGroup == null) {\n+    throw new InternalErrorException(\"Attribute \" + GroupsManager.GROUPSQUERY_ATTRNAME + \" can't be null.\");\n+   }\n+\n+   // Get CSV file\n+   prepareFile();\n+   return csvParsing(queryForGroup, 0);\n+  } catch (IOException ex) {\n+   log.error(\"IOException in getSubjectGroups() method while parsing csv file\", ex);\n+  }\n+\n+  return null;\n+ }\n+\n+\n+ private void prepareFile() throws InternalErrorException {\n         //Get CSV file\n-        file = getAttributes().get(\"file\");\n-        if (file == null || file.isEmpty()) {\n-            throw new InternalErrorException(\"File cannot be empty!\");\n-        }\n+  file = getAttributes().get(\"file\");\n+  if (file == null || file.isEmpty()) {\n+   throw new InternalErrorException(\"File cannot be empty!\");\n+  }\n+ }\n+\n+\n+ private List<Map<String, String>> csvParsing(String query, int maxResults) throws InternalErrorException, IOException {\n+  List<Map<String, String>> subjects = new ArrayList<>();\n+  CSVReader reader = initializeCSVReader(file);\n+  header = reader.readNext();\n+  if (header == null) {\n+   throw new RuntimeException(\"No header in csv file\");\n+  }\n+  String[] row;\n+  while ((row = reader.readNext()) != null) {\n+   if (header.length != row.length) {\n+    throw new RuntimeException(\"Csv file is not valid - some rows have different number of columns from the header row.\");\n+   }\n+   if (compareRowToQuery(row, query)) {\n+    Map<String, String> map = convertLineToMap(row);\n+    if (map != null) {\n+     subjects.add(map);\n     }\n+    if (maxResults > 0) {\n+     if (subjects.size() >= maxResults) {\n+      break;\n+     }\n+    }\n+   }\n+  }\n \n-    private List<Map<String, String>> csvParsing(String query, int maxResults) throws InternalErrorException, IOException {\n-        List<Map<String, String>> subjects = new ArrayList<>();\n-\n-\t\tCSVReader reader = initializeCSVReader(file);\n-\n-        header = reader.readNext();\n-        if (header == null) {\n-            throw new RuntimeException(\"No header in csv file\");\n-        }\n-        String[] row;\n-\n-        while ((row = reader.readNext()) != null) {\n-            if (header.length != row.length) {\n-                throw new RuntimeException(\"Csv file is not valid - some rows have different number of columns from the header row.\");\n-            }\n-\n-            if (compareRowToQuery(row, query)) {\n-\n-                Map<String, String> map = convertLineToMap(row);\n-\n-                if (map != null) {\n-                    subjects.add(map);\n-                }\n+  return subjects;\n+ }\n \n-                if (maxResults > 0) {\n-                    if (subjects.size() >= maxResults) {\n-                        break;\n-                    }\n-                }\n-            }\n-        }\n+ /**\n+  * Initialize CSVReader object to read CSV file from path defined in parameter.\n+  *\n+  * @param fileName Path to file\n+  * @return CSVReader object\n+  * @throws FileNotFoundException\n+  */\n \n-        return subjects;\n-    }\n \n-\t/**\n-\t * Initialize CSVReader object to read CSV file from path defined in parameter.\n-\t *\n-\t * @param fileName Path to file\n-\t * @return CSVReader object\n-\t * @throws FileNotFoundException\n-\t */\n-\tprivate CSVReader initializeCSVReader(String fileName) throws FileNotFoundException {\n-\t\tFileReader fileReader = new FileReader(fileName);\n-\t\treturn new CSVReader(fileReader);\n-\t}\n+ private CSVReader initializeCSVReader(String fileName) throws FileNotFoundException {\n+  FileReader fileReader = new FileReader(fileName);\n+  return new CSVReader(fileReader);\n+ }\n \n     /**\n      * Comparison of one row in CSV file with the query.\n@@ -230,43 +216,41 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n      * @return boolean\n      * @throws InternalErrorException\n      */\n-    private boolean compareRowToQuery(String[] row, String query) throws InternalErrorException {\n+\n+\n+ private boolean compareRowToQuery(String[] row, String query) throws InternalErrorException {\n \n         // symbol '=' indicates getSubjectByLogin() or getGroupSubjects method\n-        int index = query.indexOf(\"=\");\n+  int index = query.indexOf(\"=\");\n         // word 'contains' indicates findSubjects() method\n-        int indexContains = query.indexOf(\"contains\");\n-\n-        if (index != -1) {\n-            String queryType = query.substring(0, index);\n-            String value = query.substring(index + 1);\n-\n-            for (int i = 0; i < row.length; i++) {\n-                if ((header[i].compareTo(queryType) == 0 && row[i].compareTo(value) == 0)) {\n-                    return true;\n-                }\n-            }\n-        } else {\n-            if (indexContains != -1) {\n-                String queryType = query.substring(0, indexContains);\n-                String value = query.substring(indexContains + \"contains\".trim().length());\n-\n-                for (int i = 0; i < row.length; i++) {\n-                    value = value.trim();\n-                    queryType = queryType.trim();\n-\n-                    if (header[i].compareTo(queryType) == 0 && row[i].contains(value)) {\n-                        return true;\n-                    }\n-                }\n-            } else {\n+  int indexContains = query.indexOf(\"contains\");\n+  if (index != -1) {\n+   String queryType = query.substring(0, index);\n+   String value = query.substring(index + 1);\n+   for (int i = 0; i<row.length; i++) {\n+    if ((header[i].compareTo(queryType) == 0 && row[i].compareTo(value) == 0)) {\n+     return true;\n+    }\n+   }\n+  } else {\n+   if (indexContains != -1) {\n+    String queryType = query.substring(0, indexContains);\n+    String value = query.substring(indexContains + \"contains\".trim().length());\n+    for (int i = 0; i<row.length; i++) {\n+     value = value.trim();\n+     queryType = queryType.trim();\n+     if (header[i].compareTo(queryType) == 0 && row[i].contains(value)) {\n+      return true;\n+     }\n+    }\n+   } else {\n                 // If there's no symbol '=' or word 'contains' in the query\n-                throw new InternalErrorException(\"Wrong query!\");\n-            }\n-        }\n+    throw new InternalErrorException(\"Wrong query!\");\n+   }\n+  }\n \n-        return false;\n-    }\n+  return false;\n+ }\n \n     /**\n      * Creates Map<String,String> from one row in CSV file\n@@ -275,55 +259,49 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n      * @return Map<String, String>, like <name,value>\n      * @throws InternalErrorException\n      */\n-    private Map<String, String> convertLineToMap(String[] line) throws InternalErrorException {\n-\n-        Map<String, String> lineAsMap = new HashMap<>();\n-\n-        String mapping = getAttributes().get(\"csvMapping\");\n-\n-        String[] mappingArray = mapping.split(\",\\n\");\n \n-        for (String s : mappingArray) {\n \n-            for (int j = 0; j < line.length; j++) {\n+ private Map<String, String> convertLineToMap(String[] line) throws InternalErrorException {\n+  Map<String, String> lineAsMap = new HashMap<>();\n+  String mapping = getAttributes().get(\"csvMapping\");\n+  String[] mappingArray = mapping.split(\",\\n\");\n+  for (String s : mappingArray) {\n \n-                String attr = s.trim();\n-\n-                int index = attr.indexOf(\"=\");\n-\n-                if (index <= 0) {\n-                    throw new InternalErrorException(\"There is no text in csvMapping attribute or there is no '=' character.\");\n-                }\n-\n-                String name = attr.substring(0, index);\n-                String value = attr.substring(index + 1);\n-\n-                if (value.startsWith(\"{\")) {\n-\n-                    // exclude curly brackets from value\n-                    value = value.substring(1, value.length() - 1);\n-\n-                    if (value.compareTo(header[j]) == 0) {\n-                        value = line[j];\n-                        lineAsMap.put(name.trim(), value.trim());\n-                        break;\n-                    }\n-                } else {\n-                    lineAsMap.put(name.trim(), value.trim());\n-                    break;\n-                }\n-            }\n-        }\n-        return lineAsMap;\n+   for (int j = 0; j<line.length; j++) {\n+    String attr = s.trim();\n+    int index = attr.indexOf(\"=\");\n+    if (index <= 0) {\n+     throw new InternalErrorException(\"There is no text in csvMapping attribute or there is no '=' character.\");\n     }\n+    String name = attr.substring(0, index);\n+    String value = attr.substring(index + 1);\n+    if (value.startsWith(\"{\")) {\n \n-\t/**\n-\t * Get attributes of the external source (defined in perun-extSources.xml).\n-\t *\n-\t * @return map with attributes about the external source\n-\t * @throws InternalErrorException\n-\t */\n-    protected Map<String,String> getAttributes() throws InternalErrorException {\n-        return perunBl.getExtSourcesManagerBl().getAttributes(this);\n+                    // exclude curly brackets from value\n+     value = value.substring(1, value.length()-1);\n+     if (value.compareTo(header[j]) == 0) {\n+      value = line[j];\n+      lineAsMap.put(name.trim(), value.trim());\n+      break;\n+     }\n+    } else {\n+     lineAsMap.put(name.trim(), value.trim());\n+     break;\n     }\n-}\n+   }\n+  }\n+\n+  return lineAsMap;\n+ }\n+\n+ /**\n+  * Get attributes of the external source (defined in perun-extSources.xml).\n+  *\n+  * @return map with attributes about the external source\n+  * @throws InternalErrorException\n+  */\n+\n+ protected Map<String, String> getAttributes() throws InternalErrorException {\n+  return perunBl.getExtSourcesManagerBl().getAttributes(this);\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 332
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/92/ExtSourceCSV.java\nindex e138bf67c0b..90f7436b4f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/92/ExtSourceCSV.java\n@@ -176,7 +176,8 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n     private List<Map<String, String>> csvParsing(String query, int maxResults) throws InternalErrorException, IOException {\n         List<Map<String, String>> subjects = new ArrayList<>();\n \n-\t\tCSVReader reader = initializeCSVReader(file);\n+CSVReader reader = initializeCSVReader(file);\n+\n \n         header = reader.readNext();\n         if (header == null) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/92/ExtSourceCSV.java\nindex e138bf67c0b..6573cf322ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/92/ExtSourceCSV.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/92/ExtSourceCSV.java\n@@ -176,9 +176,8 @@ public class ExtSourceCSV extends ExtSource implements ExtSourceApi {\n     private List<Map<String, String>> csvParsing(String query, int maxResults) throws InternalErrorException, IOException {\n         List<Map<String, String>> subjects = new ArrayList<>();\n \n-\t\tCSVReader reader = initializeCSVReader(file);\n-\n-        header = reader.readNext();\n+\t\t\t\t\t\t\tCSVReader reader = initializeCSVReader(file);\n+\t\t\t\t\t\t\t\theader = reader.readNext();\n         if (header == null) {\n             throw new RuntimeException(\"No header in csv file\");\n         }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}