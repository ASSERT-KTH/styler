{
    "project_name": "Angel-ML-angel",
    "error_id": "82",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/82/ServerIntDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/82/ServerIntDoubleRow.java\nindex 9b46a048840..fba28dcc189 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/82/ServerIntDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/82/ServerIntDoubleRow.java\n@@ -54,15 +54,15 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n-   * @param innerRow inner row\n+   * @param innerRow   inner row\n    */\n   public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntDoubleVector innerRow) {\n+                            IntDoubleVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n@@ -72,10 +72,10 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n@@ -134,7 +134,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * Set a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements values\n+   * @param values  elements values\n    */\n   public void set(int[] indices, double[] values) {\n     assert indices.length == values.length;\n@@ -157,7 +157,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * Add a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements plus values\n+   * @param values  elements plus values\n    */\n   public void addTo(int[] indices, double[] values) {\n     assert indices.length == values.length;\n@@ -438,7 +438,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n \n   @Override\n   public ServerRow\n-adaptiveClone() {\n+  adaptiveClone() {\n     startRead();\n     try {\n       if (intDoubleRow.isSparse()) {\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "433",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/82/ServerIntDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/82/ServerIntDoubleRow.java\nindex 9b46a048840..4f08e16daf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/82/ServerIntDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/82/ServerIntDoubleRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -194,45 +193,36 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n         case T_DOUBLE_SPARSE_COMPONENT:\n           updateUseIntDoubleSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_DOUBLE_DENSE:\n+  case T_DOUBLE_DENSE:\n         case T_DOUBLE_DENSE_COMPONENT:\n           updateUseIntDoubleDense(buf, op);\n           break;\n-\n-        case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -350,8 +340,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int size() {\n     return intDoubleRow.size();\n   }\n@@ -431,22 +420,19 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n     try {\n       return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n           intDoubleRow.clone());\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (intDoubleRow.isSparse()) {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(),\n+        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(),\n                     intDoubleRow.getStorage().getValues()));\n-      } else {\n+  } else {\n         return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n             intDoubleRow);\n       }\n@@ -482,7 +468,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeDouble(initAndGet(in.readInt(), func));\n@@ -522,4 +508,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "435",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "446",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "448",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/82/ServerIntDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/82/ServerIntDoubleRow.java\nindex 9b46a048840..7db61eaa5e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/82/ServerIntDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/82/ServerIntDoubleRow.java\n@@ -34,11 +34,13 @@ import java.io.IOException;\n /**\n  * The row with \"int\" index type and \"double\" value type in PS\n  */\n+\n public class ServerIntDoubleRow extends ServerDoubleRow {\n \n   /**\n    * Just a view of \"row\" in ServerRow\n    */\n+\n   private IntDoubleVector intDoubleRow;\n \n   /**\n@@ -61,8 +63,8 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow inner row\n    */\n-  public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntDoubleVector innerRow) {\n+\n+  public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntDoubleVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n@@ -78,6 +80,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n+\n   public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n@@ -87,6 +90,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @param rowType row type\n    */\n+\n   public ServerIntDoubleRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -102,6 +106,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public double get(int index) {\n     return intDoubleRow.get(index - startColInt);\n   }\n@@ -112,6 +117,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(int index, double value) {\n     intDoubleRow.set(index - startColInt, value);\n   }\n@@ -122,6 +128,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public double[] get(int[] indices) {\n     double[] values = new double[indices.length];\n     for (int i = 0; i < indices.length; i++) {\n@@ -136,6 +143,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(int[] indices, double[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -149,6 +157,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(int index, double value) {\n     set(index, get(index) + value);\n   }\n@@ -159,6 +168,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(int[] indices, double[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -171,6 +181,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @return all element values\n    */\n+\n   private double[] getValues() {\n     return intDoubleRow.getStorage().getValues();\n   }\n@@ -181,12 +192,14 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @return all element values\n    */\n+\n   public ObjectIterator<Int2DoubleMap.Entry> getIter() {\n     return intDoubleRow.getStorage().entryIterator();\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -194,48 +207,38 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n         case T_DOUBLE_SPARSE_COMPONENT:\n           updateUseIntDoubleSparse(buf, op);\n           break;\n-\n         case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n         case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n         case T_DOUBLE_DENSE:\n         case T_DOUBLE_DENSE_COMPONENT:\n           updateUseIntDoubleDense(buf, op);\n           break;\n-\n         case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n-\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -350,7 +353,6 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n     }\n   }\n \n-\n   @Override\n   public int size() {\n     return intDoubleRow.size();\n@@ -361,6 +363,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @param mergedRow the dest row\n    */\n+\n   public void mergeTo(IntDoubleVector mergedRow) {\n     startRead();\n     try {\n@@ -429,26 +432,20 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n   public ServerRow clone() {\n     startRead();\n     try {\n-      return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-          intDoubleRow.clone());\n+      return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intDoubleRow.clone());\n     } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       if (intDoubleRow.isSparse()) {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(),\n-                    intDoubleRow.getStorage().getValues()));\n+        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(), intDoubleRow.getStorage().getValues()));\n       } else {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intDoubleRow);\n+        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intDoubleRow);\n       }\n     } finally {\n       endRead();\n@@ -461,6 +458,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(int index) {\n     if (intDoubleRow.isSparse()) {\n       return intDoubleRow.getStorage().hasKey(index - startColInt);\n@@ -480,8 +478,8 @@ adaptiveClone() {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -522,4 +520,5 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}