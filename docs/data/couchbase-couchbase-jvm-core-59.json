{
    "project_name": "couchbase-couchbase-jvm-core",
    "error_id": "59",
    "information": {
        "errors": [
            {
                "line": "157",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                response = new RemoveSearchIndexResponse(body, status);\n            } else if (request instanceof SearchQueryRequest) {\n                //TODO if more parsing is implemented, add a RawSearchQueryRequest similar to what was done in JVMCBC-357\n                response = new SearchQueryResponse(body, status);\n            }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/59/SearchHandler.java\nindex ee9a16b295b..962295aeeb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler/59/SearchHandler.java\n@@ -154,7 +154,7 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n             } else if (request instanceof RemoveSearchIndexRequest) {\n                 response = new RemoveSearchIndexResponse(body, status);\n             } else if (request instanceof SearchQueryRequest) {\n-                //TODO if more parsing is implemented, add a RawSearchQueryRequest similar to what was done in JVMCBC-357\n+            //TODO if more parsing is implemented, add a RawSearchQueryRequest similar to what was done in JVMCBC-357\n                 response = new SearchQueryResponse(body, status);\n             }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "158",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/59/SearchHandler.java\nindex ee9a16b295b..814424eb6a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/intellij/59/SearchHandler.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core.endpoint.search;\n \n import com.couchbase.client.core.ResponseEvent;\n@@ -81,12 +82,12 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n     /**\n      * Creates a new {@link SearchHandler} with a custom queue for requests (suitable for tests).\n      *\n-     * @param endpoint the {@link AbstractEndpoint} to coordinate with.\n+     * @param endpoint       the {@link AbstractEndpoint} to coordinate with.\n      * @param responseBuffer the {@link RingBuffer} to push responses into.\n-     * @param queue the queue which holds all outstanding open requests.\n+     * @param queue          the queue which holds all outstanding open requests.\n      */\n     SearchHandler(AbstractEndpoint endpoint, RingBuffer<ResponseEvent> responseBuffer, Queue<SearchRequest> queue,\n-                boolean isTransient, final boolean pipeline) {\n+                  boolean isTransient, final boolean pipeline) {\n         super(endpoint, responseBuffer, queue, isTransient, pipeline);\n     }\n \n@@ -145,7 +146,7 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n         if (msg instanceof LastHttpContent) {\n             ResponseStatus status = ResponseStatusConverter.fromHttp(responseHeader.getStatus().code());\n             String body = responseContent.readableBytes() > 0\n-                    ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n+                ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n \n             if (request instanceof UpsertSearchIndexRequest) {\n                 response = new UpsertSearchIndexResponse(body, status);\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "154",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/59/SearchHandler.java\nindex ee9a16b295b..829e9367547 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/naturalize/59/SearchHandler.java\n@@ -63,7 +63,8 @@ import java.util.Queue;\n public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpRequest, SearchRequest> {\n \n     private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(SearchHandler.class);\n-    /**\n+\n+/**\n      * Contains the current pending response header if set.\n      */\n     private HttpResponse responseHeader;\n@@ -73,9 +74,8 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      */\n     private ByteBuf responseContent;\n \n-    public SearchHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, boolean isTransient,\n-                         final boolean pipeline) {\n-        super(endpoint, responseBuffer, isTransient, pipeline);\n+    public SearchHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, boolean isTransient, final boolean pipeline) {\n+    super(endpoint, responseBuffer, isTransient, pipeline);\n     }\n \n     /**\n@@ -85,9 +85,8 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param responseBuffer the {@link RingBuffer} to push responses into.\n      * @param queue the queue which holds all outstanding open requests.\n      */\n-    SearchHandler(AbstractEndpoint endpoint, RingBuffer<ResponseEvent> responseBuffer, Queue<SearchRequest> queue,\n-                boolean isTransient, final boolean pipeline) {\n-        super(endpoint, responseBuffer, queue, isTransient, pipeline);\n+    SearchHandler(AbstractEndpoint endpoint, RingBuffer<ResponseEvent> responseBuffer, Queue<SearchRequest> queue, boolean isTransient, final boolean pipeline) {\n+    super(endpoint, responseBuffer, queue, isTransient, pipeline);\n     }\n \n     @Override\n@@ -144,10 +143,8 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n \n         if (msg instanceof LastHttpContent) {\n             ResponseStatus status = ResponseStatusConverter.fromHttp(responseHeader.getStatus().code());\n-            String body = responseContent.readableBytes() > 0\n-                    ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n-\n-            if (request instanceof UpsertSearchIndexRequest) {\n+            String body = responseContent.readableBytes() > 0 ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n+if (request instanceof UpsertSearchIndexRequest) {\n                 response = new UpsertSearchIndexResponse(body, status);\n             } else if (request instanceof GetSearchIndexRequest) {\n                 response = new GetSearchIndexResponse(body, status);\n@@ -167,4 +164,4 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n     protected ServiceType serviceType() {\n         return ServiceType.SEARCH;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 30, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 26, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/59/SearchHandler.java\nindex ee9a16b295b..2608afddd38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/codebuff/59/SearchHandler.java\n@@ -49,7 +49,6 @@ import io.netty.handler.codec.http.HttpResponse;\n import io.netty.handler.codec.http.HttpVersion;\n import io.netty.handler.codec.http.LastHttpContent;\n import io.netty.util.CharsetUtil;\n-\n import java.util.Queue;\n \n /**\n@@ -60,6 +59,7 @@ import java.util.Queue;\n  * @author Sergey Avseyev\n  * @since 1.2\n  */\n+\n public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpRequest, SearchRequest> {\n \n     private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(SearchHandler.class);\n@@ -73,8 +73,7 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      */\n     private ByteBuf responseContent;\n \n-    public SearchHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, boolean isTransient,\n-                         final boolean pipeline) {\n+    public SearchHandler(AbstractEndpoint endpoint, EventSink<ResponseEvent> responseBuffer, boolean isTransient, final boolean pipeline) {\n         super(endpoint, responseBuffer, isTransient, pipeline);\n     }\n \n@@ -85,8 +84,8 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n      * @param responseBuffer the {@link RingBuffer} to push responses into.\n      * @param queue the queue which holds all outstanding open requests.\n      */\n-    SearchHandler(AbstractEndpoint endpoint, RingBuffer<ResponseEvent> responseBuffer, Queue<SearchRequest> queue,\n-                boolean isTransient, final boolean pipeline) {\n+\n+    SearchHandler(AbstractEndpoint endpoint, RingBuffer<ResponseEvent> responseBuffer, Queue<SearchRequest> queue, boolean isTransient, final boolean pipeline) {\n         super(endpoint, responseBuffer, queue, isTransient, pipeline);\n     }\n \n@@ -98,39 +97,36 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n         } else if (msg instanceof RemoveSearchIndexRequest) {\n             httpMethod = HttpMethod.DELETE;\n         } else if (msg instanceof SearchQueryRequest) {\n-            httpMethod = HttpMethod.POST;\n-        }\n-\n+                   httpMethod = HttpMethod.POST;\n+               }\n         ByteBuf content;\n         if (msg instanceof UpsertSearchIndexRequest) {\n             content = Unpooled.copiedBuffer(((UpsertSearchIndexRequest) msg).payload(), CharsetUtil.UTF_8);\n         } else if (msg instanceof SearchQueryRequest) {\n             content = Unpooled.copiedBuffer(((SearchQueryRequest) msg).payload(), CharsetUtil.UTF_8);\n         } else {\n-            content = Unpooled.EMPTY_BUFFER;\n+                   content = Unpooled.EMPTY_BUFFER;\n         }\n-\n         FullHttpRequest request = new DefaultFullHttpRequest(HttpVersion.HTTP_1_1, httpMethod, msg.path(), content);\n         request.headers().set(HttpHeaders.Names.USER_AGENT, env().userAgent());\n         if (msg instanceof UpsertSearchIndexRequest || msg instanceof SearchQueryRequest) {\n-            request.headers().set(HttpHeaders.Names.ACCEPT, \"*/*\");\n+            request.headers().set(HttpHeaders.Names.ACCEPT,\n+\"*/*\");\n             request.headers().set(HttpHeaders.Names.CONTENT_TYPE, \"application/json\");\n         }\n         request.headers().set(HttpHeaders.Names.CONTENT_LENGTH, content.readableBytes());\n         request.headers().set(HttpHeaders.Names.HOST, remoteHttpHost(ctx));\n-\n         addHttpBasicAuth(ctx, request, msg.bucket(), msg.password());\n         return request;\n     }\n \n+\n     @Override\n     protected CouchbaseResponse decodeResponse(ChannelHandlerContext ctx, HttpObject msg) throws Exception {\n         SearchRequest request = currentRequest();\n         CouchbaseResponse response = null;\n-\n         if (msg instanceof HttpResponse) {\n             responseHeader = (HttpResponse) msg;\n-\n             if (responseContent != null) {\n                 responseContent.clear();\n             } else {\n@@ -144,27 +140,25 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n \n         if (msg instanceof LastHttpContent) {\n             ResponseStatus status = ResponseStatusConverter.fromHttp(responseHeader.getStatus().code());\n-            String body = responseContent.readableBytes() > 0\n-                    ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n-\n+            String body = responseContent.readableBytes() > 0 ? responseContent.toString(CHARSET) : responseHeader.getStatus().reasonPhrase();\n             if (request instanceof UpsertSearchIndexRequest) {\n                 response = new UpsertSearchIndexResponse(body, status);\n             } else if (request instanceof GetSearchIndexRequest) {\n                 response = new GetSearchIndexResponse(body, status);\n             } else if (request instanceof RemoveSearchIndexRequest) {\n-                response = new RemoveSearchIndexResponse(body, status);\n-            } else if (request instanceof SearchQueryRequest) {\n+                       response = new RemoveSearchIndexResponse(body, status);\n+                   } else if (request instanceof SearchQueryRequest) {\n                 //TODO if more parsing is implemented, add a RawSearchQueryRequest similar to what was done in JVMCBC-357\n-                response = new SearchQueryResponse(body, status);\n-            }\n-\n+                              response = new SearchQueryResponse(body, status);\n+                          }\n             finishedDecoding();\n         }\n         return response;\n     }\n \n+\n     @Override\n     protected ServiceType serviceType() {\n         return ServiceType.SEARCH;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/59/SearchHandler.java\nindex ee9a16b295b..962295aeeb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/errored/1/59/SearchHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-jvm-core/styler_random/59/SearchHandler.java\n@@ -154,7 +154,7 @@ public class SearchHandler extends AbstractGenericHandler<HttpObject, HttpReques\n             } else if (request instanceof RemoveSearchIndexRequest) {\n                 response = new RemoveSearchIndexResponse(body, status);\n             } else if (request instanceof SearchQueryRequest) {\n-                //TODO if more parsing is implemented, add a RawSearchQueryRequest similar to what was done in JVMCBC-357\n+            //TODO if more parsing is implemented, add a RawSearchQueryRequest similar to what was done in JVMCBC-357\n                 response = new SearchQueryResponse(body, status);\n             }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}