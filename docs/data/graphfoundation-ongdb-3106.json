{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3106",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "70",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "108",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "157",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3106/AnyValueComparator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3106/AnyValueComparator.java\nindex dd49da4f579..9d5d60ad136 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3106/AnyValueComparator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3106/AnyValueComparator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values;\n \n import java.util.Comparator;\n@@ -31,135 +32,130 @@ import org.neo4j.values.virtual.VirtualValueGroup;\n  */\n class AnyValueComparator implements Comparator<AnyValue>, TernaryComparator<AnyValue>\n {\n-    private final Comparator<VirtualValueGroup> virtualValueGroupComparator;\n-    private final ValueComparator valueComparator;\n-\n-    AnyValueComparator( ValueComparator valueComparator, Comparator<VirtualValueGroup> virtualValueGroupComparator )\n+  private final Comparator<VirtualValueGroup> virtualValueGroupComparator;\n+  private final ValueComparator valueComparator;\n+\n+  AnyValueComparator(ValueComparator valueComparator, Comparator<VirtualValueGroup> virtualValueGroupComparator)\n+  {\n+    this.virtualValueGroupComparator = virtualValueGroupComparator;\n+    this.valueComparator = valueComparator;\n+  }\n+\n+  private Comparison cmp(AnyValue v1, AnyValue v2, boolean ternary)\n+  {\n+    assert v1 != null && v2 != null : \"null values are not supported, use NoValue.NO_VALUE instead\";\n+\n+    // NO_VALUE is bigger than all other values, need to check for that up\n+    // front\n+    if (v1 == v2)\n     {\n-        this.virtualValueGroupComparator = virtualValueGroupComparator;\n-        this.valueComparator = valueComparator;\n+      return Comparison.EQUAL;\n     }\n-\n-    private Comparison cmp( AnyValue v1, AnyValue v2, boolean ternary )\n+    if (v1 == Values.NO_VALUE)\n     {\n-        assert v1 != null && v2 != null : \"null values are not supported, use NoValue.NO_VALUE instead\";\n-\n-        // NO_VALUE is bigger than all other values, need to check for that up\n-        // front\n-        if ( v1 == v2 )\n-        {\n-            return Comparison.EQUAL;\n-        }\n-        if ( v1 == Values.NO_VALUE )\n-        {\n-            return Comparison.GREATER_THAN;\n-        }\n-        if ( v2 == Values.NO_VALUE )\n-        {\n-            return Comparison.SMALLER_THAN;\n-        }\n-\n-        // We must handle sequences as a special case, as they can be both storable and virtual\n-        boolean isSequence1 = v1.isSequenceValue();\n-        boolean isSequence2 = v2.isSequenceValue();\n-\n-        if ( isSequence1 && isSequence2 )\n-        {\n-            return Comparison.from( compareSequences( (SequenceValue) v1, (SequenceValue) v2 ) );\n-        }\n-        else if ( isSequence1 )\n-        {\n-            return Comparison.from( compareSequenceAndNonSequence( (SequenceValue) v1, v2 ) );\n-        }\n-        else if ( isSequence2 )\n-        {\n-            return Comparison.from( -compareSequenceAndNonSequence( (SequenceValue) v2, v1 ) );\n-        }\n-\n-        // Handle remaining AnyValues\n-        boolean isValue1 = v1 instanceof Value;\n-        boolean isValue2 = v2 instanceof Value;\n-\n-        int x = Boolean.compare( isValue1, isValue2 );\n-\n-        if ( x == 0 )\n-        {\n-            //noinspection ConstantConditions\n-            // Do not turn this into ?-operator\n-            if ( isValue1 )\n-            {\n-                if ( ternary )\n-                {\n-                    return valueComparator.ternaryCompare( (Value) v1, (Value) v2 );\n-                }\n-                else\n-                {\n-                    return Comparison.from( valueComparator.compare( (Value) v1, (Value) v2 ) );\n-                }\n-            }\n-            else\n-            {\n-                // This returns int\n-                return Comparison.from( compareVirtualValues( (VirtualValue) v1, (VirtualValue) v2 ) );\n-            }\n-\n-        }\n-        return Comparison.from( x );\n+      return Comparison.GREATER_THAN;\n     }\n-\n-    @Override\n-    public int compare( AnyValue v1, AnyValue v2 )\n+    if (v2 == Values.NO_VALUE)\n     {\n-        return cmp( v1, v2, false ).value();\n+      return Comparison.SMALLER_THAN;\n     }\n \n-    @Override\n-    public Comparison ternaryCompare( AnyValue v1, AnyValue v2 )\n-    {\n-        return cmp( v1, v2, true );\n-    }\n+    // We must handle sequences as a special case, as they can be both storable and virtual\n+    boolean isSequence1 = v1.isSequenceValue();\n+    boolean isSequence2 = v2.isSequenceValue();\n \n-    @Override\n-    public boolean equals( Object obj )\n+    if (isSequence1 && isSequence2)\n     {\n-        return obj instanceof AnyValueComparator;\n-    }\n-\n-    @Override\n-    public int hashCode()\n+      return Comparison.from(compareSequences((SequenceValue) v1, (SequenceValue) v2));\n+    } else if (isSequence1)\n     {\n-        return 1;\n-    }\n-\n-    private int compareVirtualValues( VirtualValue v1, VirtualValue v2 )\n+      return Comparison.from(compareSequenceAndNonSequence((SequenceValue) v1, v2));\n+    } else if (isSequence2)\n     {\n-        VirtualValueGroup id1 = v1.valueGroup();\n-        VirtualValueGroup id2 = v2.valueGroup();\n+      return Comparison.from(-compareSequenceAndNonSequence((SequenceValue) v2, v1));\n+    }\n \n-        int x = virtualValueGroupComparator.compare( id1, id2 );\n+    // Handle remaining AnyValues\n+    boolean isValue1 = v1 instanceof Value;\n+    boolean isValue2 = v2 instanceof Value;\n \n-        if ( x == 0 )\n-        {\n-            return v1.compareTo( v2, this );\n-        }\n-        return x;\n-    }\n+    int x = Boolean.compare(isValue1, isValue2);\n \n-    private int compareSequenceAndNonSequence( SequenceValue v1, AnyValue v2 )\n+    if (x == 0)\n     {\n-        boolean isValue2 = v2 instanceof Value;\n-        if ( isValue2 )\n+      //noinspection ConstantConditions\n+      // Do not turn this into ?-operator\n+      if (isValue1)\n+      {\n+        if (ternary)\n         {\n-            return -1;\n-        }\n-        else\n+          return valueComparator.ternaryCompare((Value) v1, (Value) v2);\n+        } else\n         {\n-            return virtualValueGroupComparator.compare( VirtualValueGroup.LIST, ((VirtualValue) v2).valueGroup() );\n+          return Comparison.from(valueComparator.compare((Value) v1, (Value) v2));\n         }\n+      } else\n+      {\n+        // This returns int\n+        return Comparison.from(compareVirtualValues((VirtualValue) v1, (VirtualValue) v2));\n+      }\n+\n+    }\n+    return Comparison.from(x);\n+  }\n+\n+  @Override\n+  public int compare(AnyValue v1, AnyValue v2)\n+  {\n+    return cmp(v1, v2, false).value();\n+  }\n+\n+  @Override\n+  public Comparison ternaryCompare(AnyValue v1, AnyValue v2)\n+  {\n+    return cmp(v1, v2, true);\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    return obj instanceof AnyValueComparator;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return 1;\n+  }\n+\n+  private int compareVirtualValues(VirtualValue v1, VirtualValue v2)\n+  {\n+    VirtualValueGroup id1 = v1.valueGroup();\n+    VirtualValueGroup id2 = v2.valueGroup();\n+\n+    int x = virtualValueGroupComparator.compare(id1, id2);\n+\n+    if (x == 0)\n+    {\n+      return v1.compareTo(v2, this);\n     }\n+    return x;\n+  }\n \n-    private int compareSequences( SequenceValue v1, SequenceValue v2 )\n+  private int compareSequenceAndNonSequence(SequenceValue v1, AnyValue v2)\n+  {\n+    boolean isValue2 = v2 instanceof Value;\n+    if (isValue2)\n     {\n-        return v1.compareToSequence( v2, this );\n+      return -1;\n+    } else\n+    {\n+      return virtualValueGroupComparator.compare(VirtualValueGroup.LIST, ((VirtualValue) v2).valueGroup());\n     }\n+  }\n+\n+  private int compareSequences(SequenceValue v1, SequenceValue v2)\n+  {\n+    return v1.compareToSequence(v2, this);\n+  }\n }\n",
            "diff_size": 185
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3106/AnyValueComparator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3106/AnyValueComparator.java\nindex dd49da4f579..72d06639430 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3106/AnyValueComparator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3106/AnyValueComparator.java\n@@ -50,11 +50,13 @@ class AnyValueComparator implements Comparator<AnyValue>, TernaryComparator<AnyV\n         {\n             return Comparison.EQUAL;\n         }\n-        if ( v1 == Values.NO_VALUE )\n+\n+if ( v1 == Values.NO_VALUE )\n         {\n             return Comparison.GREATER_THAN;\n         }\n-        if ( v2 == Values.NO_VALUE )\n+\n+if ( v2 == Values.NO_VALUE )\n         {\n             return Comparison.SMALLER_THAN;\n         }\n@@ -62,8 +64,7 @@ class AnyValueComparator implements Comparator<AnyValue>, TernaryComparator<AnyV\n         // We must handle sequences as a special case, as they can be both storable and virtual\n         boolean isSequence1 = v1.isSequenceValue();\n         boolean isSequence2 = v2.isSequenceValue();\n-\n-        if ( isSequence1 && isSequence2 )\n+if ( isSequence1 && isSequence2 )\n         {\n             return Comparison.from( compareSequences( (SequenceValue) v1, (SequenceValue) v2 ) );\n         }\n@@ -81,8 +82,7 @@ class AnyValueComparator implements Comparator<AnyValue>, TernaryComparator<AnyV\n         boolean isValue2 = v2 instanceof Value;\n \n         int x = Boolean.compare( isValue1, isValue2 );\n-\n-        if ( x == 0 )\n+if ( x == 0 )\n         {\n             //noinspection ConstantConditions\n             // Do not turn this into ?-operator\n@@ -102,8 +102,7 @@ class AnyValueComparator implements Comparator<AnyValue>, TernaryComparator<AnyV\n                 // This returns int\n                 return Comparison.from( compareVirtualValues( (VirtualValue) v1, (VirtualValue) v2 ) );\n             }\n-\n-        }\n+    }\n         return Comparison.from( x );\n     }\n \n@@ -137,12 +136,12 @@ class AnyValueComparator implements Comparator<AnyValue>, TernaryComparator<AnyV\n         VirtualValueGroup id2 = v2.valueGroup();\n \n         int x = virtualValueGroupComparator.compare( id1, id2 );\n-\n-        if ( x == 0 )\n+if ( x == 0 )\n         {\n             return v1.compareTo( v2, this );\n         }\n-        return x;\n+\n+return x;\n     }\n \n     private int compareSequenceAndNonSequence( SequenceValue v1, AnyValue v2 )\n@@ -162,4 +161,4 @@ class AnyValueComparator implements Comparator<AnyValue>, TernaryComparator<AnyV\n     {\n         return v1.compareToSequence( v2, this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}