{
    "project_name": "neo4j-neo4j",
    "error_id": "337",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "85",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/337/Neo4jExtension.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/337/Neo4jExtension.java\nindex d66cb804977..58a81cacfe6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/337/Neo4jExtension.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/337/Neo4jExtension.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.harness.junit.extension;\n \n import org.junit.jupiter.api.extension.AfterAllCallback;\n@@ -70,7 +71,7 @@ import org.neo4j.harness.internal.InProcessNeo4j;\n public class Neo4jExtension implements BeforeAllCallback, AfterAllCallback, ParameterResolver\n {\n     private static final String NEO4J_NAMESPACE = \"neo4j-extension\";\n-    private static final Namespace NAMESPACE = Namespace.create( NEO4J_NAMESPACE );\n+    private static final Namespace NAMESPACE = Namespace.create(NEO4J_NAMESPACE);\n \n     private Neo4jBuilder builder;\n \n@@ -81,46 +82,46 @@ public class Neo4jExtension implements BeforeAllCallback, AfterAllCallback, Para\n \n     public Neo4jExtension()\n     {\n-        this( Neo4jBuilders.newInProcessBuilder() );\n+        this(Neo4jBuilders.newInProcessBuilder());\n     }\n \n-    protected Neo4jExtension( Neo4jBuilder builder )\n+    protected Neo4jExtension(Neo4jBuilder builder)\n     {\n         this.builder = builder;\n     }\n \n     @Override\n-    public void beforeAll( ExtensionContext context )\n+    public void beforeAll(ExtensionContext context)\n     {\n         Neo4j neo = builder.build();\n         DatabaseManagementService managementService = neo.databaseManagementService();\n         GraphDatabaseService service = neo.defaultDatabaseService();\n-        context.getStore( NAMESPACE ).put( Neo4j.class, neo );\n-        context.getStore( NAMESPACE ).put( DatabaseManagementService.class, managementService );\n-        context.getStore( NAMESPACE ).put( GraphDatabaseService.class, service );\n+        context.getStore(NAMESPACE).put(Neo4j.class, neo);\n+        context.getStore(NAMESPACE).put(DatabaseManagementService.class, managementService);\n+        context.getStore(NAMESPACE).put(GraphDatabaseService.class, service);\n     }\n \n     @Override\n-    public void afterAll( ExtensionContext context )\n+    public void afterAll(ExtensionContext context)\n     {\n-        ExtensionContext.Store store = context.getStore( NAMESPACE );\n-        store.remove( GraphDatabaseService.class );\n-        store.remove( DatabaseManagementService.class );\n-        InProcessNeo4j controls = store.remove( Neo4j.class, InProcessNeo4j.class );\n+        ExtensionContext.Store store = context.getStore(NAMESPACE);\n+        store.remove(GraphDatabaseService.class);\n+        store.remove(DatabaseManagementService.class);\n+        InProcessNeo4j controls = store.remove(Neo4j.class, InProcessNeo4j.class);\n         controls.close();\n     }\n \n     @Override\n-    public boolean supportsParameter( ParameterContext parameterContext, ExtensionContext extensionContext ) throws ParameterResolutionException\n+    public boolean supportsParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException\n     {\n         Class<?> paramType = parameterContext.getParameter().getType();\n-        return paramType.equals( GraphDatabaseService.class ) || paramType.equals( Neo4j.class ) || paramType.equals( DatabaseManagementService.class );\n+        return paramType.equals(GraphDatabaseService.class) || paramType.equals(Neo4j.class) || paramType.equals(DatabaseManagementService.class);\n     }\n \n     @Override\n-    public Object resolveParameter( ParameterContext parameterContext, ExtensionContext extensionContext ) throws ParameterResolutionException\n+    public Object resolveParameter(ParameterContext parameterContext, ExtensionContext extensionContext) throws ParameterResolutionException\n     {\n         Class<?> paramType = parameterContext.getParameter().getType();\n-        return extensionContext.getStore( NAMESPACE ).get( paramType, paramType );\n+        return extensionContext.getStore(NAMESPACE).get(paramType, paramType);\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/337/Neo4jExtension.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/337/Neo4jExtension.java\nindex d66cb804977..3292a00df5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/337/Neo4jExtension.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/337/Neo4jExtension.java\n@@ -123,4 +123,4 @@ public class Neo4jExtension implements BeforeAllCallback, AfterAllCallback, Para\n         Class<?> paramType = parameterContext.getParameter().getType();\n         return extensionContext.getStore( NAMESPACE ).get( paramType, paramType );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}