{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3620",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3620/KernelToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3620/KernelToken.java\nindex 673156f10a4..fcb9329dc1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3620/KernelToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3620/KernelToken.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import java.util.Iterator;\n@@ -36,169 +37,169 @@ import org.neo4j.storageengine.api.StoreReadLayer;\n \n public class KernelToken implements Token\n {\n-    private final StoreReadLayer store;\n-    private final KernelTransactionImplementation ktx;\n-\n-    public KernelToken( StoreReadLayer store, KernelTransactionImplementation ktx )\n-    {\n-        this.store = store;\n-        this.ktx = ktx;\n-    }\n-\n-    @Override\n-    public int labelGetOrCreateForName( String labelName ) throws IllegalTokenNameException, TooManyLabelsException\n-    {\n-        ktx.assertOpen();\n-        int labelId = store.labelGetForName( checkValidTokenName( labelName ) );\n-        if ( labelId != TokenHolder.NO_ID )\n-        {\n-            return labelId;\n-        }\n-        ktx.assertAllows( AccessMode::allowsTokenCreates, \"Token create\" );\n-        return store.labelGetOrCreateForName( labelName );\n-    }\n-\n-    @Override\n-    public void labelCreateForName( String labelName, int id ) throws IllegalTokenNameException, TooManyLabelsException\n-    {\n-        ktx.assertOpen();\n-        ktx.txState().labelDoCreateForName( labelName, id );\n-    }\n-\n-    @Override\n-    public void relationshipTypeCreateForName( String relationshipTypeName, int id ) throws IllegalTokenNameException\n-    {\n-        ktx.assertOpen();\n-        ktx.txState().relationshipTypeDoCreateForName( relationshipTypeName, id );\n-    }\n-\n-    @Override\n-    public void propertyKeyCreateForName( String propertyKeyName, int id ) throws IllegalTokenNameException\n-    {\n-        ktx.assertOpen();\n-        ktx.txState().propertyKeyDoCreateForName( propertyKeyName, id );\n-    }\n-\n-    @Override\n-    public int propertyKeyGetOrCreateForName( String propertyKeyName ) throws IllegalTokenNameException\n-    {\n-        ktx.assertOpen();\n-        int propertyId = store.propertyKeyGetForName( checkValidTokenName( propertyKeyName ) );\n-        if ( propertyId != TokenHolder.NO_ID )\n-        {\n-            return propertyId;\n-        }\n-        ktx.assertAllows( AccessMode::allowsTokenCreates, \"Token create\" );\n-        return store.propertyKeyGetOrCreateForName( propertyKeyName );\n-    }\n-\n-    @Override\n-    public int relationshipTypeGetOrCreateForName( String relationshipTypeName ) throws IllegalTokenNameException\n-    {\n-        ktx.assertOpen();\n-        int typeId = store.relationshipTypeGetForName( checkValidTokenName( relationshipTypeName ) );\n-        if ( typeId != TokenHolder.NO_ID )\n-        {\n-            return typeId;\n-        }\n-        ktx.assertAllows( AccessMode::allowsTokenCreates, \"Token create\" );\n-        return store.relationshipTypeGetOrCreateForName( relationshipTypeName );\n-    }\n-\n-    @Override\n-    public String nodeLabelName( int labelId ) throws LabelNotFoundKernelException\n-    {\n-        ktx.assertOpen();\n-        return store.labelGetName( labelId );\n-    }\n-\n-    @Override\n-    public int nodeLabel( String name )\n-    {\n-        ktx.assertOpen();\n-        return store.labelGetForName( name );\n-    }\n-\n-    @Override\n-    public int relationshipType( String name )\n-    {\n-        ktx.assertOpen();\n-        return store.relationshipTypeGetForName( name );\n-    }\n-\n-    @Override\n-    public String relationshipTypeName( int relationshipTypeId ) throws RelationshipTypeIdNotFoundKernelException\n-    {\n-        ktx.assertOpen();\n-        return store.relationshipTypeGetName( relationshipTypeId );\n-    }\n-\n-    @Override\n-    public int propertyKey( String name )\n-    {\n-        ktx.assertOpen();\n-        return store.propertyKeyGetForName( name );\n-    }\n-\n-    @Override\n-    public String propertyKeyName( int propertyKeyId ) throws PropertyKeyIdNotFoundKernelException\n-    {\n-        ktx.assertOpen();\n-        return store.propertyKeyGetName( propertyKeyId );\n-    }\n-\n-    @Override\n-    public Iterator<NamedToken> labelsGetAllTokens()\n-    {\n-        ktx.assertOpen();\n-        return Iterators.map( token -> new NamedToken( token.name(), token.id() ), store.labelsGetAllTokens());\n-    }\n-\n-    @Override\n-    public Iterator<NamedToken> propertyKeyGetAllTokens()\n-    {\n-        ktx.assertOpen();\n-        AccessMode mode = ktx.securityContext().mode();\n-        return Iterators.stream( store.propertyKeyGetAllTokens() )\n-                .filter( propKey -> mode.allowsPropertyReads( propKey.id() ) )\n-                .map( token -> new NamedToken( token.name(), token.id() ) )\n-                .iterator();\n-    }\n-\n-    @Override\n-    public Iterator<NamedToken> relationshipTypesGetAllTokens()\n-    {\n-        ktx.assertOpen();\n-        return Iterators.map( token -> new NamedToken( token.name(), token.id() ), store.relationshipTypeGetAllTokens());\n-    }\n-\n-    @Override\n-    public int labelCount()\n-    {\n-        ktx.assertOpen();\n-        return store.labelCount();\n-    }\n-\n-    @Override\n-    public int propertyKeyCount()\n-    {\n-        ktx.assertOpen();\n-        return store.propertyKeyCount();\n-    }\n-\n-    @Override\n-    public int relationshipTypeCount()\n-    {\n-        ktx.assertOpen();\n-        return store.relationshipTypeCount();\n-    }\n-\n-    private String checkValidTokenName( String name ) throws IllegalTokenNameException\n-    {\n-        if ( name == null || name.isEmpty() )\n-        {\n-            throw new IllegalTokenNameException( name );\n-        }\n-        return name;\n-    }\n+  private final StoreReadLayer store;\n+  private final KernelTransactionImplementation ktx;\n+\n+  public KernelToken(StoreReadLayer store, KernelTransactionImplementation ktx)\n+  {\n+    this.store = store;\n+    this.ktx = ktx;\n+  }\n+\n+  @Override\n+  public int labelGetOrCreateForName(String labelName) throws IllegalTokenNameException, TooManyLabelsException\n+  {\n+    ktx.assertOpen();\n+    int labelId = store.labelGetForName(checkValidTokenName(labelName));\n+    if (labelId != TokenHolder.NO_ID)\n+    {\n+      return labelId;\n+    }\n+    ktx.assertAllows(AccessMode::allowsTokenCreates, \"Token create\");\n+    return store.labelGetOrCreateForName(labelName);\n+  }\n+\n+  @Override\n+  public void labelCreateForName(String labelName, int id) throws IllegalTokenNameException, TooManyLabelsException\n+  {\n+    ktx.assertOpen();\n+    ktx.txState().labelDoCreateForName(labelName, id);\n+  }\n+\n+  @Override\n+  public void relationshipTypeCreateForName(String relationshipTypeName, int id) throws IllegalTokenNameException\n+  {\n+    ktx.assertOpen();\n+    ktx.txState().relationshipTypeDoCreateForName(relationshipTypeName, id);\n+  }\n+\n+  @Override\n+  public void propertyKeyCreateForName(String propertyKeyName, int id) throws IllegalTokenNameException\n+  {\n+    ktx.assertOpen();\n+    ktx.txState().propertyKeyDoCreateForName(propertyKeyName, id);\n+  }\n+\n+  @Override\n+  public int propertyKeyGetOrCreateForName(String propertyKeyName) throws IllegalTokenNameException\n+  {\n+    ktx.assertOpen();\n+    int propertyId = store.propertyKeyGetForName(checkValidTokenName(propertyKeyName));\n+    if (propertyId != TokenHolder.NO_ID)\n+    {\n+      return propertyId;\n+    }\n+    ktx.assertAllows(AccessMode::allowsTokenCreates, \"Token create\");\n+    return store.propertyKeyGetOrCreateForName(propertyKeyName);\n+  }\n+\n+  @Override\n+  public int relationshipTypeGetOrCreateForName(String relationshipTypeName) throws IllegalTokenNameException\n+  {\n+    ktx.assertOpen();\n+    int typeId = store.relationshipTypeGetForName(checkValidTokenName(relationshipTypeName));\n+    if (typeId != TokenHolder.NO_ID)\n+    {\n+      return typeId;\n+    }\n+    ktx.assertAllows(AccessMode::allowsTokenCreates, \"Token create\");\n+    return store.relationshipTypeGetOrCreateForName(relationshipTypeName);\n+  }\n+\n+  @Override\n+  public String nodeLabelName(int labelId) throws LabelNotFoundKernelException\n+  {\n+    ktx.assertOpen();\n+    return store.labelGetName(labelId);\n+  }\n+\n+  @Override\n+  public int nodeLabel(String name)\n+  {\n+    ktx.assertOpen();\n+    return store.labelGetForName(name);\n+  }\n+\n+  @Override\n+  public int relationshipType(String name)\n+  {\n+    ktx.assertOpen();\n+    return store.relationshipTypeGetForName(name);\n+  }\n+\n+  @Override\n+  public String relationshipTypeName(int relationshipTypeId) throws RelationshipTypeIdNotFoundKernelException\n+  {\n+    ktx.assertOpen();\n+    return store.relationshipTypeGetName(relationshipTypeId);\n+  }\n+\n+  @Override\n+  public int propertyKey(String name)\n+  {\n+    ktx.assertOpen();\n+    return store.propertyKeyGetForName(name);\n+  }\n+\n+  @Override\n+  public String propertyKeyName(int propertyKeyId) throws PropertyKeyIdNotFoundKernelException\n+  {\n+    ktx.assertOpen();\n+    return store.propertyKeyGetName(propertyKeyId);\n+  }\n+\n+  @Override\n+  public Iterator<NamedToken> labelsGetAllTokens()\n+  {\n+    ktx.assertOpen();\n+    return Iterators.map(token -> new NamedToken(token.name(), token.id()), store.labelsGetAllTokens());\n+  }\n+\n+  @Override\n+  public Iterator<NamedToken> propertyKeyGetAllTokens()\n+  {\n+    ktx.assertOpen();\n+    AccessMode mode = ktx.securityContext().mode();\n+    return Iterators.stream(store.propertyKeyGetAllTokens())\n+        .filter(propKey -> mode.allowsPropertyReads(propKey.id()))\n+        .map(token -> new NamedToken(token.name(), token.id()))\n+        .iterator();\n+  }\n+\n+  @Override\n+  public Iterator<NamedToken> relationshipTypesGetAllTokens()\n+  {\n+    ktx.assertOpen();\n+    return Iterators.map(token -> new NamedToken(token.name(), token.id()), store.relationshipTypeGetAllTokens());\n+  }\n+\n+  @Override\n+  public int labelCount()\n+  {\n+    ktx.assertOpen();\n+    return store.labelCount();\n+  }\n+\n+  @Override\n+  public int propertyKeyCount()\n+  {\n+    ktx.assertOpen();\n+    return store.propertyKeyCount();\n+  }\n+\n+  @Override\n+  public int relationshipTypeCount()\n+  {\n+    ktx.assertOpen();\n+    return store.relationshipTypeCount();\n+  }\n+\n+  private String checkValidTokenName(String name) throws IllegalTokenNameException\n+  {\n+    if (name == null || name.isEmpty())\n+    {\n+      throw new IllegalTokenNameException(name);\n+    }\n+    return name;\n+  }\n }\n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3620/KernelToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3620/KernelToken.java\nindex 673156f10a4..17e1e44f6ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3620/KernelToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3620/KernelToken.java\n@@ -151,7 +151,7 @@ public class KernelToken implements Token\n     public Iterator<NamedToken> labelsGetAllTokens()\n     {\n         ktx.assertOpen();\n-        return Iterators.map( token -> new NamedToken( token.name(), token.id() ), store.labelsGetAllTokens());\n+        return Iterators.map( token -> new NamedToken( token.name(), token.id() ), store.labelsGetAllTokens() );\n     }\n \n     @Override\n@@ -159,17 +159,14 @@ public class KernelToken implements Token\n     {\n         ktx.assertOpen();\n         AccessMode mode = ktx.securityContext().mode();\n-        return Iterators.stream( store.propertyKeyGetAllTokens() )\n-                .filter( propKey -> mode.allowsPropertyReads( propKey.id() ) )\n-                .map( token -> new NamedToken( token.name(), token.id() ) )\n-                .iterator();\n+        return Iterators.stream( store.propertyKeyGetAllTokens() ).filter( propKey -> mode.allowsPropertyReads( propKey.id() ) ).map( token -> new NamedToken( token.name(), token.id() ) ).iterator();\n     }\n \n     @Override\n     public Iterator<NamedToken> relationshipTypesGetAllTokens()\n     {\n         ktx.assertOpen();\n-        return Iterators.map( token -> new NamedToken( token.name(), token.id() ), store.relationshipTypeGetAllTokens());\n+        return Iterators.map( token -> new NamedToken( token.name(), token.id() ), store.relationshipTypeGetAllTokens() );\n     }\n \n     @Override\n@@ -199,6 +196,7 @@ public class KernelToken implements Token\n         {\n             throw new IllegalTokenNameException( name );\n         }\n-        return name;\n+\n+return name;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}