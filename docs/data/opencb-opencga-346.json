{
    "project_name": "opencb-opencga",
    "error_id": "346",
    "information": {
        "errors": [
            {
                "line": "244",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 159).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                Path file = outDir.resolve(Paths.get(arm.read().getOutputFiles().get(0).getPath()));\n                VariantScoreFormatDescriptor formatDescriptor = new VariantScoreFormatDescriptor(1, 16, 15);\n                variantStorageManager.loadVariantScore(study, file.toUri(), scoreName, caseCohort, controlCohort, formatDescriptor, executorParams, sessionId);\n            } catch (CatalogException | StorageEngineException e) {\n                throw new AnalysisException(e);\n            }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/346/GwasOpenCgaAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/346/GwasOpenCgaAnalysis.java\nindex 7b69f54691c..04e088b30ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/346/GwasOpenCgaAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/346/GwasOpenCgaAnalysis.java\n@@ -40,248 +40,251 @@ import java.util.List;\n import java.util.stream.Collectors;\n \n @Analysis(id = Gwas.ID, data = Analysis.AnalysisData.VARIANT,\n-        description = \"Run a Genome Wide Association Study between two cohorts.\")\n+    description = \"Run a Genome Wide Association Study between two cohorts.\")\n public class GwasOpenCgaAnalysis extends OpenCgaAnalysis {\n \n-    private GwasConfiguration gwasConfiguration;\n-    private String study;\n-    private String caseCohort;\n-    private String controlCohort;\n-    private Query caseCohortSamplesQuery;\n-    private Query controlCohortSamplesQuery;\n-    private List<String> caseCohortSamples;\n-    private List<String> controlCohortSamples;\n-    private String scoreName;\n-    private boolean index;\n+  private GwasConfiguration gwasConfiguration;\n+  private String study;\n+  private String caseCohort;\n+  private String controlCohort;\n+  private Query caseCohortSamplesQuery;\n+  private Query controlCohortSamplesQuery;\n+  private List<String> caseCohortSamples;\n+  private List<String> controlCohortSamples;\n+  private String scoreName;\n+  private boolean index;\n \n-    public GwasOpenCgaAnalysis() {\n-    }\n+  public GwasOpenCgaAnalysis() {\n+  }\n \n-    /**\n-     * Provide the GWAS analysis configuration.\n-     * @param gwasConfiguration configuration\n-     * @return this\n-     */\n-    public GwasOpenCgaAnalysis setGwasConfiguration(GwasConfiguration gwasConfiguration) {\n-        this.gwasConfiguration = gwasConfiguration;\n-        return this;\n-    }\n+  /**\n+   * Provide the GWAS analysis configuration.\n+   *\n+   * @param gwasConfiguration configuration\n+   * @return this\n+   */\n+  public GwasOpenCgaAnalysis setGwasConfiguration(GwasConfiguration gwasConfiguration) {\n+    this.gwasConfiguration = gwasConfiguration;\n+    return this;\n+  }\n \n-    /**\n-     * Study of the samples.\n-     * @param study Study id\n-     * @return this\n-     */\n-    public GwasOpenCgaAnalysis setStudy(String study) {\n-        this.study = study;\n-        return this;\n-    }\n+  /**\n+   * Study of the samples.\n+   *\n+   * @param study Study id\n+   * @return this\n+   */\n+  public GwasOpenCgaAnalysis setStudy(String study) {\n+    this.study = study;\n+    return this;\n+  }\n \n-    /**\n-     * Samples query selecting samples of the case cohort.\n-     * This parameter is an alternative to {@link #setCaseCohort}\n-     *\n-     * @param caseCohortSamplesQuery sample query\n-     * @return this\n-     */\n-    public GwasOpenCgaAnalysis setCaseCohortSamplesQuery(Query caseCohortSamplesQuery) {\n-        this.caseCohortSamplesQuery = caseCohortSamplesQuery;\n-        return this;\n-    }\n+  /**\n+   * Samples query selecting samples of the case cohort.\n+   * This parameter is an alternative to {@link #setCaseCohort}\n+   *\n+   * @param caseCohortSamplesQuery sample query\n+   * @return this\n+   */\n+  public GwasOpenCgaAnalysis setCaseCohortSamplesQuery(Query caseCohortSamplesQuery) {\n+    this.caseCohortSamplesQuery = caseCohortSamplesQuery;\n+    return this;\n+  }\n \n-    /**\n-     * Samples query selecting samples of the control cohort.\n-     * This parameter is an alternative to {@link #setControlCohort}\n-     *\n-     * @param controlCohortSamplesQuery sample query\n-     * @return this\n-     */\n-    public GwasOpenCgaAnalysis setControlCohortSamplesQuery(Query controlCohortSamplesQuery) {\n-        this.controlCohortSamplesQuery = controlCohortSamplesQuery;\n-        return this;\n-    }\n+  /**\n+   * Samples query selecting samples of the control cohort.\n+   * This parameter is an alternative to {@link #setControlCohort}\n+   *\n+   * @param controlCohortSamplesQuery sample query\n+   * @return this\n+   */\n+  public GwasOpenCgaAnalysis setControlCohortSamplesQuery(Query controlCohortSamplesQuery) {\n+    this.controlCohortSamplesQuery = controlCohortSamplesQuery;\n+    return this;\n+  }\n \n-    /**\n-     * Cohort from catalog to be used as case cohort.\n-     * This parameter is an alternative to {@link #setCaseCohortSamplesQuery}\n-     *\n-     * @param caseCohort cohort name\n-     * @return this\n-     */\n-    public GwasOpenCgaAnalysis setCaseCohort(String caseCohort) {\n-        this.caseCohort = caseCohort;\n-        return this;\n-    }\n+  /**\n+   * Cohort from catalog to be used as case cohort.\n+   * This parameter is an alternative to {@link #setCaseCohortSamplesQuery}\n+   *\n+   * @param caseCohort cohort name\n+   * @return this\n+   */\n+  public GwasOpenCgaAnalysis setCaseCohort(String caseCohort) {\n+    this.caseCohort = caseCohort;\n+    return this;\n+  }\n+\n+  /**\n+   * Cohort from catalog to be used as control cohort.\n+   * This parameter is an alternative to {@link #setControlCohortSamplesQuery}\n+   *\n+   * @param controlCohort cohort name\n+   * @return this\n+   */\n+  public GwasOpenCgaAnalysis setControlCohort(String controlCohort) {\n+    this.controlCohort = controlCohort;\n+    return this;\n+  }\n+\n+  /**\n+   * Name to be used to index que score in the variant storage.\n+   * Must be unique in the study. If provided, the control/case cohorts must be registered in catalog.\n+   *\n+   * @param scoreName score name\n+   * @return this\n+   */\n+  public GwasOpenCgaAnalysis setScoreName(String scoreName) {\n+    this.scoreName = scoreName;\n+    return this;\n+  }\n \n-    /**\n-     * Cohort from catalog to be used as control cohort.\n-     * This parameter is an alternative to {@link #setControlCohortSamplesQuery}\n-     *\n-     * @param controlCohort cohort name\n-     * @return this\n-     */\n-    public GwasOpenCgaAnalysis setControlCohort(String controlCohort) {\n-        this.controlCohort = controlCohort;\n-        return this;\n+  @Override\n+  protected void check() throws AnalysisException {\n+    super.check();\n+    setUpStorageEngineExecutor(study);\n+\n+    if (gwasConfiguration == null) {\n+      gwasConfiguration = new GwasConfiguration()\n+          .setMethod(GwasConfiguration.Method.FISHER_TEST)\n+          .setFisherMode(GwasConfiguration.FisherMode.TWO_SIDED);\n     }\n \n-    /**\n-     * Name to be used to index que score in the variant storage.\n-     * Must be unique in the study. If provided, the control/case cohorts must be registered in catalog.\n-     *\n-     * @param scoreName score name\n-     * @return this\n-     */\n-    public GwasOpenCgaAnalysis setScoreName(String scoreName) {\n-        this.scoreName = scoreName;\n-        return this;\n+    if (StringUtils.isEmpty(study)) {\n+      throw new AnalysisException(\"Missing study!\");\n     }\n \n-    @Override\n-    protected void check() throws AnalysisException {\n-        super.check();\n-        setUpStorageEngineExecutor(study);\n+    try {\n+      study = catalogManager.getStudyManager().get(study, null, sessionId).first().getFqn();\n+    } catch (CatalogException e) {\n+      throw new AnalysisException(e);\n+    }\n \n-        if (gwasConfiguration == null) {\n-            gwasConfiguration = new GwasConfiguration()\n-                    .setMethod(GwasConfiguration.Method.FISHER_TEST)\n-                    .setFisherMode(GwasConfiguration.FisherMode.TWO_SIDED);\n-        }\n+    caseCohortSamples = getCohortSamples(caseCohort, caseCohortSamplesQuery, \"case\");\n+    controlCohortSamples = getCohortSamples(controlCohort, controlCohortSamplesQuery, \"control\");\n \n-        if (StringUtils.isEmpty(study)) {\n-            throw new AnalysisException(\"Missing study!\");\n+    if (!Collections.disjoint(caseCohortSamples, controlCohortSamples)) {\n+      List<String> overlapping = new ArrayList<>();\n+      for (String caseCohortSample : caseCohortSamples) {\n+        if (controlCohortSamples.contains(caseCohortSample)) {\n+          overlapping.add(caseCohortSample);\n         }\n+      }\n+      throw new AnalysisException(\"Unable to run Gwas analysis with overlapping cohorts. \"\n+          + (overlapping.size() < 10\n+          ? \"Samples \" + overlapping + \" are shared between both cohorts.\"\n+          : \"There are \" + overlapping.size() + \" overlapping samples between the cohorts.\"));\n+    }\n \n-        try {\n-            study = catalogManager.getStudyManager().get(study, null, sessionId).first().getFqn();\n-        } catch (CatalogException e) {\n-            throw new AnalysisException(e);\n-        }\n+    // check read permission\n+    try {\n+      List<String> allSamples = new ArrayList<>();\n+      allSamples.addAll(caseCohortSamples);\n+      allSamples.addAll(controlCohortSamples);\n+      variantStorageManager.checkQueryPermissions(\n+          new Query()\n+              .append(VariantQueryParam.STUDY.key(), study)\n+              .append(VariantQueryParam.INCLUDE_SAMPLE.key(), allSamples),\n+          new QueryOptions(),\n+          sessionId);\n+    } catch (CatalogException | StorageEngineException e) {\n+      throw new AnalysisException(e);\n+    }\n \n-        caseCohortSamples = getCohortSamples(caseCohort, caseCohortSamplesQuery, \"case\");\n-        controlCohortSamples = getCohortSamples(controlCohort, controlCohortSamplesQuery, \"control\");\n+    if (StringUtils.isNotEmpty(scoreName)) {\n+      if (StringUtils.isEmpty(caseCohort) || StringUtils.isEmpty(controlCohort)) {\n+        throw new AnalysisException(\"Unable to index gwas result as VariantScore if the cohorts are not defined in catalog\");\n+      }\n \n-        if (!Collections.disjoint(caseCohortSamples, controlCohortSamples)) {\n-            List<String> overlapping = new ArrayList<>();\n-            for (String caseCohortSample : caseCohortSamples) {\n-                if (controlCohortSamples.contains(caseCohortSample)) {\n-                    overlapping.add(caseCohortSample);\n-                }\n+      // check score is not already indexed\n+      try {\n+        List<VariantScoreMetadata> scores = variantStorageManager.listVariantScores(study, sessionId);\n+        for (VariantScoreMetadata score : scores) {\n+          if (score.getName().equals(scoreName)) {\n+            if (score.getIndexStatus().equals(TaskMetadata.Status.READY)) {\n+              throw new AnalysisException(\"Score name '\" + scoreName + \"' already exists in the database. \"\n+                  + \"The score name must be unique.\");\n             }\n-            throw new AnalysisException(\"Unable to run Gwas analysis with overlapping cohorts. \"\n-                    + (overlapping.size() < 10\n-                        ? \"Samples \" + overlapping + \" are shared between both cohorts.\"\n-                        : \"There are \" + overlapping.size() + \" overlapping samples between the cohorts.\"));\n+          }\n         }\n+      } catch (CatalogException | StorageEngineException e) {\n+        throw new AnalysisException(e);\n+      }\n \n-        // check read permission\n-        try {\n-            List<String> allSamples = new ArrayList<>();\n-            allSamples.addAll(caseCohortSamples);\n-            allSamples.addAll(controlCohortSamples);\n-            variantStorageManager.checkQueryPermissions(\n-                    new Query()\n-                            .append(VariantQueryParam.STUDY.key(), study)\n-                            .append(VariantQueryParam.INCLUDE_SAMPLE.key(), allSamples),\n-                    new QueryOptions(),\n-                    sessionId);\n-        } catch (CatalogException | StorageEngineException e) {\n-            throw new AnalysisException(e);\n-        }\n+      // TODO: Check score index permissions\n \n-        if (StringUtils.isNotEmpty(scoreName)) {\n-            if (StringUtils.isEmpty(caseCohort) || StringUtils.isEmpty(controlCohort)) {\n-                throw new AnalysisException(\"Unable to index gwas result as VariantScore if the cohorts are not defined in catalog\");\n-            }\n+      index = true;\n+    }\n \n-            // check score is not already indexed\n-            try {\n-                List<VariantScoreMetadata> scores = variantStorageManager.listVariantScores(study, sessionId);\n-                for (VariantScoreMetadata score : scores) {\n-                    if (score.getName().equals(scoreName)) {\n-                        if (score.getIndexStatus().equals(TaskMetadata.Status.READY)) {\n-                            throw new AnalysisException(\"Score name '\" + scoreName + \"' already exists in the database. \"\n-                                    + \"The score name must be unique.\");\n-                        }\n-                    }\n-                }\n-            } catch (CatalogException | StorageEngineException e) {\n-                throw new AnalysisException(e);\n-            }\n+    arm.updateResult(analysisResult ->\n+        analysisResult.getAttributes()\n+            .append(\"index\", index)\n+            .append(\"scoreName\", scoreName)\n+            .append(\"caseCohort\", caseCohort)\n+            .append(\"caseCohortSamples\", caseCohortSamples)\n+            .append(\"controlCohort\", controlCohort)\n+            .append(\"controlCohortSamples\", controlCohortSamples)\n+    );\n+  }\n \n-            // TODO: Check score index permissions\n+  @Override\n+  protected void exec() throws AnalysisException {\n+    Gwas gwas = new Gwas()\n+        .setConfiguration(gwasConfiguration)\n+        .setStudy(study)\n+        .setSampleList1(controlCohortSamples)\n+        .setSampleList2(caseCohortSamples);\n+    gwas.setUp(executorParams, outDir, sourceTypes, availableFrameworks);\n+    gwas.execute(arm);\n \n-            index = true;\n-        }\n+    if (index) {\n+      arm.startStep(\"index-score\", 80f);\n \n-        arm.updateResult(analysisResult ->\n-                analysisResult.getAttributes()\n-                        .append(\"index\", index)\n-                        .append(\"scoreName\", scoreName)\n-                        .append(\"caseCohort\", caseCohort)\n-                        .append(\"caseCohortSamples\", caseCohortSamples)\n-                        .append(\"controlCohort\", controlCohort)\n-                        .append(\"controlCohortSamples\", controlCohortSamples)\n-        );\n+      try {\n+        Path file = outDir.resolve(Paths.get(arm.read().getOutputFiles().get(0).getPath()));\n+        VariantScoreFormatDescriptor formatDescriptor = new VariantScoreFormatDescriptor(1, 16, 15);\n+        variantStorageManager\n+            .loadVariantScore(study, file.toUri(), scoreName, caseCohort, controlCohort, formatDescriptor, executorParams, sessionId);\n+      } catch (CatalogException | StorageEngineException e) {\n+        throw new AnalysisException(e);\n+      }\n     }\n+    arm.endStep(100);\n+  }\n \n-    @Override\n-    protected void exec() throws AnalysisException {\n-        Gwas gwas = new Gwas()\n-                .setConfiguration(gwasConfiguration)\n-                .setStudy(study)\n-                .setSampleList1(controlCohortSamples)\n-                .setSampleList2(caseCohortSamples);\n-        gwas.setUp(executorParams, outDir, sourceTypes, availableFrameworks);\n-        gwas.execute(arm);\n-\n-        if (index) {\n-            arm.startStep(\"index-score\", 80f);\n-\n-            try {\n-                Path file = outDir.resolve(Paths.get(arm.read().getOutputFiles().get(0).getPath()));\n-                VariantScoreFormatDescriptor formatDescriptor = new VariantScoreFormatDescriptor(1, 16, 15);\n-                variantStorageManager.loadVariantScore(study, file.toUri(), scoreName, caseCohort, controlCohort, formatDescriptor, executorParams, sessionId);\n-            } catch (CatalogException | StorageEngineException e) {\n-                throw new AnalysisException(e);\n-            }\n-        }\n-        arm.endStep(100);\n+  private List<String> getCohortSamples(String cohort, Query samplesQuery, String cohortType) throws AnalysisException {\n+    if (caseCohortSamplesQuery == null && StringUtils.isEmpty(caseCohort)) {\n+      throw new AnalysisException(\"Missing \" + cohortType + \" cohort!\");\n     }\n-\n-    private List<String> getCohortSamples(String cohort, Query samplesQuery, String cohortType) throws AnalysisException {\n-        if (caseCohortSamplesQuery == null && StringUtils.isEmpty(caseCohort)) {\n-            throw new AnalysisException(\"Missing \" + cohortType + \" cohort!\");\n-        }\n-        if (caseCohortSamplesQuery != null && !caseCohortSamplesQuery.isEmpty() && StringUtils.isNotEmpty(caseCohort)) {\n-            throw new AnalysisException(\"Provide either \" + cohortType + \" cohort name or \" + cohortType + \" cohort samples query,\"\n-                    + \" but not both.\");\n-        }\n-        List<String> samples;\n-        try {\n-            if (StringUtils.isEmpty(cohort)) {\n-                samples = catalogManager.getSampleManager()\n-                        .get(study, samplesQuery, new QueryOptions(QueryOptions.INCLUDE, \"id\"), sessionId)\n-                        .getResult()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .collect(Collectors.toList());\n-            } else {\n-                samples = catalogManager.getCohortManager()\n-                        .get(study, cohort, new QueryOptions(), sessionId)\n-                        .first()\n-                        .getSamples()\n-                        .stream()\n-                        .map(Sample::getId)\n-                        .collect(Collectors.toList());\n-            }\n-        } catch (CatalogException e) {\n-            throw new AnalysisException(e);\n-        }\n-        if (samples.size() <= 1) {\n-            throw new AnalysisException(\"Unable to run GWAS analysis with \" + cohortType + \"cohort of size \" + samples.size());\n-        }\n-        return samples;\n+    if (caseCohortSamplesQuery != null && !caseCohortSamplesQuery.isEmpty() && StringUtils.isNotEmpty(caseCohort)) {\n+      throw new AnalysisException(\"Provide either \" + cohortType + \" cohort name or \" + cohortType + \" cohort samples query,\"\n+          + \" but not both.\");\n+    }\n+    List<String> samples;\n+    try {\n+      if (StringUtils.isEmpty(cohort)) {\n+        samples = catalogManager.getSampleManager()\n+            .get(study, samplesQuery, new QueryOptions(QueryOptions.INCLUDE, \"id\"), sessionId)\n+            .getResult()\n+            .stream()\n+            .map(Sample::getId)\n+            .collect(Collectors.toList());\n+      } else {\n+        samples = catalogManager.getCohortManager()\n+            .get(study, cohort, new QueryOptions(), sessionId)\n+            .first()\n+            .getSamples()\n+            .stream()\n+            .map(Sample::getId)\n+            .collect(Collectors.toList());\n+      }\n+    } catch (CatalogException e) {\n+      throw new AnalysisException(e);\n+    }\n+    if (samples.size() <= 1) {\n+      throw new AnalysisException(\"Unable to run GWAS analysis with \" + cohortType + \"cohort of size \" + samples.size());\n     }\n+    return samples;\n+  }\n \n }\n",
            "diff_size": 276
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "244",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}