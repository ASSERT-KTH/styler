{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3607",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3607/SslPolicy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3607/SslPolicy.java\nindex 824a6f2d054..d87931b4774 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3607/SslPolicy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3607/SslPolicy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.ssl;\n \n import io.netty.channel.Channel;\n@@ -37,157 +38,156 @@ import javax.net.ssl.TrustManagerFactory;\n \n public class SslPolicy\n {\n-    /* cryptographic objects */\n-    private final PrivateKey privateKey;\n-    private final X509Certificate[] keyCertChain;\n-\n-    /* cryptographic parameters */\n-    private final List<String> ciphers;\n-    private final String[] tlsVersions;\n-    private final ClientAuth clientAuth;\n-\n-    private final TrustManagerFactory trustManagerFactory;\n-    private final SslProvider sslProvider;\n-\n-    public SslPolicy( PrivateKey privateKey, X509Certificate[] keyCertChain,\n-            List<String> tlsVersions, List<String> ciphers, ClientAuth clientAuth,\n-            TrustManagerFactory trustManagerFactory, SslProvider sslProvider )\n-    {\n-        this.privateKey = privateKey;\n-        this.keyCertChain = keyCertChain;\n-        this.tlsVersions = tlsVersions == null ? null : tlsVersions.toArray( new String[tlsVersions.size()] );\n-        this.ciphers = ciphers;\n-        this.clientAuth = clientAuth;\n-        this.trustManagerFactory = trustManagerFactory;\n-        this.sslProvider = sslProvider;\n-    }\n-\n-    public SslContext nettyServerContext() throws SSLException\n-    {\n-        return SslContextBuilder.forServer( privateKey, keyCertChain )\n-                .sslProvider( sslProvider )\n-                .clientAuth( forNetty( clientAuth ) )\n-                .protocols( tlsVersions )\n-                .ciphers( ciphers )\n-                .trustManager( trustManagerFactory )\n-                .build();\n-    }\n-\n-    public SslContext nettyClientContext() throws SSLException\n-    {\n-        return SslContextBuilder.forClient()\n-                .sslProvider( sslProvider )\n-                .keyManager( privateKey, keyCertChain )\n-                .protocols( tlsVersions )\n-                .ciphers( ciphers )\n-                .trustManager( trustManagerFactory )\n-                .build();\n-    }\n-\n-    private io.netty.handler.ssl.ClientAuth forNetty( ClientAuth clientAuth )\n-    {\n-        switch ( clientAuth )\n-        {\n-        case NONE:\n-            return io.netty.handler.ssl.ClientAuth.NONE;\n-        case OPTIONAL:\n-            return io.netty.handler.ssl.ClientAuth.OPTIONAL;\n-        case REQUIRE:\n-            return io.netty.handler.ssl.ClientAuth.REQUIRE;\n-        default:\n-            throw new IllegalArgumentException( \"Cannot translate to netty equivalent: \" + clientAuth );\n-        }\n-    }\n-\n-    @SuppressWarnings( \"unused\" )\n-    public SslHandler nettyServerHandler( Channel channel ) throws SSLException\n-    {\n-        return makeNettyHandler( channel, nettyServerContext() );\n-    }\n-\n-    @SuppressWarnings( \"unused\" )\n-    public SslHandler nettyClientHandler( Channel channel ) throws SSLException\n-    {\n-        return makeNettyHandler( channel, nettyClientContext() );\n-    }\n-\n-    private SslHandler makeNettyHandler( Channel channel, SslContext sslContext )\n-    {\n-        SSLEngine sslEngine = sslContext.newEngine( channel.alloc() );\n-        if ( tlsVersions != null )\n-        {\n-            sslEngine.setEnabledProtocols( tlsVersions );\n-        }\n-        return new SslHandler( sslEngine );\n-    }\n-\n-    public PrivateKey privateKey()\n-    {\n-        return privateKey;\n-    }\n-\n-    public X509Certificate[] certificateChain()\n-    {\n-        return keyCertChain;\n-    }\n-\n-    public KeyStore getKeyStore( char[] keyStorePass, char[] privateKeyPass )\n-    {\n-        KeyStore keyStore;\n-        try\n-        {\n-            keyStore = KeyStore.getInstance( KeyStore.getDefaultType() );\n-            keyStore.load( null, keyStorePass );\n-            keyStore.setKeyEntry( \"key\", privateKey, privateKeyPass, keyCertChain );\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n-\n-        return keyStore;\n-    }\n-\n-    public TrustManagerFactory getTrustManagerFactory()\n-    {\n-        return trustManagerFactory;\n-    }\n-\n-    public List<String> getCipherSuites()\n-    {\n-        return ciphers;\n-    }\n-\n-    public String[] getTlsVersions()\n-    {\n-        return tlsVersions;\n-    }\n-\n-    public ClientAuth getClientAuth()\n-    {\n-        return clientAuth;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"SslPolicy{\" +\n-               \"keyCertChain=\" + describeCertChain() +\n-               \", ciphers=\" + ciphers +\n-               \", tlsVersions=\" + Arrays.toString( tlsVersions ) +\n-               \", clientAuth=\" + clientAuth +\n-               '}';\n-    }\n-\n-    private String describeCertificate( X509Certificate certificate )\n-    {\n-        return \"Subject: \" + certificate.getSubjectDN() +\n-               \", Issuer: \" + certificate.getIssuerDN();\n-    }\n-\n-    private String describeCertChain()\n-    {\n-        List<String> certificates = Arrays.stream( keyCertChain ).map( this::describeCertificate ).collect( Collectors.toList() );\n-        return String.join( \", \", certificates );\n-    }\n+  /* cryptographic objects */\n+  private final PrivateKey privateKey;\n+  private final X509Certificate[] keyCertChain;\n+\n+  /* cryptographic parameters */\n+  private final List<String> ciphers;\n+  private final String[] tlsVersions;\n+  private final ClientAuth clientAuth;\n+\n+  private final TrustManagerFactory trustManagerFactory;\n+  private final SslProvider sslProvider;\n+\n+  public SslPolicy(PrivateKey privateKey, X509Certificate[] keyCertChain,\n+                   List<String> tlsVersions, List<String> ciphers, ClientAuth clientAuth,\n+                   TrustManagerFactory trustManagerFactory, SslProvider sslProvider)\n+  {\n+    this.privateKey = privateKey;\n+    this.keyCertChain = keyCertChain;\n+    this.tlsVersions = tlsVersions == null ? null : tlsVersions.toArray(new String[tlsVersions.size()]);\n+    this.ciphers = ciphers;\n+    this.clientAuth = clientAuth;\n+    this.trustManagerFactory = trustManagerFactory;\n+    this.sslProvider = sslProvider;\n+  }\n+\n+  public SslContext nettyServerContext() throws SSLException\n+  {\n+    return SslContextBuilder.forServer(privateKey, keyCertChain)\n+        .sslProvider(sslProvider)\n+        .clientAuth(forNetty(clientAuth))\n+        .protocols(tlsVersions)\n+        .ciphers(ciphers)\n+        .trustManager(trustManagerFactory)\n+        .build();\n+  }\n+\n+  public SslContext nettyClientContext() throws SSLException\n+  {\n+    return SslContextBuilder.forClient()\n+        .sslProvider(sslProvider)\n+        .keyManager(privateKey, keyCertChain)\n+        .protocols(tlsVersions)\n+        .ciphers(ciphers)\n+        .trustManager(trustManagerFactory)\n+        .build();\n+  }\n+\n+  private io.netty.handler.ssl.ClientAuth forNetty(ClientAuth clientAuth)\n+  {\n+    switch (clientAuth)\n+    {\n+      case NONE:\n+        return io.netty.handler.ssl.ClientAuth.NONE;\n+      case OPTIONAL:\n+        return io.netty.handler.ssl.ClientAuth.OPTIONAL;\n+      case REQUIRE:\n+        return io.netty.handler.ssl.ClientAuth.REQUIRE;\n+      default:\n+        throw new IllegalArgumentException(\"Cannot translate to netty equivalent: \" + clientAuth);\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  public SslHandler nettyServerHandler(Channel channel) throws SSLException\n+  {\n+    return makeNettyHandler(channel, nettyServerContext());\n+  }\n+\n+  @SuppressWarnings(\"unused\")\n+  public SslHandler nettyClientHandler(Channel channel) throws SSLException\n+  {\n+    return makeNettyHandler(channel, nettyClientContext());\n+  }\n+\n+  private SslHandler makeNettyHandler(Channel channel, SslContext sslContext)\n+  {\n+    SSLEngine sslEngine = sslContext.newEngine(channel.alloc());\n+    if (tlsVersions != null)\n+    {\n+      sslEngine.setEnabledProtocols(tlsVersions);\n+    }\n+    return new SslHandler(sslEngine);\n+  }\n+\n+  public PrivateKey privateKey()\n+  {\n+    return privateKey;\n+  }\n+\n+  public X509Certificate[] certificateChain()\n+  {\n+    return keyCertChain;\n+  }\n+\n+  public KeyStore getKeyStore(char[] keyStorePass, char[] privateKeyPass)\n+  {\n+    KeyStore keyStore;\n+    try\n+    {\n+      keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+      keyStore.load(null, keyStorePass);\n+      keyStore.setKeyEntry(\"key\", privateKey, privateKeyPass, keyCertChain);\n+    } catch (Exception e)\n+    {\n+      throw new RuntimeException(e);\n+    }\n+\n+    return keyStore;\n+  }\n+\n+  public TrustManagerFactory getTrustManagerFactory()\n+  {\n+    return trustManagerFactory;\n+  }\n+\n+  public List<String> getCipherSuites()\n+  {\n+    return ciphers;\n+  }\n+\n+  public String[] getTlsVersions()\n+  {\n+    return tlsVersions;\n+  }\n+\n+  public ClientAuth getClientAuth()\n+  {\n+    return clientAuth;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"SslPolicy{\" +\n+        \"keyCertChain=\" + describeCertChain() +\n+        \", ciphers=\" + ciphers +\n+        \", tlsVersions=\" + Arrays.toString(tlsVersions) +\n+        \", clientAuth=\" + clientAuth +\n+        '}';\n+  }\n+\n+  private String describeCertificate(X509Certificate certificate)\n+  {\n+    return \"Subject: \" + certificate.getSubjectDN() +\n+        \", Issuer: \" + certificate.getIssuerDN();\n+  }\n+\n+  private String describeCertChain()\n+  {\n+    List<String> certificates = Arrays.stream(keyCertChain).map(this::describeCertificate).collect(Collectors.toList());\n+    return String.join(\", \", certificates);\n+  }\n }\n",
            "diff_size": 154
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3607/SslPolicy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3607/SslPolicy.java\nindex 824a6f2d054..325a9e60a2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3607/SslPolicy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3607/SslPolicy.java\n@@ -49,8 +49,7 @@ public class SslPolicy\n     private final TrustManagerFactory trustManagerFactory;\n     private final SslProvider sslProvider;\n \n-    public SslPolicy( PrivateKey privateKey, X509Certificate[] keyCertChain,\n-            List<String> tlsVersions, List<String> ciphers, ClientAuth clientAuth,\n+    public SslPolicy( PrivateKey privateKey, X509Certificate[] keyCertChain, List<String> tlsVersions, List<String> ciphers, ClientAuth clientAuth,\n             TrustManagerFactory trustManagerFactory, SslProvider sslProvider )\n     {\n         this.privateKey = privateKey;\n@@ -64,10 +63,8 @@ public class SslPolicy\n \n     public SslContext nettyServerContext() throws SSLException\n     {\n-        return SslContextBuilder.forServer( privateKey, keyCertChain )\n-                .sslProvider( sslProvider )\n-                .clientAuth( forNetty( clientAuth ) )\n-                .protocols( tlsVersions )\n+        return SslContextBuilder.forServer( privateKey, keyCertChain ).sslProvider( sslProvider )\n+                .clientAuth( forNetty( clientAuth ) ).protocols( tlsVersions )\n                 .ciphers( ciphers )\n                 .trustManager( trustManagerFactory )\n                 .build();\n@@ -75,8 +72,7 @@ public class SslPolicy\n \n     public SslContext nettyClientContext() throws SSLException\n     {\n-        return SslContextBuilder.forClient()\n-                .sslProvider( sslProvider )\n+        return SslContextBuilder.forClient().sslProvider( sslProvider )\n                 .keyManager( privateKey, keyCertChain )\n                 .protocols( tlsVersions )\n                 .ciphers( ciphers )\n@@ -171,18 +167,12 @@ public class SslPolicy\n     @Override\n     public String toString()\n     {\n-        return \"SslPolicy{\" +\n-               \"keyCertChain=\" + describeCertChain() +\n-               \", ciphers=\" + ciphers +\n-               \", tlsVersions=\" + Arrays.toString( tlsVersions ) +\n-               \", clientAuth=\" + clientAuth +\n-               '}';\n+        return \"SslPolicy{\" + \"keyCertChain=\" + describeCertChain() + \", ciphers=\" + ciphers + \", tlsVersions=\" + Arrays.toString( tlsVersions ) + \", clientAuth=\" + clientAuth + '}';\n     }\n \n     private String describeCertificate( X509Certificate certificate )\n     {\n-        return \"Subject: \" + certificate.getSubjectDN() +\n-               \", Issuer: \" + certificate.getIssuerDN();\n+        return \"Subject: \" + certificate.getSubjectDN() + \", Issuer: \" + certificate.getIssuerDN();\n     }\n \n     private String describeCertChain()\n@@ -190,4 +180,4 @@ public class SslPolicy\n         List<String> certificates = Arrays.stream( keyCertChain ).map( this::describeCertificate ).collect( Collectors.toList() );\n         return String.join( \", \", certificates );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}