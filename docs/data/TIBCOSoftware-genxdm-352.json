{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "352",
    "information": {
        "errors": [
            {
                "line": "21",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\npublic class TaskTimer {\n\tprivate ArrayList<TaskTimer> m_subtasks;\n\tfinal private String m_name;\n\tprivate long m_start;\n\tprivate long m_elapsed;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "22",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/352/TaskTimer.java\nindex b6fe83bd944..9d537c025d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/352/TaskTimer.java\n@@ -18,7 +18,7 @@ package org.genxdm.samples.performance;\n import java.util.ArrayList;\n \n public class TaskTimer {\n-\tprivate ArrayList<TaskTimer> m_subtasks;\n+private ArrayList<TaskTimer> m_subtasks;\n \tfinal private String m_name;\n \tprivate long m_start;\n \tprivate long m_elapsed;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/352/TaskTimer.java\nindex b6fe83bd944..85f468fc1fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/352/TaskTimer.java\n@@ -1,254 +1,233 @@\n /**\n  * Copyright (c) 2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.samples.performance;\n \n import java.util.ArrayList;\n \n public class TaskTimer {\n-\tprivate ArrayList<TaskTimer> m_subtasks;\n-\tfinal private String m_name;\n-\tprivate long m_start;\n-\tprivate long m_elapsed;\n-\tfinal private boolean m_checkMemory;\n-\tprivate ArrayList<String> m_notes;\n-\tprivate boolean m_printTimeUnits;\n-\t\n-\tpublic TaskTimer(String name)\n-\t{\n-\t\tthis(name, false);\n-\t}\n-\tpublic TaskTimer(String name, boolean checkMemory)\n-\t{\n-\t\tm_name = name;\n-\t\tm_elapsed = 0;\n-\t\tm_start = 0;\n-\t\tm_checkMemory = checkMemory;\n-\t}\n-\tprivate static final long MEGABYTE = 1024L * 1024L;\n-\n-\tpublic TaskTimer newChild(String name)\n-\t{\n-\t\tTaskTimer child = new TaskTimer(name, m_checkMemory);\n-\t\taddTask(child);\n-\t\treturn child;\n-\t}\n-\tpublic void setPrintTimeUnits(boolean printTimeUnits)\n-\t{\n-\t\tm_printTimeUnits = printTimeUnits;\n-\t\tif(m_subtasks != null)\n-\t\t{\n-\t\t\tfor(TaskTimer child : m_subtasks)\n-\t\t\t{\n-\t\t\t\tchild.setPrintTimeUnits(printTimeUnits);\n-\t\t\t}\n-\t\t}\n-\t}\n-\tpublic void addNote(String note)\n-\t{\n-\t\tif(m_notes == null)\n-\t\t{\n-\t\t\tm_notes = new ArrayList<String>();\n-\t\t}\n-\t\tm_notes.add(note);\n-\t}\n-\tpublic void startTimer()\n-\t{\n-\t\tm_start = System.nanoTime();\n-\t\tm_elapsed = 0;\n-\t}\n-\tpublic void stopTimer()\n-\t{\n-\t\tif(m_start > 0)\n-\t\t{\n-\t\t\tm_elapsed += System.nanoTime() - m_start;\n-\t\t\tif(m_checkMemory)\n-\t\t\t{\n-\t\t\t\taddNote(\"Before gc: \" + checkMemory(false));\n-\t\t\t\taddNote(\"After  gc: \" + checkMemory(true));\n-\t\t\t}\n-\t\t}\n-\t}\n-\tpublic void pauseTimer()\n-\t{\n-\t\tm_elapsed += System.nanoTime() - m_start;\n-\t}\n-\tpublic void continueTimer()\n-\t{\n-\t\tm_start = System.nanoTime();\n-\t}\n-\tpublic long getElapsedTimeNanos()\n-\t{\n-\t\treturn m_elapsed;\n-\t}\n-\tpublic double getElapsedTimeSeconds()\n-\t{\n-\t\treturn m_elapsed / 1000d / 1000000d;\n-\t}\n-\tpublic long getGroupElapsedTimeNanos()\n-\t{\n-\t\tlong elapsed = m_elapsed;\n-\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t{\n-\t\t\telapsed += subtask.getGroupElapsedTimeNanos();\n-\t\t}\n-\t\treturn elapsed;\n-\t}\n-\tpublic double getGroupElapsedTimeMillis()\n-\t{\n-\t\treturn getGroupElapsedTimeNanos() / 1000000d;\n-\t}\n-\tpublic double getGroupElapsedTimeSeconds()\n-\t{\n-\t\treturn getGroupElapsedTimeNanos() / 1000d / 1000000d;\n-\t}\n-\tpublic void addTask(TaskTimer taskTimer)\n-\t{\n-\t\tgetSubtasks().add(taskTimer);\n-\t}\n-\tpublic ArrayList<TaskTimer> getSubtasks()\n-\t{\n-\t\tif(m_subtasks == null)\n-\t\t{\n-\t\t\tm_subtasks = new ArrayList<TaskTimer>();\n-\t\t}\n-\t\treturn m_subtasks;\n-\t}\n-\tpublic String toString()\n-\t{\n-\t\treturn toPrettyStringMillis(\"\", 0);\n-\t}\n-\tpublic String toPrettyStringNanos(String indent, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeNanos());\n-\t\tif(m_printTimeUnits)\n-\t\t{\n-\t\t\tsb.append(\" ns\");\n-\t\t}\n-\t\tsb.append('\\n');\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n-\t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringNanos(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic String toPrettyStringMillis(String indent, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeMillis());\n-\t\tif(m_printTimeUnits)\n-\t\t{\n-\t\t\tsb.append(\" ms\");\n-\t\t}\n-\t\tsb.append('\\n');\n-\t\t\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n-\t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringMillis(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic String toPrettyStringSeconds(String indent, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeSeconds());\n-\t\tif(m_printTimeUnits)\n-\t\t{\n-\t\t\tsb.append(\" sec\");\n-\t\t}\n-\t\tsb.append('\\n');\n-\t\t\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n-\t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringSeconds(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic String toCsvMillis(int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(toCsvMillis(\"\", includeSubtimes));\n-\t\treturn sb.toString();\n-\t}\n-\tprivate String toCsvMillis(String prepend, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toCsvMillis(prepend + m_name + \", \", includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tsb.append(prepend).append(m_name).append(\",\").append(getGroupElapsedTimeMillis());\n-\t\t\tif(m_printTimeUnits)\n-\t\t\t{\n-\t\t\t\tsb.append(\" ms\");\n-\t\t\t}\n-\t\t\tsb.append('\\n');\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic static long bytesToMegabytes(long bytes) {\n-\t\treturn bytes / MEGABYTE;\n-\t}\n-\tpublic String checkMemory(boolean doGc)\n-\t{\n-\t\t// Get the Java runtime\n-\t\tRuntime runtime = Runtime.getRuntime();\n-\t\tif(doGc)\n-\t\t{\n-\t\t\t// Run the garbage collector\n-\t\t\truntime.gc();\n-\t\t}\n-\t\t// Calculate the used memory\n-\t\tlong memory = runtime.totalMemory() - runtime.freeMemory();\n-\t\tString retVal = \"Used memory: \" + bytesToMegabytes(memory) + \"Mb\";\n-\t\treturn retVal;\n-\t}\n+    private ArrayList<TaskTimer> m_subtasks;\n+\n+    final private String m_name;\n+\n+    private long m_start;\n+\n+    private long m_elapsed;\n+\n+    final private boolean m_checkMemory;\n+\n+    private ArrayList<String> m_notes;\n+\n+    private boolean m_printTimeUnits;\n+\n+    public TaskTimer(String name) {\n+        this(name, false);\n+    }\n+\n+    public TaskTimer(String name, boolean checkMemory) {\n+        m_name = name;\n+        m_elapsed = 0;\n+        m_start = 0;\n+        m_checkMemory = checkMemory;\n+    }\n+\n+    private static final long MEGABYTE = 1024L * 1024L;\n+\n+    public TaskTimer newChild(String name) {\n+        TaskTimer child = new TaskTimer(name, m_checkMemory);\n+        addTask(child);\n+        return child;\n+    }\n+\n+    public void setPrintTimeUnits(boolean printTimeUnits) {\n+        m_printTimeUnits = printTimeUnits;\n+        if (m_subtasks != null) {\n+            for (TaskTimer child : m_subtasks) {\n+                child.setPrintTimeUnits(printTimeUnits);\n+            }\n+        }\n+    }\n+\n+    public void addNote(String note) {\n+        if (m_notes == null) {\n+            m_notes = new ArrayList<String>();\n+        }\n+        m_notes.add(note);\n+    }\n+\n+    public void startTimer() {\n+        m_start = System.nanoTime();\n+        m_elapsed = 0;\n+    }\n+\n+    public void stopTimer() {\n+        if (m_start > 0) {\n+            m_elapsed += System.nanoTime() - m_start;\n+            if (m_checkMemory) {\n+                addNote(\"Before gc: \" + checkMemory(false));\n+                addNote(\"After  gc: \" + checkMemory(true));\n+            }\n+        }\n+    }\n+\n+    public void pauseTimer() {\n+        m_elapsed += System.nanoTime() - m_start;\n+    }\n+\n+    public void continueTimer() {\n+        m_start = System.nanoTime();\n+    }\n+\n+    public long getElapsedTimeNanos() {\n+        return m_elapsed;\n+    }\n+\n+    public double getElapsedTimeSeconds() {\n+        return m_elapsed / 1000d / 1000000d;\n+    }\n+\n+    public long getGroupElapsedTimeNanos() {\n+        long elapsed = m_elapsed;\n+        for (TaskTimer subtask : getSubtasks()) {\n+            elapsed += subtask.getGroupElapsedTimeNanos();\n+        }\n+        return elapsed;\n+    }\n+\n+    public double getGroupElapsedTimeMillis() {\n+        return getGroupElapsedTimeNanos() / 1000000d;\n+    }\n+\n+    public double getGroupElapsedTimeSeconds() {\n+        return getGroupElapsedTimeNanos() / 1000d / 1000000d;\n+    }\n+\n+    public void addTask(TaskTimer taskTimer) {\n+        getSubtasks().add(taskTimer);\n+    }\n+\n+    public ArrayList<TaskTimer> getSubtasks() {\n+        if (m_subtasks == null) {\n+            m_subtasks = new ArrayList<TaskTimer>();\n+        }\n+        return m_subtasks;\n+    }\n+\n+    public String toString() {\n+        return toPrettyStringMillis(\"\", 0);\n+    }\n+\n+    public String toPrettyStringNanos(String indent, int includeSubtimes) {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeNanos());\n+        if (m_printTimeUnits) {\n+            sb.append(\" ns\");\n+        }\n+        sb.append('\\n');\n+        if (m_notes != null) {\n+            for (String note : m_notes) {\n+                sb.append(indent).append('\\t').append(note).append('\\n');\n+            }\n+        }\n+        if (includeSubtimes > 0) {\n+            for (TaskTimer subtask : getSubtasks()) {\n+                sb.append(subtask.toPrettyStringNanos(indent.concat(\"\\t\"), includeSubtimes - 1));\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public String toPrettyStringMillis(String indent, int includeSubtimes) {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeMillis());\n+        if (m_printTimeUnits) {\n+            sb.append(\" ms\");\n+        }\n+        sb.append('\\n');\n+\n+        if (m_notes != null) {\n+            for (String note : m_notes) {\n+                sb.append(indent).append('\\t').append(note).append('\\n');\n+            }\n+        }\n+        if (includeSubtimes > 0) {\n+            for (TaskTimer subtask : getSubtasks()) {\n+                sb.append(subtask.toPrettyStringMillis(indent.concat(\"\\t\"), includeSubtimes - 1));\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public String toPrettyStringSeconds(String indent, int includeSubtimes) {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeSeconds());\n+        if (m_printTimeUnits) {\n+            sb.append(\" sec\");\n+        }\n+        sb.append('\\n');\n+\n+        if (m_notes != null) {\n+            for (String note : m_notes) {\n+                sb.append(indent).append('\\t').append(note).append('\\n');\n+            }\n+        }\n+        if (includeSubtimes > 0) {\n+            for (TaskTimer subtask : getSubtasks()) {\n+                sb.append(subtask.toPrettyStringSeconds(indent.concat(\"\\t\"), includeSubtimes - 1));\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public String toCsvMillis(int includeSubtimes) {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(toCsvMillis(\"\", includeSubtimes));\n+        return sb.toString();\n+    }\n+\n+    private String toCsvMillis(String prepend, int includeSubtimes) {\n+        StringBuffer sb = new StringBuffer();\n+        if (includeSubtimes > 0) {\n+            for (TaskTimer subtask : getSubtasks()) {\n+                sb.append(subtask.toCsvMillis(prepend + m_name + \", \", includeSubtimes - 1));\n+            }\n+        } else {\n+            sb.append(prepend).append(m_name).append(\",\").append(getGroupElapsedTimeMillis());\n+            if (m_printTimeUnits) {\n+                sb.append(\" ms\");\n+            }\n+            sb.append('\\n');\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static long bytesToMegabytes(long bytes) {\n+        return bytes / MEGABYTE;\n+    }\n+\n+    public String checkMemory(boolean doGc) {\n+        // Get the Java runtime\n+        Runtime runtime = Runtime.getRuntime();\n+        if (doGc) {\n+            // Run the garbage collector\n+            runtime.gc();\n+        }\n+        // Calculate the used memory\n+        long memory = runtime.totalMemory() - runtime.freeMemory();\n+        String retVal = \"Used memory: \" + bytesToMegabytes(memory) + \"Mb\";\n+        return retVal;\n+    }\n }\n",
            "diff_size": 238
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "23",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/352/TaskTimer.java\nindex b6fe83bd944..636d14566e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/352/TaskTimer.java\n@@ -18,237 +18,236 @@ package org.genxdm.samples.performance;\n import java.util.ArrayList;\n \n public class TaskTimer {\n-\tprivate ArrayList<TaskTimer> m_subtasks;\n+\n+    private ArrayList<TaskTimer> m_subtasks;\n \tfinal private String m_name;\n \tprivate long m_start;\n \tprivate long m_elapsed;\n \tfinal private boolean m_checkMemory;\n \tprivate ArrayList<String> m_notes;\n \tprivate boolean m_printTimeUnits;\n-\t\n-\tpublic TaskTimer(String name)\n-\t{\n-\t\tthis(name, false);\n-\t}\n+\n+public TaskTimer(String name)\n+{\n+    this(name, false);\n+    }\n \tpublic TaskTimer(String name, boolean checkMemory)\n \t{\n-\t\tm_name = name;\n+    m_name = name;\n \t\tm_elapsed = 0;\n \t\tm_start = 0;\n \t\tm_checkMemory = checkMemory;\n-\t}\n+    }\n \tprivate static final long MEGABYTE = 1024L * 1024L;\n \n \tpublic TaskTimer newChild(String name)\n \t{\n-\t\tTaskTimer child = new TaskTimer(name, m_checkMemory);\n+    TaskTimer child = new TaskTimer(name, m_checkMemory);\n \t\taddTask(child);\n \t\treturn child;\n-\t}\n+    }\n \tpublic void setPrintTimeUnits(boolean printTimeUnits)\n \t{\n-\t\tm_printTimeUnits = printTimeUnits;\n-\t\tif(m_subtasks != null)\n+    m_printTimeUnits = printTimeUnits;\n+\t\tif (m_subtasks != null)\n \t\t{\n-\t\t\tfor(TaskTimer child : m_subtasks)\n+    for (TaskTimer child : m_subtasks)\n \t\t\t{\n-\t\t\t\tchild.setPrintTimeUnits(printTimeUnits);\n-\t\t\t}\n-\t\t}\n-\t}\n+    child.setPrintTimeUnits(printTimeUnits);\n+    }\n+    }\n+    }\n \tpublic void addNote(String note)\n \t{\n-\t\tif(m_notes == null)\n+    if (m_notes == null)\n \t\t{\n-\t\t\tm_notes = new ArrayList<String>();\n-\t\t}\n+    m_notes = new ArrayList<String>();\n+    }\n \t\tm_notes.add(note);\n-\t}\n+    }\n \tpublic void startTimer()\n \t{\n-\t\tm_start = System.nanoTime();\n+    m_start = System.nanoTime();\n \t\tm_elapsed = 0;\n-\t}\n+    }\n \tpublic void stopTimer()\n \t{\n-\t\tif(m_start > 0)\n+    if (m_start > 0)\n \t\t{\n-\t\t\tm_elapsed += System.nanoTime() - m_start;\n+    m_elapsed += System.nanoTime() - m_start;\n \t\t\tif(m_checkMemory)\n \t\t\t{\n-\t\t\t\taddNote(\"Before gc: \" + checkMemory(false));\n+    addNote(\"Before gc: \" + checkMemory(false));\n \t\t\t\taddNote(\"After  gc: \" + checkMemory(true));\n-\t\t\t}\n-\t\t}\n-\t}\n+    }\n+    }\n+    }\n \tpublic void pauseTimer()\n \t{\n-\t\tm_elapsed += System.nanoTime() - m_start;\n-\t}\n+    m_elapsed += System.nanoTime() - m_start;\n+    }\n \tpublic void continueTimer()\n \t{\n-\t\tm_start = System.nanoTime();\n-\t}\n+    m_start = System.nanoTime();\n+    }\n \tpublic long getElapsedTimeNanos()\n \t{\n-\t\treturn m_elapsed;\n-\t}\n+    return m_elapsed;\n+    }\n \tpublic double getElapsedTimeSeconds()\n \t{\n-\t\treturn m_elapsed / 1000d / 1000000d;\n-\t}\n+    return m_elapsed / 1000d / 1000000d;\n+    }\n \tpublic long getGroupElapsedTimeNanos()\n \t{\n-\t\tlong elapsed = m_elapsed;\n-\t\tfor(TaskTimer subtask : getSubtasks())\n+    long elapsed = m_elapsed;\n+\t\tfor (TaskTimer subtask : getSubtasks())\n \t\t{\n-\t\t\telapsed += subtask.getGroupElapsedTimeNanos();\n-\t\t}\n+    elapsed += subtask.getGroupElapsedTimeNanos();\n+    }\n \t\treturn elapsed;\n-\t}\n+    }\n \tpublic double getGroupElapsedTimeMillis()\n \t{\n-\t\treturn getGroupElapsedTimeNanos() / 1000000d;\n-\t}\n+    return getGroupElapsedTimeNanos() / 1000000d;\n+    }\n \tpublic double getGroupElapsedTimeSeconds()\n \t{\n-\t\treturn getGroupElapsedTimeNanos() / 1000d / 1000000d;\n-\t}\n+    return getGroupElapsedTimeNanos() / 1000d / 1000000d;\n+    }\n \tpublic void addTask(TaskTimer taskTimer)\n \t{\n-\t\tgetSubtasks().add(taskTimer);\n-\t}\n+    getSubtasks().add(taskTimer);\n+    }\n \tpublic ArrayList<TaskTimer> getSubtasks()\n \t{\n-\t\tif(m_subtasks == null)\n+    if (m_subtasks == null)\n \t\t{\n-\t\t\tm_subtasks = new ArrayList<TaskTimer>();\n-\t\t}\n+    m_subtasks = new ArrayList<TaskTimer>();\n+    }\n \t\treturn m_subtasks;\n-\t}\n+    }\n \tpublic String toString()\n \t{\n-\t\treturn toPrettyStringMillis(\"\", 0);\n-\t}\n+    return toPrettyStringMillis(\"\", 0);\n+    }\n \tpublic String toPrettyStringNanos(String indent, int includeSubtimes)\n \t{\n-\t\tStringBuffer sb = new StringBuffer();\n+    StringBuffer sb = new StringBuffer();\n \t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeNanos());\n \t\tif(m_printTimeUnits)\n \t\t{\n-\t\t\tsb.append(\" ns\");\n-\t\t}\n+    sb.append(\" ns\");\n+    }\n \t\tsb.append('\\n');\n-\t\tif(m_notes != null)\n+\t\tif (m_notes != null)\n \t\t{\n-\t\t\tfor(String note : m_notes)\n+    for (String note : m_notes)\n \t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n+    sb.append(indent).append('\\t').append(note).append('\\n');\n+    }\n+    }\n+\t\tif (includeSubtimes > 0)\n \t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n+    for (TaskTimer subtask : getSubtasks())\n \t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringNanos(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n+    sb.append(subtask.toPrettyStringNanos(indent.concat(\"\\t\"), includeSubtimes-1));\n+    }\n+    }\n \t\treturn sb.toString();\n-\t}\n+    }\n \tpublic String toPrettyStringMillis(String indent, int includeSubtimes)\n \t{\n-\t\tStringBuffer sb = new StringBuffer();\n+    StringBuffer sb = new StringBuffer();\n \t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeMillis());\n \t\tif(m_printTimeUnits)\n \t\t{\n-\t\t\tsb.append(\" ms\");\n-\t\t}\n+    sb.append(\" ms\");\n+    }\n \t\tsb.append('\\n');\n-\t\t\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n+if (m_notes != null)\n+{\n+    for (String note : m_notes)\n \t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n+    sb.append(indent).append('\\t').append(note).append('\\n');\n+    }\n+    }\n+\t\tif (includeSubtimes > 0)\n \t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n+    for (TaskTimer subtask : getSubtasks())\n \t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringMillis(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n+    sb.append(subtask.toPrettyStringMillis(indent.concat(\"\\t\"), includeSubtimes-1));\n+    }\n+    }\n \t\treturn sb.toString();\n-\t}\n+    }\n \tpublic String toPrettyStringSeconds(String indent, int includeSubtimes)\n \t{\n-\t\tStringBuffer sb = new StringBuffer();\n+    StringBuffer sb = new StringBuffer();\n \t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeSeconds());\n \t\tif(m_printTimeUnits)\n \t\t{\n-\t\t\tsb.append(\" sec\");\n-\t\t}\n+    sb.append(\" sec\");\n+    }\n \t\tsb.append('\\n');\n-\t\t\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n+if (m_notes != null)\n+{\n+    for (String note : m_notes)\n \t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n+    sb.append(indent).append('\\t').append(note).append('\\n');\n+    }\n+    }\n+\t\tif (includeSubtimes > 0)\n \t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n+    for (TaskTimer subtask : getSubtasks())\n \t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringSeconds(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n+    sb.append(subtask.toPrettyStringSeconds(indent.concat(\"\\t\"), includeSubtimes-1));\n+    }\n+    }\n \t\treturn sb.toString();\n-\t}\n+    }\n \tpublic String toCsvMillis(int includeSubtimes)\n \t{\n-\t\tStringBuffer sb = new StringBuffer();\n+    StringBuffer sb = new StringBuffer();\n \t\tsb.append(toCsvMillis(\"\", includeSubtimes));\n \t\treturn sb.toString();\n-\t}\n+    }\n \tprivate String toCsvMillis(String prepend, int includeSubtimes)\n \t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tif(includeSubtimes > 0)\n+    StringBuffer sb = new StringBuffer();\n+\t\tif (includeSubtimes > 0)\n \t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n+    for (TaskTimer subtask : getSubtasks())\n \t\t\t{\n-\t\t\t\tsb.append(subtask.toCsvMillis(prepend + m_name + \", \", includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n+    sb.append(subtask.toCsvMillis(prepend + m_name + \", \", includeSubtimes-1));\n+    }\n+    }\n \t\telse\n \t\t{\n-\t\t\tsb.append(prepend).append(m_name).append(\",\").append(getGroupElapsedTimeMillis());\n+    sb.append(prepend).append(m_name).append(\",\").append(getGroupElapsedTimeMillis());\n \t\t\tif(m_printTimeUnits)\n \t\t\t{\n-\t\t\t\tsb.append(\" ms\");\n-\t\t\t}\n+    sb.append(\" ms\");\n+    }\n \t\t\tsb.append('\\n');\n-\t\t}\n+    }\n \t\treturn sb.toString();\n-\t}\n+    }\n \tpublic static long bytesToMegabytes(long bytes) {\n-\t\treturn bytes / MEGABYTE;\n-\t}\n+    return bytes / MEGABYTE;\n+    }\n \tpublic String checkMemory(boolean doGc)\n \t{\n-\t\t// Get the Java runtime\n+    // Get the Java runtime\n \t\tRuntime runtime = Runtime.getRuntime();\n \t\tif(doGc)\n \t\t{\n-\t\t\t// Run the garbage collector\n+    // Run the garbage collector\n \t\t\truntime.gc();\n-\t\t}\n+    }\n \t\t// Calculate the used memory\n \t\tlong memory = runtime.totalMemory() - runtime.freeMemory();\n \t\tString retVal = \"Used memory: \" + bytesToMegabytes(memory) + \"Mb\";\n \t\treturn retVal;\n-\t}\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 121
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/352/TaskTimer.java\nindex b6fe83bd944..1286be8c681 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/352/TaskTimer.java\n@@ -17,238 +17,263 @@ package org.genxdm.samples.performance;\n \n import java.util.ArrayList;\n \n-public class TaskTimer {\n-\tprivate ArrayList<TaskTimer> m_subtasks;\n-\tfinal private String m_name;\n-\tprivate long m_start;\n-\tprivate long m_elapsed;\n-\tfinal private boolean m_checkMemory;\n-\tprivate ArrayList<String> m_notes;\n-\tprivate boolean m_printTimeUnits;\n-\t\n-\tpublic TaskTimer(String name)\n-\t{\n-\t\tthis(name, false);\n-\t}\n-\tpublic TaskTimer(String name, boolean checkMemory)\n-\t{\n-\t\tm_name = name;\n-\t\tm_elapsed = 0;\n-\t\tm_start = 0;\n-\t\tm_checkMemory = checkMemory;\n-\t}\n-\tprivate static final long MEGABYTE = 1024L * 1024L;\n-\n-\tpublic TaskTimer newChild(String name)\n-\t{\n-\t\tTaskTimer child = new TaskTimer(name, m_checkMemory);\n-\t\taddTask(child);\n-\t\treturn child;\n-\t}\n-\tpublic void setPrintTimeUnits(boolean printTimeUnits)\n-\t{\n-\t\tm_printTimeUnits = printTimeUnits;\n-\t\tif(m_subtasks != null)\n-\t\t{\n-\t\t\tfor(TaskTimer child : m_subtasks)\n-\t\t\t{\n-\t\t\t\tchild.setPrintTimeUnits(printTimeUnits);\n-\t\t\t}\n-\t\t}\n-\t}\n-\tpublic void addNote(String note)\n-\t{\n-\t\tif(m_notes == null)\n-\t\t{\n-\t\t\tm_notes = new ArrayList<String>();\n-\t\t}\n-\t\tm_notes.add(note);\n-\t}\n-\tpublic void startTimer()\n-\t{\n-\t\tm_start = System.nanoTime();\n-\t\tm_elapsed = 0;\n-\t}\n-\tpublic void stopTimer()\n-\t{\n-\t\tif(m_start > 0)\n-\t\t{\n-\t\t\tm_elapsed += System.nanoTime() - m_start;\n-\t\t\tif(m_checkMemory)\n-\t\t\t{\n-\t\t\t\taddNote(\"Before gc: \" + checkMemory(false));\n-\t\t\t\taddNote(\"After  gc: \" + checkMemory(true));\n-\t\t\t}\n-\t\t}\n-\t}\n-\tpublic void pauseTimer()\n-\t{\n-\t\tm_elapsed += System.nanoTime() - m_start;\n-\t}\n-\tpublic void continueTimer()\n-\t{\n-\t\tm_start = System.nanoTime();\n-\t}\n-\tpublic long getElapsedTimeNanos()\n-\t{\n-\t\treturn m_elapsed;\n-\t}\n-\tpublic double getElapsedTimeSeconds()\n-\t{\n-\t\treturn m_elapsed / 1000d / 1000000d;\n-\t}\n-\tpublic long getGroupElapsedTimeNanos()\n-\t{\n-\t\tlong elapsed = m_elapsed;\n-\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t{\n-\t\t\telapsed += subtask.getGroupElapsedTimeNanos();\n-\t\t}\n-\t\treturn elapsed;\n-\t}\n-\tpublic double getGroupElapsedTimeMillis()\n-\t{\n-\t\treturn getGroupElapsedTimeNanos() / 1000000d;\n-\t}\n-\tpublic double getGroupElapsedTimeSeconds()\n-\t{\n-\t\treturn getGroupElapsedTimeNanos() / 1000d / 1000000d;\n-\t}\n-\tpublic void addTask(TaskTimer taskTimer)\n-\t{\n-\t\tgetSubtasks().add(taskTimer);\n-\t}\n-\tpublic ArrayList<TaskTimer> getSubtasks()\n-\t{\n-\t\tif(m_subtasks == null)\n-\t\t{\n-\t\t\tm_subtasks = new ArrayList<TaskTimer>();\n-\t\t}\n-\t\treturn m_subtasks;\n-\t}\n-\tpublic String toString()\n-\t{\n-\t\treturn toPrettyStringMillis(\"\", 0);\n-\t}\n-\tpublic String toPrettyStringNanos(String indent, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeNanos());\n-\t\tif(m_printTimeUnits)\n-\t\t{\n-\t\t\tsb.append(\" ns\");\n-\t\t}\n-\t\tsb.append('\\n');\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n-\t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringNanos(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic String toPrettyStringMillis(String indent, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeMillis());\n-\t\tif(m_printTimeUnits)\n-\t\t{\n-\t\t\tsb.append(\" ms\");\n-\t\t}\n-\t\tsb.append('\\n');\n-\t\t\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n-\t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringMillis(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic String toPrettyStringSeconds(String indent, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeSeconds());\n-\t\tif(m_printTimeUnits)\n-\t\t{\n-\t\t\tsb.append(\" sec\");\n-\t\t}\n-\t\tsb.append('\\n');\n-\t\t\n-\t\tif(m_notes != null)\n-\t\t{\n-\t\t\tfor(String note : m_notes)\n-\t\t\t{\n-\t\t\t\tsb.append(indent).append('\\t').append(note).append('\\n');\n-\t\t\t}\n-\t\t}\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toPrettyStringSeconds(indent.concat(\"\\t\"), includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic String toCsvMillis(int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tsb.append(toCsvMillis(\"\", includeSubtimes));\n-\t\treturn sb.toString();\n-\t}\n-\tprivate String toCsvMillis(String prepend, int includeSubtimes)\n-\t{\n-\t\tStringBuffer sb = new StringBuffer();\n-\t\tif(includeSubtimes > 0)\n-\t\t{\n-\t\t\tfor(TaskTimer subtask : getSubtasks())\n-\t\t\t{\n-\t\t\t\tsb.append(subtask.toCsvMillis(prepend + m_name + \", \", includeSubtimes-1));\n-\t\t\t}\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tsb.append(prepend).append(m_name).append(\",\").append(getGroupElapsedTimeMillis());\n-\t\t\tif(m_printTimeUnits)\n-\t\t\t{\n-\t\t\t\tsb.append(\" ms\");\n-\t\t\t}\n-\t\t\tsb.append('\\n');\n-\t\t}\n-\t\treturn sb.toString();\n-\t}\n-\tpublic static long bytesToMegabytes(long bytes) {\n-\t\treturn bytes / MEGABYTE;\n-\t}\n-\tpublic String checkMemory(boolean doGc)\n-\t{\n-\t\t// Get the Java runtime\n-\t\tRuntime runtime = Runtime.getRuntime();\n-\t\tif(doGc)\n-\t\t{\n-\t\t\t// Run the garbage collector\n-\t\t\truntime.gc();\n-\t\t}\n-\t\t// Calculate the used memory\n-\t\tlong memory = runtime.totalMemory() - runtime.freeMemory();\n-\t\tString retVal = \"Used memory: \" + bytesToMegabytes(memory) + \"Mb\";\n-\t\treturn retVal;\n-\t}\n-}\n+public class TaskTimer\n+{\n+    private ArrayList<TaskTimer> m_subtasks;\n+\n+    final private String m_name;\n+    private long m_start;\n+    private long m_elapsed;\n+\n+    final private boolean m_checkMemory;\n+    private ArrayList<String> m_notes;\n+    private boolean m_printTimeUnits;\n+\n+    public TaskTimer(String name)\n+    {\n+        this(name, false);\n+    }\n+\n+    public TaskTimer(String name, boolean checkMemory)\n+    {\n+        m_name = name;\n+        m_elapsed = 0;\n+        m_start = 0;\n+        m_checkMemory = checkMemory;\n+    }\n+\n+    private static final long MEGABYTE = 1024L * 1024L;\n+    public TaskTimer newChild(String name)\n+    {\n+        TaskTimer child = new TaskTimer(name, m_checkMemory);\n+        addTask(child);\n+        return child;\n+    }\n+\n+    public void setPrintTimeUnits(boolean printTimeUnits)\n+    {\n+        m_printTimeUnits = printTimeUnits;\n+        if (m_subtasks != null)\n+        {\n+            for (TaskTimer child : m_subtasks)\n+            {\n+                child.setPrintTimeUnits(printTimeUnits);\n+            }\n+        }\n+    }\n+\n+    public void addNote(String note)\n+    {\n+        if (m_notes == null)\n+        {\n+            m_notes = new ArrayList<String>();\n+        }\n+        m_notes.add(note);\n+    }\n+\n+    public void startTimer()\n+    {\n+        m_start = System.nanoTime();\n+        m_elapsed = 0;\n+    }\n+\n+    public void stopTimer()\n+    {\n+        if (m_start > 0)\n+        {\n+            m_elapsed += System.nanoTime() - m_start;\n+            if (m_checkMemory)\n+            {\n+                addNote(\"Before gc: \" + checkMemory(false));\n+                addNote(\"After  gc: \" + checkMemory(true));\n+            }\n+        }\n+    }\n+\n+    public void pauseTimer()\n+    {\n+        m_elapsed += System.nanoTime() - m_start;\n+    }\n+\n+    public void continueTimer()\n+    {\n+        m_start = System.nanoTime();\n+    }\n+\n+    public long getElapsedTimeNanos()\n+    {\n+        return m_elapsed;\n+    }\n+\n+    public double getElapsedTimeSeconds()\n+    {\n+        return m_elapsed / 1000d / 1000000d;\n+    }\n+\n+    public long getGroupElapsedTimeNanos()\n+    {\n+        long elapsed = m_elapsed;\n+        for (TaskTimer subtask : getSubtasks())\n+        {\n+            elapsed += subtask.getGroupElapsedTimeNanos();\n+        }\n+        return elapsed;\n+    }\n+\n+    public double getGroupElapsedTimeMillis()\n+    {\n+        return getGroupElapsedTimeNanos() / 1000000d;\n+    }\n+\n+    public double getGroupElapsedTimeSeconds()\n+    {\n+        return getGroupElapsedTimeNanos() / 1000d / 1000000d;\n+    }\n+\n+    public void addTask(TaskTimer taskTimer)\n+    {\n+        getSubtasks().add(taskTimer);\n+    }\n+\n+    public ArrayList<TaskTimer> getSubtasks()\n+    {\n+        if (m_subtasks == null)\n+        {\n+            m_subtasks = new ArrayList<TaskTimer>();\n+        }\n+        return m_subtasks;\n+    }\n+\n+    public String toString()\n+    {\n+        return toPrettyStringMillis(\"\", 0);\n+    }\n+\n+    public String toPrettyStringNanos(String indent, int includeSubtimes)\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeNanos());\n+        if (m_printTimeUnits)\n+        {\n+            sb.append(\" ns\");\n+        }\n+        sb.append('\\n');\n+        if (m_notes != null)\n+        {\n+            for (String note : m_notes)\n+            {\n+                sb.append(indent).append('\\t').append(note).append('\\n');\n+            }\n+        }\n+        if (includeSubtimes > 0)\n+        {\n+            for (TaskTimer subtask : getSubtasks())\n+            {\n+                sb.append(subtask.toPrettyStringNanos(indent.concat(\"\\t\"), includeSubtimes - 1));\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public String toPrettyStringMillis(String indent, int includeSubtimes)\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeMillis());\n+        if (m_printTimeUnits)\n+        {\n+            sb.append(\" ms\");\n+        }\n+        sb.append('\\n');\n+        if (m_notes != null)\n+        {\n+            for (String note : m_notes)\n+            {\n+                sb.append(indent).append('\\t').append(note).append('\\n');\n+            }\n+        }\n+        if (includeSubtimes > 0)\n+        {\n+            for (TaskTimer subtask : getSubtasks())\n+            {\n+                sb.append(subtask.toPrettyStringMillis(indent.concat(\"\\t\"), includeSubtimes - 1));\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public String toPrettyStringSeconds(String indent, int includeSubtimes)\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(indent).append(m_name).append(\": \").append(getGroupElapsedTimeSeconds());\n+        if (m_printTimeUnits)\n+        {\n+            sb.append(\" sec\");\n+        }\n+        sb.append('\\n');\n+        if (m_notes != null)\n+        {\n+            for (String note : m_notes)\n+            {\n+                sb.append(indent).append('\\t').append(note).append('\\n');\n+            }\n+        }\n+        if (includeSubtimes > 0)\n+        {\n+            for (TaskTimer subtask : getSubtasks())\n+            {\n+                sb.append(subtask.toPrettyStringSeconds(indent.concat(\"\\t\"), includeSubtimes - 1));\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public String toCsvMillis(int includeSubtimes)\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        sb.append(toCsvMillis(\"\", includeSubtimes));\n+        return sb.toString();\n+    }\n+\n+    private String toCsvMillis(String prepend, int includeSubtimes)\n+    {\n+        StringBuffer sb = new StringBuffer();\n+        if (includeSubtimes > 0)\n+        {\n+            for (TaskTimer subtask : getSubtasks())\n+            {\n+                sb.append(subtask.toCsvMillis(prepend + m_name + \", \", includeSubtimes - 1));\n+            }\n+        }\n+        else\n+        {\n+            sb.append(prepend).append(m_name).append(\",\").append(getGroupElapsedTimeMillis());\n+            if (m_printTimeUnits)\n+            {\n+                sb.append(\" ms\");\n+            }\n+            sb.append('\\n');\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static long bytesToMegabytes(long bytes)\n+    {\n+        return bytes / MEGABYTE;\n+    }\n+\n+    public String checkMemory(boolean doGc)\n+    {\n+        // Get the Java runtime\n+        Runtime runtime = Runtime.getRuntime();\n+        if (doGc)\n+        {\n+            // Run the garbage collector\n+            runtime.gc();\n+        }\n+        // Calculate the used memory\n+\n+        long memory = runtime.totalMemory() - runtime.freeMemory();\n+        String retVal = \"Used memory: \" + bytesToMegabytes(memory) + \"Mb\";\n+        return retVal;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 260
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "22",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/352/TaskTimer.java\nindex b6fe83bd944..9d537c025d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/352/TaskTimer.java\n@@ -18,7 +18,7 @@ package org.genxdm.samples.performance;\n import java.util.ArrayList;\n \n public class TaskTimer {\n-\tprivate ArrayList<TaskTimer> m_subtasks;\n+private ArrayList<TaskTimer> m_subtasks;\n \tfinal private String m_name;\n \tprivate long m_start;\n \tprivate long m_elapsed;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "22",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/352/TaskTimer.java\nindex b6fe83bd944..e2e3f4a0c03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/352/TaskTimer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/352/TaskTimer.java\n@@ -18,7 +18,7 @@ package org.genxdm.samples.performance;\n import java.util.ArrayList;\n \n public class TaskTimer {\n-\tprivate ArrayList<TaskTimer> m_subtasks;\n+    private ArrayList<TaskTimer> m_subtasks;\n \tfinal private String m_name;\n \tprivate long m_start;\n \tprivate long m_elapsed;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}