{
    "project_name": "wso2-attic-commons",
    "error_id": "260",
    "information": {
        "errors": [
            {
                "line": "47",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        // this worker works until this sequnce ends\n        while ((rmsSequence.getState() != RMSSequence.STATE_TERMINATE) &&\n                ((System.currentTimeMillis() - this.rmsSequence.getLastAccessedTime()) < this.rmsSequence.getTimeoutTime())){\n            try {\n                rmsSequence.doActions();\n            } catch (AxisFault e) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/260/RMSSequenceWorker.java\nindex d42828a26db..b23b6654c23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/260/RMSSequenceWorker.java\n@@ -44,8 +44,9 @@ public class RMSSequenceWorker implements Runnable {\n     public void run() {\n         // this worker works until this sequnce ends\n         while ((rmsSequence.getState() != RMSSequence.STATE_TERMINATE) &&\n-                ((System.currentTimeMillis() - this.rmsSequence.getLastAccessedTime()) < this.rmsSequence.getTimeoutTime())){\n-            try {\n+                ((System.currentTimeMillis() - this.rmsSequence.getLastAccessedTime()) <\n+                this.rmsSequence.getTimeoutTime())){\n+             try {\n                 rmsSequence.doActions();\n             } catch (AxisFault e) {\n                 log.error(\"Fault occured when doing actions for the RMS Sequence \"\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/260/RMSSequenceWorker.java\nindex d42828a26db..5836dec3eb3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/260/RMSSequenceWorker.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.wso2.mercury.workers;\n \n import org.wso2.mercury.state.RMSSequence;\n@@ -28,90 +29,90 @@ import org.apache.commons.logging.LogFactory;\n  */\n public class RMSSequenceWorker implements Runnable {\n \n-    private static Log log = LogFactory.getLog(RMSSequenceWorker.class);\n+  private static Log log = LogFactory.getLog(RMSSequenceWorker.class);\n \n-    private long sequenceWorkerSleepTime;\n+  private long sequenceWorkerSleepTime;\n \n-    private RMSSequence rmsSequence;\n+  private RMSSequence rmsSequence;\n \n-    public RMSSequenceWorker(RMSSequence rmsSequence) {\n-        this.rmsSequence = rmsSequence;\n-        this.rmsSequence.setRMSSequenceWorker(this);\n-    }\n+  public RMSSequenceWorker(RMSSequence rmsSequence) {\n+    this.rmsSequence = rmsSequence;\n+    this.rmsSequence.setRMSSequenceWorker(this);\n+  }\n \n-    private Object lock = new Object();\n-\n-    public void run() {\n-        // this worker works until this sequnce ends\n-        while ((rmsSequence.getState() != RMSSequence.STATE_TERMINATE) &&\n-                ((System.currentTimeMillis() - this.rmsSequence.getLastAccessedTime()) < this.rmsSequence.getTimeoutTime())){\n-            try {\n-                rmsSequence.doActions();\n-            } catch (AxisFault e) {\n-                log.error(\"Fault occured when doing actions for the RMS Sequence \"\n-                        + this.rmsSequence.getSequenceID(), e);\n-            } catch (RMMessageBuildingException e) {\n-                log.error(\"Could not build the message \", e);\n-            }\n-\n-            try {\n-                log.debug(\"Wait\");\n-                // wait on a lock to make it possible to notify in any time\n-                synchronized (lock) {\n-                    lock.wait(sequenceWorkerSleepTime);\n-                }\n-                log.debug(\"Wakeup...\");\n-            } catch (InterruptedException e) {\n-                log.error(\"Interupted :\" + e );\n-            }\n-        }\n+  private Object lock = new Object();\n \n-        try {\n-            if (rmsSequence.getState() == RMSSequence.STATE_TERMINATE){\n-                // this is a properly terminated sequence\n-                // so send the terminate message and finish the sequence\n-                // here we donot bother to send the termainate message reliably.\n-                // if the server does not receive it, it will time out\n-                rmsSequence.sendTerminateSequenceMessage(null);\n-            } else {\n-                // this is a time out sequence\n-                // in this case we don't have to send a terminate message for annonymous\n-                // sequences\n-                if (rmsSequence.isAnnonymous()){\n-                    rmsSequence.rmsSequenceExpired();\n-                } else {\n-                    // TODO: check this\n-                    rmsSequence.sendTerminateSequenceMessage(null);\n-                }\n-            }\n-\n-        } catch (AxisFault e) {\n-            log.error(\"Fault occured when doing actions for the RMS Sequence \"\n-                        + this.rmsSequence.getSequenceID(), e);\n-        } catch (RMMessageBuildingException e) {\n-             log.error(\"Could not build the message \", e);\n+  public void run() {\n+    // this worker works until this sequnce ends\n+    while ((rmsSequence.getState() != RMSSequence.STATE_TERMINATE) &&\n+      ((System.currentTimeMillis() - this.rmsSequence.getLastAccessedTime()) < this.rmsSequence.getTimeoutTime())) {\n+      try {\n+        rmsSequence.doActions();\n+      } catch (AxisFault e) {\n+        log.error(\"Fault occured when doing actions for the RMS Sequence \"\n+          + this.rmsSequence.getSequenceID(), e);\n+      } catch (RMMessageBuildingException e) {\n+        log.error(\"Could not build the message \", e);\n+      }\n+\n+      try {\n+        log.debug(\"Wait\");\n+        // wait on a lock to make it possible to notify in any time\n+        synchronized (lock) {\n+          lock.wait(sequenceWorkerSleepTime);\n         }\n-        log.info(\"Stopping the RMS thread for RMS sequence \" + this.rmsSequence.getSequenceID());\n-        \n+        log.debug(\"Wakeup...\");\n+      } catch (InterruptedException e) {\n+        log.error(\"Interupted :\" + e);\n+      }\n     }\n-    \n-    public void wakeUp() {\n-        try {\n-            log.debug(\"WakeUp\");\n-            synchronized (lock) {\n-                lock.notify();\n-            }\n-            log.debug(\"Thread notified\");\n-        } catch(Exception e) {\n-            log.error(\"Failed to notify : \" +e, e);\n+\n+    try {\n+      if (rmsSequence.getState() == RMSSequence.STATE_TERMINATE) {\n+        // this is a properly terminated sequence\n+        // so send the terminate message and finish the sequence\n+        // here we donot bother to send the termainate message reliably.\n+        // if the server does not receive it, it will time out\n+        rmsSequence.sendTerminateSequenceMessage(null);\n+      } else {\n+        // this is a time out sequence\n+        // in this case we don't have to send a terminate message for annonymous\n+        // sequences\n+        if (rmsSequence.isAnnonymous()) {\n+          rmsSequence.rmsSequenceExpired();\n+        } else {\n+          // TODO: check this\n+          rmsSequence.sendTerminateSequenceMessage(null);\n         }\n-    }\n+      }\n \n-    public long getSequenceWorkerSleepTime() {\n-        return sequenceWorkerSleepTime;\n+    } catch (AxisFault e) {\n+      log.error(\"Fault occured when doing actions for the RMS Sequence \"\n+        + this.rmsSequence.getSequenceID(), e);\n+    } catch (RMMessageBuildingException e) {\n+      log.error(\"Could not build the message \", e);\n     }\n+    log.info(\"Stopping the RMS thread for RMS sequence \" + this.rmsSequence.getSequenceID());\n+\n+  }\n \n-    public void setSequenceWorkerSleepTime(long sequenceWorkerSleepTime) {\n-        this.sequenceWorkerSleepTime = sequenceWorkerSleepTime;\n+  public void wakeUp() {\n+    try {\n+      log.debug(\"WakeUp\");\n+      synchronized (lock) {\n+        lock.notify();\n+      }\n+      log.debug(\"Thread notified\");\n+    } catch (Exception e) {\n+      log.error(\"Failed to notify : \" + e, e);\n     }\n+  }\n+\n+  public long getSequenceWorkerSleepTime() {\n+    return sequenceWorkerSleepTime;\n+  }\n+\n+  public void setSequenceWorkerSleepTime(long sequenceWorkerSleepTime) {\n+    this.sequenceWorkerSleepTime = sequenceWorkerSleepTime;\n+  }\n }\n",
            "diff_size": 106
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/260/RMSSequenceWorker.java\nindex d42828a26db..98807f4ea9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/260/RMSSequenceWorker.java\n@@ -86,8 +86,7 @@ public class RMSSequenceWorker implements Runnable {\n             }\n \n         } catch (AxisFault e) {\n-            log.error(\"Fault occured when doing actions for the RMS Sequence \"\n-                        + this.rmsSequence.getSequenceID(), e);\n+            log.error(\"Fault occured when doing actions for the RMS Sequence \" + this.rmsSequence.getSequenceID(), e);\n         } catch (RMMessageBuildingException e) {\n              log.error(\"Could not build the message \", e);\n         }\n@@ -114,4 +113,4 @@ public class RMSSequenceWorker implements Runnable {\n     public void setSequenceWorkerSleepTime(long sequenceWorkerSleepTime) {\n         this.sequenceWorkerSleepTime = sequenceWorkerSleepTime;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/260/RMSSequenceWorker.java\nindex d42828a26db..b23b6654c23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/260/RMSSequenceWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/260/RMSSequenceWorker.java\n@@ -44,8 +44,9 @@ public class RMSSequenceWorker implements Runnable {\n     public void run() {\n         // this worker works until this sequnce ends\n         while ((rmsSequence.getState() != RMSSequence.STATE_TERMINATE) &&\n-                ((System.currentTimeMillis() - this.rmsSequence.getLastAccessedTime()) < this.rmsSequence.getTimeoutTime())){\n-            try {\n+                ((System.currentTimeMillis() - this.rmsSequence.getLastAccessedTime()) <\n+                this.rmsSequence.getTimeoutTime())){\n+             try {\n                 rmsSequence.doActions();\n             } catch (AxisFault e) {\n                 log.error(\"Fault occured when doing actions for the RMS Sequence \"\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}