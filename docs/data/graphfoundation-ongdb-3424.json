{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3424",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "197",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "95",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "461",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "85",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "85",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "87",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "606",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "620",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "647",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "662",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "675",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "678",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "690",
                    "column": "151",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "91",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "706",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "709",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "731",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "739",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "745",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "751",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "780",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "780",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "802",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "814",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "814",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "821",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "828",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "837",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "844",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "844",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "849",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "857",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "860",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "860",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "868",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "868",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "873",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "878",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "878",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "915",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "915",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3424/HighlyAvailableEditionModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3424/HighlyAvailableEditionModule.java\nindex 728a199080c..4cc3dae4b00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3424/HighlyAvailableEditionModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3424/HighlyAvailableEditionModule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.factory;\n \n import org.jboss.netty.logging.InternalLoggerFactory;\n@@ -188,735 +189,731 @@ import static org.neo4j.kernel.impl.transaction.log.TransactionMetadataCache.Tra\n  * that are specific to the Enterprise edition.\n  */\n public class HighlyAvailableEditionModule\n-        extends EditionModule\n+    extends EditionModule\n {\n-    private HighAvailabilityMemberStateMachine memberStateMachine;\n-    public ClusterMembers members;\n-\n-    public HighlyAvailableEditionModule( final PlatformModule platformModule )\n-    {\n-        ioLimiter = new ConfigurableIOLimiter( platformModule.config );\n-\n-        final LifeSupport life = platformModule.life;\n-        life.add( platformModule.dataSourceManager );\n-\n-        final LifeSupport paxosLife = new LifeSupport();\n-        final LifeSupport clusteringLife = new LifeSupport();\n-\n-        final FileSystemAbstraction fs = platformModule.fileSystem;\n-        final File storeDir = platformModule.storeDir;\n-        final Config config = platformModule.config;\n-        final Dependencies dependencies = platformModule.dependencies;\n-        final LogService logging = platformModule.logging;\n-        final Monitors monitors = platformModule.monitors;\n-\n-        this.accessCapability = config.get( GraphDatabaseSettings.read_only ) ? new ReadOnly() : new CanWrite();\n-\n-        idTypeConfigurationProvider = new EnterpriseIdTypeConfigurationProvider( config );\n-\n-        watcherService = createFileSystemWatcherService( platformModule.fileSystem, storeDir, logging,\n-                platformModule.jobScheduler, config, fileWatcherFileNameFilter() );\n-        dependencies.satisfyDependencies( watcherService );\n-        life.add( watcherService );\n-\n-        // Set Netty logger\n-        InternalLoggerFactory.setDefaultFactory( new NettyLoggerFactory( logging.getInternalLogProvider() ) );\n-\n-        life.add( new BranchedDataMigrator( platformModule.storeDir, platformModule.pageCache ) );\n-        DelegateInvocationHandler<Master> masterDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( Master.class );\n-        Master master = (Master) newProxyInstance( Master.class.getClassLoader(), new Class[]{Master.class},\n-                masterDelegateInvocationHandler );\n-        InstanceId serverId = config.get( ClusterSettings.server_id );\n-\n-        RequestContextFactory requestContextFactory = dependencies.satisfyDependency( new RequestContextFactory(\n-                serverId.toIntegerIndex(),\n-                dependencies.provideDependency( TransactionIdStore.class ) ) );\n-\n-        final long idReuseSafeZone = config.get( HaSettings.id_reuse_safe_zone_time ).toMillis();\n-        TransactionCommittingResponseUnpacker responseUnpacker = dependencies.satisfyDependency(\n-                new TransactionCommittingResponseUnpacker( dependencies,\n-                        config.get( HaSettings.pull_apply_batch_size ), idReuseSafeZone ) );\n-\n-        Supplier<Kernel> kernelProvider = dependencies.provideDependency( Kernel.class );\n-\n-        transactionStartTimeout = config.get( HaSettings.state_switch_timeout ).toMillis();\n-\n-        DelegateInvocationHandler<ClusterMemberEvents> clusterEventsDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( ClusterMemberEvents.class );\n-        DelegateInvocationHandler<HighAvailabilityMemberContext> memberContextDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( HighAvailabilityMemberContext.class );\n-        DelegateInvocationHandler<ClusterMemberAvailability> clusterMemberAvailabilityDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( ClusterMemberAvailability.class );\n-\n-        ClusterMemberEvents clusterEvents = dependencies.satisfyDependency(\n-                (ClusterMemberEvents) newProxyInstance(\n-                        ClusterMemberEvents.class.getClassLoader(),\n-                        new Class[]{ClusterMemberEvents.class, Lifecycle.class},\n-                        clusterEventsDelegateInvocationHandler ) );\n-\n-        HighAvailabilityMemberContext memberContext = (HighAvailabilityMemberContext) newProxyInstance(\n-                HighAvailabilityMemberContext.class.getClassLoader(),\n-                new Class[]{HighAvailabilityMemberContext.class}, memberContextDelegateInvocationHandler );\n-        ClusterMemberAvailability clusterMemberAvailability = dependencies.satisfyDependency(\n-                (ClusterMemberAvailability) newProxyInstance(\n-                        ClusterMemberAvailability.class.getClassLoader(),\n-                        new Class[]{ClusterMemberAvailability.class},\n-                        clusterMemberAvailabilityDelegateInvocationHandler ) );\n-\n-        // TODO There's a cyclical dependency here that should be fixed\n-        final AtomicReference<HighAvailabilityMemberStateMachine> electionProviderRef = new AtomicReference<>();\n-        OnDiskLastTxIdGetter lastTxIdGetter = new OnDiskLastTxIdGetter(\n-                () -> platformModule.dependencies.resolveDependency(\n-                        TransactionIdStore.class ).getLastCommittedTransactionId() );\n-        ElectionCredentialsProvider electionCredentialsProvider = config.get( HaSettings.slave_only ) ?\n-                new NotElectableElectionCredentialsProvider() :\n-                new DefaultElectionCredentialsProvider(\n-                        config.get( ClusterSettings.server_id ),\n-                        lastTxIdGetter, () -> electionProviderRef.get().getCurrentState()\n-                );\n-\n-        ObjectStreamFactory objectStreamFactory = new ObjectStreamFactory();\n-\n-        ClusterClientModule clusterClientModule = new ClusterClientModule( clusteringLife, dependencies, monitors,\n-                config, logging, electionCredentialsProvider );\n-        ClusterClient clusterClient = clusterClientModule.clusterClient;\n-        PaxosClusterMemberEvents localClusterEvents = new PaxosClusterMemberEvents( clusterClient, clusterClient,\n-                clusterClient, clusterClient, logging.getInternalLogProvider(),\n-                item ->\n-                {\n-                    for ( MemberIsAvailable member : item.getCurrentAvailableMembers() )\n-                    {\n-                        if ( member.getRoleUri().getScheme().equals( \"ha\" ) )\n-                        {\n-                            if ( HighAvailabilityModeSwitcher.getServerId( member.getRoleUri() ).equals(\n-                                    platformModule.config.get( ClusterSettings.server_id ) ) )\n-                            {\n-                                logging.getInternalLog( PaxosClusterMemberEvents.class ).error(\n-                                        String.format( \"Instance \" +\n-                                                        \"%s has\" +\n-                                                        \" the same serverId as ours (%s) - will not \" +\n-                                                        \"join this cluster\",\n-                                                member.getRoleUri(),\n-                                                config.get( ClusterSettings.server_id ).toIntegerIndex()\n-                                        ) );\n-                                return true;\n-                            }\n-                        }\n-                    }\n-                    return true;\n-                }, new HANewSnapshotFunction(), objectStreamFactory, objectStreamFactory,\n-                platformModule.monitors.newMonitor( NamedThreadFactory.Monitor.class )\n+  private HighAvailabilityMemberStateMachine memberStateMachine;\n+  public ClusterMembers members;\n+\n+  public HighlyAvailableEditionModule(final PlatformModule platformModule)\n+  {\n+    ioLimiter = new ConfigurableIOLimiter(platformModule.config);\n+\n+    final LifeSupport life = platformModule.life;\n+    life.add(platformModule.dataSourceManager);\n+\n+    final LifeSupport paxosLife = new LifeSupport();\n+    final LifeSupport clusteringLife = new LifeSupport();\n+\n+    final FileSystemAbstraction fs = platformModule.fileSystem;\n+    final File storeDir = platformModule.storeDir;\n+    final Config config = platformModule.config;\n+    final Dependencies dependencies = platformModule.dependencies;\n+    final LogService logging = platformModule.logging;\n+    final Monitors monitors = platformModule.monitors;\n+\n+    this.accessCapability = config.get(GraphDatabaseSettings.read_only) ? new ReadOnly() : new CanWrite();\n+\n+    idTypeConfigurationProvider = new EnterpriseIdTypeConfigurationProvider(config);\n+\n+    watcherService = createFileSystemWatcherService(platformModule.fileSystem, storeDir, logging,\n+        platformModule.jobScheduler, config, fileWatcherFileNameFilter());\n+    dependencies.satisfyDependencies(watcherService);\n+    life.add(watcherService);\n+\n+    // Set Netty logger\n+    InternalLoggerFactory.setDefaultFactory(new NettyLoggerFactory(logging.getInternalLogProvider()));\n+\n+    life.add(new BranchedDataMigrator(platformModule.storeDir, platformModule.pageCache));\n+    DelegateInvocationHandler<Master> masterDelegateInvocationHandler =\n+        new DelegateInvocationHandler<>(Master.class);\n+    Master master = (Master) newProxyInstance(Master.class.getClassLoader(), new Class[] {Master.class},\n+        masterDelegateInvocationHandler);\n+    InstanceId serverId = config.get(ClusterSettings.server_id);\n+\n+    RequestContextFactory requestContextFactory = dependencies.satisfyDependency(new RequestContextFactory(\n+        serverId.toIntegerIndex(),\n+        dependencies.provideDependency(TransactionIdStore.class)));\n+\n+    final long idReuseSafeZone = config.get(HaSettings.id_reuse_safe_zone_time).toMillis();\n+    TransactionCommittingResponseUnpacker responseUnpacker = dependencies.satisfyDependency(\n+        new TransactionCommittingResponseUnpacker(dependencies,\n+            config.get(HaSettings.pull_apply_batch_size), idReuseSafeZone));\n+\n+    Supplier<Kernel> kernelProvider = dependencies.provideDependency(Kernel.class);\n+\n+    transactionStartTimeout = config.get(HaSettings.state_switch_timeout).toMillis();\n+\n+    DelegateInvocationHandler<ClusterMemberEvents> clusterEventsDelegateInvocationHandler =\n+        new DelegateInvocationHandler<>(ClusterMemberEvents.class);\n+    DelegateInvocationHandler<HighAvailabilityMemberContext> memberContextDelegateInvocationHandler =\n+        new DelegateInvocationHandler<>(HighAvailabilityMemberContext.class);\n+    DelegateInvocationHandler<ClusterMemberAvailability> clusterMemberAvailabilityDelegateInvocationHandler =\n+        new DelegateInvocationHandler<>(ClusterMemberAvailability.class);\n+\n+    ClusterMemberEvents clusterEvents = dependencies.satisfyDependency(\n+        (ClusterMemberEvents) newProxyInstance(\n+            ClusterMemberEvents.class.getClassLoader(),\n+            new Class[] {ClusterMemberEvents.class, Lifecycle.class},\n+            clusterEventsDelegateInvocationHandler));\n+\n+    HighAvailabilityMemberContext memberContext = (HighAvailabilityMemberContext) newProxyInstance(\n+        HighAvailabilityMemberContext.class.getClassLoader(),\n+        new Class[] {HighAvailabilityMemberContext.class}, memberContextDelegateInvocationHandler);\n+    ClusterMemberAvailability clusterMemberAvailability = dependencies.satisfyDependency(\n+        (ClusterMemberAvailability) newProxyInstance(\n+            ClusterMemberAvailability.class.getClassLoader(),\n+            new Class[] {ClusterMemberAvailability.class},\n+            clusterMemberAvailabilityDelegateInvocationHandler));\n+\n+    // TODO There's a cyclical dependency here that should be fixed\n+    final AtomicReference<HighAvailabilityMemberStateMachine> electionProviderRef = new AtomicReference<>();\n+    OnDiskLastTxIdGetter lastTxIdGetter = new OnDiskLastTxIdGetter(\n+        () -> platformModule.dependencies.resolveDependency(\n+            TransactionIdStore.class).getLastCommittedTransactionId());\n+    ElectionCredentialsProvider electionCredentialsProvider = config.get(HaSettings.slave_only) ?\n+        new NotElectableElectionCredentialsProvider() :\n+        new DefaultElectionCredentialsProvider(\n+            config.get(ClusterSettings.server_id),\n+            lastTxIdGetter, () -> electionProviderRef.get().getCurrentState()\n         );\n \n-        // Force a reelection after we enter the cluster\n-        // and when that election is finished refresh the snapshot\n-        clusterClient.addClusterListener( new ClusterListener.Adapter()\n-        {\n-            boolean hasRequestedElection = true; // This ensures that the election result is (at least) from our\n-            // request or thereafter\n-\n-            @Override\n-            public void enteredCluster( ClusterConfiguration clusterConfiguration )\n-            {\n-                clusterClient.performRoleElections();\n-            }\n+    ObjectStreamFactory objectStreamFactory = new ObjectStreamFactory();\n \n-            @Override\n-            public void elected( String role, InstanceId instanceId, URI electedMember )\n-            {\n-                if ( hasRequestedElection && role.equals( ClusterConfiguration.COORDINATOR ) )\n-                {\n-                    clusterClient.removeClusterListener( this );\n-                }\n-            }\n-        } );\n-\n-        HighAvailabilityMemberContext localMemberContext = new SimpleHighAvailabilityMemberContext( clusterClient\n-                .getServerId(), config.get( HaSettings.slave_only ) );\n-        PaxosClusterMemberAvailability localClusterMemberAvailability = new PaxosClusterMemberAvailability(\n-                clusterClient.getServerId(), clusterClient, clusterClient, logging.getInternalLogProvider(),\n-                objectStreamFactory,\n-                objectStreamFactory );\n-\n-        memberContextDelegateInvocationHandler.setDelegate( localMemberContext );\n-        clusterEventsDelegateInvocationHandler.setDelegate( localClusterEvents );\n-        clusterMemberAvailabilityDelegateInvocationHandler.setDelegate( localClusterMemberAvailability );\n-\n-        ObservedClusterMembers observedMembers = new ObservedClusterMembers( logging.getInternalLogProvider(),\n-                clusterClient, clusterClient, clusterEvents, config.get( ClusterSettings.server_id ) );\n-\n-        memberStateMachine = new HighAvailabilityMemberStateMachine( memberContext,\n-                platformModule.availabilityGuard, observedMembers, clusterEvents, clusterClient,\n-                logging.getInternalLogProvider() );\n-\n-        members = dependencies.satisfyDependency( new ClusterMembers( observedMembers, memberStateMachine ) );\n-\n-        dependencies.satisfyDependency( memberStateMachine );\n-        paxosLife.add( memberStateMachine );\n-        electionProviderRef.set( memberStateMachine );\n-\n-        HighAvailabilityLogger highAvailabilityLogger = new HighAvailabilityLogger( logging.getUserLogProvider(),\n-                config.get( ClusterSettings.server_id ) );\n-        platformModule.availabilityGuard.addListener( highAvailabilityLogger );\n-        clusterEvents.addClusterMemberListener( highAvailabilityLogger );\n-        clusterClient.addClusterListener( highAvailabilityLogger );\n-\n-        paxosLife.add( (Lifecycle)clusterEvents );\n-        paxosLife.add( localClusterMemberAvailability );\n-\n-        HaIdGeneratorFactory editionIdGeneratorFactory = (HaIdGeneratorFactory) createIdGeneratorFactory( masterDelegateInvocationHandler,\n-                logging.getInternalLogProvider(), requestContextFactory, fs );\n-        eligibleForIdReuse = new HaIdReuseEligibility( members, platformModule.clock, idReuseSafeZone );\n-        createIdComponents( platformModule, dependencies, editionIdGeneratorFactory );\n-        dependencies.satisfyDependency( idGeneratorFactory );\n-        dependencies.satisfyDependency( idController );\n-        dependencies.satisfyDependency( new IdBasedStoreEntityCounters( this.idGeneratorFactory ) );\n-\n-        // TODO There's a cyclical dependency here that should be fixed\n-        final AtomicReference<HighAvailabilityModeSwitcher> exceptionHandlerRef = new AtomicReference<>();\n-        InvalidEpochExceptionHandler invalidEpochHandler = () -> exceptionHandlerRef.get().forceElections();\n-\n-        // At the point in time the LogEntryReader hasn't been instantiated yet. The StorageEngine is responsible\n-        // for instantiating the CommandReaderFactory, required by a LogEntryReader. The StorageEngine is\n-        // created in the DataSourceModule, after this module.\n-        //   That is OK though because all users of it, instantiated below, will not use it right away,\n-        // but merely provide a way to get access to it. That's why this is a Supplier and will be asked\n-        // later, after the data source module and all that have started.\n-        @SuppressWarnings( {\"deprecation\", \"unchecked\"} )\n-        Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader =\n-                (Supplier) dependencies.provideDependency( LogEntryReader.class );\n-\n-        MasterClientResolver masterClientResolver = new MasterClientResolver( logging.getInternalLogProvider(),\n-                responseUnpacker,\n-                invalidEpochHandler,\n-                (int) config.get( HaSettings.read_timeout ).toMillis(),\n-                (int) config.get( HaSettings.lock_read_timeout ).toMillis(),\n-                config.get( HaSettings.max_concurrent_channels_per_slave ),\n-                config.get( HaSettings.com_chunk_size ).intValue(),\n-                logEntryReader );\n-\n-        LastUpdateTime lastUpdateTime = new LastUpdateTime();\n-\n-        DelegateInvocationHandler<UpdatePuller> updatePullerDelegate =\n-                new DelegateInvocationHandler<>( UpdatePuller.class );\n-        UpdatePuller updatePullerProxy = (UpdatePuller) Proxy.newProxyInstance(\n-                UpdatePuller.class .getClassLoader(), new Class[]{UpdatePuller.class}, updatePullerDelegate );\n-        dependencies.satisfyDependency( updatePullerProxy );\n-\n-        PullerFactory pullerFactory = new PullerFactory( requestContextFactory, master, lastUpdateTime,\n-                logging.getInternalLogProvider(), serverId, invalidEpochHandler,\n-                config.get( HaSettings.pull_interval ).toMillis(), platformModule.jobScheduler,\n-                dependencies, platformModule.availabilityGuard, memberStateMachine, monitors );\n-\n-        dependencies.satisfyDependency( paxosLife.add( pullerFactory.createObligationFulfiller( updatePullerProxy ) ) );\n-\n-        Function<Slave, SlaveServer> slaveServerFactory =\n-                slave -> new SlaveServer( slave, slaveServerConfig( config ), logging.getInternalLogProvider(),\n-                        monitors.newMonitor( ByteCounterMonitor.class, SlaveServer.class ),\n-                        monitors.newMonitor( RequestMonitor.class, SlaveServer.class ) );\n-\n-        SwitchToSlave switchToSlaveInstance = chooseSwitchToSlaveStrategy( platformModule, config, dependencies, logging, monitors,\n-                masterDelegateInvocationHandler, requestContextFactory, clusterMemberAvailability,\n-                masterClientResolver, updatePullerProxy, pullerFactory, slaveServerFactory, editionIdGeneratorFactory );\n-\n-        final Factory<MasterImpl.SPI> masterSPIFactory =\n-                () -> new DefaultMasterImplSPI( platformModule.graphDatabaseFacade, platformModule.fileSystem,\n-                        platformModule.monitors,\n-                        labelTokenHolder, propertyKeyTokenHolder, relationshipTypeTokenHolder, this.idGeneratorFactory,\n-                        platformModule.dependencies.resolveDependency( TransactionCommitProcess.class ),\n-                        platformModule.dependencies.resolveDependency( CheckPointer.class ),\n-                        platformModule.dependencies.resolveDependency( TransactionIdStore.class ),\n-                        platformModule.dependencies.resolveDependency( LogicalTransactionStore.class ),\n-                        platformModule.dependencies.resolveDependency( NeoStoreDataSource.class ),\n-                        platformModule.dependencies.resolveDependency( PageCache.class ),\n-                        platformModule.storeCopyCheckPointMutex,\n-                        logging.getInternalLogProvider() );\n-\n-        final Factory<ConversationSPI> conversationSPIFactory =\n-                () -> new DefaultConversationSPI( lockManager, platformModule.jobScheduler );\n-        Factory<ConversationManager> conversationManagerFactory =\n-                () -> new ConversationManager( conversationSPIFactory.newInstance(), config );\n-\n-        BiFunction<ConversationManager, LifeSupport, Master> masterFactory = ( conversationManager, life1 ) ->\n-                life1.add( new MasterImpl( masterSPIFactory.newInstance(),\n-                conversationManager, monitors.newMonitor( MasterImpl.Monitor.class, MasterImpl.class ), config ) );\n-\n-        BiFunction<Master, ConversationManager, MasterServer> masterServerFactory =\n-                ( master1, conversationManager ) ->\n-                {\n-                    TransactionChecksumLookup txChecksumLookup = new TransactionChecksumLookup(\n-                            platformModule.dependencies.resolveDependency( TransactionIdStore.class ),\n-                            platformModule.dependencies.resolveDependency( LogicalTransactionStore.class ) );\n-\n-                    return new MasterServer( master1, logging.getInternalLogProvider(),\n-                            masterServerConfig( config ),\n-                            new BranchDetectingTxVerifier( logging.getInternalLogProvider(), txChecksumLookup ),\n-                            monitors.newMonitor( ByteCounterMonitor.class, MasterServer.class ),\n-                            monitors.newMonitor( RequestMonitor.class, MasterServer.class ), conversationManager,\n-                            logEntryReader.get() );\n-                };\n-\n-        SwitchToMaster switchToMasterInstance = new SwitchToMaster( logging, editionIdGeneratorFactory,\n-                config, dependencies.provideDependency( SlaveFactory.class ),\n-                conversationManagerFactory,\n-                masterFactory,\n-                masterServerFactory,\n-                masterDelegateInvocationHandler, clusterMemberAvailability,\n-                platformModule.dependencies.provideDependency( NeoStoreDataSource.class ) );\n-\n-        ComponentSwitcherContainer componentSwitcherContainer = new ComponentSwitcherContainer();\n-        Supplier<StoreId> storeIdSupplier = () -> dependencies.resolveDependency( NeoStoreDataSource.class ).getStoreId();\n-\n-        HighAvailabilityModeSwitcher highAvailabilityModeSwitcher = new HighAvailabilityModeSwitcher(\n-                switchToSlaveInstance, switchToMasterInstance, clusterClient, clusterMemberAvailability, clusterClient,\n-                storeIdSupplier, config.get( ClusterSettings.server_id ), componentSwitcherContainer,\n-                platformModule.dataSourceManager, logging );\n-\n-        exceptionHandlerRef.set( highAvailabilityModeSwitcher );\n-\n-        clusterClient.addBindingListener( highAvailabilityModeSwitcher );\n-        memberStateMachine.addHighAvailabilityMemberListener( highAvailabilityModeSwitcher );\n-\n-        paxosLife.add( highAvailabilityModeSwitcher );\n-\n-        componentSwitcherContainer.add( new UpdatePullerSwitcher( updatePullerDelegate, pullerFactory ) );\n-\n-        life.add( requestContextFactory );\n-        life.add( responseUnpacker );\n-\n-        platformModule.diagnosticsManager.appendProvider( new HighAvailabilityDiagnostics( memberStateMachine,\n-                clusterClient ) );\n-\n-        dependencies.satisfyDependency( SslPolicyLoader.create( config, logging.getInternalLogProvider() ) ); // for bolt and web server\n-\n-        // Create HA services\n-        lockManager = dependencies.satisfyDependency(\n-                createLockManager( componentSwitcherContainer, config, masterDelegateInvocationHandler,\n-                        requestContextFactory, platformModule.availabilityGuard, platformModule.clock, logging ) );\n-\n-        statementLocksFactory = createStatementLocksFactory( componentSwitcherContainer, config, logging );\n-\n-        propertyKeyTokenHolder = dependencies.satisfyDependency( new DelegatingPropertyKeyTokenHolder(\n-                createPropertyKeyCreator( config, componentSwitcherContainer,\n-                        masterDelegateInvocationHandler, requestContextFactory, kernelProvider ) ) );\n-        labelTokenHolder = dependencies.satisfyDependency( new DelegatingLabelTokenHolder( createLabelIdCreator( config,\n-                componentSwitcherContainer, masterDelegateInvocationHandler, requestContextFactory,\n-                kernelProvider ) ) );\n-        relationshipTypeTokenHolder = dependencies.satisfyDependency( new DelegatingRelationshipTypeTokenHolder(\n-                createRelationshipTypeCreator( config, componentSwitcherContainer,\n-                        masterDelegateInvocationHandler, requestContextFactory, kernelProvider ) ) );\n-\n-        dependencies.satisfyDependency(\n-                createKernelData( config, platformModule.graphDatabaseFacade, members, fs, platformModule.pageCache,\n-                        storeDir, lastUpdateTime, lastTxIdGetter, life ) );\n-\n-        commitProcessFactory = createCommitProcessFactory( dependencies, logging, monitors, config, paxosLife,\n-                clusterClient, members, platformModule.jobScheduler, master, requestContextFactory,\n-                componentSwitcherContainer, logEntryReader );\n-\n-        headerInformationFactory = createHeaderInformationFactory( memberContext );\n-\n-        schemaWriteGuard = () ->\n+    ClusterClientModule clusterClientModule = new ClusterClientModule(clusteringLife, dependencies, monitors,\n+        config, logging, electionCredentialsProvider);\n+    ClusterClient clusterClient = clusterClientModule.clusterClient;\n+    PaxosClusterMemberEvents localClusterEvents = new PaxosClusterMemberEvents(clusterClient, clusterClient,\n+        clusterClient, clusterClient, logging.getInternalLogProvider(),\n+        item ->\n         {\n-            if ( !memberStateMachine.isMaster() )\n+          for (MemberIsAvailable member : item.getCurrentAvailableMembers())\n+          {\n+            if (member.getRoleUri().getScheme().equals(\"ha\"))\n             {\n-                throw new InvalidTransactionTypeKernelException(\n-                        \"Modifying the database schema can only be done on the master server, \" +\n-                        \"this server is a slave. Please issue schema modification commands directly to the master.\"\n-                );\n+              if (HighAvailabilityModeSwitcher.getServerId(member.getRoleUri()).equals(\n+                  platformModule.config.get(ClusterSettings.server_id)))\n+              {\n+                logging.getInternalLog(PaxosClusterMemberEvents.class).error(\n+                    String.format(\"Instance \" +\n+                            \"%s has\" +\n+                            \" the same serverId as ours (%s) - will not \" +\n+                            \"join this cluster\",\n+                        member.getRoleUri(),\n+                        config.get(ClusterSettings.server_id).toIntegerIndex()\n+                    ));\n+                return true;\n+              }\n             }\n+          }\n+          return true;\n+        }, new HANewSnapshotFunction(), objectStreamFactory, objectStreamFactory,\n+        platformModule.monitors.newMonitor(NamedThreadFactory.Monitor.class)\n+    );\n+\n+    // Force a reelection after we enter the cluster\n+    // and when that election is finished refresh the snapshot\n+    clusterClient.addClusterListener(new ClusterListener.Adapter()\n+    {\n+      boolean hasRequestedElection = true; // This ensures that the election result is (at least) from our\n+      // request or thereafter\n+\n+      @Override\n+      public void enteredCluster(ClusterConfiguration clusterConfiguration)\n+      {\n+        clusterClient.performRoleElections();\n+      }\n+\n+      @Override\n+      public void elected(String role, InstanceId instanceId, URI electedMember)\n+      {\n+        if (hasRequestedElection && role.equals(ClusterConfiguration.COORDINATOR))\n+        {\n+          clusterClient.removeClusterListener(this);\n+        }\n+      }\n+    });\n+\n+    HighAvailabilityMemberContext localMemberContext = new SimpleHighAvailabilityMemberContext(clusterClient\n+        .getServerId(), config.get(HaSettings.slave_only));\n+    PaxosClusterMemberAvailability localClusterMemberAvailability = new PaxosClusterMemberAvailability(\n+        clusterClient.getServerId(), clusterClient, clusterClient, logging.getInternalLogProvider(),\n+        objectStreamFactory,\n+        objectStreamFactory);\n+\n+    memberContextDelegateInvocationHandler.setDelegate(localMemberContext);\n+    clusterEventsDelegateInvocationHandler.setDelegate(localClusterEvents);\n+    clusterMemberAvailabilityDelegateInvocationHandler.setDelegate(localClusterMemberAvailability);\n+\n+    ObservedClusterMembers observedMembers = new ObservedClusterMembers(logging.getInternalLogProvider(),\n+        clusterClient, clusterClient, clusterEvents, config.get(ClusterSettings.server_id));\n+\n+    memberStateMachine = new HighAvailabilityMemberStateMachine(memberContext,\n+        platformModule.availabilityGuard, observedMembers, clusterEvents, clusterClient,\n+        logging.getInternalLogProvider());\n+\n+    members = dependencies.satisfyDependency(new ClusterMembers(observedMembers, memberStateMachine));\n+\n+    dependencies.satisfyDependency(memberStateMachine);\n+    paxosLife.add(memberStateMachine);\n+    electionProviderRef.set(memberStateMachine);\n+\n+    HighAvailabilityLogger highAvailabilityLogger = new HighAvailabilityLogger(logging.getUserLogProvider(),\n+        config.get(ClusterSettings.server_id));\n+    platformModule.availabilityGuard.addListener(highAvailabilityLogger);\n+    clusterEvents.addClusterMemberListener(highAvailabilityLogger);\n+    clusterClient.addClusterListener(highAvailabilityLogger);\n+\n+    paxosLife.add((Lifecycle) clusterEvents);\n+    paxosLife.add(localClusterMemberAvailability);\n+\n+    HaIdGeneratorFactory editionIdGeneratorFactory = (HaIdGeneratorFactory) createIdGeneratorFactory(masterDelegateInvocationHandler,\n+        logging.getInternalLogProvider(), requestContextFactory, fs);\n+    eligibleForIdReuse = new HaIdReuseEligibility(members, platformModule.clock, idReuseSafeZone);\n+    createIdComponents(platformModule, dependencies, editionIdGeneratorFactory);\n+    dependencies.satisfyDependency(idGeneratorFactory);\n+    dependencies.satisfyDependency(idController);\n+    dependencies.satisfyDependency(new IdBasedStoreEntityCounters(this.idGeneratorFactory));\n+\n+    // TODO There's a cyclical dependency here that should be fixed\n+    final AtomicReference<HighAvailabilityModeSwitcher> exceptionHandlerRef = new AtomicReference<>();\n+    InvalidEpochExceptionHandler invalidEpochHandler = () -> exceptionHandlerRef.get().forceElections();\n+\n+    // At the point in time the LogEntryReader hasn't been instantiated yet. The StorageEngine is responsible\n+    // for instantiating the CommandReaderFactory, required by a LogEntryReader. The StorageEngine is\n+    // created in the DataSourceModule, after this module.\n+    //   That is OK though because all users of it, instantiated below, will not use it right away,\n+    // but merely provide a way to get access to it. That's why this is a Supplier and will be asked\n+    // later, after the data source module and all that have started.\n+    @SuppressWarnings({\"deprecation\", \"unchecked\"})\n+    Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader =\n+        (Supplier) dependencies.provideDependency(LogEntryReader.class);\n+\n+    MasterClientResolver masterClientResolver = new MasterClientResolver(logging.getInternalLogProvider(),\n+        responseUnpacker,\n+        invalidEpochHandler,\n+        (int) config.get(HaSettings.read_timeout).toMillis(),\n+        (int) config.get(HaSettings.lock_read_timeout).toMillis(),\n+        config.get(HaSettings.max_concurrent_channels_per_slave),\n+        config.get(HaSettings.com_chunk_size).intValue(),\n+        logEntryReader);\n+\n+    LastUpdateTime lastUpdateTime = new LastUpdateTime();\n+\n+    DelegateInvocationHandler<UpdatePuller> updatePullerDelegate =\n+        new DelegateInvocationHandler<>(UpdatePuller.class);\n+    UpdatePuller updatePullerProxy = (UpdatePuller) Proxy.newProxyInstance(\n+        UpdatePuller.class.getClassLoader(), new Class[] {UpdatePuller.class}, updatePullerDelegate);\n+    dependencies.satisfyDependency(updatePullerProxy);\n+\n+    PullerFactory pullerFactory = new PullerFactory(requestContextFactory, master, lastUpdateTime,\n+        logging.getInternalLogProvider(), serverId, invalidEpochHandler,\n+        config.get(HaSettings.pull_interval).toMillis(), platformModule.jobScheduler,\n+        dependencies, platformModule.availabilityGuard, memberStateMachine, monitors);\n+\n+    dependencies.satisfyDependency(paxosLife.add(pullerFactory.createObligationFulfiller(updatePullerProxy)));\n+\n+    Function<Slave, SlaveServer> slaveServerFactory =\n+        slave -> new SlaveServer(slave, slaveServerConfig(config), logging.getInternalLogProvider(),\n+            monitors.newMonitor(ByteCounterMonitor.class, SlaveServer.class),\n+            monitors.newMonitor(RequestMonitor.class, SlaveServer.class));\n+\n+    SwitchToSlave switchToSlaveInstance = chooseSwitchToSlaveStrategy(platformModule, config, dependencies, logging, monitors,\n+        masterDelegateInvocationHandler, requestContextFactory, clusterMemberAvailability,\n+        masterClientResolver, updatePullerProxy, pullerFactory, slaveServerFactory, editionIdGeneratorFactory);\n+\n+    final Factory<MasterImpl.SPI> masterSPIFactory =\n+        () -> new DefaultMasterImplSPI(platformModule.graphDatabaseFacade, platformModule.fileSystem,\n+            platformModule.monitors,\n+            labelTokenHolder, propertyKeyTokenHolder, relationshipTypeTokenHolder, this.idGeneratorFactory,\n+            platformModule.dependencies.resolveDependency(TransactionCommitProcess.class),\n+            platformModule.dependencies.resolveDependency(CheckPointer.class),\n+            platformModule.dependencies.resolveDependency(TransactionIdStore.class),\n+            platformModule.dependencies.resolveDependency(LogicalTransactionStore.class),\n+            platformModule.dependencies.resolveDependency(NeoStoreDataSource.class),\n+            platformModule.dependencies.resolveDependency(PageCache.class),\n+            platformModule.storeCopyCheckPointMutex,\n+            logging.getInternalLogProvider());\n+\n+    final Factory<ConversationSPI> conversationSPIFactory =\n+        () -> new DefaultConversationSPI(lockManager, platformModule.jobScheduler);\n+    Factory<ConversationManager> conversationManagerFactory =\n+        () -> new ConversationManager(conversationSPIFactory.newInstance(), config);\n+\n+    BiFunction<ConversationManager, LifeSupport, Master> masterFactory = (conversationManager, life1) ->\n+        life1.add(new MasterImpl(masterSPIFactory.newInstance(),\n+            conversationManager, monitors.newMonitor(MasterImpl.Monitor.class, MasterImpl.class), config));\n+\n+    BiFunction<Master, ConversationManager, MasterServer> masterServerFactory =\n+        (master1, conversationManager) ->\n+        {\n+          TransactionChecksumLookup txChecksumLookup = new TransactionChecksumLookup(\n+              platformModule.dependencies.resolveDependency(TransactionIdStore.class),\n+              platformModule.dependencies.resolveDependency(LogicalTransactionStore.class));\n+\n+          return new MasterServer(master1, logging.getInternalLogProvider(),\n+              masterServerConfig(config),\n+              new BranchDetectingTxVerifier(logging.getInternalLogProvider(), txChecksumLookup),\n+              monitors.newMonitor(ByteCounterMonitor.class, MasterServer.class),\n+              monitors.newMonitor(RequestMonitor.class, MasterServer.class), conversationManager,\n+              logEntryReader.get());\n         };\n \n-        config.augment( GraphDatabaseSettings.allow_upgrade, Settings.FALSE );\n+    SwitchToMaster switchToMasterInstance = new SwitchToMaster(logging, editionIdGeneratorFactory,\n+        config, dependencies.provideDependency(SlaveFactory.class),\n+        conversationManagerFactory,\n+        masterFactory,\n+        masterServerFactory,\n+        masterDelegateInvocationHandler, clusterMemberAvailability,\n+        platformModule.dependencies.provideDependency(NeoStoreDataSource.class));\n \n-        constraintSemantics = new EnterpriseConstraintSemantics();\n+    ComponentSwitcherContainer componentSwitcherContainer = new ComponentSwitcherContainer();\n+    Supplier<StoreId> storeIdSupplier = () -> dependencies.resolveDependency(NeoStoreDataSource.class).getStoreId();\n \n-        coreAPIAvailabilityGuard = new CoreAPIAvailabilityGuard( platformModule.availabilityGuard, transactionStartTimeout );\n+    HighAvailabilityModeSwitcher highAvailabilityModeSwitcher = new HighAvailabilityModeSwitcher(\n+        switchToSlaveInstance, switchToMasterInstance, clusterClient, clusterMemberAvailability, clusterClient,\n+        storeIdSupplier, config.get(ClusterSettings.server_id), componentSwitcherContainer,\n+        platformModule.dataSourceManager, logging);\n \n-        registerRecovery( platformModule.databaseInfo, dependencies, logging );\n+    exceptionHandlerRef.set(highAvailabilityModeSwitcher);\n \n-        UsageData usageData = dependencies.resolveDependency( UsageData.class );\n-        publishEditionInfo( usageData, platformModule.databaseInfo, config );\n-        publishServerId( config, usageData );\n+    clusterClient.addBindingListener(highAvailabilityModeSwitcher);\n+    memberStateMachine.addHighAvailabilityMemberListener(highAvailabilityModeSwitcher);\n \n-        // Ordering of lifecycles is important. Clustering infrastructure should start before paxos components\n-        life.add( clusteringLife );\n-        life.add( paxosLife );\n+    paxosLife.add(highAvailabilityModeSwitcher);\n \n-        dependencies.satisfyDependency( createSessionTracker() );\n-    }\n+    componentSwitcherContainer.add(new UpdatePullerSwitcher(updatePullerDelegate, pullerFactory));\n \n-    @Override\n-    public void registerEditionSpecificProcedures( Procedures procedures ) throws KernelException\n-    {\n-        procedures.registerProcedure( EnterpriseBuiltInDbmsProcedures.class, true );\n-    }\n+    life.add(requestContextFactory);\n+    life.add(responseUnpacker);\n \n-    private StatementLocksFactory createStatementLocksFactory( ComponentSwitcherContainer componentSwitcherContainer,\n-            Config config, LogService logging )\n-    {\n-        StatementLocksFactory configuredStatementLocks = new StatementLocksFactorySelector( lockManager, config, logging ).select();\n+    platformModule.diagnosticsManager.appendProvider(new HighAvailabilityDiagnostics(memberStateMachine,\n+        clusterClient));\n \n-        DelegateInvocationHandler<StatementLocksFactory> locksFactoryDelegate =\n-                new DelegateInvocationHandler<>( StatementLocksFactory.class );\n-        StatementLocksFactory locksFactory =\n-                (StatementLocksFactory) newProxyInstance( StatementLocksFactory.class.getClassLoader(),\n-                        new Class[]{StatementLocksFactory.class}, locksFactoryDelegate );\n+    dependencies.satisfyDependency(SslPolicyLoader.create(config, logging.getInternalLogProvider())); // for bolt and web server\n \n-        StatementLocksFactorySwitcher\n-                locksSwitcher = new StatementLocksFactorySwitcher( locksFactoryDelegate, configuredStatementLocks );\n-        componentSwitcherContainer.add( locksSwitcher );\n+    // Create HA services\n+    lockManager = dependencies.satisfyDependency(\n+        createLockManager(componentSwitcherContainer, config, masterDelegateInvocationHandler,\n+            requestContextFactory, platformModule.availabilityGuard, platformModule.clock, logging));\n \n-        return locksFactory;\n-    }\n+    statementLocksFactory = createStatementLocksFactory(componentSwitcherContainer, config, logging);\n+\n+    propertyKeyTokenHolder = dependencies.satisfyDependency(new DelegatingPropertyKeyTokenHolder(\n+        createPropertyKeyCreator(config, componentSwitcherContainer,\n+            masterDelegateInvocationHandler, requestContextFactory, kernelProvider)));\n+    labelTokenHolder = dependencies.satisfyDependency(new DelegatingLabelTokenHolder(createLabelIdCreator(config,\n+        componentSwitcherContainer, masterDelegateInvocationHandler, requestContextFactory,\n+        kernelProvider)));\n+    relationshipTypeTokenHolder = dependencies.satisfyDependency(new DelegatingRelationshipTypeTokenHolder(\n+        createRelationshipTypeCreator(config, componentSwitcherContainer,\n+            masterDelegateInvocationHandler, requestContextFactory, kernelProvider)));\n \n-    static Predicate<String> fileWatcherFileNameFilter()\n+    dependencies.satisfyDependency(\n+        createKernelData(config, platformModule.graphDatabaseFacade, members, fs, platformModule.pageCache,\n+            storeDir, lastUpdateTime, lastTxIdGetter, life));\n+\n+    commitProcessFactory = createCommitProcessFactory(dependencies, logging, monitors, config, paxosLife,\n+        clusterClient, members, platformModule.jobScheduler, master, requestContextFactory,\n+        componentSwitcherContainer, logEntryReader);\n+\n+    headerInformationFactory = createHeaderInformationFactory(memberContext);\n+\n+    schemaWriteGuard = () ->\n     {\n-        return Predicates.any(\n-                fileName -> fileName.startsWith( TransactionLogFiles.DEFAULT_NAME ),\n-                fileName -> fileName.startsWith( IndexConfigStore.INDEX_DB_FILE_NAME ),\n-                filename -> filename.startsWith( StoreUtil.BRANCH_SUBDIRECTORY ),\n-                filename -> filename.startsWith( StoreUtil.TEMP_COPY_DIRECTORY_NAME ),\n-                filename -> filename.endsWith( PageCacheWarmer.SUFFIX_CACHEPROF )\n+      if (!memberStateMachine.isMaster())\n+      {\n+        throw new InvalidTransactionTypeKernelException(\n+            \"Modifying the database schema can only be done on the master server, \" +\n+                \"this server is a slave. Please issue schema modification commands directly to the master.\"\n         );\n-    }\n-\n-    private SwitchToSlave chooseSwitchToSlaveStrategy( PlatformModule platformModule, Config config, Dependencies\n-            dependencies, LogService logging, Monitors monitors, DelegateInvocationHandler<Master>\n-            masterDelegateInvocationHandler, RequestContextFactory requestContextFactory, ClusterMemberAvailability\n-            clusterMemberAvailability, MasterClientResolver masterClientResolver, UpdatePuller updatePullerProxy,\n-            PullerFactory pullerFactory, Function<Slave, SlaveServer> slaveServerFactory, HaIdGeneratorFactory idGeneratorFactory )\n+      }\n+    };\n+\n+    config.augment(GraphDatabaseSettings.allow_upgrade, Settings.FALSE);\n+\n+    constraintSemantics = new EnterpriseConstraintSemantics();\n+\n+    coreAPIAvailabilityGuard = new CoreAPIAvailabilityGuard(platformModule.availabilityGuard, transactionStartTimeout);\n+\n+    registerRecovery(platformModule.databaseInfo, dependencies, logging);\n+\n+    UsageData usageData = dependencies.resolveDependency(UsageData.class);\n+    publishEditionInfo(usageData, platformModule.databaseInfo, config);\n+    publishServerId(config, usageData);\n+\n+    // Ordering of lifecycles is important. Clustering infrastructure should start before paxos components\n+    life.add(clusteringLife);\n+    life.add(paxosLife);\n+\n+    dependencies.satisfyDependency(createSessionTracker());\n+  }\n+\n+  @Override\n+  public void registerEditionSpecificProcedures(Procedures procedures) throws KernelException\n+  {\n+    procedures.registerProcedure(EnterpriseBuiltInDbmsProcedures.class, true);\n+  }\n+\n+  private StatementLocksFactory createStatementLocksFactory(ComponentSwitcherContainer componentSwitcherContainer,\n+                                                            Config config, LogService logging)\n+  {\n+    StatementLocksFactory configuredStatementLocks = new StatementLocksFactorySelector(lockManager, config, logging).select();\n+\n+    DelegateInvocationHandler<StatementLocksFactory> locksFactoryDelegate =\n+        new DelegateInvocationHandler<>(StatementLocksFactory.class);\n+    StatementLocksFactory locksFactory =\n+        (StatementLocksFactory) newProxyInstance(StatementLocksFactory.class.getClassLoader(),\n+            new Class[] {StatementLocksFactory.class}, locksFactoryDelegate);\n+\n+    StatementLocksFactorySwitcher\n+        locksSwitcher = new StatementLocksFactorySwitcher(locksFactoryDelegate, configuredStatementLocks);\n+    componentSwitcherContainer.add(locksSwitcher);\n+\n+    return locksFactory;\n+  }\n+\n+  static Predicate<String> fileWatcherFileNameFilter()\n+  {\n+    return Predicates.any(\n+        fileName -> fileName.startsWith(TransactionLogFiles.DEFAULT_NAME),\n+        fileName -> fileName.startsWith(IndexConfigStore.INDEX_DB_FILE_NAME),\n+        filename -> filename.startsWith(StoreUtil.BRANCH_SUBDIRECTORY),\n+        filename -> filename.startsWith(StoreUtil.TEMP_COPY_DIRECTORY_NAME),\n+        filename -> filename.endsWith(PageCacheWarmer.SUFFIX_CACHEPROF)\n+    );\n+  }\n+\n+  private SwitchToSlave chooseSwitchToSlaveStrategy(PlatformModule platformModule, Config config, Dependencies\n+      dependencies, LogService logging, Monitors monitors, DelegateInvocationHandler<Master>\n+                                                        masterDelegateInvocationHandler, RequestContextFactory requestContextFactory, ClusterMemberAvailability\n+                                                        clusterMemberAvailability, MasterClientResolver masterClientResolver, UpdatePuller updatePullerProxy,\n+                                                    PullerFactory pullerFactory, Function<Slave, SlaveServer> slaveServerFactory,\n+                                                    HaIdGeneratorFactory idGeneratorFactory)\n+  {\n+    switch (config.get(HaSettings.branched_data_copying_strategy))\n     {\n-        switch ( config.get( HaSettings.branched_data_copying_strategy ) )\n-        {\n-            case branch_then_copy:\n-                return new SwitchToSlaveBranchThenCopy( platformModule.storeDir, logging,\n-                        platformModule.fileSystem, config, dependencies, idGeneratorFactory,\n-                        masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory,\n-                        pullerFactory,\n-                        platformModule.kernelExtensions.listFactories(), masterClientResolver,\n-                        monitors.newMonitor( SwitchToSlave.Monitor.class ),\n-                        monitors.newMonitor( StoreCopyClientMonitor.class ),\n-                        dependencies.provideDependency( NeoStoreDataSource.class ),\n-                        dependencies.provideDependency( TransactionIdStore.class ),\n-                        slaveServerFactory, updatePullerProxy, platformModule.pageCache,\n-                        monitors, platformModule.transactionMonitor );\n-            case copy_then_branch:\n-                return new SwitchToSlaveCopyThenBranch( platformModule.storeDir, logging,\n-                        platformModule.fileSystem, config, dependencies, idGeneratorFactory,\n-                        masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory,\n-                        pullerFactory,\n-                        platformModule.kernelExtensions.listFactories(), masterClientResolver,\n-                        monitors.newMonitor( SwitchToSlave.Monitor.class ),\n-                        monitors.newMonitor( StoreCopyClientMonitor.class ),\n-                        dependencies.provideDependency( NeoStoreDataSource.class ),\n-                        dependencies.provideDependency( TransactionIdStore.class ),\n-                        slaveServerFactory, updatePullerProxy, platformModule.pageCache,\n-                        monitors, platformModule.transactionMonitor );\n-            default:\n-                throw new RuntimeException( \"Unknown branched data copying strategy\" );\n-        }\n+      case branch_then_copy:\n+        return new SwitchToSlaveBranchThenCopy(platformModule.storeDir, logging,\n+            platformModule.fileSystem, config, dependencies, idGeneratorFactory,\n+            masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory,\n+            pullerFactory,\n+            platformModule.kernelExtensions.listFactories(), masterClientResolver,\n+            monitors.newMonitor(SwitchToSlave.Monitor.class),\n+            monitors.newMonitor(StoreCopyClientMonitor.class),\n+            dependencies.provideDependency(NeoStoreDataSource.class),\n+            dependencies.provideDependency(TransactionIdStore.class),\n+            slaveServerFactory, updatePullerProxy, platformModule.pageCache,\n+            monitors, platformModule.transactionMonitor);\n+      case copy_then_branch:\n+        return new SwitchToSlaveCopyThenBranch(platformModule.storeDir, logging,\n+            platformModule.fileSystem, config, dependencies, idGeneratorFactory,\n+            masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory,\n+            pullerFactory,\n+            platformModule.kernelExtensions.listFactories(), masterClientResolver,\n+            monitors.newMonitor(SwitchToSlave.Monitor.class),\n+            monitors.newMonitor(StoreCopyClientMonitor.class),\n+            dependencies.provideDependency(NeoStoreDataSource.class),\n+            dependencies.provideDependency(TransactionIdStore.class),\n+            slaveServerFactory, updatePullerProxy, platformModule.pageCache,\n+            monitors, platformModule.transactionMonitor);\n+      default:\n+        throw new RuntimeException(\"Unknown branched data copying strategy\");\n     }\n+  }\n \n-    private void publishServerId( Config config, UsageData sysInfo )\n-    {\n-        sysInfo.set( UsageDataKeys.serverId, config.get( ClusterSettings.server_id ).toString() );\n-    }\n+  private void publishServerId(Config config, UsageData sysInfo)\n+  {\n+    sysInfo.set(UsageDataKeys.serverId, config.get(ClusterSettings.server_id).toString());\n+  }\n \n-    private TransactionHeaderInformationFactory createHeaderInformationFactory(\n-            final HighAvailabilityMemberContext memberContext )\n+  private TransactionHeaderInformationFactory createHeaderInformationFactory(\n+      final HighAvailabilityMemberContext memberContext)\n+  {\n+    return new TransactionHeaderInformationFactory.WithRandomBytes()\n     {\n-        return new TransactionHeaderInformationFactory.WithRandomBytes()\n-        {\n-            @Override\n-            protected TransactionHeaderInformation createUsing( byte[] additionalHeader )\n-            {\n-                return new TransactionHeaderInformation( memberContext.getElectedMasterId().toIntegerIndex(),\n-                        memberContext.getMyId().toIntegerIndex(), additionalHeader );\n-            }\n-        };\n-    }\n-\n-    private CommitProcessFactory createCommitProcessFactory( Dependencies dependencies, LogService logging,\n-            Monitors monitors, Config config, LifeSupport paxosLife, ClusterClient clusterClient,\n-            ClusterMembers members, JobScheduler jobScheduler, Master master,\n-            RequestContextFactory requestContextFactory, ComponentSwitcherContainer componentSwitcherContainer,\n-            Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader )\n+      @Override\n+      protected TransactionHeaderInformation createUsing(byte[] additionalHeader)\n+      {\n+        return new TransactionHeaderInformation(memberContext.getElectedMasterId().toIntegerIndex(),\n+            memberContext.getMyId().toIntegerIndex(), additionalHeader);\n+      }\n+    };\n+  }\n+\n+  private CommitProcessFactory createCommitProcessFactory(Dependencies dependencies, LogService logging,\n+                                                          Monitors monitors, Config config, LifeSupport paxosLife, ClusterClient clusterClient,\n+                                                          ClusterMembers members, JobScheduler jobScheduler, Master master,\n+                                                          RequestContextFactory requestContextFactory, ComponentSwitcherContainer componentSwitcherContainer,\n+                                                          Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader)\n+  {\n+    DefaultSlaveFactory slaveFactory = dependencies.satisfyDependency(new DefaultSlaveFactory(\n+        logging.getInternalLogProvider(), monitors, config.get(HaSettings.com_chunk_size).intValue(),\n+        logEntryReader));\n+\n+    HostnamePort me = config.get(ClusterSettings.cluster_server);\n+    Slaves slaves = dependencies.satisfyDependency(paxosLife.add(new HighAvailabilitySlaves(members,\n+        clusterClient, slaveFactory, me)));\n+\n+    TransactionPropagator transactionPropagator = new TransactionPropagator(TransactionPropagator.from(config),\n+        logging.getInternalLog(TransactionPropagator.class), slaves, new CommitPusher(jobScheduler));\n+    paxosLife.add(transactionPropagator);\n+\n+    DelegateInvocationHandler<TransactionCommitProcess> commitProcessDelegate = new DelegateInvocationHandler<>(\n+        TransactionCommitProcess.class);\n+\n+    CommitProcessSwitcher commitProcessSwitcher = new CommitProcessSwitcher(transactionPropagator,\n+        master, commitProcessDelegate, requestContextFactory, monitors, dependencies);\n+    componentSwitcherContainer.add(commitProcessSwitcher);\n+\n+    return new HighlyAvailableCommitProcessFactory(commitProcessDelegate);\n+  }\n+\n+  private IdGeneratorFactory createIdGeneratorFactory(\n+      DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+      LogProvider logging,\n+      RequestContextFactory requestContextFactory,\n+      FileSystemAbstraction fs)\n+  {\n+    HaIdGeneratorFactory idGeneratorFactory = new HaIdGeneratorFactory(masterDelegateInvocationHandler, logging,\n+        requestContextFactory, fs, idTypeConfigurationProvider);\n+    /*\n+     * We don't really switch to master here. We just need to initialize the idGenerator so the initial store\n+     * can be started (if required). In any case, the rest of the database is in pending state, so nothing will\n+     * happen until events start arriving and that will set us to the proper state anyway.\n+     */\n+    idGeneratorFactory.switchToMaster();\n+    return idGeneratorFactory;\n+  }\n+\n+  private Locks createLockManager(ComponentSwitcherContainer componentSwitcherContainer, Config config,\n+                                  DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+                                  RequestContextFactory requestContextFactory, AvailabilityGuard availabilityGuard, Clock clock, LogService logService)\n+  {\n+    DelegateInvocationHandler<Locks> lockManagerDelegate = new DelegateInvocationHandler<>(Locks.class);\n+    Locks lockManager = (Locks) newProxyInstance(Locks.class.getClassLoader(), new Class[] {Locks.class},\n+        lockManagerDelegate);\n+\n+    Factory<Locks> locksFactory = () -> CommunityEditionModule.createLockManager(config, clock, logService);\n+\n+    LockManagerSwitcher lockManagerModeSwitcher = new LockManagerSwitcher(\n+        lockManagerDelegate, masterDelegateInvocationHandler, requestContextFactory, availabilityGuard,\n+        locksFactory, logService.getInternalLogProvider(), config);\n+\n+    componentSwitcherContainer.add(lockManagerModeSwitcher);\n+    return lockManager;\n+  }\n+\n+  private TokenCreator createRelationshipTypeCreator(Config config,\n+                                                     ComponentSwitcherContainer componentSwitcherContainer,\n+                                                     DelegateInvocationHandler<Master> masterInvocationHandler, RequestContextFactory requestContextFactory,\n+                                                     Supplier<Kernel> kernelProvider)\n+  {\n+    if (config.get(GraphDatabaseSettings.read_only))\n     {\n-        DefaultSlaveFactory slaveFactory = dependencies.satisfyDependency( new DefaultSlaveFactory(\n-                logging.getInternalLogProvider(), monitors, config.get( HaSettings.com_chunk_size ).intValue(),\n-                logEntryReader ) );\n-\n-        HostnamePort me = config.get( ClusterSettings.cluster_server );\n-        Slaves slaves = dependencies.satisfyDependency( paxosLife.add( new HighAvailabilitySlaves( members,\n-                clusterClient, slaveFactory, me ) ) );\n-\n-        TransactionPropagator transactionPropagator = new TransactionPropagator( TransactionPropagator.from( config ),\n-                logging.getInternalLog( TransactionPropagator.class ), slaves, new CommitPusher( jobScheduler ) );\n-        paxosLife.add( transactionPropagator );\n+      return new ReadOnlyTokenCreator();\n+    }\n \n-        DelegateInvocationHandler<TransactionCommitProcess> commitProcessDelegate = new DelegateInvocationHandler<>(\n-                TransactionCommitProcess.class );\n+    DelegateInvocationHandler<TokenCreator> relationshipTypeCreatorDelegate =\n+        new DelegateInvocationHandler<>(TokenCreator.class);\n+    TokenCreator relationshipTypeCreator = (TokenCreator) newProxyInstance(TokenCreator.class.getClassLoader(),\n+        new Class[] {TokenCreator.class}, relationshipTypeCreatorDelegate);\n \n-        CommitProcessSwitcher commitProcessSwitcher = new CommitProcessSwitcher( transactionPropagator,\n-                master, commitProcessDelegate, requestContextFactory, monitors, dependencies );\n-        componentSwitcherContainer.add( commitProcessSwitcher );\n+    RelationshipTypeCreatorSwitcher typeCreatorModeSwitcher = new RelationshipTypeCreatorSwitcher(\n+        relationshipTypeCreatorDelegate, masterInvocationHandler, requestContextFactory,\n+        kernelProvider, idGeneratorFactory);\n \n-        return new HighlyAvailableCommitProcessFactory( commitProcessDelegate );\n-    }\n+    componentSwitcherContainer.add(typeCreatorModeSwitcher);\n+    return relationshipTypeCreator;\n+  }\n \n-    private IdGeneratorFactory createIdGeneratorFactory(\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n-            LogProvider logging,\n-            RequestContextFactory requestContextFactory,\n-            FileSystemAbstraction fs )\n+  private TokenCreator createPropertyKeyCreator(Config config, ComponentSwitcherContainer componentSwitcherContainer,\n+                                                DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+                                                RequestContextFactory requestContextFactory, Supplier<Kernel> kernelProvider)\n+  {\n+    if (config.get(GraphDatabaseSettings.read_only))\n     {\n-        HaIdGeneratorFactory idGeneratorFactory = new HaIdGeneratorFactory( masterDelegateInvocationHandler, logging,\n-                requestContextFactory, fs, idTypeConfigurationProvider );\n-        /*\n-         * We don't really switch to master here. We just need to initialize the idGenerator so the initial store\n-         * can be started (if required). In any case, the rest of the database is in pending state, so nothing will\n-         * happen until events start arriving and that will set us to the proper state anyway.\n-         */\n-        idGeneratorFactory.switchToMaster();\n-        return idGeneratorFactory;\n+      return new ReadOnlyTokenCreator();\n     }\n \n-    private Locks createLockManager( ComponentSwitcherContainer componentSwitcherContainer, Config config,\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n-            RequestContextFactory requestContextFactory, AvailabilityGuard availabilityGuard, Clock clock, LogService logService )\n-    {\n-        DelegateInvocationHandler<Locks> lockManagerDelegate = new DelegateInvocationHandler<>( Locks.class );\n-        Locks lockManager = (Locks) newProxyInstance( Locks.class.getClassLoader(), new Class[]{Locks.class},\n-                lockManagerDelegate );\n-\n-        Factory<Locks> locksFactory = () -> CommunityEditionModule.createLockManager( config, clock, logService );\n+    DelegateInvocationHandler<TokenCreator> propertyKeyCreatorDelegate =\n+        new DelegateInvocationHandler<>(TokenCreator.class);\n+    TokenCreator propertyTokenCreator = (TokenCreator) newProxyInstance(TokenCreator.class.getClassLoader(),\n+        new Class[] {TokenCreator.class}, propertyKeyCreatorDelegate);\n \n-        LockManagerSwitcher lockManagerModeSwitcher = new LockManagerSwitcher(\n-                lockManagerDelegate, masterDelegateInvocationHandler, requestContextFactory, availabilityGuard,\n-                locksFactory, logService.getInternalLogProvider(), config );\n+    PropertyKeyCreatorSwitcher propertyKeyCreatorModeSwitcher = new PropertyKeyCreatorSwitcher(\n+        propertyKeyCreatorDelegate, masterDelegateInvocationHandler,\n+        requestContextFactory, kernelProvider, idGeneratorFactory);\n \n-        componentSwitcherContainer.add( lockManagerModeSwitcher );\n-        return lockManager;\n-    }\n+    componentSwitcherContainer.add(propertyKeyCreatorModeSwitcher);\n+    return propertyTokenCreator;\n+  }\n \n-    private TokenCreator createRelationshipTypeCreator( Config config,\n-            ComponentSwitcherContainer componentSwitcherContainer,\n-            DelegateInvocationHandler<Master> masterInvocationHandler, RequestContextFactory requestContextFactory,\n-            Supplier<Kernel> kernelProvider )\n+  private TokenCreator createLabelIdCreator(Config config, ComponentSwitcherContainer componentSwitcherContainer,\n+                                            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+                                            RequestContextFactory requestContextFactory, Supplier<Kernel> kernelProvider)\n+  {\n+    if (config.get(GraphDatabaseSettings.read_only))\n     {\n-        if ( config.get( GraphDatabaseSettings.read_only ) )\n-        {\n-            return new ReadOnlyTokenCreator();\n-        }\n-\n-        DelegateInvocationHandler<TokenCreator> relationshipTypeCreatorDelegate =\n-                new DelegateInvocationHandler<>( TokenCreator.class );\n-        TokenCreator relationshipTypeCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(),\n-                new Class[]{TokenCreator.class}, relationshipTypeCreatorDelegate );\n-\n-        RelationshipTypeCreatorSwitcher typeCreatorModeSwitcher = new RelationshipTypeCreatorSwitcher(\n-                relationshipTypeCreatorDelegate, masterInvocationHandler, requestContextFactory,\n-                kernelProvider, idGeneratorFactory );\n-\n-        componentSwitcherContainer.add( typeCreatorModeSwitcher );\n-        return relationshipTypeCreator;\n+      return new ReadOnlyTokenCreator();\n     }\n \n-    private TokenCreator createPropertyKeyCreator( Config config, ComponentSwitcherContainer componentSwitcherContainer,\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n-            RequestContextFactory requestContextFactory, Supplier<Kernel> kernelProvider )\n+    DelegateInvocationHandler<TokenCreator> labelIdCreatorDelegate = new DelegateInvocationHandler<>(\n+        TokenCreator.class);\n+    TokenCreator labelIdCreator = (TokenCreator) newProxyInstance(TokenCreator.class.getClassLoader(),\n+        new Class[] {TokenCreator.class}, labelIdCreatorDelegate);\n+\n+    LabelTokenCreatorSwitcher modeSwitcher = new LabelTokenCreatorSwitcher(\n+        labelIdCreatorDelegate, masterDelegateInvocationHandler, requestContextFactory, kernelProvider,\n+        idGeneratorFactory);\n+\n+    componentSwitcherContainer.add(modeSwitcher);\n+    return labelIdCreator;\n+  }\n+\n+  private KernelData createKernelData(Config config, GraphDatabaseAPI graphDb, ClusterMembers members,\n+                                      FileSystemAbstraction fs, PageCache pageCache, File storeDir,\n+                                      LastUpdateTime lastUpdateTime, LastTxIdGetter txIdGetter, LifeSupport life)\n+  {\n+    ClusterDatabaseInfoProvider databaseInfo = new ClusterDatabaseInfoProvider(members,\n+        txIdGetter,\n+        lastUpdateTime);\n+    return life.add(new HighlyAvailableKernelData(graphDb, members, databaseInfo, fs, pageCache, storeDir, config));\n+  }\n+\n+  private void registerRecovery(final DatabaseInfo databaseInfo, final DependencyResolver dependencyResolver,\n+                                final LogService logging)\n+  {\n+    memberStateMachine.addHighAvailabilityMemberListener(new HighAvailabilityMemberListener.Adapter()\n     {\n-        if ( config.get( GraphDatabaseSettings.read_only ) )\n+      @Override\n+      public void masterIsAvailable(HighAvailabilityMemberChangeEvent event)\n+      {\n+        if (event.getOldState().equals(HighAvailabilityMemberState.TO_MASTER) &&\n+            event.getNewState().equals(HighAvailabilityMemberState.MASTER))\n         {\n-            return new ReadOnlyTokenCreator();\n+          doAfterRecoveryAndStartup();\n         }\n+      }\n \n-        DelegateInvocationHandler<TokenCreator> propertyKeyCreatorDelegate =\n-                new DelegateInvocationHandler<>( TokenCreator.class );\n-        TokenCreator propertyTokenCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(),\n-                new Class[]{TokenCreator.class}, propertyKeyCreatorDelegate );\n-\n-        PropertyKeyCreatorSwitcher propertyKeyCreatorModeSwitcher = new PropertyKeyCreatorSwitcher(\n-                propertyKeyCreatorDelegate, masterDelegateInvocationHandler,\n-                requestContextFactory, kernelProvider, idGeneratorFactory );\n-\n-        componentSwitcherContainer.add( propertyKeyCreatorModeSwitcher );\n-        return propertyTokenCreator;\n-    }\n-\n-    private TokenCreator createLabelIdCreator( Config config, ComponentSwitcherContainer componentSwitcherContainer,\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n-            RequestContextFactory requestContextFactory, Supplier<Kernel> kernelProvider )\n-    {\n-        if ( config.get( GraphDatabaseSettings.read_only ) )\n+      @Override\n+      public void slaveIsAvailable(HighAvailabilityMemberChangeEvent event)\n+      {\n+        if (event.getOldState().equals(HighAvailabilityMemberState.TO_SLAVE) &&\n+            event.getNewState().equals(HighAvailabilityMemberState.SLAVE))\n         {\n-            return new ReadOnlyTokenCreator();\n+          doAfterRecoveryAndStartup();\n         }\n+      }\n \n-        DelegateInvocationHandler<TokenCreator> labelIdCreatorDelegate = new DelegateInvocationHandler<>(\n-                TokenCreator.class );\n-        TokenCreator labelIdCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(),\n-                new Class[]{TokenCreator.class}, labelIdCreatorDelegate );\n-\n-        LabelTokenCreatorSwitcher modeSwitcher = new LabelTokenCreatorSwitcher(\n-                labelIdCreatorDelegate, masterDelegateInvocationHandler, requestContextFactory, kernelProvider,\n-                idGeneratorFactory );\n-\n-        componentSwitcherContainer.add( modeSwitcher );\n-        return labelIdCreator;\n-    }\n-\n-    private KernelData createKernelData( Config config, GraphDatabaseAPI graphDb, ClusterMembers members,\n-            FileSystemAbstraction fs, PageCache pageCache, File storeDir,\n-            LastUpdateTime lastUpdateTime, LastTxIdGetter txIdGetter, LifeSupport life )\n-    {\n-        ClusterDatabaseInfoProvider databaseInfo = new ClusterDatabaseInfoProvider( members,\n-                txIdGetter,\n-                lastUpdateTime );\n-        return life.add( new HighlyAvailableKernelData( graphDb, members, databaseInfo, fs, pageCache, storeDir, config ) );\n-    }\n-\n-    private void registerRecovery( final DatabaseInfo databaseInfo, final DependencyResolver dependencyResolver,\n-            final LogService logging )\n-    {\n-        memberStateMachine.addHighAvailabilityMemberListener( new HighAvailabilityMemberListener.Adapter()\n+      private void doAfterRecoveryAndStartup()\n+      {\n+        try\n         {\n-            @Override\n-            public void masterIsAvailable( HighAvailabilityMemberChangeEvent event )\n-            {\n-                if ( event.getOldState().equals( HighAvailabilityMemberState.TO_MASTER ) &&\n-                        event.getNewState().equals( HighAvailabilityMemberState.MASTER ) )\n-                {\n-                    doAfterRecoveryAndStartup();\n-                }\n-            }\n-\n-            @Override\n-            public void slaveIsAvailable( HighAvailabilityMemberChangeEvent event )\n-            {\n-                if ( event.getOldState().equals( HighAvailabilityMemberState.TO_SLAVE ) &&\n-                        event.getNewState().equals( HighAvailabilityMemberState.SLAVE ) )\n-                {\n-                    doAfterRecoveryAndStartup();\n-                }\n-            }\n-\n-            private void doAfterRecoveryAndStartup()\n-            {\n-                try\n-                {\n-                    HighlyAvailableEditionModule.this.doAfterRecoveryAndStartup( databaseInfo, dependencyResolver );\n-                    assureLastCommitTimestampInitialized( dependencyResolver );\n-                }\n-                catch ( Throwable throwable )\n-                {\n-                    Log messagesLog = logging.getInternalLog( EnterpriseEditionModule.class );\n-                    messagesLog.error( \"Post recovery error\", throwable );\n-                    try\n-                    {\n-                        memberStateMachine.stop();\n-                    }\n-                    catch ( Throwable throwable1 )\n-                    {\n-                        messagesLog.warn( \"Could not stop\", throwable1 );\n-                    }\n-                    try\n-                    {\n-                        memberStateMachine.start();\n-                    }\n-                    catch ( Throwable throwable1 )\n-                    {\n-                        messagesLog.warn( \"Could not start\", throwable1 );\n-                    }\n-                }\n-            }\n-        } );\n-    }\n-\n-    private static void assureLastCommitTimestampInitialized( DependencyResolver resolver )\n-    {\n-        MetaDataStore metaDataStore = resolver.resolveDependency( MetaDataStore.class );\n-        LogicalTransactionStore txStore = resolver.resolveDependency( LogicalTransactionStore.class );\n-\n-        TransactionId txInfo = metaDataStore.getLastCommittedTransaction();\n-        long lastCommitTimestampFromStore = txInfo.commitTimestamp();\n-        if ( txInfo.transactionId() == TransactionIdStore.BASE_TX_ID )\n-        {\n-            metaDataStore.setLastTransactionCommitTimestamp( TransactionIdStore.BASE_TX_COMMIT_TIMESTAMP );\n-            return;\n-        }\n-        if ( lastCommitTimestampFromStore == TransactionIdStore.UNKNOWN_TX_COMMIT_TIMESTAMP ||\n-             lastCommitTimestampFromStore == TransactionIdStore.BASE_TX_COMMIT_TIMESTAMP )\n+          HighlyAvailableEditionModule.this.doAfterRecoveryAndStartup(databaseInfo, dependencyResolver);\n+          assureLastCommitTimestampInitialized(dependencyResolver);\n+        } catch (Throwable throwable)\n         {\n-            long lastCommitTimestampFromLogs;\n-            try\n-            {\n-                TransactionMetadata metadata = txStore.getMetadataFor( txInfo.transactionId() );\n-                lastCommitTimestampFromLogs = metadata.getTimeWritten();\n-            }\n-            catch ( NoSuchTransactionException e )\n-            {\n-                lastCommitTimestampFromLogs = TransactionIdStore.UNKNOWN_TX_COMMIT_TIMESTAMP;\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new IllegalStateException( \"Unable to read transaction logs\", e );\n-            }\n-            metaDataStore.setLastTransactionCommitTimestamp( lastCommitTimestampFromLogs );\n+          Log messagesLog = logging.getInternalLog(EnterpriseEditionModule.class);\n+          messagesLog.error(\"Post recovery error\", throwable);\n+          try\n+          {\n+            memberStateMachine.stop();\n+          } catch (Throwable throwable1)\n+          {\n+            messagesLog.warn(\"Could not stop\", throwable1);\n+          }\n+          try\n+          {\n+            memberStateMachine.start();\n+          } catch (Throwable throwable1)\n+          {\n+            messagesLog.warn(\"Could not start\", throwable1);\n+          }\n         }\n-    }\n-\n-    private Server.Configuration masterServerConfig( final Config config )\n+      }\n+    });\n+  }\n+\n+  private static void assureLastCommitTimestampInitialized(DependencyResolver resolver)\n+  {\n+    MetaDataStore metaDataStore = resolver.resolveDependency(MetaDataStore.class);\n+    LogicalTransactionStore txStore = resolver.resolveDependency(LogicalTransactionStore.class);\n+\n+    TransactionId txInfo = metaDataStore.getLastCommittedTransaction();\n+    long lastCommitTimestampFromStore = txInfo.commitTimestamp();\n+    if (txInfo.transactionId() == TransactionIdStore.BASE_TX_ID)\n     {\n-        return commonConfig( config );\n+      metaDataStore.setLastTransactionCommitTimestamp(TransactionIdStore.BASE_TX_COMMIT_TIMESTAMP);\n+      return;\n     }\n-\n-    private Server.Configuration slaveServerConfig( final Config config )\n+    if (lastCommitTimestampFromStore == TransactionIdStore.UNKNOWN_TX_COMMIT_TIMESTAMP ||\n+        lastCommitTimestampFromStore == TransactionIdStore.BASE_TX_COMMIT_TIMESTAMP)\n     {\n-        return commonConfig( config );\n+      long lastCommitTimestampFromLogs;\n+      try\n+      {\n+        TransactionMetadata metadata = txStore.getMetadataFor(txInfo.transactionId());\n+        lastCommitTimestampFromLogs = metadata.getTimeWritten();\n+      } catch (NoSuchTransactionException e)\n+      {\n+        lastCommitTimestampFromLogs = TransactionIdStore.UNKNOWN_TX_COMMIT_TIMESTAMP;\n+      } catch (IOException e)\n+      {\n+        throw new IllegalStateException(\"Unable to read transaction logs\", e);\n+      }\n+      metaDataStore.setLastTransactionCommitTimestamp(lastCommitTimestampFromLogs);\n     }\n+  }\n \n-    private Server.Configuration commonConfig( final Config config )\n-    {\n-        return new Server.Configuration()\n-        {\n-            @Override\n-            public long getOldChannelThreshold()\n-            {\n-                return config.get( HaSettings.lock_read_timeout ).toMillis();\n-            }\n+  private Server.Configuration masterServerConfig(final Config config)\n+  {\n+    return commonConfig(config);\n+  }\n \n-            @Override\n-            public int getMaxConcurrentTransactions()\n-            {\n-                return config.get( HaSettings.max_concurrent_channels_per_slave );\n-            }\n+  private Server.Configuration slaveServerConfig(final Config config)\n+  {\n+    return commonConfig(config);\n+  }\n \n-            @Override\n-            public int getChunkSize()\n-            {\n-                return config.get( HaSettings.com_chunk_size ).intValue();\n-            }\n-\n-            @Override\n-            public HostnamePort getServerAddress()\n-            {\n-                return config.get( HaSettings.ha_server );\n-            }\n-        };\n-    }\n-\n-    @Override\n-    protected BoltConnectionTracker createSessionTracker()\n-    {\n-        return new StandardBoltConnectionTracker();\n-    }\n-\n-    @Override\n-    public void setupSecurityModule( PlatformModule platformModule, Procedures procedures )\n+  private Server.Configuration commonConfig(final Config config)\n+  {\n+    return new Server.Configuration()\n     {\n-        EnterpriseEditionModule.setupEnterpriseSecurityModule( platformModule, procedures );\n-    }\n+      @Override\n+      public long getOldChannelThreshold()\n+      {\n+        return config.get(HaSettings.lock_read_timeout).toMillis();\n+      }\n+\n+      @Override\n+      public int getMaxConcurrentTransactions()\n+      {\n+        return config.get(HaSettings.max_concurrent_channels_per_slave);\n+      }\n+\n+      @Override\n+      public int getChunkSize()\n+      {\n+        return config.get(HaSettings.com_chunk_size).intValue();\n+      }\n+\n+      @Override\n+      public HostnamePort getServerAddress()\n+      {\n+        return config.get(HaSettings.ha_server);\n+      }\n+    };\n+  }\n+\n+  @Override\n+  protected BoltConnectionTracker createSessionTracker()\n+  {\n+    return new StandardBoltConnectionTracker();\n+  }\n+\n+  @Override\n+  public void setupSecurityModule(PlatformModule platformModule, Procedures procedures)\n+  {\n+    EnterpriseEditionModule.setupEnterpriseSecurityModule(platformModule, procedures);\n+  }\n }\n",
            "diff_size": 1081
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "234",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "236",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 252).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "238",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 283).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "241",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 293).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "254",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 287).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "263",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "329",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "333",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "337",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "341",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "343",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "346",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 510).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "354",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 252).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "356",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 297).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "360",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "364",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 283).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "385",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "396",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "428",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "436",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 377).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "439",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 406).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "446",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "448",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 360).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "451",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "453",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 360).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "471",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "479",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "481",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "485",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "511",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "518",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "524",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "532",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "533",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "538",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "547",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "548",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "553",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "563",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "584",
                    "column": "90",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "593",
                    "column": "89",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "644",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3424/HighlyAvailableEditionModule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3424/HighlyAvailableEditionModule.java\nindex 728a199080c..bb134279522 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3424/HighlyAvailableEditionModule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3424/HighlyAvailableEditionModule.java\n@@ -187,8 +187,7 @@ import static org.neo4j.kernel.impl.transaction.log.TransactionMetadataCache.Tra\n  * This implementation of {@link org.neo4j.kernel.impl.factory.EditionModule} creates the implementations of services\n  * that are specific to the Enterprise edition.\n  */\n-public class HighlyAvailableEditionModule\n-        extends EditionModule\n+public class HighlyAvailableEditionModule extends EditionModule\n {\n     private HighAvailabilityMemberStateMachine memberStateMachine;\n     public ClusterMembers members;\n@@ -209,105 +208,59 @@ public class HighlyAvailableEditionModule\n         final Dependencies dependencies = platformModule.dependencies;\n         final LogService logging = platformModule.logging;\n         final Monitors monitors = platformModule.monitors;\n-\n-        this.accessCapability = config.get( GraphDatabaseSettings.read_only ) ? new ReadOnly() : new CanWrite();\n+this.accessCapability = config.get( GraphDatabaseSettings.read_only ) ? new ReadOnly() : new CanWrite();\n \n         idTypeConfigurationProvider = new EnterpriseIdTypeConfigurationProvider( config );\n-\n-        watcherService = createFileSystemWatcherService( platformModule.fileSystem, storeDir, logging,\n+watcherService = createFileSystemWatcherService( platformModule.fileSystem, storeDir, logging,\n                 platformModule.jobScheduler, config, fileWatcherFileNameFilter() );\n-        dependencies.satisfyDependencies( watcherService );\n+dependencies.satisfyDependencies( watcherService );\n         life.add( watcherService );\n \n         // Set Netty logger\n         InternalLoggerFactory.setDefaultFactory( new NettyLoggerFactory( logging.getInternalLogProvider() ) );\n-\n-        life.add( new BranchedDataMigrator( platformModule.storeDir, platformModule.pageCache ) );\n-        DelegateInvocationHandler<Master> masterDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( Master.class );\n-        Master master = (Master) newProxyInstance( Master.class.getClassLoader(), new Class[]{Master.class},\n+life.add( new BranchedDataMigrator( platformModule.storeDir, platformModule.pageCache ) );\n+        DelegateInvocationHandler<Master> masterDelegateInvocationHandler = new DelegateInvocationHandler<>( Master.class );\n+Master master = (Master) newProxyInstance( Master.class.getClassLoader(), new Class[]{Master.class },\n                 masterDelegateInvocationHandler );\n-        InstanceId serverId = config.get( ClusterSettings.server_id );\n-\n-        RequestContextFactory requestContextFactory = dependencies.satisfyDependency( new RequestContextFactory(\n-                serverId.toIntegerIndex(),\n-                dependencies.provideDependency( TransactionIdStore.class ) ) );\n-\n-        final long idReuseSafeZone = config.get( HaSettings.id_reuse_safe_zone_time ).toMillis();\n-        TransactionCommittingResponseUnpacker responseUnpacker = dependencies.satisfyDependency(\n-                new TransactionCommittingResponseUnpacker( dependencies,\n+InstanceId serverId = config.get( ClusterSettings.server_id );\n+RequestContextFactory requestContextFactory = dependencies.satisfyDependency( new RequestContextFactory( serverId.toIntegerIndex(), dependencies.provideDependency( TransactionIdStore.class ) ) );\n+    final long idReuseSafeZone = config.get( HaSettings.id_reuse_safe_zone_time ).toMillis();\n+        TransactionCommittingResponseUnpacker responseUnpacker = dependencies.satisfyDependency( new TransactionCommittingResponseUnpacker( dependencies,\n                         config.get( HaSettings.pull_apply_batch_size ), idReuseSafeZone ) );\n-\n-        Supplier<Kernel> kernelProvider = dependencies.provideDependency( Kernel.class );\n-\n-        transactionStartTimeout = config.get( HaSettings.state_switch_timeout ).toMillis();\n-\n-        DelegateInvocationHandler<ClusterMemberEvents> clusterEventsDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( ClusterMemberEvents.class );\n-        DelegateInvocationHandler<HighAvailabilityMemberContext> memberContextDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( HighAvailabilityMemberContext.class );\n-        DelegateInvocationHandler<ClusterMemberAvailability> clusterMemberAvailabilityDelegateInvocationHandler =\n-                new DelegateInvocationHandler<>( ClusterMemberAvailability.class );\n-\n-        ClusterMemberEvents clusterEvents = dependencies.satisfyDependency(\n-                (ClusterMemberEvents) newProxyInstance(\n-                        ClusterMemberEvents.class.getClassLoader(),\n-                        new Class[]{ClusterMemberEvents.class, Lifecycle.class},\n-                        clusterEventsDelegateInvocationHandler ) );\n-\n-        HighAvailabilityMemberContext memberContext = (HighAvailabilityMemberContext) newProxyInstance(\n-                HighAvailabilityMemberContext.class.getClassLoader(),\n-                new Class[]{HighAvailabilityMemberContext.class}, memberContextDelegateInvocationHandler );\n-        ClusterMemberAvailability clusterMemberAvailability = dependencies.satisfyDependency(\n-                (ClusterMemberAvailability) newProxyInstance(\n-                        ClusterMemberAvailability.class.getClassLoader(),\n-                        new Class[]{ClusterMemberAvailability.class},\n-                        clusterMemberAvailabilityDelegateInvocationHandler ) );\n-\n-        // TODO There's a cyclical dependency here that should be fixed\n+Supplier<Kernel> kernelProvider = dependencies.provideDependency( Kernel.class );\n+transactionStartTimeout = config.get( HaSettings.state_switch_timeout ).toMillis();\n+\n+        DelegateInvocationHandler<ClusterMemberEvents> clusterEventsDelegateInvocationHandler = new DelegateInvocationHandler<>( ClusterMemberEvents.class );\n+DelegateInvocationHandler<HighAvailabilityMemberContext> memberContextDelegateInvocationHandler = new DelegateInvocationHandler<>( HighAvailabilityMemberContext.class );\n+DelegateInvocationHandler<ClusterMemberAvailability> clusterMemberAvailabilityDelegateInvocationHandler = new DelegateInvocationHandler<>( ClusterMemberAvailability.class );\n+ClusterMemberEvents clusterEvents = dependencies.satisfyDependency((ClusterMemberEvents) newProxyInstance( ClusterMemberEvents.class.getClassLoader(), new Class[]{ClusterMemberEvents.class, Lifecycle.class }, clusterEventsDelegateInvocationHandler ) );\n+HighAvailabilityMemberContext memberContext = (HighAvailabilityMemberContext) newProxyInstance( HighAvailabilityMemberContext.class.getClassLoader(), new Class[]{HighAvailabilityMemberContext.class }, memberContextDelegateInvocationHandler );\n+ClusterMemberAvailability clusterMemberAvailability = dependencies.satisfyDependency((ClusterMemberAvailability) newProxyInstance( ClusterMemberAvailability.class.getClassLoader(), new Class[]{ClusterMemberAvailability.class }, clusterMemberAvailabilityDelegateInvocationHandler ) );\n+    // TODO There's a cyclical dependency here that should be fixed\n         final AtomicReference<HighAvailabilityMemberStateMachine> electionProviderRef = new AtomicReference<>();\n-        OnDiskLastTxIdGetter lastTxIdGetter = new OnDiskLastTxIdGetter(\n-                () -> platformModule.dependencies.resolveDependency(\n-                        TransactionIdStore.class ).getLastCommittedTransactionId() );\n-        ElectionCredentialsProvider electionCredentialsProvider = config.get( HaSettings.slave_only ) ?\n-                new NotElectableElectionCredentialsProvider() :\n-                new DefaultElectionCredentialsProvider(\n-                        config.get( ClusterSettings.server_id ),\n-                        lastTxIdGetter, () -> electionProviderRef.get().getCurrentState()\n-                );\n-\n-        ObjectStreamFactory objectStreamFactory = new ObjectStreamFactory();\n-\n-        ClusterClientModule clusterClientModule = new ClusterClientModule( clusteringLife, dependencies, monitors,\n+        OnDiskLastTxIdGetter lastTxIdGetter = new OnDiskLastTxIdGetter(() -> platformModule.dependencies.resolveDependency( TransactionIdStore.class ).getLastCommittedTransactionId() );\n+ElectionCredentialsProvider electionCredentialsProvider = config.get( HaSettings.slave_only ) ? new NotElectableElectionCredentialsProvider() : new DefaultElectionCredentialsProvider( config.get( ClusterSettings.server_id ), lastTxIdGetter, () -> electionProviderRef.get().getCurrentState() );\n+ObjectStreamFactory objectStreamFactory = new ObjectStreamFactory();\n+ClusterClientModule clusterClientModule = new ClusterClientModule( clusteringLife, dependencies, monitors,\n                 config, logging, electionCredentialsProvider );\n-        ClusterClient clusterClient = clusterClientModule.clusterClient;\n+ClusterClient clusterClient = clusterClientModule.clusterClient;\n         PaxosClusterMemberEvents localClusterEvents = new PaxosClusterMemberEvents( clusterClient, clusterClient,\n-                clusterClient, clusterClient, logging.getInternalLogProvider(),\n-                item ->\n+                clusterClient, clusterClient, logging.getInternalLogProvider(), item ->\n                 {\n                     for ( MemberIsAvailable member : item.getCurrentAvailableMembers() )\n                     {\n                         if ( member.getRoleUri().getScheme().equals( \"ha\" ) )\n                         {\n-                            if ( HighAvailabilityModeSwitcher.getServerId( member.getRoleUri() ).equals(\n-                                    platformModule.config.get( ClusterSettings.server_id ) ) )\n+                            if ( HighAvailabilityModeSwitcher.getServerId( member.getRoleUri() ).equals( platformModule.config.get( ClusterSettings.server_id ) ) )\n                             {\n-                                logging.getInternalLog( PaxosClusterMemberEvents.class ).error(\n-                                        String.format( \"Instance \" +\n-                                                        \"%s has\" +\n-                                                        \" the same serverId as ours (%s) - will not \" +\n-                                                        \"join this cluster\",\n-                                                member.getRoleUri(),\n-                                                config.get( ClusterSettings.server_id ).toIntegerIndex()\n-                                        ) );\n-                                return true;\n+                                logging.getInternalLog( PaxosClusterMemberEvents.class ).error( String.format( \"Instance \" + \"%s has\" + \" the same serverId as ours (%s) - will not \" + \"join this cluster\", member.getRoleUri(), config.get( ClusterSettings.server_id ).toIntegerIndex() ) );\n+return true;\n                             }\n                         }\n                     }\n                     return true;\n                 }, new HANewSnapshotFunction(), objectStreamFactory, objectStreamFactory,\n-                platformModule.monitors.newMonitor( NamedThreadFactory.Monitor.class )\n-        );\n+                platformModule.monitors.newMonitor( NamedThreadFactory.Monitor.class ));\n \n         // Force a reelection after we enter the cluster\n         // and when that election is finished refresh the snapshot\n@@ -331,43 +284,29 @@ public class HighlyAvailableEditionModule\n                 }\n             }\n         } );\n-\n-        HighAvailabilityMemberContext localMemberContext = new SimpleHighAvailabilityMemberContext( clusterClient\n-                .getServerId(), config.get( HaSettings.slave_only ) );\n-        PaxosClusterMemberAvailability localClusterMemberAvailability = new PaxosClusterMemberAvailability(\n-                clusterClient.getServerId(), clusterClient, clusterClient, logging.getInternalLogProvider(),\n-                objectStreamFactory,\n-                objectStreamFactory );\n-\n-        memberContextDelegateInvocationHandler.setDelegate( localMemberContext );\n+HighAvailabilityMemberContext localMemberContext = new SimpleHighAvailabilityMemberContext( clusterClient.getServerId(), config.get( HaSettings.slave_only ) );\n+PaxosClusterMemberAvailability localClusterMemberAvailability = new PaxosClusterMemberAvailability( clusterClient.getServerId(), clusterClient, clusterClient, logging.getInternalLogProvider(), objectStreamFactory, objectStreamFactory );\n+memberContextDelegateInvocationHandler.setDelegate( localMemberContext );\n         clusterEventsDelegateInvocationHandler.setDelegate( localClusterEvents );\n         clusterMemberAvailabilityDelegateInvocationHandler.setDelegate( localClusterMemberAvailability );\n-\n-        ObservedClusterMembers observedMembers = new ObservedClusterMembers( logging.getInternalLogProvider(),\n+ObservedClusterMembers observedMembers = new ObservedClusterMembers( logging.getInternalLogProvider(),\n                 clusterClient, clusterClient, clusterEvents, config.get( ClusterSettings.server_id ) );\n-\n-        memberStateMachine = new HighAvailabilityMemberStateMachine( memberContext,\n+memberStateMachine = new HighAvailabilityMemberStateMachine( memberContext,\n                 platformModule.availabilityGuard, observedMembers, clusterEvents, clusterClient,\n                 logging.getInternalLogProvider() );\n-\n-        members = dependencies.satisfyDependency( new ClusterMembers( observedMembers, memberStateMachine ) );\n-\n-        dependencies.satisfyDependency( memberStateMachine );\n+members = dependencies.satisfyDependency( new ClusterMembers( observedMembers, memberStateMachine ) );\n+dependencies.satisfyDependency( memberStateMachine );\n         paxosLife.add( memberStateMachine );\n         electionProviderRef.set( memberStateMachine );\n-\n-        HighAvailabilityLogger highAvailabilityLogger = new HighAvailabilityLogger( logging.getUserLogProvider(),\n-                config.get( ClusterSettings.server_id ) );\n-        platformModule.availabilityGuard.addListener( highAvailabilityLogger );\n+HighAvailabilityLogger highAvailabilityLogger = new HighAvailabilityLogger( logging.getUserLogProvider(), config.get( ClusterSettings.server_id ) );\n+platformModule.availabilityGuard.addListener( highAvailabilityLogger );\n         clusterEvents.addClusterMemberListener( highAvailabilityLogger );\n         clusterClient.addClusterListener( highAvailabilityLogger );\n-\n-        paxosLife.add( (Lifecycle)clusterEvents );\n+paxosLife.add( (Lifecycle) clusterEvents );\n         paxosLife.add( localClusterMemberAvailability );\n-\n-        HaIdGeneratorFactory editionIdGeneratorFactory = (HaIdGeneratorFactory) createIdGeneratorFactory( masterDelegateInvocationHandler,\n+HaIdGeneratorFactory editionIdGeneratorFactory = (HaIdGeneratorFactory) createIdGeneratorFactory( masterDelegateInvocationHandler,\n                 logging.getInternalLogProvider(), requestContextFactory, fs );\n-        eligibleForIdReuse = new HaIdReuseEligibility( members, platformModule.clock, idReuseSafeZone );\n+eligibleForIdReuse = new HaIdReuseEligibility( members, platformModule.clock, idReuseSafeZone );\n         createIdComponents( platformModule, dependencies, editionIdGeneratorFactory );\n         dependencies.satisfyDependency( idGeneratorFactory );\n         dependencies.satisfyDependency( idController );\n@@ -384,167 +323,94 @@ public class HighlyAvailableEditionModule\n         // but merely provide a way to get access to it. That's why this is a Supplier and will be asked\n         // later, after the data source module and all that have started.\n         @SuppressWarnings( {\"deprecation\", \"unchecked\"} )\n-        Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader =\n-                (Supplier) dependencies.provideDependency( LogEntryReader.class );\n-\n-        MasterClientResolver masterClientResolver = new MasterClientResolver( logging.getInternalLogProvider(),\n-                responseUnpacker,\n-                invalidEpochHandler,\n+        Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader = (Supplier) dependencies.provideDependency( LogEntryReader.class );\n+MasterClientResolver masterClientResolver = new MasterClientResolver( logging.getInternalLogProvider(), responseUnpacker, invalidEpochHandler,\n                 (int) config.get( HaSettings.read_timeout ).toMillis(),\n-                (int) config.get( HaSettings.lock_read_timeout ).toMillis(),\n-                config.get( HaSettings.max_concurrent_channels_per_slave ),\n-                config.get( HaSettings.com_chunk_size ).intValue(),\n-                logEntryReader );\n-\n-        LastUpdateTime lastUpdateTime = new LastUpdateTime();\n+                (int) config.get( HaSettings.lock_read_timeout ).toMillis(), config.get( HaSettings.max_concurrent_channels_per_slave ), config.get( HaSettings.com_chunk_size ).intValue(), logEntryReader );\n+LastUpdateTime lastUpdateTime = new LastUpdateTime();\n \n-        DelegateInvocationHandler<UpdatePuller> updatePullerDelegate =\n-                new DelegateInvocationHandler<>( UpdatePuller.class );\n-        UpdatePuller updatePullerProxy = (UpdatePuller) Proxy.newProxyInstance(\n-                UpdatePuller.class .getClassLoader(), new Class[]{UpdatePuller.class}, updatePullerDelegate );\n-        dependencies.satisfyDependency( updatePullerProxy );\n-\n-        PullerFactory pullerFactory = new PullerFactory( requestContextFactory, master, lastUpdateTime,\n+        DelegateInvocationHandler<UpdatePuller> updatePullerDelegate = new DelegateInvocationHandler<>( UpdatePuller.class );\n+UpdatePuller updatePullerProxy = (UpdatePuller) Proxy.newProxyInstance( UpdatePuller.class .getClassLoader(), new Class[]{UpdatePuller.class }, updatePullerDelegate );\n+dependencies.satisfyDependency( updatePullerProxy );\n+PullerFactory pullerFactory = new PullerFactory( requestContextFactory, master, lastUpdateTime,\n                 logging.getInternalLogProvider(), serverId, invalidEpochHandler,\n-                config.get( HaSettings.pull_interval ).toMillis(), platformModule.jobScheduler,\n-                dependencies, platformModule.availabilityGuard, memberStateMachine, monitors );\n-\n-        dependencies.satisfyDependency( paxosLife.add( pullerFactory.createObligationFulfiller( updatePullerProxy ) ) );\n-\n-        Function<Slave, SlaveServer> slaveServerFactory =\n-                slave -> new SlaveServer( slave, slaveServerConfig( config ), logging.getInternalLogProvider(),\n-                        monitors.newMonitor( ByteCounterMonitor.class, SlaveServer.class ),\n-                        monitors.newMonitor( RequestMonitor.class, SlaveServer.class ) );\n-\n-        SwitchToSlave switchToSlaveInstance = chooseSwitchToSlaveStrategy( platformModule, config, dependencies, logging, monitors,\n-                masterDelegateInvocationHandler, requestContextFactory, clusterMemberAvailability,\n-                masterClientResolver, updatePullerProxy, pullerFactory, slaveServerFactory, editionIdGeneratorFactory );\n-\n-        final Factory<MasterImpl.SPI> masterSPIFactory =\n-                () -> new DefaultMasterImplSPI( platformModule.graphDatabaseFacade, platformModule.fileSystem,\n-                        platformModule.monitors,\n-                        labelTokenHolder, propertyKeyTokenHolder, relationshipTypeTokenHolder, this.idGeneratorFactory,\n-                        platformModule.dependencies.resolveDependency( TransactionCommitProcess.class ),\n-                        platformModule.dependencies.resolveDependency( CheckPointer.class ),\n-                        platformModule.dependencies.resolveDependency( TransactionIdStore.class ),\n-                        platformModule.dependencies.resolveDependency( LogicalTransactionStore.class ),\n-                        platformModule.dependencies.resolveDependency( NeoStoreDataSource.class ),\n-                        platformModule.dependencies.resolveDependency( PageCache.class ),\n-                        platformModule.storeCopyCheckPointMutex,\n+                config.get( HaSettings.pull_interval ).toMillis(), platformModule.jobScheduler, dependencies, platformModule.availabilityGuard, memberStateMachine, monitors );\n+dependencies.satisfyDependency( paxosLife.add( pullerFactory.createObligationFulfiller( updatePullerProxy ) ) );\n+\n+        Function<Slave,SlaveServer> slaveServerFactory =\n+                slave -> new SlaveServer( slave, slaveServerConfig( config ), logging.getInternalLogProvider(), monitors.newMonitor( ByteCounterMonitor.class, SlaveServer.class ), monitors.newMonitor( RequestMonitor.class, SlaveServer.class ) );\n+SwitchToSlave switchToSlaveInstance = chooseSwitchToSlaveStrategy( platformModule, config, dependencies, logging, monitors,\n+                masterDelegateInvocationHandler, requestContextFactory, clusterMemberAvailability, masterClientResolver, updatePullerProxy, pullerFactory, slaveServerFactory, editionIdGeneratorFactory );\n+    final Factory<MasterImpl.SPI> masterSPIFactory = () -> new DefaultMasterImplSPI( platformModule.graphDatabaseFacade, platformModule.fileSystem,\n+                        platformModule.monitors, labelTokenHolder, propertyKeyTokenHolder, relationshipTypeTokenHolder, this.idGeneratorFactory,\n+                        platformModule.dependencies.resolveDependency( TransactionCommitProcess.class ), platformModule.dependencies.resolveDependency( CheckPointer.class ), platformModule.dependencies.resolveDependency( TransactionIdStore.class ), platformModule.dependencies.resolveDependency( LogicalTransactionStore.class ), platformModule.dependencies.resolveDependency( NeoStoreDataSource.class ), platformModule.dependencies.resolveDependency( PageCache.class ), platformModule.storeCopyCheckPointMutex,\n                         logging.getInternalLogProvider() );\n-\n-        final Factory<ConversationSPI> conversationSPIFactory =\n-                () -> new DefaultConversationSPI( lockManager, platformModule.jobScheduler );\n-        Factory<ConversationManager> conversationManagerFactory =\n-                () -> new ConversationManager( conversationSPIFactory.newInstance(), config );\n-\n-        BiFunction<ConversationManager, LifeSupport, Master> masterFactory = ( conversationManager, life1 ) ->\n-                life1.add( new MasterImpl( masterSPIFactory.newInstance(),\n-                conversationManager, monitors.newMonitor( MasterImpl.Monitor.class, MasterImpl.class ), config ) );\n-\n-        BiFunction<Master, ConversationManager, MasterServer> masterServerFactory =\n-                ( master1, conversationManager ) ->\n+    final Factory<ConversationSPI> conversationSPIFactory = () -> new DefaultConversationSPI( lockManager, platformModule.jobScheduler );\n+Factory<ConversationManager> conversationManagerFactory = () -> new ConversationManager( conversationSPIFactory.newInstance(), config );\n+BiFunction<ConversationManager, LifeSupport, Master> masterFactory = ( conversationManager, life1 ) ->\n+life1.add( new MasterImpl( masterSPIFactory.newInstance(), conversationManager, monitors.newMonitor( MasterImpl.Monitor.class, MasterImpl.class ), config ) );\n+BiFunction<Master, ConversationManager, MasterServer> masterServerFactory = ( master1, conversationManager ) ->\n                 {\n-                    TransactionChecksumLookup txChecksumLookup = new TransactionChecksumLookup(\n-                            platformModule.dependencies.resolveDependency( TransactionIdStore.class ),\n-                            platformModule.dependencies.resolveDependency( LogicalTransactionStore.class ) );\n-\n-                    return new MasterServer( master1, logging.getInternalLogProvider(),\n-                            masterServerConfig( config ),\n-                            new BranchDetectingTxVerifier( logging.getInternalLogProvider(), txChecksumLookup ),\n-                            monitors.newMonitor( ByteCounterMonitor.class, MasterServer.class ),\n-                            monitors.newMonitor( RequestMonitor.class, MasterServer.class ), conversationManager,\n+                    TransactionChecksumLookup txChecksumLookup = new TransactionChecksumLookup( platformModule.dependencies.resolveDependency( TransactionIdStore.class ), platformModule.dependencies.resolveDependency( LogicalTransactionStore.class ) );\n+return new MasterServer( master1, logging.getInternalLogProvider(),\n+                            masterServerConfig( config ), new BranchDetectingTxVerifier( logging.getInternalLogProvider(), txChecksumLookup ), monitors.newMonitor( ByteCounterMonitor.class, MasterServer.class ), monitors.newMonitor( RequestMonitor.class, MasterServer.class ), conversationManager,\n                             logEntryReader.get() );\n-                };\n-\n-        SwitchToMaster switchToMasterInstance = new SwitchToMaster( logging, editionIdGeneratorFactory,\n-                config, dependencies.provideDependency( SlaveFactory.class ),\n-                conversationManagerFactory,\n-                masterFactory,\n-                masterServerFactory,\n-                masterDelegateInvocationHandler, clusterMemberAvailability,\n+    };\n+SwitchToMaster switchToMasterInstance = new SwitchToMaster( logging, editionIdGeneratorFactory,\n+                config, dependencies.provideDependency( SlaveFactory.class ), conversationManagerFactory, masterFactory, masterServerFactory, masterDelegateInvocationHandler, clusterMemberAvailability,\n                 platformModule.dependencies.provideDependency( NeoStoreDataSource.class ) );\n-\n-        ComponentSwitcherContainer componentSwitcherContainer = new ComponentSwitcherContainer();\n+ComponentSwitcherContainer componentSwitcherContainer = new ComponentSwitcherContainer();\n         Supplier<StoreId> storeIdSupplier = () -> dependencies.resolveDependency( NeoStoreDataSource.class ).getStoreId();\n-\n-        HighAvailabilityModeSwitcher highAvailabilityModeSwitcher = new HighAvailabilityModeSwitcher(\n-                switchToSlaveInstance, switchToMasterInstance, clusterClient, clusterMemberAvailability, clusterClient,\n-                storeIdSupplier, config.get( ClusterSettings.server_id ), componentSwitcherContainer,\n+HighAvailabilityModeSwitcher highAvailabilityModeSwitcher = new HighAvailabilityModeSwitcher( switchToSlaveInstance, switchToMasterInstance, clusterClient, clusterMemberAvailability, clusterClient, storeIdSupplier, config.get( ClusterSettings.server_id ), componentSwitcherContainer,\n                 platformModule.dataSourceManager, logging );\n-\n-        exceptionHandlerRef.set( highAvailabilityModeSwitcher );\n-\n-        clusterClient.addBindingListener( highAvailabilityModeSwitcher );\n+exceptionHandlerRef.set( highAvailabilityModeSwitcher );\n+clusterClient.addBindingListener( highAvailabilityModeSwitcher );\n         memberStateMachine.addHighAvailabilityMemberListener( highAvailabilityModeSwitcher );\n-\n-        paxosLife.add( highAvailabilityModeSwitcher );\n-\n-        componentSwitcherContainer.add( new UpdatePullerSwitcher( updatePullerDelegate, pullerFactory ) );\n-\n-        life.add( requestContextFactory );\n+paxosLife.add( highAvailabilityModeSwitcher );\n+componentSwitcherContainer.add( new UpdatePullerSwitcher( updatePullerDelegate, pullerFactory ) );\n+life.add( requestContextFactory );\n         life.add( responseUnpacker );\n-\n-        platformModule.diagnosticsManager.appendProvider( new HighAvailabilityDiagnostics( memberStateMachine,\n+platformModule.diagnosticsManager.appendProvider( new HighAvailabilityDiagnostics( memberStateMachine,\n                 clusterClient ) );\n-\n-        dependencies.satisfyDependency( SslPolicyLoader.create( config, logging.getInternalLogProvider() ) ); // for bolt and web server\n+dependencies.satisfyDependency( SslPolicyLoader.create( config, logging.getInternalLogProvider() ) ); // for bolt and web server\n \n         // Create HA services\n-        lockManager = dependencies.satisfyDependency(\n-                createLockManager( componentSwitcherContainer, config, masterDelegateInvocationHandler,\n+        lockManager = dependencies.satisfyDependency( createLockManager( componentSwitcherContainer, config, masterDelegateInvocationHandler,\n                         requestContextFactory, platformModule.availabilityGuard, platformModule.clock, logging ) );\n-\n-        statementLocksFactory = createStatementLocksFactory( componentSwitcherContainer, config, logging );\n-\n-        propertyKeyTokenHolder = dependencies.satisfyDependency( new DelegatingPropertyKeyTokenHolder(\n-                createPropertyKeyCreator( config, componentSwitcherContainer,\n+statementLocksFactory = createStatementLocksFactory( componentSwitcherContainer, config, logging );\n+propertyKeyTokenHolder = dependencies.satisfyDependency( new DelegatingPropertyKeyTokenHolder( createPropertyKeyCreator( config, componentSwitcherContainer,\n                         masterDelegateInvocationHandler, requestContextFactory, kernelProvider ) ) );\n-        labelTokenHolder = dependencies.satisfyDependency( new DelegatingLabelTokenHolder( createLabelIdCreator( config,\n-                componentSwitcherContainer, masterDelegateInvocationHandler, requestContextFactory,\n-                kernelProvider ) ) );\n-        relationshipTypeTokenHolder = dependencies.satisfyDependency( new DelegatingRelationshipTypeTokenHolder(\n-                createRelationshipTypeCreator( config, componentSwitcherContainer,\n+labelTokenHolder = dependencies.satisfyDependency( new DelegatingLabelTokenHolder( createLabelIdCreator( config,\n+                componentSwitcherContainer, masterDelegateInvocationHandler, requestContextFactory, kernelProvider ) ) );\n+relationshipTypeTokenHolder = dependencies.satisfyDependency( new DelegatingRelationshipTypeTokenHolder( createRelationshipTypeCreator( config, componentSwitcherContainer,\n                         masterDelegateInvocationHandler, requestContextFactory, kernelProvider ) ) );\n-\n-        dependencies.satisfyDependency(\n-                createKernelData( config, platformModule.graphDatabaseFacade, members, fs, platformModule.pageCache,\n+dependencies.satisfyDependency( createKernelData( config, platformModule.graphDatabaseFacade, members, fs, platformModule.pageCache,\n                         storeDir, lastUpdateTime, lastTxIdGetter, life ) );\n-\n-        commitProcessFactory = createCommitProcessFactory( dependencies, logging, monitors, config, paxosLife,\n-                clusterClient, members, platformModule.jobScheduler, master, requestContextFactory,\n-                componentSwitcherContainer, logEntryReader );\n-\n-        headerInformationFactory = createHeaderInformationFactory( memberContext );\n-\n-        schemaWriteGuard = () ->\n+commitProcessFactory = createCommitProcessFactory( dependencies, logging, monitors, config, paxosLife,\n+                clusterClient, members, platformModule.jobScheduler, master, requestContextFactory, componentSwitcherContainer, logEntryReader );\n+headerInformationFactory = createHeaderInformationFactory( memberContext );\n+schemaWriteGuard = () ->\n         {\n             if ( !memberStateMachine.isMaster() )\n             {\n-                throw new InvalidTransactionTypeKernelException(\n-                        \"Modifying the database schema can only be done on the master server, \" +\n-                        \"this server is a slave. Please issue schema modification commands directly to the master.\"\n-                );\n+                throw new InvalidTransactionTypeKernelException( \"Modifying the database schema can only be done on the master server, \" + \"this server is a slave. Please issue schema modification commands directly to the master.\" );\n             }\n         };\n \n         config.augment( GraphDatabaseSettings.allow_upgrade, Settings.FALSE );\n-\n-        constraintSemantics = new EnterpriseConstraintSemantics();\n+constraintSemantics = new EnterpriseConstraintSemantics();\n \n         coreAPIAvailabilityGuard = new CoreAPIAvailabilityGuard( platformModule.availabilityGuard, transactionStartTimeout );\n \n         registerRecovery( platformModule.databaseInfo, dependencies, logging );\n-\n-        UsageData usageData = dependencies.resolveDependency( UsageData.class );\n+UsageData usageData = dependencies.resolveDependency( UsageData.class );\n         publishEditionInfo( usageData, platformModule.databaseInfo, config );\n         publishServerId( config, usageData );\n \n         // Ordering of lifecycles is important. Clustering infrastructure should start before paxos components\n         life.add( clusteringLife );\n         life.add( paxosLife );\n-\n-        dependencies.satisfyDependency( createSessionTracker() );\n+dependencies.satisfyDependency( createSessionTracker() );\n     }\n \n     @Override\n@@ -558,65 +424,36 @@ public class HighlyAvailableEditionModule\n     {\n         StatementLocksFactory configuredStatementLocks = new StatementLocksFactorySelector( lockManager, config, logging ).select();\n \n-        DelegateInvocationHandler<StatementLocksFactory> locksFactoryDelegate =\n-                new DelegateInvocationHandler<>( StatementLocksFactory.class );\n-        StatementLocksFactory locksFactory =\n-                (StatementLocksFactory) newProxyInstance( StatementLocksFactory.class.getClassLoader(),\n-                        new Class[]{StatementLocksFactory.class}, locksFactoryDelegate );\n-\n-        StatementLocksFactorySwitcher\n-                locksSwitcher = new StatementLocksFactorySwitcher( locksFactoryDelegate, configuredStatementLocks );\n-        componentSwitcherContainer.add( locksSwitcher );\n-\n-        return locksFactory;\n+        DelegateInvocationHandler<StatementLocksFactory> locksFactoryDelegate = new DelegateInvocationHandler<>( StatementLocksFactory.class );\n+StatementLocksFactory locksFactory = (StatementLocksFactory) newProxyInstance( StatementLocksFactory.class.getClassLoader(), new Class[]{StatementLocksFactory.class }, locksFactoryDelegate );\n+StatementLocksFactorySwitcher locksSwitcher = new StatementLocksFactorySwitcher( locksFactoryDelegate, configuredStatementLocks );\n+componentSwitcherContainer.add( locksSwitcher );\n+return locksFactory;\n     }\n \n     static Predicate<String> fileWatcherFileNameFilter()\n     {\n-        return Predicates.any(\n-                fileName -> fileName.startsWith( TransactionLogFiles.DEFAULT_NAME ),\n-                fileName -> fileName.startsWith( IndexConfigStore.INDEX_DB_FILE_NAME ),\n-                filename -> filename.startsWith( StoreUtil.BRANCH_SUBDIRECTORY ),\n-                filename -> filename.startsWith( StoreUtil.TEMP_COPY_DIRECTORY_NAME ),\n-                filename -> filename.endsWith( PageCacheWarmer.SUFFIX_CACHEPROF )\n-        );\n+        return Predicates.any( fileName -> fileName.startsWith( TransactionLogFiles.DEFAULT_NAME ), fileName -> fileName.startsWith( IndexConfigStore.INDEX_DB_FILE_NAME ), filename -> filename.startsWith( StoreUtil.BRANCH_SUBDIRECTORY ), filename -> filename.startsWith( StoreUtil.TEMP_COPY_DIRECTORY_NAME ), filename -> filename.endsWith( PageCacheWarmer.SUFFIX_CACHEPROF ) );\n     }\n \n-    private SwitchToSlave chooseSwitchToSlaveStrategy( PlatformModule platformModule, Config config, Dependencies\n-            dependencies, LogService logging, Monitors monitors, DelegateInvocationHandler<Master>\n-            masterDelegateInvocationHandler, RequestContextFactory requestContextFactory, ClusterMemberAvailability\n-            clusterMemberAvailability, MasterClientResolver masterClientResolver, UpdatePuller updatePullerProxy,\n-            PullerFactory pullerFactory, Function<Slave, SlaveServer> slaveServerFactory, HaIdGeneratorFactory idGeneratorFactory )\n+    private SwitchToSlave chooseSwitchToSlaveStrategy( PlatformModule platformModule, Config config, Dependencies dependencies, LogService logging, Monitors monitors, DelegateInvocationHandler<Master> masterDelegateInvocationHandler, RequestContextFactory requestContextFactory, ClusterMemberAvailability clusterMemberAvailability, MasterClientResolver masterClientResolver, UpdatePuller updatePullerProxy,\n+            PullerFactory pullerFactory, Function<Slave,SlaveServer> slaveServerFactory, HaIdGeneratorFactory idGeneratorFactory )\n     {\n         switch ( config.get( HaSettings.branched_data_copying_strategy ) )\n         {\n-            case branch_then_copy:\n+case branch_then_copy:\n                 return new SwitchToSlaveBranchThenCopy( platformModule.storeDir, logging,\n-                        platformModule.fileSystem, config, dependencies, idGeneratorFactory,\n-                        masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory,\n-                        pullerFactory,\n+                        platformModule.fileSystem, config, dependencies, idGeneratorFactory, masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory, pullerFactory,\n                         platformModule.kernelExtensions.listFactories(), masterClientResolver,\n-                        monitors.newMonitor( SwitchToSlave.Monitor.class ),\n-                        monitors.newMonitor( StoreCopyClientMonitor.class ),\n-                        dependencies.provideDependency( NeoStoreDataSource.class ),\n-                        dependencies.provideDependency( TransactionIdStore.class ),\n-                        slaveServerFactory, updatePullerProxy, platformModule.pageCache,\n-                        monitors, platformModule.transactionMonitor );\n-            case copy_then_branch:\n+                        monitors.newMonitor( SwitchToSlave.Monitor.class ), monitors.newMonitor( StoreCopyClientMonitor.class ), dependencies.provideDependency( NeoStoreDataSource.class ), dependencies.provideDependency( TransactionIdStore.class ), slaveServerFactory, updatePullerProxy, platformModule.pageCache, monitors, platformModule.transactionMonitor );\n+    case copy_then_branch:\n                 return new SwitchToSlaveCopyThenBranch( platformModule.storeDir, logging,\n-                        platformModule.fileSystem, config, dependencies, idGeneratorFactory,\n-                        masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory,\n-                        pullerFactory,\n+                        platformModule.fileSystem, config, dependencies, idGeneratorFactory, masterDelegateInvocationHandler, clusterMemberAvailability, requestContextFactory, pullerFactory,\n                         platformModule.kernelExtensions.listFactories(), masterClientResolver,\n-                        monitors.newMonitor( SwitchToSlave.Monitor.class ),\n-                        monitors.newMonitor( StoreCopyClientMonitor.class ),\n-                        dependencies.provideDependency( NeoStoreDataSource.class ),\n-                        dependencies.provideDependency( TransactionIdStore.class ),\n-                        slaveServerFactory, updatePullerProxy, platformModule.pageCache,\n-                        monitors, platformModule.transactionMonitor );\n-            default:\n+                        monitors.newMonitor( SwitchToSlave.Monitor.class ), monitors.newMonitor( StoreCopyClientMonitor.class ), dependencies.provideDependency( NeoStoreDataSource.class ), dependencies.provideDependency( TransactionIdStore.class ), slaveServerFactory, updatePullerProxy, platformModule.pageCache, monitors, platformModule.transactionMonitor );\n+    default:\n                 throw new RuntimeException( \"Unknown branched data copying strategy\" );\n-        }\n+    }\n     }\n \n     private void publishServerId( Config config, UsageData sysInfo )\n@@ -624,57 +461,45 @@ public class HighlyAvailableEditionModule\n         sysInfo.set( UsageDataKeys.serverId, config.get( ClusterSettings.server_id ).toString() );\n     }\n \n-    private TransactionHeaderInformationFactory createHeaderInformationFactory(\n-            final HighAvailabilityMemberContext memberContext )\n+    private TransactionHeaderInformationFactory createHeaderInformationFactory( final HighAvailabilityMemberContext memberContext )\n     {\n         return new TransactionHeaderInformationFactory.WithRandomBytes()\n         {\n             @Override\n             protected TransactionHeaderInformation createUsing( byte[] additionalHeader )\n             {\n-                return new TransactionHeaderInformation( memberContext.getElectedMasterId().toIntegerIndex(),\n-                        memberContext.getMyId().toIntegerIndex(), additionalHeader );\n-            }\n+                return new TransactionHeaderInformation( memberContext.getElectedMasterId().toIntegerIndex(), memberContext.getMyId().toIntegerIndex(), additionalHeader );\n+    }\n         };\n     }\n \n     private CommitProcessFactory createCommitProcessFactory( Dependencies dependencies, LogService logging,\n             Monitors monitors, Config config, LifeSupport paxosLife, ClusterClient clusterClient,\n             ClusterMembers members, JobScheduler jobScheduler, Master master,\n-            RequestContextFactory requestContextFactory, ComponentSwitcherContainer componentSwitcherContainer,\n-            Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader )\n+            RequestContextFactory requestContextFactory, ComponentSwitcherContainer componentSwitcherContainer, Supplier<LogEntryReader<ReadableClosablePositionAwareChannel>> logEntryReader )\n     {\n-        DefaultSlaveFactory slaveFactory = dependencies.satisfyDependency( new DefaultSlaveFactory(\n-                logging.getInternalLogProvider(), monitors, config.get( HaSettings.com_chunk_size ).intValue(),\n-                logEntryReader ) );\n-\n-        HostnamePort me = config.get( ClusterSettings.cluster_server );\n+        DefaultSlaveFactory slaveFactory = dependencies.satisfyDependency( new DefaultSlaveFactory( logging.getInternalLogProvider(), monitors, config.get( HaSettings.com_chunk_size ).intValue(), logEntryReader ) );\n+HostnamePort me = config.get( ClusterSettings.cluster_server );\n         Slaves slaves = dependencies.satisfyDependency( paxosLife.add( new HighAvailabilitySlaves( members,\n                 clusterClient, slaveFactory, me ) ) );\n+TransactionPropagator transactionPropagator = new TransactionPropagator( TransactionPropagator.from( config ), logging.getInternalLog( TransactionPropagator.class ), slaves, new CommitPusher( jobScheduler ) );\n+paxosLife.add( transactionPropagator );\n \n-        TransactionPropagator transactionPropagator = new TransactionPropagator( TransactionPropagator.from( config ),\n-                logging.getInternalLog( TransactionPropagator.class ), slaves, new CommitPusher( jobScheduler ) );\n-        paxosLife.add( transactionPropagator );\n-\n-        DelegateInvocationHandler<TransactionCommitProcess> commitProcessDelegate = new DelegateInvocationHandler<>(\n-                TransactionCommitProcess.class );\n-\n-        CommitProcessSwitcher commitProcessSwitcher = new CommitProcessSwitcher( transactionPropagator,\n+        DelegateInvocationHandler<TransactionCommitProcess> commitProcessDelegate = new DelegateInvocationHandler<>( TransactionCommitProcess.class );\n+CommitProcessSwitcher commitProcessSwitcher = new CommitProcessSwitcher( transactionPropagator,\n                 master, commitProcessDelegate, requestContextFactory, monitors, dependencies );\n-        componentSwitcherContainer.add( commitProcessSwitcher );\n-\n-        return new HighlyAvailableCommitProcessFactory( commitProcessDelegate );\n+componentSwitcherContainer.add( commitProcessSwitcher );\n+return new HighlyAvailableCommitProcessFactory( commitProcessDelegate );\n     }\n \n-    private IdGeneratorFactory createIdGeneratorFactory(\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+    private IdGeneratorFactory createIdGeneratorFactory( DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n             LogProvider logging,\n             RequestContextFactory requestContextFactory,\n             FileSystemAbstraction fs )\n     {\n         HaIdGeneratorFactory idGeneratorFactory = new HaIdGeneratorFactory( masterDelegateInvocationHandler, logging,\n                 requestContextFactory, fs, idTypeConfigurationProvider );\n-        /*\n+    /*\n          * We don't really switch to master here. We just need to initialize the idGenerator so the initial store\n          * can be started (if required). In any case, the rest of the database is in pending state, so nothing will\n          * happen until events start arriving and that will set us to the proper state anyway.\n@@ -683,49 +508,34 @@ public class HighlyAvailableEditionModule\n         return idGeneratorFactory;\n     }\n \n-    private Locks createLockManager( ComponentSwitcherContainer componentSwitcherContainer, Config config,\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+    private Locks createLockManager( ComponentSwitcherContainer componentSwitcherContainer, Config config, DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n             RequestContextFactory requestContextFactory, AvailabilityGuard availabilityGuard, Clock clock, LogService logService )\n     {\n         DelegateInvocationHandler<Locks> lockManagerDelegate = new DelegateInvocationHandler<>( Locks.class );\n-        Locks lockManager = (Locks) newProxyInstance( Locks.class.getClassLoader(), new Class[]{Locks.class},\n+        Locks lockManager = (Locks) newProxyInstance( Locks.class.getClassLoader(), new Class[]{Locks.class },\n                 lockManagerDelegate );\n-\n-        Factory<Locks> locksFactory = () -> CommunityEditionModule.createLockManager( config, clock, logService );\n-\n-        LockManagerSwitcher lockManagerModeSwitcher = new LockManagerSwitcher(\n-                lockManagerDelegate, masterDelegateInvocationHandler, requestContextFactory, availabilityGuard,\n-                locksFactory, logService.getInternalLogProvider(), config );\n-\n-        componentSwitcherContainer.add( lockManagerModeSwitcher );\n+Factory<Locks> locksFactory = () -> CommunityEditionModule.createLockManager( config, clock, logService );\n+LockManagerSwitcher lockManagerModeSwitcher = new LockManagerSwitcher( lockManagerDelegate, masterDelegateInvocationHandler, requestContextFactory, availabilityGuard, locksFactory, logService.getInternalLogProvider(), config );\n+componentSwitcherContainer.add( lockManagerModeSwitcher );\n         return lockManager;\n     }\n \n     private TokenCreator createRelationshipTypeCreator( Config config,\n-            ComponentSwitcherContainer componentSwitcherContainer,\n-            DelegateInvocationHandler<Master> masterInvocationHandler, RequestContextFactory requestContextFactory,\n-            Supplier<Kernel> kernelProvider )\n+            ComponentSwitcherContainer componentSwitcherContainer, DelegateInvocationHandler<Master> masterInvocationHandler, RequestContextFactory requestContextFactory, Supplier<Kernel> kernelProvider )\n     {\n         if ( config.get( GraphDatabaseSettings.read_only ) )\n         {\n             return new ReadOnlyTokenCreator();\n         }\n \n-        DelegateInvocationHandler<TokenCreator> relationshipTypeCreatorDelegate =\n-                new DelegateInvocationHandler<>( TokenCreator.class );\n-        TokenCreator relationshipTypeCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(),\n-                new Class[]{TokenCreator.class}, relationshipTypeCreatorDelegate );\n-\n-        RelationshipTypeCreatorSwitcher typeCreatorModeSwitcher = new RelationshipTypeCreatorSwitcher(\n-                relationshipTypeCreatorDelegate, masterInvocationHandler, requestContextFactory,\n-                kernelProvider, idGeneratorFactory );\n-\n-        componentSwitcherContainer.add( typeCreatorModeSwitcher );\n+        DelegateInvocationHandler<TokenCreator> relationshipTypeCreatorDelegate = new DelegateInvocationHandler<>( TokenCreator.class );\n+TokenCreator relationshipTypeCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(), new Class[]{TokenCreator.class }, relationshipTypeCreatorDelegate );\n+RelationshipTypeCreatorSwitcher typeCreatorModeSwitcher = new RelationshipTypeCreatorSwitcher( relationshipTypeCreatorDelegate, masterInvocationHandler, requestContextFactory, kernelProvider, idGeneratorFactory );\n+componentSwitcherContainer.add( typeCreatorModeSwitcher );\n         return relationshipTypeCreator;\n     }\n \n-    private TokenCreator createPropertyKeyCreator( Config config, ComponentSwitcherContainer componentSwitcherContainer,\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+    private TokenCreator createPropertyKeyCreator( Config config, ComponentSwitcherContainer componentSwitcherContainer, DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n             RequestContextFactory requestContextFactory, Supplier<Kernel> kernelProvider )\n     {\n         if ( config.get( GraphDatabaseSettings.read_only ) )\n@@ -733,21 +543,14 @@ public class HighlyAvailableEditionModule\n             return new ReadOnlyTokenCreator();\n         }\n \n-        DelegateInvocationHandler<TokenCreator> propertyKeyCreatorDelegate =\n-                new DelegateInvocationHandler<>( TokenCreator.class );\n-        TokenCreator propertyTokenCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(),\n-                new Class[]{TokenCreator.class}, propertyKeyCreatorDelegate );\n-\n-        PropertyKeyCreatorSwitcher propertyKeyCreatorModeSwitcher = new PropertyKeyCreatorSwitcher(\n-                propertyKeyCreatorDelegate, masterDelegateInvocationHandler,\n-                requestContextFactory, kernelProvider, idGeneratorFactory );\n-\n-        componentSwitcherContainer.add( propertyKeyCreatorModeSwitcher );\n+        DelegateInvocationHandler<TokenCreator> propertyKeyCreatorDelegate = new DelegateInvocationHandler<>( TokenCreator.class );\n+TokenCreator propertyTokenCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(), new Class[]{TokenCreator.class }, propertyKeyCreatorDelegate );\n+PropertyKeyCreatorSwitcher propertyKeyCreatorModeSwitcher = new PropertyKeyCreatorSwitcher( propertyKeyCreatorDelegate, masterDelegateInvocationHandler, requestContextFactory, kernelProvider, idGeneratorFactory );\n+componentSwitcherContainer.add( propertyKeyCreatorModeSwitcher );\n         return propertyTokenCreator;\n     }\n \n-    private TokenCreator createLabelIdCreator( Config config, ComponentSwitcherContainer componentSwitcherContainer,\n-            DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n+    private TokenCreator createLabelIdCreator( Config config, ComponentSwitcherContainer componentSwitcherContainer, DelegateInvocationHandler<Master> masterDelegateInvocationHandler,\n             RequestContextFactory requestContextFactory, Supplier<Kernel> kernelProvider )\n     {\n         if ( config.get( GraphDatabaseSettings.read_only ) )\n@@ -755,16 +558,10 @@ public class HighlyAvailableEditionModule\n             return new ReadOnlyTokenCreator();\n         }\n \n-        DelegateInvocationHandler<TokenCreator> labelIdCreatorDelegate = new DelegateInvocationHandler<>(\n-                TokenCreator.class );\n-        TokenCreator labelIdCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(),\n-                new Class[]{TokenCreator.class}, labelIdCreatorDelegate );\n-\n-        LabelTokenCreatorSwitcher modeSwitcher = new LabelTokenCreatorSwitcher(\n-                labelIdCreatorDelegate, masterDelegateInvocationHandler, requestContextFactory, kernelProvider,\n-                idGeneratorFactory );\n-\n-        componentSwitcherContainer.add( modeSwitcher );\n+        DelegateInvocationHandler<TokenCreator> labelIdCreatorDelegate = new DelegateInvocationHandler<>( TokenCreator.class );\n+TokenCreator labelIdCreator = (TokenCreator) newProxyInstance( TokenCreator.class.getClassLoader(), new Class[]{TokenCreator.class }, labelIdCreatorDelegate );\n+LabelTokenCreatorSwitcher modeSwitcher = new LabelTokenCreatorSwitcher( labelIdCreatorDelegate, masterDelegateInvocationHandler, requestContextFactory, kernelProvider, idGeneratorFactory );\n+componentSwitcherContainer.add( modeSwitcher );\n         return labelIdCreator;\n     }\n \n@@ -773,21 +570,18 @@ public class HighlyAvailableEditionModule\n             LastUpdateTime lastUpdateTime, LastTxIdGetter txIdGetter, LifeSupport life )\n     {\n         ClusterDatabaseInfoProvider databaseInfo = new ClusterDatabaseInfoProvider( members,\n-                txIdGetter,\n-                lastUpdateTime );\n-        return life.add( new HighlyAvailableKernelData( graphDb, members, databaseInfo, fs, pageCache, storeDir, config ) );\n+                txIdGetter, lastUpdateTime );\n+return life.add( new HighlyAvailableKernelData( graphDb, members, databaseInfo, fs, pageCache, storeDir, config ) );\n     }\n \n-    private void registerRecovery( final DatabaseInfo databaseInfo, final DependencyResolver dependencyResolver,\n-            final LogService logging )\n+    private void registerRecovery( final DatabaseInfo databaseInfo, final DependencyResolver dependencyResolver, final LogService logging )\n     {\n         memberStateMachine.addHighAvailabilityMemberListener( new HighAvailabilityMemberListener.Adapter()\n         {\n             @Override\n             public void masterIsAvailable( HighAvailabilityMemberChangeEvent event )\n             {\n-                if ( event.getOldState().equals( HighAvailabilityMemberState.TO_MASTER ) &&\n-                        event.getNewState().equals( HighAvailabilityMemberState.MASTER ) )\n+                if ( event.getOldState().equals( HighAvailabilityMemberState.TO_MASTER ) &&event.getNewState().equals( HighAvailabilityMemberState.MASTER ) )\n                 {\n                     doAfterRecoveryAndStartup();\n                 }\n@@ -796,8 +590,7 @@ public class HighlyAvailableEditionModule\n             @Override\n             public void slaveIsAvailable( HighAvailabilityMemberChangeEvent event )\n             {\n-                if ( event.getOldState().equals( HighAvailabilityMemberState.TO_SLAVE ) &&\n-                        event.getNewState().equals( HighAvailabilityMemberState.SLAVE ) )\n+                if ( event.getOldState().equals( HighAvailabilityMemberState.TO_SLAVE ) &&event.getNewState().equals( HighAvailabilityMemberState.SLAVE ) )\n                 {\n                     doAfterRecoveryAndStartup();\n                 }\n@@ -822,7 +615,8 @@ public class HighlyAvailableEditionModule\n                     {\n                         messagesLog.warn( \"Could not stop\", throwable1 );\n                     }\n-                    try\n+\n+try\n                     {\n                         memberStateMachine.start();\n                     }\n@@ -839,17 +633,16 @@ public class HighlyAvailableEditionModule\n     {\n         MetaDataStore metaDataStore = resolver.resolveDependency( MetaDataStore.class );\n         LogicalTransactionStore txStore = resolver.resolveDependency( LogicalTransactionStore.class );\n-\n-        TransactionId txInfo = metaDataStore.getLastCommittedTransaction();\n+TransactionId txInfo = metaDataStore.getLastCommittedTransaction();\n         long lastCommitTimestampFromStore = txInfo.commitTimestamp();\n         if ( txInfo.transactionId() == TransactionIdStore.BASE_TX_ID )\n         {\n             metaDataStore.setLastTransactionCommitTimestamp( TransactionIdStore.BASE_TX_COMMIT_TIMESTAMP );\n             return;\n         }\n-        if ( lastCommitTimestampFromStore == TransactionIdStore.UNKNOWN_TX_COMMIT_TIMESTAMP ||\n-             lastCommitTimestampFromStore == TransactionIdStore.BASE_TX_COMMIT_TIMESTAMP )\n-        {\n+\n+if ( lastCommitTimestampFromStore == TransactionIdStore.UNKNOWN_TX_COMMIT_TIMESTAMP || lastCommitTimestampFromStore == TransactionIdStore.BASE_TX_COMMIT_TIMESTAMP )\n+{\n             long lastCommitTimestampFromLogs;\n             try\n             {\n@@ -919,4 +712,4 @@ public class HighlyAvailableEditionModule\n     {\n         EnterpriseEditionModule.setupEnterpriseSecurityModule( platformModule, procedures );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 368
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}