{
    "project_name": "neo4j-neo4j",
    "error_id": "1746",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1746/LoggingMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1746/LoggingMonitor.java\nindex a3967355555..c5ffc4ce2c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1746/LoggingMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1746/LoggingMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.apache.commons.lang3.exception.ExceptionUtils;\n@@ -39,7 +40,7 @@ public class LoggingMonitor extends Monitor.Adaptor\n     private final String lowerToken;\n     private final String upperToken;\n \n-    public LoggingMonitor( Log log, EntityType type )\n+    public LoggingMonitor(Log log, EntityType type)\n     {\n         this.log = log;\n         this.type = type;\n@@ -50,59 +51,59 @@ public class LoggingMonitor extends Monitor.Adaptor\n     @Override\n     public void noIndex()\n     {\n-        log.info( \"No %s index found, this might just be first use. Preparing to rebuild.\", lowerToken );\n+        log.info(\"No %s index found, this might just be first use. Preparing to rebuild.\", lowerToken);\n     }\n \n     @Override\n     public void notValidIndex()\n     {\n-        log.warn( \"%s index could not be read. Preparing to rebuild.\", upperToken );\n+        log.warn(\"%s index could not be read. Preparing to rebuild.\", upperToken);\n     }\n \n     @Override\n     public void rebuilding()\n     {\n-        log.info( \"Rebuilding %s index, this may take a while\", lowerToken );\n+        log.info(\"Rebuilding %s index, this may take a while\", lowerToken);\n     }\n \n     @Override\n-    public void rebuilt( long roughEntityCount )\n+    public void rebuilt(long roughEntityCount)\n     {\n-        log.info( \"%s index rebuilt (roughly %d %ss)\", upperToken, roughEntityCount, type.name().toLowerCase() );\n+        log.info(\"%s index rebuilt (roughly %d %ss)\", upperToken, roughEntityCount, type.name().toLowerCase());\n     }\n \n     @Override\n     public void recoveryCleanupRegistered()\n     {\n-        log.info( \"%s index cleanup job registered\", upperToken );\n+        log.info(\"%s index cleanup job registered\", upperToken);\n     }\n \n     @Override\n     public void recoveryCleanupStarted()\n     {\n-        log.info( \"%s index cleanup job started\", upperToken);\n+        log.info(\"%s index cleanup job started\", upperToken);\n     }\n \n     @Override\n-    public void recoveryCleanupFinished( long numberOfPagesVisited, long numberOfTreeNodes, long numberOfCleanedCrashPointers, long durationMillis )\n+    public void recoveryCleanupFinished(long numberOfPagesVisited, long numberOfTreeNodes, long numberOfCleanedCrashPointers, long durationMillis)\n     {\n-        StringJoiner joiner = new StringJoiner( \", \", upperToken + \" index cleanup job finished: \", \"\" );\n-        joiner.add( \"Number of pages visited: \" + numberOfPagesVisited );\n-        joiner.add( \"Number of tree nodes: \" + numberOfTreeNodes );\n-        joiner.add( \"Number of cleaned crashed pointers: \" + numberOfCleanedCrashPointers );\n-        joiner.add( \"Time spent: \" + duration( durationMillis ) );\n-        log.info( joiner.toString() );\n+        StringJoiner joiner = new StringJoiner(\", \", upperToken + \" index cleanup job finished: \", \"\");\n+        joiner.add(\"Number of pages visited: \" + numberOfPagesVisited);\n+        joiner.add(\"Number of tree nodes: \" + numberOfTreeNodes);\n+        joiner.add(\"Number of cleaned crashed pointers: \" + numberOfCleanedCrashPointers);\n+        joiner.add(\"Time spent: \" + duration(durationMillis));\n+        log.info(joiner.toString());\n     }\n \n     @Override\n     public void recoveryCleanupClosed()\n     {\n-        log.info( \"%s index cleanup job closed\", upperToken );\n+        log.info(\"%s index cleanup job closed\", upperToken);\n     }\n \n     @Override\n-    public void recoveryCleanupFailed( Throwable throwable )\n+    public void recoveryCleanupFailed(Throwable throwable)\n     {\n-        log.info( \"%s index cleanup job failed.%nCaused by: %s\", upperToken, ExceptionUtils.getStackTrace( throwable ) );\n+        log.info(\"%s index cleanup job failed.%nCaused by: %s\", upperToken, ExceptionUtils.getStackTrace(throwable));\n     }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}