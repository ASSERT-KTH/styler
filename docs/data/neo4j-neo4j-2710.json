{
    "project_name": "neo4j-neo4j",
    "error_id": "2710",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "198",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2710/OnlineIndexUpdates.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2710/OnlineIndexUpdates.java\nindex 16a21d13d52..dcd499d3f34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2710/OnlineIndexUpdates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2710/OnlineIndexUpdates.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import java.util.ArrayList;\n@@ -48,8 +49,8 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n  * types of updates state from store is also needed, for example if adding a label to a node which already has\n  * properties matching existing and online indexes; in that case the properties for that node needs to be read\n  * from store since the commands in that transaction cannot itself provide enough information.\n- *\n- * One instance can be {@link IndexUpdates#feed(EntityCommandGrouper.Cursor,EntityCommandGrouper.Cursor) fed} data about\n+ * <p>\n+ * One instance can be {@link IndexUpdates#feed(EntityCommandGrouper.Cursor, EntityCommandGrouper.Cursor) fed} data about\n  * multiple transactions, to be {@link #iterator() accessed} later.\n  */\n public class OnlineIndexUpdates implements IndexUpdates\n@@ -64,8 +65,8 @@ public class OnlineIndexUpdates implements IndexUpdates\n     private StorageNodeCursor nodeCursor;\n     private StorageRelationshipScanCursor relationshipCursor;\n \n-    public OnlineIndexUpdates( NodeStore nodeStore, SchemaCache schemaCache, PropertyPhysicalToLogicalConverter converter, StorageReader reader,\n-            PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public OnlineIndexUpdates(NodeStore nodeStore, SchemaCache schemaCache, PropertyPhysicalToLogicalConverter converter, StorageReader reader,\n+                              PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         this.nodeStore = nodeStore;\n         this.schemaCache = schemaCache;\n@@ -82,15 +83,15 @@ public class OnlineIndexUpdates implements IndexUpdates\n     }\n \n     @Override\n-    public void feed( EntityCommandGrouper<NodeCommand>.Cursor nodeCommands, EntityCommandGrouper<RelationshipCommand>.Cursor relationshipCommands )\n+    public void feed(EntityCommandGrouper<NodeCommand>.Cursor nodeCommands, EntityCommandGrouper<RelationshipCommand>.Cursor relationshipCommands)\n     {\n-        while ( nodeCommands.nextEntity() )\n+        while (nodeCommands.nextEntity())\n         {\n-            gatherUpdatesFor( nodeCommands.currentEntityId(), nodeCommands.currentEntityCommand(), nodeCommands );\n+            gatherUpdatesFor(nodeCommands.currentEntityId(), nodeCommands.currentEntityCommand(), nodeCommands);\n         }\n-        while ( relationshipCommands.nextEntity() )\n+        while (relationshipCommands.nextEntity())\n         {\n-            gatherUpdatesFor( relationshipCommands.currentEntityId(), relationshipCommands.currentEntityCommand(), relationshipCommands );\n+            gatherUpdatesFor(relationshipCommands.currentEntityId(), relationshipCommands.currentEntityCommand(), relationshipCommands);\n         }\n     }\n \n@@ -100,46 +101,45 @@ public class OnlineIndexUpdates implements IndexUpdates\n         return !updates.isEmpty();\n     }\n \n-    private void gatherUpdatesFor( long nodeId, NodeCommand nodeCommand, EntityCommandGrouper<NodeCommand>.Cursor propertyCommands )\n+    private void gatherUpdatesFor(long nodeId, NodeCommand nodeCommand, EntityCommandGrouper<NodeCommand>.Cursor propertyCommands)\n     {\n-        EntityUpdates.Builder nodePropertyUpdate = gatherUpdatesFromCommandsForNode( nodeId, nodeCommand, propertyCommands );\n-        eagerlyGatherUpdates( nodePropertyUpdate, EntityType.NODE );\n+        EntityUpdates.Builder nodePropertyUpdate = gatherUpdatesFromCommandsForNode(nodeId, nodeCommand, propertyCommands);\n+        eagerlyGatherUpdates(nodePropertyUpdate, EntityType.NODE);\n     }\n \n-    private void gatherUpdatesFor( long relationshipId, RelationshipCommand relationshipCommand,\n-            EntityCommandGrouper<RelationshipCommand>.Cursor propertyCommands )\n+    private void gatherUpdatesFor(long relationshipId, RelationshipCommand relationshipCommand,\n+                                  EntityCommandGrouper<RelationshipCommand>.Cursor propertyCommands)\n     {\n-        EntityUpdates.Builder relationshipPropertyUpdate = gatherUpdatesFromCommandsForRelationship( relationshipId, relationshipCommand, propertyCommands );\n-        eagerlyGatherUpdates( relationshipPropertyUpdate, EntityType.RELATIONSHIP );\n+        EntityUpdates.Builder relationshipPropertyUpdate = gatherUpdatesFromCommandsForRelationship(relationshipId, relationshipCommand, propertyCommands);\n+        eagerlyGatherUpdates(relationshipPropertyUpdate, EntityType.RELATIONSHIP);\n     }\n \n-    private void eagerlyGatherUpdates( EntityUpdates.Builder entityUpdatesBuilder, EntityType entityType )\n+    private void eagerlyGatherUpdates(EntityUpdates.Builder entityUpdatesBuilder, EntityType entityType)\n     {\n         EntityUpdates entityUpdates = entityUpdatesBuilder.build();\n         Iterable<IndexDescriptor> relatedIndexes = schemaCache.getIndexesRelatedTo(\n-                entityUpdates.entityTokensChanged(),\n-                entityUpdates.entityTokensUnchanged(),\n-                entityUpdates.propertiesChanged(),\n-                entityUpdates.isPropertyListComplete(),\n-                entityType );\n+          entityUpdates.entityTokensChanged(),\n+          entityUpdates.entityTokensUnchanged(),\n+          entityUpdates.propertiesChanged(),\n+          entityUpdates.isPropertyListComplete(),\n+          entityType);\n         // we need to materialize the IndexEntryUpdates here, because when we\n         // consume (later in separate thread) the store might have changed.\n-        entityUpdates.forIndexKeys( relatedIndexes, reader, entityType, cursorTracer, memoryTracker ).forEach( updates::add );\n+        entityUpdates.forIndexKeys(relatedIndexes, reader, entityType, cursorTracer, memoryTracker).forEach(updates::add);\n     }\n \n-    private EntityUpdates.Builder gatherUpdatesFromCommandsForNode( long nodeId,\n-            NodeCommand nodeChanges,\n-            EntityCommandGrouper<NodeCommand>.Cursor propertyCommandsForNode )\n+    private EntityUpdates.Builder gatherUpdatesFromCommandsForNode(long nodeId,\n+                                                                   NodeCommand nodeChanges,\n+                                                                   EntityCommandGrouper<NodeCommand>.Cursor propertyCommandsForNode)\n     {\n         long[] nodeLabelsBefore;\n         long[] nodeLabelsAfter;\n-        if ( nodeChanges != null )\n+        if (nodeChanges != null)\n         {\n             // Special case since the node may not be heavy, i.e. further loading may be required\n-            nodeLabelsBefore = parseLabelsField( nodeChanges.getBefore() ).get( nodeStore, cursorTracer );\n-            nodeLabelsAfter = parseLabelsField( nodeChanges.getAfter() ).get( nodeStore, cursorTracer );\n-        }\n-        else\n+            nodeLabelsBefore = parseLabelsField(nodeChanges.getBefore()).get(nodeStore, cursorTracer);\n+            nodeLabelsAfter = parseLabelsField(nodeChanges.getAfter()).get(nodeStore, cursorTracer);\n+        } else\n         {\n             /* If the node doesn't exist here then we've most likely encountered this scenario:\n              * - TX1: Node N exists and has property record P\n@@ -156,70 +156,69 @@ public class OnlineIndexUpdates implements IndexUpdates\n              * if this happens and we're in recovery mode that the node in question will be deleted\n              * in an upcoming transaction, so just skip this update.\n              */\n-            StorageNodeCursor nodeCursor = loadNode( nodeId );\n+            StorageNodeCursor nodeCursor = loadNode(nodeId);\n             nodeLabelsBefore = nodeLabelsAfter = nodeCursor.labels();\n         }\n \n         // First get possible Label changes\n-        boolean complete = providesCompleteListOfProperties( nodeChanges );\n+        boolean complete = providesCompleteListOfProperties(nodeChanges);\n         EntityUpdates.Builder nodePropertyUpdates =\n-                EntityUpdates.forEntity( nodeId, complete ).withTokens( nodeLabelsBefore ).withTokensAfter( nodeLabelsAfter );\n+          EntityUpdates.forEntity(nodeId, complete).withTokens(nodeLabelsBefore).withTokensAfter(nodeLabelsAfter);\n \n         // Then look for property changes\n-        converter.convertPropertyRecord( propertyCommandsForNode, nodePropertyUpdates );\n+        converter.convertPropertyRecord(propertyCommandsForNode, nodePropertyUpdates);\n         return nodePropertyUpdates;\n     }\n \n-    private static boolean providesCompleteListOfProperties( Command entityCommand )\n+    private static boolean providesCompleteListOfProperties(Command entityCommand)\n     {\n         return entityCommand != null && (entityCommand.getMode() == CREATE || entityCommand.getMode() == DELETE);\n     }\n \n-    private EntityUpdates.Builder gatherUpdatesFromCommandsForRelationship( long relationshipId, RelationshipCommand relationshipCommand,\n-            EntityCommandGrouper<RelationshipCommand>.Cursor propertyCommands )\n+    private EntityUpdates.Builder gatherUpdatesFromCommandsForRelationship(long relationshipId, RelationshipCommand relationshipCommand,\n+                                                                           EntityCommandGrouper<RelationshipCommand>.Cursor propertyCommands)\n     {\n         long reltypeBefore;\n         long reltypeAfter;\n-        if ( relationshipCommand != null )\n+        if (relationshipCommand != null)\n         {\n             reltypeBefore = relationshipCommand.getBefore().getType();\n             reltypeAfter = relationshipCommand.getAfter().getType();\n-        }\n-        else\n+        } else\n         {\n-            reltypeBefore = reltypeAfter = loadRelationship( relationshipId ).type();\n+            reltypeBefore = reltypeAfter = loadRelationship(relationshipId).type();\n         }\n-        boolean complete = providesCompleteListOfProperties( relationshipCommand );\n+        boolean complete = providesCompleteListOfProperties(relationshipCommand);\n         EntityUpdates.Builder relationshipPropertyUpdates =\n-                EntityUpdates.forEntity( relationshipId, complete ).withTokens( reltypeBefore ).withTokensAfter( reltypeAfter );\n-        converter.convertPropertyRecord( propertyCommands, relationshipPropertyUpdates );\n+          EntityUpdates.forEntity(relationshipId, complete).withTokens(reltypeBefore).withTokensAfter(reltypeAfter);\n+        converter.convertPropertyRecord(propertyCommands, relationshipPropertyUpdates);\n         return relationshipPropertyUpdates;\n     }\n \n-    private StorageNodeCursor loadNode( long nodeId )\n+    private StorageNodeCursor loadNode(long nodeId)\n     {\n-        if ( nodeCursor == null )\n+        if (nodeCursor == null)\n         {\n-            nodeCursor = reader.allocateNodeCursor( cursorTracer );\n+            nodeCursor = reader.allocateNodeCursor(cursorTracer);\n         }\n-        nodeCursor.single( nodeId );\n-        if ( !nodeCursor.next() )\n+        nodeCursor.single(nodeId);\n+        if (!nodeCursor.next())\n         {\n-            throw new IllegalStateException( \"Node[\" + nodeId + \"] doesn't exist\" );\n+            throw new IllegalStateException(\"Node[\" + nodeId + \"] doesn't exist\");\n         }\n         return nodeCursor;\n     }\n \n-    private StorageRelationshipScanCursor loadRelationship( long relationshipId )\n+    private StorageRelationshipScanCursor loadRelationship(long relationshipId)\n     {\n-        if ( relationshipCursor == null )\n+        if (relationshipCursor == null)\n         {\n-            relationshipCursor = reader.allocateRelationshipScanCursor( cursorTracer );\n+            relationshipCursor = reader.allocateRelationshipScanCursor(cursorTracer);\n         }\n-        relationshipCursor.single( relationshipId );\n-        if ( !relationshipCursor.next() )\n+        relationshipCursor.single(relationshipId);\n+        if (!relationshipCursor.next())\n         {\n-            throw new IllegalStateException( \"Relationship[\" + relationshipId + \"] doesn't exist\" );\n+            throw new IllegalStateException(\"Relationship[\" + relationshipId + \"] doesn't exist\");\n         }\n         return relationshipCursor;\n     }\n@@ -227,7 +226,7 @@ public class OnlineIndexUpdates implements IndexUpdates\n     @Override\n     public void close()\n     {\n-        closeAllUnchecked( nodeCursor, relationshipCursor, reader );\n+        closeAllUnchecked(nodeCursor, relationshipCursor, reader);\n     }\n \n     @Override\n",
            "diff_size": 59
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}