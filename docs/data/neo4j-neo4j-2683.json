{
    "project_name": "neo4j-neo4j",
    "error_id": "2683",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "215",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2683/TokenRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2683/TokenRegistry.java\nindex 21362554726..f4b7065f328 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2683/TokenRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2683/TokenRegistry.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.token;\n \n import org.eclipse.collections.api.map.primitive.MutableIntObjectMap;\n@@ -40,7 +41,7 @@ import static org.neo4j.token.api.TokenConstants.NO_TOKEN;\n /**\n  * Token registry provide id -> TOKEN and name -> id mappings.\n  * Name -> id mapping will be updated last since it's used to check if the token already exists.\n- *\n+ * <p>\n  * Implementation guarantees the atomicity of each method using internal locking.\n  */\n public class TokenRegistry\n@@ -48,7 +49,7 @@ public class TokenRegistry\n     private final String tokenType;\n     private volatile Registries registries;\n \n-    public TokenRegistry( String tokenType )\n+    public TokenRegistry(String tokenType)\n     {\n         this.tokenType = tokenType;\n         this.registries = new Registries();\n@@ -59,59 +60,58 @@ public class TokenRegistry\n         return tokenType;\n     }\n \n-    public synchronized void setInitialTokens( List<NamedToken> tokens )\n+    public synchronized void setInitialTokens(List<NamedToken> tokens)\n     {\n-        registries = insertAllChecked( tokens, new Registries() );\n+        registries = insertAllChecked(tokens, new Registries());\n     }\n \n-    public synchronized void put( NamedToken token )\n+    public synchronized void put(NamedToken token)\n     {\n         Registries reg = this.registries;\n-        if ( reg.idToToken.containsKey( token.id() ) )\n+        if (reg.idToToken.containsKey(token.id()))\n         {\n-            NamedToken existingToken = reg.idToToken.get( token.id() );\n-            throw new NonUniqueTokenException( tokenType, token, existingToken );\n+            NamedToken existingToken = reg.idToToken.get(token.id());\n+            throw new NonUniqueTokenException(tokenType, token, existingToken);\n         }\n \n         reg = reg.copy();\n-        if ( token.isInternal() )\n+        if (token.isInternal())\n         {\n-            checkNameUniqueness( reg.internalNameToId, token, reg );\n-            reg.internalNameToId.put( token.name(), token.id() );\n-        }\n-        else\n+            checkNameUniqueness(reg.internalNameToId, token, reg);\n+            reg.internalNameToId.put(token.name(), token.id());\n+        } else\n         {\n-            checkNameUniqueness( reg.publicNameToId, token, reg );\n-            reg.publicNameToId.put( token.name(), token.id() );\n+            checkNameUniqueness(reg.publicNameToId, token, reg);\n+            reg.publicNameToId.put(token.name(), token.id());\n         }\n-        reg.idToToken.put( token.id(), token );\n+        reg.idToToken.put(token.id(), token);\n         this.registries = reg;\n     }\n \n-    public synchronized void putAll( List<NamedToken> tokens )\n+    public synchronized void putAll(List<NamedToken> tokens)\n     {\n-        registries = insertAllChecked( tokens, registries.copy() );\n+        registries = insertAllChecked(tokens, registries.copy());\n     }\n \n-    public Integer getId( String name )\n+    public Integer getId(String name)\n     {\n-        return getIdForName( registries.publicNameToId, name );\n+        return getIdForName(registries.publicNameToId, name);\n     }\n \n-    public Integer getIdInternal( String name )\n+    public Integer getIdInternal(String name)\n     {\n-        return getIdForName( registries.internalNameToId, name );\n+        return getIdForName(registries.internalNameToId, name);\n     }\n \n-    public NamedToken getToken( int id )\n+    public NamedToken getToken(int id)\n     {\n-        NamedToken token = registries.idToToken.get( id );\n+        NamedToken token = registries.idToToken.get(id);\n         return token == null || token.isInternal() ? null : token;\n     }\n \n-    public NamedToken getTokenInternal( int id )\n+    public NamedToken getTokenInternal(int id)\n     {\n-        NamedToken token = registries.idToToken.get( id );\n+        NamedToken token = registries.idToToken.get(id);\n         return token != null && token.isInternal() ? token : null;\n     }\n \n@@ -119,15 +119,15 @@ public class TokenRegistry\n     {\n         // Likely nearly all tokens are returned here.\n         Registries reg = this.registries;\n-        List<NamedToken> list = new ArrayList<>( reg.idToToken.size() );\n-        for ( NamedToken token : reg.idToToken )\n+        List<NamedToken> list = new ArrayList<>(reg.idToToken.size());\n+        for (NamedToken token : reg.idToToken)\n         {\n-            if ( !token.isInternal() )\n+            if (!token.isInternal())\n             {\n-                list.add( token );\n+                list.add(token);\n             }\n         }\n-        return unmodifiableCollection( list );\n+        return unmodifiableCollection(list);\n     }\n \n     public Collection<NamedToken> allInternalTokens()\n@@ -135,19 +135,19 @@ public class TokenRegistry\n         // Likely only a small fraction of all tokens are returned here.\n         Registries reg = this.registries;\n         List<NamedToken> list = new ArrayList<>();\n-        for ( NamedToken token : reg.idToToken )\n+        for (NamedToken token : reg.idToToken)\n         {\n-            if ( token.isInternal() )\n+            if (token.isInternal())\n             {\n-                list.add( token );\n+                list.add(token);\n             }\n         }\n-        return unmodifiableCollection( list );\n+        return unmodifiableCollection(list);\n     }\n \n-    public boolean hasToken( int id )\n+    public boolean hasToken(int id)\n     {\n-        return registries.idToToken.containsKey( id );\n+        return registries.idToToken.containsKey(id);\n     }\n \n     public int size()\n@@ -160,63 +160,61 @@ public class TokenRegistry\n         return registries.internalNameToId.size();\n     }\n \n-    private Registries insertAllChecked( List<NamedToken> tokens, Registries registries )\n+    private Registries insertAllChecked(List<NamedToken> tokens, Registries registries)\n     {\n         MutableObjectIntMap<String> uniquePublicNames = new ObjectIntHashMap<>();\n         MutableObjectIntMap<String> uniqueInternalNames = new ObjectIntHashMap<>();\n         MutableIntSet uniqueIds = new IntHashSet();\n \n-        for ( NamedToken token : tokens )\n+        for (NamedToken token : tokens)\n         {\n-            if ( token.isInternal() )\n+            if (token.isInternal())\n             {\n-                checkNameUniqueness( uniqueInternalNames, token, registries );\n-                checkNameUniqueness( registries.internalNameToId, token, registries );\n-                uniqueInternalNames.put( token.name(), token.id() );\n-            }\n-            else\n+                checkNameUniqueness(uniqueInternalNames, token, registries);\n+                checkNameUniqueness(registries.internalNameToId, token, registries);\n+                uniqueInternalNames.put(token.name(), token.id());\n+            } else\n             {\n-                checkNameUniqueness( uniquePublicNames, token, registries );\n-                checkNameUniqueness( registries.publicNameToId, token, registries );\n-                uniquePublicNames.put( token.name(), token.id() );\n+                checkNameUniqueness(uniquePublicNames, token, registries);\n+                checkNameUniqueness(registries.publicNameToId, token, registries);\n+                uniquePublicNames.put(token.name(), token.id());\n             }\n-            if ( !uniqueIds.add( token.id() ) || registries.idToToken.containsKey( token.id() ) )\n+            if (!uniqueIds.add(token.id()) || registries.idToToken.containsKey(token.id()))\n             {\n-                NamedToken existingToken = registries.idToToken.get( token.id() );\n-                throw new NonUniqueTokenException( tokenType, token, existingToken );\n+                NamedToken existingToken = registries.idToToken.get(token.id());\n+                throw new NonUniqueTokenException(tokenType, token, existingToken);\n             }\n-            insertUnchecked( token, registries );\n+            insertUnchecked(token, registries);\n         }\n \n         return registries;\n     }\n \n-    private void checkNameUniqueness( MutableObjectIntMap<String> namesToId, NamedToken token, Registries registries )\n+    private void checkNameUniqueness(MutableObjectIntMap<String> namesToId, NamedToken token, Registries registries)\n     {\n-        if ( namesToId.containsKey( token.name() ) )\n+        if (namesToId.containsKey(token.name()))\n         {\n-            int existingKey = namesToId.get( token.name() );\n-            NamedToken existingToken = registries.idToToken.get( existingKey );\n-            throw new NonUniqueTokenException( tokenType, token, existingToken );\n+            int existingKey = namesToId.get(token.name());\n+            NamedToken existingToken = registries.idToToken.get(existingKey);\n+            throw new NonUniqueTokenException(tokenType, token, existingToken);\n         }\n     }\n \n-    private static void insertUnchecked( NamedToken token, Registries registries )\n+    private static void insertUnchecked(NamedToken token, Registries registries)\n     {\n-        registries.idToToken.put( token.id(), token );\n-        if ( token.isInternal() )\n+        registries.idToToken.put(token.id(), token);\n+        if (token.isInternal())\n         {\n-            registries.internalNameToId.put( token.name(), token.id() );\n-        }\n-        else\n+            registries.internalNameToId.put(token.name(), token.id());\n+        } else\n         {\n-            registries.publicNameToId.put( token.name(), token.id() );\n+            registries.publicNameToId.put(token.name(), token.id());\n         }\n     }\n \n-    private static Integer getIdForName( MutableObjectIntMap<String> nameToId, String name )\n+    private static Integer getIdForName(MutableObjectIntMap<String> nameToId, String name)\n     {\n-        int id = nameToId.getIfAbsent( name, NO_TOKEN );\n+        int id = nameToId.getIfAbsent(name, NO_TOKEN);\n         return id == NO_TOKEN ? null : id;\n     }\n \n@@ -228,11 +226,11 @@ public class TokenRegistry\n \n         private Registries()\n         {\n-            this( ObjectIntMaps.mutable.empty(), ObjectIntMaps.mutable.empty(), IntObjectMaps.mutable.empty() );\n+            this(ObjectIntMaps.mutable.empty(), ObjectIntMaps.mutable.empty(), IntObjectMaps.mutable.empty());\n         }\n \n-        private Registries( MutableObjectIntMap<String> publicNameToId, MutableObjectIntMap<String> internalNameToId,\n-                MutableIntObjectMap<NamedToken> idToToken )\n+        private Registries(MutableObjectIntMap<String> publicNameToId, MutableObjectIntMap<String> internalNameToId,\n+                           MutableIntObjectMap<NamedToken> idToToken)\n         {\n             this.publicNameToId = publicNameToId;\n             this.internalNameToId = internalNameToId;\n@@ -241,8 +239,8 @@ public class TokenRegistry\n \n         private Registries copy()\n         {\n-            return new Registries( ObjectIntMaps.mutable.withAll( publicNameToId ), ObjectIntMaps.mutable.withAll( internalNameToId ),\n-                    IntObjectMaps.mutable.withAll( idToToken ) );\n+            return new Registries(ObjectIntMaps.mutable.withAll(publicNameToId), ObjectIntMaps.mutable.withAll(internalNameToId),\n+              IntObjectMaps.mutable.withAll(idToToken));\n         }\n     }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}