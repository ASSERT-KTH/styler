{
    "project_name": "neo4j-neo4j",
    "error_id": "1844",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "82",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "177",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "150",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1844/DynamicNodeLabels.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1844/DynamicNodeLabels.java\nindex 12783d55bc0..b33380e2f33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1844/DynamicNodeLabels.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1844/DynamicNodeLabels.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.util.ArrayList;\n@@ -47,41 +48,40 @@ public class DynamicNodeLabels implements NodeLabels\n {\n     private final NodeRecord node;\n \n-    public DynamicNodeLabels( NodeRecord node )\n+    public DynamicNodeLabels(NodeRecord node)\n     {\n         this.node = node;\n     }\n \n     @Override\n-    public long[] get( NodeStore nodeStore, PageCursorTracer cursorTracer )\n+    public long[] get(NodeStore nodeStore, PageCursorTracer cursorTracer)\n     {\n-        return get( node, nodeStore, cursorTracer );\n+        return get(node, nodeStore, cursorTracer);\n     }\n \n-    public static long[] get( NodeRecord node, NodeStore nodeStore, PageCursorTracer cursorTracer )\n+    public static long[] get(NodeRecord node, NodeStore nodeStore, PageCursorTracer cursorTracer)\n     {\n-        if ( node.isLight() )\n+        if (node.isLight())\n         {\n-            nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ), cursorTracer );\n+            nodeStore.ensureHeavy(node, firstDynamicLabelRecordId(node.getLabelField()), cursorTracer);\n         }\n-        return getDynamicLabelsArray( node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore(), cursorTracer );\n+        return getDynamicLabelsArray(node.getUsedDynamicLabelRecords(), nodeStore.getDynamicLabelStore(), cursorTracer);\n     }\n \n-    public static boolean hasLabel( NodeRecord node, NodeStore nodeStore, PageCursorTracer cursorTracer, int label )\n+    public static boolean hasLabel(NodeRecord node, NodeStore nodeStore, PageCursorTracer cursorTracer, int label)\n     {\n         DynamicArrayStore dynamicLabelStore = nodeStore.getDynamicLabelStore();\n-        HasLabelSubscriber subscriber = new HasLabelSubscriber( label, dynamicLabelStore, cursorTracer );\n-        if ( node.isLight() )\n+        HasLabelSubscriber subscriber = new HasLabelSubscriber(label, dynamicLabelStore, cursorTracer);\n+        if (node.isLight())\n         {\n             //dynamic records not there, stream the result from the dynamic label store\n-            dynamicLabelStore.streamRecords( firstDynamicLabelRecordId( node.getLabelField() ), RecordLoad.NORMAL, false, cursorTracer, subscriber );\n-        }\n-        else\n+            dynamicLabelStore.streamRecords(firstDynamicLabelRecordId(node.getLabelField()), RecordLoad.NORMAL, false, cursorTracer, subscriber);\n+        } else\n         {\n             //dynamic records are already here, lets use them\n-            for ( DynamicRecord record : node.getUsedDynamicLabelRecords() )\n+            for (DynamicRecord record : node.getUsedDynamicLabelRecords())\n             {\n-                if ( !subscriber.onRecord( record ) )\n+                if (!subscriber.onRecord(record))\n                 {\n                     break;\n                 }\n@@ -93,52 +93,52 @@ public class DynamicNodeLabels implements NodeLabels\n     @Override\n     public long[] getIfLoaded()\n     {\n-        if ( node.isLight() )\n+        if (node.isLight())\n         {\n             return null;\n         }\n-        return stripNodeId( (long[]) getRightArray( readFullByteArrayFromHeavyRecords(\n-                node.getUsedDynamicLabelRecords(), ARRAY ) ).asObject() );\n+        return stripNodeId((long[]) getRightArray(readFullByteArrayFromHeavyRecords(\n+          node.getUsedDynamicLabelRecords(), ARRAY)).asObject());\n     }\n \n     @Override\n-    public Collection<DynamicRecord> put( long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n-            MemoryTracker memoryTracker )\n+    public Collection<DynamicRecord> put(long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n+                                         MemoryTracker memoryTracker)\n     {\n-        Arrays.sort( labelIds );\n-        return putSorted( node, labelIds, nodeStore, allocator, cursorTracer, memoryTracker );\n+        Arrays.sort(labelIds);\n+        return putSorted(node, labelIds, nodeStore, allocator, cursorTracer, memoryTracker);\n     }\n \n-    static Collection<DynamicRecord> putSorted( NodeRecord node, long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator,\n-            PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    static Collection<DynamicRecord> putSorted(NodeRecord node, long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator,\n+                                               PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         long existingLabelsField = node.getLabelField();\n-        long existingLabelsBits = parseLabelsBody( existingLabelsField );\n+        long existingLabelsBits = parseLabelsBody(existingLabelsField);\n \n         Collection<DynamicRecord> changedDynamicRecords = node.getDynamicLabelRecords();\n \n         long labelField = node.getLabelField();\n-        if ( fieldPointsToDynamicRecordOfLabels( labelField ) )\n+        if (fieldPointsToDynamicRecordOfLabels(labelField))\n         {\n             // There are existing dynamic label records, get them\n-            nodeStore.ensureHeavy( node, existingLabelsBits, cursorTracer );\n+            nodeStore.ensureHeavy(node, existingLabelsBits, cursorTracer);\n             changedDynamicRecords = node.getDynamicLabelRecords();\n-            setNotInUse( changedDynamicRecords );\n+            setNotInUse(changedDynamicRecords);\n         }\n \n-        if ( !InlineNodeLabels.tryInlineInNodeRecord( node, labelIds, changedDynamicRecords ) )\n+        if (!InlineNodeLabels.tryInlineInNodeRecord(node, labelIds, changedDynamicRecords))\n         {\n             Iterator<DynamicRecord> recycledRecords = changedDynamicRecords.iterator();\n-            Collection<DynamicRecord> allocatedRecords = allocateRecordsForDynamicLabels( node.getId(), labelIds,\n-                    new ReusableRecordsCompositeAllocator( recycledRecords, allocator ), cursorTracer, memoryTracker );\n+            Collection<DynamicRecord> allocatedRecords = allocateRecordsForDynamicLabels(node.getId(), labelIds,\n+              new ReusableRecordsCompositeAllocator(recycledRecords, allocator), cursorTracer, memoryTracker);\n             // Set the rest of the previously set dynamic records as !inUse\n-            while ( recycledRecords.hasNext() )\n+            while (recycledRecords.hasNext())\n             {\n                 DynamicRecord removedRecord = recycledRecords.next();\n-                removedRecord.setInUse( false );\n-                allocatedRecords.add( removedRecord );\n+                removedRecord.setInUse(false);\n+                allocatedRecords.add(removedRecord);\n             }\n-            node.setLabelField( dynamicPointer( allocatedRecords ), allocatedRecords );\n+            node.setLabelField(dynamicPointer(allocatedRecords), allocatedRecords);\n             changedDynamicRecords = allocatedRecords;\n         }\n \n@@ -146,44 +146,43 @@ public class DynamicNodeLabels implements NodeLabels\n     }\n \n     @Override\n-    public Collection<DynamicRecord> add( long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n-            MemoryTracker memoryTracker )\n+    public Collection<DynamicRecord> add(long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n+                                         MemoryTracker memoryTracker)\n     {\n-        nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ), cursorTracer );\n-        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(),\n-                nodeStore.getDynamicLabelStore(), cursorTracer );\n-        long[] newLabelIds = LabelIdArray.concatAndSort( existingLabelIds, labelId );\n+        nodeStore.ensureHeavy(node, firstDynamicLabelRecordId(node.getLabelField()), cursorTracer);\n+        long[] existingLabelIds = getDynamicLabelsArray(node.getUsedDynamicLabelRecords(),\n+          nodeStore.getDynamicLabelStore(), cursorTracer);\n+        long[] newLabelIds = LabelIdArray.concatAndSort(existingLabelIds, labelId);\n         Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n-        Collection<DynamicRecord> changedDynamicRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds,\n-                new ReusableRecordsCompositeAllocator( existingRecords, allocator ), cursorTracer, memoryTracker );\n-        node.setLabelField( dynamicPointer( changedDynamicRecords ), changedDynamicRecords );\n+        Collection<DynamicRecord> changedDynamicRecords = allocateRecordsForDynamicLabels(node.getId(), newLabelIds,\n+          new ReusableRecordsCompositeAllocator(existingRecords, allocator), cursorTracer, memoryTracker);\n+        node.setLabelField(dynamicPointer(changedDynamicRecords), changedDynamicRecords);\n         return changedDynamicRecords;\n     }\n \n     @Override\n-    public Collection<DynamicRecord> remove( long labelId, NodeStore nodeStore, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public Collection<DynamicRecord> remove(long labelId, NodeStore nodeStore, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        nodeStore.ensureHeavy( node, firstDynamicLabelRecordId( node.getLabelField() ), cursorTracer );\n-        long[] existingLabelIds = getDynamicLabelsArray( node.getUsedDynamicLabelRecords(),\n-                nodeStore.getDynamicLabelStore(), cursorTracer );\n-        long[] newLabelIds = filter( existingLabelIds, labelId );\n+        nodeStore.ensureHeavy(node, firstDynamicLabelRecordId(node.getLabelField()), cursorTracer);\n+        long[] existingLabelIds = getDynamicLabelsArray(node.getUsedDynamicLabelRecords(),\n+          nodeStore.getDynamicLabelStore(), cursorTracer);\n+        long[] newLabelIds = filter(existingLabelIds, labelId);\n         Collection<DynamicRecord> existingRecords = node.getDynamicLabelRecords();\n-        if ( InlineNodeLabels.tryInlineInNodeRecord( node, newLabelIds, existingRecords ) )\n+        if (InlineNodeLabels.tryInlineInNodeRecord(node, newLabelIds, existingRecords))\n         {\n-            setNotInUse( existingRecords );\n-        }\n-        else\n+            setNotInUse(existingRecords);\n+        } else\n         {\n-            Collection<DynamicRecord> newRecords = allocateRecordsForDynamicLabels( node.getId(), newLabelIds,\n-                    new ReusableRecordsCompositeAllocator( existingRecords, nodeStore.getDynamicLabelStore() ), cursorTracer, memoryTracker );\n-            node.setLabelField( dynamicPointer( newRecords ), existingRecords );\n-            if ( !newRecords.equals( existingRecords ) )\n+            Collection<DynamicRecord> newRecords = allocateRecordsForDynamicLabels(node.getId(), newLabelIds,\n+              new ReusableRecordsCompositeAllocator(existingRecords, nodeStore.getDynamicLabelStore()), cursorTracer, memoryTracker);\n+            node.setLabelField(dynamicPointer(newRecords), existingRecords);\n+            if (!newRecords.equals(existingRecords))\n             {   // One less dynamic record, mark that one as not in use\n-                for ( DynamicRecord record : existingRecords )\n+                for (DynamicRecord record : existingRecords)\n                 {\n-                    if ( !newRecords.contains( record ) )\n+                    if (!newRecords.contains(record))\n                     {\n-                        record.setInUse( false );\n+                        record.setInUse(false);\n                     }\n                 }\n             }\n@@ -193,24 +192,24 @@ public class DynamicNodeLabels implements NodeLabels\n \n     public long getFirstDynamicRecordId()\n     {\n-        return firstDynamicLabelRecordId( node.getLabelField() );\n+        return firstDynamicLabelRecordId(node.getLabelField());\n     }\n \n-    public static long dynamicPointer( Collection<DynamicRecord> newRecords )\n+    public static long dynamicPointer(Collection<DynamicRecord> newRecords)\n     {\n-        return dynamicPointer( Iterables.first( newRecords ).getId() );\n+        return dynamicPointer(Iterables.first(newRecords).getId());\n     }\n \n-    public static long dynamicPointer( long dynamicRecordId )\n+    public static long dynamicPointer(long dynamicRecordId)\n     {\n         return 0x8000000000L | dynamicRecordId;\n     }\n \n-    private static void setNotInUse( Collection<DynamicRecord> changedDynamicRecords )\n+    private static void setNotInUse(Collection<DynamicRecord> changedDynamicRecords)\n     {\n-        for ( DynamicRecord record : changedDynamicRecords )\n+        for (DynamicRecord record : changedDynamicRecords)\n         {\n-            record.setInUse( false );\n+            record.setInUse(false);\n         }\n     }\n \n@@ -223,49 +222,51 @@ public class DynamicNodeLabels implements NodeLabels\n     @Override\n     public String toString()\n     {\n-        if ( node.isLight() )\n+        if (node.isLight())\n         {\n-            return format( \"Dynamic(id:%d)\", firstDynamicLabelRecordId( node.getLabelField() ) );\n+            return format(\"Dynamic(id:%d)\", firstDynamicLabelRecordId(node.getLabelField()));\n         }\n-        return format( \"Dynamic(id:%d,[%s])\", firstDynamicLabelRecordId( node.getLabelField() ),\n-                Arrays.toString( getDynamicLabelsArrayFromHeavyRecords( node.getUsedDynamicLabelRecords() ) ) );\n+        return format(\"Dynamic(id:%d,[%s])\", firstDynamicLabelRecordId(node.getLabelField()),\n+          Arrays.toString(getDynamicLabelsArrayFromHeavyRecords(node.getUsedDynamicLabelRecords())));\n     }\n \n-    public static Collection<DynamicRecord> allocateRecordsForDynamicLabels( long nodeId, long[] labels,\n-            AbstractDynamicStore dynamicLabelStore, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public static Collection<DynamicRecord> allocateRecordsForDynamicLabels(long nodeId, long[] labels,\n+                                                                            AbstractDynamicStore dynamicLabelStore, PageCursorTracer cursorTracer,\n+                                                                            MemoryTracker memoryTracker)\n     {\n-        return allocateRecordsForDynamicLabels( nodeId, labels, (DynamicRecordAllocator) dynamicLabelStore, cursorTracer, memoryTracker );\n+        return allocateRecordsForDynamicLabels(nodeId, labels, (DynamicRecordAllocator) dynamicLabelStore, cursorTracer, memoryTracker);\n     }\n \n-    public static Collection<DynamicRecord> allocateRecordsForDynamicLabels( long nodeId, long[] labels,\n-            DynamicRecordAllocator allocator, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public static Collection<DynamicRecord> allocateRecordsForDynamicLabels(long nodeId, long[] labels,\n+                                                                            DynamicRecordAllocator allocator, PageCursorTracer cursorTracer,\n+                                                                            MemoryTracker memoryTracker)\n     {\n-        long[] storedLongs = LabelIdArray.prependNodeId( nodeId, labels );\n+        long[] storedLongs = LabelIdArray.prependNodeId(nodeId, labels);\n         Collection<DynamicRecord> records = new ArrayList<>();\n         // since we can't store points in long array we passing false as possibility to store points\n-        DynamicArrayStore.allocateRecords( records, storedLongs, allocator, false, cursorTracer, memoryTracker );\n+        DynamicArrayStore.allocateRecords(records, storedLongs, allocator, false, cursorTracer, memoryTracker);\n         return records;\n     }\n \n-    public static long[] getDynamicLabelsArray( Iterable<DynamicRecord> records, AbstractDynamicStore dynamicLabelStore, PageCursorTracer cursorTracer )\n+    public static long[] getDynamicLabelsArray(Iterable<DynamicRecord> records, AbstractDynamicStore dynamicLabelStore, PageCursorTracer cursorTracer)\n     {\n         long[] storedLongs = (long[])\n-            DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY, cursorTracer ) ).asObject();\n-        return LabelIdArray.stripNodeId( storedLongs );\n+          DynamicArrayStore.getRightArray(dynamicLabelStore.readFullByteArray(records, PropertyType.ARRAY, cursorTracer)).asObject();\n+        return LabelIdArray.stripNodeId(storedLongs);\n     }\n \n-    public static long[] getDynamicLabelsArrayFromHeavyRecords( Iterable<DynamicRecord> records )\n+    public static long[] getDynamicLabelsArrayFromHeavyRecords(Iterable<DynamicRecord> records)\n     {\n         long[] storedLongs = (long[])\n-            DynamicArrayStore.getRightArray( readFullByteArrayFromHeavyRecords( records, PropertyType.ARRAY ) ).asObject();\n-        return LabelIdArray.stripNodeId( storedLongs );\n+          DynamicArrayStore.getRightArray(readFullByteArrayFromHeavyRecords(records, PropertyType.ARRAY)).asObject();\n+        return LabelIdArray.stripNodeId(storedLongs);\n     }\n \n-    public static Pair<Long, long[]> getDynamicLabelsArrayAndOwner( Iterable<DynamicRecord> records,\n-            AbstractDynamicStore dynamicLabelStore, PageCursorTracer cursorTracer )\n+    public static Pair<Long, long[]> getDynamicLabelsArrayAndOwner(Iterable<DynamicRecord> records,\n+                                                                   AbstractDynamicStore dynamicLabelStore, PageCursorTracer cursorTracer)\n     {\n         long[] storedLongs = (long[])\n-                DynamicArrayStore.getRightArray( dynamicLabelStore.readFullByteArray( records, PropertyType.ARRAY, cursorTracer ) ).asObject();\n-        return Pair.of(storedLongs[0], LabelIdArray.stripNodeId( storedLongs ));\n+          DynamicArrayStore.getRightArray(dynamicLabelStore.readFullByteArray(records, PropertyType.ARRAY, cursorTracer)).asObject();\n+        return Pair.of(storedLongs[0], LabelIdArray.stripNodeId(storedLongs));\n     }\n }\n",
            "diff_size": 91
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}