{
    "project_name": "graphfoundation-ongdb",
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "90",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/31/StorageStatement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/31/StorageStatement.java\nindex 45eda49a56e..376e48c6c12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/31/StorageStatement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/31/StorageStatement.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api;\n \n import java.nio.ByteBuffer;\n@@ -60,232 +61,232 @@ import org.neo4j.storageengine.api.schema.LabelScanReader;\n  */\n public interface StorageStatement extends AutoCloseable\n {\n+  /**\n+   * Acquires this statement so that it can be used, should later be {@link #release() released}.\n+   * Since a {@link StorageStatement} can be reused after {@link #release() released}, this call should\n+   * do initialization/clearing of state whereas data structures can be kept between uses.\n+   */\n+  void acquire();\n+\n+  /**\n+   * Releases this statement so that it can later be {@link #acquire() acquired} again.\n+   */\n+  void release();\n+\n+  /**\n+   * Closes this statement so that it can no longer be used nor {@link #acquire() acquired}.\n+   */\n+  @Override\n+  void close();\n+\n+  /**\n+   * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link NodeItem} for selected nodes.\n+   * No node is selected when this method returns, a call to {@link Cursor#next()} will have to be made\n+   * to place the cursor over the first item and then more calls to move the cursor through the selection.\n+   *\n+   * @param nodeId id of node to get cursor for.\n+   * @return a {@link Cursor} over {@link NodeItem} for the given {@code nodeId}.\n+   */\n+  Cursor<NodeItem> acquireSingleNodeCursor(long nodeId);\n+\n+  /**\n+   * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link RelationshipItem} for selected\n+   * relationships. No relationship is selected when this method returns, a call to {@link Cursor#next()}\n+   * will have to be made to place the cursor over the first item and then more calls to move the cursor\n+   * through the selection.\n+   *\n+   * @param relationshipId id of relationship to get cursor for.\n+   * @return a {@link Cursor} over {@link RelationshipItem} for the given {@code relationshipId}.\n+   */\n+  Cursor<RelationshipItem> acquireSingleRelationshipCursor(long relationshipId);\n+\n+  /**\n+   * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link RelationshipItem} for selected\n+   * relationships. No relationship is selected when this method returns, a call to {@link Cursor#next()}\n+   * will have to be made to place the cursor over the first item and then more calls to move the cursor\n+   * through the selection.\n+   *\n+   * @param isDense        if the node is dense\n+   * @param nodeId         the id of the node where to start traversing the relationships\n+   * @param relationshipId the id of the first relationship in the chain\n+   * @param direction      the direction of the relationship wrt the node\n+   * @param relTypeFilter  the allowed types (it allows all types if unspecified)\n+   * @return a {@link Cursor} over {@link RelationshipItem} for traversing the relationships associated to the node.\n+   */\n+  Cursor<RelationshipItem> acquireNodeRelationshipCursor(boolean isDense, long nodeId, long relationshipId,\n+                                                         Direction direction, IntPredicate relTypeFilter);\n+\n+  /**\n+   * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link RelationshipItem} for selected\n+   * relationships. No relationship is selected when this method returns, a call to {@link Cursor#next()}\n+   * will have to be made to place the cursor over the first item and then more calls to move the cursor\n+   * through the selection.\n+   *\n+   * @return a {@link Cursor} over all stored relationships.\n+   */\n+  Cursor<RelationshipItem> relationshipsGetAllCursor();\n+\n+  Cursor<PropertyItem> acquirePropertyCursor(long propertyId, Lock shortLivedReadLock, AssertOpen assertOpen);\n+\n+  Cursor<PropertyItem> acquireSinglePropertyCursor(long propertyId, int propertyKeyId, Lock shortLivedReadLock,\n+                                                   AssertOpen assertOpen);\n+\n+  /**\n+   * @return {@link LabelScanReader} capable of reading nodes for specific label ids.\n+   */\n+  LabelScanReader getLabelScanReader();\n+\n+  /**\n+   * Returns an {@link IndexReader} for searching entity ids given property values. One reader is allocated\n+   * and kept per index throughout the life of a statement, making the returned reader repeatable-read isolation.\n+   * <p>\n+   * <b>NOTE:</b>\n+   * Reader returned from this method should not be closed. All such readers will be closed during {@link #close()}\n+   * of the current statement.\n+   *\n+   * @param index {@link SchemaIndexDescriptor} to get reader for.\n+   * @return {@link IndexReader} capable of searching entity ids given property values.\n+   * @throws IndexNotFoundKernelException if no such index exists.\n+   */\n+  IndexReader getIndexReader(SchemaIndexDescriptor index) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Returns an {@link IndexReader} for searching entity ids given property values. A new reader is allocated\n+   * every call to this method, which means that newly committed data since the last call to this method\n+   * will be visible in the returned reader.\n+   * <p>\n+   * <b>NOTE:</b>\n+   * It is caller's responsibility to close the returned reader.\n+   *\n+   * @param index {@link SchemaIndexDescriptor} to get reader for.\n+   * @return {@link IndexReader} capable of searching entity ids given property values.\n+   * @throws IndexNotFoundKernelException if no such index exists.\n+   */\n+  IndexReader getFreshIndexReader(SchemaIndexDescriptor index) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Access to low level record cursors\n+   *\n+   * @return record cursors\n+   */\n+  RecordCursors recordCursors();\n+\n+  /**\n+   * Reserves a node id for future use to store a node. The reason for it being exposed here is that\n+   * internal ids of nodes and relationships are publicly accessible all the way out to the user.\n+   * This will likely change in the future though.\n+   *\n+   * @return a reserved node id for future use.\n+   */\n+  long reserveNode();\n+\n+  /**\n+   * Reserves a relationship id for future use to store a relationship. The reason for it being exposed here is that\n+   * internal ids of nodes and relationships are publicly accessible all the way out to the user.\n+   * This will likely change in the future though.\n+   *\n+   * @return a reserved relationship id for future use.\n+   */\n+  long reserveRelationship();\n+\n+  Nodes nodes();\n+\n+  Relationships relationships();\n+\n+  Groups groups();\n+\n+  Properties properties();\n+\n+  long getGraphPropertyReference();\n+\n+  interface RecordReads<RECORD>\n+  {\n     /**\n-     * Acquires this statement so that it can be used, should later be {@link #release() released}.\n-     * Since a {@link StorageStatement} can be reused after {@link #release() released}, this call should\n-     * do initialization/clearing of state whereas data structures can be kept between uses.\n-     */\n-    void acquire();\n-\n-    /**\n-     * Releases this statement so that it can later be {@link #acquire() acquired} again.\n-     */\n-    void release();\n-\n-    /**\n-     * Closes this statement so that it can no longer be used nor {@link #acquire() acquired}.\n-     */\n-    @Override\n-    void close();\n-\n-    /**\n-     * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link NodeItem} for selected nodes.\n-     * No node is selected when this method returns, a call to {@link Cursor#next()} will have to be made\n-     * to place the cursor over the first item and then more calls to move the cursor through the selection.\n+     * Open a new PageCursor for reading nodes.\n+     * <p>\n+     * DANGER: make sure to always close this cursor.\n      *\n-     * @param nodeId id of node to get cursor for.\n-     * @return a {@link Cursor} over {@link NodeItem} for the given {@code nodeId}.\n+     * @param reference the initial node reference to access.\n+     * @return the opened PageCursor\n      */\n-    Cursor<NodeItem> acquireSingleNodeCursor( long nodeId );\n+    PageCursor openPageCursorForReading(long reference);\n \n     /**\n-     * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link RelationshipItem} for selected\n-     * relationships. No relationship is selected when this method returns, a call to {@link Cursor#next()}\n-     * will have to be made to place the cursor over the first item and then more calls to move the cursor\n-     * through the selection.\n+     * Load a node {@code record} with the node corresponding to the given node {@code reference}.\n+     * <p>\n+     * The provided page cursor will be used to get the record, and in doing this it will be redirected to the\n+     * correct page if needed.\n      *\n-     * @param relationshipId id of relationship to get cursor for.\n-     * @return a {@link Cursor} over {@link RelationshipItem} for the given {@code relationshipId}.\n+     * @param reference the record reference, understood to be the absolute reference to the store.\n+     * @param record    the record to fill.\n+     * @param mode      loading behaviour, read more in {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)}.\n+     * @param cursor    the PageCursor to use for record loading.\n+     * @throws InvalidRecordException if record not in use and the {@code mode} allows for throwing.\n      */\n-    Cursor<RelationshipItem> acquireSingleRelationshipCursor( long relationshipId );\n+    void getRecordByCursor(long reference, RECORD record, RecordLoad mode, PageCursor cursor)\n+        throws InvalidRecordException;\n \n-    /**\n-     * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link RelationshipItem} for selected\n-     * relationships. No relationship is selected when this method returns, a call to {@link Cursor#next()}\n-     * will have to be made to place the cursor over the first item and then more calls to move the cursor\n-     * through the selection.\n-     *\n-     * @param isDense if the node is dense\n-     * @param nodeId the id of the node where to start traversing the relationships\n-     * @param relationshipId the id of the first relationship in the chain\n-     * @param direction the direction of the relationship wrt the node\n-     * @param relTypeFilter the allowed types (it allows all types if unspecified)\n-     * @return a {@link Cursor} over {@link RelationshipItem} for traversing the relationships associated to the node.\n-     */\n-    Cursor<RelationshipItem> acquireNodeRelationshipCursor(  boolean isDense, long nodeId, long relationshipId,\n-            Direction direction, IntPredicate relTypeFilter );\n+    long getHighestPossibleIdInUse();\n+  }\n \n+  interface Nodes extends RecordReads<NodeRecord>\n+  {\n     /**\n-     * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link RelationshipItem} for selected\n-     * relationships. No relationship is selected when this method returns, a call to {@link Cursor#next()}\n-     * will have to be made to place the cursor over the first item and then more calls to move the cursor\n-     * through the selection.\n-     *\n-     * @return a {@link Cursor} over all stored relationships.\n+     * @return a new Record cursor for accessing DynamicRecords containing labels. This comes acquired.\n      */\n-    Cursor<RelationshipItem> relationshipsGetAllCursor();\n+    RecordCursor<DynamicRecord> newLabelCursor();\n+  }\n \n-    Cursor<PropertyItem> acquirePropertyCursor( long propertyId, Lock shortLivedReadLock, AssertOpen assertOpen );\n+  interface Relationships extends RecordReads<RelationshipRecord>\n+  {\n+  }\n \n-    Cursor<PropertyItem> acquireSinglePropertyCursor( long propertyId, int propertyKeyId, Lock shortLivedReadLock,\n-            AssertOpen assertOpen );\n+  interface Groups extends RecordReads<RelationshipGroupRecord>\n+  {\n+  }\n \n+  interface Properties extends RecordReads<PropertyRecord>\n+  {\n     /**\n-     * @return {@link LabelScanReader} capable of reading nodes for specific label ids.\n-     */\n-    LabelScanReader getLabelScanReader();\n-\n-    /**\n-     * Returns an {@link IndexReader} for searching entity ids given property values. One reader is allocated\n-     * and kept per index throughout the life of a statement, making the returned reader repeatable-read isolation.\n+     * Open a new PageCursor for reading strings.\n      * <p>\n-     * <b>NOTE:</b>\n-     * Reader returned from this method should not be closed. All such readers will be closed during {@link #close()}\n-     * of the current statement.\n+     * DANGER: make sure to always close this cursor.\n      *\n-     * @param index {@link SchemaIndexDescriptor} to get reader for.\n-     * @return {@link IndexReader} capable of searching entity ids given property values.\n-     * @throws IndexNotFoundKernelException if no such index exists.\n+     * @param reference the initial string reference to access.\n+     * @return the opened PageCursor\n      */\n-    IndexReader getIndexReader( SchemaIndexDescriptor index ) throws IndexNotFoundKernelException;\n+    PageCursor openStringPageCursor(long reference);\n \n     /**\n-     * Returns an {@link IndexReader} for searching entity ids given property values. A new reader is allocated\n-     * every call to this method, which means that newly committed data since the last call to this method\n-     * will be visible in the returned reader.\n+     * Open a new PageCursor for reading arrays.\n      * <p>\n-     * <b>NOTE:</b>\n-     * It is caller's responsibility to close the returned reader.\n-     *\n-     * @param index {@link SchemaIndexDescriptor} to get reader for.\n-     * @return {@link IndexReader} capable of searching entity ids given property values.\n-     * @throws IndexNotFoundKernelException if no such index exists.\n-     */\n-    IndexReader getFreshIndexReader( SchemaIndexDescriptor index ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Access to low level record cursors\n+     * DANGER: make sure to always close this cursor.\n      *\n-     * @return record cursors\n+     * @param reference the initial array reference to access.\n+     * @return the opened PageCursor\n      */\n-    RecordCursors recordCursors();\n+    PageCursor openArrayPageCursor(long reference);\n \n     /**\n-     * Reserves a node id for future use to store a node. The reason for it being exposed here is that\n-     * internal ids of nodes and relationships are publicly accessible all the way out to the user.\n-     * This will likely change in the future though.\n+     * Loads a string into the given buffer. If that is too small we recreate the buffer. The buffer is returned\n+     * in write mode, and needs to be flipped before reading.\n      *\n-     * @return a reserved node id for future use.\n+     * @param reference the initial string reference to load\n+     * @param buffer    the buffer to load into\n+     * @param page      the page cursor to be used\n+     * @return the ByteBuffer of the string\n      */\n-    long reserveNode();\n+    ByteBuffer loadString(long reference, ByteBuffer buffer, PageCursor page);\n \n     /**\n-     * Reserves a relationship id for future use to store a relationship. The reason for it being exposed here is that\n-     * internal ids of nodes and relationships are publicly accessible all the way out to the user.\n-     * This will likely change in the future though.\n+     * Loads a array into the given buffer. If that is too small we recreate the buffer. The buffer is returned\n+     * in write mode, and needs to be flipped before reading.\n      *\n-     * @return a reserved relationship id for future use.\n+     * @param reference the initial array reference to load\n+     * @param buffer    the buffer to load into\n+     * @param page      the page cursor to be used\n+     * @return the ByteBuffer of the array\n      */\n-    long reserveRelationship();\n-\n-    Nodes nodes();\n-\n-    Relationships relationships();\n-\n-    Groups groups();\n-\n-    Properties properties();\n-\n-    long getGraphPropertyReference();\n-\n-    interface RecordReads<RECORD>\n-    {\n-        /**\n-         * Open a new PageCursor for reading nodes.\n-         * <p>\n-         * DANGER: make sure to always close this cursor.\n-         *\n-         * @param reference the initial node reference to access.\n-         * @return the opened PageCursor\n-         */\n-        PageCursor openPageCursorForReading( long reference );\n-\n-        /**\n-         * Load a node {@code record} with the node corresponding to the given node {@code reference}.\n-         * <p>\n-         * The provided page cursor will be used to get the record, and in doing this it will be redirected to the\n-         * correct page if needed.\n-         *\n-         * @param reference the record reference, understood to be the absolute reference to the store.\n-         * @param record the record to fill.\n-         * @param mode loading behaviour, read more in {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)}.\n-         * @param cursor the PageCursor to use for record loading.\n-         * @throws InvalidRecordException if record not in use and the {@code mode} allows for throwing.\n-         */\n-        void getRecordByCursor( long reference, RECORD record, RecordLoad mode, PageCursor cursor )\n-                throws InvalidRecordException;\n-\n-        long getHighestPossibleIdInUse();\n-    }\n-\n-    interface Nodes extends RecordReads<NodeRecord>\n-    {\n-        /**\n-         * @return a new Record cursor for accessing DynamicRecords containing labels. This comes acquired.\n-         */\n-        RecordCursor<DynamicRecord> newLabelCursor();\n-    }\n-\n-    interface Relationships extends RecordReads<RelationshipRecord>\n-    {\n-    }\n-\n-    interface Groups extends RecordReads<RelationshipGroupRecord>\n-    {\n-    }\n-\n-    interface Properties extends RecordReads<PropertyRecord>\n-    {\n-        /**\n-         * Open a new PageCursor for reading strings.\n-         * <p>\n-         * DANGER: make sure to always close this cursor.\n-         *\n-         * @param reference the initial string reference to access.\n-         * @return the opened PageCursor\n-         */\n-        PageCursor openStringPageCursor( long reference );\n-\n-        /**\n-         * Open a new PageCursor for reading arrays.\n-         * <p>\n-         * DANGER: make sure to always close this cursor.\n-         *\n-         * @param reference the initial array reference to access.\n-         * @return the opened PageCursor\n-         */\n-        PageCursor openArrayPageCursor( long reference );\n-\n-        /**\n-         * Loads a string into the given buffer. If that is too small we recreate the buffer. The buffer is returned\n-         * in write mode, and needs to be flipped before reading.\n-         *\n-         * @param reference the initial string reference to load\n-         * @param buffer the buffer to load into\n-         * @param page the page cursor to be used\n-         * @return the ByteBuffer of the string\n-         */\n-        ByteBuffer loadString( long reference, ByteBuffer buffer, PageCursor page );\n-\n-        /**\n-         * Loads a array into the given buffer. If that is too small we recreate the buffer. The buffer is returned\n-         * in write mode, and needs to be flipped before reading.\n-         *\n-         * @param reference the initial array reference to load\n-         * @param buffer the buffer to load into\n-         * @param page the page cursor to be used\n-         * @return the ByteBuffer of the array\n-         */\n-        ByteBuffer loadArray( long reference, ByteBuffer buffer, PageCursor page );\n-    }\n+    ByteBuffer loadArray(long reference, ByteBuffer buffer, PageCursor page);\n+  }\n }\n",
            "diff_size": 357
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/31/StorageStatement.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/31/StorageStatement.java\nindex 45eda49a56e..e97b1e17951 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/31/StorageStatement.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/31/StorageStatement.java\n@@ -112,10 +112,10 @@ public interface StorageStatement extends AutoCloseable\n      * @param relTypeFilter the allowed types (it allows all types if unspecified)\n      * @return a {@link Cursor} over {@link RelationshipItem} for traversing the relationships associated to the node.\n      */\n-    Cursor<RelationshipItem> acquireNodeRelationshipCursor(  boolean isDense, long nodeId, long relationshipId,\n+    Cursor<RelationshipItem> acquireNodeRelationshipCursor( boolean isDense, long nodeId, long relationshipId,\n             Direction direction, IntPredicate relTypeFilter );\n \n-    /**\n+/**\n      * Acquires {@link Cursor} capable of {@link Cursor#get() serving} {@link RelationshipItem} for selected\n      * relationships. No relationship is selected when this method returns, a call to {@link Cursor#next()}\n      * will have to be made to place the cursor over the first item and then more calls to move the cursor\n@@ -130,7 +130,7 @@ public interface StorageStatement extends AutoCloseable\n     Cursor<PropertyItem> acquireSinglePropertyCursor( long propertyId, int propertyKeyId, Lock shortLivedReadLock,\n             AssertOpen assertOpen );\n \n-    /**\n+/**\n      * @return {@link LabelScanReader} capable of reading nodes for specific label ids.\n      */\n     LabelScanReader getLabelScanReader();\n@@ -222,10 +222,8 @@ public interface StorageStatement extends AutoCloseable\n          * @param cursor the PageCursor to use for record loading.\n          * @throws InvalidRecordException if record not in use and the {@code mode} allows for throwing.\n          */\n-        void getRecordByCursor( long reference, RECORD record, RecordLoad mode, PageCursor cursor )\n-                throws InvalidRecordException;\n-\n-        long getHighestPossibleIdInUse();\n+        void getRecordByCursor( long reference, RECORD record, RecordLoad mode, PageCursor cursor ) throws InvalidRecordException;\n+    long getHighestPossibleIdInUse();\n     }\n \n     interface Nodes extends RecordReads<NodeRecord>\n@@ -288,4 +286,4 @@ public interface StorageStatement extends AutoCloseable\n          */\n         ByteBuffer loadArray( long reference, ByteBuffer buffer, PageCursor page );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}