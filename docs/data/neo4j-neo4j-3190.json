{
    "project_name": "neo4j-neo4j",
    "error_id": "3190",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "150",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3190/RelationshipCountsProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3190/RelationshipCountsProcessor.java\nindex d8061399bcb..50cfc327b08 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3190/RelationshipCountsProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3190/RelationshipCountsProcessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import org.neo4j.counts.CountsAccessor;\n@@ -48,66 +49,66 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n     private final long anyRelationshipType;\n     private final RelationshipCounter counter;\n \n-    public RelationshipCountsProcessor( NodeLabelsCache nodeLabelCache,\n-            int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater,\n-            NumberArrayFactory cacheFactory, MemoryTracker memoryTracker )\n+    public RelationshipCountsProcessor(NodeLabelsCache nodeLabelCache,\n+                                       int highLabelId, int highRelationshipTypeId, CountsAccessor.Updater countsUpdater,\n+                                       NumberArrayFactory cacheFactory, MemoryTracker memoryTracker)\n     {\n         this.countsUpdater = countsUpdater;\n         this.anyLabel = highLabelId;\n         this.anyRelationshipType = highRelationshipTypeId;\n-        this.labelsCounts = cacheFactory.newLongArray( labelsCountsLength( highLabelId, highRelationshipTypeId ), 0, memoryTracker );\n-        this.wildcardCounts = cacheFactory.newLongArray( wildcardCountsLength( highRelationshipTypeId ), 0, memoryTracker );\n+        this.labelsCounts = cacheFactory.newLongArray(labelsCountsLength(highLabelId, highRelationshipTypeId), 0, memoryTracker);\n+        this.wildcardCounts = cacheFactory.newLongArray(wildcardCountsLength(highRelationshipTypeId), 0, memoryTracker);\n \n         NodeLabelsCache.Client nodeLabelsClient = nodeLabelCache.newClient();\n-        RelationshipCounter.NodeLabelsLookup nodeLabelLookup = nodeId -> nodeLabelCache.get( nodeLabelsClient, nodeId );\n-        this.counter = new RelationshipCounter( nodeLabelLookup, highLabelId, highRelationshipTypeId, wildcardCounts, labelsCounts, MANUAL_INCREMENTER );\n+        RelationshipCounter.NodeLabelsLookup nodeLabelLookup = nodeId -> nodeLabelCache.get(nodeLabelsClient, nodeId);\n+        this.counter = new RelationshipCounter(nodeLabelLookup, highLabelId, highRelationshipTypeId, wildcardCounts, labelsCounts, MANUAL_INCREMENTER);\n     }\n \n-    static long calculateMemoryUsage( int highLabelId, int highRelationshipTypeId )\n+    static long calculateMemoryUsage(int highLabelId, int highRelationshipTypeId)\n     {\n-        long labelsCountsUsage = labelsCountsLength( highLabelId, highRelationshipTypeId ) * Long.BYTES;\n-        long wildcardCountsUsage = wildcardCountsLength( highRelationshipTypeId ) * Long.BYTES;\n+        long labelsCountsUsage = labelsCountsLength(highLabelId, highRelationshipTypeId) * Long.BYTES;\n+        long wildcardCountsUsage = wildcardCountsLength(highRelationshipTypeId) * Long.BYTES;\n         return labelsCountsUsage + wildcardCountsUsage;\n     }\n \n     @Override\n-    public boolean process( RelationshipRecord record, PageCursorTracer cursorTracer )\n+    public boolean process(RelationshipRecord record, PageCursorTracer cursorTracer)\n     {\n-        counter.process( record );\n+        counter.process(record);\n         return false;\n     }\n \n     @Override\n     public void done()\n     {\n-        for ( int wildcardType = 0; wildcardType <= anyRelationshipType; wildcardType++ )\n+        for (int wildcardType = 0; wildcardType <= anyRelationshipType; wildcardType++)\n         {\n             int type = wildcardType == anyRelationshipType ? ANY_RELATIONSHIP_TYPE : wildcardType;\n-            long count = wildcardCounts.get( wildcardType );\n+            long count = wildcardCounts.get(wildcardType);\n             countsUpdater.incrementRelationshipCount(\n-                    ANY_LABEL, type, ANY_LABEL, count );\n+              ANY_LABEL, type, ANY_LABEL, count);\n         }\n \n-        for ( int labelId = 0; labelId < anyLabel; labelId++ )\n+        for (int labelId = 0; labelId < anyLabel; labelId++)\n         {\n-            for ( int typeId = 0; typeId <= anyRelationshipType; typeId++ )\n+            for (int typeId = 0; typeId <= anyRelationshipType; typeId++)\n             {\n-                long startCount = counter.startLabelCount( labelId, typeId );\n-                long endCount = counter.endLabelCount( labelId, typeId );\n+                long startCount = counter.startLabelCount(labelId, typeId);\n+                long endCount = counter.endLabelCount(labelId, typeId);\n                 int type = typeId == anyRelationshipType ? ANY_RELATIONSHIP_TYPE : typeId;\n \n-                countsUpdater.incrementRelationshipCount( labelId, type, ANY_LABEL, startCount );\n-                countsUpdater.incrementRelationshipCount( ANY_LABEL, type, labelId, endCount );\n+                countsUpdater.incrementRelationshipCount(labelId, type, ANY_LABEL, startCount);\n+                countsUpdater.incrementRelationshipCount(ANY_LABEL, type, labelId, endCount);\n             }\n         }\n     }\n \n     @Override\n-    public void mergeResultsFrom( RecordProcessor<RelationshipRecord> other )\n+    public void mergeResultsFrom(RecordProcessor<RelationshipRecord> other)\n     {\n         RelationshipCountsProcessor o = (RelationshipCountsProcessor) other;\n-        mergeCounts( labelsCounts, o.labelsCounts );\n-        mergeCounts( wildcardCounts, o.wildcardCounts );\n+        mergeCounts(labelsCounts, o.labelsCounts);\n+        mergeCounts(wildcardCounts, o.wildcardCounts);\n     }\n \n     @Override\n@@ -117,12 +118,12 @@ public class RelationshipCountsProcessor implements RecordProcessor<Relationship\n         wildcardCounts.close();\n     }\n \n-    private void mergeCounts( LongArray destination, LongArray part )\n+    private void mergeCounts(LongArray destination, LongArray part)\n     {\n         long length = destination.length();\n-        for ( long i = 0; i < length; i++ )\n+        for (long i = 0; i < length; i++)\n         {\n-            destination.set( i, destination.get( i ) + part.get( i ) );\n+            destination.set(i, destination.get(i) + part.get(i));\n         }\n     }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}