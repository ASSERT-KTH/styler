{
    "project_name": "jflex-de-jflex",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "26",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage jflex.testing.testsuite;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static com.google.common.truth.Truth.assertWithMessage;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/0/JFlexTestRunner.java\nindex 6e2d84d18cc..60da28a9843 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/0/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/0/JFlexTestRunner.java\nindex 6e2d84d18cc..131977ca1ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/0/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -79,19 +80,19 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n         throw e;\n       } catch (Throwable e) {\n         assertWithMessage(\n-                \"@TestCase indicates that the jflex generation must throw a \"\n-                    + spec.generatorThrows().getSimpleName())\n+            \"@TestCase indicates that the jflex generation must throw a \"\n+                + spec.generatorThrows().getSimpleName())\n             .that(e)\n             .isInstanceOf(spec.generatorThrows());\n         if (spec.generatorThrowableCause() == Void.class) {\n           assertWithMessage(\n-                  \"@TestCase indicates that there is no cause for the generator exception\")\n+              \"@TestCase indicates that there is no cause for the generator exception\")\n               .that(e.getCause())\n               .isNull();\n         } else if (spec.generatorThrowableCause() != NoExceptionThrown.class) {\n           assertWithMessage(\n-                  \"@TestCase indicates that cause of the generator exception is \"\n-                      + spec.generatorThrowableCause())\n+              \"@TestCase indicates that cause of the generator exception is \"\n+                  + spec.generatorThrowableCause())\n               .that(e.getCause())\n               .isInstanceOf(spec.generatorThrowableCause());\n         }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/0/JFlexTestRunner.java\nindex 6e2d84d18cc..e20591f1adb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/0/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -75,24 +76,21 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n             \"@TestCase indicates that the jflex generation throws a \"\n                 + spec.generatorThrows().getSimpleName()\n                 + \" but nothing was thrown\");\n-      } catch (AssertionError e) {\n+  } catch (AssertionError e) {\n         throw e;\n       } catch (Throwable e) {\n         assertWithMessage(\n-                \"@TestCase indicates that the jflex generation must throw a \"\n-                    + spec.generatorThrows().getSimpleName())\n-            .that(e)\n+    \"@TestCase indicates that the jflex generation must throw a \"\n+                    + spec.generatorThrows().getSimpleName()).that(e)\n             .isInstanceOf(spec.generatorThrows());\n-        if (spec.generatorThrowableCause() == Void.class) {\n-          assertWithMessage(\n-                  \"@TestCase indicates that there is no cause for the generator exception\")\n-              .that(e.getCause())\n+if (spec.generatorThrowableCause() == Void.class) {\n+          assertWithMessage(\"@TestCase indicates that there is no cause for the generator exception\")\n+.that(e.getCause())\n               .isNull();\n         } else if (spec.generatorThrowableCause() != NoExceptionThrown.class) {\n           assertWithMessage(\n-                  \"@TestCase indicates that cause of the generator exception is \"\n-                      + spec.generatorThrowableCause())\n-              .that(e.getCause())\n+    \"@TestCase indicates that cause of the generator exception is \"\n+                      + spec.generatorThrowableCause()).that(e.getCause())\n               .isInstanceOf(spec.generatorThrowableCause());\n         }\n       } finally {\n@@ -145,4 +143,4 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n     notifier.fireTestStarted(Description.createTestDescription(klass, \"Compile java code\"));\n     JavacUtil.compile(javaFileNames);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 17, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/0/JFlexTestRunner.java\nindex 6e2d84d18cc..20284c507f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/0/JFlexTestRunner.java\n@@ -28,7 +28,6 @@ package jflex.testing.testsuite;\n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.truth.Truth.assertWithMessage;\n import static org.junit.Assert.fail;\n-\n import com.google.common.base.Charsets;\n import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableList;\n@@ -49,9 +48,12 @@ import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.BlockJUnit4ClassRunner;\n import org.junit.runners.model.InitializationError;\n \n+\n public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n \n   private final Class<?> klass;\n+\n+\n   private final TestSpec spec;\n \n   public JFlexTestRunner(Class<?> testClass) throws InitializationError {\n@@ -71,41 +73,26 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n     if (spec.generatorThrows() != NoExceptionThrown.class) {\n       try {\n         generateLexer(notifier);\n-        fail(\n-            \"@TestCase indicates that the jflex generation throws a \"\n-                + spec.generatorThrows().getSimpleName()\n-                + \" but nothing was thrown\");\n+        fail(\"@TestCase indicates that the jflex generation throws a \" + spec.generatorThrows().getSimpleName() + \" but nothing was thrown\");\n       } catch (AssertionError e) {\n         throw e;\n       } catch (Throwable e) {\n-        assertWithMessage(\n-                \"@TestCase indicates that the jflex generation must throw a \"\n-                    + spec.generatorThrows().getSimpleName())\n-            .that(e)\n-            .isInstanceOf(spec.generatorThrows());\n+        assertWithMessage(\"@TestCase indicates that the jflex generation must throw a \" + spec.generatorThrows().getSimpleName()).that(e).isInstanceOf(spec.generatorThrows());\n         if (spec.generatorThrowableCause() == Void.class) {\n-          assertWithMessage(\n-                  \"@TestCase indicates that there is no cause for the generator exception\")\n-              .that(e.getCause())\n-              .isNull();\n+          assertWithMessage(\"@TestCase indicates that there is no cause for the generator exception\").that(e.getCause()).isNull();\n         } else if (spec.generatorThrowableCause() != NoExceptionThrown.class) {\n-          assertWithMessage(\n-                  \"@TestCase indicates that cause of the generator exception is \"\n-                      + spec.generatorThrowableCause())\n-              .that(e.getCause())\n-              .isInstanceOf(spec.generatorThrowableCause());\n+                 assertWithMessage(\"@TestCase indicates that cause of the generator exception is \" + spec.generatorThrowableCause()).that(e.getCause()).isInstanceOf(spec.generatorThrowableCause());\n         }\n       } finally {\n         if (diffSysOut.isPresent()) {\n-          assertWithMessage(\"Some content from expected output %s was not read\", spec.sysout())\n-              .that(diffSysOut.get().remainingContent())\n-              .isEmpty();\n+          assertWithMessage(\"Some content from expected output %s was not read\", spec.sysout()).that(diffSysOut.get().remainingContent()).isEmpty();\n         }\n       }\n     } else {\n       String lexerJavaFileName = generateLexer(notifier);\n       buildLexer(notifier, lexerJavaFileName);\n     }\n+\n     super.run(notifier);\n   }\n \n@@ -113,13 +100,11 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n     if (!Strings.isNullOrEmpty(spec.sysout())) {\n       File sysoutFile = new File(spec.sysout());\n       try {\n-        DiffOutputStream diffSysOut =\n-            new DiffOutputStream(Files.newReader(sysoutFile, Charsets.UTF_8));\n+        DiffOutputStream diffSysOut = new DiffOutputStream(Files.newReader(sysoutFile, Charsets.UTF_8));\n         Out.setOutputStream(diffSysOut);\n         return Optional.of(diffSysOut);\n       } catch (FileNotFoundException e) {\n-        throw new AssertionError(\n-            \"The golden sysout was not found: \" + sysoutFile.getAbsolutePath(), e);\n+        throw new AssertionError(\"The golden sysout was not found: \" + sysoutFile.getAbsolutePath(), e);\n       }\n     }\n     return Optional.empty();\n@@ -135,14 +120,12 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n     try {\n       compile(notifier, ImmutableList.of(lexerJavaFileName));\n     } catch (CompilerException e) {\n-      notifier.fireTestFailure(\n-          new Failure(Description.createTestDescription(klass, \"Failed to compile lexer\"), e));\n+      notifier.fireTestFailure(new Failure(Description.createTestDescription(klass, \"Failed to compile lexer\"), e));\n     }\n   }\n \n-  private void compile(RunNotifier notifier, ImmutableList<String> javaFileNames)\n-      throws CompilerException {\n+  private void compile(RunNotifier notifier, ImmutableList<String> javaFileNames) throws CompilerException {\n     notifier.fireTestStarted(Description.createTestDescription(klass, \"Compile java code\"));\n     JavacUtil.compile(javaFileNames);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/0/JFlexTestRunner.java\nindex 6e2d84d18cc..60da28a9843 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/0/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/0/JFlexTestRunner.java\nindex 6e2d84d18cc..60da28a9843 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/0/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/0/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}