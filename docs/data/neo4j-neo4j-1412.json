{
    "project_name": "neo4j-neo4j",
    "error_id": "1412",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "113",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1412/SortedMergeJoin.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1412/SortedMergeJoin.java\nindex ec6b75bef4f..fa7c6bb571f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1412/SortedMergeJoin.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1412/SortedMergeJoin.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import org.neo4j.internal.schema.IndexOrder;\n@@ -38,7 +39,7 @@ final class SortedMergeJoin\n     private Value[] valuesFromB;\n     private int indexOrder;\n \n-    void initialize( IndexOrder indexOrder )\n+    void initialize(IndexOrder indexOrder)\n     {\n         this.indexOrder = indexOrder == IndexOrder.DESCENDING ? 1 : NO_ENTITY;\n         this.nextFromA = NO_ENTITY;\n@@ -57,13 +58,13 @@ final class SortedMergeJoin\n         return nextFromB == NO_ENTITY;\n     }\n \n-    void setA( long entityId, Value[] values )\n+    void setA(long entityId, Value[] values)\n     {\n         nextFromA = entityId;\n         valuesFromA = values;\n     }\n \n-    void setB( long entityId, Value[] values )\n+    void setB(long entityId, Value[] values)\n     {\n         nextFromB = entityId;\n         valuesFromB = values;\n@@ -72,35 +73,34 @@ final class SortedMergeJoin\n     /**\n      * Produces a next entity unless it is at the end of the entity stream, in which case it returns {@code false}.\n      */\n-    boolean next( Sink sink )\n+    boolean next(Sink sink)\n     {\n         int c = 0;\n-        if ( valuesFromA != null && valuesFromB != null )\n+        if (valuesFromA != null && valuesFromB != null)\n         {\n-            checkArgument( valuesFromA.length == valuesFromB.length,\n-                           \"Expected index and txState values to have same dimensions, but got %d values from index and %d from txState\",\n-                           valuesFromB.length, valuesFromA.length );\n+            checkArgument(valuesFromA.length == valuesFromB.length,\n+              \"Expected index and txState values to have same dimensions, but got %d values from index and %d from txState\",\n+              valuesFromB.length, valuesFromA.length);\n \n-            for ( int i = 0; c == 0 && i < valuesFromA.length; i++ )\n+            for (int i = 0; c == 0 && i < valuesFromA.length; i++)\n             {\n-                c = Values.COMPARATOR.compare( valuesFromA[i], valuesFromB[i] );\n+                c = Values.COMPARATOR.compare(valuesFromA[i], valuesFromB[i]);\n             }\n         }\n \n-        if ( nextFromB == NO_ENTITY || Integer.signum( c ) == indexOrder )\n+        if (nextFromB == NO_ENTITY || Integer.signum(c) == indexOrder)\n         {\n-            if ( nextFromA == NO_ENTITY )\n+            if (nextFromA == NO_ENTITY)\n             {\n                 return false;\n             }\n \n-            sink.acceptSortedMergeJoin( nextFromA, valuesFromA );\n+            sink.acceptSortedMergeJoin(nextFromA, valuesFromA);\n             nextFromA = NO_ENTITY;\n             valuesFromA = null;\n-        }\n-        else\n+        } else\n         {\n-            sink.acceptSortedMergeJoin( nextFromB, valuesFromB );\n+            sink.acceptSortedMergeJoin(nextFromB, valuesFromB);\n             nextFromB = NO_ENTITY;\n             valuesFromB = null;\n         }\n@@ -110,6 +110,6 @@ final class SortedMergeJoin\n \n     interface Sink\n     {\n-        void acceptSortedMergeJoin( long entityId, Value[] values );\n+        void acceptSortedMergeJoin(long entityId, Value[] values);\n     }\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}