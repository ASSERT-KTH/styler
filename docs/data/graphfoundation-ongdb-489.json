{
    "project_name": "graphfoundation-ongdb",
    "error_id": "489",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/489/StateMachineProxyHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/489/StateMachineProxyHandler.java\nindex 0ec48f08e44..9459d2603e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/489/StateMachineProxyHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/489/StateMachineProxyHandler.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.statemachine;\n \n import java.lang.reflect.InvocationHandler;\n@@ -28,27 +29,27 @@ import java.lang.reflect.Method;\n  * will call the {@link StateMachine}.\n  */\n public class StateMachineProxyHandler\n-        implements InvocationHandler\n+    implements InvocationHandler\n {\n-    private StateMachineProxyFactory stateMachineProxyFactory;\n-    private StateMachine<?,?> stateMachine;\n+  private StateMachineProxyFactory stateMachineProxyFactory;\n+  private StateMachine<?, ?> stateMachine;\n \n-    public StateMachineProxyHandler( StateMachineProxyFactory stateMachineProxyFactory, StateMachine<?,?> stateMachine )\n-    {\n-        this.stateMachineProxyFactory = stateMachineProxyFactory;\n-        this.stateMachine = stateMachine;\n-    }\n+  public StateMachineProxyHandler(StateMachineProxyFactory stateMachineProxyFactory, StateMachine<?, ?> stateMachine)\n+  {\n+    this.stateMachineProxyFactory = stateMachineProxyFactory;\n+    this.stateMachine = stateMachine;\n+  }\n \n-    @Override\n-    public Object invoke( Object proxy, Method method, Object[] args )\n-    {\n-        // Delegate call to factory, which will translate method call into state machine invocation\n-        return stateMachineProxyFactory.invoke( stateMachine, method, args == null ? null : (args.length > 1 ? args :\n-                args[0]) );\n-    }\n+  @Override\n+  public Object invoke(Object proxy, Method method, Object[] args)\n+  {\n+    // Delegate call to factory, which will translate method call into state machine invocation\n+    return stateMachineProxyFactory.invoke(stateMachine, method, args == null ? null : (args.length > 1 ? args :\n+        args[0]));\n+  }\n \n-    public StateMachineProxyFactory getStateMachineProxyFactory()\n-    {\n-        return stateMachineProxyFactory;\n-    }\n+  public StateMachineProxyFactory getStateMachineProxyFactory()\n+  {\n+    return stateMachineProxyFactory;\n+  }\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "105",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/489/StateMachineProxyHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/489/StateMachineProxyHandler.java\nindex 0ec48f08e44..459fe1150fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/489/StateMachineProxyHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/489/StateMachineProxyHandler.java\n@@ -27,13 +27,12 @@ import java.lang.reflect.Method;\n  * Delegates calls to a {@link StateMachineProxyFactory}, which in turn\n  * will call the {@link StateMachine}.\n  */\n-public class StateMachineProxyHandler\n-        implements InvocationHandler\n+public class StateMachineProxyHandler implements InvocationHandler\n {\n     private StateMachineProxyFactory stateMachineProxyFactory;\n-    private StateMachine<?,?> stateMachine;\n+    private StateMachine<?, ?> stateMachine;\n \n-    public StateMachineProxyHandler( StateMachineProxyFactory stateMachineProxyFactory, StateMachine<?,?> stateMachine )\n+    public StateMachineProxyHandler( StateMachineProxyFactory stateMachineProxyFactory, StateMachine<?, ?> stateMachine )\n     {\n         this.stateMachineProxyFactory = stateMachineProxyFactory;\n         this.stateMachine = stateMachine;\n@@ -43,12 +42,11 @@ public class StateMachineProxyHandler\n     public Object invoke( Object proxy, Method method, Object[] args )\n     {\n         // Delegate call to factory, which will translate method call into state machine invocation\n-        return stateMachineProxyFactory.invoke( stateMachine, method, args == null ? null : (args.length > 1 ? args :\n-                args[0]) );\n+        return stateMachineProxyFactory.invoke( stateMachine, method, args == null ? null : (args.length> 1 ? args : args[0]) );\n     }\n \n     public StateMachineProxyFactory getStateMachineProxyFactory()\n     {\n         return stateMachineProxyFactory;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}