{
    "project_name": "neo4j-neo4j",
    "error_id": "3001",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3001/Degrees.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3001/Degrees.java\nindex 2179e12b51c..6311da457f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3001/Degrees.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3001/Degrees.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.storageengine.api;\n \n import org.neo4j.graphdb.Direction;\n@@ -32,21 +33,21 @@ public interface Degrees\n     int[] types();\n \n     /**\n-     * @param type the relationship type to get degree for.\n+     * @param type      the relationship type to get degree for.\n      * @param direction the {@link Direction} to get degree for. {@link Direction#OUTGOING} and {@link Direction#INCOMING} will include loops too.\n      * @return the degree (i.e. number of relationships on the specific node) of the given relationship type and direction,\n      * or {@code 0} if no degree of that combination was found.\n      */\n-    int degree( int type, Direction direction );\n+    int degree(int type, Direction direction);\n \n     /**\n      * @param type the relationship type to get degree for.\n      * @return the outgoing degree, including loops (i.e. number of relationships on the specific node) of the given relationship type,\n      * or {@code 0} if no degree of that combination was found.\n      */\n-    default int outgoingDegree( int type )\n+    default int outgoingDegree(int type)\n     {\n-        return degree( type, Direction.OUTGOING );\n+        return degree(type, Direction.OUTGOING);\n     }\n \n     /**\n@@ -54,9 +55,9 @@ public interface Degrees\n      * @return the incoming degree, including loops (i.e. number of relationships on the specific node) of the given relationship type,\n      * or {@code 0} if no degree of that combination was found.\n      */\n-    default int incomingDegree( int type )\n+    default int incomingDegree(int type)\n     {\n-        return degree( type, Direction.INCOMING );\n+        return degree(type, Direction.INCOMING);\n     }\n \n     /**\n@@ -64,29 +65,29 @@ public interface Degrees\n      * @return the degree (i.e. number of relationships on the specific node) of the given relationship type in all directions,\n      * or {@code 0} if no degree of that combination was found.\n      */\n-    default int totalDegree( int type )\n+    default int totalDegree(int type)\n     {\n-        return degree( type, Direction.BOTH );\n+        return degree(type, Direction.BOTH);\n     }\n \n     /**\n      * @param direction the {@link Direction} to get degree for, regardless of type.\n-     * {@link Direction#OUTGOING} and {@link Direction#INCOMING} will include loops too.\n+     *                  {@link Direction#OUTGOING} and {@link Direction#INCOMING} will include loops too.\n      * @return the degree (i.e. number of relationships on the specific node) of the given relationship type and direction,\n      * or {@code 0} if no degree of that combination was found.\n      */\n-    default int degree( Direction direction )\n+    default int degree(Direction direction)\n     {\n-        switch ( direction )\n+        switch (direction)\n         {\n-        case OUTGOING:\n-            return outgoingDegree();\n-        case INCOMING:\n-            return incomingDegree();\n-        case BOTH:\n-            return totalDegree();\n-        default:\n-            throw new UnsupportedOperationException( \"Unknown direction \" + direction );\n+            case OUTGOING:\n+                return outgoingDegree();\n+            case INCOMING:\n+                return incomingDegree();\n+            case BOTH:\n+                return totalDegree();\n+            default:\n+                throw new UnsupportedOperationException(\"Unknown direction \" + direction);\n         }\n     }\n \n@@ -96,9 +97,9 @@ public interface Degrees\n     default int outgoingDegree()\n     {\n         int degree = 0;\n-        for ( int type : types() )\n+        for (int type : types())\n         {\n-            degree += outgoingDegree( type );\n+            degree += outgoingDegree(type);\n         }\n         return degree;\n     }\n@@ -109,9 +110,9 @@ public interface Degrees\n     default int incomingDegree()\n     {\n         int degree = 0;\n-        for ( int type : types() )\n+        for (int type : types())\n         {\n-            degree += incomingDegree( type );\n+            degree += incomingDegree(type);\n         }\n         return degree;\n     }\n@@ -122,9 +123,9 @@ public interface Degrees\n     default int totalDegree()\n     {\n         int degree = 0;\n-        for ( int type : types() )\n+        for (int type : types())\n         {\n-            degree += totalDegree( type );\n+            degree += totalDegree(type);\n         }\n         return degree;\n     }\n@@ -143,7 +144,7 @@ public interface Degrees\n         }\n \n         @Override\n-        public int degree( int type, Direction direction )\n+        public int degree(int type, Direction direction)\n         {\n             return 0;\n         }\n@@ -155,7 +156,7 @@ public interface Degrees\n          * Returns <code>true</code> if computation should continue otherwise\n          * <code>false</code>\n          */\n-        boolean add( int type, int outgoing, int incoming, int loop );\n+        boolean add(int type, int outgoing, int incoming, int loop);\n \n         /**\n          * @return whether or not this mutator collects relationships split by type and direction.\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3001/Degrees.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3001/Degrees.java\nindex 2179e12b51c..5271ce18b9d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3001/Degrees.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3001/Degrees.java\n@@ -162,4 +162,4 @@ public interface Degrees\n          */\n         boolean isSplit();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}