{
    "project_name": "SentinelDataHub-dhus-core",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 83).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    * Returns average percentage of task progression.\n    *\n    * @return an integer in range [0-100] if the progression is known, otherwise -1\n    */\n   int getProgression();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/0/MonitorableTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/0/MonitorableTask.java\nindex f034b656594..e97ae54da45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/0/MonitorableTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/0/MonitorableTask.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.dhus.api.transformation;\n \n import java.util.concurrent.Callable;\n@@ -28,38 +29,38 @@ import java.util.concurrent.Callable;\n  */\n public interface MonitorableTask<V> extends Callable<V>\n {\n-   /**\n-    * Returns average percentage of task progression.\n-    *\n-    * @return an integer in range [0-100] if the progression is known, otherwise -1\n-    */\n-   int getProgression();\n+    /**\n+     * Returns average percentage of task progression.\n+     *\n+     * @return an integer in range [0-100] if the progression is known, otherwise -1\n+     */\n+    int getProgression();\n \n-   /**\n-    * Returns true if the task has already started.\n-    *\n-    * @return true if the task has already started, otherwise false\n-    */\n-   boolean isStarted();\n+    /**\n+     * Returns true if the task has already started.\n+     *\n+     * @return true if the task has already started, otherwise false\n+     */\n+    boolean isStarted();\n \n-   /**\n-    * Returns true if the task is paused.\n-    *\n-    * @return true if the task is paused, otherwise false\n-    */\n-   boolean isPaused();\n+    /**\n+     * Returns true if the task is paused.\n+     *\n+     * @return true if the task is paused, otherwise false\n+     */\n+    boolean isPaused();\n \n-   /**\n-    * Returns true if the task is stopped.\n-    *\n-    * @return true if task is stopped, otherwise false\n-    */\n-   boolean isStopped();\n+    /**\n+     * Returns true if the task is stopped.\n+     *\n+     * @return true if task is stopped, otherwise false\n+     */\n+    boolean isStopped();\n \n-   /**\n-    * Returns true if the task is successfully completed.\n-    *\n-    * @return true if task is done, otherwise false\n-    */\n-   boolean isCompleted();\n+    /**\n+     * Returns true if the task is successfully completed.\n+     *\n+     * @return true if task is done, otherwise false\n+     */\n+    boolean isCompleted();\n }\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/0/MonitorableTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/0/MonitorableTask.java\nindex f034b656594..3c40a31b581 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/0/MonitorableTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/0/MonitorableTask.java\n@@ -62,4 +62,4 @@ public interface MonitorableTask<V> extends Callable<V>\n     * @return true if task is done, otherwise false\n     */\n    boolean isCompleted();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/0/MonitorableTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/0/MonitorableTask.java\nindex f034b656594..b9a9c0ba7df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/0/MonitorableTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/0/MonitorableTask.java\n@@ -26,6 +26,8 @@ import java.util.concurrent.Callable;\n  *\n  * @param <V> type returned by the task\n  */\n+\n+\n public interface MonitorableTask<V> extends Callable<V>\n {\n    /**\n@@ -33,33 +35,33 @@ public interface MonitorableTask<V> extends Callable<V>\n     *\n     * @return an integer in range [0-100] if the progression is known, otherwise -1\n     */\n-   int getProgression();\n+   int getProgression ();\n \n    /**\n     * Returns true if the task has already started.\n     *\n     * @return true if the task has already started, otherwise false\n     */\n-   boolean isStarted();\n+   boolean isStarted ();\n \n    /**\n     * Returns true if the task is paused.\n     *\n     * @return true if the task is paused, otherwise false\n     */\n-   boolean isPaused();\n+   boolean isPaused ();\n \n    /**\n     * Returns true if the task is stopped.\n     *\n     * @return true if task is stopped, otherwise false\n     */\n-   boolean isStopped();\n+   boolean isStopped ();\n \n    /**\n     * Returns true if the task is successfully completed.\n     *\n     * @return true if task is done, otherwise false\n     */\n-   boolean isCompleted();\n-}\n+   boolean isCompleted ();\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 83).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}