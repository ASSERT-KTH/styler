{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "560",
    "information": {
        "errors": [
            {
                "line": "86",
                "column": "79",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection)o;\n    return\n        Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n        super.equals(o);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/560/ParagraphLinkCollection.java\nindex 39d84b246b9..ca80901a8f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/560/ParagraphLinkCollection.java\n@@ -83,7 +83,7 @@ public class ParagraphLinkCollection extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection)o;\n+    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection) o;\n     return\n         Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n         super.equals(o);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/560/ParagraphLinkCollection.java\nindex 39d84b246b9..6bc7808af73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/560/ParagraphLinkCollection.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -49,6 +52,7 @@ import io.swagger.annotations.ApiModelProperty;\n public class ParagraphLinkCollection extends LinkElement {\n     @SerializedName(\"ParagraphLinkList\")\n     private List<ParagraphLink> paragraphLinkList = null;\n+\n     public ParagraphLinkCollection paragraphLinkList(List<ParagraphLink> paragraphLinkList) {\n         this.paragraphLinkList = paragraphLinkList;\n         return this;\n@@ -64,8 +68,9 @@ public class ParagraphLinkCollection extends LinkElement {\n \n     /**\n      * Gets or sets collection of paragraph's links.\n-    * @return paragraphLinkList\n-    **/\n+     *\n+     * @return paragraphLinkList\n+     **/\n     @ApiModelProperty(value = \"Gets or sets collection of paragraph's links.\")\n     public List<ParagraphLink> getParagraphLinkList() {\n         return paragraphLinkList;\n@@ -83,35 +88,35 @@ public class ParagraphLinkCollection extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection)o;\n-    return\n-        Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n-        super.equals(o);\n-  }\n+        ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection) o;\n+        return\n+            Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n+                super.equals(o);\n+    }\n \n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(paragraphLinkList, super.hashCode());\n-  }\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(paragraphLinkList, super.hashCode());\n+    }\n \n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class ParagraphLinkCollection {\\n\");\n-    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n-    sb.append(\"    paragraphLinkList: \").append(toIndentedString(paragraphLinkList)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class ParagraphLinkCollection {\\n\");\n+        sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+        sb.append(\"    paragraphLinkList: \").append(toIndentedString(paragraphLinkList)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n \n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n     }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/560/ParagraphLinkCollection.java\nindex 39d84b246b9..740a0e19bd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/560/ParagraphLinkCollection.java\n@@ -45,55 +45,64 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Collection of links to paragraphs.\n  */\n+\n+\n @ApiModel(description = \"Collection of links to paragraphs.\")\n+\n public class ParagraphLinkCollection extends LinkElement {\n-    @SerializedName(\"ParagraphLinkList\")\n-    private List<ParagraphLink> paragraphLinkList = null;\n-    public ParagraphLinkCollection paragraphLinkList(List<ParagraphLink> paragraphLinkList) {\n-        this.paragraphLinkList = paragraphLinkList;\n-        return this;\n-    }\n+  @SerializedName(\"ParagraphLinkList\")\n+  private List<ParagraphLink> paragraphLinkList = null;\n+\n+  public ParagraphLinkCollection paragraphLinkList(List<ParagraphLink> paragraphLinkList) {\n+    this.paragraphLinkList = paragraphLinkList;\n+    return this;\n+  }\n \n-    public ParagraphLinkCollection addParagraphLinkListItem(ParagraphLink paragraphLinkListItem) {\n-        if (this.paragraphLinkList == null) {\n-            this.paragraphLinkList = new ArrayList<ParagraphLink>();\n-        }\n-        this.paragraphLinkList.add(paragraphLinkListItem);\n-        return this;\n+  public ParagraphLinkCollection addParagraphLinkListItem(ParagraphLink paragraphLinkListItem) {\n+    if (this.paragraphLinkList == null) {\n+      this.paragraphLinkList = new ArrayList<ParagraphLink>();\n     }\n+    this.paragraphLinkList.add(paragraphLinkListItem);\n+    return this;\n+  }\n \n     /**\n      * Gets or sets collection of paragraph's links.\n     * @return paragraphLinkList\n     **/\n-    @ApiModelProperty(value = \"Gets or sets collection of paragraph's links.\")\n-    public List<ParagraphLink> getParagraphLinkList() {\n-        return paragraphLinkList;\n-    }\n \n-    public void setParagraphLinkList(List<ParagraphLink> paragraphLinkList) {\n-        this.paragraphLinkList = paragraphLinkList;\n+\n+  @ApiModelProperty(value = \"Gets or sets collection of paragraph's links.\")\n+  public List<ParagraphLink> getParagraphLinkList() {\n+    return paragraphLinkList;\n+  }\n+\n+  public void setParagraphLinkList(List<ParagraphLink> paragraphLinkList) {\n+    this.paragraphLinkList = paragraphLinkList;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection)o;\n-    return\n-        Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n-        super.equals(o);\n+    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection) o;\n+    return Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n+    super.equals(o);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(paragraphLinkList, super.hashCode());\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -108,10 +117,12 @@ public class ParagraphLinkCollection extends LinkElement {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/560/ParagraphLinkCollection.java\nindex 39d84b246b9..ca80901a8f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/560/ParagraphLinkCollection.java\n@@ -83,7 +83,7 @@ public class ParagraphLinkCollection extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection)o;\n+    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection) o;\n     return\n         Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n         super.equals(o);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/560/ParagraphLinkCollection.java\nindex 39d84b246b9..ca80901a8f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/560/ParagraphLinkCollection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/560/ParagraphLinkCollection.java\n@@ -83,7 +83,7 @@ public class ParagraphLinkCollection extends LinkElement {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection)o;\n+    ParagraphLinkCollection paragraphLinkCollection = (ParagraphLinkCollection) o;\n     return\n         Objects.equals(this.paragraphLinkList, paragraphLinkCollection.paragraphLinkList) &&\n         super.equals(o);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}