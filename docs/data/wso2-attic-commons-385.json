{
    "project_name": "wso2-attic-commons",
    "error_id": "385",
    "information": {
        "errors": [
            {
                "line": "109",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            }\n            // JDBC Statement\n            else if (method.getName().startsWith(\"execute\") && args != null && args.length == 1 && args[0] instanceof String) {\n                print(method.getName() + \"(\" + args[0] + \"), \" + getParams());\n            } else if (method.getName().startsWith(\"execute\")) {\n                print(method.getName() + \", \" + getParams());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/385/LoggingInterceptor.java\nindex 3a11973b153..59b8f6f0552 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/385/LoggingInterceptor.java\n@@ -106,8 +106,9 @@ public class LoggingInterceptor<T> implements InvocationHandler {\n                 print(\"Set isolation level to \" + args[0]);\n             }\n             // JDBC Statement\n-            else if (method.getName().startsWith(\"execute\") && args != null && args.length == 1 && args[0] instanceof String) {\n-                print(method.getName() + \"(\" + args[0] + \"), \" + getParams());\n+            else if (method.getName().startsWith(\"execute\") && args != null && args.length\n+                == 1 && args[0] instanceof String) {\n+                 print(method.getName() + \"(\" + args[0] + \"), \" + getParams());\n             } else if (method.getName().startsWith(\"execute\")) {\n                 print(method.getName() + \", \" + getParams());\n             } else if (\"clearParameters\".equals(method.getName())) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/385/LoggingInterceptor.java\nindex 3a11973b153..62410890dd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/385/LoggingInterceptor.java\n@@ -33,141 +33,147 @@ import org.apache.commons.logging.Log;\n \n public class LoggingInterceptor<T> implements InvocationHandler {\n \n-    private static final Set<String> PARAMSTYPES = new HashSet<String>();\n-    static {\n-        PARAMSTYPES.add(\"setArray\");\n-        PARAMSTYPES.add(\"setBigDecimal\");\n-        PARAMSTYPES.add(\"setBoolean\");\n-        PARAMSTYPES.add(\"setByte\");\n-        PARAMSTYPES.add(\"setBytes\");\n-        PARAMSTYPES.add(\"setDate\");\n-        PARAMSTYPES.add(\"setDouble\");\n-        PARAMSTYPES.add(\"setFloat\");\n-        PARAMSTYPES.add(\"setInt\");\n-        PARAMSTYPES.add(\"setLong\");\n-        PARAMSTYPES.add(\"setObject\");\n-        PARAMSTYPES.add(\"setRef\");\n-        PARAMSTYPES.add(\"setShort\");\n-        PARAMSTYPES.add(\"setString\");\n-        PARAMSTYPES.add(\"setTime\");\n-        PARAMSTYPES.add(\"setTimestamp\");\n-        PARAMSTYPES.add(\"setURL\");\n-    }\n+  private static final Set<String> PARAMSTYPES = new HashSet<String>();\n \n-    private Log _log;\n-    private T _delegate;\n-    private Map<String, Object> _paramsByName = new TreeMap<String, Object>();\n-    private Map<Integer, Object> _paramsByIdx = new TreeMap<Integer, Object>();\n+  static {\n+    PARAMSTYPES.add(\"setArray\");\n+    PARAMSTYPES.add(\"setBigDecimal\");\n+    PARAMSTYPES.add(\"setBoolean\");\n+    PARAMSTYPES.add(\"setByte\");\n+    PARAMSTYPES.add(\"setBytes\");\n+    PARAMSTYPES.add(\"setDate\");\n+    PARAMSTYPES.add(\"setDouble\");\n+    PARAMSTYPES.add(\"setFloat\");\n+    PARAMSTYPES.add(\"setInt\");\n+    PARAMSTYPES.add(\"setLong\");\n+    PARAMSTYPES.add(\"setObject\");\n+    PARAMSTYPES.add(\"setRef\");\n+    PARAMSTYPES.add(\"setShort\");\n+    PARAMSTYPES.add(\"setString\");\n+    PARAMSTYPES.add(\"setTime\");\n+    PARAMSTYPES.add(\"setTimestamp\");\n+    PARAMSTYPES.add(\"setURL\");\n+  }\n \n+  private Log _log;\n+  private T _delegate;\n+  private Map<String, Object> _paramsByName = new TreeMap<String, Object>();\n+  private Map<Integer, Object> _paramsByIdx = new TreeMap<Integer, Object>();\n \n-    public LoggingInterceptor(T delegate, Log log) {\n-        _log = log;\n-        _delegate = delegate;\n-    }\n \n-    public Object invoke(Object proxy, Method method, Object[] args)\n-            throws Throwable {\n-        try {\n-            if (method.getDeclaringClass() == DataSource.class\n-                    && \"getConnection\".equals(method.getName())) {\n-                Connection conn = (Connection)method.invoke(_delegate, args);\n-                print(\"getConnection (tx=\" + conn.getTransactionIsolation() + \")\");\n-                return Proxy.newProxyInstance(_delegate.getClass().getClassLoader(),\n-                        new Class[] {Connection.class}, new LoggingInterceptor<Connection>(conn, _log));\n-            } else if (method.getDeclaringClass() == Connection.class\n-                    && Statement.class.isAssignableFrom(method.getReturnType())) {\n-                Statement stmt = (Statement)method.invoke(_delegate, args);\n-                print(method, args);\n-                return Proxy.newProxyInstance(_delegate.getClass().getClassLoader(),\n-                        new Class[] {method.getReturnType()}, new LoggingInterceptor<Statement>(stmt, _log));\n-            } else {\n-                print(method, args);\n-                return method.invoke(_delegate, args);\n-            }\n-        } catch (InvocationTargetException e) {\n-            throw e.getTargetException();\n-        }\n+  public LoggingInterceptor(T delegate, Log log) {\n+    _log = log;\n+    _delegate = delegate;\n+  }\n+\n+  public Object invoke(Object proxy, Method method, Object[] args)\n+    throws Throwable {\n+    try {\n+      if (method.getDeclaringClass() == DataSource.class\n+        && \"getConnection\".equals(method.getName())) {\n+        Connection conn = (Connection) method.invoke(_delegate, args);\n+        print(\"getConnection (tx=\" + conn.getTransactionIsolation() + \")\");\n+        return Proxy.newProxyInstance(_delegate.getClass().getClassLoader(),\n+          new Class[] {Connection.class}, new LoggingInterceptor<Connection>(conn, _log));\n+      } else if (method.getDeclaringClass() == Connection.class\n+        && Statement.class.isAssignableFrom(method.getReturnType())) {\n+        Statement stmt = (Statement) method.invoke(_delegate, args);\n+        print(method, args);\n+        return Proxy.newProxyInstance(_delegate.getClass().getClassLoader(),\n+          new Class[] {method.getReturnType()}, new LoggingInterceptor<Statement>(stmt, _log));\n+      } else {\n+        print(method, args);\n+        return method.invoke(_delegate, args);\n+      }\n+    } catch (InvocationTargetException e) {\n+      throw e.getTargetException();\n     }\n+  }\n \n-    private void print(Method method, Object[] args) {\n-        if (shouldPrint()) {\n-            // JDBC Connection\n-            if (\"prepareStatement\".equals(method.getName())) {\n-                print(\"prepareStatement: \" + args[0]);\n-            } else if (\"prepareCall\".equals(method.getName())) {\n-                print(\"prepareCall: \" + args[0]);\n-            } else if (\"close\".equals(method.getName())) {\n-                print(\"close()\");\n-            } else if (\"commit\".equals(method.getName())) {\n-                print(\"commit()\");\n-            } else if (\"rollback\".equals(method.getName())) {\n-                print(\"rollback()\");\n-            } else if (\"setTransactionIsolation\".equals(method.getName())) {\n-                print(\"Set isolation level to \" + args[0]);\n-            }\n-            // JDBC Statement\n-            else if (method.getName().startsWith(\"execute\") && args != null && args.length == 1 && args[0] instanceof String) {\n-                print(method.getName() + \"(\" + args[0] + \"), \" + getParams());\n-            } else if (method.getName().startsWith(\"execute\")) {\n-                print(method.getName() + \", \" + getParams());\n-            } else if (\"clearParameters\".equals(method.getName())) {\n-                _paramsByIdx.clear();\n-                _paramsByName.clear();\n-            } else if (\"setNull\".equals(method.getName())) {\n-                if (String.class.isAssignableFrom(args[0].getClass())) {\n-                    _paramsByName.put((String)args[0], null);\n-                } else if (Integer.class.isAssignableFrom(args[0].getClass())) {\n-                    _paramsByIdx.put((Integer)args[0], null);\n-                }\n-            } else if (PARAMSTYPES.contains(method.getName())){\n-                if (String.class.isAssignableFrom(args[0].getClass())) {\n-                    _paramsByName.put((String)args[0], args[1]);\n-                } else if (Integer.class.isAssignableFrom(args[0].getClass())) {\n-                    _paramsByIdx.put((Integer)args[0], args[1]);\n-                }\n-            }\n+  private void print(Method method, Object[] args) {\n+    if (shouldPrint()) {\n+      // JDBC Connection\n+      if (\"prepareStatement\".equals(method.getName())) {\n+        print(\"prepareStatement: \" + args[0]);\n+      } else if (\"prepareCall\".equals(method.getName())) {\n+        print(\"prepareCall: \" + args[0]);\n+      } else if (\"close\".equals(method.getName())) {\n+        print(\"close()\");\n+      } else if (\"commit\".equals(method.getName())) {\n+        print(\"commit()\");\n+      } else if (\"rollback\".equals(method.getName())) {\n+        print(\"rollback()\");\n+      } else if (\"setTransactionIsolation\".equals(method.getName())) {\n+        print(\"Set isolation level to \" + args[0]);\n+      }\n+      // JDBC Statement\n+      else if (method.getName().startsWith(\"execute\") && args != null && args.length == 1 &&\n+        args[0] instanceof String) {\n+        print(method.getName() + \"(\" + args[0] + \"), \" + getParams());\n+      } else if (method.getName().startsWith(\"execute\")) {\n+        print(method.getName() + \", \" + getParams());\n+      } else if (\"clearParameters\".equals(method.getName())) {\n+        _paramsByIdx.clear();\n+        _paramsByName.clear();\n+      } else if (\"setNull\".equals(method.getName())) {\n+        if (String.class.isAssignableFrom(args[0].getClass())) {\n+          _paramsByName.put((String) args[0], null);\n+        } else if (Integer.class.isAssignableFrom(args[0].getClass())) {\n+          _paramsByIdx.put((Integer) args[0], null);\n         }\n+      } else if (PARAMSTYPES.contains(method.getName())) {\n+        if (String.class.isAssignableFrom(args[0].getClass())) {\n+          _paramsByName.put((String) args[0], args[1]);\n+        } else if (Integer.class.isAssignableFrom(args[0].getClass())) {\n+          _paramsByIdx.put((Integer) args[0], args[1]);\n+        }\n+      }\n     }\n+  }\n \n-    private String getParams() {\n-        if (_paramsByIdx.size() > 0 || _paramsByName.size() > 0) {\n-            StringBuffer buf = new StringBuffer();\n-            buf.append(\"bound \");\n-            for (Map.Entry<Integer, Object> entry : _paramsByIdx.entrySet()) {\n-                try {\n-                    buf.append(\"(\").append(entry.getKey()).append(\",\").append(entry.getValue()).append(\") \");\n-                } catch (Throwable e) {\n-                    // We don't want to mess with the connection just for logging\n-                    return \"[e]\";\n-                }\n-            }\n-            for (Map.Entry<String, Object> entry : _paramsByName.entrySet()) {\n-                try {\n-                    buf.append(\"(\").append(entry.getKey()).append(\",\").append(entry.getValue()).append(\") \");\n-                } catch (Throwable e) {\n-                    // We don't want to mess with the connection just for logging\n-                    return \"[e]\";\n-                }\n-            }\n-            return buf.toString();\n+  private String getParams() {\n+    if (_paramsByIdx.size() > 0 || _paramsByName.size() > 0) {\n+      StringBuffer buf = new StringBuffer();\n+      buf.append(\"bound \");\n+      for (Map.Entry<Integer, Object> entry : _paramsByIdx.entrySet()) {\n+        try {\n+          buf.append(\"(\").append(entry.getKey()).append(\",\").append(entry.getValue()).append(\") \");\n+        } catch (Throwable e) {\n+          // We don't want to mess with the connection just for logging\n+          return \"[e]\";\n         }\n-        return \"w/o params\";\n+      }\n+      for (Map.Entry<String, Object> entry : _paramsByName.entrySet()) {\n+        try {\n+          buf.append(\"(\").append(entry.getKey()).append(\",\").append(entry.getValue()).append(\") \");\n+        } catch (Throwable e) {\n+          // We don't want to mess with the connection just for logging\n+          return \"[e]\";\n+        }\n+      }\n+      return buf.toString();\n     }\n+    return \"w/o params\";\n+  }\n \n-    private boolean shouldPrint() {\n-        if (_log != null)\n-            return _log.isDebugEnabled();\n-        else return true;\n+  private boolean shouldPrint() {\n+    if (_log != null) {\n+      return _log.isDebugEnabled();\n+    } else {\n+      return true;\n     }\n+  }\n \n-    private void print(String str) {\n-        if (_log != null)\n-            _log.debug(str);\n-        else System.out.println(str);\n+  private void print(String str) {\n+    if (_log != null) {\n+      _log.debug(str);\n+    } else {\n+      System.out.println(str);\n     }\n+  }\n \n-    public static DataSource createLoggingDS(DataSource ds, Log log) {\n-        return (DataSource)Proxy.newProxyInstance(ds.getClass().getClassLoader(),\n-                new Class[] {DataSource.class}, new LoggingInterceptor<DataSource>(ds,log));\n-    }\n+  public static DataSource createLoggingDS(DataSource ds, Log log) {\n+    return (DataSource) Proxy.newProxyInstance(ds.getClass().getClassLoader(),\n+      new Class[] {DataSource.class}, new LoggingInterceptor<DataSource>(ds, log));\n+  }\n }\n",
            "diff_size": 168
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/385/LoggingInterceptor.java\nindex 3a11973b153..c534d88b95c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/385/LoggingInterceptor.java\n@@ -68,14 +68,12 @@ public class LoggingInterceptor<T> implements InvocationHandler {\n     public Object invoke(Object proxy, Method method, Object[] args)\n             throws Throwable {\n         try {\n-            if (method.getDeclaringClass() == DataSource.class\n-                    && \"getConnection\".equals(method.getName())) {\n+            if (method.getDeclaringClass() == DataSource.class && \"getConnection\".equals(method.getName())) {\n                 Connection conn = (Connection)method.invoke(_delegate, args);\n                 print(\"getConnection (tx=\" + conn.getTransactionIsolation() + \")\");\n                 return Proxy.newProxyInstance(_delegate.getClass().getClassLoader(),\n                         new Class[] {Connection.class}, new LoggingInterceptor<Connection>(conn, _log));\n-            } else if (method.getDeclaringClass() == Connection.class\n-                    && Statement.class.isAssignableFrom(method.getReturnType())) {\n+            } else if (method.getDeclaringClass() == Connection.class && Statement.class.isAssignableFrom(method.getReturnType())) {\n                 Statement stmt = (Statement)method.invoke(_delegate, args);\n                 print(method, args);\n                 return Proxy.newProxyInstance(_delegate.getClass().getClassLoader(),\n@@ -170,4 +168,4 @@ public class LoggingInterceptor<T> implements InvocationHandler {\n         return (DataSource)Proxy.newProxyInstance(ds.getClass().getClassLoader(),\n                 new Class[] {DataSource.class}, new LoggingInterceptor<DataSource>(ds,log));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/385/LoggingInterceptor.java\nindex 3a11973b153..59b8f6f0552 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/385/LoggingInterceptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/385/LoggingInterceptor.java\n@@ -106,8 +106,9 @@ public class LoggingInterceptor<T> implements InvocationHandler {\n                 print(\"Set isolation level to \" + args[0]);\n             }\n             // JDBC Statement\n-            else if (method.getName().startsWith(\"execute\") && args != null && args.length == 1 && args[0] instanceof String) {\n-                print(method.getName() + \"(\" + args[0] + \"), \" + getParams());\n+            else if (method.getName().startsWith(\"execute\") && args != null && args.length\n+                == 1 && args[0] instanceof String) {\n+                 print(method.getName() + \"(\" + args[0] + \"), \" + getParams());\n             } else if (method.getName().startsWith(\"execute\")) {\n                 print(method.getName() + \", \" + getParams());\n             } else if (\"clearParameters\".equals(method.getName())) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}