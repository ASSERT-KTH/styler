{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3121",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3121/DuplicationAwareBaseProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3121/DuplicationAwareBaseProcessor.java\nindex c24e0446372..4e72cf901cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3121/DuplicationAwareBaseProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3121/DuplicationAwareBaseProcessor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure;\n \n import java.lang.annotation.Annotation;\n@@ -55,85 +56,85 @@ import static org.neo4j.tooling.procedure.CompilerOptions.IGNORE_CONTEXT_WARNING\n  */\n public class DuplicationAwareBaseProcessor<T extends Annotation> extends AbstractProcessor\n {\n-    private final Set<Element> visitedElements = new LinkedHashSet<>();\n-    private final Class<T> supportedAnnotationType;\n-    private final Function<T,Optional<String>> customNameFunction;\n-    private final Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier;\n+  private final Set<Element> visitedElements = new LinkedHashSet<>();\n+  private final Class<T> supportedAnnotationType;\n+  private final Function<T, Optional<String>> customNameFunction;\n+  private final Function<ProcessingEnvironment, ElementVisitor<Stream<CompilationMessage>, Void>> visitorSupplier;\n \n-    private Function<Collection<Element>,Stream<CompilationMessage>> duplicationValidator;\n-    private ElementVisitor<Stream<CompilationMessage>,Void> visitor;\n-    private MessagePrinter messagePrinter;\n+  private Function<Collection<Element>, Stream<CompilationMessage>> duplicationValidator;\n+  private ElementVisitor<Stream<CompilationMessage>, Void> visitor;\n+  private MessagePrinter messagePrinter;\n \n-    /**\n-     * Base initialization of Neo4j extension processor (where extension can be {@link Procedure}, {@link UserFunction},\n-     * {@link UserAggregationFunction}).\n-     *\n-     * @param supportedAnnotationType main annotation type supported by the processor. The main annotation may depend on\n-     * other annotations (e.g. {@link UserAggregationFunction} works with {@link UserAggregationResult} and\n-     * {@link UserAggregationUpdate}).\n-     * However, by design, these auxiliary annotations are processed by traversing the\n-     * element graph, rather than by standalone annotation processors.\n-     * @param customNameFunction function allowing to extract the custom simple name of the annotated element\n-     * @param visitorSupplier supplies the main {@link ElementVisitor} class in charge of traversing and validating the\n-     * annotated elements\n-     */\n-    public DuplicationAwareBaseProcessor( Class<T> supportedAnnotationType, Function<T,Optional<String>> customNameFunction,\n-            Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier )\n-    {\n-        this.supportedAnnotationType = supportedAnnotationType;\n-        this.customNameFunction = customNameFunction;\n-        this.visitorSupplier = visitorSupplier;\n-    }\n+  /**\n+   * Base initialization of Neo4j extension processor (where extension can be {@link Procedure}, {@link UserFunction},\n+   * {@link UserAggregationFunction}).\n+   *\n+   * @param supportedAnnotationType main annotation type supported by the processor. The main annotation may depend on\n+   *                                other annotations (e.g. {@link UserAggregationFunction} works with {@link UserAggregationResult} and\n+   *                                {@link UserAggregationUpdate}).\n+   *                                However, by design, these auxiliary annotations are processed by traversing the\n+   *                                element graph, rather than by standalone annotation processors.\n+   * @param customNameFunction      function allowing to extract the custom simple name of the annotated element\n+   * @param visitorSupplier         supplies the main {@link ElementVisitor} class in charge of traversing and validating the\n+   *                                annotated elements\n+   */\n+  public DuplicationAwareBaseProcessor(Class<T> supportedAnnotationType, Function<T, Optional<String>> customNameFunction,\n+                                       Function<ProcessingEnvironment, ElementVisitor<Stream<CompilationMessage>, Void>> visitorSupplier)\n+  {\n+    this.supportedAnnotationType = supportedAnnotationType;\n+    this.customNameFunction = customNameFunction;\n+    this.visitorSupplier = visitorSupplier;\n+  }\n \n-    @Override\n-    public synchronized void init( ProcessingEnvironment processingEnv )\n-    {\n-        super.init( processingEnv );\n+  @Override\n+  public synchronized void init(ProcessingEnvironment processingEnv)\n+  {\n+    super.init(processingEnv);\n \n-        messagePrinter = new MessagePrinter( processingEnv.getMessager() );\n-        duplicationValidator =\n-                new DuplicatedExtensionValidator<>( processingEnv.getElementUtils(), supportedAnnotationType, customNameFunction );\n-        visitor = visitorSupplier.apply( processingEnv );\n-    }\n+    messagePrinter = new MessagePrinter(processingEnv.getMessager());\n+    duplicationValidator =\n+        new DuplicatedExtensionValidator<>(processingEnv.getElementUtils(), supportedAnnotationType, customNameFunction);\n+    visitor = visitorSupplier.apply(processingEnv);\n+  }\n \n-    @Override\n-    public Set<String> getSupportedOptions()\n-    {\n-        return Collections.singleton( IGNORE_CONTEXT_WARNINGS_OPTION );\n-    }\n+  @Override\n+  public Set<String> getSupportedOptions()\n+  {\n+    return Collections.singleton(IGNORE_CONTEXT_WARNINGS_OPTION);\n+  }\n \n-    @Override\n-    public Set<String> getSupportedAnnotationTypes()\n-    {\n-        return Collections.singleton( supportedAnnotationType.getName() );\n-    }\n+  @Override\n+  public Set<String> getSupportedAnnotationTypes()\n+  {\n+    return Collections.singleton(supportedAnnotationType.getName());\n+  }\n \n-    @Override\n-    public SourceVersion getSupportedSourceVersion()\n-    {\n-        return SourceVersion.latestSupported();\n-    }\n+  @Override\n+  public SourceVersion getSupportedSourceVersion()\n+  {\n+    return SourceVersion.latestSupported();\n+  }\n \n-    @Override\n-    public boolean process( Set<? extends TypeElement> annotations, RoundEnvironment roundEnv )\n+  @Override\n+  public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)\n+  {\n+    processElements(roundEnv);\n+    if (roundEnv.processingOver())\n     {\n-        processElements( roundEnv );\n-        if ( roundEnv.processingOver() )\n-        {\n-            duplicationValidator.apply( visitedElements ).forEach( messagePrinter::print );\n-        }\n-        return false;\n+      duplicationValidator.apply(visitedElements).forEach(messagePrinter::print);\n     }\n+    return false;\n+  }\n \n-    private void processElements( RoundEnvironment roundEnv )\n-    {\n-        Set<? extends Element> functions = roundEnv.getElementsAnnotatedWith( supportedAnnotationType );\n-        visitedElements.addAll( functions );\n-        functions.stream().flatMap( this::validate ).forEachOrdered( messagePrinter::print );\n-    }\n+  private void processElements(RoundEnvironment roundEnv)\n+  {\n+    Set<? extends Element> functions = roundEnv.getElementsAnnotatedWith(supportedAnnotationType);\n+    visitedElements.addAll(functions);\n+    functions.stream().flatMap(this::validate).forEachOrdered(messagePrinter::print);\n+  }\n \n-    private Stream<CompilationMessage> validate( Element element )\n-    {\n-        return visitor.visit( element );\n-    }\n+  private Stream<CompilationMessage> validate(Element element)\n+  {\n+    return visitor.visit(element);\n+  }\n }\n",
            "diff_size": 75
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3121/DuplicationAwareBaseProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3121/DuplicationAwareBaseProcessor.java\nindex c24e0446372..2b9f79ff6aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3121/DuplicationAwareBaseProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3121/DuplicationAwareBaseProcessor.java\n@@ -60,7 +60,7 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n     private final Function<T,Optional<String>> customNameFunction;\n     private final Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier;\n \n-    private Function<Collection<Element>,Stream<CompilationMessage>> duplicationValidator;\n+    private Function<Collection<Element>, Stream<CompilationMessage>> duplicationValidator;\n     private ElementVisitor<Stream<CompilationMessage>,Void> visitor;\n     private MessagePrinter messagePrinter;\n \n@@ -77,8 +77,7 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n      * @param visitorSupplier supplies the main {@link ElementVisitor} class in charge of traversing and validating the\n      * annotated elements\n      */\n-    public DuplicationAwareBaseProcessor( Class<T> supportedAnnotationType, Function<T,Optional<String>> customNameFunction,\n-            Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier )\n+    public DuplicationAwareBaseProcessor( Class<T> supportedAnnotationType, Function<T,Optional<String>> customNameFunction, Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier )\n     {\n         this.supportedAnnotationType = supportedAnnotationType;\n         this.customNameFunction = customNameFunction;\n@@ -89,11 +88,9 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n     public synchronized void init( ProcessingEnvironment processingEnv )\n     {\n         super.init( processingEnv );\n-\n-        messagePrinter = new MessagePrinter( processingEnv.getMessager() );\n-        duplicationValidator =\n-                new DuplicatedExtensionValidator<>( processingEnv.getElementUtils(), supportedAnnotationType, customNameFunction );\n-        visitor = visitorSupplier.apply( processingEnv );\n+messagePrinter = new MessagePrinter( processingEnv.getMessager() );\n+        duplicationValidator = new DuplicatedExtensionValidator<>( processingEnv.getElementUtils(), supportedAnnotationType, customNameFunction );\n+visitor = visitorSupplier.apply( processingEnv );\n     }\n \n     @Override\n@@ -136,4 +133,4 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n     {\n         return visitor.visit( element );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "44",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3121/DuplicationAwareBaseProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3121/DuplicationAwareBaseProcessor.java\nindex c24e0446372..a3466cb46ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3121/DuplicationAwareBaseProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3121/DuplicationAwareBaseProcessor.java\n@@ -34,7 +34,6 @@ import javax.lang.model.SourceVersion;\n import javax.lang.model.element.Element;\n import javax.lang.model.element.ElementVisitor;\n import javax.lang.model.element.TypeElement;\n-\n import org.neo4j.procedure.Procedure;\n import org.neo4j.procedure.UserAggregationFunction;\n import org.neo4j.procedure.UserAggregationResult;\n@@ -43,7 +42,6 @@ import org.neo4j.procedure.UserFunction;\n import org.neo4j.tooling.procedure.messages.CompilationMessage;\n import org.neo4j.tooling.procedure.messages.MessagePrinter;\n import org.neo4j.tooling.procedure.validators.DuplicatedExtensionValidator;\n-\n import static org.neo4j.tooling.procedure.CompilerOptions.IGNORE_CONTEXT_WARNINGS_OPTION;\n \n /**\n@@ -53,13 +51,13 @@ import static org.neo4j.tooling.procedure.CompilerOptions.IGNORE_CONTEXT_WARNING\n  *\n  * @param <T> processed annotation type\n  */\n-public class DuplicationAwareBaseProcessor<T extends Annotation> extends AbstractProcessor\n+\n+public class DuplicationAwareBaseProcessor <T extends Annotation> extends AbstractProcessor\n {\n     private final Set<Element> visitedElements = new LinkedHashSet<>();\n     private final Class<T> supportedAnnotationType;\n     private final Function<T,Optional<String>> customNameFunction;\n     private final Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier;\n-\n     private Function<Collection<Element>,Stream<CompilationMessage>> duplicationValidator;\n     private ElementVisitor<Stream<CompilationMessage>,Void> visitor;\n     private MessagePrinter messagePrinter;\n@@ -77,8 +75,8 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n      * @param visitorSupplier supplies the main {@link ElementVisitor} class in charge of traversing and validating the\n      * annotated elements\n      */\n-    public DuplicationAwareBaseProcessor( Class<T> supportedAnnotationType, Function<T,Optional<String>> customNameFunction,\n-            Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier )\n+\n+    public DuplicationAwareBaseProcessor( Class<T> supportedAnnotationType, Function<T,Optional<String>> customNameFunction, Function<ProcessingEnvironment,ElementVisitor<Stream<CompilationMessage>,Void>> visitorSupplier )\n     {\n         this.supportedAnnotationType = supportedAnnotationType;\n         this.customNameFunction = customNameFunction;\n@@ -89,10 +87,8 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n     public synchronized void init( ProcessingEnvironment processingEnv )\n     {\n         super.init( processingEnv );\n-\n         messagePrinter = new MessagePrinter( processingEnv.getMessager() );\n-        duplicationValidator =\n-                new DuplicatedExtensionValidator<>( processingEnv.getElementUtils(), supportedAnnotationType, customNameFunction );\n+        duplicationValidator = new DuplicatedExtensionValidator<>( processingEnv.getElementUtils(), supportedAnnotationType, customNameFunction );\n         visitor = visitorSupplier.apply( processingEnv );\n     }\n \n@@ -122,6 +118,7 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n         {\n             duplicationValidator.apply( visitedElements ).forEach( messagePrinter::print );\n         }\n+\n         return false;\n     }\n \n@@ -129,11 +126,11 @@ public class DuplicationAwareBaseProcessor<T extends Annotation> extends Abstrac\n     {\n         Set<? extends Element> functions = roundEnv.getElementsAnnotatedWith( supportedAnnotationType );\n         visitedElements.addAll( functions );\n-        functions.stream().flatMap( this::validate ).forEachOrdered( messagePrinter::print );\n+        functions.stream().flatMap( this:: validate ).forEachOrdered( messagePrinter::print );\n     }\n \n     private Stream<CompilationMessage> validate( Element element )\n     {\n         return visitor.visit( element );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}