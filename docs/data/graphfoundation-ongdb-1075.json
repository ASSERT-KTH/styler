{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1075",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1075/RelationshipGroupRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1075/RelationshipGroupRecordFormat.java\nindex 44c616b0221..261a2e94633 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1075/RelationshipGroupRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1075/RelationshipGroupRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.standard;\n \n import java.io.IOException;\n@@ -30,103 +31,102 @@ import org.neo4j.kernel.impl.store.record.RelationshipGroupRecord;\n \n public class RelationshipGroupRecordFormat extends BaseOneByteHeaderRecordFormat<RelationshipGroupRecord>\n {\n-   /* Record layout\n-    *\n-    * [type+inUse+highbits,next,firstOut,firstIn,firstLoop,owningNode] = 25B\n-    *\n-    * One record holds first relationship links (out,in,loop) to relationships for one type for one entity.\n-    */\n+  /* Record layout\n+   *\n+   * [type+inUse+highbits,next,firstOut,firstIn,firstLoop,owningNode] = 25B\n+   *\n+   * One record holds first relationship links (out,in,loop) to relationships for one type for one entity.\n+   */\n \n-    public static final int RECORD_SIZE = 25;\n+  public static final int RECORD_SIZE = 25;\n \n-    public RelationshipGroupRecordFormat()\n-    {\n-        super( fixedRecordSize( RECORD_SIZE ), 0, IN_USE_BIT,\n-                StandardFormatSettings.RELATIONSHIP_GROUP_MAXIMUM_ID_BITS );\n-    }\n+  public RelationshipGroupRecordFormat()\n+  {\n+    super(fixedRecordSize(RECORD_SIZE), 0, IN_USE_BIT,\n+        StandardFormatSettings.RELATIONSHIP_GROUP_MAXIMUM_ID_BITS);\n+  }\n \n-    @Override\n-    public void read( RelationshipGroupRecord record, PageCursor cursor, RecordLoad mode, int recordSize )\n+  @Override\n+  public void read(RelationshipGroupRecord record, PageCursor cursor, RecordLoad mode, int recordSize)\n+  {\n+    // [    ,   x] in use\n+    // [    ,xxx ] high next id bits\n+    // [ xxx,    ] high firstOut bits\n+    long headerByte = cursor.getByte();\n+    boolean inUse = isInUse((byte) headerByte);\n+    record.setInUse(inUse);\n+    if (mode.shouldLoad(inUse))\n     {\n-        // [    ,   x] in use\n-        // [    ,xxx ] high next id bits\n-        // [ xxx,    ] high firstOut bits\n-        long headerByte = cursor.getByte();\n-        boolean inUse = isInUse( (byte) headerByte );\n-        record.setInUse( inUse );\n-        if ( mode.shouldLoad( inUse ) )\n-        {\n-            // [    ,xxx ] high firstIn bits\n-            // [ xxx,    ] high firstLoop bits\n-            long highByte = cursor.getByte();\n-\n-            int type = cursor.getShort() & 0xFFFF;\n-            long nextLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-            long nextOutLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-            long nextInLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-            long nextLoopLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-            long owningNode = (cursor.getInt() & 0xFFFFFFFFL) | (((long)cursor.getByte()) << 32);\n-\n-            long nextMod = (headerByte & 0xE) << 31;\n-            long nextOutMod = (headerByte & 0x70) << 28;\n-            long nextInMod = (highByte & 0xE) << 31;\n-            long nextLoopMod = (highByte & 0x70) << 28;\n-\n-            record.initialize( inUse, type,\n-                    BaseRecordFormat.longFromIntAndMod( nextOutLowBits, nextOutMod ),\n-                    BaseRecordFormat.longFromIntAndMod( nextInLowBits, nextInMod ),\n-                    BaseRecordFormat.longFromIntAndMod( nextLoopLowBits, nextLoopMod ),\n-                    owningNode,\n-                    BaseRecordFormat.longFromIntAndMod( nextLowBits, nextMod ) );\n-        }\n-    }\n+      // [    ,xxx ] high firstIn bits\n+      // [ xxx,    ] high firstLoop bits\n+      long highByte = cursor.getByte();\n \n-    @Override\n-    public void write( RelationshipGroupRecord record, PageCursor cursor, int recordSize )\n-    {\n-        if ( record.inUse() )\n-        {\n-            long nextMod = record.getNext() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                           (record.getNext() & 0x700000000L) >> 31;\n-            long nextOutMod = record.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                              (record.getFirstOut() & 0x700000000L) >> 28;\n-            long nextInMod = record.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                             (record.getFirstIn() & 0x700000000L) >> 31;\n-            long nextLoopMod = record.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                               (record.getFirstLoop() & 0x700000000L) >> 28;\n-\n-            // [    ,   x] in use\n-            // [    ,xxx ] high next id bits\n-            // [ xxx,    ] high firstOut bits\n-            cursor.putByte( (byte) (nextOutMod | nextMod | 1) );\n-\n-            // [    ,xxx ] high firstIn bits\n-            // [ xxx,    ] high firstLoop bits\n-            cursor.putByte( (byte) (nextLoopMod | nextInMod) );\n-\n-            cursor.putShort( (short) record.getType() );\n-            cursor.putInt( (int) record.getNext() );\n-            cursor.putInt( (int) record.getFirstOut() );\n-            cursor.putInt( (int) record.getFirstIn() );\n-            cursor.putInt( (int) record.getFirstLoop() );\n-            cursor.putInt( (int) record.getOwningNode() );\n-            cursor.putByte( (byte) (record.getOwningNode() >> 32) );\n-        }\n-        else\n-        {\n-            markAsUnused( cursor );\n-        }\n+      int type = cursor.getShort() & 0xFFFF;\n+      long nextLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+      long nextOutLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+      long nextInLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+      long nextLoopLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+      long owningNode = (cursor.getInt() & 0xFFFFFFFFL) | (((long) cursor.getByte()) << 32);\n+\n+      long nextMod = (headerByte & 0xE) << 31;\n+      long nextOutMod = (headerByte & 0x70) << 28;\n+      long nextInMod = (highByte & 0xE) << 31;\n+      long nextLoopMod = (highByte & 0x70) << 28;\n+\n+      record.initialize(inUse, type,\n+          BaseRecordFormat.longFromIntAndMod(nextOutLowBits, nextOutMod),\n+          BaseRecordFormat.longFromIntAndMod(nextInLowBits, nextInMod),\n+          BaseRecordFormat.longFromIntAndMod(nextLoopLowBits, nextLoopMod),\n+          owningNode,\n+          BaseRecordFormat.longFromIntAndMod(nextLowBits, nextMod));\n     }\n+  }\n \n-    @Override\n-    public RelationshipGroupRecord newRecord()\n+  @Override\n+  public void write(RelationshipGroupRecord record, PageCursor cursor, int recordSize)\n+  {\n+    if (record.inUse())\n     {\n-        return new RelationshipGroupRecord( -1 );\n-    }\n+      long nextMod = record.getNext() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n+          (record.getNext() & 0x700000000L) >> 31;\n+      long nextOutMod = record.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n+          (record.getFirstOut() & 0x700000000L) >> 28;\n+      long nextInMod = record.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n+          (record.getFirstIn() & 0x700000000L) >> 31;\n+      long nextLoopMod = record.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n+          (record.getFirstLoop() & 0x700000000L) >> 28;\n+\n+      // [    ,   x] in use\n+      // [    ,xxx ] high next id bits\n+      // [ xxx,    ] high firstOut bits\n+      cursor.putByte((byte) (nextOutMod | nextMod | 1));\n \n-    @Override\n-    public long getNextRecordReference( RelationshipGroupRecord record )\n+      // [    ,xxx ] high firstIn bits\n+      // [ xxx,    ] high firstLoop bits\n+      cursor.putByte((byte) (nextLoopMod | nextInMod));\n+\n+      cursor.putShort((short) record.getType());\n+      cursor.putInt((int) record.getNext());\n+      cursor.putInt((int) record.getFirstOut());\n+      cursor.putInt((int) record.getFirstIn());\n+      cursor.putInt((int) record.getFirstLoop());\n+      cursor.putInt((int) record.getOwningNode());\n+      cursor.putByte((byte) (record.getOwningNode() >> 32));\n+    } else\n     {\n-        return record.getNext();\n+      markAsUnused(cursor);\n     }\n+  }\n+\n+  @Override\n+  public RelationshipGroupRecord newRecord()\n+  {\n+    return new RelationshipGroupRecord(-1);\n+  }\n+\n+  @Override\n+  public long getNextRecordReference(RelationshipGroupRecord record)\n+  {\n+    return record.getNext();\n+  }\n }\n",
            "diff_size": 134
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1075/RelationshipGroupRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1075/RelationshipGroupRecordFormat.java\nindex 44c616b0221..ea3038e3676 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1075/RelationshipGroupRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1075/RelationshipGroupRecordFormat.java\n@@ -30,14 +30,13 @@ import org.neo4j.kernel.impl.store.record.RelationshipGroupRecord;\n \n public class RelationshipGroupRecordFormat extends BaseOneByteHeaderRecordFormat<RelationshipGroupRecord>\n {\n-   /* Record layout\n+    /* Record layout\n     *\n     * [type+inUse+highbits,next,firstOut,firstIn,firstLoop,owningNode] = 25B\n     *\n     * One record holds first relationship links (out,in,loop) to relationships for one type for one entity.\n     */\n-\n-    public static final int RECORD_SIZE = 25;\n+public static final int RECORD_SIZE = 25;\n \n     public RelationshipGroupRecordFormat()\n     {\n@@ -65,7 +64,7 @@ public class RelationshipGroupRecordFormat extends BaseOneByteHeaderRecordFormat\n             long nextOutLowBits = cursor.getInt() & 0xFFFFFFFFL;\n             long nextInLowBits = cursor.getInt() & 0xFFFFFFFFL;\n             long nextLoopLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-            long owningNode = (cursor.getInt() & 0xFFFFFFFFL) | (((long)cursor.getByte()) << 32);\n+            long owningNode = (cursor.getInt() & 0xFFFFFFFFL) | (((long)cursor.getByte()) << 32 );\n \n             long nextMod = (headerByte & 0xE) << 31;\n             long nextOutMod = (headerByte & 0x70) << 28;\n@@ -73,12 +72,9 @@ public class RelationshipGroupRecordFormat extends BaseOneByteHeaderRecordFormat\n             long nextLoopMod = (highByte & 0x70) << 28;\n \n             record.initialize( inUse, type,\n-                    BaseRecordFormat.longFromIntAndMod( nextOutLowBits, nextOutMod ),\n-                    BaseRecordFormat.longFromIntAndMod( nextInLowBits, nextInMod ),\n-                    BaseRecordFormat.longFromIntAndMod( nextLoopLowBits, nextLoopMod ),\n-                    owningNode,\n+                    BaseRecordFormat.longFromIntAndMod( nextOutLowBits, nextOutMod ), BaseRecordFormat.longFromIntAndMod( nextInLowBits, nextInMod ), BaseRecordFormat.longFromIntAndMod( nextLoopLowBits, nextLoopMod ), owningNode,\n                     BaseRecordFormat.longFromIntAndMod( nextLowBits, nextMod ) );\n-        }\n+    }\n     }\n \n     @Override\n@@ -86,30 +82,24 @@ public class RelationshipGroupRecordFormat extends BaseOneByteHeaderRecordFormat\n     {\n         if ( record.inUse() )\n         {\n-            long nextMod = record.getNext() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                           (record.getNext() & 0x700000000L) >> 31;\n-            long nextOutMod = record.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                              (record.getFirstOut() & 0x700000000L) >> 28;\n-            long nextInMod = record.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                             (record.getFirstIn() & 0x700000000L) >> 31;\n-            long nextLoopMod = record.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 :\n-                               (record.getFirstLoop() & 0x700000000L) >> 28;\n-\n-            // [    ,   x] in use\n+            long nextMod = record.getNext() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (record.getNext() & 0x700000000L) >> 31;\n+    long nextOutMod = record.getFirstOut() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (record.getFirstOut() & 0x700000000L) >> 28;\n+    long nextInMod = record.getFirstIn() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (record.getFirstIn() & 0x700000000L) >> 31;\n+    long nextLoopMod = record.getFirstLoop() == Record.NO_NEXT_RELATIONSHIP.intValue() ? 0 : (record.getFirstLoop() & 0x700000000L) >> 28;\n+    // [    ,   x] in use\n             // [    ,xxx ] high next id bits\n             // [ xxx,    ] high firstOut bits\n-            cursor.putByte( (byte) (nextOutMod | nextMod | 1) );\n+            cursor.putByte( (byte) ( nextOutMod | nextMod | 1) );\n \n             // [    ,xxx ] high firstIn bits\n             // [ xxx,    ] high firstLoop bits\n-            cursor.putByte( (byte) (nextLoopMod | nextInMod) );\n-\n-            cursor.putShort( (short) record.getType() );\n-            cursor.putInt( (int) record.getNext() );\n-            cursor.putInt( (int) record.getFirstOut() );\n-            cursor.putInt( (int) record.getFirstIn() );\n-            cursor.putInt( (int) record.getFirstLoop() );\n-            cursor.putInt( (int) record.getOwningNode() );\n+            cursor.putByte( (byte) ( nextLoopMod | nextInMod ) );\n+cursor.putShort( (short) record.getType() );\n+            cursor.putInt( ( int) record.getNext() );\n+            cursor.putInt( ( int) record.getFirstOut() );\n+            cursor.putInt( ( int) record.getFirstIn() );\n+            cursor.putInt( ( int) record.getFirstLoop() );\n+            cursor.putInt( ( int) record.getOwningNode() );\n             cursor.putByte( (byte) (record.getOwningNode() >> 32) );\n         }\n         else\n@@ -129,4 +119,4 @@ public class RelationshipGroupRecordFormat extends BaseOneByteHeaderRecordFormat\n     {\n         return record.getNext();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}