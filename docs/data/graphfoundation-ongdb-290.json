{
    "project_name": "graphfoundation-ongdb",
    "error_id": "290",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/290/SequenceArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/290/SequenceArray.java\nindex 5880e891169..2fd53b96004 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/290/SequenceArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/290/SequenceArray.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.util.Arrays;\n@@ -25,137 +26,137 @@ import static java.lang.Math.max;\n \n public class SequenceArray\n {\n-    private static final long UNSET = -1L;\n-    // This is the backing store, treated as a ring, courtesy of cursor\n-    private long[] array;\n-    private int cursor;\n-    private int itemsAhead;\n-    private final int longsPerItem;\n-    private int capacity;\n-\n-    SequenceArray( int longsPerItem, int initialCapacity )\n-    {\n-        this.longsPerItem = longsPerItem;\n-        this.capacity = initialCapacity;\n-        this.array = new long[capacity * longsPerItem];\n-    }\n-\n-    public void clear()\n+  private static final long UNSET = -1L;\n+  // This is the backing store, treated as a ring, courtesy of cursor\n+  private long[] array;\n+  private int cursor;\n+  private int itemsAhead;\n+  private final int longsPerItem;\n+  private int capacity;\n+\n+  SequenceArray(int longsPerItem, int initialCapacity)\n+  {\n+    this.longsPerItem = longsPerItem;\n+    this.capacity = initialCapacity;\n+    this.array = new long[capacity * longsPerItem];\n+  }\n+\n+  public void clear()\n+  {\n+    cursor = 0;\n+    itemsAhead = 0;\n+  }\n+\n+  void offer(long baseNumber, long number, long[] meta)\n+  {\n+    int diff = (int) (number - baseNumber);\n+    ensureArrayCapacity(diff);\n+    int index = cursor + diff - 1;\n+\n+    // If we offer a value a bit ahead of the last offered value then clear the values in between\n+    for (int i = cursor + itemsAhead; i < index; i++)\n     {\n-        cursor = 0;\n-        itemsAhead = 0;\n+      array[index(i)] = UNSET;\n     }\n \n-    void offer( long baseNumber, long number, long[] meta )\n+    int absIndex = index(index);\n+    array[absIndex] = number;\n+    System.arraycopy(meta, 0, array, absIndex + 1, longsPerItem - 1);\n+    itemsAhead = max(itemsAhead, diff);\n+  }\n+\n+  private int index(int logicalIndex)\n+  {\n+    return (logicalIndex % capacity) * longsPerItem;\n+  }\n+\n+  long pollHighestGapFree(long given, long[] meta)\n+  {\n+    // assume that \"given\" would be placed at cursor\n+    long number = given;\n+    int length = itemsAhead - 1;\n+    int absIndex = 0;\n+    for (int i = 0; i < length; i++)\n     {\n-        int diff = (int) (number - baseNumber);\n-        ensureArrayCapacity( diff );\n-        int index = cursor + diff - 1;\n-\n-        // If we offer a value a bit ahead of the last offered value then clear the values in between\n-        for ( int i = cursor + itemsAhead; i < index; i++ )\n-        {\n-            array[index( i )] = UNSET;\n-        }\n-\n-        int absIndex = index( index );\n-        array[absIndex] = number;\n-        System.arraycopy( meta, 0, array, absIndex + 1, longsPerItem - 1 );\n-        itemsAhead = max( itemsAhead, diff );\n+      // Advance the cursor first because this method is only assumed to be called when offering the number immediately after\n+      // the current highest gap-free number\n+      advanceCursor();\n+      int tentativeAbsIndex = index(cursor);\n+      if (array[tentativeAbsIndex] == UNSET)\n+      {   // we found a gap, return the number before the gap\n+        break;\n+      }\n+\n+      absIndex = tentativeAbsIndex;\n+      number++;\n+      assert array[absIndex] == number :\n+          \"Expected index \" + cursor + \" to be \" + number + \", but was \" + array[absIndex] +\n+              \". This is for i=\" + i;\n     }\n \n-    private int index( int logicalIndex )\n+    // copy the meta values into the supplied meta\n+    System.arraycopy(array, absIndex + 1, meta, 0, longsPerItem - 1);\n+    return number;\n+  }\n+\n+  private void advanceCursor()\n+  {\n+    assert itemsAhead > 0;\n+    itemsAhead--;\n+    cursor = (cursor + 1) % capacity;\n+  }\n+\n+  private void ensureArrayCapacity(int capacity)\n+  {\n+    while (capacity > this.capacity)\n     {\n-        return (logicalIndex % capacity) * longsPerItem;\n+      int newCapacity = this.capacity * 2;\n+      long[] newArray = new long[newCapacity * longsPerItem];\n+      // Copy contents to new array, newArray starting at 0\n+      for (int i = 0; i < itemsAhead; i++)\n+      {\n+        System.arraycopy(array, index(cursor + i), newArray, index(i), longsPerItem);\n+      }\n+      this.array = newArray;\n+      this.capacity = newCapacity;\n+      this.cursor = 0;\n     }\n+  }\n \n-    long pollHighestGapFree( long given, long[] meta )\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    for (int i = 0; i < itemsAhead; i++)\n     {\n-        // assume that \"given\" would be placed at cursor\n-        long number = given;\n-        int length = itemsAhead - 1;\n-        int absIndex = 0;\n-        for ( int i = 0; i < length; i++ )\n-        {\n-            // Advance the cursor first because this method is only assumed to be called when offering the number immediately after\n-            // the current highest gap-free number\n-            advanceCursor();\n-            int tentativeAbsIndex = index( cursor );\n-            if ( array[tentativeAbsIndex] == UNSET )\n-            {   // we found a gap, return the number before the gap\n-                break;\n-            }\n-\n-            absIndex = tentativeAbsIndex;\n-            number++;\n-            assert array[absIndex] == number :\n-                    \"Expected index \" + cursor + \" to be \" + number + \", but was \" + array[absIndex] +\n-                            \". This is for i=\" + i;\n-        }\n-\n-        // copy the meta values into the supplied meta\n-        System.arraycopy( array, absIndex + 1, meta, 0, longsPerItem - 1 );\n-        return number;\n+      long value = array[index(cursor + i)];\n+      if (value != UNSET)\n+      {\n+        builder.append(builder.length() > 0 ? \",\" : \"\").append(value);\n+      }\n     }\n+    return builder.toString();\n+  }\n \n-    private void advanceCursor()\n-    {\n-        assert itemsAhead > 0;\n-        itemsAhead--;\n-        cursor = (cursor + 1) % capacity;\n-    }\n+  public boolean seen(long baseNumber, long number, long[] meta)\n+  {\n+    int diff = (int) (number - baseNumber);\n+    int index = cursor + diff - 1;\n \n-    private void ensureArrayCapacity( int capacity )\n+    if (index >= cursor + itemsAhead)\n     {\n-        while ( capacity > this.capacity )\n-        {\n-            int newCapacity = this.capacity * 2;\n-            long[] newArray = new long[newCapacity * longsPerItem];\n-            // Copy contents to new array, newArray starting at 0\n-            for ( int i = 0; i < itemsAhead; i++ )\n-            {\n-                System.arraycopy( array, index( cursor + i ), newArray, index( i ), longsPerItem );\n-            }\n-            this.array = newArray;\n-            this.capacity = newCapacity;\n-            this.cursor = 0;\n-        }\n+      return false;\n     }\n \n-    @Override\n-    public String toString()\n+    int absIndex = index(index);\n+    long[] arrayRef = array;\n+    long num = arrayRef[absIndex];\n+    if (num != number)\n     {\n-        StringBuilder builder = new StringBuilder();\n-        for ( int i = 0; i < itemsAhead; i++ )\n-        {\n-            long value = array[index( cursor + i )];\n-            if ( value != UNSET )\n-            {\n-                builder.append( builder.length() > 0 ? \",\" : \"\" ).append( value );\n-            }\n-        }\n-        return builder.toString();\n+      return false;\n     }\n \n-    public boolean seen( long baseNumber, long number, long[] meta )\n-    {\n-        int diff = (int) (number - baseNumber);\n-        int index = cursor + diff - 1;\n-\n-        if ( index >= cursor + itemsAhead )\n-        {\n-            return false;\n-        }\n-\n-        int absIndex = index( index );\n-        long[] arrayRef = array;\n-        long num = arrayRef[absIndex];\n-        if ( num != number )\n-        {\n-            return false;\n-        }\n-\n-        long[] metaCopy = Arrays.copyOfRange( arrayRef, absIndex + 1, absIndex + longsPerItem );\n-        return Arrays.equals( meta, metaCopy );\n-    }\n+    long[] metaCopy = Arrays.copyOfRange(arrayRef, absIndex + 1, absIndex + longsPerItem);\n+    return Arrays.equals(meta, metaCopy);\n+  }\n }\n",
            "diff_size": 177
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "51",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "140",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/290/SequenceArray.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/290/SequenceArray.java\nindex 5880e891169..e184770bf89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/290/SequenceArray.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/290/SequenceArray.java\n@@ -48,7 +48,7 @@ public class SequenceArray\n \n     void offer( long baseNumber, long number, long[] meta )\n     {\n-        int diff = (int) (number - baseNumber);\n+        int diff = ( int) ( number - baseNumber);\n         ensureArrayCapacity( diff );\n         int index = cursor + diff - 1;\n \n@@ -66,7 +66,7 @@ public class SequenceArray\n \n     private int index( int logicalIndex )\n     {\n-        return (logicalIndex % capacity) * longsPerItem;\n+        return ( logicalIndex % capacity) * longsPerItem;\n     }\n \n     long pollHighestGapFree( long given, long[] meta )\n@@ -82,16 +82,14 @@ public class SequenceArray\n             advanceCursor();\n             int tentativeAbsIndex = index( cursor );\n             if ( array[tentativeAbsIndex] == UNSET )\n-            {   // we found a gap, return the number before the gap\n+            {\n+    // we found a gap, return the number before the gap\n                 break;\n             }\n \n-            absIndex = tentativeAbsIndex;\n-            number++;\n-            assert array[absIndex] == number :\n-                    \"Expected index \" + cursor + \" to be \" + number + \", but was \" + array[absIndex] +\n-                            \". This is for i=\" + i;\n-        }\n+            absIndex = tentativeAbsIndex; number++;\n+            assert array[absIndex] == number : \"Expected index \" + cursor + \" to be \" + number + \", but was \" + array[absIndex] + \". This is for i=\" + i;\n+    }\n \n         // copy the meta values into the supplied meta\n         System.arraycopy( array, absIndex + 1, meta, 0, longsPerItem - 1 );\n@@ -102,7 +100,7 @@ public class SequenceArray\n     {\n         assert itemsAhead > 0;\n         itemsAhead--;\n-        cursor = (cursor + 1) % capacity;\n+        cursor = (cursor + 1 ) % capacity;\n     }\n \n     private void ensureArrayCapacity( int capacity )\n@@ -139,7 +137,7 @@ public class SequenceArray\n \n     public boolean seen( long baseNumber, long number, long[] meta )\n     {\n-        int diff = (int) (number - baseNumber);\n+        int diff = ( int) ( number - baseNumber);\n         int index = cursor + diff - 1;\n \n         if ( index >= cursor + itemsAhead )\n@@ -158,4 +156,4 @@ public class SequenceArray\n         long[] metaCopy = Arrays.copyOfRange( arrayRef, absIndex + 1, absIndex + longsPerItem );\n         return Arrays.equals( meta, metaCopy );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}