{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1706",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "264",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "277",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1706/HexPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1706/HexPrinter.java\nindex 35a0183a5f1..be1c842b9fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1706/HexPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1706/HexPrinter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.io.ByteArrayOutputStream;\n@@ -29,338 +30,343 @@ import static java.nio.ByteBuffer.wrap;\n \n /**\n  * Prints streams of bytes as hex, printed in columns and rows neatly ordered. For example:\n- *  <p>\n- *  @ 0x000A: FF B9 E2 5B 95 2B 69 21  CF 01 10 89 1E 05 67 51  0C 91 32 20 40 8A 4B 92  01 8C C7 93 F8 66 58 F0\n- *  <br>\n- *  @ 0x000B: 39 C8 F1 2B 84 3B AF 8E  C7 50 F7 82 E7 1C DB 20  BF E3 C1 08 68 12 46 72  BA 72 5F 82 13 9A C1 DF\n- *  <br>\n- *  @ 0x000C: 56 A6 83 85 36 25 00 DA  B4 57 02 FF E6 97 1C 69  F9 16 56 AF 78 C9 0F A4  CD A4 1F A8 08 08 3B 3B\n- *  <p>\n+ * <p>\n+ *\n+ * @ 0x000A: FF B9 E2 5B 95 2B 69 21  CF 01 10 89 1E 05 67 51  0C 91 32 20 40 8A 4B 92  01 8C C7 93 F8 66 58 F0\n+ * <br>\n+ * @ 0x000B: 39 C8 F1 2B 84 3B AF 8E  C7 50 F7 82 E7 1C DB 20  BF E3 C1 08 68 12 46 72  BA 72 5F 82 13 9A C1 DF\n+ * <br>\n+ * @ 0x000C: 56 A6 83 85 36 25 00 DA  B4 57 02 FF E6 97 1C 69  F9 16 56 AF 78 C9 0F A4  CD A4 1F A8 08 08 3B 3B\n+ * <p>\n  * where number of bytes per line, number of bytes per group, byte group separator, length of line number, prefix\n  * or suffix of line number can be controlled. If the length of line number is set to a non-positive number,\n  * then no line number, prefix, or suffix will be added.\n- *\n  */\n public class HexPrinter\n {\n-    private final PrintStream out;\n-    private int bytesPerLine;\n-    private int bytesPerGroup;\n-    private String byteSeparator;\n-    private String groupSeparator;\n-    private int maxLineNumberDigits;\n-    private String lineNumberPrefix;\n-    private String lineNumberSuffix;\n-\n-    private long currentLineNumber;\n-    private int bytesOnThisLine;\n-\n-    private static final int DEFAULT_BYTES_PER_GROUP = 8;\n-    private static final int DEFAULT_GROUPS_PER_LINE = 4;\n-    private static final int DEFAULT_MAX_LINE_NUMBER_DIGITS = 0;\n-    private static final String DEFAULT_GROUP_SEPARATOR = \"    \";\n-    private static final String DEFAULT_LINE_NUMBER_PREFIX = \"@ \";\n-    private static final String DEFAULT_LINE_NUMBER_SUFFIX = \": \";\n-    private static final String DEFAULT_BYTE_SEPARATOR = \" \";\n-\n-    public HexPrinter withBytesPerLine( int bytesPerLine )\n-    {\n-        this.bytesPerLine = bytesPerLine;\n-        return this;\n-    }\n-\n-    public HexPrinter withBytesPerGroup( int bytesPerGroup )\n-    {\n-        this.bytesPerGroup = bytesPerGroup;\n-        return this;\n-    }\n-\n-    public HexPrinter withGroupSeparator( String separator )\n-    {\n-        this.groupSeparator = separator;\n-        return this;\n-    }\n-\n-    public HexPrinter withLineNumberDigits( int maxLineNumberDigits )\n-    {\n-        this.maxLineNumberDigits = maxLineNumberDigits;\n-        return this;\n-    }\n-\n-    public HexPrinter withLineNumberPrefix( String prefix )\n-    {\n-        this.lineNumberPrefix = prefix;\n-        return this;\n-    }\n-\n-    public HexPrinter withLineNumberSuffix( String suffix )\n+  private final PrintStream out;\n+  private int bytesPerLine;\n+  private int bytesPerGroup;\n+  private String byteSeparator;\n+  private String groupSeparator;\n+  private int maxLineNumberDigits;\n+  private String lineNumberPrefix;\n+  private String lineNumberSuffix;\n+\n+  private long currentLineNumber;\n+  private int bytesOnThisLine;\n+\n+  private static final int DEFAULT_BYTES_PER_GROUP = 8;\n+  private static final int DEFAULT_GROUPS_PER_LINE = 4;\n+  private static final int DEFAULT_MAX_LINE_NUMBER_DIGITS = 0;\n+  private static final String DEFAULT_GROUP_SEPARATOR = \"    \";\n+  private static final String DEFAULT_LINE_NUMBER_PREFIX = \"@ \";\n+  private static final String DEFAULT_LINE_NUMBER_SUFFIX = \": \";\n+  private static final String DEFAULT_BYTE_SEPARATOR = \" \";\n+\n+  public HexPrinter withBytesPerLine(int bytesPerLine)\n+  {\n+    this.bytesPerLine = bytesPerLine;\n+    return this;\n+  }\n+\n+  public HexPrinter withBytesPerGroup(int bytesPerGroup)\n+  {\n+    this.bytesPerGroup = bytesPerGroup;\n+    return this;\n+  }\n+\n+  public HexPrinter withGroupSeparator(String separator)\n+  {\n+    this.groupSeparator = separator;\n+    return this;\n+  }\n+\n+  public HexPrinter withLineNumberDigits(int maxLineNumberDigits)\n+  {\n+    this.maxLineNumberDigits = maxLineNumberDigits;\n+    return this;\n+  }\n+\n+  public HexPrinter withLineNumberPrefix(String prefix)\n+  {\n+    this.lineNumberPrefix = prefix;\n+    return this;\n+  }\n+\n+  public HexPrinter withLineNumberSuffix(String suffix)\n+  {\n+    this.lineNumberSuffix = suffix;\n+    return this;\n+  }\n+\n+  public HexPrinter withLineNumberOffset(long offset)\n+  {\n+    this.currentLineNumber = offset;\n+    return this;\n+  }\n+\n+  public HexPrinter withByteSeparator(String byteSeparator)\n+  {\n+    this.byteSeparator = byteSeparator;\n+    return this;\n+  }\n+\n+  public HexPrinter withBytesGroupingFormat(int bytesPerLine, int bytesPerGroup, String separator)\n+  {\n+    this.bytesPerLine = bytesPerLine;\n+    this.bytesPerGroup = bytesPerGroup;\n+    this.groupSeparator = separator;\n+    return this;\n+  }\n+\n+  public HexPrinter withLineNumberFormat(int maxLineNumberDigits, String prefix, String suffix)\n+  {\n+    this.maxLineNumberDigits = maxLineNumberDigits;\n+    this.lineNumberPrefix = prefix;\n+    this.lineNumberSuffix = suffix;\n+    return this;\n+  }\n+\n+  /**\n+   * Using no line number, 8 bytes per group, 32 bytes per line, 4-space separator as default formating to\n+   * print bytes as hex. Output looks like:\n+   * <p>\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   * <br>\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   *\n+   * @param out\n+   */\n+  public HexPrinter(PrintStream out)\n+  {\n+    this(out, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR);\n+  }\n+\n+  public HexPrinter(PrintStream out, int bytesPerGroup, String groupSep)\n+  {\n+    this.out = out;\n+    this.bytesPerLine = DEFAULT_GROUPS_PER_LINE * bytesPerGroup;\n+    this.bytesPerGroup = bytesPerGroup;\n+    this.groupSeparator = groupSep;\n+    this.maxLineNumberDigits = DEFAULT_MAX_LINE_NUMBER_DIGITS;\n+    this.lineNumberPrefix = DEFAULT_LINE_NUMBER_PREFIX;\n+    this.lineNumberSuffix = DEFAULT_LINE_NUMBER_SUFFIX;\n+    this.byteSeparator = DEFAULT_BYTE_SEPARATOR;\n+  }\n+\n+  /**\n+   * Append one byte into the print stream\n+   *\n+   * @param value\n+   * @return\n+   */\n+  public HexPrinter append(byte value)\n+  {\n+    checkNewLine();\n+    addHexValue(value);\n+    return this;\n+  }\n+\n+  /**\n+   * Append all the bytes in the channel into print stream\n+   *\n+   * @param source\n+   * @return\n+   * @throws IOException\n+   */\n+  public HexPrinter append(ReadableByteChannel source) throws IOException\n+  {\n+    return append(source, -1);\n+  }\n+\n+  /**\n+   * Append {@code atMost} count of bytes into print stream\n+   *\n+   * @param source\n+   * @param atMost\n+   * @return\n+   * @throws IOException\n+   */\n+  public HexPrinter append(ReadableByteChannel source, int atMost) throws IOException\n+  {\n+    boolean indefinite = atMost == -1;\n+    ByteBuffer buffer = ByteBuffer.allocate(4 * 1024);\n+    while (true)\n     {\n-        this.lineNumberSuffix = suffix;\n-        return this;\n+      buffer.clear();\n+      if (!indefinite)\n+      {\n+        buffer.limit(Math.min(buffer.capacity(), atMost));\n+      }\n+      int read = source.read(buffer);\n+      if (read == -1)\n+      {\n+        break;\n+      }\n+\n+      atMost -= read;\n+      buffer.flip();\n+      while (buffer.hasRemaining())\n+      {\n+        append(buffer.get());\n+      }\n     }\n-\n-    public HexPrinter withLineNumberOffset( long offset )\n-    {\n-        this.currentLineNumber = offset;\n-        return this;\n-    }\n-\n-    public HexPrinter withByteSeparator( String byteSeparator )\n-    {\n-        this.byteSeparator = byteSeparator;\n-        return this;\n-    }\n-\n-    public HexPrinter withBytesGroupingFormat( int bytesPerLine, int bytesPerGroup, String separator )\n-    {\n-        this.bytesPerLine = bytesPerLine;\n-        this.bytesPerGroup = bytesPerGroup;\n-        this.groupSeparator = separator;\n-        return this;\n-    }\n-\n-    public HexPrinter withLineNumberFormat( int maxLineNumberDigits, String prefix, String suffix )\n+    return this;\n+  }\n+\n+  /**\n+   * Append a part of byte buffer into print stream\n+   *\n+   * @param bytes\n+   * @param offset\n+   * @param length\n+   * @return\n+   */\n+  public HexPrinter append(ByteBuffer bytes, int offset, int length)\n+  {\n+    for (int i = offset; i < offset + length; i++)\n     {\n-        this.maxLineNumberDigits = maxLineNumberDigits;\n-        this.lineNumberPrefix = prefix;\n-        this.lineNumberSuffix = suffix;\n-        return this;\n+      append(bytes.get(i));\n     }\n-\n-    /**\n-     * Using no line number, 8 bytes per group, 32 bytes per line, 4-space separator as default formating to\n-     * print bytes as hex. Output looks like:\n-     * <p>\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     * <br>\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     *\n-     * @param out\n-     */\n-    public HexPrinter( PrintStream out )\n+    return this;\n+  }\n+\n+  /**\n+   * Append the bytes in the byte buffer, from its current position to its limit into print stream. This operation\n+   * will not move the buffers current position.\n+   *\n+   * @param bytes\n+   * @return\n+   */\n+  public HexPrinter append(ByteBuffer bytes)\n+  {\n+    return append(bytes, bytes.position(), bytes.remaining());\n+  }\n+\n+  /**\n+   * Append the whole byte array into print stream\n+   *\n+   * @param bytes\n+   * @return\n+   */\n+  public HexPrinter append(byte[] bytes)\n+  {\n+    return append(wrap(bytes), 0, bytes.length);\n+  }\n+\n+  private void addHexValue(byte value)\n+  {\n+    if (bytesOnThisLine == 1)\n     {\n-        this( out, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR );\n-    }\n-\n-    public HexPrinter( PrintStream out, int bytesPerGroup, String groupSep )\n+      // it is the first byte\n+      // out.append( NOTHING )\n+    } else if (bytesOnThisLine % bytesPerGroup == 1)\n     {\n-        this.out = out;\n-        this.bytesPerLine = DEFAULT_GROUPS_PER_LINE * bytesPerGroup;\n-        this.bytesPerGroup = bytesPerGroup;\n-        this.groupSeparator = groupSep;\n-        this.maxLineNumberDigits = DEFAULT_MAX_LINE_NUMBER_DIGITS;\n-        this.lineNumberPrefix = DEFAULT_LINE_NUMBER_PREFIX;\n-        this.lineNumberSuffix = DEFAULT_LINE_NUMBER_SUFFIX;\n-        this.byteSeparator = DEFAULT_BYTE_SEPARATOR;\n-    }\n-\n-    /**\n-     * Append one byte into the print stream\n-     * @param value\n-     * @return\n-     */\n-    public HexPrinter append( byte value )\n-    {\n-        checkNewLine();\n-        addHexValue( value );\n-        return this;\n-    }\n-\n-    /**\n-     * Append all the bytes in the channel into print stream\n-     * @param source\n-     * @return\n-     * @throws IOException\n-     */\n-    public HexPrinter append( ReadableByteChannel source ) throws IOException\n+      // it is the first byte for a new byte group\n+      out.append(groupSeparator);\n+    } else\n     {\n-        return append( source, -1 );\n+      out.append(byteSeparator);\n     }\n+    out.printf(\"%X%X\", 0xF & (value >> 4), 0xF & value);\n+  }\n \n-    /**\n-     * Append {@code atMost} count of bytes into print stream\n-     * @param source\n-     * @param atMost\n-     * @return\n-     * @throws IOException\n-     */\n-    public HexPrinter append( ReadableByteChannel source, int atMost ) throws IOException\n+  private void checkNewLine()\n+  {\n+    if (bytesOnThisLine >= bytesPerLine)\n     {\n-        boolean indefinite = atMost == -1;\n-        ByteBuffer buffer = ByteBuffer.allocate( 4 * 1024 );\n-        while ( true )\n-        {\n-            buffer.clear();\n-            if ( !indefinite )\n-            {\n-                buffer.limit( Math.min( buffer.capacity(), atMost ) );\n-            }\n-            int read = source.read( buffer );\n-            if ( read == -1 )\n-            {\n-                break;\n-            }\n-\n-            atMost -= read;\n-            buffer.flip();\n-            while ( buffer.hasRemaining() )\n-            {\n-                append( buffer.get() );\n-            }\n-        }\n-        return this;\n+      out.println();\n+      bytesOnThisLine = 0;\n+      currentLineNumber++;\n     }\n-\n-    /**\n-     * Append a part of byte buffer into print stream\n-     * @param bytes\n-     * @param offset\n-     * @param length\n-     * @return\n-     */\n-    public HexPrinter append( ByteBuffer bytes, int offset, int length )\n-    {\n-        for ( int i = offset; i < offset + length; i++ )\n-        {\n-            append( bytes.get( i ) );\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * Append the bytes in the byte buffer, from its current position to its limit into print stream. This operation\n-     * will not move the buffers current position.\n-     * @param bytes\n-     * @return\n-     */\n-    public HexPrinter append( ByteBuffer bytes )\n-    {\n-        return append( bytes, bytes.position(), bytes.remaining() );\n-    }\n-\n-    /**\n-     * Append the whole byte array into print stream\n-     * @param bytes\n-     * @return\n-     */\n-    public HexPrinter append( byte[] bytes )\n-    {\n-        return append( wrap( bytes ), 0, bytes.length );\n-    }\n-\n-    private void addHexValue( byte value )\n-    {\n-        if ( bytesOnThisLine == 1 )\n-        {\n-            // it is the first byte\n-            // out.append( NOTHING )\n-        }\n-        else if ( bytesOnThisLine % bytesPerGroup == 1 )\n-        {\n-            // it is the first byte for a new byte group\n-            out.append( groupSeparator );\n-        }\n-        else\n-        {\n-            out.append( byteSeparator );\n-        }\n-        out.printf( \"%X%X\", 0xF & (value >> 4), 0xF & value );\n-    }\n-\n-    private void checkNewLine()\n-    {\n-        if ( bytesOnThisLine >= bytesPerLine )\n-        {\n-            out.println();\n-            bytesOnThisLine = 0;\n-            currentLineNumber++;\n-        }\n-        if ( bytesOnThisLine == 0 && maxLineNumberDigits > 0 )\n-        {\n-            // a new line and line number enabled\n-            out.append( lineNumberPrefix );\n-            out.printf( \"0x%0\" + maxLineNumberDigits + \"X\", currentLineNumber );\n-            out.append( lineNumberSuffix );\n-        }\n-        bytesOnThisLine++;\n-    }\n-\n-    // Some static methods that could be used directly\n-\n-    /**\n-     * Convert a subsection of a byte buffer to a human readable string of nicely formatted hex numbers.\n-     * Output looks like:\n-     *\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     *\n-     * @param bytes\n-     * @param offset\n-     * @param length\n-     * @return formatted hex numbers in string\n-     */\n-    public static String hex( ByteBuffer bytes, int offset, int length )\n-    {\n-        return hex( bytes, offset, length, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR );\n-    }\n-\n-    public static String hex( ByteBuffer bytes, int offset, int length, int bytesPerBlock, String groupSep )\n-    {\n-        ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n-        PrintStream out = new PrintStream( outStream );\n-\n-        new HexPrinter( out, bytesPerBlock, groupSep ).append( bytes, offset, length );\n-        out.flush();\n-        return outStream.toString();\n-    }\n-\n-    /**\n-     * Convert a full byte buffer to a human readable string of nicely formatted hex numbers using default hex format.\n-     * Output looks like:\n-     *\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     *\n-     * @param bytes\n-     * @return formatted hex numbers in string\n-     */\n-    public static String hex( ByteBuffer bytes )\n-    {\n-        return hex( bytes, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR );\n-    }\n-\n-    public static String hex( ByteBuffer bytes, int bytesPerBlock, String groupSep  )\n-    {\n-        return hex( bytes, bytes.position(), bytes.limit(), bytesPerBlock, groupSep );\n-    }\n-\n-    /**\n-     * Convert a full byte buffer to a human readable string of nicely formatted hex numbers.\n-     * Output looks like:\n-     *\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n-     *\n-     * @param bytes\n-     * @return formatted hex numbers in string\n-     */\n-    public static String hex( byte[] bytes )\n-    {\n-        return hex( bytes, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR );\n-    }\n-\n-    public static String hex( byte[] bytes, int bytesPerBlock, String groupSep )\n-    {\n-        return hex( wrap( bytes ), bytesPerBlock, groupSep );\n-    }\n-\n-    /**\n-     * Convert a single byte to a human-readable hex number. The number will always be two characters wide.\n-     * @param b\n-     * @return formatted hex numbers in string\n-     */\n-    public static String hex( byte b )\n+    if (bytesOnThisLine == 0 && maxLineNumberDigits > 0)\n     {\n-        return String.format( \"%02X\", b );\n+      // a new line and line number enabled\n+      out.append(lineNumberPrefix);\n+      out.printf(\"0x%0\" + maxLineNumberDigits + \"X\", currentLineNumber);\n+      out.append(lineNumberSuffix);\n     }\n+    bytesOnThisLine++;\n+  }\n+\n+  // Some static methods that could be used directly\n+\n+  /**\n+   * Convert a subsection of a byte buffer to a human readable string of nicely formatted hex numbers.\n+   * Output looks like:\n+   * <p>\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   *\n+   * @param bytes\n+   * @param offset\n+   * @param length\n+   * @return formatted hex numbers in string\n+   */\n+  public static String hex(ByteBuffer bytes, int offset, int length)\n+  {\n+    return hex(bytes, offset, length, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR);\n+  }\n+\n+  public static String hex(ByteBuffer bytes, int offset, int length, int bytesPerBlock, String groupSep)\n+  {\n+    ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n+    PrintStream out = new PrintStream(outStream);\n+\n+    new HexPrinter(out, bytesPerBlock, groupSep).append(bytes, offset, length);\n+    out.flush();\n+    return outStream.toString();\n+  }\n+\n+  /**\n+   * Convert a full byte buffer to a human readable string of nicely formatted hex numbers using default hex format.\n+   * Output looks like:\n+   * <p>\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   *\n+   * @param bytes\n+   * @return formatted hex numbers in string\n+   */\n+  public static String hex(ByteBuffer bytes)\n+  {\n+    return hex(bytes, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR);\n+  }\n+\n+  public static String hex(ByteBuffer bytes, int bytesPerBlock, String groupSep)\n+  {\n+    return hex(bytes, bytes.position(), bytes.limit(), bytesPerBlock, groupSep);\n+  }\n+\n+  /**\n+   * Convert a full byte buffer to a human readable string of nicely formatted hex numbers.\n+   * Output looks like:\n+   * <p>\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   * 01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08    01 02 03 04 05 06 07 08\n+   *\n+   * @param bytes\n+   * @return formatted hex numbers in string\n+   */\n+  public static String hex(byte[] bytes)\n+  {\n+    return hex(bytes, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR);\n+  }\n+\n+  public static String hex(byte[] bytes, int bytesPerBlock, String groupSep)\n+  {\n+    return hex(wrap(bytes), bytesPerBlock, groupSep);\n+  }\n+\n+  /**\n+   * Convert a single byte to a human-readable hex number. The number will always be two characters wide.\n+   *\n+   * @param b\n+   * @return formatted hex numbers in string\n+   */\n+  public static String hex(byte b)\n+  {\n+    return String.format(\"%02X\", b);\n+  }\n }\n",
            "diff_size": 534
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "275",
                    "column": "53",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1706/HexPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1706/HexPrinter.java\nindex 35a0183a5f1..159d73754fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1706/HexPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1706/HexPrinter.java\n@@ -264,7 +264,7 @@ public class HexPrinter\n         {\n             out.append( byteSeparator );\n         }\n-        out.printf( \"%X%X\", 0xF & (value >> 4), 0xF & value );\n+        out.printf( \"%X%X\", 0xF & ( value >> 4), 0xF & value );\n     }\n \n     private void checkNewLine()\n@@ -272,10 +272,10 @@ public class HexPrinter\n         if ( bytesOnThisLine >= bytesPerLine )\n         {\n             out.println();\n-            bytesOnThisLine = 0;\n-            currentLineNumber++;\n+            bytesOnThisLine = 0; currentLineNumber++;\n         }\n-        if ( bytesOnThisLine == 0 && maxLineNumberDigits > 0 )\n+\n+if ( bytesOnThisLine == 0 && maxLineNumberDigits > 0 )\n         {\n             // a new line and line number enabled\n             out.append( lineNumberPrefix );\n@@ -329,7 +329,7 @@ public class HexPrinter\n         return hex( bytes, DEFAULT_BYTES_PER_GROUP, DEFAULT_GROUP_SEPARATOR );\n     }\n \n-    public static String hex( ByteBuffer bytes, int bytesPerBlock, String groupSep  )\n+    public static String hex( ByteBuffer bytes, int bytesPerBlock, String groupSep )\n     {\n         return hex( bytes, bytes.position(), bytes.limit(), bytesPerBlock, groupSep );\n     }\n@@ -363,4 +363,4 @@ public class HexPrinter\n     {\n         return String.format( \"%02X\", b );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}