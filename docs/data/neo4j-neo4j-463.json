{
    "project_name": "neo4j-neo4j",
    "error_id": "463",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "124",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "142",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "25",
                    "severity": "error",
                    "message": "'}' at column 25 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/463/SafePropertyChainReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/463/SafePropertyChainReader.java\nindex 5130e03e134..8d264c1f392 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/463/SafePropertyChainReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/463/SafePropertyChainReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checker;\n \n import org.eclipse.collections.api.map.primitive.MutableIntObjectMap;\n@@ -66,7 +67,7 @@ class SafePropertyChainReader implements AutoCloseable\n     private final CheckerContext context;\n     private final NeoStores neoStores;\n \n-    SafePropertyChainReader( CheckerContext context, PageCursorTracer cursorTracer )\n+    SafePropertyChainReader(CheckerContext context, PageCursorTracer cursorTracer)\n     {\n         this.context = context;\n         this.neoStores = context.neoStores;\n@@ -74,117 +75,113 @@ class SafePropertyChainReader implements AutoCloseable\n         this.stringStoreBlockSize = neoStores.getPropertyStore().getStringStore().getRecordDataSize();\n         this.arrayStoreBlockSize = neoStores.getPropertyStore().getArrayStore().getRecordDataSize();\n         this.propertyStore = neoStores.getPropertyStore();\n-        this.propertyReader = new RecordReader<>( neoStores.getPropertyStore(), cursorTracer );\n-        this.stringReader = new RecordReader<>( neoStores.getPropertyStore().getStringStore(), cursorTracer );\n-        this.arrayReader = new RecordReader<>( neoStores.getPropertyStore().getArrayStore(), cursorTracer );\n+        this.propertyReader = new RecordReader<>(neoStores.getPropertyStore(), cursorTracer);\n+        this.stringReader = new RecordReader<>(neoStores.getPropertyStore().getStringStore(), cursorTracer);\n+        this.arrayReader = new RecordReader<>(neoStores.getPropertyStore().getArrayStore(), cursorTracer);\n         this.seenRecords = new LongHashSet();\n         this.seenDynamicRecordIds = new LongHashSet();\n         this.dynamicRecords = new ArrayList<>();\n     }\n \n-    <PRIMITIVE extends PrimitiveRecord> boolean read( MutableIntObjectMap<Value> intoValues, PRIMITIVE entity,\n-            Function<PRIMITIVE,ConsistencyReport.PrimitiveConsistencyReport> primitiveReporter, PageCursorTracer cursorTracer )\n+    <PRIMITIVE extends PrimitiveRecord> boolean read(MutableIntObjectMap<Value> intoValues, PRIMITIVE entity,\n+                                                     Function<PRIMITIVE, ConsistencyReport.PrimitiveConsistencyReport> primitiveReporter,\n+                                                     PageCursorTracer cursorTracer)\n     {\n-        lightClear( seenRecords );\n+        lightClear(seenRecords);\n         long propertyRecordId = entity.getNextProp();\n         long previousRecordId = NULL_REFERENCE.longValue();\n         boolean chainIsOk = true;\n-        while ( !NULL_REFERENCE.is( propertyRecordId ) && !context.isCancelled() )\n+        while (!NULL_REFERENCE.is(propertyRecordId) && !context.isCancelled())\n         {\n-            if ( !seenRecords.add( propertyRecordId ) )\n+            if (!seenRecords.add(propertyRecordId))\n             {\n-                primitiveReporter.apply( entity ).propertyChainContainsCircularReference( propertyReader.record() );\n+                primitiveReporter.apply(entity).propertyChainContainsCircularReference(propertyReader.record());\n                 chainIsOk = false;\n                 break;\n             }\n \n-            PropertyRecord propertyRecord = propertyReader.read( propertyRecordId );\n-            if ( !propertyRecord.inUse() )\n+            PropertyRecord propertyRecord = propertyReader.read(propertyRecordId);\n+            if (!propertyRecord.inUse())\n             {\n-                primitiveReporter.apply( entity ).propertyNotInUse( propertyRecord );\n-                reporter.forProperty( context.recordLoader.property( previousRecordId, cursorTracer ) ).nextNotInUse( propertyRecord );\n+                primitiveReporter.apply(entity).propertyNotInUse(propertyRecord);\n+                reporter.forProperty(context.recordLoader.property(previousRecordId, cursorTracer)).nextNotInUse(propertyRecord);\n                 chainIsOk = false;\n-            }\n-            else\n+            } else\n             {\n-                if ( propertyRecord.getPrevProp() != previousRecordId )\n+                if (propertyRecord.getPrevProp() != previousRecordId)\n                 {\n-                    if ( NULL_REFERENCE.is( previousRecordId ) )\n+                    if (NULL_REFERENCE.is(previousRecordId))\n                     {\n-                        primitiveReporter.apply( entity ).propertyNotFirstInChain( propertyRecord );\n-                    }\n-                    else\n+                        primitiveReporter.apply(entity).propertyNotFirstInChain(propertyRecord);\n+                    } else\n                     {\n-                        reporter.forProperty( context.recordLoader.property( previousRecordId, cursorTracer ) ).nextDoesNotReferenceBack( propertyRecord );\n+                        reporter.forProperty(context.recordLoader.property(previousRecordId, cursorTracer)).nextDoesNotReferenceBack(propertyRecord);\n                         // prevDoesNotReferenceBack is not reported, unnecessary double report (same inconsistency from different directions)\n                     }\n                     chainIsOk = false;\n                 }\n \n-                for ( PropertyBlock block : propertyRecord )\n+                for (PropertyBlock block : propertyRecord)\n                 {\n                     int propertyKeyId = block.getKeyIndexId();\n-                    if ( !checkValidToken( propertyRecord, propertyKeyId, context.tokenHolders.propertyKeyTokens(), neoStores.getPropertyKeyTokenStore(),\n-                            ( property, token ) -> reporter.forProperty( property ).invalidPropertyKey( block ),\n-                            ( property, token ) -> reporter.forProperty( property ).keyNotInUse( block, token ), cursorTracer ) )\n+                    if (!checkValidToken(propertyRecord, propertyKeyId, context.tokenHolders.propertyKeyTokens(), neoStores.getPropertyKeyTokenStore(),\n+                      (property, token) -> reporter.forProperty(property).invalidPropertyKey(block),\n+                      (property, token) -> reporter.forProperty(property).keyNotInUse(block, token), cursorTracer))\n                     {\n                         chainIsOk = false;\n                     }\n                     PropertyType type = block.forceGetType();\n                     Value value = Values.NO_VALUE;\n-                    if ( type == null )\n+                    if (type == null)\n                     {\n-                        reporter.forProperty( propertyRecord ).invalidPropertyType( block );\n-                    }\n-                    else\n+                        reporter.forProperty(propertyRecord).invalidPropertyType(block);\n+                    } else\n                     {\n                         try\n                         {\n-                            switch ( type )\n+                            switch (type)\n                             {\n-                            case STRING:\n-                                dynamicRecords.clear();\n-                                if ( safeLoadDynamicRecordChain( record -> dynamicRecords.add( record.copy() ), stringReader, seenDynamicRecordIds,\n-                                        block.getSingleValueLong(), stringStoreBlockSize, NO_DYNAMIC_HANDLER,\n-                                        ( id, record ) -> reporter.forProperty( propertyRecord ).stringNotInUse( block, record ),\n-                                        ( id, record ) -> reporter.forDynamicBlock( RecordType.STRING_PROPERTY, stringReader.record() ).nextNotInUse( record ),\n-                                        ( id, record ) -> reporter.forProperty( propertyRecord ).stringEmpty( block, record ),\n-                                        record -> reporter.forDynamicBlock( RecordType.STRING_PROPERTY, record ).recordNotFullReferencesNext(),\n-                                        record -> reporter.forDynamicBlock( RecordType.STRING_PROPERTY, record ).invalidLength() ) )\n-                                {\n-                                    value = propertyStore.getTextValueFor( dynamicRecords, cursorTracer );\n-                                }\n-                                break;\n-                            case ARRAY:\n-                                dynamicRecords.clear();\n-                                if ( safeLoadDynamicRecordChain( record -> dynamicRecords.add( record.copy() ), arrayReader, seenDynamicRecordIds,\n-                                        block.getSingleValueLong(), arrayStoreBlockSize, NO_DYNAMIC_HANDLER,\n-                                        ( id, record ) -> reporter.forProperty( propertyRecord ).arrayNotInUse( block, record ),\n-                                        ( id, record ) -> reporter.forDynamicBlock( RecordType.ARRAY_PROPERTY, arrayReader.record() ).nextNotInUse( record ),\n-                                        ( id, record ) -> reporter.forProperty( propertyRecord ).arrayEmpty( block, record ),\n-                                        record -> reporter.forDynamicBlock( RecordType.ARRAY_PROPERTY, record ).recordNotFullReferencesNext(),\n-                                        record -> reporter.forDynamicBlock( RecordType.ARRAY_PROPERTY, record ).invalidLength() ) )\n-                                {\n-                                    value = propertyStore.getArrayFor( dynamicRecords, cursorTracer );\n-                                }\n-                                break;\n-                            default:\n-                                value = type.value( block, null, cursorTracer );\n-                                break;\n+                                case STRING:\n+                                    dynamicRecords.clear();\n+                                    if (safeLoadDynamicRecordChain(record -> dynamicRecords.add(record.copy()), stringReader, seenDynamicRecordIds,\n+                                      block.getSingleValueLong(), stringStoreBlockSize, NO_DYNAMIC_HANDLER,\n+                                      (id, record) -> reporter.forProperty(propertyRecord).stringNotInUse(block, record),\n+                                      (id, record) -> reporter.forDynamicBlock(RecordType.STRING_PROPERTY, stringReader.record()).nextNotInUse(record),\n+                                      (id, record) -> reporter.forProperty(propertyRecord).stringEmpty(block, record),\n+                                      record -> reporter.forDynamicBlock(RecordType.STRING_PROPERTY, record).recordNotFullReferencesNext(),\n+                                      record -> reporter.forDynamicBlock(RecordType.STRING_PROPERTY, record).invalidLength()))\n+                                    {\n+                                        value = propertyStore.getTextValueFor(dynamicRecords, cursorTracer);\n+                                    }\n+                                    break;\n+                                case ARRAY:\n+                                    dynamicRecords.clear();\n+                                    if (safeLoadDynamicRecordChain(record -> dynamicRecords.add(record.copy()), arrayReader, seenDynamicRecordIds,\n+                                      block.getSingleValueLong(), arrayStoreBlockSize, NO_DYNAMIC_HANDLER,\n+                                      (id, record) -> reporter.forProperty(propertyRecord).arrayNotInUse(block, record),\n+                                      (id, record) -> reporter.forDynamicBlock(RecordType.ARRAY_PROPERTY, arrayReader.record()).nextNotInUse(record),\n+                                      (id, record) -> reporter.forProperty(propertyRecord).arrayEmpty(block, record),\n+                                      record -> reporter.forDynamicBlock(RecordType.ARRAY_PROPERTY, record).recordNotFullReferencesNext(),\n+                                      record -> reporter.forDynamicBlock(RecordType.ARRAY_PROPERTY, record).invalidLength()))\n+                                    {\n+                                        value = propertyStore.getArrayFor(dynamicRecords, cursorTracer);\n+                                    }\n+                                    break;\n+                                default:\n+                                    value = type.value(block, null, cursorTracer);\n+                                    break;\n                             }\n-                        }\n-                        catch ( Exception e )\n+                        } catch (Exception e)\n                         {\n-                            reporter.forProperty( propertyRecord ).invalidPropertyValue( propertyRecord.getId(), block.getKeyIndexId() );\n+                            reporter.forProperty(propertyRecord).invalidPropertyValue(propertyRecord.getId(), block.getKeyIndexId());\n                         }\n                     }\n-                    if ( value == Values.NO_VALUE )\n+                    if (value == Values.NO_VALUE)\n                     {\n                         chainIsOk = false;\n-                    }\n-                    else if ( propertyKeyId >= 0 && intoValues.put( propertyKeyId, value ) != null )\n+                    } else if (propertyKeyId >= 0 && intoValues.put(propertyKeyId, value) != null)\n                     {\n-                        primitiveReporter.apply( entity ).propertyKeyNotUniqueInChain();\n+                        primitiveReporter.apply(entity).propertyKeyNotUniqueInChain();\n                         chainIsOk = false;\n                     }\n                 }\n@@ -198,6 +195,6 @@ class SafePropertyChainReader implements AutoCloseable\n     @Override\n     public void close()\n     {\n-        closeAllUnchecked( propertyReader, stringReader, arrayReader );\n+        closeAllUnchecked(propertyReader, stringReader, arrayReader);\n     }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}