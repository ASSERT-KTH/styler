{
    "project_name": "codefollower-H2-Research",
    "error_id": "335",
    "information": {
        "errors": [
            {
                "line": "47",
                "column": "49",
                "severity": "warning",
                "message": "'{' at column 49 should have line break after.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public void setOrReplace(boolean orReplace) { this.orReplace = orReplace; }\n\n    @Override\n    public int update() {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/335/CreateSynonym.java\nindex 9dcba6df936..79727c742f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/335/CreateSynonym.java\n@@ -44,7 +44,8 @@ public class CreateSynonym extends SchemaCommand {\n         this.ifNotExists = ifNotExists;\n     }\n \n-    public void setOrReplace(boolean orReplace) { this.orReplace = orReplace; }\n+    public void setOrReplace(boolean orReplace) {\n+        this.orReplace = orReplace; }\n \n     @Override\n     public int update() {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/335/CreateSynonym.java\nindex 9dcba6df936..0aa193c20c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/335/CreateSynonym.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import org.h2.api.ErrorCode;\n@@ -19,96 +20,98 @@ import org.h2.table.TableSynonym;\n  */\n public class CreateSynonym extends SchemaCommand {\n \n-    private final CreateSynonymData data = new CreateSynonymData();\n-    private boolean ifNotExists;\n-    private boolean orReplace;\n-    private String comment;\n+  private final CreateSynonymData data = new CreateSynonymData();\n+  private boolean ifNotExists;\n+  private boolean orReplace;\n+  private String comment;\n \n-    public CreateSynonym(Session session, Schema schema) {\n-        super(session, schema);\n-    }\n+  public CreateSynonym(Session session, Schema schema) {\n+    super(session, schema);\n+  }\n \n-    public void setName(String name) {\n-        data.synonymName = name;\n-    }\n+  public void setName(String name) {\n+    data.synonymName = name;\n+  }\n \n-    public void setSynonymFor(String tableName) {\n-        data.synonymFor = tableName;\n-    }\n+  public void setSynonymFor(String tableName) {\n+    data.synonymFor = tableName;\n+  }\n \n-    public void setSynonymForSchema(Schema synonymForSchema) {\n-        data.synonymForSchema = synonymForSchema;\n-    }\n+  public void setSynonymForSchema(Schema synonymForSchema) {\n+    data.synonymForSchema = synonymForSchema;\n+  }\n \n-    public void setIfNotExists(boolean ifNotExists) {\n-        this.ifNotExists = ifNotExists;\n-    }\n+  public void setIfNotExists(boolean ifNotExists) {\n+    this.ifNotExists = ifNotExists;\n+  }\n+\n+  public void setOrReplace(boolean orReplace) {\n+    this.orReplace = orReplace;\n+  }\n \n-    public void setOrReplace(boolean orReplace) { this.orReplace = orReplace; }\n+  @Override\n+  public int update() {\n+    if (!transactional) {\n+      session.commit(true);\n+    }\n+    session.getUser().checkAdmin();\n+    Database db = session.getDatabase();\n+    data.session = session;\n+    db.lockMeta(session);\n \n-    @Override\n-    public int update() {\n-        if (!transactional) {\n-            session.commit(true);\n-        }\n-        session.getUser().checkAdmin();\n-        Database db = session.getDatabase();\n-        data.session = session;\n-        db.lockMeta(session);\n+    if (getSchema().findTableOrView(session, data.synonymName) != null) {\n+      throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1, data.synonymName);\n+    }\n \n-        if (getSchema().findTableOrView(session, data.synonymName) != null) {\n-            throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1, data.synonymName);\n-        }\n+    if (data.synonymForSchema.findTableOrView(session, data.synonymFor) != null) {\n+      return createTableSynonym(db);\n+    }\n \n-        if (data.synonymForSchema.findTableOrView(session, data.synonymFor) != null) {\n-            return createTableSynonym(db);\n-        }\n+    throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,\n+        data.synonymForSchema.getName() + \".\" + data.synonymFor);\n \n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,\n-                data.synonymForSchema.getName() + \".\" + data.synonymFor);\n+  }\n \n-    }\n+  private int createTableSynonym(Database db) {\n \n-    private int createTableSynonym(Database db) {\n-\n-        TableSynonym old = getSchema().getSynonym(data.synonymName);\n-        if (old != null) {\n-            if (orReplace) {\n-                // ok, we replacing the existing synonym\n-            } else if (ifNotExists) {\n-                return 0;\n-            } else {\n-                throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1, data.synonymName);\n-            }\n-        }\n-\n-        TableSynonym table;\n-        if (old != null) {\n-            table = old;\n-            data.schema = table.getSchema();\n-            table.updateData(data);\n-            table.setComment(comment);\n-            table.setModified();\n-            db.updateMeta(session, table);\n-        } else {\n-            data.id = getObjectId();\n-            table = getSchema().createSynonym(data);\n-            table.setComment(comment);\n-            db.addSchemaObject(session, table);\n-        }\n-\n-        table.updateSynonymFor();\n+    TableSynonym old = getSchema().getSynonym(data.synonymName);\n+    if (old != null) {\n+      if (orReplace) {\n+        // ok, we replacing the existing synonym\n+      } else if (ifNotExists) {\n         return 0;\n+      } else {\n+        throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1, data.synonymName);\n+      }\n     }\n \n-    public void setComment(String comment) {\n-        this.comment = comment;\n+    TableSynonym table;\n+    if (old != null) {\n+      table = old;\n+      data.schema = table.getSchema();\n+      table.updateData(data);\n+      table.setComment(comment);\n+      table.setModified();\n+      db.updateMeta(session, table);\n+    } else {\n+      data.id = getObjectId();\n+      table = getSchema().createSynonym(data);\n+      table.setComment(comment);\n+      db.addSchemaObject(session, table);\n     }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.CREATE_SYNONYM;\n-    }\n+    table.updateSynonymFor();\n+    return 0;\n+  }\n+\n+  public void setComment(String comment) {\n+    this.comment = comment;\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return CommandInterface.CREATE_SYNONYM;\n+  }\n \n \n }\n",
            "diff_size": 108
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/335/CreateSynonym.java\nindex 9dcba6df936..0bd312b3185 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/335/CreateSynonym.java\n@@ -44,7 +44,9 @@ public class CreateSynonym extends SchemaCommand {\n         this.ifNotExists = ifNotExists;\n     }\n \n-    public void setOrReplace(boolean orReplace) { this.orReplace = orReplace; }\n+    public void setOrReplace(boolean orReplace) {\n+    this.orReplace = orReplace;\n+    }\n \n     @Override\n     public int update() {\n@@ -63,15 +65,12 @@ public class CreateSynonym extends SchemaCommand {\n         if (data.synonymForSchema.findTableOrView(session, data.synonymFor) != null) {\n             return createTableSynonym(db);\n         }\n-\n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,\n+throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,\n                 data.synonymForSchema.getName() + \".\" + data.synonymFor);\n-\n     }\n \n     private int createTableSynonym(Database db) {\n-\n-        TableSynonym old = getSchema().getSynonym(data.synonymName);\n+    TableSynonym old = getSchema().getSynonym(data.synonymName);\n         if (old != null) {\n             if (orReplace) {\n                 // ok, we replacing the existing synonym\n@@ -111,4 +110,4 @@ public class CreateSynonym extends SchemaCommand {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/335/CreateSynonym.java\nindex 9dcba6df936..16996776ed0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/335/CreateSynonym.java\n@@ -17,6 +17,8 @@ import org.h2.table.TableSynonym;\n  * This class represents the statement\n  * CREATE SYNONYM\n  */\n+\n+\n public class CreateSynonym extends SchemaCommand {\n \n     private final CreateSynonymData data = new CreateSynonymData();\n@@ -28,23 +30,30 @@ public class CreateSynonym extends SchemaCommand {\n         super(session, schema);\n     }\n \n+\n     public void setName(String name) {\n         data.synonymName = name;\n     }\n \n+\n     public void setSynonymFor(String tableName) {\n         data.synonymFor = tableName;\n     }\n \n+\n     public void setSynonymForSchema(Schema synonymForSchema) {\n         data.synonymForSchema = synonymForSchema;\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n \n-    public void setOrReplace(boolean orReplace) { this.orReplace = orReplace; }\n+\n+    public void setOrReplace(boolean orReplace) {\n+        this.orReplace = orReplace;\n+    }\n \n     @Override\n     public int update() {\n@@ -55,33 +64,27 @@ public class CreateSynonym extends SchemaCommand {\n         Database db = session.getDatabase();\n         data.session = session;\n         db.lockMeta(session);\n-\n         if (getSchema().findTableOrView(session, data.synonymName) != null) {\n             throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1, data.synonymName);\n         }\n-\n         if (data.synonymForSchema.findTableOrView(session, data.synonymFor) != null) {\n             return createTableSynonym(db);\n         }\n-\n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,\n-                data.synonymForSchema.getName() + \".\" + data.synonymFor);\n-\n+        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, data.synonymForSchema.getName() + \".\" + data.synonymFor);\n     }\n \n     private int createTableSynonym(Database db) {\n-\n         TableSynonym old = getSchema().getSynonym(data.synonymName);\n         if (old != null) {\n             if (orReplace) {\n                 // ok, we replacing the existing synonym\n+\n             } else if (ifNotExists) {\n                 return 0;\n-            } else {\n+                         } else {\n                 throw DbException.get(ErrorCode.TABLE_OR_VIEW_ALREADY_EXISTS_1, data.synonymName);\n             }\n         }\n-\n         TableSynonym table;\n         if (old != null) {\n             table = old;\n@@ -96,11 +99,11 @@ public class CreateSynonym extends SchemaCommand {\n             table.setComment(comment);\n             db.addSchemaObject(session, table);\n         }\n-\n         table.updateSynonymFor();\n         return 0;\n     }\n \n+\n     public void setComment(String comment) {\n         this.comment = comment;\n     }\n@@ -110,5 +113,4 @@ public class CreateSynonym extends SchemaCommand {\n         return CommandInterface.CREATE_SYNONYM;\n     }\n \n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/335/CreateSynonym.java\nindex 9dcba6df936..79727c742f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/335/CreateSynonym.java\n@@ -44,7 +44,8 @@ public class CreateSynonym extends SchemaCommand {\n         this.ifNotExists = ifNotExists;\n     }\n \n-    public void setOrReplace(boolean orReplace) { this.orReplace = orReplace; }\n+    public void setOrReplace(boolean orReplace) {\n+        this.orReplace = orReplace; }\n \n     @Override\n     public int update() {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/335/CreateSynonym.java\nindex 9dcba6df936..79727c742f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/335/CreateSynonym.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/335/CreateSynonym.java\n@@ -44,7 +44,8 @@ public class CreateSynonym extends SchemaCommand {\n         this.ifNotExists = ifNotExists;\n     }\n \n-    public void setOrReplace(boolean orReplace) { this.orReplace = orReplace; }\n+    public void setOrReplace(boolean orReplace) {\n+        this.orReplace = orReplace; }\n \n     @Override\n     public int update() {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}