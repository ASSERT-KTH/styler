{
    "project_name": "open-eid-digidoc4j",
    "error_id": "94",
    "information": {
        "errors": [
            {
                "line": "46",
                "column": "43",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType) {\n    logger.debug(\"File name: \" + fileName +\n        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n    try {\n      DigestDocument document = new DigestDocument();",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "46",
                    "column": "43",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "46",
                    "column": "43",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/94/DigestDataFile.java\nindex 047092f0121..c0e463504d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/94/DigestDataFile.java\n@@ -49,8 +49,9 @@ public class DigestDataFile extends DataFile {\n       DigestDocument document = new DigestDocument();\n       document.setName(fileName);\n       document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n-      if (mimeType != null)\n+      if (mimeType != null) {\n         document.setMimeType(getMimeType(mimeType));\n+      }\n       setDocument(document);\n     } catch (Exception e) {\n       logger.error(e.getMessage());\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/94/DigestDataFile.java\nindex 047092f0121..fa0f263577d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/94/DigestDataFile.java\n@@ -43,15 +43,14 @@ public class DigestDataFile extends DataFile {\n   }\n \n   private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n-    try {\n+    logger.debug(\"File name: \" + fileName + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+try {\n       DigestDocument document = new DigestDocument();\n       document.setName(fileName);\n       document.addDigest(digestAlgorithm.getDssDigestAlgorithm(), Base64.encodeBase64String(digest));\n       if (mimeType != null)\n         document.setMimeType(getMimeType(mimeType));\n-      setDocument(document);\n+setDocument(document);\n     } catch (Exception e) {\n       logger.error(e.getMessage());\n       throw new InvalidDataFileException(e);\n@@ -65,4 +64,4 @@ public class DigestDataFile extends DataFile {\n   public void setContentType(String contentType) {\n     this.contentType = contentType;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/94/DigestDataFile.java\nindex 047092f0121..e7a931e33e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/94/DigestDataFile.java\n@@ -1,18 +1,16 @@\n package org.digidoc4j;\n \n import java.util.Arrays;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.digidoc4j.exceptions.InvalidDataFileException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.DigestDocument;\n \n+\n public class DigestDataFile extends DataFile {\n \n   private static final Logger logger = LoggerFactory.getLogger(DigestDataFile.class);\n-\n   private String contentType = null;\n \n   /**\n@@ -24,6 +22,7 @@ public class DigestDataFile extends DataFile {\n    * @param digest          digest of the file contents\n    * @param mimeType        mime-type of the data file, for example 'text/plain' or 'application/msword'\n    */\n+\n   public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType) {\n     setDigestDataFile(fileName, digestAlgorithm, digest, mimeType);\n   }\n@@ -37,14 +36,15 @@ public class DigestDataFile extends DataFile {\n    * @param digest          digest of the file contents\n    * @deprecated use DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType)\n    */\n+\n+\n   @Deprecated\n   public DigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest) {\n     setDigestDataFile(fileName, digestAlgorithm, digest, null);\n   }\n \n   private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n-        \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n+    logger.debug(\"File name: \" + fileName + \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n     try {\n       DigestDocument document = new DigestDocument();\n       document.setName(fileName);\n@@ -65,4 +65,4 @@ public class DigestDataFile extends DataFile {\n   public void setContentType(String contentType) {\n     this.contentType = contentType;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "column": "42",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "46",
                    "column": "42",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/94/DigestDataFile.java\nindex 047092f0121..68938756775 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/94/DigestDataFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/94/DigestDataFile.java\n@@ -43,7 +43,7 @@ public class DigestDataFile extends DataFile {\n   }\n \n   private void setDigestDataFile(String fileName, DigestAlgorithm digestAlgorithm, byte[] digest, String mimeType) {\n-    logger.debug(\"File name: \" + fileName +\n+    logger.debug(\"File name: \" + fileName+\n         \", digest algorithm: \" + digestAlgorithm + \", digest: \" + Arrays.toString(digest));\n     try {\n       DigestDocument document = new DigestDocument();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "46",
                    "column": "43",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}