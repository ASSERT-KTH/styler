{
    "project_name": "neo4j-neo4j",
    "error_id": "144",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/144/CheckPointer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/144/CheckPointer.java\nindex 4591053f73d..0e0ad36bb1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/144/CheckPointer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/144/CheckPointer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.io.IOException;\n@@ -32,15 +33,15 @@ public interface CheckPointer\n     /**\n      * This method will verify that the conditions for triggering a check point hold and in such a case it will write\n      * a check point in the transaction log.\n-     *\n+     * <p>\n      * This method does NOT handle concurrency since there should be only one check point thread running.\n      *\n      * @param triggerInfo the info describing why check pointing has been triggered\n-     * pending approval of the threshold check\n+     *                    pending approval of the threshold check\n      * @return the transaction id used for the check pointing or -1 if check pointing wasn't needed\n      * @throws IOException if writing the check point fails\n      */\n-    long checkPointIfNeeded( TriggerInfo triggerInfo ) throws IOException;\n+    long checkPointIfNeeded(TriggerInfo triggerInfo) throws IOException;\n \n     /**\n      * This method tries the write of a check point in the transaction log. If there is no running check pointing it\n@@ -50,21 +51,21 @@ public interface CheckPointer\n      * @return the transaction id used for the check pointing.\n      * @throws IOException if writing the check point fails\n      */\n-    long tryCheckPoint( TriggerInfo triggerInfo ) throws IOException;\n+    long tryCheckPoint(TriggerInfo triggerInfo) throws IOException;\n \n     /**\n      * This method tries the write of a check point in the transaction log. If there is no running check pointing it\n      * will check point otherwise it will wait for the running check pointing to complete.\n-     *\n+     * <p>\n      * It is mostly used for testing purpose and to force a check point when shutting down the database.\n      *\n      * @param triggerInfo the info describing why check pointing has been triggered\n-     * @param timeout a boolean supplier that, if it returns {@code true}, will signal that we should stop waiting for any on-going checkpoint to complete.\n+     * @param timeout     a boolean supplier that, if it returns {@code true}, will signal that we should stop waiting for any on-going checkpoint to complete.\n      * @return the transaction id used for the check pointing, or -1 if we ended up waiting for an on-going checkpoint and the timeout returned {@code false}\n      * telling us to give up waiting.\n      * @throws IOException if writing the check point fails\n      */\n-    long tryCheckPoint( TriggerInfo triggerInfo, BooleanSupplier timeout ) throws IOException;\n+    long tryCheckPoint(TriggerInfo triggerInfo, BooleanSupplier timeout) throws IOException;\n \n     /**\n      * This method tries the write of a check point in the transaction log. If there is no running check pointing it\n@@ -74,18 +75,18 @@ public interface CheckPointer\n      * @return the transaction id used for the check pointing or {@code -1} when the invocation did not trigger a check point.\n      * @throws IOException if writing the check point fails\n      */\n-    long tryCheckPointNoWait( TriggerInfo triggerInfo ) throws IOException;\n+    long tryCheckPointNoWait(TriggerInfo triggerInfo) throws IOException;\n \n     /**\n      * This method forces the write of a check point in the transaction log.\n-     *\n+     * <p>\n      * It is mostly used for testing purpose and to force a check point when shutting down the database.\n      *\n      * @param triggerInfo the info describing why check pointing has been triggered\n      * @return the transaction id used for the check pointing\n      * @throws IOException if writing the check point fails\n      */\n-    long forceCheckPoint( TriggerInfo triggerInfo ) throws IOException;\n+    long forceCheckPoint(TriggerInfo triggerInfo) throws IOException;\n \n     /**\n      * @return the transaction id which the last checkpoint was made it. If there's no checkpoint then\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}