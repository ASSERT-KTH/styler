{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "520",
    "information": {
        "errors": [
            {
                "line": "128",
                "column": "46",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n    HeaderFooter headerFooter = (HeaderFooter)o;\n    return\n        Objects.equals(this.childNodes, headerFooter.childNodes) &&\n        Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/520/HeaderFooter.java\nindex b73a1973b05..b57670a3f42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/520/HeaderFooter.java\n@@ -125,7 +125,7 @@ public class HeaderFooter extends HeaderFooterLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    HeaderFooter headerFooter = (HeaderFooter)o;\n+    HeaderFooter headerFooter = (HeaderFooter) o;\n     return\n         Objects.equals(this.childNodes, headerFooter.childNodes) &&\n         Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/520/HeaderFooter.java\nindex b73a1973b05..7cea3345012 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/520/HeaderFooter.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -32,13 +32,16 @@ import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.List;\n import java.io.IOException;\n+\n import org.threeten.bp.OffsetDateTime;\n+\n import com.aspose.words.cloud.model.*;\n import com.google.gson.TypeAdapter;\n import com.google.gson.annotations.JsonAdapter;\n import com.google.gson.annotations.SerializedName;\n import com.google.gson.stream.JsonReader;\n import com.google.gson.stream.JsonWriter;\n+\n import io.swagger.annotations.ApiModel;\n import io.swagger.annotations.ApiModelProperty;\n \n@@ -55,6 +58,7 @@ public class HeaderFooter extends HeaderFooterLink {\n \n     @SerializedName(\"Paragraphs\")\n     private LinkElement paragraphs = null;\n+\n     public HeaderFooter childNodes(List<NodeLink> childNodes) {\n         this.childNodes = childNodes;\n         return this;\n@@ -70,8 +74,9 @@ public class HeaderFooter extends HeaderFooterLink {\n \n     /**\n      * Gets or sets child nodes.\n-    * @return childNodes\n-    **/\n+     *\n+     * @return childNodes\n+     **/\n     @ApiModelProperty(value = \"Gets or sets child nodes.\")\n     public List<NodeLink> getChildNodes() {\n         return childNodes;\n@@ -88,8 +93,9 @@ public class HeaderFooter extends HeaderFooterLink {\n \n     /**\n      * Gets or sets link to DrawingObjects resource.\n-    * @return drawingObjects\n-    **/\n+     *\n+     * @return drawingObjects\n+     **/\n     @ApiModelProperty(value = \"Gets or sets link to DrawingObjects resource.\")\n     public LinkElement getDrawingObjects() {\n         return drawingObjects;\n@@ -106,8 +112,9 @@ public class HeaderFooter extends HeaderFooterLink {\n \n     /**\n      * Gets or sets link to Paragraphs resource.\n-    * @return paragraphs\n-    **/\n+     *\n+     * @return paragraphs\n+     **/\n     @ApiModelProperty(value = \"Gets or sets link to Paragraphs resource.\")\n     public LinkElement getParagraphs() {\n         return paragraphs;\n@@ -125,39 +132,39 @@ public class HeaderFooter extends HeaderFooterLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    HeaderFooter headerFooter = (HeaderFooter)o;\n-    return\n-        Objects.equals(this.childNodes, headerFooter.childNodes) &&\n-        Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n-        Objects.equals(this.paragraphs, headerFooter.paragraphs) &&\n-        super.equals(o);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    return Objects.hash(childNodes, drawingObjects, paragraphs, super.hashCode());\n-  }\n-\n-  @Override\n-  public String toString() {\n-    StringBuilder sb = new StringBuilder();\n-    sb.append(\"class HeaderFooter {\\n\");\n-    sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n-    sb.append(\"    childNodes: \").append(toIndentedString(childNodes)).append(\"\\n\");\n-    sb.append(\"    drawingObjects: \").append(toIndentedString(drawingObjects)).append(\"\\n\");\n-    sb.append(\"    paragraphs: \").append(toIndentedString(paragraphs)).append(\"\\n\");\n-    sb.append(\"}\");\n-    return sb.toString();\n-  }\n-\n-  /**\n-   * Convert the given object to string with each line indented by 4 spaces\n-   * (except the first line).\n-   */\n-  private String toIndentedString(java.lang.Object o) {\n-    if (o == null) {\n-      return \"null\";\n+        HeaderFooter headerFooter = (HeaderFooter) o;\n+        return\n+            Objects.equals(this.childNodes, headerFooter.childNodes) &&\n+                Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n+                Objects.equals(this.paragraphs, headerFooter.paragraphs) &&\n+                super.equals(o);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(childNodes, drawingObjects, paragraphs, super.hashCode());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"class HeaderFooter {\\n\");\n+        sb.append(\"    \").append(toIndentedString(super.toString())).append(\"\\n\");\n+        sb.append(\"    childNodes: \").append(toIndentedString(childNodes)).append(\"\\n\");\n+        sb.append(\"    drawingObjects: \").append(toIndentedString(drawingObjects)).append(\"\\n\");\n+        sb.append(\"    paragraphs: \").append(toIndentedString(paragraphs)).append(\"\\n\");\n+        sb.append(\"}\");\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Convert the given object to string with each line indented by 4 spaces\n+     * (except the first line).\n+     */\n+    private String toIndentedString(java.lang.Object o) {\n+        if (o == null) {\n+            return \"null\";\n+        }\n+        return o.toString().replace(\"\\n\", \"\\n    \");\n     }\n-    return o.toString().replace(\"\\n\", \"\\n    \");\n-  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "130",
                    "column": "42",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/520/HeaderFooter.java\nindex b73a1973b05..09471146635 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/520/HeaderFooter.java\n@@ -55,10 +55,11 @@ public class HeaderFooter extends HeaderFooterLink {\n \n     @SerializedName(\"Paragraphs\")\n     private LinkElement paragraphs = null;\n-    public HeaderFooter childNodes(List<NodeLink> childNodes) {\n+\n+public HeaderFooter childNodes(List<NodeLink> childNodes) {\n         this.childNodes = childNodes;\n         return this;\n-    }\n+  }\n \n     public HeaderFooter addChildNodesItem(NodeLink childNodesItem) {\n         if (this.childNodes == null) {\n@@ -121,13 +122,13 @@ public class HeaderFooter extends HeaderFooterLink {\n     public boolean equals(java.lang.Object o) {\n         if (this == o) {\n             return true;\n-        }\n+  }\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    HeaderFooter headerFooter = (HeaderFooter)o;\n-    return\n-        Objects.equals(this.childNodes, headerFooter.childNodes) &&\n+\n+HeaderFooter headerFooter = (HeaderFooter)o;\n+    return Objects.equals(this.childNodes, headerFooter.childNodes) &&\n         Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n         Objects.equals(this.paragraphs, headerFooter.paragraphs) &&\n         super.equals(o);\n@@ -160,4 +161,4 @@ public class HeaderFooter extends HeaderFooterLink {\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/520/HeaderFooter.java\nindex b73a1973b05..300c2af783a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/520/HeaderFooter.java\n@@ -45,99 +45,112 @@ import io.swagger.annotations.ApiModelProperty;\n /**\n  * Section element.\n  */\n+\n+\n @ApiModel(description = \"Section element.\")\n+\n public class HeaderFooter extends HeaderFooterLink {\n-    @SerializedName(\"ChildNodes\")\n-    private List<NodeLink> childNodes = null;\n+  @SerializedName(\"ChildNodes\")\n+  private List<NodeLink> childNodes = null;\n \n-    @SerializedName(\"DrawingObjects\")\n-    private LinkElement drawingObjects = null;\n+  @SerializedName(\"DrawingObjects\")\n+  private LinkElement drawingObjects = null;\n \n-    @SerializedName(\"Paragraphs\")\n-    private LinkElement paragraphs = null;\n-    public HeaderFooter childNodes(List<NodeLink> childNodes) {\n-        this.childNodes = childNodes;\n-        return this;\n-    }\n+  @SerializedName(\"Paragraphs\")\n+  private LinkElement paragraphs = null;\n \n-    public HeaderFooter addChildNodesItem(NodeLink childNodesItem) {\n-        if (this.childNodes == null) {\n-            this.childNodes = new ArrayList<NodeLink>();\n-        }\n-        this.childNodes.add(childNodesItem);\n-        return this;\n+  public HeaderFooter childNodes(List<NodeLink> childNodes) {\n+    this.childNodes = childNodes;\n+    return this;\n+  }\n+\n+  public HeaderFooter addChildNodesItem(NodeLink childNodesItem) {\n+    if (this.childNodes == null) {\n+      this.childNodes = new ArrayList<NodeLink>();\n     }\n+    this.childNodes.add(childNodesItem);\n+    return this;\n+  }\n \n     /**\n      * Gets or sets child nodes.\n     * @return childNodes\n     **/\n-    @ApiModelProperty(value = \"Gets or sets child nodes.\")\n-    public List<NodeLink> getChildNodes() {\n-        return childNodes;\n-    }\n \n-    public void setChildNodes(List<NodeLink> childNodes) {\n-        this.childNodes = childNodes;\n-    }\n \n-    public HeaderFooter drawingObjects(LinkElement drawingObjects) {\n-        this.drawingObjects = drawingObjects;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets child nodes.\")\n+  public List<NodeLink> getChildNodes() {\n+    return childNodes;\n+  }\n+\n+  public void setChildNodes(List<NodeLink> childNodes) {\n+    this.childNodes = childNodes;\n+  }\n+\n+  public HeaderFooter drawingObjects(LinkElement drawingObjects) {\n+    this.drawingObjects = drawingObjects;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets link to DrawingObjects resource.\n     * @return drawingObjects\n     **/\n-    @ApiModelProperty(value = \"Gets or sets link to DrawingObjects resource.\")\n-    public LinkElement getDrawingObjects() {\n-        return drawingObjects;\n-    }\n \n-    public void setDrawingObjects(LinkElement drawingObjects) {\n-        this.drawingObjects = drawingObjects;\n-    }\n \n-    public HeaderFooter paragraphs(LinkElement paragraphs) {\n-        this.paragraphs = paragraphs;\n-        return this;\n-    }\n+  @ApiModelProperty(value = \"Gets or sets link to DrawingObjects resource.\")\n+  public LinkElement getDrawingObjects() {\n+    return drawingObjects;\n+  }\n+\n+  public void setDrawingObjects(LinkElement drawingObjects) {\n+    this.drawingObjects = drawingObjects;\n+  }\n+\n+  public HeaderFooter paragraphs(LinkElement paragraphs) {\n+    this.paragraphs = paragraphs;\n+    return this;\n+  }\n \n     /**\n      * Gets or sets link to Paragraphs resource.\n     * @return paragraphs\n     **/\n-    @ApiModelProperty(value = \"Gets or sets link to Paragraphs resource.\")\n-    public LinkElement getParagraphs() {\n-        return paragraphs;\n-    }\n \n-    public void setParagraphs(LinkElement paragraphs) {\n-        this.paragraphs = paragraphs;\n+\n+  @ApiModelProperty(value = \"Gets or sets link to Paragraphs resource.\")\n+  public LinkElement getParagraphs() {\n+    return paragraphs;\n+  }\n+\n+  public void setParagraphs(LinkElement paragraphs) {\n+    this.paragraphs = paragraphs;\n+  }\n+\n+\n+  @Override\n+  public boolean equals(java.lang.Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n     }\n \n-    @Override\n-    public boolean equals(java.lang.Object o) {\n-        if (this == o) {\n-            return true;\n-        }\n-        if (o == null || getClass() != o.getClass()) {\n-            return false;\n-        }\n-    HeaderFooter headerFooter = (HeaderFooter)o;\n-    return\n-        Objects.equals(this.childNodes, headerFooter.childNodes) &&\n-        Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n-        Objects.equals(this.paragraphs, headerFooter.paragraphs) &&\n-        super.equals(o);\n+    HeaderFooter headerFooter = (HeaderFooter) o;\n+    return Objects.equals(this.childNodes, headerFooter.childNodes) &&\n+    Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n+    Objects.equals(this.paragraphs, headerFooter.paragraphs) &&\n+    super.equals(o);\n   }\n \n+\n   @Override\n   public int hashCode() {\n     return Objects.hash(childNodes, drawingObjects, paragraphs, super.hashCode());\n   }\n \n+\n   @Override\n   public String toString() {\n     StringBuilder sb = new StringBuilder();\n@@ -154,10 +167,12 @@ public class HeaderFooter extends HeaderFooterLink {\n    * Convert the given object to string with each line indented by 4 spaces\n    * (except the first line).\n    */\n+\n   private String toIndentedString(java.lang.Object o) {\n     if (o == null) {\n       return \"null\";\n     }\n     return o.toString().replace(\"\\n\", \"\\n    \");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 105
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/520/HeaderFooter.java\nindex b73a1973b05..b57670a3f42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/520/HeaderFooter.java\n@@ -125,7 +125,7 @@ public class HeaderFooter extends HeaderFooterLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    HeaderFooter headerFooter = (HeaderFooter)o;\n+    HeaderFooter headerFooter = (HeaderFooter) o;\n     return\n         Objects.equals(this.childNodes, headerFooter.childNodes) &&\n         Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/520/HeaderFooter.java\nindex b73a1973b05..b57670a3f42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/520/HeaderFooter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/520/HeaderFooter.java\n@@ -125,7 +125,7 @@ public class HeaderFooter extends HeaderFooterLink {\n         if (o == null || getClass() != o.getClass()) {\n             return false;\n         }\n-    HeaderFooter headerFooter = (HeaderFooter)o;\n+    HeaderFooter headerFooter = (HeaderFooter) o;\n     return\n         Objects.equals(this.childNodes, headerFooter.childNodes) &&\n         Objects.equals(this.drawingObjects, headerFooter.drawingObjects) &&\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}