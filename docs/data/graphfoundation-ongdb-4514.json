{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4514",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4514/LookupFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4514/LookupFilter.java\nindex d9963c52a48..5ebfa42b005 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4514/LookupFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4514/LookupFilter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.Arrays;\n@@ -41,76 +42,74 @@ import org.neo4j.values.storable.Values;\n  */\n public class LookupFilter\n {\n-    private LookupFilter()\n-    {\n-    }\n+  private LookupFilter()\n+  {\n+  }\n \n-    /**\n-     * used by the consistency checker\n-     */\n-    public static PrimitiveLongIterator exactIndexMatches( PropertyAccessor accessor,\n-            PrimitiveLongIterator indexedNodeIds, IndexQuery... predicates )\n+  /**\n+   * used by the consistency checker\n+   */\n+  public static PrimitiveLongIterator exactIndexMatches(PropertyAccessor accessor,\n+                                                        PrimitiveLongIterator indexedNodeIds, IndexQuery... predicates)\n+  {\n+    if (!indexedNodeIds.hasNext())\n     {\n-        if ( !indexedNodeIds.hasNext() )\n-        {\n-            return indexedNodeIds;\n-        }\n-\n-        IndexQuery[] filteredPredicates =\n-                Arrays.stream( predicates )\n-                        .filter( LookupFilter::isNumericOrGeometricPredicate )\n-                        .toArray( IndexQuery[]::new );\n-\n-        if ( filteredPredicates.length > 0 )\n-        {\n-            LongPredicate combinedPredicate = nodeId ->\n-            {\n-                try\n-                {\n-                    for ( IndexQuery predicate : filteredPredicates )\n-                    {\n-                        int propertyKeyId = predicate.propertyKeyId();\n-                        Value value = accessor.getPropertyValue( nodeId, propertyKeyId );\n-                        if ( !predicate.acceptsValue( value ) )\n-                        {\n-                            return false;\n-                        }\n-                    }\n-                    return true;\n-                }\n-                catch ( EntityNotFoundException ignored )\n-                {\n-                    return false; // The node has been deleted but was still reported from the index. CC will catch\n-                                  // this through other mechanism (NodeInUseWithCorrectLabelsCheck), so we can\n-                                  // silently ignore here\n-                }\n-            };\n-            return PrimitiveLongCollections.filter( indexedNodeIds, combinedPredicate );\n-        }\n-        return indexedNodeIds;\n+      return indexedNodeIds;\n     }\n \n-    private static boolean isNumericOrGeometricPredicate( IndexQuery predicate )\n-    {\n+    IndexQuery[] filteredPredicates =\n+        Arrays.stream(predicates)\n+            .filter(LookupFilter::isNumericOrGeometricPredicate)\n+            .toArray(IndexQuery[]::new);\n \n-        if ( predicate.type() == IndexQuery.IndexQueryType.exact )\n+    if (filteredPredicates.length > 0)\n+    {\n+      LongPredicate combinedPredicate = nodeId ->\n+      {\n+        try\n         {\n-            IndexQuery.ExactPredicate exactPredicate = (IndexQuery.ExactPredicate) predicate;\n-            if ( isNumberGeometryOrArray( exactPredicate.value() ) )\n+          for (IndexQuery predicate : filteredPredicates)\n+          {\n+            int propertyKeyId = predicate.propertyKeyId();\n+            Value value = accessor.getPropertyValue(nodeId, propertyKeyId);\n+            if (!predicate.acceptsValue(value))\n             {\n-                return true;\n+              return false;\n             }\n-        }\n-        else if ( predicate.type() == IndexQuery.IndexQueryType.range &&\n-                  ( predicate.valueGroup() == ValueGroup.NUMBER || predicate.valueGroup() == ValueGroup.GEOMETRY ) )\n+          }\n+          return true;\n+        } catch (EntityNotFoundException ignored)\n         {\n-            return true;\n+          return false; // The node has been deleted but was still reported from the index. CC will catch\n+          // this through other mechanism (NodeInUseWithCorrectLabelsCheck), so we can\n+          // silently ignore here\n         }\n-        return false;\n+      };\n+      return PrimitiveLongCollections.filter(indexedNodeIds, combinedPredicate);\n     }\n+    return indexedNodeIds;\n+  }\n+\n+  private static boolean isNumericOrGeometricPredicate(IndexQuery predicate)\n+  {\n \n-    private static boolean isNumberGeometryOrArray( Value value )\n+    if (predicate.type() == IndexQuery.IndexQueryType.exact)\n     {\n-        return Values.isNumberValue( value ) || Values.isGeometryValue( value ) || Values.isArrayValue( value );\n+      IndexQuery.ExactPredicate exactPredicate = (IndexQuery.ExactPredicate) predicate;\n+      if (isNumberGeometryOrArray(exactPredicate.value()))\n+      {\n+        return true;\n+      }\n+    } else if (predicate.type() == IndexQuery.IndexQueryType.range &&\n+        (predicate.valueGroup() == ValueGroup.NUMBER || predicate.valueGroup() == ValueGroup.GEOMETRY))\n+    {\n+      return true;\n     }\n+    return false;\n+  }\n+\n+  private static boolean isNumberGeometryOrArray(Value value)\n+  {\n+    return Values.isNumberValue(value) || Values.isGeometryValue(value) || Values.isArrayValue(value);\n+  }\n }\n",
            "diff_size": 93
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}