{
    "project_name": "opencb-opencga",
    "error_id": "309",
    "information": {
        "errors": [
            {
                "line": "146",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 141).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                        .append(VariantQueryParam.INCLUDE_SAMPLE.key(), samples)\n                        .append(VariantQueryParam.UNKNOWN_GENOTYPE.key(), \"./.\");\n                variantStorageManager.exportData(variantsOutputFile.getAbsolutePath(), VariantWriterFactory.VariantOutputFormat.VCF_GZ, null,\n                        query, new QueryOptions(), token);\n            }\n        });",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/309/SampleVariantFilterAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/309/SampleVariantFilterAnalysis.java\nindex 7069af933bd..89273ca6cf9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/309/SampleVariantFilterAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/309/SampleVariantFilterAnalysis.java\n@@ -31,261 +31,261 @@ import java.util.stream.Collectors;\n @Tool(id = SampleVariantFilterAnalysis.ID, description = SampleVariantFilterAnalysis.DESCRIPTION, resource = Enums.Resource.VARIANT)\n public class SampleVariantFilterAnalysis extends OpenCgaTool {\n \n-    public static final String ID = \"sample-variant-filter\";\n-    public static final String DESCRIPTION = \"Get samples given a set of variants\";\n-\n-    protected final Logger logger = LoggerFactory.getLogger(SampleVariantFilterAnalysis.class);\n-    private Query query;\n-    private List<GenotypeClass> genotypeClasses;\n-    private Set<String> genotypesSet;\n-    private File samplesOutputFile;\n-    private File variantsOutputFile;\n-\n-    private final SampleVariantFilterParams toolParams = new SampleVariantFilterParams();\n-    private String studyFqn;\n-\n-    private Set<String> variants;\n-    private Collection<String> samples;\n-\n-    public SampleVariantFilterAnalysis setMaxVariants(int maxVariants) {\n-        this.toolParams.setMaxVariants(maxVariants);\n-        return this;\n-    }\n+  public static final String ID = \"sample-variant-filter\";\n+  public static final String DESCRIPTION = \"Get samples given a set of variants\";\n+\n+  protected final Logger logger = LoggerFactory.getLogger(SampleVariantFilterAnalysis.class);\n+  private Query query;\n+  private List<GenotypeClass> genotypeClasses;\n+  private Set<String> genotypesSet;\n+  private File samplesOutputFile;\n+  private File variantsOutputFile;\n+\n+  private final SampleVariantFilterParams toolParams = new SampleVariantFilterParams();\n+  private String studyFqn;\n+\n+  private Set<String> variants;\n+  private Collection<String> samples;\n+\n+  public SampleVariantFilterAnalysis setMaxVariants(int maxVariants) {\n+    this.toolParams.setMaxVariants(maxVariants);\n+    return this;\n+  }\n+\n+  public SampleVariantFilterAnalysis setSamplesInAllVariants(boolean samplesInAllVariants) {\n+    this.toolParams.setSamplesInAllVariants(samplesInAllVariants);\n+    return this;\n+  }\n+\n+  public SampleVariantFilterAnalysis setGenotypes(List<String> genotypes) {\n+    this.toolParams.setGenotypes(genotypes);\n+    return this;\n+  }\n+\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n+    toolParams.updateParams(params);\n+//            VariantStorageManager.getVariantQuery(params);\n+    query = toolParams.toQuery();\n+    studyFqn = getStudyFqn();\n \n-    public SampleVariantFilterAnalysis setSamplesInAllVariants(boolean samplesInAllVariants) {\n-        this.toolParams.setSamplesInAllVariants(samplesInAllVariants);\n-        return this;\n+    if (toolParams.getMaxVariants() > 1000) {\n+      throw new ToolException(\"Number of max variants can not be larger than 1000\");\n     }\n \n-    public SampleVariantFilterAnalysis setGenotypes(List<String> genotypes) {\n-        this.toolParams.setGenotypes(genotypes);\n-        return this;\n-    }\n+    List<String> genotypesList = new ArrayList<>(toolParams.getGenotypes()); // Ensure this.genotypes is untouched\n+    genotypeClasses = getGenotypeClasses(genotypesList); // This method may modify genotypesList\n+    genotypesSet = getGenotypesSet(genotypesList);\n \n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n-        toolParams.updateParams(params);\n-//            VariantStorageManager.getVariantQuery(params);\n-        query = toolParams.toQuery();\n-        studyFqn = getStudyFqn();\n+    samplesOutputFile = getOutDir().resolve(\"samples.tsv\").toFile();\n+    variantsOutputFile = getOutDir().resolve(\"variants.vcf.gz\").toFile();\n+  }\n \n-        if (toolParams.getMaxVariants() > 1000) {\n-            throw new ToolException(\"Number of max variants can not be larger than 1000\");\n-        }\n+  protected final String getStudyFqn() throws CatalogException {\n+    String userId = catalogManager.getUserManager().getUserId(token);\n+    return catalogManager.getStudyManager().resolveId(params.getString(ParamConstants.STUDY_PARAM), userId).getFqn();\n+  }\n \n-        List<String> genotypesList = new ArrayList<>(toolParams.getGenotypes()); // Ensure this.genotypes is untouched\n-        genotypeClasses = getGenotypeClasses(genotypesList); // This method may modify genotypesList\n-        genotypesSet = getGenotypesSet(genotypesList);\n+  @Override\n+  protected List<String> getSteps() {\n+    return Arrays.asList(\"filterVariants\", \"filterSamples\", \"exportVariants\");\n+  }\n \n-        samplesOutputFile = getOutDir().resolve(\"samples.tsv\").toFile();\n-        variantsOutputFile = getOutDir().resolve(\"variants.vcf.gz\").toFile();\n-    }\n+  @Override\n+  protected void run() throws Exception {\n \n-    protected final String getStudyFqn() throws CatalogException {\n-        String userId = catalogManager.getUserManager().getUserId(token);\n-        return catalogManager.getStudyManager().resolveId(params.getString(ParamConstants.STUDY_PARAM), userId).getFqn();\n+    step(\"filterVariants\", () -> {\n+      int maxVariants = toolParams.getMaxVariants();\n+      variants = new HashSet<>();\n+      Query query = new Query(this.query);\n+      query.remove(VariantQueryParam.SAMPLE.key());\n+//                    .append(VariantQueryParam.SAMPLE.key(), toolParams.getSample());\n+      try (VariantDBIterator iterator = variantStorageManager.iterator(query, new QueryOptions(VariantField.SUMMARY, true), token)) {\n+        while (iterator.hasNext()) {\n+          Variant variant = iterator.next();\n+          variants.add(variant.toString());\n+          if (variants.size() > maxVariants) {\n+            throw new ToolException(\"More than \" + maxVariants + \" variants found for query \"\n+                + VariantQueryUtils.printQuery(this.query));\n+          }\n+        }\n+      }\n+      logger.info(\"Number of variants: \" + variants.size());\n+      addAttribute(\"numberOfVariants\", variants.size());\n+      if (variants.isEmpty()) {\n+        addWarning(\"Empty list of variants!\");\n+      }\n+    });\n+\n+    step(\"filterSamples\", () -> {\n+      if (variants.isEmpty()) {\n+        samples = Collections.emptyList();\n+      } else if (toolParams.isSamplesInAllVariants()) {\n+        samples = getSamplesInAllVariants();\n+      } else {\n+        samples = getSamplesInAnyVariants();\n+      }\n+      addAttribute(\"numberOfSamples\", samples.size());\n+      if (samples.isEmpty()) {\n+        addWarning(\"Empty list of samples!\");\n+      }\n+\n+      printSamplesFile();\n+    });\n+\n+    step(\"exportVariants\", () -> {\n+      if (variants.isEmpty() || samples.isEmpty()) {\n+        logger.info(\"Nothing to export\");\n+      } else {\n+        Query query = new Query()\n+            .append(VariantQueryParam.ID.key(), variants)\n+            .append(VariantQueryParam.INCLUDE_STUDY.key(), studyFqn)\n+            .append(VariantQueryParam.INCLUDE_SAMPLE.key(), samples)\n+            .append(VariantQueryParam.UNKNOWN_GENOTYPE.key(), \"./.\");\n+        variantStorageManager.exportData(variantsOutputFile.getAbsolutePath(), VariantWriterFactory.VariantOutputFormat.VCF_GZ, null,\n+            query, new QueryOptions(), token);\n+      }\n+    });\n+  }\n+\n+  private void printSamplesFile() throws IOException, CatalogException {\n+    final String type;\n+    if (toolParams.isSamplesInAllVariants()) {\n+      type = \"ALL\";\n+    } else {\n+      type = \"ANY\";\n     }\n-\n-    @Override\n-    protected List<String> getSteps() {\n-        return Arrays.asList(\"filterVariants\", \"filterSamples\", \"exportVariants\");\n+    try (PrintStream out = new PrintStream(new FileOutputStream(samplesOutputFile))) {\n+      out.println(\"## Samples in \" + type + \" variants with genotypes \" + toolParams.getGenotypes());\n+      out.println(\"## Number of variants=\" + variants.size());\n+      out.println(\"#SAMPLE\\tINDIVIDUAL\\tPHENOTYPES\");\n+      for (String sampleId : samples) {\n+        Sample sample = catalogManager.getSampleManager().get(studyFqn, sampleId, null, token).first();\n+        out.println(sampleId + \"\\t\"\n+            + sample.getIndividualId() + \"\\t\"\n+            + sample.getPhenotypes().stream().map(Phenotype::getId).collect(Collectors.joining(\",\")));\n+      }\n     }\n-\n-    @Override\n-    protected void run() throws Exception {\n-\n-        step(\"filterVariants\", () -> {\n-            int maxVariants = toolParams.getMaxVariants();\n-            variants = new HashSet<>();\n-            Query query = new Query(this.query);\n-            query.remove(VariantQueryParam.SAMPLE.key());\n-//                    .append(VariantQueryParam.SAMPLE.key(), toolParams.getSample());\n-            try (VariantDBIterator iterator = variantStorageManager.iterator(query, new QueryOptions(VariantField.SUMMARY, true), token)) {\n-                while (iterator.hasNext()) {\n-                    Variant variant = iterator.next();\n-                    variants.add(variant.toString());\n-                    if (variants.size() > maxVariants) {\n-                        throw new ToolException(\"More than \" + maxVariants + \" variants found for query \"\n-                                + VariantQueryUtils.printQuery(this.query));\n-                    }\n-                }\n-            }\n-            logger.info(\"Number of variants: \" + variants.size());\n-            addAttribute(\"numberOfVariants\", variants.size());\n-            if (variants.isEmpty()) {\n-                addWarning(\"Empty list of variants!\");\n-            }\n-        });\n-\n-        step(\"filterSamples\", () -> {\n-            if (variants.isEmpty()) {\n-                samples = Collections.emptyList();\n-            } else if (toolParams.isSamplesInAllVariants()) {\n-                samples = getSamplesInAllVariants();\n-            } else {\n-                samples = getSamplesInAnyVariants();\n-            }\n-            addAttribute(\"numberOfSamples\", samples.size());\n-            if (samples.isEmpty()) {\n-                addWarning(\"Empty list of samples!\");\n+  }\n+\n+  public Set<String> getSamplesInAnyVariants() throws Exception {\n+    Set<String> samples = new HashSet<>();\n+\n+    iterate(variant -> {\n+    }, (variant, sample, gt) -> {\n+      if (isValidGenotype(genotypesSet, genotypeClasses, gt)) {\n+        samples.add(sample);\n+      }\n+      return true;\n+    });\n+\n+    return samples;\n+  }\n+\n+  public Collection<String> getSamplesInAllVariants() throws Exception {\n+    Set<String> samples = new HashSet<>();\n+\n+    iterate(variant -> getSamplesSet(variant, samples),\n+        (variant, sample, gt) -> {\n+          // Remove if not a valid genotype\n+          if (!isValidGenotype(genotypesSet, genotypeClasses, gt)) {\n+            if (samples.remove(sample)) {\n+              logger.debug(\"variant: {}, sample: {}, gt: {}\", variant, sample, gt);\n+              if (sample.isEmpty()) {\n+                return false;\n+              }\n             }\n-\n-            printSamplesFile();\n+          }\n+          return true;\n         });\n-\n-        step(\"exportVariants\", () -> {\n-            if (variants.isEmpty() || samples.isEmpty()) {\n-                logger.info(\"Nothing to export\");\n-            } else {\n-                Query query = new Query()\n-                        .append(VariantQueryParam.ID.key(), variants)\n-                        .append(VariantQueryParam.INCLUDE_STUDY.key(), studyFqn)\n-                        .append(VariantQueryParam.INCLUDE_SAMPLE.key(), samples)\n-                        .append(VariantQueryParam.UNKNOWN_GENOTYPE.key(), \"./.\");\n-                variantStorageManager.exportData(variantsOutputFile.getAbsolutePath(), VariantWriterFactory.VariantOutputFormat.VCF_GZ, null,\n-                        query, new QueryOptions(), token);\n-            }\n-        });\n-    }\n-\n-    private void printSamplesFile() throws IOException, CatalogException {\n-        final String type;\n-        if (toolParams.isSamplesInAllVariants()) {\n-            type = \"ALL\";\n-        } else {\n-            type = \"ANY\";\n+    return samples;\n+  }\n+\n+  @FunctionalInterface\n+  interface GenotypeWalker {\n+\n+    boolean accept(Variant variant, String sample, String gt);\n+  }\n+\n+  protected void iterate(Consumer<Variant> init, GenotypeWalker walker) throws Exception {\n+    int maxVariants = toolParams.getMaxVariants();\n+    Query query = new Query()\n+        .append(VariantQueryParam.ID.key(), variants)\n+        .append(VariantQueryParam.INCLUDE_SAMPLE.key(), toolParams.getSample())\n+        .append(VariantQueryParam.INCLUDE_GENOTYPE.key(), true);\n+    QueryOptions options = new QueryOptions()\n+        .append(QueryOptions.INCLUDE, Collections.singletonList(VariantField.STUDIES_SAMPLES_DATA))\n+        .append(QueryOptions.LIMIT, variants.size());\n+\n+    try (VariantDBIterator iterator = variantStorageManager.iterator(query, options, token)) {\n+      if (!iterator.hasNext()) {\n+        return;\n+      }\n+      int numVariants = 0;\n+      while (iterator.hasNext()) {\n+        Variant variant = iterator.next();\n+        if (numVariants == 0) {\n+          init.accept(variant);\n+        } else if (numVariants == maxVariants) {\n+          throw new VariantQueryException(\"Error! Limit reached with more than \" + maxVariants + \" variants!\");\n         }\n-        try (PrintStream out = new PrintStream(new FileOutputStream(samplesOutputFile))) {\n-            out.println(\"## Samples in \" + type + \" variants with genotypes \" + toolParams.getGenotypes());\n-            out.println(\"## Number of variants=\" + variants.size());\n-            out.println(\"#SAMPLE\\tINDIVIDUAL\\tPHENOTYPES\");\n-            for (String sampleId : samples) {\n-                Sample sample = catalogManager.getSampleManager().get(studyFqn, sampleId, null, token).first();\n-                out.println(sampleId + \"\\t\"\n-                        + sample.getIndividualId() + \"\\t\"\n-                        + sample.getPhenotypes().stream().map(Phenotype::getId).collect(Collectors.joining(\",\")));\n-            }\n+        numVariants++;\n+        StudyEntry studyEntry = variant.getStudies().get(0);\n+        Integer gtIdx = studyEntry.getFormatPositions().get(\"GT\");\n+        if (gtIdx == null || gtIdx < 0) {\n+          throw new VariantQueryException(\"Missing GT at variant \" + variant);\n         }\n-    }\n-\n-    public Set<String> getSamplesInAnyVariants() throws Exception {\n-        Set<String> samples = new HashSet<>();\n-\n-        iterate(variant -> {\n-        }, (variant, sample, gt) -> {\n-            if (isValidGenotype(genotypesSet, genotypeClasses, gt)) {\n-                samples.add(sample);\n-            }\n-            return true;\n-        });\n-\n-        return samples;\n-    }\n-\n-    public Collection<String> getSamplesInAllVariants() throws Exception {\n-        Set<String> samples = new HashSet<>();\n-\n-        iterate(variant -> getSamplesSet(variant, samples),\n-                (variant, sample, gt) -> {\n-                    // Remove if not a valid genotype\n-                    if (!isValidGenotype(genotypesSet, genotypeClasses, gt)) {\n-                        if (samples.remove(sample)) {\n-                            logger.debug(\"variant: {}, sample: {}, gt: {}\", variant, sample, gt);\n-                            if (sample.isEmpty()) {\n-                                return false;\n-                            }\n-                        }\n-                    }\n-                    return true;\n-                });\n-        return samples;\n-    }\n-\n-    @FunctionalInterface\n-    interface GenotypeWalker {\n-\n-        boolean accept(Variant variant, String sample, String gt);\n-    }\n \n-    protected void iterate(Consumer<Variant> init, GenotypeWalker walker) throws Exception {\n-        int maxVariants = toolParams.getMaxVariants();\n-        Query query = new Query()\n-                .append(VariantQueryParam.ID.key(), variants)\n-                .append(VariantQueryParam.INCLUDE_SAMPLE.key(), toolParams.getSample())\n-                .append(VariantQueryParam.INCLUDE_GENOTYPE.key(), true);\n-        QueryOptions options = new QueryOptions()\n-                .append(QueryOptions.INCLUDE, Collections.singletonList(VariantField.STUDIES_SAMPLES_DATA))\n-                .append(QueryOptions.LIMIT, variants.size());\n-\n-        try (VariantDBIterator iterator = variantStorageManager.iterator(query, options, token)) {\n-            if (!iterator.hasNext()) {\n-                return;\n-            }\n-            int numVariants = 0;\n-            while (iterator.hasNext()) {\n-                Variant variant = iterator.next();\n-                if (numVariants == 0) {\n-                    init.accept(variant);\n-                } else if (numVariants == maxVariants) {\n-                    throw new VariantQueryException(\"Error! Limit reached with more than \" + maxVariants + \" variants!\");\n-                }\n-                numVariants++;\n-                StudyEntry studyEntry = variant.getStudies().get(0);\n-                Integer gtIdx = studyEntry.getFormatPositions().get(\"GT\");\n-                if (gtIdx == null || gtIdx < 0) {\n-                    throw new VariantQueryException(\"Missing GT at variant \" + variant);\n-                }\n-\n-                int sampleIdx = 0;\n-                for (String sample : studyEntry.getOrderedSamplesName()) {\n-                    String gt = studyEntry.getSamplesData().get(sampleIdx).get(gtIdx);\n-                    if (!walker.accept(variant, sample, gt)) {\n-                        break;\n-                    }\n-                    sampleIdx++;\n-                }\n-            }\n+        int sampleIdx = 0;\n+        for (String sample : studyEntry.getOrderedSamplesName()) {\n+          String gt = studyEntry.getSamplesData().get(sampleIdx).get(gtIdx);\n+          if (!walker.accept(variant, sample, gt)) {\n+            break;\n+          }\n+          sampleIdx++;\n         }\n+      }\n     }\n+  }\n \n-    private Set<String> getSamplesSet(Variant variant, Set<String> samples) {\n-        if (variant.getStudies().size() != 1) {\n-            throw new VariantQueryException(\"Unable to process with \" + variant.getStudies().size() + \" studies.\");\n-        }\n-        samples.addAll(variant.getStudies().get(0).getSamplesName());\n-        if (samples.isEmpty()) {\n-            throw new VariantQueryException(\"Unable to get samples!\");\n-        }\n-        return samples;\n+  private Set<String> getSamplesSet(Variant variant, Set<String> samples) {\n+    if (variant.getStudies().size() != 1) {\n+      throw new VariantQueryException(\"Unable to process with \" + variant.getStudies().size() + \" studies.\");\n     }\n-\n-    private boolean isValidGenotype(Set<String> genotypesSet, List<GenotypeClass> genotypeClasses, String gt) {\n-        return genotypesSet.contains(gt) || !genotypeClasses.isEmpty() && genotypeClasses.stream().anyMatch(gc -> gc.test(gt));\n+    samples.addAll(variant.getStudies().get(0).getSamplesName());\n+    if (samples.isEmpty()) {\n+      throw new VariantQueryException(\"Unable to get samples!\");\n     }\n-\n-    private List<GenotypeClass> getGenotypeClasses(Collection<String> genotypes) {\n-        List<GenotypeClass> genotypeClasses = new ArrayList<>();\n-        Iterator<String> iterator = genotypes.iterator();\n-        while (iterator.hasNext()) {\n-            String genotype = iterator.next();\n-            GenotypeClass genotypeClass = GenotypeClass.from(genotype);\n-            if (genotypeClass != null) {\n-                genotypeClasses.add(genotypeClass);\n-                iterator.remove();\n-            }\n-        }\n-        return genotypeClasses;\n+    return samples;\n+  }\n+\n+  private boolean isValidGenotype(Set<String> genotypesSet, List<GenotypeClass> genotypeClasses, String gt) {\n+    return genotypesSet.contains(gt) || !genotypeClasses.isEmpty() && genotypeClasses.stream().anyMatch(gc -> gc.test(gt));\n+  }\n+\n+  private List<GenotypeClass> getGenotypeClasses(Collection<String> genotypes) {\n+    List<GenotypeClass> genotypeClasses = new ArrayList<>();\n+    Iterator<String> iterator = genotypes.iterator();\n+    while (iterator.hasNext()) {\n+      String genotype = iterator.next();\n+      GenotypeClass genotypeClass = GenotypeClass.from(genotype);\n+      if (genotypeClass != null) {\n+        genotypeClasses.add(genotypeClass);\n+        iterator.remove();\n+      }\n     }\n-\n-    private HashSet<String> getGenotypesSet(List<String> genotypes) {\n-        HashSet<String> set = new HashSet<>(genotypes);\n-        for (String gt : genotypes) {\n-            Genotype genotype = new Genotype(gt);\n-            if (!genotype.isPhased()) {\n-                set.addAll(GenotypeClass.getPhasedGenotypes(genotype));\n-            }\n-        }\n-        return set;\n+    return genotypeClasses;\n+  }\n+\n+  private HashSet<String> getGenotypesSet(List<String> genotypes) {\n+    HashSet<String> set = new HashSet<>(genotypes);\n+    for (String gt : genotypes) {\n+      Genotype genotype = new Genotype(gt);\n+      if (!genotype.isPhased()) {\n+        set.addAll(GenotypeClass.getPhasedGenotypes(genotype));\n+      }\n     }\n+    return set;\n+  }\n }\n",
            "diff_size": 334
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/309/SampleVariantFilterAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/309/SampleVariantFilterAnalysis.java\nindex 7069af933bd..dc3e244dc22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/309/SampleVariantFilterAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/309/SampleVariantFilterAnalysis.java\n@@ -172,8 +172,7 @@ public class SampleVariantFilterAnalysis extends OpenCgaTool {\n     public Set<String> getSamplesInAnyVariants() throws Exception {\n         Set<String> samples = new HashSet<>();\n \n-        iterate(variant -> {\n-        }, (variant, sample, gt) -> {\n+        iterate(variant -> { }, (variant, sample, gt) -> {\n             if (isValidGenotype(genotypesSet, genotypeClasses, gt)) {\n                 samples.add(sample);\n             }\n@@ -288,4 +287,4 @@ public class SampleVariantFilterAnalysis extends OpenCgaTool {\n         }\n         return set;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "146",
                    "column": "77",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "147",
                    "column": "24",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "147",
                    "column": "26",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/309/SampleVariantFilterAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/309/SampleVariantFilterAnalysis.java\nindex 7069af933bd..4081b622e33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/309/SampleVariantFilterAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/309/SampleVariantFilterAnalysis.java\n@@ -143,7 +143,8 @@ public class SampleVariantFilterAnalysis extends OpenCgaTool {\n                         .append(VariantQueryParam.INCLUDE_STUDY.key(), studyFqn)\n                         .append(VariantQueryParam.INCLUDE_SAMPLE.key(), samples)\n                         .append(VariantQueryParam.UNKNOWN_GENOTYPE.key(), \"./.\");\n-                variantStorageManager.exportData(variantsOutputFile.getAbsolutePath(), VariantWriterFactory.VariantOutputFormat.VCF_GZ, null,\n+                        variantStorageManager.exportData(variantsOutputFile. getAbsolutePath()\n+                        ,VariantWriterFactory.VariantOutputFormat.VCF_GZ, null,\n                         query, new QueryOptions(), token);\n             }\n         });\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}