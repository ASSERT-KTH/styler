{
    "project_name": "neo4j-neo4j",
    "error_id": "2617",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2617/Seeker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2617/Seeker.java\nindex 233c2d7206c..362783fd01e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2617/Seeker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2617/Seeker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.io.Closeable;\n@@ -28,10 +29,10 @@ import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n  * Seeks and allows read access to data in a {@link GBPTree}. The interaction is cursor-like, where the next item is visited\n  * on every call to {@link #next()} and if returning {@code true} the entry data can be accessed using {@link #key()} and {@link #value()}.\n  *\n- * @param <KEY> type of key in this tree.\n+ * @param <KEY>   type of key in this tree.\n  * @param <VALUE> type of value in this value.\n  */\n-public interface Seeker<KEY,VALUE> extends Closeable\n+public interface Seeker<KEY, VALUE> extends Closeable\n {\n     /**\n      * Moves this seeker to the next result in this seek.\n@@ -54,7 +55,7 @@ public interface Seeker<KEY,VALUE> extends Closeable\n      */\n     VALUE value();\n \n-    interface Factory<KEY,VALUE>\n+    interface Factory<KEY, VALUE>\n     {\n         /**\n          * Seeks hits in this tree, given a key range. Hits are iterated over using the returned {@link Seeker}.\n@@ -73,11 +74,11 @@ public interface Seeker<KEY,VALUE> extends Closeable\n          * </ul>\n          *\n          * @param fromInclusive lower bound of the range to seek (inclusive).\n-         * @param toExclusive higher bound of the range to seek (exclusive).\n-         * @param cursorTracer underlying page cursor tracer\n+         * @param toExclusive   higher bound of the range to seek (exclusive).\n+         * @param cursorTracer  underlying page cursor tracer\n          * @return a {@link Seeker} used to iterate over the hits within the specified key range.\n          * @throws IOException on error reading from index.\n          */\n-        Seeker<KEY,VALUE> seek( KEY fromInclusive, KEY toExclusive, PageCursorTracer cursorTracer ) throws IOException;\n+        Seeker<KEY, VALUE> seek(KEY fromInclusive, KEY toExclusive, PageCursorTracer cursorTracer) throws IOException;\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}