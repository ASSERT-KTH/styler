{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final String SOURCE_DISK_ID = \"diskId\";\n  private static final Long ARCHIVE_SIZE_BYTES = 42L;\n  private static final ImageConfiguration.SourceType SOURCE_TYPE = ImageConfiguration.SourceType.RAW;\n  private static final DiskImageConfiguration CONFIGURATION =\n      DiskImageConfiguration.builder(SOURCE_DISK)\n          .sourceDiskId(SOURCE_DISK_ID)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/5/DiskImageConfigurationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/5/DiskImageConfigurationTest.java\nindex f5ecf03ddf2..2bfcbfae3d7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/5/DiskImageConfigurationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/5/DiskImageConfigurationTest.java\n@@ -25,10 +25,11 @@ import org.junit.Test;\n \n public class DiskImageConfigurationTest {\n \n-  private static final DiskId SOURCE_DISK =  DiskId.of(\"project\", \"zone\", \"disk\");\n+  private static final DiskId SOURCE_DISK = DiskId.of(\"project\", \"zone\", \"disk\");\n   private static final String SOURCE_DISK_ID = \"diskId\";\n   private static final Long ARCHIVE_SIZE_BYTES = 42L;\n-  private static final ImageConfiguration.SourceType SOURCE_TYPE = ImageConfiguration.SourceType.RAW;\n+  private static final ImageConfiguration.SourceType SOURCE_TYPE =\n+      ImageConfiguration.SourceType.RAW;\n   private static final DiskImageConfiguration CONFIGURATION =\n       DiskImageConfiguration.builder(SOURCE_DISK)\n           .sourceDiskId(SOURCE_DISK_ID)\n@@ -98,7 +99,7 @@ public class DiskImageConfigurationTest {\n   }\n \n   private void compareDiskImageConfiguration(DiskImageConfiguration expected,\n-      DiskImageConfiguration value) {\n+                                             DiskImageConfiguration value) {\n     assertEquals(expected, value);\n     assertEquals(expected.type(), value.type());\n     assertEquals(expected.archiveSizeBytes(), value.archiveSizeBytes());\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/5/DiskImageConfigurationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/5/DiskImageConfigurationTest.java\nindex f5ecf03ddf2..ca0f14e5c3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/5/DiskImageConfigurationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/5/DiskImageConfigurationTest.java\n@@ -25,7 +25,7 @@ import org.junit.Test;\n \n public class DiskImageConfigurationTest {\n \n-  private static final DiskId SOURCE_DISK =  DiskId.of(\"project\", \"zone\", \"disk\");\n+  private static final DiskId SOURCE_DISK = DiskId.of(\"project\", \"zone\", \"disk\");\n   private static final String SOURCE_DISK_ID = \"diskId\";\n   private static final Long ARCHIVE_SIZE_BYTES = 42L;\n   private static final ImageConfiguration.SourceType SOURCE_TYPE = ImageConfiguration.SourceType.RAW;\n@@ -36,7 +36,7 @@ public class DiskImageConfigurationTest {\n           .archiveSizeBytes(ARCHIVE_SIZE_BYTES)\n           .build();\n \n-  @Test\n+@Test\n   public void testToBuilder() {\n     compareDiskImageConfiguration(CONFIGURATION, CONFIGURATION.toBuilder().build());\n     DiskId newDisk = DiskId.of(\"newProject\", \"newZone\", \"newDisk\");\n@@ -107,4 +107,4 @@ public class DiskImageConfigurationTest {\n     assertEquals(expected.sourceType(), value.sourceType());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/5/DiskImageConfigurationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/5/DiskImageConfigurationTest.java\nindex f5ecf03ddf2..7774e33977f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/5/DiskImageConfigurationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/5/DiskImageConfigurationTest.java\n@@ -23,34 +23,24 @@ import static org.junit.Assert.assertTrue;\n import org.junit.Assert;\n import org.junit.Test;\n \n+\n public class DiskImageConfigurationTest {\n \n-  private static final DiskId SOURCE_DISK =  DiskId.of(\"project\", \"zone\", \"disk\");\n+  private static final DiskId SOURCE_DISK = DiskId.of(\"project\", \"zone\", \"disk\");\n   private static final String SOURCE_DISK_ID = \"diskId\";\n   private static final Long ARCHIVE_SIZE_BYTES = 42L;\n   private static final ImageConfiguration.SourceType SOURCE_TYPE = ImageConfiguration.SourceType.RAW;\n-  private static final DiskImageConfiguration CONFIGURATION =\n-      DiskImageConfiguration.builder(SOURCE_DISK)\n-          .sourceDiskId(SOURCE_DISK_ID)\n-          .sourceType(SOURCE_TYPE)\n-          .archiveSizeBytes(ARCHIVE_SIZE_BYTES)\n-          .build();\n+  private static final DiskImageConfiguration CONFIGURATION = DiskImageConfiguration.builder(SOURCE_DISK).sourceDiskId(SOURCE_DISK_ID).sourceType(SOURCE_TYPE).archiveSizeBytes(ARCHIVE_SIZE_BYTES).build();\n \n   @Test\n   public void testToBuilder() {\n     compareDiskImageConfiguration(CONFIGURATION, CONFIGURATION.toBuilder().build());\n     DiskId newDisk = DiskId.of(\"newProject\", \"newZone\", \"newDisk\");\n     String newDiskId = \"newDiskId\";\n-    DiskImageConfiguration configuration = CONFIGURATION.toBuilder()\n-        .sourceDisk(newDisk)\n-        .sourceDiskId(newDiskId)\n-        .build();\n+    DiskImageConfiguration configuration = CONFIGURATION.toBuilder().sourceDisk(newDisk).sourceDiskId(newDiskId).build();\n     assertEquals(newDisk, configuration.sourceDisk());\n     assertEquals(newDiskId, configuration.sourceDiskId());\n-    configuration = configuration.toBuilder()\n-        .sourceDiskId(SOURCE_DISK_ID)\n-        .sourceDisk(SOURCE_DISK)\n-        .build();\n+    configuration = configuration.toBuilder().sourceDiskId(SOURCE_DISK_ID).sourceDisk(SOURCE_DISK).build();\n     compareDiskImageConfiguration(CONFIGURATION, configuration);\n   }\n \n@@ -72,11 +62,9 @@ public class DiskImageConfigurationTest {\n   @Test\n   public void testToAndFromPb() {\n     assertTrue(ImageConfiguration.fromPb(CONFIGURATION.toPb()) instanceof DiskImageConfiguration);\n-    compareDiskImageConfiguration(CONFIGURATION,\n-        ImageConfiguration.<DiskImageConfiguration>fromPb(CONFIGURATION.toPb()));\n+    compareDiskImageConfiguration(CONFIGURATION, ImageConfiguration.<DiskImageConfiguration>fromPb(CONFIGURATION.toPb()));\n     DiskImageConfiguration configuration = DiskImageConfiguration.of(SOURCE_DISK);\n-    compareDiskImageConfiguration(configuration,\n-        DiskImageConfiguration.fromPb(configuration.toPb()));\n+    compareDiskImageConfiguration(configuration, DiskImageConfiguration.fromPb(configuration.toPb()));\n   }\n \n   @Test\n@@ -91,14 +79,11 @@ public class DiskImageConfigurationTest {\n \n   @Test\n   public void testSetProjectId() {\n-    DiskImageConfiguration configuration = CONFIGURATION.toBuilder()\n-        .sourceDisk(DiskId.of(\"zone\", \"disk\"))\n-        .build();\n+    DiskImageConfiguration configuration = CONFIGURATION.toBuilder().sourceDisk(DiskId.of(\"zone\", \"disk\")).build();\n     compareDiskImageConfiguration(CONFIGURATION, configuration.setProjectId(\"project\"));\n   }\n \n-  private void compareDiskImageConfiguration(DiskImageConfiguration expected,\n-      DiskImageConfiguration value) {\n+  private void compareDiskImageConfiguration(DiskImageConfiguration expected, DiskImageConfiguration value) {\n     assertEquals(expected, value);\n     assertEquals(expected.type(), value.type());\n     assertEquals(expected.archiveSizeBytes(), value.archiveSizeBytes());\n@@ -107,4 +92,4 @@ public class DiskImageConfigurationTest {\n     assertEquals(expected.sourceType(), value.sourceType());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}