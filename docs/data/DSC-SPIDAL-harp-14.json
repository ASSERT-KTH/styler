{
    "project_name": "DSC-SPIDAL-harp",
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "3",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright 2013-2017 Indiana University\n * \n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/14/AvgDistCalcTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/intellij/14/AvgDistCalcTask.java\nindex a3aad368411..68da99f1cdf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/14/AvgDistCalcTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/intellij/14/AvgDistCalcTask.java\n@@ -1,6 +1,6 @@\n /*\n  * Copyright 2013-2017 Indiana University\n- * \n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n@@ -21,39 +21,39 @@ import edu.iu.harp.resource.ShortArray;\n import edu.iu.harp.schdynamic.Task;\n \n public class AvgDistCalcTask\n-  implements Task<RowData, DoubleArray> {\n+    implements Task<RowData, DoubleArray> {\n \n-  @Override\n-  public DoubleArray run(RowData rowData)\n-    throws Exception {\n-    ShortArray distArray = rowData.distArray;\n-    DoubleArray weightArray = rowData.weightArray;\n-    double average = 0;\n-    double avgSquare = 0;\n-    double maxDelta = 0;\n-    short[] distShorts = distArray.get();\n-    double[] weightDoubles = weightArray.get();\n-    // These two arrays should both start at 0\n-    // and have the same length.\n-    double distDouble = 0;\n-    int len = distArray.size();\n-    for (int i = 0; i < len; i++) {\n-      if (weightDoubles[i] != 0) {\n-        distDouble = (double) distShorts[i]\n-          / (double) Short.MAX_VALUE;\n-        average += distDouble;\n-        avgSquare += (distDouble * distDouble);\n-        if (maxDelta < distDouble) {\n-          maxDelta = distDouble;\n+    @Override\n+    public DoubleArray run(RowData rowData)\n+        throws Exception {\n+        ShortArray distArray = rowData.distArray;\n+        DoubleArray weightArray = rowData.weightArray;\n+        double average = 0;\n+        double avgSquare = 0;\n+        double maxDelta = 0;\n+        short[] distShorts = distArray.get();\n+        double[] weightDoubles = weightArray.get();\n+        // These two arrays should both start at 0\n+        // and have the same length.\n+        double distDouble = 0;\n+        int len = distArray.size();\n+        for (int i = 0; i < len; i++) {\n+            if (weightDoubles[i] != 0) {\n+                distDouble = (double) distShorts[i]\n+                    / (double) Short.MAX_VALUE;\n+                average += distDouble;\n+                avgSquare += (distDouble * distDouble);\n+                if (maxDelta < distDouble) {\n+                    maxDelta = distDouble;\n+                }\n+            }\n         }\n-      }\n+        // Get double[3];\n+        DoubleArray vals =\n+            DoubleArray.create(3, false);\n+        vals.get()[0] = average;\n+        vals.get()[1] = avgSquare;\n+        vals.get()[2] = maxDelta;\n+        return vals;\n     }\n-    // Get double[3];\n-    DoubleArray vals =\n-      DoubleArray.create(3, false);\n-    vals.get()[0] = average;\n-    vals.get()[1] = avgSquare;\n-    vals.get()[2] = maxDelta;\n-    return vals;\n-  }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/14/AvgDistCalcTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/naturalize/14/AvgDistCalcTask.java\nindex a3aad368411..841aa0b0452 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/14/AvgDistCalcTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/naturalize/14/AvgDistCalcTask.java\n@@ -39,9 +39,8 @@ public class AvgDistCalcTask\n     int len = distArray.size();\n     for (int i = 0; i < len; i++) {\n       if (weightDoubles[i] != 0) {\n-        distDouble = (double) distShorts[i]\n-          / (double) Short.MAX_VALUE;\n-        average += distDouble;\n+        distDouble = (double) distShorts[i] / (double) Short.MAX_VALUE;\n+average += distDouble;\n         avgSquare += (distDouble * distDouble);\n         if (maxDelta < distDouble) {\n           maxDelta = distDouble;\n@@ -56,4 +55,4 @@ public class AvgDistCalcTask\n     vals.get()[2] = maxDelta;\n     return vals;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/14/AvgDistCalcTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/codebuff/14/AvgDistCalcTask.java\nindex a3aad368411..e5dff1f1888 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/errored/1/14/AvgDistCalcTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DSC-SPIDAL-harp/codebuff/14/AvgDistCalcTask.java\n@@ -20,8 +20,8 @@ import edu.iu.harp.resource.DoubleArray;\n import edu.iu.harp.resource.ShortArray;\n import edu.iu.harp.schdynamic.Task;\n \n-public class AvgDistCalcTask\n-  implements Task<RowData, DoubleArray> {\n+\n+public class AvgDistCalcTask implements Task<RowData, DoubleArray> {\n \n   @Override\n   public DoubleArray run(RowData rowData)\n@@ -39,8 +39,7 @@ public class AvgDistCalcTask\n     int len = distArray.size();\n     for (int i = 0; i < len; i++) {\n       if (weightDoubles[i] != 0) {\n-        distDouble = (double) distShorts[i]\n-          / (double) Short.MAX_VALUE;\n+        distDouble = (double) distShorts[i] / (double) Short.MAX_VALUE;\n         average += distDouble;\n         avgSquare += (distDouble * distDouble);\n         if (maxDelta < distDouble) {\n@@ -49,11 +48,10 @@ public class AvgDistCalcTask\n       }\n     }\n     // Get double[3];\n-    DoubleArray vals =\n-      DoubleArray.create(3, false);\n+    DoubleArray vals = DoubleArray.create(3, false);\n     vals.get()[0] = average;\n     vals.get()[1] = avgSquare;\n     vals.get()[2] = maxDelta;\n     return vals;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "3",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}