{
    "project_name": "neo4j-neo4j",
    "error_id": "2362",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "55",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2362/SchemaRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2362/SchemaRule.java\nindex 8f2f1d565fe..c8add182986 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2362/SchemaRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2362/SchemaRule.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.schema;\n \n import java.util.Optional;\n@@ -28,82 +29,81 @@ import org.neo4j.hashing.HashFunction;\n  */\n public interface SchemaRule extends SchemaDescriptorSupplier\n {\n-    @SuppressWarnings( \"OptionalUsedAsFieldOrParameterType\" )\n-    static String sanitiseName( Optional<String> name )\n+    @SuppressWarnings(\"OptionalUsedAsFieldOrParameterType\")\n+    static String sanitiseName(Optional<String> name)\n     {\n-        if ( name.isPresent() )\n+        if (name.isPresent())\n         {\n-            return sanitiseName( name.get() );\n+            return sanitiseName(name.get());\n         }\n-        throw new IllegalArgumentException( \"Schema rules must have names.\" );\n+        throw new IllegalArgumentException(\"Schema rules must have names.\");\n     }\n \n-    static String sanitiseName( String name )\n+    static String sanitiseName(String name)\n     {\n-        if ( name == null )\n+        if (name == null)\n         {\n-            throw new IllegalArgumentException( \"Schema rule name cannot be null.\" );\n+            throw new IllegalArgumentException(\"Schema rule name cannot be null.\");\n         }\n         name = name.trim();\n-        if ( name.isEmpty() || name.isBlank() )\n+        if (name.isEmpty() || name.isBlank())\n         {\n-            throw new IllegalArgumentException( \"Schema rule name cannot be the empty string or only contain whitespace.\" );\n-        }\n-        else\n+            throw new IllegalArgumentException(\"Schema rule name cannot be the empty string or only contain whitespace.\");\n+        } else\n         {\n             int length = name.length();\n-            for ( int i = 0; i < length; i++ )\n+            for (int i = 0; i < length; i++)\n             {\n-                char ch = name.charAt( i );\n-                if ( ch == '\\0' )\n+                char ch = name.charAt(i);\n+                if (ch == '\\0')\n                 {\n-                    throw new IllegalArgumentException( \"Schema rule names are not allowed to contain null-bytes: '\" + name + \"'.\" );\n+                    throw new IllegalArgumentException(\"Schema rule names are not allowed to contain null-bytes: '\" + name + \"'.\");\n                 }\n             }\n         }\n-        if ( ReservedSchemaRuleNames.contains( name ) )\n+        if (ReservedSchemaRuleNames.contains(name))\n         {\n-            throw new IllegalArgumentException( \"The index name '\" + name + \"' is reserved, and cannot be used. \" +\n-                    \"The reserved names are \" + ReservedSchemaRuleNames.getReservedNames() + \".\" );\n+            throw new IllegalArgumentException(\"The index name '\" + name + \"' is reserved, and cannot be used. \" +\n+              \"The reserved names are \" + ReservedSchemaRuleNames.getReservedNames() + \".\");\n         }\n         return name;\n     }\n \n     /**\n      * Generate a <em>deterministic</em> name for the given {@link SchemaDescriptorSupplier}.\n-     *\n+     * <p>\n      * Only {@link SchemaRule} implementations, and {@link IndexPrototype}, are supported arguments for the schema descriptor supplier.\n      *\n-     * @param rule The {@link SchemaDescriptorSupplier} to generate a name for.\n+     * @param rule             The {@link SchemaDescriptorSupplier} to generate a name for.\n      * @param entityTokenNames The resolved names of the schema entity tokens, that is, label names or relationship type names.\n-     * @param propertyNames The resolved property key names.\n+     * @param propertyNames    The resolved property key names.\n      * @return A name.\n      */\n-    static String generateName( SchemaDescriptorSupplier rule, String[] entityTokenNames, String[] propertyNames )\n+    static String generateName(SchemaDescriptorSupplier rule, String[] entityTokenNames, String[] propertyNames)\n     {\n         // NOTE to future maintainers: You probably want to avoid touching this function.\n         // Last time this was changed, we had some 400+ tests to update.\n         HashFunction hf = HashFunction.incrementalXXH64();\n-        long key = hf.initialise( Boolean.hashCode( rule instanceof ConstraintDescriptor ) );\n-        key = hf.update( key, rule.schema().entityType().ordinal() );\n-        key = hf.update( key, rule.schema().propertySchemaType().ordinal() );\n-        key = hf.updateWithArray( key, entityTokenNames, String::hashCode );\n-        key = hf.updateWithArray( key, propertyNames, String::hashCode );\n+        long key = hf.initialise(Boolean.hashCode(rule instanceof ConstraintDescriptor));\n+        key = hf.update(key, rule.schema().entityType().ordinal());\n+        key = hf.update(key, rule.schema().propertySchemaType().ordinal());\n+        key = hf.updateWithArray(key, entityTokenNames, String::hashCode);\n+        key = hf.updateWithArray(key, propertyNames, String::hashCode);\n \n-        if ( rule instanceof IndexRef<?> )\n+        if (rule instanceof IndexRef<?>)\n         {\n             IndexRef<?> indexRef = (IndexRef<?>) rule;\n-            key = hf.update( key, indexRef.getIndexType().ordinal() );\n-            key = hf.update( key, Boolean.hashCode( indexRef.isUnique() ) );\n-            return String.format( \"index_%x\", hf.toInt( hf.finalise( key ) ) );\n+            key = hf.update(key, indexRef.getIndexType().ordinal());\n+            key = hf.update(key, Boolean.hashCode(indexRef.isUnique()));\n+            return String.format(\"index_%x\", hf.toInt(hf.finalise(key)));\n         }\n-        if ( rule instanceof ConstraintDescriptor )\n+        if (rule instanceof ConstraintDescriptor)\n         {\n             ConstraintDescriptor constraint = (ConstraintDescriptor) rule;\n-            key = hf.update( key, constraint.type().ordinal() );\n-            return String.format( \"constraint_%x\", hf.toInt( hf.finalise( key ) ) );\n+            key = hf.update(key, constraint.type().ordinal());\n+            return String.format(\"constraint_%x\", hf.toInt(hf.finalise(key)));\n         }\n-        throw new IllegalArgumentException( \"Don't know how to generate a name for this SchemaDescriptorSupplier implementation: \" + rule + \".\" );\n+        throw new IllegalArgumentException(\"Don't know how to generate a name for this SchemaDescriptorSupplier implementation: \" + rule + \".\");\n     }\n \n     /**\n@@ -119,9 +119,10 @@ public interface SchemaRule extends SchemaDescriptorSupplier\n     /**\n      * Produce a copy of this schema rule, that has the given name.\n      * If the given name is {@code null}, then this schema rule is returned unchanged.\n+     *\n      * @param name The name of the new schema rule.\n      * @return a modified copy of this schema rule.\n      * @throws IllegalArgumentException if the given name is not {@code null}, and it fails the sanitise check.\n      */\n-    SchemaRule withName( String name );\n+    SchemaRule withName(String name);\n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}