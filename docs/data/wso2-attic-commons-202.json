{
    "project_name": "wso2-attic-commons",
    "error_id": "202",
    "information": {
        "errors": [
            {
                "line": "70",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 157).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    public static void main(String[] args) throws Exception {\n\n        String targetEPR = getProperty(\"opt_url\", \"http://\" + PropertyLoader.HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n        String fileName = getProperty(\"opt_file\", \"./../../repository/conf/sample/resources/mtom/asf-logo.gif\");\n        String mode = getProperty(\"opt_mode\", \"mtom\");\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/202/MTOMSwAClient.java\nindex 4e96e18a098..0f5908bda7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/202/MTOMSwAClient.java\n@@ -67,7 +67,8 @@ public class MTOMSwAClient {\n \n     public static void main(String[] args) throws Exception {\n \n-        String targetEPR = getProperty(\"opt_url\", \"http://\" + PropertyLoader.HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n+        String targetEPR = getProperty(\"opt_url\", \"http://\" + PropertyLoader.\n+                HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n         String fileName = getProperty(\"opt_file\", \"./../../repository/conf/sample/resources/mtom/asf-logo.gif\");\n         String mode = getProperty(\"opt_mode\", \"mtom\");\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/202/MTOMSwAClient.java\nindex 4e96e18a098..a2c1e77750f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/202/MTOMSwAClient.java\n@@ -42,149 +42,156 @@ import java.io.*;\n \n public class MTOMSwAClient {\n \n-    private static final int BUFFER = 2048;\n-\n-    private static String getProperty(String name, String def) {\n-        String result = System.getProperty(name);\n-        if (result == null || result.length() == 0) {\n-            result = def;\n-        }\n-        return result;\n-    }\n+  private static final int BUFFER = 2048;\n \n-    private static ServiceClient createServiceClient() throws AxisFault {\n-        String repo = getProperty(\"repository\", \"client_repo\");\n-        if (repo != null && !\"null\".equals(repo)) {\n-            ConfigurationContext configContext =\n-                    ConfigurationContextFactory.\n-                            createConfigurationContextFromFileSystem(repo,\n-                                    repo + File.separator + \"conf\" + File.separator + \"axis2.xml\");\n-            return new ServiceClient(configContext, null);\n-        } else {\n-            return new ServiceClient();\n-        }\n+  private static String getProperty(String name, String def) {\n+    String result = System.getProperty(name);\n+    if (result == null || result.length() == 0) {\n+      result = def;\n     }\n+    return result;\n+  }\n+\n+  private static ServiceClient createServiceClient() throws AxisFault {\n+    String repo = getProperty(\"repository\", \"client_repo\");\n+    if (repo != null && !\"null\".equals(repo)) {\n+      ConfigurationContext configContext =\n+        ConfigurationContextFactory.\n+          createConfigurationContextFromFileSystem(repo,\n+            repo + File.separator + \"conf\" + File.separator + \"axis2.xml\");\n+      return new ServiceClient(configContext, null);\n+    } else {\n+      return new ServiceClient();\n+    }\n+  }\n \n-    public static void main(String[] args) throws Exception {\n-\n-        String targetEPR = getProperty(\"opt_url\", \"http://\" + PropertyLoader.HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n-        String fileName = getProperty(\"opt_file\", \"./../../repository/conf/sample/resources/mtom/asf-logo.gif\");\n-        String mode = getProperty(\"opt_mode\", \"mtom\");\n-\n-        if (args.length > 0) mode = args[0];\n-        if (args.length > 1) targetEPR = args[1];\n-        if (args.length > 2) fileName = args[2];\n+  public static void main(String[] args) throws Exception {\n \n-        if (\"mtom\".equals(mode)) {\n-            sendUsingMTOM(fileName, targetEPR);\n-        } else if (\"swa\".equals(mode)) {\n-            sendUsingSwA(fileName, targetEPR);\n-        }\n+    String targetEPR = getProperty(\"opt_url\",\n+      \"http://\" + PropertyLoader.HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n+    String fileName = getProperty(\"opt_file\", \"./../../repository/conf/sample/resources/mtom/asf-logo.gif\");\n+    String mode = getProperty(\"opt_mode\", \"mtom\");\n \n-        // let the server read the stream before exit\n-        Thread.sleep(1000);\n-        System.exit(0);\n+    if (args.length > 0) {\n+      mode = args[0];\n+    }\n+    if (args.length > 1) {\n+      targetEPR = args[1];\n+    }\n+    if (args.length > 2) {\n+      fileName = args[2];\n     }\n \n-    public static MessageContext sendUsingSwA(String fileName, String targetEPR) throws IOException {\n-\n-        Options options = new Options();\n-        options.setTo(new EndpointReference(targetEPR));\n-        options.setAction(\"urn:uploadFileUsingSwA\");\n-        options.setProperty(Constants.Configuration.ENABLE_SWA, Constants.VALUE_TRUE);\n-\n-        ServiceClient sender = createServiceClient();\n-        sender.setOptions(options);\n-        OperationClient mepClient = sender.createClient(ServiceClient.ANON_OUT_IN_OP);\n-\n-        MessageContext mc = new MessageContext();\n-\n-        System.out.println(\"Sending file : \" + fileName + \" as SwA\");\n-        FileDataSource fileDataSource = new FileDataSource(new File(fileName));\n-        DataHandler dataHandler = new DataHandler(fileDataSource);\n-        String attachmentID = mc.addAttachment(dataHandler);\n-\n-\n-        SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();\n-        SOAPEnvelope env = factory.getDefaultEnvelope();\n-        OMNamespace ns = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n-        OMElement payload = factory.createOMElement(\"uploadFileUsingSwA\", ns);\n-        OMElement request = factory.createOMElement(\"request\", ns);\n-        OMElement imageId = factory.createOMElement(\"imageId\", ns);\n-        imageId.setText(attachmentID);\n-        request.addChild(imageId);\n-        payload.addChild(request);\n-        env.getBody().addChild(payload);\n-        mc.setEnvelope(env);\n-\n-        mepClient.addMessageContext(mc);\n-        mepClient.execute(true);\n-        MessageContext response = mepClient.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n-\n-        SOAPBody body = response.getEnvelope().getBody();\n-        String imageContentId = body.\n-                getFirstChildWithName(new QName(\"http://services.samples\", \"uploadFileUsingSwAResponse\")).\n-                getFirstChildWithName(new QName(\"http://services.samples\", \"response\")).\n-                getFirstChildWithName(new QName(\"http://services.samples\", \"imageId\")).\n-                getText();\n-\n-        Attachments attachment = response.getAttachmentMap();\n-        dataHandler = attachment.getDataHandler(imageContentId);\n-        File tempFile = File.createTempFile(\"swa-\", \".gif\");\n-        FileOutputStream fos = new FileOutputStream(tempFile);\n-        dataHandler.writeTo(fos);\n-        fos.flush();\n-        fos.close();\n-\n-        System.out.println(\"Saved response to file : \" + tempFile.getAbsolutePath());\n-\n-        return response;\n+    if (\"mtom\".equals(mode)) {\n+      sendUsingMTOM(fileName, targetEPR);\n+    } else if (\"swa\".equals(mode)) {\n+      sendUsingSwA(fileName, targetEPR);\n     }\n \n-    public static OMElement sendUsingMTOM(String fileName, String targetEPR) throws IOException {\n-        OMFactory factory = OMAbstractFactory.getOMFactory();\n-        OMNamespace ns = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n-        OMElement payload = factory.createOMElement(\"uploadFileUsingMTOM\", ns);\n-        OMElement request = factory.createOMElement(\"request\", ns);\n-        OMElement image = factory.createOMElement(\"image\", ns);\n-\n-        System.out.println(\"Sending file : \" + fileName + \" as MTOM\");\n-        FileDataSource fileDataSource = new FileDataSource(new File(fileName));\n-        DataHandler dataHandler = new DataHandler(fileDataSource);\n-        OMText textData = factory.createOMText(dataHandler, true);\n-        image.addChild(textData);\n-        request.addChild(image);\n-        payload.addChild(request);\n-\n-        ServiceClient serviceClient = createServiceClient();\n-        Options options = new Options();\n-        options.setTo(new EndpointReference(targetEPR));\n-        options.setAction(\"urn:uploadFileUsingMTOM\");\n-        options.setProperty(Constants.Configuration.ENABLE_MTOM, Constants.VALUE_TRUE);\n-\n-        serviceClient.setOptions(options);\n-        OMElement response = serviceClient.sendReceive(payload);\n-\n-        OMText binaryNode = (OMText) response.\n-                getFirstChildWithName(new QName(\"http://services.samples\", \"response\")).\n-                getFirstChildWithName(new QName(\"http://services.samples\", \"image\")).\n-                getFirstOMChild();\n-        dataHandler = (DataHandler) binaryNode.getDataHandler();\n-        InputStream is = dataHandler.getInputStream();\n-\n-        File tempFile = File.createTempFile(\"mtom-\", \".gif\");\n-        FileOutputStream fos = new FileOutputStream(tempFile);\n-        BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n-\n-        byte data[] = new byte[BUFFER];\n-        int count;\n-        while ((count = is.read(data, 0, BUFFER)) != -1) {\n-            dest.write(data, 0, count);\n-        }\n-\n-        dest.flush();\n-        dest.close();\n-        System.out.println(\"Saved response to file : \" + tempFile.getAbsolutePath());\n-        return response;\n+    // let the server read the stream before exit\n+    Thread.sleep(1000);\n+    System.exit(0);\n+  }\n+\n+  public static MessageContext sendUsingSwA(String fileName, String targetEPR) throws IOException {\n+\n+    Options options = new Options();\n+    options.setTo(new EndpointReference(targetEPR));\n+    options.setAction(\"urn:uploadFileUsingSwA\");\n+    options.setProperty(Constants.Configuration.ENABLE_SWA, Constants.VALUE_TRUE);\n+\n+    ServiceClient sender = createServiceClient();\n+    sender.setOptions(options);\n+    OperationClient mepClient = sender.createClient(ServiceClient.ANON_OUT_IN_OP);\n+\n+    MessageContext mc = new MessageContext();\n+\n+    System.out.println(\"Sending file : \" + fileName + \" as SwA\");\n+    FileDataSource fileDataSource = new FileDataSource(new File(fileName));\n+    DataHandler dataHandler = new DataHandler(fileDataSource);\n+    String attachmentID = mc.addAttachment(dataHandler);\n+\n+\n+    SOAPFactory factory = OMAbstractFactory.getSOAP11Factory();\n+    SOAPEnvelope env = factory.getDefaultEnvelope();\n+    OMNamespace ns = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n+    OMElement payload = factory.createOMElement(\"uploadFileUsingSwA\", ns);\n+    OMElement request = factory.createOMElement(\"request\", ns);\n+    OMElement imageId = factory.createOMElement(\"imageId\", ns);\n+    imageId.setText(attachmentID);\n+    request.addChild(imageId);\n+    payload.addChild(request);\n+    env.getBody().addChild(payload);\n+    mc.setEnvelope(env);\n+\n+    mepClient.addMessageContext(mc);\n+    mepClient.execute(true);\n+    MessageContext response = mepClient.getMessageContext(WSDLConstants.MESSAGE_LABEL_IN_VALUE);\n+\n+    SOAPBody body = response.getEnvelope().getBody();\n+    String imageContentId = body.\n+      getFirstChildWithName(new QName(\"http://services.samples\", \"uploadFileUsingSwAResponse\")).\n+      getFirstChildWithName(new QName(\"http://services.samples\", \"response\")).\n+      getFirstChildWithName(new QName(\"http://services.samples\", \"imageId\")).\n+      getText();\n+\n+    Attachments attachment = response.getAttachmentMap();\n+    dataHandler = attachment.getDataHandler(imageContentId);\n+    File tempFile = File.createTempFile(\"swa-\", \".gif\");\n+    FileOutputStream fos = new FileOutputStream(tempFile);\n+    dataHandler.writeTo(fos);\n+    fos.flush();\n+    fos.close();\n+\n+    System.out.println(\"Saved response to file : \" + tempFile.getAbsolutePath());\n+\n+    return response;\n+  }\n+\n+  public static OMElement sendUsingMTOM(String fileName, String targetEPR) throws IOException {\n+    OMFactory factory = OMAbstractFactory.getOMFactory();\n+    OMNamespace ns = factory.createOMNamespace(\"http://services.samples\", \"m0\");\n+    OMElement payload = factory.createOMElement(\"uploadFileUsingMTOM\", ns);\n+    OMElement request = factory.createOMElement(\"request\", ns);\n+    OMElement image = factory.createOMElement(\"image\", ns);\n+\n+    System.out.println(\"Sending file : \" + fileName + \" as MTOM\");\n+    FileDataSource fileDataSource = new FileDataSource(new File(fileName));\n+    DataHandler dataHandler = new DataHandler(fileDataSource);\n+    OMText textData = factory.createOMText(dataHandler, true);\n+    image.addChild(textData);\n+    request.addChild(image);\n+    payload.addChild(request);\n+\n+    ServiceClient serviceClient = createServiceClient();\n+    Options options = new Options();\n+    options.setTo(new EndpointReference(targetEPR));\n+    options.setAction(\"urn:uploadFileUsingMTOM\");\n+    options.setProperty(Constants.Configuration.ENABLE_MTOM, Constants.VALUE_TRUE);\n+\n+    serviceClient.setOptions(options);\n+    OMElement response = serviceClient.sendReceive(payload);\n+\n+    OMText binaryNode = (OMText) response.\n+      getFirstChildWithName(new QName(\"http://services.samples\", \"response\")).\n+      getFirstChildWithName(new QName(\"http://services.samples\", \"image\")).\n+      getFirstOMChild();\n+    dataHandler = (DataHandler) binaryNode.getDataHandler();\n+    InputStream is = dataHandler.getInputStream();\n+\n+    File tempFile = File.createTempFile(\"mtom-\", \".gif\");\n+    FileOutputStream fos = new FileOutputStream(tempFile);\n+    BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n+\n+    byte data[] = new byte[BUFFER];\n+    int count;\n+    while ((count = is.read(data, 0, BUFFER)) != -1) {\n+      dest.write(data, 0, count);\n     }\n+\n+    dest.flush();\n+    dest.close();\n+    System.out.println(\"Saved response to file : \" + tempFile.getAbsolutePath());\n+    return response;\n+  }\n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/202/MTOMSwAClient.java\nindex 4e96e18a098..04d7e3c87c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/202/MTOMSwAClient.java\n@@ -59,7 +59,7 @@ public class MTOMSwAClient {\n                     ConfigurationContextFactory.\n                             createConfigurationContextFromFileSystem(repo,\n                                     repo + File.separator + \"conf\" + File.separator + \"axis2.xml\");\n-            return new ServiceClient(configContext, null);\n+return new ServiceClient(configContext, null);\n         } else {\n             return new ServiceClient();\n         }\n@@ -187,4 +187,4 @@ public class MTOMSwAClient {\n         System.out.println(\"Saved response to file : \" + tempFile.getAbsolutePath());\n         return response;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/202/MTOMSwAClient.java\nindex 4e96e18a098..0f5908bda7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/202/MTOMSwAClient.java\n@@ -67,7 +67,8 @@ public class MTOMSwAClient {\n \n     public static void main(String[] args) throws Exception {\n \n-        String targetEPR = getProperty(\"opt_url\", \"http://\" + PropertyLoader.HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n+        String targetEPR = getProperty(\"opt_url\", \"http://\" + PropertyLoader.\n+                HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n         String fileName = getProperty(\"opt_file\", \"./../../repository/conf/sample/resources/mtom/asf-logo.gif\");\n         String mode = getProperty(\"opt_mode\", \"mtom\");\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/202/MTOMSwAClient.java\nindex 4e96e18a098..ca77d0e809f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/202/MTOMSwAClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/202/MTOMSwAClient.java\n@@ -66,9 +66,9 @@ public class MTOMSwAClient {\n     }\n \n     public static void main(String[] args) throws Exception {\n-\n-        String targetEPR = getProperty(\"opt_url\", \"http://\" + PropertyLoader.HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n-        String fileName = getProperty(\"opt_file\", \"./../../repository/conf/sample/resources/mtom/asf-logo.gif\");\n+      String targetEPR = getProperty(\"opt_url\",\n+            \"http://\" + PropertyLoader.HOST_NAME + \":\" + PropertyLoader.NHTTP_PORT + \"/services/MTOMSwASampleService\");\n+         String fileName = getProperty(\"opt_file\", \"./../../repository/conf/sample/resources/mtom/asf-logo.gif\");\n         String mode = getProperty(\"opt_mode\", \"mtom\");\n \n         if (args.length > 0) mode = args[0];\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}