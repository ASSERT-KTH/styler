{
    "project_name": "CESNET-perun",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "483",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t */\n\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n        \n        /**\n\t * Returns list of users who exactly matches the searchString\n\t *",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/21/UsersManagerImplApi.java\nindex 41b3aeb61a8..e06a5d9ba42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/21/UsersManagerImplApi.java\n@@ -480,8 +480,8 @@ public interface UsersManagerImplApi {\n \t * @throws InternalErrorException\n \t */\n \tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n-        /**\n+\n+/**\n \t * Returns list of users who exactly matches the searchString\n \t *\n \t * @param sess\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/21/UsersManagerImplApi.java\nindex 41b3aeb61a8..62f053e7158 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/21/UsersManagerImplApi.java\n@@ -32,667 +32,658 @@ import cz.metacentrum.perun.core.implApi.modules.pwdmgr.PasswordManagerModule;\n  * @author Sona Mastrakova\n  */\n public interface UsersManagerImplApi {\n-\t/**\n-\t * Returns user by his login in external source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return user by its userExtSource or throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tUser getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all the users who have given type of the ExtSource and login.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param extSourceType type of the user extSource\n-\t * @param login login of the user\n-\t * @return all users with given parameters\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns user by its id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return user\n-\t * @throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @return list of specificUsers who are owned by the user\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all users who owns the specificUser and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param specificUser the specific User\n-\t * @return list of user who owns the specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove specificUser owner (the user)\n-\t * Only disable ownership of user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t * @throws cz.metacentrum.perun.core.api.exceptions.SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException;\n-\n-\t/**\n-\t * Add specificUser owner (the user).\n-\t * If not exists, create new ownership.\n-\t * If exists, only enable ownership for user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Set ownership for user and specificUser to ENABLE (0).\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Set ownership for user and specificUser to DISABLE (1).\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Return true if ownership between user and specificUser already exists.\n-\t * Return false if not.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @return true if ownership exists, false if not\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all specific Users (only specific users)\n-\t * Return also users who has no owners.\n-\t *\n-\t * @param sess\n-\t * @return list of all specific users in perun\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns user by VO member.\n-\t *\n-\t * @param perunSession\n-\t * @param member\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Return users which have member in VO.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users (included specific users).\n-\t *\n-\t * @param sess\n-\t * @return list of all users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t *  Creates the user, stores it in the DB. This method will fill user.id property.\n-\t *\n-\t * @param perunSession\n-\t * @param user user bean with filled properties\n-\t * @return user with user.id filled\n-\t * @throws InternalErrorException\n-\t */\n-\tUser createUser(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\n-\t/**\n-\t *  Deletes user (normal or specific) including all relations to other users (normal,specific,sponsor)\n-\t *\n-\t * @param perunSession Session for authz\n-\t * @param user User to delete\n-\t * @throws InternalErrorException\n-\t * @throws UserAlreadyRemovedException  When user is already deleted\n-\t * @throws SpecificUserAlreadyRemovedException When specific user is already deleted\n-\t */\n-\tvoid deleteUser(PerunSession perunSession, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException;\n-\n-\t/**\n-\t *  Updates users data in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser updateUser(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t *  Updates titles before/after users name.\n-\t *  New titles must be set inside User object.\n-\t *  Setting any title to null will remove title from name.\n-\t *  Other user's properties are ignored.\n-\t *\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user with new titles before/after name\n-\t * @throws InternalErrorException\n-\t */\n-\tUser updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t *  Updates user;s userExtSource in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated user\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t *  Updates user's userExtSource last access time in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated userExtSource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all user external sources ids of the user.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of user's external sources ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Integer> getUserExtSourcesIds(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all users external sources by specific type and extLogin.\n-\t *\n-\t * @param sess\n-\t * @param extType - type of extSource (ex. 'IDP')\n-\t * @param extLogin - extLogin of userExtSource\n-\t *\n-\t * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all users userExtSources with last_access not older than (now - m),\n-\t * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n-\t *\n-\t * @param sess\n-\t * @param user user to get extSources for\n-\t *\n-\t * @return list of active user extSources (not older than now - m)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get the user ext source by its id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return user external source for the id\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tUserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Get list of user ext sources be their ids.\n-\t *\n-\t * @param sess\n-\t * @param ids\n-\t * @return list of user external sources for ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n-\n-\t/**\n-\t * Adds user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @return\tuser external source with userExtSource.id filled\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n-\n-\t/**\n-\t *  Removes all user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets user's external source by the user's external login and external source.\n-\t *\n-\t * @param perunSession\n-\t * @param source\n-\t * @param extLogin\n-\t * @return user external source object\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tUserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Return true if login in specified namespace is already reserved, false if not.\n-\t *\n-\t * @param sess\n-\t * @param namespace namespace for login\n-\t * @param login login to check\n-\t * @return true if login exist, false if not exist\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if login in specified namespace exists.\n-\t *\n-\t * @param sess\n-\t * @param namespace namespace for login\n-\t * @param login login to check\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n-\t */\n-\tvoid checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n-\n-\t/**\n-\t * Check if user exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param user user to check\n-\t * @return true if user exists in underlaying data source, false otherwise\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean userExists(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if user exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tvoid checkUserExists(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Check if userExtSource exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource userExtSource to check\n-\t * @return true if userExtSource exists in underlaying data source, false otherwise\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean userExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if userExtSource exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tvoid checkUserExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Returns list of VOs, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of VOs, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of Groups, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of Groups, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of Vos' ids, where the user is member.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of Vos, where the user is member\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString, searching name, email and logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString, searching name, email and logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the fields.\n-\t *\n-\t * @param sess\n-\t * @param titleBefore\n-\t * @param firstName\n-\t * @param middleName\n-\t * @param lastName\n-\t * @param titleAfter\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n-        /**\n-\t * Returns list of users who exactly matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefintion\n-\t * @param attributeValue\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefintion, String attributeValue) throws InternalErrorException;\n-\n-\t/**\n-\t * Batch method which returns users by theirs ids.\n-\t *\n-\t * @param sess\n-\t * @param usersIds\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who are not member of any VO.\n-\t *\n-\t * @param sess\n-\t * @return list of users who are not member of any VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is PERUNADMIN.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return true if the user is PERUNADMIN, false otherwise.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes all authorships of user when user is deleted from DB\n-\t * (author records on all his publications).\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @throws InternalErrorException thrown when runtime exception\n-\t */\n-\tvoid removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return list of all reserved logins for specific user\n-\t * (pair is namespace and login)\n-\t *\n-\t * @param user for which get reserved logins\n-\t * @return list of pairs namespace and login\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Delete all reserved logins for specific user\n-\t * (pair is namespace and login)\n-\t *\n-\t * @param user for which get delete reserved logins\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic void deleteUsersReservedLogins(User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get All RichUsers without UserExtSources and without virtual attributes.\n-\t *\n-\t * @param sess\n-\t * @return list of richUsers\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Pair<User, Attribute>> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Store request of change of user's preferred email address.\n-\t * Change in attribute value is not done, until email\n-\t * address is verified by link in email notice.\n-\t * (urn:perun:user:attribute-def:def:preferredEmail)\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param email\n-\t * @throws InternalErrorException\n-\t * @return ID of change request\n-\t */\n-\tint requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException;\n-\n-\t/**\n-\t * Get new preferred email value from user's original request\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to get new email address for\n-\t * @param i decrypted parameter\n-\t * @param m encrypted parameter\n-\t * @throws InternalErrorException\n-\t * @return String return new preferred email\n-\t */\n-\tString getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes all mail change requests related to user.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to remove preferred email change requests for\n-\t *\n-\t * @throws InternalErrorException if any exception in DB occur\n-\t */\n-\tvoid removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return list of email addresses of user, which are\n-\t * awaiting validation and are inside time window\n-\t * for validation.\n-\t *\n-\t * If there is no preferred email change request pending\n-\t * or requests are outside time window for validation,\n-\t * returns empty list.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to check pending request for\n-\t *\n-\t * @throws InternalErrorException\n-\t *\n-\t * @return List<String> user's email addresses pending validation\n-\t */\n-\tList<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return only valid password reset requests for selected user and request ID.\n-\t * Validity is determined by time since request creation and actual usage (only once).\n-\t *\n-\t * If no valid entry is found, then empty string is returned. Entry is invalidated once loaded.\n-\t *\n-\t * @param user user to get requests for\n-\t * @param request request ID to get\n-\t * @return namespace where user wants to reset password in or empty string\n-\t * @throws InternalErrorException\n-\t */\n-\tString loadPasswordResetRequest(User user, int request) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes all password reset requests associated with user.\n-\t * This is used when deleting user from Perun.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to remove all pwdreset requests\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get count of all users.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all users\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getUsersCount(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Generate user account in a backend system associated with login-namespace in Perun.\n-\t *\n-\t * This method consumes optional parameters map. Requirements are implementation-dependant\n-\t * for each login-namespace.\n-\t *\n-\t * Returns map with\n-\t * 1: key=login-namespace attribute urn, value=generated login\n-\t * 2: rest of opt response attributes...\n-\t *\n-\t * @param session\n-\t * @param namespace Namespace to generate account in\n-\t * @param parameters Optional parameters\n-\t * @return Map of data from backed response\n-\t * @throws InternalErrorException\n-\t */\n-\tMap<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n-\n-\t/**\n-\t * Return instance of PasswordManagerModule for specified namespace or throw exception.\n-\t *\n-\t * @param session\n-\t * @param namespace Namespace to get PWDMGR module.\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException;\n+    /**\n+     * Returns user by his login in external source.\n+     *\n+     * @param perunSession\n+     * @param userExtSource\n+     * @return user by its userExtSource or throws UserNotExistsException\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    User getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Get all the users who have given type of the ExtSource and login.\n+     *\n+     * @param perunSession  perun session\n+     * @param extSourceType type of the user extSource\n+     * @param login         login of the user\n+     * @return all users with given parameters\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n+\n+    /**\n+     * Returns user by its id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return user\n+     * @throws UserNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    User getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n+     *\n+     * @param sess\n+     * @param user the user\n+     * @return list of specificUsers who are owned by the user\n+     * @throws InternalErrorException\n+     */\n+    List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Return all users who owns the specificUser and their ownership is not in status disabled\n+     *\n+     * @param sess\n+     * @param specificUser the specific User\n+     * @return list of user who owns the specificUser\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n+\n+    /**\n+     * Remove specificUser owner (the user)\n+     * Only disable ownership of user and specificUser\n+     *\n+     * @param sess\n+     * @param user         the user\n+     * @param specificUser the specificUser\n+     * @throws InternalErrorException\n+     * @throws cz.metacentrum.perun.core.api.exceptions.SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+     */\n+    void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException;\n+\n+    /**\n+     * Add specificUser owner (the user).\n+     * If not exists, create new ownership.\n+     * If exists, only enable ownership for user and specificUser\n+     *\n+     * @param sess\n+     * @param user         the user\n+     * @param specificUser the specificUser\n+     * @throws InternalErrorException\n+     */\n+    void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+    /**\n+     * Set ownership for user and specificUser to ENABLE (0).\n+     *\n+     * @param sess\n+     * @param user\n+     * @param specificUser\n+     * @throws InternalErrorException\n+     */\n+    void enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+    /**\n+     * Set ownership for user and specificUser to DISABLE (1).\n+     *\n+     * @param sess\n+     * @param user\n+     * @param specificUser\n+     * @throws InternalErrorException\n+     */\n+    void disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+    /**\n+     * Return true if ownership between user and specificUser already exists.\n+     * Return false if not.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param specificUser\n+     * @return true if ownership exists, false if not\n+     * @throws InternalErrorException\n+     */\n+    boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+    /**\n+     * Return all specific Users (only specific users)\n+     * Return also users who has no owners.\n+     *\n+     * @param sess\n+     * @return list of all specific users in perun\n+     * @throws InternalErrorException\n+     */\n+    List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Returns user by VO member.\n+     *\n+     * @param perunSession\n+     * @param member\n+     * @return user\n+     * @throws InternalErrorException\n+     */\n+    User getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Return users which have member in VO.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users (included specific users).\n+     *\n+     * @param sess\n+     * @return list of all users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsers(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Creates the user, stores it in the DB. This method will fill user.id property.\n+     *\n+     * @param perunSession\n+     * @param user         user bean with filled properties\n+     * @return user with user.id filled\n+     * @throws InternalErrorException\n+     */\n+    User createUser(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+\n+    /**\n+     * Deletes user (normal or specific) including all relations to other users (normal,specific,sponsor)\n+     *\n+     * @param perunSession Session for authz\n+     * @param user         User to delete\n+     * @throws InternalErrorException\n+     * @throws UserAlreadyRemovedException         When user is already deleted\n+     * @throws SpecificUserAlreadyRemovedException When specific user is already deleted\n+     */\n+    void deleteUser(PerunSession perunSession, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException;\n+\n+    /**\n+     * Updates users data in DB.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return updated user\n+     * @throws InternalErrorException\n+     */\n+    User updateUser(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Updates titles before/after users name.\n+     * New titles must be set inside User object.\n+     * Setting any title to null will remove title from name.\n+     * Other user's properties are ignored.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return updated user with new titles before/after name\n+     * @throws InternalErrorException\n+     */\n+    User updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Updates user;s userExtSource in DB.\n+     *\n+     * @param perunSession\n+     * @param userExtSource\n+     * @return updated user\n+     * @throws InternalErrorException\n+     */\n+    UserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+    /**\n+     * Updates user's userExtSource last access time in DB.\n+     *\n+     * @param perunSession\n+     * @param userExtSource\n+     * @return updated userExtSource\n+     * @throws InternalErrorException\n+     */\n+    void updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+    /**\n+     * Gets list of all user external sources ids of the user.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return list of user's external sources ids\n+     * @throws InternalErrorException\n+     */\n+    List<Integer> getUserExtSourcesIds(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Gets list of all users external sources by specific type and extLogin.\n+     *\n+     * @param sess\n+     * @param extType  - type of extSource (ex. 'IDP')\n+     * @param extLogin - extLogin of userExtSource\n+     * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n+     * @throws InternalErrorException\n+     */\n+    List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n+\n+    /**\n+     * Get all users userExtSources with last_access not older than (now - m),\n+     * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n+     *\n+     * @param sess\n+     * @param user user to get extSources for\n+     * @return list of active user extSources (not older than now - m)\n+     * @throws InternalErrorException\n+     */\n+    List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get the user ext source by its id.\n+     *\n+     * @param sess\n+     * @param id\n+     * @return user external source for the id\n+     * @throws InternalErrorException\n+     * @throws UserExtSourceNotExistsException\n+     */\n+    UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+    /**\n+     * Get list of user ext sources be their ids.\n+     *\n+     * @param sess\n+     * @param ids\n+     * @return list of user external sources for ids\n+     * @throws InternalErrorException\n+     */\n+    List<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n+\n+    /**\n+     * Adds user's external sources.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @param userExtSource\n+     * @throws InternalErrorException\n+     * @return user external source with userExtSource.id filled\n+     */\n+    UserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException;\n+\n+    /**\n+     * Removes user's external sources.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @param userExtSource\n+     * @throws InternalErrorException\n+     * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+     */\n+    void removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n+\n+    /**\n+     * Removes all user's external sources.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @throws InternalErrorException\n+     */\n+    void removeAllUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Gets user's external source by the user's external login and external source.\n+     *\n+     * @param perunSession\n+     * @param source\n+     * @param extLogin\n+     * @return user external source object\n+     * @throws InternalErrorException\n+     * @throws UserExtSourceNotExistsException\n+     */\n+    UserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+    /**\n+     * Return true if login in specified namespace is already reserved, false if not.\n+     *\n+     * @param sess\n+     * @param namespace namespace for login\n+     * @param login     login to check\n+     * @return true if login exist, false if not exist\n+     * @throws InternalErrorException\n+     */\n+    boolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException;\n+\n+    /**\n+     * Check if login in specified namespace exists.\n+     *\n+     * @param sess\n+     * @param namespace namespace for login\n+     * @param login     login to check\n+     * @throws InternalErrorException\n+     * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n+     */\n+    void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n+\n+    /**\n+     * Check if user exists in underlaying data source.\n+     *\n+     * @param perunSession\n+     * @param user         user to check\n+     * @return true if user exists in underlaying data source, false otherwise\n+     * @throws InternalErrorException\n+     */\n+    boolean userExists(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Check if user exists in underlaying data source.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    void checkUserExists(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Check if userExtSource exists in underlaying data source.\n+     *\n+     * @param perunSession\n+     * @param userExtSource userExtSource to check\n+     * @return true if userExtSource exists in underlaying data source, false otherwise\n+     * @throws InternalErrorException\n+     */\n+    boolean userExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+    /**\n+     * Check if userExtSource exists in underlaying data source.\n+     *\n+     * @param perunSession\n+     * @param userExtSource\n+     * @throws InternalErrorException\n+     * @throws UserExtSourceNotExistsException\n+     */\n+    void checkUserExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+    /**\n+     * Returns list of VOs, where the user is an Administrator.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return list of VOs, where the user is an Administrator.\n+     * @throws InternalErrorException\n+     */\n+    List<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of Groups, where the user is an Administrator.\n+     *\n+     * @param perunSession\n+     * @param user\n+     * @return list of Groups, where the user is an Administrator.\n+     * @throws InternalErrorException\n+     */\n+    List<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of Vos' ids, where the user is member.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return list of Vos, where the user is member\n+     * @throws InternalErrorException\n+     */\n+    List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who matches the searchString, searching name, email and logins.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who matches the searchString, searching name, email and logins.\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who matches the searchString\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who matches the fields.\n+     *\n+     * @param sess\n+     * @param titleBefore\n+     * @param firstName\n+     * @param middleName\n+     * @param lastName\n+     * @param titleAfter\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n+\n+    /**\n+     * Returns list of users who exactly matches the searchString\n+     *\n+     * @param sess\n+     * @param searchString\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n+     *\n+     * @param sess\n+     * @param attributeDefintion\n+     * @param attributeValue\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefintion, String attributeValue) throws InternalErrorException;\n+\n+    /**\n+     * Batch method which returns users by theirs ids.\n+     *\n+     * @param sess\n+     * @param usersIds\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n+\n+    /**\n+     * Returns all users who are not member of any VO.\n+     *\n+     * @param sess\n+     * @return list of users who are not member of any VO\n+     * @throws InternalErrorException\n+     */\n+    List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Returns true if the user is PERUNADMIN.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return true if the user is PERUNADMIN, false otherwise.\n+     * @throws InternalErrorException\n+     */\n+    boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Removes all authorships of user when user is deleted from DB\n+     * (author records on all his publications).\n+     *\n+     * @param sess\n+     * @param user\n+     * @throws InternalErrorException thrown when runtime exception\n+     */\n+    void removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Return list of all reserved logins for specific user\n+     * (pair is namespace and login)\n+     *\n+     * @param user for which get reserved logins\n+     * @return list of pairs namespace and login\n+     * @throws InternalErrorException\n+     */\n+    public List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException;\n+\n+    /**\n+     * Delete all reserved logins for specific user\n+     * (pair is namespace and login)\n+     *\n+     * @param user for which get delete reserved logins\n+     * @throws InternalErrorException\n+     */\n+    public void deleteUsersReservedLogins(User user) throws InternalErrorException;\n+\n+    /**\n+     * Get All RichUsers without UserExtSources and without virtual attributes.\n+     *\n+     * @param sess\n+     * @return list of richUsers\n+     * @throws InternalErrorException\n+     */\n+    List<Pair<User, Attribute>> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Store request of change of user's preferred email address.\n+     * Change in attribute value is not done, until email\n+     * address is verified by link in email notice.\n+     * (urn:perun:user:attribute-def:def:preferredEmail)\n+     *\n+     * @param sess\n+     * @param user\n+     * @param email\n+     * @return ID of change request\n+     * @throws InternalErrorException\n+     */\n+    int requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException;\n+\n+    /**\n+     * Get new preferred email value from user's original request\n+     *\n+     * @param sess PerunSession\n+     * @param user User to get new email address for\n+     * @param i    decrypted parameter\n+     * @param m    encrypted parameter\n+     * @return String return new preferred email\n+     * @throws InternalErrorException\n+     */\n+    String getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException;\n+\n+    /**\n+     * Removes all mail change requests related to user.\n+     *\n+     * @param sess PerunSession\n+     * @param user User to remove preferred email change requests for\n+     * @throws InternalErrorException if any exception in DB occur\n+     */\n+    void removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Return list of email addresses of user, which are\n+     * awaiting validation and are inside time window\n+     * for validation.\n+     * <p>\n+     * If there is no preferred email change request pending\n+     * or requests are outside time window for validation,\n+     * returns empty list.\n+     *\n+     * @param sess PerunSession\n+     * @param user User to check pending request for\n+     * @return List<String> user's email addresses pending validation\n+     * @throws InternalErrorException\n+     */\n+    List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Return only valid password reset requests for selected user and request ID.\n+     * Validity is determined by time since request creation and actual usage (only once).\n+     * <p>\n+     * If no valid entry is found, then empty string is returned. Entry is invalidated once loaded.\n+     *\n+     * @param user    user to get requests for\n+     * @param request request ID to get\n+     * @return namespace where user wants to reset password in or empty string\n+     * @throws InternalErrorException\n+     */\n+    String loadPasswordResetRequest(User user, int request) throws InternalErrorException;\n+\n+    /**\n+     * Removes all password reset requests associated with user.\n+     * This is used when deleting user from Perun.\n+     *\n+     * @param sess PerunSession\n+     * @param user User to remove all pwdreset requests\n+     * @throws InternalErrorException\n+     */\n+    void removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get count of all users.\n+     *\n+     * @param perunSession\n+     * @return count of all users\n+     * @throws InternalErrorException\n+     */\n+    int getUsersCount(PerunSession perunSession) throws InternalErrorException;\n+\n+    /**\n+     * Generate user account in a backend system associated with login-namespace in Perun.\n+     * <p>\n+     * This method consumes optional parameters map. Requirements are implementation-dependant\n+     * for each login-namespace.\n+     * <p>\n+     * Returns map with\n+     * 1: key=login-namespace attribute urn, value=generated login\n+     * 2: rest of opt response attributes...\n+     *\n+     * @param session\n+     * @param namespace  Namespace to generate account in\n+     * @param parameters Optional parameters\n+     * @return Map of data from backed response\n+     * @throws InternalErrorException\n+     */\n+    Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n+\n+    /**\n+     * Return instance of PasswordManagerModule for specified namespace or throw exception.\n+     *\n+     * @param session\n+     * @param namespace Namespace to get PWDMGR module.\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    public PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException;\n \n }\n",
            "diff_size": 662
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "568",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/21/UsersManagerImplApi.java\nindex 41b3aeb61a8..f93f70f0bbe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/21/UsersManagerImplApi.java\n@@ -2,7 +2,6 @@ package cz.metacentrum.perun.core.implApi;\n \n import java.util.List;\n import java.util.Map;\n-\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.AttributeDefinition;\n import cz.metacentrum.perun.core.api.ExtSource;\n@@ -31,668 +30,792 @@ import cz.metacentrum.perun.core.implApi.modules.pwdmgr.PasswordManagerModule;\n  * @author Zora Sebestianova\n  * @author Sona Mastrakova\n  */\n+\n+\n public interface UsersManagerImplApi {\n-\t/**\n-\t * Returns user by his login in external source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return user by its userExtSource or throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tUser getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Get all the users who have given type of the ExtSource and login.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param extSourceType type of the user extSource\n-\t * @param login login of the user\n-\t * @return all users with given parameters\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns user by its id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return user\n-\t * @throws UserNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @return list of specificUsers who are owned by the user\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all users who owns the specificUser and their ownership is not in status disabled\n-\t *\n-\t * @param sess\n-\t * @param specificUser the specific User\n-\t * @return list of user who owns the specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove specificUser owner (the user)\n-\t * Only disable ownership of user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t * @throws cz.metacentrum.perun.core.api.exceptions.SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException;\n-\n-\t/**\n-\t * Add specificUser owner (the user).\n-\t * If not exists, create new ownership.\n-\t * If exists, only enable ownership for user and specificUser\n-\t *\n-\t * @param sess\n-\t * @param user the user\n-\t * @param specificUser the specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Set ownership for user and specificUser to ENABLE (0).\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Set ownership for user and specificUser to DISABLE (1).\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Return true if ownership between user and specificUser already exists.\n-\t * Return false if not.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param specificUser\n-\t * @return true if ownership exists, false if not\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all specific Users (only specific users)\n-\t * Return also users who has no owners.\n-\t *\n-\t * @param sess\n-\t * @return list of all specific users in perun\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns user by VO member.\n-\t *\n-\t * @param perunSession\n-\t * @param member\n-\t * @return user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Return users which have member in VO.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users (included specific users).\n-\t *\n-\t * @param sess\n-\t * @return list of all users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsers(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t *  Creates the user, stores it in the DB. This method will fill user.id property.\n-\t *\n-\t * @param perunSession\n-\t * @param user user bean with filled properties\n-\t * @return user with user.id filled\n-\t * @throws InternalErrorException\n-\t */\n-\tUser createUser(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\n-\t/**\n-\t *  Deletes user (normal or specific) including all relations to other users (normal,specific,sponsor)\n-\t *\n-\t * @param perunSession Session for authz\n-\t * @param user User to delete\n-\t * @throws InternalErrorException\n-\t * @throws UserAlreadyRemovedException  When user is already deleted\n-\t * @throws SpecificUserAlreadyRemovedException When specific user is already deleted\n-\t */\n-\tvoid deleteUser(PerunSession perunSession, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException;\n-\n-\t/**\n-\t *  Updates users data in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user\n-\t * @throws InternalErrorException\n-\t */\n-\tUser updateUser(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t *  Updates titles before/after users name.\n-\t *  New titles must be set inside User object.\n-\t *  Setting any title to null will remove title from name.\n-\t *  Other user's properties are ignored.\n-\t *\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return updated user with new titles before/after name\n-\t * @throws InternalErrorException\n-\t */\n-\tUser updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t *  Updates user;s userExtSource in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated user\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t *  Updates user's userExtSource last access time in DB.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @return updated userExtSource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all user external sources ids of the user.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of user's external sources ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Integer> getUserExtSourcesIds(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all users external sources by specific type and extLogin.\n-\t *\n-\t * @param sess\n-\t * @param extType - type of extSource (ex. 'IDP')\n-\t * @param extLogin - extLogin of userExtSource\n-\t *\n-\t * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all users userExtSources with last_access not older than (now - m),\n-\t * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n-\t *\n-\t * @param sess\n-\t * @param user user to get extSources for\n-\t *\n-\t * @return list of active user extSources (not older than now - m)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get the user ext source by its id.\n-\t *\n-\t * @param sess\n-\t * @param id\n-\t * @return user external source for the id\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tUserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Get list of user ext sources be their ids.\n-\t *\n-\t * @param sess\n-\t * @param ids\n-\t * @return list of user external sources for ids\n-\t * @throws InternalErrorException\n-\t */\n-\tList<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n-\n-\t/**\n-\t * Adds user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @return\tuser external source with userExtSource.id filled\n-\t * @throws InternalErrorException\n-\t */\n-\tUserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @param userExtSource\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n-\n-\t/**\n-\t *  Removes all user's external sources.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets user's external source by the user's external login and external source.\n-\t *\n-\t * @param perunSession\n-\t * @param source\n-\t * @param extLogin\n-\t * @return user external source object\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tUserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Return true if login in specified namespace is already reserved, false if not.\n-\t *\n-\t * @param sess\n-\t * @param namespace namespace for login\n-\t * @param login login to check\n-\t * @return true if login exist, false if not exist\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if login in specified namespace exists.\n-\t *\n-\t * @param sess\n-\t * @param namespace namespace for login\n-\t * @param login login to check\n-\t * @throws InternalErrorException\n-\t * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n-\t */\n-\tvoid checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n-\n-\t/**\n-\t * Check if user exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param user user to check\n-\t * @return true if user exists in underlaying data source, false otherwise\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean userExists(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if user exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tvoid checkUserExists(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Check if userExtSource exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource userExtSource to check\n-\t * @return true if userExtSource exists in underlaying data source, false otherwise\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean userExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if userExtSource exists in underlaying data source.\n-\t *\n-\t * @param perunSession\n-\t * @param userExtSource\n-\t * @throws InternalErrorException\n-\t * @throws UserExtSourceNotExistsException\n-\t */\n-\tvoid checkUserExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n-\n-\t/**\n-\t * Returns list of VOs, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of VOs, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of Groups, where the user is an Administrator.\n-\t *\n-\t * @param perunSession\n-\t * @param user\n-\t * @return list of Groups, where the user is an Administrator.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of Vos' ids, where the user is member.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of Vos, where the user is member\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString, searching name, email and logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString, searching name, email and logins.\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns list of users who matches the fields.\n-\t *\n-\t * @param sess\n-\t * @param titleBefore\n-\t * @param firstName\n-\t * @param middleName\n-\t * @param lastName\n-\t * @param titleAfter\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n+ /**\n+  * Returns user by his login in external source.\n+  *\n+  * @param perunSession\n+  * @param userExtSource\n+  * @return user by its userExtSource or throws UserNotExistsException\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ User getUserByUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Get all the users who have given type of the ExtSource and login.\n+  *\n+  * @param perunSession perun session\n+  * @param extSourceType type of the user extSource\n+  * @param login login of the user\n+  * @return all users with given parameters\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByExtSourceTypeAndLogin(PerunSession perunSession, String extSourceType, String login) throws InternalErrorException;\n+\n+ /**\n+  * Returns user by its id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  * @return user\n+  * @throws UserNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User getUserById(PerunSession perunSession, int id) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Return all specificUsers who are owned by the user and their ownership is not in status disabled\n+  *\n+  * @param sess\n+  * @param user the user\n+  * @return list of specificUsers who are owned by the user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getSpecificUsersByUser(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Return all users who owns the specificUser and their ownership is not in status disabled\n+  *\n+  * @param sess\n+  * @param specificUser the specific User\n+  * @return list of user who owns the specificUser\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersBySpecificUser(PerunSession sess, User specificUser) throws InternalErrorException;\n+\n+ /**\n+  * Remove specificUser owner (the user)\n+  * Only disable ownership of user and specificUser\n+  *\n+  * @param sess\n+  * @param user the user\n+  * @param specificUser the specificUser\n+  * @throws InternalErrorException\n+  * @throws cz.metacentrum.perun.core.api.exceptions.SpecificUserOwnerAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void removeSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException, SpecificUserOwnerAlreadyRemovedException;\n+\n+ /**\n+  * Add specificUser owner (the user).\n+  * If not exists, create new ownership.\n+  * If exists, only enable ownership for user and specificUser\n+  *\n+  * @param sess\n+  * @param user the user\n+  * @param specificUser the specificUser\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void addSpecificUserOwner(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+ /**\n+  * Set ownership for user and specificUser to ENABLE (0).\n+  *\n+  * @param sess\n+  * @param user\n+  * @param specificUser\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void enableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+ /**\n+  * Set ownership for user and specificUser to DISABLE (1).\n+  *\n+  * @param sess\n+  * @param user\n+  * @param specificUser\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void disableOwnership(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+ /**\n+  * Return true if ownership between user and specificUser already exists.\n+  * Return false if not.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param specificUser\n+  * @return true if ownership exists, false if not\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean specificUserOwnershipExists(PerunSession sess, User user, User specificUser) throws InternalErrorException;\n+\n+ /**\n+  * Return all specific Users (only specific users)\n+  * Return also users who has no owners.\n+  *\n+  * @param sess\n+  * @return list of all specific users in perun\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getSpecificUsers(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Returns user by VO member.\n+  *\n+  * @param perunSession\n+  * @param member\n+  * @return user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User getUserByMember(PerunSession perunSession, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Return users which have member in VO.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByVo(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users (included specific users).\n+  *\n+  * @param sess\n+  * @return list of all users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsers(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  *  Creates the user, stores it in the DB. This method will fill user.id property.\n+  *\n+  * @param perunSession\n+  * @param user user bean with filled properties\n+  * @return user with user.id filled\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User createUser(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+\n+ /**\n+  *  Deletes user (normal or specific) including all relations to other users (normal,specific,sponsor)\n+  *\n+  * @param perunSession Session for authz\n+  * @param user User to delete\n+  * @throws InternalErrorException\n+  * @throws UserAlreadyRemovedException  When user is already deleted\n+  * @throws SpecificUserAlreadyRemovedException When specific user is already deleted\n+  */\n+\n+\n+ void deleteUser(PerunSession perunSession, User user) throws InternalErrorException, UserAlreadyRemovedException, SpecificUserAlreadyRemovedException;\n+\n+ /**\n+  *  Updates users data in DB.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return updated user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User updateUser(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  *  Updates titles before/after users name.\n+  *  New titles must be set inside User object.\n+  *  Setting any title to null will remove title from name.\n+  *  Other user's properties are ignored.\n+  *\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return updated user with new titles before/after name\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ User updateNameTitles(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  *  Updates user;s userExtSource in DB.\n+  *\n+  * @param perunSession\n+  * @param userExtSource\n+  * @return updated user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ UserExtSource updateUserExtSource(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+ /**\n+  *  Updates user's userExtSource last access time in DB.\n+  *\n+  * @param perunSession\n+  * @param userExtSource\n+  * @return updated userExtSource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void updateUserExtSourceLastAccess(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+ /**\n+  * Gets list of all user external sources ids of the user.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return list of user's external sources ids\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Integer> getUserExtSourcesIds(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Gets list of all users external sources by specific type and extLogin.\n+  *\n+  * @param sess\n+  * @param extType - type of extSource (ex. 'IDP')\n+  * @param extLogin - extLogin of userExtSource\n+  *\n+  * @return list of userExtSources with type and login, empty list if no such userExtSource exists\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<UserExtSource> getAllUserExtSourcesByTypeAndLogin(PerunSession sess, String extType, String extLogin) throws InternalErrorException;\n+\n+ /**\n+  * Get all users userExtSources with last_access not older than (now - m),\n+  * where 'm' is number of months defined in CONSTANT in UsersManagerImpl.\n+  *\n+  * @param sess\n+  * @param user user to get extSources for\n+  *\n+  * @return list of active user extSources (not older than now - m)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<UserExtSource> getActiveUserExtSources(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get the user ext source by its id.\n+  *\n+  * @param sess\n+  * @param id\n+  * @return user external source for the id\n+  * @throws InternalErrorException\n+  * @throws UserExtSourceNotExistsException\n+  */\n+\n+\n+ UserExtSource getUserExtSourceById(PerunSession sess, int id) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+ /**\n+  * Get list of user ext sources be their ids.\n+  *\n+  * @param sess\n+  * @param ids\n+  * @return list of user external sources for ids\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<UserExtSource> getUserExtsourcesByIds(PerunSession sess, List<Integer> ids) throws InternalErrorException;\n+\n+ /**\n+  * Adds user's external sources.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @param userExtSource\n+  * @return user external source with userExtSource.id filled\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ UserExtSource addUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException;\n+\n+ /**\n+  * Removes user's external sources.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @param userExtSource\n+  * @throws InternalErrorException\n+  * @throws UserExtSourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void removeUserExtSource(PerunSession perunSession, User user, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceAlreadyRemovedException;\n+\n+ /**\n+  *  Removes all user's external sources.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllUserExtSources(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Gets user's external source by the user's external login and external source.\n+  *\n+  * @param perunSession\n+  * @param source\n+  * @param extLogin\n+  * @return user external source object\n+  * @throws InternalErrorException\n+  * @throws UserExtSourceNotExistsException\n+  */\n+\n+\n+ UserExtSource getUserExtSourceByExtLogin(PerunSession perunSession, ExtSource source, String extLogin) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+ /**\n+  * Return true if login in specified namespace is already reserved, false if not.\n+  *\n+  * @param sess\n+  * @param namespace namespace for login\n+  * @param login login to check\n+  * @return true if login exist, false if not exist\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isLoginReserved(PerunSession sess, String namespace, String login) throws InternalErrorException;\n+\n+ /**\n+  * Check if login in specified namespace exists.\n+  *\n+  * @param sess\n+  * @param namespace namespace for login\n+  * @param login login to check\n+  * @throws InternalErrorException\n+  * @throws AlreadyReservedLoginException throw this exception if login already exist in table of reserved logins\n+  */\n+\n+\n+ void checkReservedLogins(PerunSession sess, String namespace, String login) throws InternalErrorException, AlreadyReservedLoginException;\n+\n+ /**\n+  * Check if user exists in underlaying data source.\n+  *\n+  * @param perunSession\n+  * @param user user to check\n+  * @return true if user exists in underlaying data source, false otherwise\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean userExists(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Check if user exists in underlaying data source.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ void checkUserExists(PerunSession perunSession, User user) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Check if userExtSource exists in underlaying data source.\n+  *\n+  * @param perunSession\n+  * @param userExtSource userExtSource to check\n+  * @return true if userExtSource exists in underlaying data source, false otherwise\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean userExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException;\n+\n+ /**\n+  * Check if userExtSource exists in underlaying data source.\n+  *\n+  * @param perunSession\n+  * @param userExtSource\n+  * @throws InternalErrorException\n+  * @throws UserExtSourceNotExistsException\n+  */\n+\n+\n+ void checkUserExtSourceExists(PerunSession perunSession, UserExtSource userExtSource) throws InternalErrorException, UserExtSourceNotExistsException;\n+\n+ /**\n+  * Returns list of VOs, where the user is an Administrator.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return list of VOs, where the user is an Administrator.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Vo> getVosWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of Groups, where the user is an Administrator.\n+  *\n+  * @param perunSession\n+  * @param user\n+  * @return list of Groups, where the user is an Administrator.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Group> getGroupsWhereUserIsAdmin(PerunSession perunSession, User user) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of Vos' ids, where the user is member.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return list of Vos, where the user is member\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Vo> getVosWhereUserIsMember(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of users who matches the searchString, searching name, email and logins.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsers(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of users who matches the searchString, searching name, email and logins.\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsersByExactMatch(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of users who matches the searchString\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsersByName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Returns list of users who matches the fields.\n+  *\n+  * @param sess\n+  * @param titleBefore\n+  * @param firstName\n+  * @param middleName\n+  * @param lastName\n+  * @param titleAfter\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n         \n         /**\n-\t * Returns list of users who exactly matches the searchString\n-\t *\n-\t * @param sess\n-\t * @param searchString\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefintion\n-\t * @param attributeValue\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefintion, String attributeValue) throws InternalErrorException;\n-\n-\t/**\n-\t * Batch method which returns users by theirs ids.\n-\t *\n-\t * @param sess\n-\t * @param usersIds\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all users who are not member of any VO.\n-\t *\n-\t * @param sess\n-\t * @return list of users who are not member of any VO\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is PERUNADMIN.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return true if the user is PERUNADMIN, false otherwise.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes all authorships of user when user is deleted from DB\n-\t * (author records on all his publications).\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @throws InternalErrorException thrown when runtime exception\n-\t */\n-\tvoid removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return list of all reserved logins for specific user\n-\t * (pair is namespace and login)\n-\t *\n-\t * @param user for which get reserved logins\n-\t * @return list of pairs namespace and login\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Delete all reserved logins for specific user\n-\t * (pair is namespace and login)\n-\t *\n-\t * @param user for which get delete reserved logins\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic void deleteUsersReservedLogins(User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get All RichUsers without UserExtSources and without virtual attributes.\n-\t *\n-\t * @param sess\n-\t * @return list of richUsers\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Pair<User, Attribute>> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Store request of change of user's preferred email address.\n-\t * Change in attribute value is not done, until email\n-\t * address is verified by link in email notice.\n-\t * (urn:perun:user:attribute-def:def:preferredEmail)\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param email\n-\t * @throws InternalErrorException\n-\t * @return ID of change request\n-\t */\n-\tint requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException;\n-\n-\t/**\n-\t * Get new preferred email value from user's original request\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to get new email address for\n-\t * @param i decrypted parameter\n-\t * @param m encrypted parameter\n-\t * @throws InternalErrorException\n-\t * @return String return new preferred email\n-\t */\n-\tString getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes all mail change requests related to user.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to remove preferred email change requests for\n-\t *\n-\t * @throws InternalErrorException if any exception in DB occur\n-\t */\n-\tvoid removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return list of email addresses of user, which are\n-\t * awaiting validation and are inside time window\n-\t * for validation.\n-\t *\n-\t * If there is no preferred email change request pending\n-\t * or requests are outside time window for validation,\n-\t * returns empty list.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to check pending request for\n-\t *\n-\t * @throws InternalErrorException\n-\t *\n-\t * @return List<String> user's email addresses pending validation\n-\t */\n-\tList<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Return only valid password reset requests for selected user and request ID.\n-\t * Validity is determined by time since request creation and actual usage (only once).\n-\t *\n-\t * If no valid entry is found, then empty string is returned. Entry is invalidated once loaded.\n-\t *\n-\t * @param user user to get requests for\n-\t * @param request request ID to get\n-\t * @return namespace where user wants to reset password in or empty string\n-\t * @throws InternalErrorException\n-\t */\n-\tString loadPasswordResetRequest(User user, int request) throws InternalErrorException;\n-\n-\t/**\n-\t * Removes all password reset requests associated with user.\n-\t * This is used when deleting user from Perun.\n-\t *\n-\t * @param sess PerunSession\n-\t * @param user User to remove all pwdreset requests\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get count of all users.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all users\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getUsersCount(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Generate user account in a backend system associated with login-namespace in Perun.\n-\t *\n-\t * This method consumes optional parameters map. Requirements are implementation-dependant\n-\t * for each login-namespace.\n-\t *\n-\t * Returns map with\n-\t * 1: key=login-namespace attribute urn, value=generated login\n-\t * 2: rest of opt response attributes...\n-\t *\n-\t * @param session\n-\t * @param namespace Namespace to generate account in\n-\t * @param parameters Optional parameters\n-\t * @return Map of data from backed response\n-\t * @throws InternalErrorException\n-\t */\n-\tMap<String,String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n-\n-\t/**\n-\t * Return instance of PasswordManagerModule for specified namespace or throw exception.\n-\t *\n-\t * @param session\n-\t * @param namespace Namespace to get PWDMGR module.\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException;\n-\n-}\n+  * Returns list of users who exactly matches the searchString\n+  *\n+  * @param sess\n+  * @param searchString\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> findUsersByExactName(PerunSession sess, String searchString) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users who have set the attribute with the value. Searching only def and opt attributes.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users who have the attribute with the value. attributeValue is not converted to the attribute type, it is always type of String.\n+  *\n+  * @param sess\n+  * @param attributeDefintion\n+  * @param attributeValue\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByAttributeValue(PerunSession sess, AttributeDefinition attributeDefintion, String attributeValue) throws InternalErrorException;\n+\n+ /**\n+  * Batch method which returns users by theirs ids.\n+  *\n+  * @param sess\n+  * @param usersIds\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersByIds(PerunSession sess, List<Integer> usersIds) throws InternalErrorException;\n+\n+ /**\n+  * Returns all users who are not member of any VO.\n+  *\n+  * @param sess\n+  * @return list of users who are not member of any VO\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getUsersWithoutVoAssigned(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Returns true if the user is PERUNADMIN.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return true if the user is PERUNADMIN, false otherwise.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isUserPerunAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Removes all authorships of user when user is deleted from DB\n+  * (author records on all his publications).\n+  *\n+  * @param sess\n+  * @param user\n+  * @throws InternalErrorException thrown when runtime exception\n+  */\n+\n+\n+ void removeAllAuthorships(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Return list of all reserved logins for specific user\n+  * (pair is namespace and login)\n+  *\n+  * @param user for which get reserved logins\n+  * @return list of pairs namespace and login\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ public List<Pair<String, String>> getUsersReservedLogins(User user) throws InternalErrorException;\n+\n+ /**\n+  * Delete all reserved logins for specific user\n+  * (pair is namespace and login)\n+  *\n+  * @param user for which get delete reserved logins\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ public void deleteUsersReservedLogins(User user) throws InternalErrorException;\n+\n+ /**\n+  * Get All RichUsers without UserExtSources and without virtual attributes.\n+  *\n+  * @param sess\n+  * @return list of richUsers\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Pair<User, Attribute>> getAllRichUsersWithAllNonVirutalAttributes(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Store request of change of user's preferred email address.\n+  * Change in attribute value is not done, until email\n+  * address is verified by link in email notice.\n+  * (urn:perun:user:attribute-def:def:preferredEmail)\n+  *\n+  * @param sess\n+  * @param user\n+  * @param email\n+  * @throws InternalErrorException\n+  * @return ID of change request\n+  */\n+\n+\n+ int requestPreferredEmailChange(PerunSession sess, User user, String email) throws InternalErrorException;\n+\n+ /**\n+  * Get new preferred email value from user's original request\n+  *\n+  * @param sess PerunSession\n+  * @param user User to get new email address for\n+  * @param i decrypted parameter\n+  * @param m encrypted parameter\n+  * @throws InternalErrorException\n+  * @return String return new preferred email\n+  */\n+\n+\n+ String getPreferredEmailChangeRequest(PerunSession sess, User user, String i, String m) throws InternalErrorException;\n+\n+ /**\n+  * Removes all mail change requests related to user.\n+  *\n+  * @param sess PerunSession\n+  * @param user User to remove preferred email change requests for\n+  *\n+  * @throws InternalErrorException if any exception in DB occur\n+  */\n+\n+\n+ void removeAllPreferredEmailChangeRequests(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Return list of email addresses of user, which are\n+  * awaiting validation and are inside time window\n+  * for validation.\n+  *\n+  * If there is no preferred email change request pending\n+  * or requests are outside time window for validation,\n+  * returns empty list.\n+  *\n+  * @param sess PerunSession\n+  * @param user User to check pending request for\n+  *\n+  * @throws InternalErrorException\n+  *\n+  * @return List<String> user's email addresses pending validation\n+  */\n+\n+\n+ List<String> getPendingPreferredEmailChanges(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Return only valid password reset requests for selected user and request ID.\n+  * Validity is determined by time since request creation and actual usage (only once).\n+  *\n+  * If no valid entry is found, then empty string is returned. Entry is invalidated once loaded.\n+  *\n+  * @param user user to get requests for\n+  * @param request request ID to get\n+  * @return namespace where user wants to reset password in or empty string\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ String loadPasswordResetRequest(User user, int request) throws InternalErrorException;\n+\n+ /**\n+  * Removes all password reset requests associated with user.\n+  * This is used when deleting user from Perun.\n+  *\n+  * @param sess PerunSession\n+  * @param user User to remove all pwdreset requests\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllPasswordResetRequests(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get count of all users.\n+  *\n+  * @param perunSession\n+  *\n+  * @return count of all users\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ int getUsersCount(PerunSession perunSession) throws InternalErrorException;\n+\n+ /**\n+  * Generate user account in a backend system associated with login-namespace in Perun.\n+  *\n+  * This method consumes optional parameters map. Requirements are implementation-dependant\n+  * for each login-namespace.\n+  *\n+  * Returns map with\n+  * 1: key=login-namespace attribute urn, value=generated login\n+  * 2: rest of opt response attributes...\n+  *\n+  * @param session\n+  * @param namespace Namespace to generate account in\n+  * @param parameters Optional parameters\n+  * @return Map of data from backed response\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Map<String, String> generateAccount(PerunSession session, String namespace, Map<String, String> parameters) throws InternalErrorException;\n+\n+ /**\n+  * Return instance of PasswordManagerModule for specified namespace or throw exception.\n+  *\n+  * @param session\n+  * @param namespace Namespace to get PWDMGR module.\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ public PasswordManagerModule getPasswordManagerModule(PerunSession session, String namespace) throws InternalErrorException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 787
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/21/UsersManagerImplApi.java\nindex 41b3aeb61a8..e06a5d9ba42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/21/UsersManagerImplApi.java\n@@ -480,8 +480,8 @@ public interface UsersManagerImplApi {\n \t * @throws InternalErrorException\n \t */\n \tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n-        /**\n+\n+/**\n \t * Returns list of users who exactly matches the searchString\n \t *\n \t * @param sess\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/21/UsersManagerImplApi.java\nindex 41b3aeb61a8..293ef3f65cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/21/UsersManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/21/UsersManagerImplApi.java\n@@ -479,9 +479,9 @@ public interface UsersManagerImplApi {\n \t * @return list of users\n \t * @throws InternalErrorException\n \t */\n-\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException;\n-        \n-        /**\n+\tList<User> findUsersByName(PerunSession sess, String titleBefore, String firstName, String middleName, String lastName, String titleAfter) throws InternalErrorException\n+;\n+ /**\n \t * Returns list of users who exactly matches the searchString\n \t *\n \t * @param sess\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}