{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3668",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "173",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "201",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "214",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "239",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3668/CheckConsistencyCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3668/CheckConsistencyCommand.java\nindex 646d99613ea..6c07118ffd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3668/CheckConsistencyCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3668/CheckConsistencyCommand.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency;\n \n import java.io.File;\n@@ -56,212 +57,203 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.database_path;\n \n public class CheckConsistencyCommand implements AdminCommand\n {\n-    public static final String CHECK_GRAPH = \"check-graph\";\n-    public static final String CHECK_INDEXES = \"check-indexes\";\n-    public static final String CHECK_LABEL_SCAN_STORE = \"check-label-scan-store\";\n-    public static final String CHECK_PROPERTY_OWNERS = \"check-property-owners\";\n-    private static final Arguments arguments = new Arguments()\n-            .withDatabase()\n-            .withArgument( new OptionalCanonicalPath( \"backup\", \"/path/to/backup\", \"\",\n-                    \"Path to backup to check consistency of. Cannot be used together with --database.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"verbose\", false, \"Enable verbose output.\" ) )\n-            .withArgument( new OptionalCanonicalPath( \"report-dir\", \"directory\", \".\",\n-                    \"Directory to write report file in.\" ) )\n-            .withArgument( new OptionalCanonicalPath( \"additional-config\", \"config-file-path\", \"\",\n-                    \"Configuration file to supply additional configuration in. This argument is DEPRECATED.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_GRAPH, true,\n-                    \"Perform checks between nodes, relationships, properties, types and tokens.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_INDEXES, true,\n-                    \"Perform checks on indexes.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_LABEL_SCAN_STORE, true,\n-                    \"Perform checks on the label scan store.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_PROPERTY_OWNERS, false,\n-                    \"Perform additional checks on property ownership. This check is *very* expensive in time and \" +\n-                            \"memory.\" ) );\n+  public static final String CHECK_GRAPH = \"check-graph\";\n+  public static final String CHECK_INDEXES = \"check-indexes\";\n+  public static final String CHECK_LABEL_SCAN_STORE = \"check-label-scan-store\";\n+  public static final String CHECK_PROPERTY_OWNERS = \"check-property-owners\";\n+  private static final Arguments arguments = new Arguments()\n+      .withDatabase()\n+      .withArgument(new OptionalCanonicalPath(\"backup\", \"/path/to/backup\", \"\",\n+          \"Path to backup to check consistency of. Cannot be used together with --database.\"))\n+      .withArgument(new OptionalBooleanArg(\"verbose\", false, \"Enable verbose output.\"))\n+      .withArgument(new OptionalCanonicalPath(\"report-dir\", \"directory\", \".\",\n+          \"Directory to write report file in.\"))\n+      .withArgument(new OptionalCanonicalPath(\"additional-config\", \"config-file-path\", \"\",\n+          \"Configuration file to supply additional configuration in. This argument is DEPRECATED.\"))\n+      .withArgument(new OptionalBooleanArg(CHECK_GRAPH, true,\n+          \"Perform checks between nodes, relationships, properties, types and tokens.\"))\n+      .withArgument(new OptionalBooleanArg(CHECK_INDEXES, true,\n+          \"Perform checks on indexes.\"))\n+      .withArgument(new OptionalBooleanArg(CHECK_LABEL_SCAN_STORE, true,\n+          \"Perform checks on the label scan store.\"))\n+      .withArgument(new OptionalBooleanArg(CHECK_PROPERTY_OWNERS, false,\n+          \"Perform additional checks on property ownership. This check is *very* expensive in time and \" +\n+              \"memory.\"));\n \n-    private final Path homeDir;\n-    private final Path configDir;\n-    private final OutsideWorld outsideWorld;\n-    private final ConsistencyCheckService consistencyCheckService;\n+  private final Path homeDir;\n+  private final Path configDir;\n+  private final OutsideWorld outsideWorld;\n+  private final ConsistencyCheckService consistencyCheckService;\n \n-    public CheckConsistencyCommand( Path homeDir, Path configDir, OutsideWorld outsideWorld )\n-    {\n-        this( homeDir, configDir, outsideWorld, new ConsistencyCheckService() );\n-    }\n+  public CheckConsistencyCommand(Path homeDir, Path configDir, OutsideWorld outsideWorld)\n+  {\n+    this(homeDir, configDir, outsideWorld, new ConsistencyCheckService());\n+  }\n \n-    public CheckConsistencyCommand( Path homeDir, Path configDir, OutsideWorld outsideWorld,\n-            ConsistencyCheckService consistencyCheckService )\n+  public CheckConsistencyCommand(Path homeDir, Path configDir, OutsideWorld outsideWorld,\n+                                 ConsistencyCheckService consistencyCheckService)\n+  {\n+    this.homeDir = homeDir;\n+    this.configDir = configDir;\n+    this.outsideWorld = outsideWorld;\n+    this.consistencyCheckService = consistencyCheckService;\n+  }\n+\n+  @Override\n+  public void execute(String[] args) throws IncorrectUsage, CommandFailed\n+  {\n+    final String database;\n+    final boolean verbose;\n+    final Optional<Path> additionalConfigFile;\n+    final Path reportDir;\n+    final Optional<Path> backupPath;\n+    final boolean checkGraph;\n+    final boolean checkIndexes;\n+    final boolean checkLabelScanStore;\n+    final boolean checkPropertyOwners;\n+\n+    try\n+    {\n+      database = arguments.parse(args).get(ARG_DATABASE);\n+      backupPath = arguments.getOptionalPath(\"backup\");\n+      verbose = arguments.getBoolean(\"verbose\");\n+      additionalConfigFile = arguments.getOptionalPath(\"additional-config\");\n+      reportDir = arguments.getOptionalPath(\"report-dir\")\n+          .orElseThrow(() -> new IllegalArgumentException(\"report-dir must be a valid path\"));\n+    } catch (IllegalArgumentException e)\n     {\n-        this.homeDir = homeDir;\n-        this.configDir = configDir;\n-        this.outsideWorld = outsideWorld;\n-        this.consistencyCheckService = consistencyCheckService;\n+      throw new IncorrectUsage(e.getMessage());\n     }\n \n-    @Override\n-    public void execute( String[] args ) throws IncorrectUsage, CommandFailed\n+    if (backupPath.isPresent())\n     {\n-        final String database;\n-        final boolean verbose;\n-        final Optional<Path> additionalConfigFile;\n-        final Path reportDir;\n-        final Optional<Path> backupPath;\n-        final boolean checkGraph;\n-        final boolean checkIndexes;\n-        final boolean checkLabelScanStore;\n-        final boolean checkPropertyOwners;\n-\n-        try\n-        {\n-            database = arguments.parse( args ).get( ARG_DATABASE );\n-            backupPath = arguments.getOptionalPath( \"backup\" );\n-            verbose = arguments.getBoolean( \"verbose\" );\n-            additionalConfigFile = arguments.getOptionalPath( \"additional-config\" );\n-            reportDir = arguments.getOptionalPath( \"report-dir\" )\n-                    .orElseThrow( () -> new IllegalArgumentException( \"report-dir must be a valid path\" ) );\n-        }\n-        catch ( IllegalArgumentException e )\n-        {\n-            throw new IncorrectUsage( e.getMessage() );\n-        }\n-\n-        if ( backupPath.isPresent() )\n-        {\n-            if ( arguments.has( ARG_DATABASE ) )\n-            {\n-                throw new IncorrectUsage( \"Only one of '--\" + ARG_DATABASE + \"' and '--backup' can be specified.\" );\n-            }\n-            if ( !backupPath.get().toFile().isDirectory() )\n-            {\n-                throw new CommandFailed( format( \"Specified backup should be a directory: %s\", backupPath.get() ) );\n-            }\n-        }\n-\n-        Config config = loadNeo4jConfig( homeDir, configDir, database, loadAdditionalConfig( additionalConfigFile ) );\n-\n-        try\n-        {\n-            // We can remove the loading from config file in 4.0\n-            if ( arguments.has( CHECK_GRAPH ) )\n-            {\n-                checkGraph = arguments.getBoolean( CHECK_GRAPH );\n-            }\n-            else\n-            {\n-                checkGraph = config.get( ConsistencyCheckSettings.consistency_check_graph );\n-            }\n-            if ( arguments.has( CHECK_INDEXES ) )\n-            {\n-                checkIndexes = arguments.getBoolean( CHECK_INDEXES );\n-            }\n-            else\n-            {\n-                checkIndexes = config.get( ConsistencyCheckSettings.consistency_check_indexes );\n-            }\n-            if ( arguments.has( CHECK_LABEL_SCAN_STORE ) )\n-            {\n-                checkLabelScanStore = arguments.getBoolean( CHECK_LABEL_SCAN_STORE );\n-            }\n-            else\n-            {\n-                checkLabelScanStore = config.get( ConsistencyCheckSettings.consistency_check_label_scan_store );\n-            }\n-            if ( arguments.has( CHECK_PROPERTY_OWNERS ) )\n-            {\n-                checkPropertyOwners = arguments.getBoolean( CHECK_PROPERTY_OWNERS );\n-            }\n-            else\n-            {\n-                checkPropertyOwners = config.get( ConsistencyCheckSettings.consistency_check_property_owners );\n-            }\n-        }\n-        catch ( IllegalArgumentException e )\n-        {\n-            throw new IncorrectUsage( e.getMessage() );\n-        }\n-\n-        try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction() )\n-        {\n-            File storeDir = backupPath.map( Path::toFile ).orElse( config.get( database_path ) );\n-            checkDbState( storeDir, config );\n-            ZoneId logTimeZone = config.get( GraphDatabaseSettings.db_timezone ).getZoneId();\n-            // Only output progress indicator if a console receives the output\n-            ProgressMonitorFactory progressMonitorFactory = ProgressMonitorFactory.NONE;\n-            if ( System.console() != null )\n-            {\n-                progressMonitorFactory = ProgressMonitorFactory.textual( System.out );\n-            }\n+      if (arguments.has(ARG_DATABASE))\n+      {\n+        throw new IncorrectUsage(\"Only one of '--\" + ARG_DATABASE + \"' and '--backup' can be specified.\");\n+      }\n+      if (!backupPath.get().toFile().isDirectory())\n+      {\n+        throw new CommandFailed(format(\"Specified backup should be a directory: %s\", backupPath.get()));\n+      }\n+    }\n \n-            ConsistencyCheckService.Result consistencyCheckResult = consistencyCheckService\n-                    .runFullConsistencyCheck( storeDir, config, progressMonitorFactory,\n-                            FormattedLogProvider.withZoneId( logTimeZone ).toOutputStream( System.out ), fileSystem,\n-                            verbose, reportDir.toFile(),\n-                            new ConsistencyFlags( checkGraph, checkIndexes, checkLabelScanStore, checkPropertyOwners ) );\n+    Config config = loadNeo4jConfig(homeDir, configDir, database, loadAdditionalConfig(additionalConfigFile));\n \n-            if ( !consistencyCheckResult.isSuccessful() )\n-            {\n-                throw new CommandFailed( format( \"Inconsistencies found. See '%s' for details.\",\n-                        consistencyCheckResult.reportFile() ) );\n-            }\n-        }\n-        catch ( ConsistencyCheckIncompleteException | IOException e )\n-        {\n-            throw new CommandFailed( \"Consistency checking failed.\" + e.getMessage(), e );\n-        }\n+    try\n+    {\n+      // We can remove the loading from config file in 4.0\n+      if (arguments.has(CHECK_GRAPH))\n+      {\n+        checkGraph = arguments.getBoolean(CHECK_GRAPH);\n+      } else\n+      {\n+        checkGraph = config.get(ConsistencyCheckSettings.consistency_check_graph);\n+      }\n+      if (arguments.has(CHECK_INDEXES))\n+      {\n+        checkIndexes = arguments.getBoolean(CHECK_INDEXES);\n+      } else\n+      {\n+        checkIndexes = config.get(ConsistencyCheckSettings.consistency_check_indexes);\n+      }\n+      if (arguments.has(CHECK_LABEL_SCAN_STORE))\n+      {\n+        checkLabelScanStore = arguments.getBoolean(CHECK_LABEL_SCAN_STORE);\n+      } else\n+      {\n+        checkLabelScanStore = config.get(ConsistencyCheckSettings.consistency_check_label_scan_store);\n+      }\n+      if (arguments.has(CHECK_PROPERTY_OWNERS))\n+      {\n+        checkPropertyOwners = arguments.getBoolean(CHECK_PROPERTY_OWNERS);\n+      } else\n+      {\n+        checkPropertyOwners = config.get(ConsistencyCheckSettings.consistency_check_property_owners);\n+      }\n+    } catch (IllegalArgumentException e)\n+    {\n+      throw new IncorrectUsage(e.getMessage());\n     }\n \n-    private Map<String,String> loadAdditionalConfig( Optional<Path> additionalConfigFile )\n+    try (FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction())\n     {\n-        if ( additionalConfigFile.isPresent() )\n-        {\n-            try\n-            {\n-                return MapUtil.load( additionalConfigFile.get().toFile() );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Could not read configuration file [%s]\", additionalConfigFile ), e );\n-            }\n-        }\n+      File storeDir = backupPath.map(Path::toFile).orElse(config.get(database_path));\n+      checkDbState(storeDir, config);\n+      ZoneId logTimeZone = config.get(GraphDatabaseSettings.db_timezone).getZoneId();\n+      // Only output progress indicator if a console receives the output\n+      ProgressMonitorFactory progressMonitorFactory = ProgressMonitorFactory.NONE;\n+      if (System.console() != null)\n+      {\n+        progressMonitorFactory = ProgressMonitorFactory.textual(System.out);\n+      }\n \n-        return new HashMap<>();\n-    }\n+      ConsistencyCheckService.Result consistencyCheckResult = consistencyCheckService\n+          .runFullConsistencyCheck(storeDir, config, progressMonitorFactory,\n+              FormattedLogProvider.withZoneId(logTimeZone).toOutputStream(System.out), fileSystem,\n+              verbose, reportDir.toFile(),\n+              new ConsistencyFlags(checkGraph, checkIndexes, checkLabelScanStore, checkPropertyOwners));\n \n-    private void checkDbState( File storeDir, Config additionalConfiguration ) throws CommandFailed\n+      if (!consistencyCheckResult.isSuccessful())\n+      {\n+        throw new CommandFailed(format(\"Inconsistencies found. See '%s' for details.\",\n+            consistencyCheckResult.reportFile()));\n+      }\n+    } catch (ConsistencyCheckIncompleteException | IOException e)\n     {\n-        try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n-              PageCache pageCache = ConfigurableStandalonePageCacheFactory\n-                      .createPageCache( fileSystem, additionalConfiguration ) )\n-        {\n-            RecoveryRequiredChecker requiredChecker =\n-                    new RecoveryRequiredChecker( fileSystem, pageCache, additionalConfiguration, new Monitors() );\n-            if ( requiredChecker.isRecoveryRequiredAt( storeDir ) )\n-            {\n-                throw new CommandFailed(\n-                        Strings.joinAsLines( \"Active logical log detected, this might be a source of inconsistencies.\",\n-                                \"Please recover database before running the consistency check.\",\n-                                \"To perform recovery please start database and perform clean shutdown.\" ) );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            outsideWorld.stdErrLine(\n-                    \"Failure when checking for recovery state: '%s', continuing as normal.%n\" + e.getMessage() );\n-        }\n+      throw new CommandFailed(\"Consistency checking failed.\" + e.getMessage(), e);\n     }\n+  }\n \n-    private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName,\n-            Map<String,String> additionalConfig )\n+  private Map<String, String> loadAdditionalConfig(Optional<Path> additionalConfigFile)\n+  {\n+    if (additionalConfigFile.isPresent())\n     {\n-        additionalConfig.put( GraphDatabaseSettings.active_database.name(), databaseName );\n-\n-        return Config.fromFile( configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ) ).withHome( homeDir ).withConnectorsDisabled()\n-                .withSettings( additionalConfig ).build();\n+      try\n+      {\n+        return MapUtil.load(additionalConfigFile.get().toFile());\n+      } catch (IOException e)\n+      {\n+        throw new IllegalArgumentException(\n+            String.format(\"Could not read configuration file [%s]\", additionalConfigFile), e);\n+      }\n     }\n \n-    public static Arguments arguments()\n+    return new HashMap<>();\n+  }\n+\n+  private void checkDbState(File storeDir, Config additionalConfiguration) throws CommandFailed\n+  {\n+    try (FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n+         PageCache pageCache = ConfigurableStandalonePageCacheFactory\n+             .createPageCache(fileSystem, additionalConfiguration))\n+    {\n+      RecoveryRequiredChecker requiredChecker =\n+          new RecoveryRequiredChecker(fileSystem, pageCache, additionalConfiguration, new Monitors());\n+      if (requiredChecker.isRecoveryRequiredAt(storeDir))\n+      {\n+        throw new CommandFailed(\n+            Strings.joinAsLines(\"Active logical log detected, this might be a source of inconsistencies.\",\n+                \"Please recover database before running the consistency check.\",\n+                \"To perform recovery please start database and perform clean shutdown.\"));\n+      }\n+    } catch (IOException e)\n     {\n-        return arguments;\n+      outsideWorld.stdErrLine(\n+          \"Failure when checking for recovery state: '%s', continuing as normal.%n\" + e.getMessage());\n     }\n+  }\n+\n+  private static Config loadNeo4jConfig(Path homeDir, Path configDir, String databaseName,\n+                                        Map<String, String> additionalConfig)\n+  {\n+    additionalConfig.put(GraphDatabaseSettings.active_database.name(), databaseName);\n+\n+    return Config.fromFile(configDir.resolve(Config.DEFAULT_CONFIG_FILE_NAME)).withHome(homeDir).withConnectorsDisabled()\n+        .withSettings(additionalConfig).build();\n+  }\n+\n+  public static Arguments arguments()\n+  {\n+    return arguments;\n+  }\n }\n",
            "diff_size": 288
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 1,140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 239).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 278).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "234",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3668/CheckConsistencyCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3668/CheckConsistencyCommand.java\nindex 646d99613ea..74470a7db96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3668/CheckConsistencyCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3668/CheckConsistencyCommand.java\n@@ -57,29 +57,14 @@ import static org.neo4j.graphdb.factory.GraphDatabaseSettings.database_path;\n public class CheckConsistencyCommand implements AdminCommand\n {\n     public static final String CHECK_GRAPH = \"check-graph\";\n-    public static final String CHECK_INDEXES = \"check-indexes\";\n-    public static final String CHECK_LABEL_SCAN_STORE = \"check-label-scan-store\";\n-    public static final String CHECK_PROPERTY_OWNERS = \"check-property-owners\";\n-    private static final Arguments arguments = new Arguments()\n-            .withDatabase()\n-            .withArgument( new OptionalCanonicalPath( \"backup\", \"/path/to/backup\", \"\",\n-                    \"Path to backup to check consistency of. Cannot be used together with --database.\" ) )\n-            .withArgument( new OptionalBooleanArg( \"verbose\", false, \"Enable verbose output.\" ) )\n-            .withArgument( new OptionalCanonicalPath( \"report-dir\", \"directory\", \".\",\n-                    \"Directory to write report file in.\" ) )\n-            .withArgument( new OptionalCanonicalPath( \"additional-config\", \"config-file-path\", \"\",\n-                    \"Configuration file to supply additional configuration in. This argument is DEPRECATED.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_GRAPH, true,\n-                    \"Perform checks between nodes, relationships, properties, types and tokens.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_INDEXES, true,\n-                    \"Perform checks on indexes.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_LABEL_SCAN_STORE, true,\n-                    \"Perform checks on the label scan store.\" ) )\n-            .withArgument( new OptionalBooleanArg( CHECK_PROPERTY_OWNERS, false,\n-                    \"Perform additional checks on property ownership. This check is *very* expensive in time and \" +\n-                            \"memory.\" ) );\n \n-    private final Path homeDir;\n+public static final String CHECK_INDEXES = \"check-indexes\";\n+\n+public static final String CHECK_LABEL_SCAN_STORE = \"check-label-scan-store\";\n+\n+public static final String CHECK_PROPERTY_OWNERS = \"check-property-owners\";\n+    private static final Arguments arguments = new Arguments().withDatabase().withArgument( new OptionalCanonicalPath( \"backup\", \"/path/to/backup\", \"\", \"Path to backup to check consistency of. Cannot be used together with --database.\" ) ).withArgument( new OptionalBooleanArg( \"verbose\", false, \"Enable verbose output.\" ) ).withArgument( new OptionalCanonicalPath( \"report-dir\", \"directory\", \".\", \"Directory to write report file in.\" ) ).withArgument( new OptionalCanonicalPath( \"additional-config\", \"config-file-path\", \"\", \"Configuration file to supply additional configuration in. This argument is DEPRECATED.\" ) ).withArgument( new OptionalBooleanArg( CHECK_GRAPH, true, \"Perform checks between nodes, relationships, properties, types and tokens.\" ) ).withArgument( new OptionalBooleanArg( CHECK_INDEXES, true, \"Perform checks on indexes.\" ) ).withArgument( new OptionalBooleanArg( CHECK_LABEL_SCAN_STORE, true, \"Perform checks on the label scan store.\" ) ).withArgument( new OptionalBooleanArg( CHECK_PROPERTY_OWNERS, false, \"Perform additional checks on property ownership. This check is *very* expensive in time and \" + \"memory.\" ) );\n+private final Path homeDir;\n     private final Path configDir;\n     private final OutsideWorld outsideWorld;\n     private final ConsistencyCheckService consistencyCheckService;\n@@ -117,9 +102,8 @@ public class CheckConsistencyCommand implements AdminCommand\n             backupPath = arguments.getOptionalPath( \"backup\" );\n             verbose = arguments.getBoolean( \"verbose\" );\n             additionalConfigFile = arguments.getOptionalPath( \"additional-config\" );\n-            reportDir = arguments.getOptionalPath( \"report-dir\" )\n-                    .orElseThrow( () -> new IllegalArgumentException( \"report-dir must be a valid path\" ) );\n-        }\n+            reportDir = arguments.getOptionalPath( \"report-dir\" ).orElseThrow( () -> new IllegalArgumentException( \"report-dir must be a valid path\" ) );\n+    }\n         catch ( IllegalArgumentException e )\n         {\n             throw new IncorrectUsage( e.getMessage() );\n@@ -131,7 +115,8 @@ public class CheckConsistencyCommand implements AdminCommand\n             {\n                 throw new IncorrectUsage( \"Only one of '--\" + ARG_DATABASE + \"' and '--backup' can be specified.\" );\n             }\n-            if ( !backupPath.get().toFile().isDirectory() )\n+\n+if ( !backupPath.get().toFile().isDirectory() )\n             {\n                 throw new CommandFailed( format( \"Specified backup should be a directory: %s\", backupPath.get() ) );\n             }\n@@ -150,7 +135,8 @@ public class CheckConsistencyCommand implements AdminCommand\n             {\n                 checkGraph = config.get( ConsistencyCheckSettings.consistency_check_graph );\n             }\n-            if ( arguments.has( CHECK_INDEXES ) )\n+\n+if ( arguments.has( CHECK_INDEXES ) )\n             {\n                 checkIndexes = arguments.getBoolean( CHECK_INDEXES );\n             }\n@@ -158,7 +144,8 @@ public class CheckConsistencyCommand implements AdminCommand\n             {\n                 checkIndexes = config.get( ConsistencyCheckSettings.consistency_check_indexes );\n             }\n-            if ( arguments.has( CHECK_LABEL_SCAN_STORE ) )\n+\n+if ( arguments.has( CHECK_LABEL_SCAN_STORE ) )\n             {\n                 checkLabelScanStore = arguments.getBoolean( CHECK_LABEL_SCAN_STORE );\n             }\n@@ -166,7 +153,8 @@ public class CheckConsistencyCommand implements AdminCommand\n             {\n                 checkLabelScanStore = config.get( ConsistencyCheckSettings.consistency_check_label_scan_store );\n             }\n-            if ( arguments.has( CHECK_PROPERTY_OWNERS ) )\n+\n+if ( arguments.has( CHECK_PROPERTY_OWNERS ) )\n             {\n                 checkPropertyOwners = arguments.getBoolean( CHECK_PROPERTY_OWNERS );\n             }\n@@ -192,17 +180,13 @@ public class CheckConsistencyCommand implements AdminCommand\n                 progressMonitorFactory = ProgressMonitorFactory.textual( System.out );\n             }\n \n-            ConsistencyCheckService.Result consistencyCheckResult = consistencyCheckService\n-                    .runFullConsistencyCheck( storeDir, config, progressMonitorFactory,\n-                            FormattedLogProvider.withZoneId( logTimeZone ).toOutputStream( System.out ), fileSystem,\n-                            verbose, reportDir.toFile(),\n-                            new ConsistencyFlags( checkGraph, checkIndexes, checkLabelScanStore, checkPropertyOwners ) );\n-\n-            if ( !consistencyCheckResult.isSuccessful() )\n+            ConsistencyCheckService.Result consistencyCheckResult = consistencyCheckService.runFullConsistencyCheck( storeDir, config, progressMonitorFactory,\n+                            FormattedLogProvider.withZoneId( logTimeZone ).toOutputStream( System.out ), fileSystem, verbose, reportDir.toFile(), new ConsistencyFlags( checkGraph, checkIndexes, checkLabelScanStore, checkPropertyOwners ) );\n+if ( !consistencyCheckResult.isSuccessful() )\n             {\n                 throw new CommandFailed( format( \"Inconsistencies found. See '%s' for details.\",\n                         consistencyCheckResult.reportFile() ) );\n-            }\n+    }\n         }\n         catch ( ConsistencyCheckIncompleteException | IOException e )\n         {\n@@ -220,9 +204,8 @@ public class CheckConsistencyCommand implements AdminCommand\n             }\n             catch ( IOException e )\n             {\n-                throw new IllegalArgumentException(\n-                        String.format( \"Could not read configuration file [%s]\", additionalConfigFile ), e );\n-            }\n+                throw new IllegalArgumentException( String.format( \"Could not read configuration file [%s]\", additionalConfigFile ), e );\n+    }\n         }\n \n         return new HashMap<>();\n@@ -231,37 +214,28 @@ public class CheckConsistencyCommand implements AdminCommand\n     private void checkDbState( File storeDir, Config additionalConfiguration ) throws CommandFailed\n     {\n         try ( FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n-              PageCache pageCache = ConfigurableStandalonePageCacheFactory\n-                      .createPageCache( fileSystem, additionalConfiguration ) )\n-        {\n-            RecoveryRequiredChecker requiredChecker =\n-                    new RecoveryRequiredChecker( fileSystem, pageCache, additionalConfiguration, new Monitors() );\n-            if ( requiredChecker.isRecoveryRequiredAt( storeDir ) )\n+PageCache pageCache = ConfigurableStandalonePageCacheFactory.createPageCache( fileSystem, additionalConfiguration ) )\n+{\n+            RecoveryRequiredChecker requiredChecker = new RecoveryRequiredChecker( fileSystem, pageCache, additionalConfiguration, new Monitors() );\n+if ( requiredChecker.isRecoveryRequiredAt( storeDir ) )\n             {\n-                throw new CommandFailed(\n-                        Strings.joinAsLines( \"Active logical log detected, this might be a source of inconsistencies.\",\n-                                \"Please recover database before running the consistency check.\",\n-                                \"To perform recovery please start database and perform clean shutdown.\" ) );\n-            }\n+                throw new CommandFailed( Strings.joinAsLines( \"Active logical log detected, this might be a source of inconsistencies.\", \"Please recover database before running the consistency check.\", \"To perform recovery please start database and perform clean shutdown.\" ) );\n+    }\n         }\n         catch ( IOException e )\n         {\n-            outsideWorld.stdErrLine(\n-                    \"Failure when checking for recovery state: '%s', continuing as normal.%n\" + e.getMessage() );\n-        }\n+            outsideWorld.stdErrLine( \"Failure when checking for recovery state: '%s', continuing as normal.%n\" + e.getMessage() );\n+    }\n     }\n \n-    private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName,\n-            Map<String,String> additionalConfig )\n+    private static Config loadNeo4jConfig( Path homeDir, Path configDir, String databaseName, Map<String,String> additionalConfig )\n     {\n         additionalConfig.put( GraphDatabaseSettings.active_database.name(), databaseName );\n-\n-        return Config.fromFile( configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ) ).withHome( homeDir ).withConnectorsDisabled()\n-                .withSettings( additionalConfig ).build();\n+return Config.fromFile( configDir.resolve( Config.DEFAULT_CONFIG_FILE_NAME ) ).withHome( homeDir ).withConnectorsDisabled().withSettings( additionalConfig ).build();\n     }\n \n     public static Arguments arguments()\n     {\n         return arguments;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}