{
    "project_name": "graphfoundation-ongdb",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "129",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/28/AsyncEvents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/28/AsyncEvents.java\nindex 68cbbe09b2b..6f7ff0cc08f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/28/AsyncEvents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/28/AsyncEvents.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.concurrent;\n \n import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n@@ -25,16 +26,16 @@ import java.util.function.Consumer;\n \n /**\n  * {@code AsyncEvents} is a mechanism for queueing up events to be processed asynchronously in a background thread.\n- *\n+ * <p>\n  * The {@code AsyncEvents} object implements {@link Runnable}, so it can be passed to a thread pool, or given to a\n  * dedicated thread. The runnable will then occupy a thread and dedicate it to background processing of events, until\n  * the {@code AsyncEvents} is {@link AsyncEvents#shutdown()}.\n- *\n+ * <p>\n  * If events are sent to an {@code AsyncEvents} that has been shut down, then those events will be processed in the\n  * foreground as a fall-back.\n- *\n+ * <p>\n  * Note, however, that no events are processed until the background thread is started.\n- *\n+ * <p>\n  * The {@code AsyncEvents} is given a {@link Consumer} of the specified event type upon construction, and will use it\n  * for doing the actual processing of events once they have been collected.\n  *\n@@ -42,162 +43,161 @@ import java.util.function.Consumer;\n  */\n public class AsyncEvents<T extends AsyncEvent> implements AsyncEventSender<T>, Runnable\n {\n-    public interface Monitor\n+  public interface Monitor\n+  {\n+    void eventCount(long count);\n+\n+    Monitor NONE = count -> {\n+    };\n+  }\n+\n+  // TODO use VarHandles in Java 9\n+  private static final AtomicReferenceFieldUpdater<AsyncEvents, AsyncEvent> STACK_UPDATER =\n+      AtomicReferenceFieldUpdater.newUpdater(AsyncEvents.class, AsyncEvent.class, \"stack\");\n+  private static final Sentinel END_SENTINEL = new Sentinel(\"END\");\n+  private static final Sentinel SHUTDOWN_SENTINEL = new Sentinel(\"SHUTDOWN\");\n+\n+  private final Consumer<T> eventConsumer;\n+  private final Monitor monitor;\n+  private final BinaryLatch startupLatch;\n+  private final BinaryLatch shutdownLatch;\n+\n+  @SuppressWarnings({\"unused\", \"FieldCanBeLocal\"})\n+  private volatile AsyncEvent stack; // Accessed via AtomicReferenceFieldUpdater\n+  private volatile Thread backgroundThread;\n+  private volatile boolean shutdown;\n+\n+  /**\n+   * Construct a new {@code AsyncEvents} instance, that will use the given consumer to process the events.\n+   *\n+   * @param eventConsumer The {@link Consumer} used for processing the events that are sent in.\n+   */\n+  public AsyncEvents(Consumer<T> eventConsumer, Monitor monitor)\n+  {\n+    this.eventConsumer = eventConsumer;\n+    this.monitor = monitor;\n+    this.startupLatch = new BinaryLatch();\n+    this.shutdownLatch = new BinaryLatch();\n+    this.stack = END_SENTINEL;\n+  }\n+\n+  @Override\n+  public void send(T event)\n+  {\n+    AsyncEvent prev = STACK_UPDATER.getAndSet(this, event);\n+    assert prev != null;\n+    event.next = prev;\n+    if (prev == END_SENTINEL)\n     {\n-        void eventCount( long count );\n-\n-        Monitor NONE = count -> {};\n-    }\n-\n-    // TODO use VarHandles in Java 9\n-    private static final AtomicReferenceFieldUpdater<AsyncEvents,AsyncEvent> STACK_UPDATER =\n-            AtomicReferenceFieldUpdater.newUpdater( AsyncEvents.class, AsyncEvent.class, \"stack\" );\n-    private static final Sentinel END_SENTINEL = new Sentinel( \"END\" );\n-    private static final Sentinel SHUTDOWN_SENTINEL = new Sentinel( \"SHUTDOWN\" );\n-\n-    private final Consumer<T> eventConsumer;\n-    private final Monitor monitor;\n-    private final BinaryLatch startupLatch;\n-    private final BinaryLatch shutdownLatch;\n-\n-    @SuppressWarnings( {\"unused\", \"FieldCanBeLocal\"} )\n-    private volatile AsyncEvent stack; // Accessed via AtomicReferenceFieldUpdater\n-    private volatile Thread backgroundThread;\n-    private volatile boolean shutdown;\n-\n-    /**\n-     * Construct a new {@code AsyncEvents} instance, that will use the given consumer to process the events.\n-     *\n-     * @param eventConsumer The {@link Consumer} used for processing the events that are sent in.\n-     */\n-    public AsyncEvents( Consumer<T> eventConsumer, Monitor monitor )\n+      LockSupport.unpark(backgroundThread);\n+    } else if (prev == SHUTDOWN_SENTINEL)\n     {\n-        this.eventConsumer = eventConsumer;\n-        this.monitor = monitor;\n-        this.startupLatch = new BinaryLatch();\n-        this.shutdownLatch = new BinaryLatch();\n-        this.stack = END_SENTINEL;\n+      AsyncEvent events = STACK_UPDATER.getAndSet(this, SHUTDOWN_SENTINEL);\n+      process(events);\n     }\n+  }\n \n-    @Override\n-    public void send( T event )\n-    {\n-        AsyncEvent prev = STACK_UPDATER.getAndSet( this, event );\n-        assert prev != null;\n-        event.next = prev;\n-        if ( prev == END_SENTINEL )\n-        {\n-            LockSupport.unpark( backgroundThread );\n-        }\n-        else if ( prev == SHUTDOWN_SENTINEL )\n-        {\n-            AsyncEvent events = STACK_UPDATER.getAndSet( this, SHUTDOWN_SENTINEL );\n-            process( events );\n-        }\n-    }\n+  @Override\n+  public void run()\n+  {\n+    assert backgroundThread == null : \"A thread is already running \" + backgroundThread;\n+    backgroundThread = Thread.currentThread();\n+    startupLatch.release();\n \n-    @Override\n-    public void run()\n+    try\n     {\n-        assert backgroundThread == null : \"A thread is already running \" + backgroundThread;\n-        backgroundThread = Thread.currentThread();\n-        startupLatch.release();\n-\n-        try\n-        {\n-            do\n-            {\n-                AsyncEvent events = STACK_UPDATER.getAndSet( this, END_SENTINEL );\n-                process( events );\n-                if ( stack == END_SENTINEL && !shutdown )\n-                {\n-                    LockSupport.park( this );\n-                }\n-            }\n-            while ( !shutdown );\n-\n-            AsyncEvent events = STACK_UPDATER.getAndSet( this, SHUTDOWN_SENTINEL );\n-            process( events );\n-        }\n-        finally\n+      do\n+      {\n+        AsyncEvent events = STACK_UPDATER.getAndSet(this, END_SENTINEL);\n+        process(events);\n+        if (stack == END_SENTINEL && !shutdown)\n         {\n-            backgroundThread = null;\n-            shutdownLatch.release();\n+          LockSupport.park(this);\n         }\n-    }\n+      }\n+      while (!shutdown);\n \n-    private void process( AsyncEvent events )\n+      AsyncEvent events = STACK_UPDATER.getAndSet(this, SHUTDOWN_SENTINEL);\n+      process(events);\n+    } finally\n     {\n-        events = reverseAndStripEndMark( events );\n-\n-        while ( events != null )\n-        {\n-            @SuppressWarnings( \"unchecked\" )\n-            T event = (T) events;\n-            eventConsumer.accept( event );\n-            events = events.next;\n-        }\n+      backgroundThread = null;\n+      shutdownLatch.release();\n     }\n+  }\n+\n+  private void process(AsyncEvent events)\n+  {\n+    events = reverseAndStripEndMark(events);\n \n-    private AsyncEvent reverseAndStripEndMark( AsyncEvent events )\n+    while (events != null)\n     {\n-        AsyncEvent result = null;\n-        long count = 0;\n-        while ( events != END_SENTINEL && events != SHUTDOWN_SENTINEL )\n-        {\n-            AsyncEvent next;\n-            do\n-            {\n-                next = events.next;\n-            }\n-            while ( next == null );\n-            events.next = result;\n-            result = events;\n-            events = next;\n-            count++;\n-        }\n-        if ( count > 0 )\n-        {\n-            monitor.eventCount( count );\n-        }\n-        return result;\n+      @SuppressWarnings(\"unchecked\")\n+      T event = (T) events;\n+      eventConsumer.accept(event);\n+      events = events.next;\n     }\n+  }\n \n-    /**\n-     * Initiate the shut down process of this {@code AsyncEvents} instance.\n-     *\n-     * This call does not block or otherwise wait for the background thread to terminate.\n-     */\n-    public void shutdown()\n+  private AsyncEvent reverseAndStripEndMark(AsyncEvent events)\n+  {\n+    AsyncEvent result = null;\n+    long count = 0;\n+    while (events != END_SENTINEL && events != SHUTDOWN_SENTINEL)\n     {\n-        assert !shutdown : \"Already shut down\";\n-        shutdown = true;\n-        LockSupport.unpark( backgroundThread );\n+      AsyncEvent next;\n+      do\n+      {\n+        next = events.next;\n+      }\n+      while (next == null);\n+      events.next = result;\n+      result = events;\n+      events = next;\n+      count++;\n     }\n-\n-    public void awaitStartup()\n+    if (count > 0)\n     {\n-        startupLatch.await();\n+      monitor.eventCount(count);\n     }\n-\n-    public void awaitTermination()\n+    return result;\n+  }\n+\n+  /**\n+   * Initiate the shut down process of this {@code AsyncEvents} instance.\n+   * <p>\n+   * This call does not block or otherwise wait for the background thread to terminate.\n+   */\n+  public void shutdown()\n+  {\n+    assert !shutdown : \"Already shut down\";\n+    shutdown = true;\n+    LockSupport.unpark(backgroundThread);\n+  }\n+\n+  public void awaitStartup()\n+  {\n+    startupLatch.await();\n+  }\n+\n+  public void awaitTermination()\n+  {\n+    shutdownLatch.await();\n+  }\n+\n+  private static class Sentinel extends AsyncEvent\n+  {\n+    private final String str;\n+\n+    Sentinel(String identifier)\n     {\n-        shutdownLatch.await();\n+      this.str = \"AsyncEvent/Sentinel[\" + identifier + \"]\";\n     }\n \n-    private static class Sentinel extends AsyncEvent\n+    @Override\n+    public String toString()\n     {\n-        private final String str;\n-\n-        Sentinel( String identifier )\n-        {\n-            this.str = \"AsyncEvent/Sentinel[\" + identifier + \"]\";\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return str;\n-        }\n+      return str;\n     }\n+  }\n }\n",
            "diff_size": 230
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "column": "35",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/28/AsyncEvents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/28/AsyncEvents.java\nindex 68cbbe09b2b..b6af33bd165 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/28/AsyncEvents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/28/AsyncEvents.java\n@@ -45,14 +45,14 @@ public class AsyncEvents<T extends AsyncEvent> implements AsyncEventSender<T>, R\n     public interface Monitor\n     {\n         void eventCount( long count );\n-\n-        Monitor NONE = count -> {};\n+Monitor NONE = count -> {\n+};\n     }\n \n     // TODO use VarHandles in Java 9\n-    private static final AtomicReferenceFieldUpdater<AsyncEvents,AsyncEvent> STACK_UPDATER =\n-            AtomicReferenceFieldUpdater.newUpdater( AsyncEvents.class, AsyncEvent.class, \"stack\" );\n-    private static final Sentinel END_SENTINEL = new Sentinel( \"END\" );\n+    private static final AtomicReferenceFieldUpdater<AsyncEvents,AsyncEvent> STACK_UPDATER = AtomicReferenceFieldUpdater.newUpdater( AsyncEvents.class, AsyncEvent.class, \"stack\" );\n+\n+private static final Sentinel END_SENTINEL = new Sentinel( \"END\" );\n     private static final Sentinel SHUTDOWN_SENTINEL = new Sentinel( \"SHUTDOWN\" );\n \n     private final Consumer<T> eventConsumer;\n@@ -115,8 +115,7 @@ public class AsyncEvents<T extends AsyncEvent> implements AsyncEventSender<T>, R\n                 }\n             }\n             while ( !shutdown );\n-\n-            AsyncEvent events = STACK_UPDATER.getAndSet( this, SHUTDOWN_SENTINEL );\n+AsyncEvent events = STACK_UPDATER.getAndSet( this, SHUTDOWN_SENTINEL );\n             process( events );\n         }\n         finally\n@@ -153,14 +152,15 @@ public class AsyncEvents<T extends AsyncEvent> implements AsyncEventSender<T>, R\n             while ( next == null );\n             events.next = result;\n             result = events;\n-            events = next;\n-            count++;\n+            events = next; count++;\n         }\n-        if ( count > 0 )\n+\n+if ( count > 0 )\n         {\n             monitor.eventCount( count );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -200,4 +200,4 @@ public class AsyncEvents<T extends AsyncEvent> implements AsyncEventSender<T>, R\n             return str;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}