{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4531",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4531/IdAssigningThreadLocal.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4531/IdAssigningThreadLocal.java\nindex 944bd685ce5..a313a5d2585 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4531/IdAssigningThreadLocal.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4531/IdAssigningThreadLocal.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.concurrent.atomic.AtomicInteger;\n@@ -27,21 +28,21 @@ import java.util.concurrent.atomic.AtomicInteger;\n  */\n public abstract class IdAssigningThreadLocal<T> extends ThreadLocal<T>\n {\n-    private final AtomicInteger id = new AtomicInteger();\n+  private final AtomicInteger id = new AtomicInteger();\n \n-    @Override\n-    protected final T initialValue()\n-    {\n-        return initialValue( id.getAndIncrement() );\n-    }\n+  @Override\n+  protected final T initialValue()\n+  {\n+    return initialValue(id.getAndIncrement());\n+  }\n \n-    protected abstract T initialValue( int id );\n+  protected abstract T initialValue(int id);\n \n-    /**\n-     * Resets the id counter so that the next call to {@link #initialValue(int)} will get {@code 0}.\n-     */\n-    public void resetId()\n-    {\n-        id.set( 0 );\n-    }\n+  /**\n+   * Resets the id counter so that the next call to {@link #initialValue(int)} will get {@code 0}.\n+   */\n+  public void resetId()\n+  {\n+    id.set(0);\n+  }\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4531/IdAssigningThreadLocal.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4531/IdAssigningThreadLocal.java\nindex 944bd685ce5..9af73c2a69b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4531/IdAssigningThreadLocal.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4531/IdAssigningThreadLocal.java\n@@ -44,4 +44,4 @@ public abstract class IdAssigningThreadLocal<T> extends ThreadLocal<T>\n     {\n         id.set( 0 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "29",
                    "column": "46",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4531/IdAssigningThreadLocal.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4531/IdAssigningThreadLocal.java\nindex 944bd685ce5..81687f83288 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4531/IdAssigningThreadLocal.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4531/IdAssigningThreadLocal.java\n@@ -25,23 +25,25 @@ import java.util.concurrent.atomic.AtomicInteger;\n  * A {@link ThreadLocal} which additionally assigns a zero-based id to each thread-local value created in\n  * {@link #initialValue(int)}.\n  */\n-public abstract class IdAssigningThreadLocal<T> extends ThreadLocal<T>\n+\n+public abstract class IdAssigningThreadLocal <T> extends ThreadLocal<T>\n {\n     private final AtomicInteger id = new AtomicInteger();\n-\n     @Override\n     protected final T initialValue()\n     {\n         return initialValue( id.getAndIncrement() );\n     }\n \n-    protected abstract T initialValue( int id );\n+    protected abstract T initialValue( int id )\n+    ;\n \n     /**\n      * Resets the id counter so that the next call to {@link #initialValue(int)} will get {@code 0}.\n      */\n+\n     public void resetId()\n     {\n         id.set( 0 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}