{
    "project_name": "wso2-attic-commons",
    "error_id": "197",
    "information": {
        "errors": [
            {
                "line": "102",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 166).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * @param inlineSchemaEntityResolver An inline schema entity resolver.\n   */\n  protected void validateXSD(String schema, boolean inlineXSD, XMLEntityResolver entityResolver, String targetNamespace, XMLEntityResolver inlineSchemaEntityResolver)\n  {\n    ValidateErrorHandler errorHandler = new ValidateErrorHandler();\n    errorHandler.getErrorMessages().clear();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/197/XSDValidator.java\nindex bad3c7157e0..9de89dbf4ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/197/XSDValidator.java\n@@ -99,9 +99,10 @@ public class XSDValidator\n    * @param targetNamespace The target namespace of the schema being validated.\n    * @param inlineSchemaEntityResolver An inline schema entity resolver.\n    */\n-  protected void validateXSD(String schema, boolean inlineXSD, XMLEntityResolver entityResolver, String targetNamespace, XMLEntityResolver inlineSchemaEntityResolver)\n-  {\n-    ValidateErrorHandler errorHandler = new ValidateErrorHandler();\n+  protected void validateXSD(String schema, boolean inlineXSD, XMLEntityResolver entityResolver,\n+          String targetNamespace, XMLEntityResolver inlineSchemaEntityResolver)\n+   {\n+     ValidateErrorHandler errorHandler = new ValidateErrorHandler();\n     errorHandler.getErrorMessages().clear();\n     try\n     {\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/197/XSDValidator.java\nindex bad3c7157e0..b3f8168ef19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/197/XSDValidator.java\n@@ -8,6 +8,7 @@\n  * Contributors:\n  *   IBM - Initial API and implementation\n  *******************************************************************************/\n+\n package org.eclipse.wst.wsi.internal.core.wsdl.xsd;\n \n import java.io.Reader;\n@@ -27,11 +28,10 @@ import org.apache.xerces.xs.XSModel;\n \n /**\n  * Validate schemas from files or String.\n- * \n+ *\n  * @author Lawrence Mandel (lmandel@ca.ibm.com)\n  */\n-public class XSDValidator\n-{\n+public class XSDValidator {\n   private XSModel xsModel;\n   private boolean isValidXSD;\n   private List errors;\n@@ -40,31 +40,30 @@ public class XSDValidator\n   /**\n    * Constructor.\n    */\n-  public XSDValidator()\n-  {\n+  public XSDValidator() {\n     xsModel = null;\n     isValidXSD = false;\n     errors = new ArrayList();\n   }\n+\n   /**\n    * Validate an inline schema.\n-   * \n-   * @param schema A schema represented as a string.\n+   *\n+   * @param schema          A schema represented as a string.\n    * @param targetNamespace The target namespace of the schema.\n-   * @param fileloc The uri of the file that contains the schema.\n+   * @param fileloc         The uri of the file that contains the schema.\n    */\n-  public void validateInlineSchema(String schema, String targetNamespace, String fileloc)\n-  {\n+  public void validateInlineSchema(String schema, String targetNamespace, String fileloc) {\n     validateInlineSchema(schema, targetNamespace, fileloc, null, null);\n   }\n \n   /**\n    * Validate an inline schema and specify an entity resolver.\n-   * \n-   * @param schema This schema represented as a string.\n-   * @param targetNamespace The target namespace of the schema.\n-   * @param fileloc The uri of the file that contains this schema.\n-   * @param entityResolverChain The entity resolver chain.\n+   *\n+   * @param schema                     This schema represented as a string.\n+   * @param targetNamespace            The target namespace of the schema.\n+   * @param fileloc                    The uri of the file that contains this schema.\n+   * @param entityResolverChain        The entity resolver chain.\n    * @param inlineSchemaEntityResolver An inline schema resolver for this schema.\n    */\n   public void validateInlineSchema(\n@@ -72,119 +71,105 @@ public class XSDValidator\n     String targetNamespace,\n     String fileloc,\n     XMLEntityResolver entityResolverChain,\n-    XMLEntityResolver inlineSchemaEntityResolver)\n-  {\n+    XMLEntityResolver inlineSchemaEntityResolver) {\n     filelocation = fileloc;\n \n-    validateXSD(schema, true, entityResolverChain,targetNamespace, inlineSchemaEntityResolver);\n+    validateXSD(schema, true, entityResolverChain, targetNamespace, inlineSchemaEntityResolver);\n   }\n \n   /**\n    * Validate the file located at the uri specified with the given entity resolver.\n-   * \n-   * @param uri An absolute uri for the schema location.\n+   *\n+   * @param uri            An absolute uri for the schema location.\n    * @param entityResolver An entity resolver to be used.\n    */\n-  public void validate(String uri, XMLEntityResolver entityResolver)\n-  {\n+  public void validate(String uri, XMLEntityResolver entityResolver) {\n     validateXSD(uri, false, entityResolver, null, null);\n   }\n \n   /**\n    * Validate the schema.\n-   * \n-   * @param schema The schema or it's location.\n-   * @param inlineXSD True if an inline schema, false otherwise.\n-   * @param entityResolver An entity resolver to use.\n-   * @param targetNamespace The target namespace of the schema being validated.\n+   *\n+   * @param schema                     The schema or it's location.\n+   * @param inlineXSD                  True if an inline schema, false otherwise.\n+   * @param entityResolver             An entity resolver to use.\n+   * @param targetNamespace            The target namespace of the schema being validated.\n    * @param inlineSchemaEntityResolver An inline schema entity resolver.\n    */\n-  protected void validateXSD(String schema, boolean inlineXSD, XMLEntityResolver entityResolver, String targetNamespace, XMLEntityResolver inlineSchemaEntityResolver)\n-  {\n+  protected void validateXSD(String schema, boolean inlineXSD, XMLEntityResolver entityResolver, String targetNamespace,\n+                             XMLEntityResolver inlineSchemaEntityResolver) {\n     ValidateErrorHandler errorHandler = new ValidateErrorHandler();\n     errorHandler.getErrorMessages().clear();\n-    try\n-    {\n-\t\tXMLGrammarPreparser grammarPreparser = new XMLGrammarPreparser();\n-\t\tXMLGrammarPool grammarPool = new XMLGrammarPoolImpl();\n-\t\tgrammarPreparser.setGrammarPool(grammarPool);\n-\t \n+    try {\n+      XMLGrammarPreparser grammarPreparser = new XMLGrammarPreparser();\n+      XMLGrammarPool grammarPool = new XMLGrammarPoolImpl();\n+      grammarPreparser.setGrammarPool(grammarPool);\n+\n       grammarPreparser.setErrorHandler(errorHandler);\n-      if (entityResolver != null)\n-      {\n-\t\tgrammarPreparser.setEntityResolver(entityResolver);\n+      if (entityResolver != null) {\n+        grammarPreparser.setEntityResolver(entityResolver);\n       }\n \n-      try\n-      {\n-\t\tXMLInputSource is = null;\n+      try {\n+        XMLInputSource is = null;\n         // this allows support for the inline schema in WSDL documents\n-        if (inlineXSD)\n-        {\n-        \t\n-        \tReader reader = new StringReader(schema);\n-\t\t\tis = new XMLInputSource(null,filelocation,filelocation,reader,null);\n-\t\t\t\n-\t\t\t((InlineXSDResolver)inlineSchemaEntityResolver).addReferringSchema(is,targetNamespace);\n+        if (inlineXSD) {\n+\n+          Reader reader = new StringReader(schema);\n+          is = new XMLInputSource(null, filelocation, filelocation, reader, null);\n+\n+          ((InlineXSDResolver) inlineSchemaEntityResolver).addReferringSchema(is, targetNamespace);\n \n         }\n         // get the input source for an external schema file\n-        else\n-        {\n-          is = new XMLInputSource(null,schema,schema);\n+        else {\n+          is = new XMLInputSource(null, schema, schema);\n         }\n-        \n-        grammarPreparser.registerPreparser(XMLGrammarDescription.XML_SCHEMA,null/*schemaLoader*/);\n+\n+        grammarPreparser.registerPreparser(XMLGrammarDescription.XML_SCHEMA, null/*schemaLoader*/);\n         grammarPreparser.getLoader(XMLGrammarDescription.XML_SCHEMA);\n \n-\t\tXSGrammar grammar = (XSGrammar)grammarPreparser.preparseGrammar(XMLGrammarDescription.XML_SCHEMA,is);\n-\t\txsModel = grammar.toXSModel();\n-      }\n-      catch (Exception e)\n-      {\n+        XSGrammar grammar = (XSGrammar) grammarPreparser.preparseGrammar(XMLGrammarDescription.XML_SCHEMA, is);\n+        xsModel = grammar.toXSModel();\n+      } catch (Exception e) {\n         //parser will return null pointer exception if the document is structurally invalid\n         errors.add(\"Schema is structurally invalid.\");\n       }\n \n       errors.addAll(errorHandler.getErrorMessages());\n+    } catch (Exception e) {\n+      System.out.println(e);\n     }\n-    catch (Exception e)\n-    {\n-    \tSystem.out.println(e);\n-    }\n-    if (errors.isEmpty())\n-    {\n+    if (errors.isEmpty()) {\n       isValidXSD = true;\n     }\n   }\n \n   /**\n    * Returns the XSModel created.\n-   * \n+   *\n    * @return The XSModel created.\n    */\n \n-  public XSModel getXSModel()\n-  {\n-  \treturn xsModel;\n+  public XSModel getXSModel() {\n+    return xsModel;\n   }\n+\n   /**\n    * Returns true if the schema is valid, false otherwise.\n-   * \n+   *\n    * @return True if the schema is valid, false otherwise.\n    */\n-  public boolean isValid()\n-  {\n+  public boolean isValid() {\n     return isValidXSD;\n   }\n \n   /**\n    * Return the error list.\n-   * \n+   *\n    * @return A list of error from the schema.\n    */\n-  public List getErrors()\n-  {\n+  public List getErrors() {\n     return errors;\n   }\n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/197/XSDValidator.java\nindex bad3c7157e0..6d52fa0a633 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/197/XSDValidator.java\n@@ -105,29 +105,25 @@ public class XSDValidator\n     errorHandler.getErrorMessages().clear();\n     try\n     {\n-\t\tXMLGrammarPreparser grammarPreparser = new XMLGrammarPreparser();\n+  XMLGrammarPreparser grammarPreparser = new XMLGrammarPreparser();\n \t\tXMLGrammarPool grammarPool = new XMLGrammarPoolImpl();\n \t\tgrammarPreparser.setGrammarPool(grammarPool);\n-\t \n-      grammarPreparser.setErrorHandler(errorHandler);\n-      if (entityResolver != null)\n+grammarPreparser.setErrorHandler(errorHandler);\n+if (entityResolver != null)\n       {\n-\t\tgrammarPreparser.setEntityResolver(entityResolver);\n+  grammarPreparser.setEntityResolver(entityResolver);\n       }\n \n-      try\n-      {\n-\t\tXMLInputSource is = null;\n-        // this allows support for the inline schema in WSDL documents\n+      try {\n+  XMLInputSource is = null;\n+\n+// this allows support for the inline schema in WSDL documents\n         if (inlineXSD)\n         {\n-        \t\n-        \tReader reader = new StringReader(schema);\n-\t\t\tis = new XMLInputSource(null,filelocation,filelocation,reader,null);\n-\t\t\t\n-\t\t\t((InlineXSDResolver)inlineSchemaEntityResolver).addReferringSchema(is,targetNamespace);\n-\n-        }\n+  Reader reader = new StringReader(schema);\n+is = new XMLInputSource(null,filelocation,filelocation,reader,null);\n+((InlineXSDResolver)inlineSchemaEntityResolver).addReferringSchema(is,targetNamespace);\n+    }\n         // get the input source for an external schema file\n         else\n         {\n@@ -136,10 +132,9 @@ public class XSDValidator\n         \n         grammarPreparser.registerPreparser(XMLGrammarDescription.XML_SCHEMA,null/*schemaLoader*/);\n         grammarPreparser.getLoader(XMLGrammarDescription.XML_SCHEMA);\n-\n-\t\tXSGrammar grammar = (XSGrammar)grammarPreparser.preparseGrammar(XMLGrammarDescription.XML_SCHEMA,is);\n+XSGrammar grammar = (XSGrammar)grammarPreparser.preparseGrammar(XMLGrammarDescription.XML_SCHEMA,is);\n \t\txsModel = grammar.toXSModel();\n-      }\n+    }\n       catch (Exception e)\n       {\n         //parser will return null pointer exception if the document is structurally invalid\n@@ -163,8 +158,7 @@ public class XSDValidator\n    * \n    * @return The XSModel created.\n    */\n-\n-  public XSModel getXSModel()\n+public XSModel getXSModel()\n   {\n   \treturn xsModel;\n   }\n@@ -187,4 +181,4 @@ public class XSDValidator\n   {\n     return errors;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/197/XSDValidator.java\nindex bad3c7157e0..9de89dbf4ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/197/XSDValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/197/XSDValidator.java\n@@ -99,9 +99,10 @@ public class XSDValidator\n    * @param targetNamespace The target namespace of the schema being validated.\n    * @param inlineSchemaEntityResolver An inline schema entity resolver.\n    */\n-  protected void validateXSD(String schema, boolean inlineXSD, XMLEntityResolver entityResolver, String targetNamespace, XMLEntityResolver inlineSchemaEntityResolver)\n-  {\n-    ValidateErrorHandler errorHandler = new ValidateErrorHandler();\n+  protected void validateXSD(String schema, boolean inlineXSD, XMLEntityResolver entityResolver,\n+          String targetNamespace, XMLEntityResolver inlineSchemaEntityResolver)\n+   {\n+     ValidateErrorHandler errorHandler = new ValidateErrorHandler();\n     errorHandler.getErrorMessages().clear();\n     try\n     {\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}