{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3825",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3825/EmbeddedGraphDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3825/EmbeddedGraphDatabase.java\nindex 023ee5dce8b..13d101fc0c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3825/EmbeddedGraphDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3825/EmbeddedGraphDatabase.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal;\n \n import java.io.File;\n@@ -53,50 +54,50 @@ import static org.neo4j.kernel.GraphDatabaseDependencies.newDependencies;\n  */\n public class EmbeddedGraphDatabase extends GraphDatabaseFacade\n {\n-    /**\n-     * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n-     */\n-    public EmbeddedGraphDatabase( String storeDir,\n-                                  Map<String, String> params,\n-                                  GraphDatabaseFacadeFactory.Dependencies dependencies )\n-    {\n-        this( new File( storeDir ), params, dependencies );\n-    }\n+  /**\n+   * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n+   */\n+  public EmbeddedGraphDatabase(String storeDir,\n+                               Map<String, String> params,\n+                               GraphDatabaseFacadeFactory.Dependencies dependencies)\n+  {\n+    this(new File(storeDir), params, dependencies);\n+  }\n \n-    /**\n-     * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n-     */\n-    public EmbeddedGraphDatabase( File storeDir,\n-                                  Map<String, String> params,\n-                                  GraphDatabaseFacadeFactory.Dependencies dependencies )\n-    {\n-        create( storeDir, params, dependencies );\n-    }\n+  /**\n+   * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n+   */\n+  public EmbeddedGraphDatabase(File storeDir,\n+                               Map<String, String> params,\n+                               GraphDatabaseFacadeFactory.Dependencies dependencies)\n+  {\n+    create(storeDir, params, dependencies);\n+  }\n \n-    /**\n-     * Internal constructor used by ImpermanentGraphDatabase\n-     */\n-    protected EmbeddedGraphDatabase( File storeDir,\n-            Config config,\n-            GraphDatabaseFacadeFactory.Dependencies dependencies )\n-    {\n-        create( storeDir, config, dependencies );\n-    }\n+  /**\n+   * Internal constructor used by ImpermanentGraphDatabase\n+   */\n+  protected EmbeddedGraphDatabase(File storeDir,\n+                                  Config config,\n+                                  GraphDatabaseFacadeFactory.Dependencies dependencies)\n+  {\n+    create(storeDir, config, dependencies);\n+  }\n \n-    protected void create( File storeDir, Map<String,String> params,\n-            GraphDatabaseFacadeFactory.Dependencies dependencies )\n-    {\n-        GraphDatabaseDependencies newDependencies = newDependencies( dependencies )\n-                .settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n-        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new )\n-                .initFacade( storeDir, params, newDependencies, this );\n-    }\n+  protected void create(File storeDir, Map<String, String> params,\n+                        GraphDatabaseFacadeFactory.Dependencies dependencies)\n+  {\n+    GraphDatabaseDependencies newDependencies = newDependencies(dependencies)\n+        .settingsClasses(asList(append(GraphDatabaseSettings.class, dependencies.settingsClasses())));\n+    new GraphDatabaseFacadeFactory(DatabaseInfo.COMMUNITY, CommunityEditionModule::new)\n+        .initFacade(storeDir, params, newDependencies, this);\n+  }\n \n-    protected void create( File storeDir, Config config, GraphDatabaseFacadeFactory.Dependencies dependencies )\n-    {\n-        GraphDatabaseDependencies newDependencies = newDependencies( dependencies )\n-                .settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n-        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new )\n-                .initFacade( storeDir, config, newDependencies, this );\n-    }\n+  protected void create(File storeDir, Config config, GraphDatabaseFacadeFactory.Dependencies dependencies)\n+  {\n+    GraphDatabaseDependencies newDependencies = newDependencies(dependencies)\n+        .settingsClasses(asList(append(GraphDatabaseSettings.class, dependencies.settingsClasses())));\n+    new GraphDatabaseFacadeFactory(DatabaseInfo.COMMUNITY, CommunityEditionModule::new)\n+        .initFacade(storeDir, config, newDependencies, this);\n+  }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3825/EmbeddedGraphDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3825/EmbeddedGraphDatabase.java\nindex 023ee5dce8b..314f2b063a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3825/EmbeddedGraphDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3825/EmbeddedGraphDatabase.java\n@@ -56,20 +56,18 @@ public class EmbeddedGraphDatabase extends GraphDatabaseFacade\n     /**\n      * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n      */\n-    public EmbeddedGraphDatabase( String storeDir,\n-                                  Map<String, String> params,\n+    public EmbeddedGraphDatabase( String storeDir, Map<String,String> params,\n                                   GraphDatabaseFacadeFactory.Dependencies dependencies )\n-    {\n+{\n         this( new File( storeDir ), params, dependencies );\n     }\n \n     /**\n      * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n      */\n-    public EmbeddedGraphDatabase( File storeDir,\n-                                  Map<String, String> params,\n+    public EmbeddedGraphDatabase( File storeDir, Map<String,String> params,\n                                   GraphDatabaseFacadeFactory.Dependencies dependencies )\n-    {\n+{\n         create( storeDir, params, dependencies );\n     }\n \n@@ -86,17 +84,13 @@ public class EmbeddedGraphDatabase extends GraphDatabaseFacade\n     protected void create( File storeDir, Map<String,String> params,\n             GraphDatabaseFacadeFactory.Dependencies dependencies )\n     {\n-        GraphDatabaseDependencies newDependencies = newDependencies( dependencies )\n-                .settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n-        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new )\n-                .initFacade( storeDir, params, newDependencies, this );\n+        GraphDatabaseDependencies newDependencies = newDependencies( dependencies ).settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n+    new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new ).initFacade( storeDir, params, newDependencies, this );\n     }\n \n     protected void create( File storeDir, Config config, GraphDatabaseFacadeFactory.Dependencies dependencies )\n     {\n-        GraphDatabaseDependencies newDependencies = newDependencies( dependencies )\n-                .settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n-        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new )\n-                .initFacade( storeDir, config, newDependencies, this );\n+        GraphDatabaseDependencies newDependencies = newDependencies( dependencies ).settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n+    new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new ).initFacade( storeDir, config, newDependencies, this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3825/EmbeddedGraphDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3825/EmbeddedGraphDatabase.java\nindex 023ee5dce8b..fb26a5dca74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3825/EmbeddedGraphDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3825/EmbeddedGraphDatabase.java\n@@ -21,7 +21,6 @@ package org.neo4j.kernel.internal;\n \n import java.io.File;\n import java.util.Map;\n-\n import org.neo4j.graphdb.GraphDatabaseService;\n import org.neo4j.graphdb.factory.GraphDatabaseSettings;\n import org.neo4j.kernel.GraphDatabaseDependencies;\n@@ -30,9 +29,10 @@ import org.neo4j.kernel.impl.factory.CommunityEditionModule;\n import org.neo4j.kernel.impl.factory.DatabaseInfo;\n import org.neo4j.kernel.impl.factory.GraphDatabaseFacade;\n import org.neo4j.kernel.impl.factory.GraphDatabaseFacadeFactory;\n-\n import static org.neo4j.helpers.collection.Iterables.append;\n+\n import static org.neo4j.helpers.collection.Iterables.asList;\n+\n import static org.neo4j.kernel.GraphDatabaseDependencies.newDependencies;\n \n /**\n@@ -51,14 +51,13 @@ import static org.neo4j.kernel.GraphDatabaseDependencies.newDependencies;\n  * <p>\n  * For more information, see {@link GraphDatabaseService}.\n  */\n+\n public class EmbeddedGraphDatabase extends GraphDatabaseFacade\n {\n     /**\n      * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n      */\n-    public EmbeddedGraphDatabase( String storeDir,\n-                                  Map<String, String> params,\n-                                  GraphDatabaseFacadeFactory.Dependencies dependencies )\n+    public EmbeddedGraphDatabase( String storeDir, Map<String,String> params, GraphDatabaseFacadeFactory.Dependencies dependencies )\n     {\n         this( new File( storeDir ), params, dependencies );\n     }\n@@ -66,9 +65,8 @@ public class EmbeddedGraphDatabase extends GraphDatabaseFacade\n     /**\n      * Internal constructor used by {@link org.neo4j.graphdb.factory.GraphDatabaseFactory}\n      */\n-    public EmbeddedGraphDatabase( File storeDir,\n-                                  Map<String, String> params,\n-                                  GraphDatabaseFacadeFactory.Dependencies dependencies )\n+\n+    public EmbeddedGraphDatabase( File storeDir, Map<String,String> params, GraphDatabaseFacadeFactory.Dependencies dependencies )\n     {\n         create( storeDir, params, dependencies );\n     }\n@@ -76,27 +74,21 @@ public class EmbeddedGraphDatabase extends GraphDatabaseFacade\n     /**\n      * Internal constructor used by ImpermanentGraphDatabase\n      */\n-    protected EmbeddedGraphDatabase( File storeDir,\n-            Config config,\n-            GraphDatabaseFacadeFactory.Dependencies dependencies )\n+\n+    protected EmbeddedGraphDatabase( File storeDir, Config config, GraphDatabaseFacadeFactory.Dependencies dependencies )\n     {\n         create( storeDir, config, dependencies );\n     }\n \n-    protected void create( File storeDir, Map<String,String> params,\n-            GraphDatabaseFacadeFactory.Dependencies dependencies )\n+    protected void create( File storeDir, Map<String,String> params, GraphDatabaseFacadeFactory.Dependencies dependencies )\n     {\n-        GraphDatabaseDependencies newDependencies = newDependencies( dependencies )\n-                .settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n-        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new )\n-                .initFacade( storeDir, params, newDependencies, this );\n+        GraphDatabaseDependencies newDependencies = newDependencies( dependencies ).settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n+        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new ).initFacade( storeDir, params, newDependencies, this );\n     }\n \n     protected void create( File storeDir, Config config, GraphDatabaseFacadeFactory.Dependencies dependencies )\n     {\n-        GraphDatabaseDependencies newDependencies = newDependencies( dependencies )\n-                .settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n-        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new )\n-                .initFacade( storeDir, config, newDependencies, this );\n+        GraphDatabaseDependencies newDependencies = newDependencies( dependencies ).settingsClasses( asList( append( GraphDatabaseSettings.class, dependencies.settingsClasses() ) ) );\n+        new GraphDatabaseFacadeFactory( DatabaseInfo.COMMUNITY, CommunityEditionModule::new ).initFacade( storeDir, config, newDependencies, this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}