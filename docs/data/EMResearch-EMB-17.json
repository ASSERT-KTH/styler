{
    "project_name": "EMResearch-EMB",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "61",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      requestEvents.remove(0);\n    }\n    requestEvents.add(new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n  }\n  \n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/17/ErrorRequestLimiter.java\nindex af109292403..114d56ebcd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/17/ErrorRequestLimiter.java\n@@ -60,5 +60,5 @@ class ErrorRequestLimiter extends RequestLimiter {\n     }\n     requestEvents.add(new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n   }\n-  \n+\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/17/ErrorRequestLimiter.java\nindex af109292403..9f183fd34ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/17/ErrorRequestLimiter.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.server;\n \n import org.languagetool.JLanguageTool;\n@@ -29,36 +30,37 @@ import java.util.Map;\n  */\n class ErrorRequestLimiter extends RequestLimiter {\n \n-  /**\n-   * @param requestLimit the maximum number of request per <tt>requestLimitPeriodInSeconds</tt>\n-   * @param requestLimitPeriodInSeconds the time period over which requests are considered, in seconds\n-   */\n-  ErrorRequestLimiter(int requestLimit, int requestLimitPeriodInSeconds) {\n-    super(requestLimit, 0, requestLimitPeriodInSeconds);\n-  }\n+    /**\n+     * @param requestLimit                the maximum number of request per <tt>requestLimitPeriodInSeconds</tt>\n+     * @param requestLimitPeriodInSeconds the time period over which requests are considered, in seconds\n+     */\n+    ErrorRequestLimiter(int requestLimit, int requestLimitPeriodInSeconds) {\n+        super(requestLimit, 0, requestLimitPeriodInSeconds);\n+    }\n \n-  /**\n-   * @param ipAddress the client's IP address\n-   * @return true if access is allowed because the request limit is not reached yet\n-   */\n-  boolean wouldAccessBeOkay(String ipAddress, Map<String, String> parameters, Map<String, List<String>> httpHeader) {\n-    try {\n-      checkLimit(ipAddress, parameters, httpHeader);\n-      return true;\n-    } catch (TooManyRequestsException e) {\n-      return false;\n+    /**\n+     * @param ipAddress the client's IP address\n+     * @return true if access is allowed because the request limit is not reached yet\n+     */\n+    boolean wouldAccessBeOkay(String ipAddress, Map<String, String> parameters, Map<String, List<String>> httpHeader) {\n+        try {\n+            checkLimit(ipAddress, parameters, httpHeader);\n+            return true;\n+        } catch (TooManyRequestsException e) {\n+            return false;\n+        }\n     }\n-  }\n-  \n-  /**\n-   * @param ipAddress the client's IP address\n-   * @param params the request's query parameters\n-   */\n-  void logAccess(String ipAddress, Map<String, List<String>> httpHeader, Map<String, String> params) {\n-    while (requestEvents.size() > REQUEST_QUEUE_SIZE) {\n-      requestEvents.remove(0);\n+\n+    /**\n+     * @param ipAddress the client's IP address\n+     * @param params    the request's query parameters\n+     */\n+    void logAccess(String ipAddress, Map<String, List<String>> httpHeader, Map<String, String> params) {\n+        while (requestEvents.size() > REQUEST_QUEUE_SIZE) {\n+            requestEvents.remove(0);\n+        }\n+        requestEvents.add(\n+            new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n     }\n-    requestEvents.add(new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n-  }\n-  \n+\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/17/ErrorRequestLimiter.java\nindex af109292403..98eed5b9f35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/17/ErrorRequestLimiter.java\n@@ -54,11 +54,11 @@ class ErrorRequestLimiter extends RequestLimiter {\n    * @param ipAddress the client's IP address\n    * @param params the request's query parameters\n    */\n-  void logAccess(String ipAddress, Map<String, List<String>> httpHeader, Map<String, String> params) {\n+void logAccess(String ipAddress, Map<String, List<String>> httpHeader, Map<String, String> params) {\n     while (requestEvents.size() > REQUEST_QUEUE_SIZE) {\n       requestEvents.remove(0);\n     }\n     requestEvents.add(new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n   }\n   \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/17/ErrorRequestLimiter.java\nindex af109292403..4bde5c58adf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/17/ErrorRequestLimiter.java\n@@ -19,7 +19,6 @@\n package org.languagetool.server;\n \n import org.languagetool.JLanguageTool;\n-\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n@@ -27,38 +26,46 @@ import java.util.Map;\n /**\n  * Limit the maximum number of request per IP address for a given time range.\n  */\n+\n+\n class ErrorRequestLimiter extends RequestLimiter {\n \n   /**\n    * @param requestLimit the maximum number of request per <tt>requestLimitPeriodInSeconds</tt>\n    * @param requestLimitPeriodInSeconds the time period over which requests are considered, in seconds\n    */\n-  ErrorRequestLimiter(int requestLimit, int requestLimitPeriodInSeconds) {\n+\n+    ErrorRequestLimiter(int requestLimit, int requestLimitPeriodInSeconds) {\n     super(requestLimit, 0, requestLimitPeriodInSeconds);\n-  }\n+    }\n \n   /**\n    * @param ipAddress the client's IP address\n    * @return true if access is allowed because the request limit is not reached yet\n    */\n-  boolean wouldAccessBeOkay(String ipAddress, Map<String, String> parameters, Map<String, List<String>> httpHeader) {\n+\n+    boolean wouldAccessBeOkay(String ipAddress, Map<String, String> parameters, Map<String, List<String>> httpHeader) {\n     try {\n-      checkLimit(ipAddress, parameters, httpHeader);\n-      return true;\n+        checkLimit(ipAddress, parameters, httpHeader);\n+        return true;\n     } catch (TooManyRequestsException e) {\n       return false;\n     }\n-  }\n+    }\n   \n   /**\n    * @param ipAddress the client's IP address\n    * @param params the request's query parameters\n    */\n-  void logAccess(String ipAddress, Map<String, List<String>> httpHeader, Map<String, String> params) {\n+\n+    void logAccess(String ipAddress, Map<String, List<String>> httpHeader, Map<String, String> params) {\n     while (requestEvents.size() > REQUEST_QUEUE_SIZE) {\n-      requestEvents.remove(0);\n+        requestEvents.remove(0);\n     }\n-    requestEvents.add(new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n-  }\n-  \n-}\n+    requestEvents.add(new RequestEvent(ipAddress,\n+new Date(),\n+    0,\n+        computeFingerprint(httpHeader, params),\n+            JLanguageTool.Mode.ALL));\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/17/ErrorRequestLimiter.java\nindex af109292403..114d56ebcd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/17/ErrorRequestLimiter.java\n@@ -60,5 +60,5 @@ class ErrorRequestLimiter extends RequestLimiter {\n     }\n     requestEvents.add(new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n   }\n-  \n+\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "61",
                    "column": "22",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "40",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "61",
                    "column": "51",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "61",
                    "column": "51",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "62",
                    "column": "9",
                    "severity": "warning",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/17/ErrorRequestLimiter.java\nindex af109292403..6368407c7ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/17/ErrorRequestLimiter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/17/ErrorRequestLimiter.java\n@@ -58,7 +58,9 @@ class ErrorRequestLimiter extends RequestLimiter {\n     while (requestEvents.size() > REQUEST_QUEUE_SIZE) {\n       requestEvents.remove(0);\n     }\n-    requestEvents.add(new RequestEvent(ipAddress, new Date(), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n+    requestEvents.add( newRequestEvent (ipAddress ,new Date\n+        (\n+), 0, computeFingerprint(httpHeader, params), JLanguageTool.Mode.ALL));\n   }\n-  \n+\n }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}