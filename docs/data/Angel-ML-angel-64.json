{
    "project_name": "Angel-ML-angel",
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "868",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "873",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "888",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "893",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "898",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "946",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "951",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "956",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "961",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "966",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "971",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "976",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "981",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/64/MFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/64/MFactory.java\nindex f02aef34180..cda336da94f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/64/MFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/64/MFactory.java\n@@ -59,7 +59,7 @@ import java.util.HashMap;\n public class MFactory {\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock,\n-      CompIntDoubleVector[] rows) {\n+                                                            CompIntDoubleVector[] rows) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -68,7 +68,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                            int numCols, int subDim) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -77,7 +77,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                            int numCols, int subDim,\n+                                                            StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -87,7 +88,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                            StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(0, i, 0, numCols, subDim, storageType);\n@@ -97,7 +98,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock,\n-      CompIntFloatVector[] rows) {\n+                                                          CompIntFloatVector[] rows) {\n     return new RBCompIntFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -106,7 +107,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                          int numCols, int subDim) {\n     return new RBCompIntFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -115,7 +116,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                          int numCols, int subDim,\n+                                                          StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -125,7 +127,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                          StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(0, i, 0, numCols, subDim, storageType);\n@@ -135,7 +137,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock,\n-      CompIntLongVector[] rows) {\n+                                                        CompIntLongVector[] rows) {\n     return new RBCompIntLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -144,7 +146,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                        int numCols, int subDim) {\n     return new RBCompIntLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -153,7 +155,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                        int numCols, int subDim,\n+                                                        StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -163,7 +166,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntLongMatrix rbCompIntLongMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                        StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(0, i, 0, numCols, subDim, storageType);\n@@ -173,7 +176,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock,\n-      CompIntIntVector[] rows) {\n+                                                      CompIntIntVector[] rows) {\n     return new RBCompIntIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -182,7 +185,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+                                                      int numCols, int subDim) {\n     return new RBCompIntIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -191,7 +194,8 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+                                                      int numCols, int subDim,\n+                                                      StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -201,7 +205,7 @@ public class MFactory {\n   }\n \n   public static RBCompIntIntMatrix rbCompIntIntMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+                                                      StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(0, i, 0, numCols, subDim, storageType);\n@@ -211,7 +215,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock,\n-      CompLongDoubleVector[] rows) {\n+                                                              CompLongDoubleVector[] rows) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -220,17 +224,18 @@ public class MFactory {\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                              long numCols, long subDim) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim) {\n+                                                              long subDim) {\n     return new RBCompLongDoubleMatrix(numRows, numCols, subDim);\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                              long numCols, long subDim,\n+                                                              StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -240,7 +245,8 @@ public class MFactory {\n   }\n \n   public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim, StorageType storageType) {\n+                                                              long subDim,\n+                                                              StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(0, i, 0, numCols, subDim, storageType);\n@@ -250,7 +256,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock,\n-      CompLongFloatVector[] rows) {\n+                                                            CompLongFloatVector[] rows) {\n     return new RBCompLongFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -259,17 +265,18 @@ public class MFactory {\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                            long numCols, long subDim) {\n     return new RBCompLongFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols,\n-      long subDim) {\n+                                                            long subDim) {\n     return new RBCompLongFloatMatrix(numRows, numCols, subDim);\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                            long numCols, long subDim,\n+                                                            StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -279,7 +286,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+                                                            StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(0, i, 0, numCols, subDim, storageType);\n@@ -289,7 +296,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock,\n-      CompLongLongVector[] rows) {\n+                                                          CompLongLongVector[] rows) {\n     return new RBCompLongLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -298,7 +305,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                          long numCols, long subDim) {\n     return new RBCompLongLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -307,7 +314,8 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                          long numCols, long subDim,\n+                                                          StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -317,7 +325,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongLongMatrix rbCompLongLongMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+                                                          StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(0, i, 0, numCols, subDim, storageType);\n@@ -327,7 +335,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock,\n-      CompLongIntVector[] rows) {\n+                                                        CompLongIntVector[] rows) {\n     return new RBCompLongIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -336,7 +344,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+                                                        long numCols, long subDim) {\n     return new RBCompLongIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -345,7 +353,8 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+                                                        long numCols, long subDim,\n+                                                        StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(matrixId, i, clock, numCols, subDim, storageType);\n@@ -355,7 +364,7 @@ public class MFactory {\n   }\n \n   public static RBCompLongIntMatrix rbCompLongIntMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+                                                        StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(0, i, 0, numCols, subDim, storageType);\n@@ -367,17 +376,17 @@ public class MFactory {\n   //---------------------------------------------------\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock,\n-      IntDoubleVector[] rows) {\n+                                                    IntDoubleVector[] rows) {\n     return new RBIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                    int numCols) {\n     return new RBIntDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, StorageType storageType) {\n+                                                    int numCols, StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -397,7 +406,7 @@ public class MFactory {\n   }\n \n   public static RBIntDoubleMatrix rbIntDoubleMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+                                                    StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -429,12 +438,12 @@ public class MFactory {\n   }\n \n   public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                  int numCols) {\n     return new RBIntFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+                                                  StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -454,7 +463,7 @@ public class MFactory {\n   }\n \n   public static RBIntFloatMatrix rbIntFloatMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+                                                  StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -490,7 +499,7 @@ public class MFactory {\n   }\n \n   public static RBIntLongMatrix rbIntLongMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+                                                StorageType storageType) {\n     IntLongVector[] rows = new IntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -545,7 +554,7 @@ public class MFactory {\n   }\n \n   public static RBIntIntMatrix rbIntIntMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+                                              StorageType storageType) {\n     IntIntVector[] rows = new IntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -592,17 +601,17 @@ public class MFactory {\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock,\n-      LongDoubleVector[] rows) {\n+                                                      LongDoubleVector[] rows) {\n     return new RBLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                      long numCols) {\n     return new RBLongDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+                                                      long numCols, StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -621,7 +630,7 @@ public class MFactory {\n   }\n \n   public static RBLongDoubleMatrix rbLongDoubleMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                      StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -648,17 +657,17 @@ public class MFactory {\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock,\n-      LongFloatVector[] rows) {\n+                                                    LongFloatVector[] rows) {\n     return new RBLongFloatMatrix(matrixId, clock, rows);\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                    long numCols) {\n     return new RBLongFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+                                                    long numCols, StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -677,7 +686,7 @@ public class MFactory {\n   }\n \n   public static RBLongFloatMatrix rbLongFloatMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                    StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -708,12 +717,12 @@ public class MFactory {\n   }\n \n   public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                  long numCols) {\n     return new RBLongLongMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+                                                  long numCols, StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -732,7 +741,7 @@ public class MFactory {\n   }\n \n   public static RBLongLongMatrix rbLongLongMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                  StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -763,12 +772,12 @@ public class MFactory {\n   }\n \n   public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+                                                long numCols) {\n     return new RBLongIntMatrix(matrixId, clock, numRows, numCols);\n   }\n \n   public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols,\n-      StorageType storageType) {\n+                                                StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -787,7 +796,7 @@ public class MFactory {\n   }\n \n   public static RBLongIntMatrix rbLongIntMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+                                                StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -816,12 +825,12 @@ public class MFactory {\n   //---------------------------------------------------\n \n   public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, double[] data) {\n+                                                   int numCols, double[] data) {\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n   public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                   int numCols) {\n     double[] data = new double[numRows * numCols];\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -836,12 +845,12 @@ public class MFactory {\n   }\n \n   public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      float[] data) {\n+                                                 float[] data) {\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n   public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+                                                 int numCols) {\n     float[] data = new float[numRows * numCols];\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -856,42 +865,42 @@ public class MFactory {\n   }\n \n   public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntDoubleVector> mapMatrix) {\n+                                                              HashMap<Long, IntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntFloatVector> intFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntFloatVector> mapMatrix) {\n+                                                            HashMap<Long, IntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntLongVector> intLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntLongVector> mapMatrix) {\n+                                                          HashMap<Long, IntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntIntVector> intIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntIntVector> mapMatrix) {\n+                                                        HashMap<Long, IntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongDoubleVector> mapMatrix) {\n+                                                                HashMap<Long, LongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongFloatVector> longFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongFloatVector> mapMatrix) {\n+                                                              HashMap<Long, LongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongLongVector> longLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongLongVector> mapMatrix) {\n+                                                            HashMap<Long, LongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongIntVector> longIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongIntVector> mapMatrix) {\n+                                                          HashMap<Long, LongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n@@ -934,42 +943,42 @@ public class MFactory {\n   }\n \n   public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntDoubleVector> mapMatrix) {\n+                                                                  HashMap<Long, CompIntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntFloatVector> mapMatrix) {\n+                                                                HashMap<Long, CompIntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntLongVector> compIntLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntLongVector> mapMatrix) {\n+                                                              HashMap<Long, CompIntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<IntIntVector> compIntIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntIntVector> mapMatrix) {\n+                                                            HashMap<Long, CompIntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongDoubleVector> mapMatrix) {\n+                                                                    HashMap<Long, CompLongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongFloatVector> mapMatrix) {\n+                                                                  HashMap<Long, CompLongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongLongVector> compLongLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongLongVector> mapMatrix) {\n+                                                                HashMap<Long, CompLongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n   public static MapMatrix<LongIntVector> compLongIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongIntVector> mapMatrix) {\n+                                                              HashMap<Long, CompLongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "229",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "261",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "269",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "285",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "293",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "309",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "319",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "323",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "327",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "345",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "375",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "379",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "397",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "431",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "483",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "527",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "531",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "535",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "552",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "577",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "581",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "585",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "602",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "631",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "635",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "652",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "681",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "685",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "702",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "729",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "733",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "747",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "751",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "765",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "769",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "773",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "777",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "781",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "785",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "789",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "793",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "797",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "801",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "805",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "813",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "817",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "821",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "829",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "833",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "837",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "841",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "845",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "849",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "853",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "857",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "861",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "865",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "869",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "873",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "877",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "881",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "885",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "889",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/64/MFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/64/MFactory.java\nindex f02aef34180..6fe6553ddf7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/64/MFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/64/MFactory.java\n@@ -58,8 +58,7 @@ import java.util.HashMap;\n \n public class MFactory {\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock,\n-      CompIntDoubleVector[] rows) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, CompIntDoubleVector[] rows) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -67,8 +66,7 @@ public class MFactory {\n     return new RBCompIntDoubleMatrix(rows);\n   }\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -76,28 +74,23 @@ public class MFactory {\n     return new RBCompIntDoubleMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntDoubleMatrix rbCompIntDoubleMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntDoubleVector[] rows = new CompIntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntDoubleVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntDoubleMatrix(rows);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock,\n-      CompIntFloatVector[] rows) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, CompIntFloatVector[] rows) {\n     return new RBCompIntFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -105,8 +98,7 @@ public class MFactory {\n     return new RBCompIntFloatMatrix(rows);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -114,28 +106,23 @@ public class MFactory {\n     return new RBCompIntFloatMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntFloatMatrix rbCompIntFloatMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntFloatVector[] rows = new CompIntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntFloatVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntFloatMatrix(rows);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock,\n-      CompIntLongVector[] rows) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, CompIntLongVector[] rows) {\n     return new RBCompIntLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -143,8 +130,7 @@ public class MFactory {\n     return new RBCompIntLongMatrix(rows);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -152,28 +138,23 @@ public class MFactory {\n     return new RBCompIntLongMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntLongMatrix rbCompIntLongMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntLongMatrix rbCompIntLongMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntLongVector[] rows = new CompIntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntLongVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntLongMatrix(rows);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock,\n-      CompIntIntVector[] rows) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, CompIntIntVector[] rows) {\n     return new RBCompIntIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -181,8 +162,7 @@ public class MFactory {\n     return new RBCompIntIntMatrix(rows);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows, int numCols, int subDim) {\n     return new RBCompIntIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -190,28 +170,23 @@ public class MFactory {\n     return new RBCompIntIntMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows,\n-      int numCols, int subDim, StorageType storageType) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int matrixId, int clock, int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompIntIntMatrix rbCompIntIntMatrix(int numRows, int numCols, int subDim,\n-      StorageType storageType) {\n+  public static RBCompIntIntMatrix rbCompIntIntMatrix(int numRows, int numCols, int subDim, StorageType storageType) {\n     CompIntIntVector[] rows = new CompIntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compIntIntVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompIntIntMatrix(rows);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock,\n-      CompLongDoubleVector[] rows) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, CompLongDoubleVector[] rows) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n@@ -219,38 +194,31 @@ public class MFactory {\n     return new RBCompLongDoubleMatrix(rows);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongDoubleMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols, long subDim) {\n     return new RBCompLongDoubleMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols,\n-      long subDim, StorageType storageType) {\n+  public static RBCompLongDoubleMatrix rbCompLongDoubleMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongDoubleVector[] rows = new CompLongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongDoubleVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongDoubleMatrix(rows);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock,\n-      CompLongFloatVector[] rows) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, CompLongFloatVector[] rows) {\n     return new RBCompLongFloatMatrix(matrixId, clock, rows);\n   }\n \n@@ -258,38 +226,31 @@ public class MFactory {\n     return new RBCompLongFloatMatrix(rows);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongFloatMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols,\n-      long subDim) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim) {\n     return new RBCompLongFloatMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+  public static RBCompLongFloatMatrix rbCompLongFloatMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongFloatVector[] rows = new CompLongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongFloatVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongFloatMatrix(rows);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock,\n-      CompLongLongVector[] rows) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, CompLongLongVector[] rows) {\n     return new RBCompLongLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -297,8 +258,7 @@ public class MFactory {\n     return new RBCompLongLongMatrix(rows);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongLongMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -306,28 +266,23 @@ public class MFactory {\n     return new RBCompLongLongMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongLongMatrix rbCompLongLongMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+  public static RBCompLongLongMatrix rbCompLongLongMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongLongVector[] rows = new CompLongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongLongVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongLongMatrix(rows);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock,\n-      CompLongIntVector[] rows) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, CompLongIntVector[] rows) {\n     return new RBCompLongIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -335,8 +290,7 @@ public class MFactory {\n     return new RBCompLongIntMatrix(rows);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows, long numCols, long subDim) {\n     return new RBCompLongIntMatrix(matrixId, clock, numRows, numCols, subDim);\n   }\n \n@@ -344,40 +298,33 @@ public class MFactory {\n     return new RBCompLongIntMatrix(numRows, numCols, subDim);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols, long subDim, StorageType storageType) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int matrixId, int clock, int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(matrixId, i, clock, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBCompLongIntMatrix rbCompLongIntMatrix(int numRows, long numCols, long subDim,\n-      StorageType storageType) {\n+  public static RBCompLongIntMatrix rbCompLongIntMatrix(int numRows, long numCols, long subDim, StorageType storageType) {\n     CompLongIntVector[] rows = new CompLongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       rows[i] = VFactory.compLongIntVector(0, i, 0, numCols, subDim, storageType);\n     }\n-\n     return new RBCompLongIntMatrix(rows);\n   }\n \n   //---------------------------------------------------\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock,\n-      IntDoubleVector[] rows) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, IntDoubleVector[] rows) {\n     return new RBIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols) {\n     return new RBIntDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, StorageType storageType) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -392,12 +339,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntDoubleMatrix rbIntDoubleMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntDoubleMatrix rbIntDoubleMatrix(int numRows, int numCols, StorageType storageType) {\n     IntDoubleVector[] rows = new IntDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -412,7 +357,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntDoubleMatrix(rows);\n   }\n \n@@ -428,13 +372,11 @@ public class MFactory {\n     return new RBIntFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols) {\n     return new RBIntFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntFloatMatrix rbIntFloatMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -449,12 +391,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBIntFloatMatrix rbIntFloatMatrix(int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntFloatMatrix rbIntFloatMatrix(int numRows, int numCols, StorageType storageType) {\n     IntFloatVector[] rows = new IntFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -469,7 +409,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntFloatMatrix(rows);\n   }\n \n@@ -489,8 +428,7 @@ public class MFactory {\n     return new RBIntLongMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntLongMatrix rbIntLongMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntLongMatrix rbIntLongMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntLongVector[] rows = new IntLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -505,7 +443,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntLongMatrix(matrixId, clock, rows);\n   }\n \n@@ -524,7 +461,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntLongMatrix(rows);\n   }\n \n@@ -544,8 +480,7 @@ public class MFactory {\n     return new RBIntIntMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBIntIntMatrix rbIntIntMatrix(int matrixId, int clock, int numRows, int numCols,\n-      StorageType storageType) {\n+  public static RBIntIntMatrix rbIntIntMatrix(int matrixId, int clock, int numRows, int numCols, StorageType storageType) {\n     IntIntVector[] rows = new IntIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -560,7 +495,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntIntMatrix(matrixId, clock, rows);\n   }\n \n@@ -579,7 +513,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBIntIntMatrix(rows);\n   }\n \n@@ -591,18 +524,15 @@ public class MFactory {\n     return new RBIntIntMatrix(numRows, numCols);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock,\n-      LongDoubleVector[] rows) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, LongDoubleVector[] rows) {\n     return new RBLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongDoubleMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -616,12 +546,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongDoubleMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongDoubleMatrix rbLongDoubleMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongDoubleMatrix rbLongDoubleMatrix(int numRows, long numCols, StorageType storageType) {\n     LongDoubleVector[] rows = new LongDoubleVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -635,7 +563,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongDoubleMatrix(rows);\n   }\n \n@@ -647,18 +574,15 @@ public class MFactory {\n     return new RBLongDoubleMatrix(numRows, numCols);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock,\n-      LongFloatVector[] rows) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, LongFloatVector[] rows) {\n     return new RBLongFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongFloatMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -672,12 +596,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongFloatMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongFloatMatrix rbLongFloatMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongFloatMatrix rbLongFloatMatrix(int numRows, long numCols, StorageType storageType) {\n     LongFloatVector[] rows = new LongFloatVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -691,7 +613,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongFloatMatrix(rows);\n   }\n \n@@ -707,13 +628,11 @@ public class MFactory {\n     return new RBLongLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongLongMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows,\n-      long numCols, StorageType storageType) {\n+  public static RBLongLongMatrix rbLongLongMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -727,12 +646,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongLongMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongLongMatrix rbLongLongMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongLongMatrix rbLongLongMatrix(int numRows, long numCols, StorageType storageType) {\n     LongLongVector[] rows = new LongLongVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -746,7 +663,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongLongMatrix(rows);\n   }\n \n@@ -762,13 +678,11 @@ public class MFactory {\n     return new RBLongIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows,\n-      long numCols) {\n+  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols) {\n     return new RBLongIntMatrix(matrixId, clock, numRows, numCols);\n   }\n \n-  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongIntMatrix rbLongIntMatrix(int matrixId, int clock, int numRows, long numCols, StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -782,12 +696,10 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongIntMatrix(matrixId, clock, rows);\n   }\n \n-  public static RBLongIntMatrix rbLongIntMatrix(int numRows, long numCols,\n-      StorageType storageType) {\n+  public static RBLongIntMatrix rbLongIntMatrix(int numRows, long numCols, StorageType storageType) {\n     LongIntVector[] rows = new LongIntVector[numRows];\n     for (int i = 0; i < numRows; i++) {\n       switch (storageType) {\n@@ -801,7 +713,6 @@ public class MFactory {\n           break;\n       }\n     }\n-\n     return new RBLongIntMatrix(rows);\n   }\n \n@@ -815,13 +726,11 @@ public class MFactory {\n \n   //---------------------------------------------------\n \n-  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols, double[] data) {\n+  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows, int numCols, double[] data) {\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n-  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static BlasDoubleMatrix denseDoubleMatrix(int matrixId, int clock, int numRows, int numCols) {\n     double[] data = new double[numRows * numCols];\n     return new BlasDoubleMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -835,13 +744,11 @@ public class MFactory {\n     return new BlasDoubleMatrix(numRows, numCols, data);\n   }\n \n-  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols,\n-      float[] data) {\n+  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols, float[] data) {\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n \n-  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows,\n-      int numCols) {\n+  public static BlasFloatMatrix denseFloatMatrix(int matrixId, int clock, int numRows, int numCols) {\n     float[] data = new float[numRows * numCols];\n     return new BlasFloatMatrix(matrixId, clock, numRows, numCols, data);\n   }\n@@ -855,58 +762,47 @@ public class MFactory {\n     return new BlasFloatMatrix(numRows, numCols, data);\n   }\n \n-  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(int matrixId, int clock, HashMap<Long, IntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> intFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> intFloatMapMatrix(int matrixId, int clock, HashMap<Long, IntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> intLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> intLongMapMatrix(int matrixId, int clock, HashMap<Long, IntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntIntVector> intIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, IntIntVector> mapMatrix) {\n+  public static MapMatrix<IntIntVector> intIntMapMatrix(int matrixId, int clock, HashMap<Long, IntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(int matrixId, int clock, HashMap<Long, LongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> longFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> longFloatMapMatrix(int matrixId, int clock, HashMap<Long, LongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> longLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> longLongMapMatrix(int matrixId, int clock, HashMap<Long, LongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongIntVector> longIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, LongIntVector> mapMatrix) {\n+  public static MapMatrix<LongIntVector> longIntMapMatrix(int matrixId, int clock, HashMap<Long, LongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(\n-      HashMap<Integer, IntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> intDoubleMapMatrix(HashMap<Integer, IntDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> intFloatMapMatrix(\n-      HashMap<Integer, IntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> intFloatMapMatrix(HashMap<Integer, IntFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> intLongMapMatrix(\n-      HashMap<Integer, IntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> intLongMapMatrix(HashMap<Integer, IntLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n@@ -914,18 +810,15 @@ public class MFactory {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(\n-      HashMap<Long, LongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> longDoubleMapMatrix(HashMap<Long, LongDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> longFloatMapMatrix(\n-      HashMap<Long, LongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> longFloatMapMatrix(HashMap<Long, LongFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> longLongMapMatrix(\n-      HashMap<Long, LongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> longLongMapMatrix(HashMap<Long, LongLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n@@ -933,83 +826,68 @@ public class MFactory {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(int matrixId, int clock, HashMap<Long, CompIntDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(int matrixId, int clock, HashMap<Long, CompIntFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> compIntLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> compIntLongMapMatrix(int matrixId, int clock, HashMap<Long, CompIntLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntIntVector> compIntIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompIntIntVector> mapMatrix) {\n+  public static MapMatrix<IntIntVector> compIntIntMapMatrix(int matrixId, int clock, HashMap<Long, CompIntIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(int matrixId, int clock, HashMap<Long, CompLongDoubleVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(int matrixId, int clock, HashMap<Long, CompLongFloatVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> compLongLongMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> compLongLongMapMatrix(int matrixId, int clock, HashMap<Long, CompLongLongVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<LongIntVector> compLongIntMapMatrix(int matrixId, int clock,\n-      HashMap<Long, CompLongIntVector> mapMatrix) {\n+  public static MapMatrix<LongIntVector> compLongIntMapMatrix(int matrixId, int clock, HashMap<Long, CompLongIntVector> mapMatrix) {\n     return new MapMatrix(matrixId, clock, mapMatrix);\n   }\n \n-  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(\n-      HashMap<Integer, CompIntDoubleVector> mapMatrix) {\n+  public static MapMatrix<IntDoubleVector> compIntDoubleMapMatrix(HashMap<Integer, CompIntDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(\n-      HashMap<Integer, CompIntFloatVector> mapMatrix) {\n+  public static MapMatrix<IntFloatVector> compIntFloatMapMatrix(HashMap<Integer, CompIntFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntLongVector> compIntLongMapMatrix(\n-      HashMap<Integer, CompIntLongVector> mapMatrix) {\n+  public static MapMatrix<IntLongVector> compIntLongMapMatrix(HashMap<Integer, CompIntLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<IntIntVector> compIntIntMapMatrix(\n-      HashMap<Integer, CompIntIntVector> mapMatrix) {\n+  public static MapMatrix<IntIntVector> compIntIntMapMatrix(HashMap<Integer, CompIntIntVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(\n-      HashMap<Long, CompLongDoubleVector> mapMatrix) {\n+  public static MapMatrix<LongDoubleVector> compLongDoubleMapMatrix(HashMap<Long, CompLongDoubleVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(\n-      HashMap<Long, CompLongFloatVector> mapMatrix) {\n+  public static MapMatrix<LongFloatVector> compLongFloatMapMatrix(HashMap<Long, CompLongFloatVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongLongVector> compLongLongMapMatrix(\n-      HashMap<Long, CompLongLongVector> mapMatrix) {\n+  public static MapMatrix<LongLongVector> compLongLongMapMatrix(HashMap<Long, CompLongLongVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n \n-  public static MapMatrix<LongIntVector> compLongIntMapMatrix(\n-      HashMap<Long, CompLongIntVector> mapMatrix) {\n+  public static MapMatrix<LongIntVector> compLongIntMapMatrix(HashMap<Long, CompLongIntVector> mapMatrix) {\n     return new MapMatrix(mapMatrix);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 216
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}