{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3154",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3154/ExtendedPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3154/ExtendedPath.java\nindex 72f7fbe7c91..9e5a33b776d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3154/ExtendedPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3154/ExtendedPath.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.impl;\n \n import java.util.Iterator;\n@@ -29,166 +30,170 @@ import org.neo4j.helpers.collection.PrefetchingIterator;\n \n public class ExtendedPath implements Path\n {\n-    private final Path start;\n-    private final Relationship lastRelationship;\n-    private final Node endNode;\n-\n-    public ExtendedPath( Path start, Relationship lastRelationship )\n-    {\n-        this.start = start;\n-        this.lastRelationship = lastRelationship;\n-        this.endNode = lastRelationship.getOtherNode( start.endNode() );\n-    }\n-\n-    @Override\n-    public Node startNode()\n+  private final Path start;\n+  private final Relationship lastRelationship;\n+  private final Node endNode;\n+\n+  public ExtendedPath(Path start, Relationship lastRelationship)\n+  {\n+    this.start = start;\n+    this.lastRelationship = lastRelationship;\n+    this.endNode = lastRelationship.getOtherNode(start.endNode());\n+  }\n+\n+  @Override\n+  public Node startNode()\n+  {\n+    return start.startNode();\n+  }\n+\n+  @Override\n+  public Node endNode()\n+  {\n+    return endNode;\n+  }\n+\n+  @Override\n+  public Relationship lastRelationship()\n+  {\n+    return lastRelationship;\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> relationships()\n+  {\n+    return () -> new PrefetchingIterator<Relationship>()\n     {\n-        return start.startNode();\n-    }\n+      final Iterator<Relationship> startRelationships = start.relationships().iterator();\n+      boolean lastReturned;\n \n-    @Override\n-    public Node endNode()\n-    {\n-        return endNode;\n-    }\n-\n-    @Override\n-    public Relationship lastRelationship()\n+      @Override\n+      protected Relationship fetchNextOrNull()\n+      {\n+        if (startRelationships.hasNext())\n+        {\n+          return startRelationships.next();\n+        }\n+        if (!lastReturned)\n+        {\n+          lastReturned = true;\n+          return lastRelationship;\n+        }\n+        return null;\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> reverseRelationships()\n+  {\n+    return () -> new PrefetchingIterator<Relationship>()\n     {\n-        return lastRelationship;\n-    }\n+      final Iterator<Relationship> startRelationships = start.reverseRelationships().iterator();\n+      boolean endReturned;\n \n-    @Override\n-    public Iterable<Relationship> relationships()\n-    {\n-        return () -> new PrefetchingIterator<Relationship>()\n+      @Override\n+      protected Relationship fetchNextOrNull()\n+      {\n+        if (!endReturned)\n         {\n-            final Iterator<Relationship> startRelationships = start.relationships().iterator();\n-            boolean lastReturned;\n-\n-            @Override\n-            protected Relationship fetchNextOrNull()\n-            {\n-                if ( startRelationships.hasNext() )\n-                {\n-                    return startRelationships.next();\n-                }\n-                if ( !lastReturned )\n-                {\n-                    lastReturned = true;\n-                    return lastRelationship;\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public Iterable<Relationship> reverseRelationships()\n+          endReturned = true;\n+          return lastRelationship;\n+        }\n+        return startRelationships.hasNext() ? startRelationships.next() : null;\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Iterable<Node> nodes()\n+  {\n+    return () -> new PrefetchingIterator<Node>()\n     {\n-        return () -> new PrefetchingIterator<Relationship>()\n+      final Iterator<Node> startNodes = start.nodes().iterator();\n+      boolean lastReturned;\n+\n+      @Override\n+      protected Node fetchNextOrNull()\n+      {\n+        if (startNodes.hasNext())\n         {\n-            final Iterator<Relationship> startRelationships = start.reverseRelationships().iterator();\n-            boolean endReturned;\n-\n-            @Override\n-            protected Relationship fetchNextOrNull()\n-            {\n-                if ( !endReturned )\n-                {\n-                    endReturned = true;\n-                    return lastRelationship;\n-                }\n-                return startRelationships.hasNext() ? startRelationships.next() : null;\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public Iterable<Node> nodes()\n-    {\n-        return () -> new PrefetchingIterator<Node>()\n+          return startNodes.next();\n+        }\n+        if (!lastReturned)\n         {\n-            final Iterator<Node> startNodes = start.nodes().iterator();\n-            boolean lastReturned;\n-\n-            @Override\n-            protected Node fetchNextOrNull()\n-            {\n-                if ( startNodes.hasNext() )\n-                {\n-                    return startNodes.next();\n-                }\n-                if ( !lastReturned )\n-                {\n-                    lastReturned = true;\n-                    return endNode;\n-                }\n-                return null;\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public Iterable<Node> reverseNodes()\n+          lastReturned = true;\n+          return endNode;\n+        }\n+        return null;\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Iterable<Node> reverseNodes()\n+  {\n+    return () -> new PrefetchingIterator<Node>()\n     {\n-        return () -> new PrefetchingIterator<Node>()\n+      final Iterator<Node> startNodes = start.reverseNodes().iterator();\n+      boolean endReturned;\n+\n+      @Override\n+      protected Node fetchNextOrNull()\n+      {\n+        if (!endReturned)\n         {\n-            final Iterator<Node> startNodes = start.reverseNodes().iterator();\n-            boolean endReturned;\n-\n-            @Override\n-            protected Node fetchNextOrNull()\n-            {\n-                if ( !endReturned )\n-                {\n-                    endReturned = true;\n-                    return endNode;\n-                }\n-                return startNodes.hasNext() ? startNodes.next() : null;\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public int length()\n+          endReturned = true;\n+          return endNode;\n+        }\n+        return startNodes.hasNext() ? startNodes.next() : null;\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return start.length() + 1;\n+  }\n+\n+  @Override\n+  public Iterator<PropertyContainer> iterator()\n+  {\n+    return new PrefetchingIterator<PropertyContainer>()\n     {\n-        return start.length() + 1;\n-    }\n+      final Iterator<PropertyContainer> startEntities = start.iterator();\n+      int lastReturned = 2;\n \n-    @Override\n-    public Iterator<PropertyContainer> iterator()\n-    {\n-        return new PrefetchingIterator<PropertyContainer>()\n+      @Override\n+      protected PropertyContainer fetchNextOrNull()\n+      {\n+        if (startEntities.hasNext())\n         {\n-            final Iterator<PropertyContainer> startEntities = start.iterator();\n-            int lastReturned = 2;\n-\n-            @Override\n-            protected PropertyContainer fetchNextOrNull()\n-            {\n-                if ( startEntities.hasNext() )\n-                {\n-                    return startEntities.next();\n-                }\n-                switch ( lastReturned-- )\n-                {\n-                case 2: return endNode;\n-                case 1: return lastRelationship;\n-                default: return null;\n-                }\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Appends a {@link Relationship relationship}, {@code withRelationship}, to the specified {@link Path path}\n-     * @param path\n-     * @param withRelationship\n-     * @return The path with the relationship and its end node appended.\n-     */\n-    public static Path extend( Path path, Relationship withRelationship )\n-    {\n-        return new ExtendedPath( path, withRelationship );\n-    }\n+          return startEntities.next();\n+        }\n+        switch (lastReturned--)\n+        {\n+          case 2:\n+            return endNode;\n+          case 1:\n+            return lastRelationship;\n+          default:\n+            return null;\n+        }\n+      }\n+    };\n+  }\n+\n+  /**\n+   * Appends a {@link Relationship relationship}, {@code withRelationship}, to the specified {@link Path path}\n+   *\n+   * @param path\n+   * @param withRelationship\n+   * @return The path with the relationship and its end node appended.\n+   */\n+  public static Path extend(Path path, Relationship withRelationship)\n+  {\n+    return new ExtendedPath(path, withRelationship);\n+  }\n }\n",
            "diff_size": 195
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3154/ExtendedPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3154/ExtendedPath.java\nindex 72f7fbe7c91..e5df769dd60 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3154/ExtendedPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3154/ExtendedPath.java\n@@ -73,7 +73,8 @@ public class ExtendedPath implements Path\n                 {\n                     return startRelationships.next();\n                 }\n-                if ( !lastReturned )\n+\n+if ( !lastReturned )\n                 {\n                     lastReturned = true;\n                     return lastRelationship;\n@@ -99,7 +100,8 @@ public class ExtendedPath implements Path\n                     endReturned = true;\n                     return lastRelationship;\n                 }\n-                return startRelationships.hasNext() ? startRelationships.next() : null;\n+\n+return startRelationships.hasNext() ? startRelationships.next() : null;\n             }\n         };\n     }\n@@ -119,7 +121,8 @@ public class ExtendedPath implements Path\n                 {\n                     return startNodes.next();\n                 }\n-                if ( !lastReturned )\n+\n+if ( !lastReturned )\n                 {\n                     lastReturned = true;\n                     return endNode;\n@@ -145,7 +148,8 @@ public class ExtendedPath implements Path\n                     endReturned = true;\n                     return endNode;\n                 }\n-                return startNodes.hasNext() ? startNodes.next() : null;\n+\n+return startNodes.hasNext() ? startNodes.next() : null;\n             }\n         };\n     }\n@@ -173,10 +177,13 @@ public class ExtendedPath implements Path\n                 }\n                 switch ( lastReturned-- )\n                 {\n-                case 2: return endNode;\n-                case 1: return lastRelationship;\n-                default: return null;\n-                }\n+                case 2:\n+    return endNode;\n+                case 1:\n+    return lastRelationship;\n+    default:\n+    return null;\n+    }\n             }\n         };\n     }\n@@ -191,4 +198,4 @@ public class ExtendedPath implements Path\n     {\n         return new ExtendedPath( path, withRelationship );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}