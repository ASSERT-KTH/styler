{
    "project_name": "neo4j-neo4j",
    "error_id": "837",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "205",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/837/TextType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/837/TextType.java\nindex e42d6f9e646..052a4a69673 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/837/TextType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/837/TextType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -50,196 +51,194 @@ class TextType extends Type\n     // long3 (isHighest)\n     // byteArray\n \n-    TextType( byte typeId )\n+    TextType(byte typeId)\n     {\n-        super( ValueGroup.TEXT, typeId,\n-                Values.of( \"\" ),\n-                // max same as min, but this type sets a special flag in initializeAsHighest\n-                Values.of( \"\" ) );\n+        super(ValueGroup.TEXT, typeId,\n+          Values.of(\"\"),\n+          // max same as min, but this type sets a special flag in initializeAsHighest\n+          Values.of(\"\"));\n     }\n \n     @Override\n-    int valueSize( GenericKey state )\n+    int valueSize(GenericKey state)\n     {\n-        return textKeySize( state.long0 );\n+        return textKeySize(state.long0);\n     }\n \n     @Override\n-    void copyValue( GenericKey to, GenericKey from )\n+    void copyValue(GenericKey to, GenericKey from)\n     {\n         to.long0 = from.long0;\n         // don't copy long1 since it's instance-local (bytesDereferenced)\n         to.long2 = from.long2;\n         to.long3 = from.long3;\n-        setBytesLength( to, (int) from.long0 );\n-        System.arraycopy( from.byteArray, 0, to.byteArray, 0, (int) from.long0 );\n+        setBytesLength(to, (int) from.long0);\n+        System.arraycopy(from.byteArray, 0, to.byteArray, 0, (int) from.long0);\n     }\n \n     @Override\n-    void minimalSplitter( GenericKey left, GenericKey right, GenericKey into )\n+    void minimalSplitter(GenericKey left, GenericKey right, GenericKey into)\n     {\n         int length = 0;\n-        if ( left.type == Types.TEXT )\n+        if (left.type == Types.TEXT)\n         {\n-            length = minimalLengthFromRightNeededToDifferentiateFromLeft( left.byteArray, (int) left.long0, right.byteArray, (int) right.long0 );\n+            length = minimalLengthFromRightNeededToDifferentiateFromLeft(left.byteArray, (int) left.long0, right.byteArray, (int) right.long0);\n         }\n-        into.writeUTF8( right.byteArray, 0, length );\n+        into.writeUTF8(right.byteArray, 0, length);\n     }\n \n     @Override\n-    Value asValue( GenericKey state )\n+    Value asValue(GenericKey state)\n     {\n         // There's a difference between composing a single text value and a array text values\n         // and there's therefore no common \"raw\" variant of it\n-        if ( state.byteArray == null )\n+        if (state.byteArray == null)\n         {\n             return NO_VALUE;\n         }\n \n-        if ( isCharValueType( state.long2 ) )\n+        if (isCharValueType(state.long2))\n         {\n             // This is a char value.\n-            return Values.charValue( textAsChar( state.byteArray ) );\n+            return Values.charValue(textAsChar(state.byteArray));\n         }\n \n         // This is a string value\n         state.long1 = TRUE;\n-        return Values.utf8Value( state.byteArray, 0, (int) state.long0 );\n+        return Values.utf8Value(state.byteArray, 0, (int) state.long0);\n     }\n \n     @Override\n-    int compareValue( GenericKey left, GenericKey right )\n+    int compareValue(GenericKey left, GenericKey right)\n     {\n         return compare(\n-                left.byteArray, left.long0, left.long2, left.long3,\n-                right.byteArray, right.long0, right.long2, right.long3 );\n+          left.byteArray, left.long0, left.long2, left.long3,\n+          right.byteArray, right.long0, right.long2, right.long3);\n     }\n \n     @Override\n-    void putValue( PageCursor cursor, GenericKey state )\n+    void putValue(PageCursor cursor, GenericKey state)\n     {\n-        put( cursor, state.byteArray, state.long0, state.long2 );\n+        put(cursor, state.byteArray, state.long0, state.long2);\n     }\n \n     @Override\n-    boolean readValue( PageCursor cursor, int size, GenericKey into )\n+    boolean readValue(PageCursor cursor, int size, GenericKey into)\n     {\n-        return read( cursor, size, into );\n+        return read(cursor, size, into);\n     }\n \n-    static int textKeySize( long long0 )\n+    static int textKeySize(long long0)\n     {\n         return SIZE_STRING_LENGTH + /* short field with bytesLength value */\n-                (int) long0;        /* bytesLength */\n+          (int) long0;        /* bytesLength */\n     }\n \n     static int compare(\n-            byte[] this_byteArray, long this_long0, long this_long2, long this_long3,\n-            byte[] that_byteArray, long that_long0, long that_long2, long that_long3 )\n+      byte[] this_byteArray, long this_long0, long this_long2, long this_long3,\n+      byte[] that_byteArray, long that_long0, long that_long2, long that_long3)\n     {\n-        if ( this_byteArray != that_byteArray )\n+        if (this_byteArray != that_byteArray)\n         {\n-            if ( isHighestText( this_long3 ) || isHighestText( that_long3 ) )\n+            if (isHighestText(this_long3) || isHighestText(that_long3))\n             {\n-                return Boolean.compare( isHighestText( this_long3 ), isHighestText( that_long3 ) );\n+                return Boolean.compare(isHighestText(this_long3), isHighestText(that_long3));\n             }\n-            if ( this_byteArray == null )\n+            if (this_byteArray == null)\n             {\n                 return -1;\n             }\n-            if ( that_byteArray == null )\n+            if (that_byteArray == null)\n             {\n                 return 1;\n             }\n-        }\n-        else\n+        } else\n         {\n             return 0;\n         }\n \n-        return lexicographicalUnsignedByteArrayCompare( this_byteArray, (int) this_long0, that_byteArray, (int) that_long0,\n-                booleanOf( this_long2 ) || booleanOf( that_long2 ) );\n+        return lexicographicalUnsignedByteArrayCompare(this_byteArray, (int) this_long0, that_byteArray, (int) that_long0,\n+          booleanOf(this_long2) || booleanOf(that_long2));\n     }\n \n-    static void put( PageCursor cursor, byte[] byteArray, long long0, long long2 )\n+    static void put(PageCursor cursor, byte[] byteArray, long long0, long long2)\n     {\n         // There are two variants of a text value, one is string, the other is char. Both are the same ValueGroup, i.e. TEXT\n         // and should be treated the same, it's just that we need to know if it's a char so that we can materialize a CharValue for chars.\n         // We put a special marker for char values, knowing that a char is exactly 2 bytes in storage.\n         // This can be picked up by reader and set the right flag in state so that a CharValue can be materialized.\n-        short length = toNonNegativeShortExact( long0 );\n-        cursor.putShort( isCharValueType( long2 ) ? (short) (length | CHAR_TYPE_LENGTH_MARKER) : length );\n-        cursor.putBytes( byteArray, 0, length );\n+        short length = toNonNegativeShortExact(long0);\n+        cursor.putShort(isCharValueType(long2) ? (short) (length | CHAR_TYPE_LENGTH_MARKER) : length);\n+        cursor.putBytes(byteArray, 0, length);\n     }\n \n-    static boolean read( PageCursor cursor, int maxSize, GenericKey into )\n+    static boolean read(PageCursor cursor, int maxSize, GenericKey into)\n     {\n         // For performance reasons cannot be redirected to writeString, due to byte[] reuse\n         short rawLength = cursor.getShort();\n         short bytesLength = (short) (rawLength & ~CHAR_TYPE_LENGTH_MARKER);\n-        if ( bytesLength > maxSize )\n+        if (bytesLength > maxSize)\n         {\n-            setCursorException( cursor, \"non-valid bytes length for text, \" + bytesLength );\n+            setCursorException(cursor, \"non-valid bytes length for text, \" + bytesLength);\n             return false;\n         }\n \n         // Remember this fact, i.e. set the flag in this state\n         boolean isCharType = (rawLength & CHAR_TYPE_LENGTH_MARKER) != 0;\n-        setCharType( into, isCharType );\n-        setBytesLength( into, bytesLength );\n-        cursor.getBytes( into.byteArray, 0, bytesLength );\n+        setCharType(into, isCharType);\n+        setBytesLength(into, bytesLength);\n+        cursor.getBytes(into.byteArray, 0, bytesLength);\n         return true;\n     }\n \n-    static void setCharType( GenericKey into, boolean isCharType )\n+    static void setCharType(GenericKey into, boolean isCharType)\n     {\n-        if ( isCharType )\n+        if (isCharType)\n         {\n             into.long2 |= CHAR_TYPE_STATE_MARKER;\n-        }\n-        else\n+        } else\n         {\n             into.long2 &= ~CHAR_TYPE_STATE_MARKER;\n         }\n     }\n \n-    private static boolean isHighestText( long long3 )\n+    private static boolean isHighestText(long long3)\n     {\n         return long3 == TRUE;\n     }\n \n-    static boolean isCharValueType( long long2 )\n+    static boolean isCharValueType(long long2)\n     {\n-        return booleanOf( long2 >> 1 );\n+        return booleanOf(long2 >> 1);\n     }\n \n-    void write( GenericKey state, byte[] bytes, boolean isCharType )\n+    void write(GenericKey state, byte[] bytes, boolean isCharType)\n     {\n         state.byteArray = bytes;\n         state.long0 = bytes.length;\n-        setCharType( state, isCharType );\n+        setCharType(state, isCharType);\n     }\n \n     @Override\n-    void initializeAsHighest( GenericKey state )\n+    void initializeAsHighest(GenericKey state)\n     {\n-        super.initializeAsHighest( state );\n+        super.initializeAsHighest(state);\n         state.long3 = TRUE;\n     }\n \n-    static char textAsChar( byte[] byteArray )\n+    static char textAsChar(byte[] byteArray)\n     {\n-        long codePoint = new UTF8StringValue.CodePointCursor( byteArray, 0 ).nextCodePoint();\n-        if ( (codePoint & ~0xFFFF) != 0 )\n+        long codePoint = new UTF8StringValue.CodePointCursor(byteArray, 0).nextCodePoint();\n+        if ((codePoint & ~0xFFFF) != 0)\n         {\n-            throw new IllegalStateException( \"Char value seems to be bigger than what a char can hold \" + codePoint );\n+            throw new IllegalStateException(\"Char value seems to be bigger than what a char can hold \" + codePoint);\n         }\n         return (char) codePoint;\n     }\n \n-    private static void setBytesLength( GenericKey state, int length )\n+    private static void setBytesLength(GenericKey state, int length)\n     {\n-        if ( booleanOf( state.long1 ) || state.byteArray == null || state.byteArray.length < length )\n+        if (booleanOf(state.long1) || state.byteArray == null || state.byteArray.length < length)\n         {\n             state.long1 = FALSE;\n \n@@ -251,13 +250,13 @@ class TextType extends Type\n     }\n \n     @Override\n-    protected void addTypeSpecificDetails( StringJoiner joiner, GenericKey state )\n+    protected void addTypeSpecificDetails(StringJoiner joiner, GenericKey state)\n     {\n-        joiner.add( \"long0=\" + state.long0 );\n-        joiner.add( \"long1=\" + state.long1 );\n-        joiner.add( \"long2=\" + state.long2 );\n-        joiner.add( \"long3=\" + state.long3 );\n-        joiner.add( \"byteArray=\" + Arrays.toString( state.byteArray ) );\n+        joiner.add(\"long0=\" + state.long0);\n+        joiner.add(\"long1=\" + state.long1);\n+        joiner.add(\"long2=\" + state.long2);\n+        joiner.add(\"long3=\" + state.long3);\n+        joiner.add(\"byteArray=\" + Arrays.toString(state.byteArray));\n     }\n \n     /**\n@@ -265,35 +264,35 @@ class TextType extends Type\n      * If arrays have different length and the longer array share all bytes with the shorter array, then the longer one is larger,\n      * unless ignoreLength is set to true in which case they are considered equal.\n      */\n-    private static int lexicographicalUnsignedByteArrayCompare( byte[] a, int aLength, byte[] b, int bLength, boolean ignoreLength )\n+    private static int lexicographicalUnsignedByteArrayCompare(byte[] a, int aLength, byte[] b, int bLength, boolean ignoreLength)\n     {\n         assert a != null && b != null : \"Null arrays not supported.\";\n \n-        if ( a == b && aLength == bLength )\n+        if (a == b && aLength == bLength)\n         {\n             return 0;\n         }\n \n-        int length = Math.min( aLength, bLength );\n-        for ( int i = 0; i < length; i++ )\n+        int length = Math.min(aLength, bLength);\n+        for (int i = 0; i < length; i++)\n         {\n-            int compare = Short.compare( (short) (a[i] & 0xFF), (short) (b[i] & 0xFF) );\n-            if ( compare != 0 )\n+            int compare = Short.compare((short) (a[i] & 0xFF), (short) (b[i] & 0xFF));\n+            if (compare != 0)\n             {\n                 return compare;\n             }\n         }\n \n-        return ignoreLength ? 0 : Integer.compare( aLength, bLength );\n+        return ignoreLength ? 0 : Integer.compare(aLength, bLength);\n     }\n \n-    private static int minimalLengthFromRightNeededToDifferentiateFromLeft( byte[] leftBytes, int leftLength, byte[] rightBytes, int rightLength )\n+    private static int minimalLengthFromRightNeededToDifferentiateFromLeft(byte[] leftBytes, int leftLength, byte[] rightBytes, int rightLength)\n     {\n         int lastEqualIndex = -1;\n-        int maxLength = min( leftLength, rightLength );\n-        for ( int index = 0; index < maxLength; index++ )\n+        int maxLength = min(leftLength, rightLength);\n+        for (int index = 0; index < maxLength; index++)\n         {\n-            if ( leftBytes[index] != rightBytes[index] )\n+            if (leftBytes[index] != rightBytes[index])\n             {\n                 break;\n             }\n@@ -302,6 +301,6 @@ class TextType extends Type\n         // Convert from last equal index to first index to differ +1\n         // Convert from index to length +1\n         // Total +2\n-        return Math.min( rightLength, lastEqualIndex + 2 );\n+        return Math.min(rightLength, lastEqualIndex + 2);\n     }\n }\n",
            "diff_size": 85
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}