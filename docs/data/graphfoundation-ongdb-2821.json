{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2821",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "93",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "259",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "279",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "297",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "454",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "482",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "504",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2821/ConsistencyReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2821/ConsistencyReporter.java\nindex df54bec95e5..6e280947121 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2821/ConsistencyReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2821/ConsistencyReporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.report;\n \n import java.lang.reflect.Constructor;\n@@ -54,469 +55,461 @@ import static org.neo4j.helpers.Exceptions.stringify;\n \n public class ConsistencyReporter implements ConsistencyReport.Reporter\n {\n-    private static final ProxyFactory<ConsistencyReport.SchemaConsistencyReport> SCHEMA_REPORT =\n-            ProxyFactory.create( ConsistencyReport.SchemaConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.NodeConsistencyReport> NODE_REPORT =\n-            ProxyFactory.create( ConsistencyReport.NodeConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipConsistencyReport> RELATIONSHIP_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.PropertyConsistencyReport> PROPERTY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.PropertyConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipTypeConsistencyReport> RELATIONSHIP_TYPE_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipTypeConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.LabelTokenConsistencyReport> LABEL_KEY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.LabelTokenConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.PropertyKeyTokenConsistencyReport> PROPERTY_KEY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.PropertyKeyTokenConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.DynamicConsistencyReport> DYNAMIC_REPORT =\n-            ProxyFactory.create( ConsistencyReport.DynamicConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.DynamicLabelConsistencyReport> DYNAMIC_LABEL_REPORT =\n-            ProxyFactory.create( ConsistencyReport.DynamicLabelConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.LabelScanConsistencyReport> LABEL_SCAN_REPORT =\n-            ProxyFactory.create( ConsistencyReport.LabelScanConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.IndexConsistencyReport> INDEX =\n-            ProxyFactory.create( ConsistencyReport.IndexConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipGroupConsistencyReport> RELATIONSHIP_GROUP_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipGroupConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.CountsConsistencyReport> COUNTS_REPORT =\n-            ProxyFactory.create( ConsistencyReport.CountsConsistencyReport.class );\n-\n-    private final RecordAccess records;\n-    private final InconsistencyReport report;\n-    private final Monitor monitor;\n-\n-    public interface Monitor\n+  private static final ProxyFactory<ConsistencyReport.SchemaConsistencyReport> SCHEMA_REPORT =\n+      ProxyFactory.create(ConsistencyReport.SchemaConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.NodeConsistencyReport> NODE_REPORT =\n+      ProxyFactory.create(ConsistencyReport.NodeConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.RelationshipConsistencyReport> RELATIONSHIP_REPORT =\n+      ProxyFactory.create(ConsistencyReport.RelationshipConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.PropertyConsistencyReport> PROPERTY_REPORT =\n+      ProxyFactory.create(ConsistencyReport.PropertyConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.RelationshipTypeConsistencyReport> RELATIONSHIP_TYPE_REPORT =\n+      ProxyFactory.create(ConsistencyReport.RelationshipTypeConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.LabelTokenConsistencyReport> LABEL_KEY_REPORT =\n+      ProxyFactory.create(ConsistencyReport.LabelTokenConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.PropertyKeyTokenConsistencyReport> PROPERTY_KEY_REPORT =\n+      ProxyFactory.create(ConsistencyReport.PropertyKeyTokenConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.DynamicConsistencyReport> DYNAMIC_REPORT =\n+      ProxyFactory.create(ConsistencyReport.DynamicConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.DynamicLabelConsistencyReport> DYNAMIC_LABEL_REPORT =\n+      ProxyFactory.create(ConsistencyReport.DynamicLabelConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.LabelScanConsistencyReport> LABEL_SCAN_REPORT =\n+      ProxyFactory.create(ConsistencyReport.LabelScanConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.IndexConsistencyReport> INDEX =\n+      ProxyFactory.create(ConsistencyReport.IndexConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.RelationshipGroupConsistencyReport> RELATIONSHIP_GROUP_REPORT =\n+      ProxyFactory.create(ConsistencyReport.RelationshipGroupConsistencyReport.class);\n+  private static final ProxyFactory<ConsistencyReport.CountsConsistencyReport> COUNTS_REPORT =\n+      ProxyFactory.create(ConsistencyReport.CountsConsistencyReport.class);\n+\n+  private final RecordAccess records;\n+  private final InconsistencyReport report;\n+  private final Monitor monitor;\n+\n+  public interface Monitor\n+  {\n+    void reported(Class<?> report, String method, String message);\n+  }\n+\n+  public static final Monitor NO_MONITOR = (report, method, message) ->\n+  {\n+  };\n+\n+  public ConsistencyReporter(RecordAccess records, InconsistencyReport report)\n+  {\n+    this(records, report, NO_MONITOR);\n+  }\n+\n+  public ConsistencyReporter(RecordAccess records, InconsistencyReport report, Monitor monitor)\n+  {\n+    this.records = records;\n+    this.report = report;\n+    this.monitor = monitor;\n+  }\n+\n+  private <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n+  void dispatch(RecordType type, ProxyFactory<REPORT> factory, RECORD record, RecordCheck<RECORD, REPORT> checker)\n+  {\n+    ReportInvocationHandler<RECORD, REPORT> handler = new ReportHandler<>(report, factory, type, records, record,\n+        monitor);\n+    try\n     {\n-        void reported( Class<?> report, String method, String message );\n-    }\n-\n-    public static final Monitor NO_MONITOR = ( report, method, message ) ->\n+      checker.check(record, handler, records);\n+    } catch (Exception e)\n     {\n-    };\n+      // This is a rare event and exposing the stack trace is a good idea, otherwise we\n+      // can only see that something went wrong, not at all what.\n+      handler.report.error(type, record, \"Failed to check record: \" + stringify(e),\n+          new Object[0]);\n+    }\n+    handler.updateSummary();\n+  }\n+\n+  static void dispatchReference(CheckerEngine engine, ComparativeRecordChecker checker,\n+                                AbstractBaseRecord referenced, RecordAccess records)\n+  {\n+    ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n+    handler.checkReference(engine, checker, referenced, records);\n+    handler.updateSummary();\n+  }\n+\n+  static String pendingCheckToString(CheckerEngine engine, ComparativeRecordChecker checker)\n+  {\n+    ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n+    return handler.pendingCheckToString(checker);\n+  }\n+\n+  static void dispatchChangeReference(CheckerEngine engine, ComparativeRecordChecker checker,\n+                                      AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n+                                      RecordAccess records)\n+  {\n+    ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n+    handler.checkDiffReference(engine, checker, oldReferenced, newReferenced, records);\n+    handler.updateSummary();\n+  }\n+\n+  static void dispatchSkip(CheckerEngine engine)\n+  {\n+    ((ReportInvocationHandler) engine).updateSummary();\n+  }\n+\n+  public <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> REPORT report(RECORD record,\n+                                                                                             Class<REPORT> cls, RecordType recordType)\n+  {\n+    ProxyFactory<REPORT> proxyFactory = ProxyFactory.get(cls);\n+    ReportInvocationHandler<RECORD, REPORT> handler =\n+        new ReportHandler<RECORD, REPORT>(report, proxyFactory, recordType, records, record, monitor)\n+        {\n+          @Override\n+          protected void inconsistencyReported()\n+          {\n+            updateSummary();\n+          }\n+        };\n+    return handler.report();\n+  }\n+\n+  public abstract static class ReportInvocationHandler\n+      <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n+      implements CheckerEngine<RECORD, REPORT>, InvocationHandler\n+  {\n+    final InconsistencyReport report;\n+    private final ProxyFactory<REPORT> factory;\n+    final RecordType type;\n+    private short errors;\n+    private short warnings;\n+    private short references = 1/*this*/;\n+    private final RecordAccess records;\n+    private final Monitor monitor;\n \n-    public ConsistencyReporter( RecordAccess records, InconsistencyReport report )\n+    private ReportInvocationHandler(InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type,\n+                                    RecordAccess records, Monitor monitor)\n     {\n-        this( records, report, NO_MONITOR );\n+      this.report = report;\n+      this.factory = factory;\n+      this.type = type;\n+      this.records = records;\n+      this.monitor = monitor;\n     }\n \n-    public ConsistencyReporter( RecordAccess records, InconsistencyReport report, Monitor monitor )\n+    synchronized void updateSummary()\n     {\n-        this.records = records;\n-        this.report = report;\n-        this.monitor = monitor;\n+      if (--references == 0)\n+      {\n+        report.updateSummary(type, errors, warnings);\n+      }\n     }\n \n-    private <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-    void dispatch( RecordType type, ProxyFactory<REPORT> factory, RECORD record, RecordCheck<RECORD, REPORT> checker )\n+    String pendingCheckToString(ComparativeRecordChecker checker)\n     {\n-        ReportInvocationHandler<RECORD,REPORT> handler = new ReportHandler<>( report, factory, type, records, record,\n-                monitor );\n-        try\n+      String checkName;\n+      try\n+      {\n+        if (checker.getClass().getMethod(\"toString\").getDeclaringClass() == Object.class)\n         {\n-            checker.check( record, handler, records );\n-        }\n-        catch ( Exception e )\n+          checkName = checker.getClass().getSimpleName();\n+          if (checkName.length() == 0)\n+          {\n+            checkName = checker.getClass().getName();\n+          }\n+        } else\n         {\n-            // This is a rare event and exposing the stack trace is a good idea, otherwise we\n-            // can only see that something went wrong, not at all what.\n-            handler.report.error( type, record, \"Failed to check record: \" + stringify( e ),\n-                    new Object[0] );\n+          checkName = checker.toString();\n         }\n-        handler.updateSummary();\n+      } catch (NoSuchMethodException e)\n+      {\n+        checkName = checker.toString();\n+      }\n+      return String.format(\"ReferenceCheck{%s[%s]/%s}\", type, recordId(), checkName);\n     }\n \n-    static void dispatchReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                   AbstractBaseRecord referenced, RecordAccess records )\n-    {\n-        ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n-        handler.checkReference( engine, checker, referenced, records );\n-        handler.updateSummary();\n-    }\n+    abstract long recordId();\n \n-    static String pendingCheckToString( CheckerEngine engine, ComparativeRecordChecker checker )\n+    @Override\n+    public <REFERRED extends AbstractBaseRecord> void comparativeCheck(\n+        RecordReference<REFERRED> reference, ComparativeRecordChecker<RECORD, ? super REFERRED, REPORT> checker)\n     {\n-        ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n-        return handler.pendingCheckToString(checker);\n+      references++;\n+      reference.dispatch(new PendingReferenceCheck<>(this, checker));\n     }\n \n-    static void dispatchChangeReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                         AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n-                                         RecordAccess records )\n+    @Override\n+    public REPORT report()\n     {\n-        ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n-        handler.checkDiffReference( engine, checker, oldReferenced, newReferenced, records );\n-        handler.updateSummary();\n+      return factory.create(this);\n     }\n \n-    static void dispatchSkip( CheckerEngine engine )\n+    /**\n+     * Invoked when an inconsistency is encountered.\n+     *\n+     * @param args array of the items referenced from this record with which it is inconsistent.\n+     */\n+    @Override\n+    public Object invoke(Object proxy, Method method, Object[] args)\n     {\n-        ((ReportInvocationHandler) engine ).updateSummary();\n+      String message;\n+      Documented annotation = method.getAnnotation(Documented.class);\n+      if (annotation != null && !\"\".equals(annotation.value()))\n+      {\n+        message = annotation.value();\n+      } else\n+      {\n+        message = method.getName();\n+      }\n+      if (method.getAnnotation(ConsistencyReport.Warning.class) == null)\n+      {\n+        errors++;\n+        args = getRealRecords(args);\n+        logError(message, args);\n+      } else\n+      {\n+        warnings++;\n+        args = getRealRecords(args);\n+        logWarning(message, args);\n+      }\n+      monitor.reported(factory.type(), method.getName(), message);\n+      inconsistencyReported();\n+      return null;\n     }\n \n-    public <RECORD extends AbstractBaseRecord,REPORT extends ConsistencyReport> REPORT report( RECORD record,\n-            Class<REPORT> cls, RecordType recordType )\n+    protected void inconsistencyReported()\n     {\n-        ProxyFactory<REPORT> proxyFactory = ProxyFactory.get( cls );\n-        ReportInvocationHandler<RECORD,REPORT> handler =\n-                new ReportHandler<RECORD,REPORT>( report, proxyFactory, recordType, records, record, monitor )\n-        {\n-            @Override\n-            protected void inconsistencyReported()\n-            {\n-                updateSummary();\n-            }\n-        };\n-        return handler.report();\n     }\n \n-    public abstract static class ReportInvocationHandler\n-            <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-            implements CheckerEngine<RECORD, REPORT>, InvocationHandler\n+    private Object[] getRealRecords(Object[] args)\n     {\n-        final InconsistencyReport report;\n-        private final ProxyFactory<REPORT> factory;\n-        final RecordType type;\n-        private short errors;\n-        private short warnings;\n-        private short references = 1/*this*/;\n-        private final RecordAccess records;\n-        private final Monitor monitor;\n-\n-        private ReportInvocationHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type,\n-               RecordAccess records, Monitor monitor )\n-        {\n-            this.report = report;\n-            this.factory = factory;\n-            this.type = type;\n-            this.records = records;\n-            this.monitor = monitor;\n-        }\n-\n-        synchronized void updateSummary()\n-        {\n-            if ( --references == 0 )\n-            {\n-                report.updateSummary( type, errors, warnings );\n-            }\n+      if (args == null)\n+      {\n+        return args;\n+      }\n+      for (int i = 0; i < args.length; i++)\n+      {\n+        // We use \"created\" flag here. Consistency checking code revolves around records and so\n+        // even in scenarios where records are built from other sources, f.ex half-and-purpose-built from cache,\n+        // this flag is used to signal that the real record needs to be read in order to be used as a general\n+        // purpose record.\n+        if (args[i] instanceof AbstractBaseRecord && ((AbstractBaseRecord) args[i]).isCreated())\n+        {   // get the real record\n+          if (args[i] instanceof NodeRecord)\n+          {\n+            args[i] = ((DirectRecordReference<NodeRecord>) records.node(\n+                ((NodeRecord) args[i]).getId())).record();\n+          } else if (args[i] instanceof RelationshipRecord)\n+          {\n+            args[i] = ((DirectRecordReference<RelationshipRecord>) records.relationship(\n+                ((RelationshipRecord) args[i]).getId())).record();\n+          }\n         }\n-\n-        String pendingCheckToString( ComparativeRecordChecker checker )\n-        {\n-            String checkName;\n-            try\n-            {\n-                if ( checker.getClass().getMethod( \"toString\" ).getDeclaringClass() == Object.class )\n-                {\n-                    checkName = checker.getClass().getSimpleName();\n-                    if ( checkName.length() == 0 )\n-                    {\n-                        checkName = checker.getClass().getName();\n-                    }\n-                }\n-                else\n-                {\n-                    checkName = checker.toString();\n-                }\n-            }\n-            catch ( NoSuchMethodException e )\n-            {\n-                checkName = checker.toString();\n-            }\n-            return String.format( \"ReferenceCheck{%s[%s]/%s}\", type, recordId(), checkName );\n-        }\n-\n-        abstract long recordId();\n-\n-        @Override\n-        public <REFERRED extends AbstractBaseRecord> void comparativeCheck(\n-                RecordReference<REFERRED> reference, ComparativeRecordChecker<RECORD, ? super REFERRED, REPORT> checker )\n-        {\n-            references++;\n-            reference.dispatch( new PendingReferenceCheck<>( this, checker ) );\n-        }\n-\n-        @Override\n-        public REPORT report()\n-        {\n-            return factory.create( this );\n-        }\n-\n-        /**\n-         * Invoked when an inconsistency is encountered.\n-         *\n-         * @param args array of the items referenced from this record with which it is inconsistent.\n-         */\n-        @Override\n-        public Object invoke( Object proxy, Method method, Object[] args )\n-        {\n-            String message;\n-            Documented annotation = method.getAnnotation( Documented.class );\n-            if ( annotation != null && !\"\".equals( annotation.value() ) )\n-            {\n-               message = annotation.value();\n-            }\n-            else\n-            {\n-                message = method.getName();\n-            }\n-            if ( method.getAnnotation( ConsistencyReport.Warning.class ) == null )\n-            {\n-                errors++;\n-                args = getRealRecords( args );\n-                logError( message, args );\n-            }\n-            else\n-            {\n-                warnings++;\n-                args = getRealRecords( args );\n-                logWarning( message, args );\n-            }\n-            monitor.reported( factory.type(), method.getName(), message );\n-            inconsistencyReported();\n-            return null;\n-        }\n-\n-        protected void inconsistencyReported()\n-        {\n-        }\n-\n-        private Object[] getRealRecords( Object[] args )\n-        {\n-            if ( args == null )\n-            {\n-                return args;\n-            }\n-            for ( int i = 0; i < args.length; i++ )\n-            {\n-                // We use \"created\" flag here. Consistency checking code revolves around records and so\n-                // even in scenarios where records are built from other sources, f.ex half-and-purpose-built from cache,\n-                // this flag is used to signal that the real record needs to be read in order to be used as a general\n-                // purpose record.\n-                if ( args[i] instanceof AbstractBaseRecord && ((AbstractBaseRecord) args[i]).isCreated() )\n-                {   // get the real record\n-                    if ( args[i] instanceof NodeRecord )\n-                    {\n-                        args[i] = ((DirectRecordReference<NodeRecord>) records.node(\n-                                ((NodeRecord) args[i]).getId() )).record();\n-                    }\n-                    else if ( args[i] instanceof RelationshipRecord )\n-                    {\n-                        args[i] = ((DirectRecordReference<RelationshipRecord>) records.relationship(\n-                                ((RelationshipRecord) args[i]).getId() )).record();\n-                    }\n-                }\n-            }\n-            return args;\n-        }\n-\n-        protected abstract void logError( String message, Object[] args );\n-\n-        protected abstract void logWarning( String message, Object[] args );\n-\n-        abstract void checkReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                      AbstractBaseRecord referenced, RecordAccess records );\n-\n-        abstract void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                          AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n-                                          RecordAccess records );\n+      }\n+      return args;\n     }\n \n-    public static class ReportHandler\n-            <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-            extends ReportInvocationHandler<RECORD,REPORT>\n-    {\n-        private final AbstractBaseRecord record;\n+    protected abstract void logError(String message, Object[] args);\n \n-        public ReportHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type,\n-                RecordAccess records, AbstractBaseRecord record, Monitor monitor )\n-        {\n-            super( report, factory, type, records, monitor );\n-            this.record = record;\n-        }\n-\n-        @Override\n-        long recordId()\n-        {\n-            return record.getId();\n-        }\n-\n-        @Override\n-        protected void logError( String message, Object[] args )\n-        {\n-            report.error( type, record, message, args );\n-        }\n+    protected abstract void logWarning(String message, Object[] args);\n \n-        @Override\n-        protected void logWarning( String message, Object[] args )\n-        {\n-            report.warning( type, record, message, args );\n-        }\n+    abstract void checkReference(CheckerEngine engine, ComparativeRecordChecker checker,\n+                                 AbstractBaseRecord referenced, RecordAccess records);\n \n-        @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        void checkReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced,\n-                             RecordAccess records )\n-        {\n-            checker.checkReference( record, referenced, this, records );\n-        }\n+    abstract void checkDiffReference(CheckerEngine engine, ComparativeRecordChecker checker,\n+                                     AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n+                                     RecordAccess records);\n+  }\n \n-        @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                 AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n-                                 RecordAccess records )\n-        {\n-            checker.checkReference( record, newReferenced, this, records );\n-        }\n-    }\n+  public static class ReportHandler\n+      <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n+      extends ReportInvocationHandler<RECORD, REPORT>\n+  {\n+    private final AbstractBaseRecord record;\n \n-    @Override\n-    public void forSchema( DynamicRecord schema,\n-                           RecordCheck<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> checker )\n+    public ReportHandler(InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type,\n+                         RecordAccess records, AbstractBaseRecord record, Monitor monitor)\n     {\n-        dispatch( RecordType.SCHEMA, SCHEMA_REPORT, schema, checker );\n+      super(report, factory, type, records, monitor);\n+      this.record = record;\n     }\n \n     @Override\n-    public void forNode( NodeRecord node,\n-                         RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker )\n+    long recordId()\n     {\n-        dispatch( RecordType.NODE, NODE_REPORT, node, checker );\n+      return record.getId();\n     }\n \n     @Override\n-    public void forRelationship( RelationshipRecord relationship,\n-                                 RecordCheck<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> checker )\n+    protected void logError(String message, Object[] args)\n     {\n-        dispatch( RecordType.RELATIONSHIP, RELATIONSHIP_REPORT, relationship, checker );\n+      report.error(type, record, message, args);\n     }\n \n     @Override\n-    public void forProperty( PropertyRecord property,\n-                             RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> checker )\n+    protected void logWarning(String message, Object[] args)\n     {\n-        dispatch( RecordType.PROPERTY, PROPERTY_REPORT, property, checker );\n+      report.warning(type, record, message, args);\n     }\n \n     @Override\n-    public void forRelationshipTypeName( RelationshipTypeTokenRecord relationshipTypeTokenRecord,\n-                                         RecordCheck<RelationshipTypeTokenRecord,\n-                                         ConsistencyReport.RelationshipTypeConsistencyReport> checker )\n+    @SuppressWarnings(\"unchecked\")\n+    void checkReference(CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced,\n+                        RecordAccess records)\n     {\n-        dispatch( RecordType.RELATIONSHIP_TYPE, RELATIONSHIP_TYPE_REPORT, relationshipTypeTokenRecord, checker );\n+      checker.checkReference(record, referenced, this, records);\n     }\n \n     @Override\n-    public void forLabelName( LabelTokenRecord label,\n-                              RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport> checker )\n+    @SuppressWarnings(\"unchecked\")\n+    void checkDiffReference(CheckerEngine engine, ComparativeRecordChecker checker,\n+                            AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n+                            RecordAccess records)\n     {\n-        dispatch( RecordType.LABEL, LABEL_KEY_REPORT, label, checker );\n+      checker.checkReference(record, newReferenced, this, records);\n     }\n-\n-    @Override\n-    public void forNodeLabelScan( LabelScanDocument document,\n-                                  RecordCheck<LabelScanDocument, ConsistencyReport.LabelScanConsistencyReport> checker )\n+  }\n+\n+  @Override\n+  public void forSchema(DynamicRecord schema,\n+                        RecordCheck<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.SCHEMA, SCHEMA_REPORT, schema, checker);\n+  }\n+\n+  @Override\n+  public void forNode(NodeRecord node,\n+                      RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.NODE, NODE_REPORT, node, checker);\n+  }\n+\n+  @Override\n+  public void forRelationship(RelationshipRecord relationship,\n+                              RecordCheck<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.RELATIONSHIP, RELATIONSHIP_REPORT, relationship, checker);\n+  }\n+\n+  @Override\n+  public void forProperty(PropertyRecord property,\n+                          RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.PROPERTY, PROPERTY_REPORT, property, checker);\n+  }\n+\n+  @Override\n+  public void forRelationshipTypeName(RelationshipTypeTokenRecord relationshipTypeTokenRecord,\n+                                      RecordCheck<RelationshipTypeTokenRecord,\n+                                          ConsistencyReport.RelationshipTypeConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.RELATIONSHIP_TYPE, RELATIONSHIP_TYPE_REPORT, relationshipTypeTokenRecord, checker);\n+  }\n+\n+  @Override\n+  public void forLabelName(LabelTokenRecord label,\n+                           RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.LABEL, LABEL_KEY_REPORT, label, checker);\n+  }\n+\n+  @Override\n+  public void forNodeLabelScan(LabelScanDocument document,\n+                               RecordCheck<LabelScanDocument, ConsistencyReport.LabelScanConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.LABEL_SCAN_DOCUMENT, LABEL_SCAN_REPORT, document, checker);\n+  }\n+\n+  @Override\n+  public void forIndexEntry(IndexEntry entry,\n+                            RecordCheck<IndexEntry, ConsistencyReport.IndexConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.INDEX, INDEX, entry, checker);\n+  }\n+\n+  @Override\n+  public void forPropertyKey(PropertyKeyTokenRecord key,\n+                             RecordCheck<PropertyKeyTokenRecord, ConsistencyReport.PropertyKeyTokenConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.PROPERTY_KEY, PROPERTY_KEY_REPORT, key, checker);\n+  }\n+\n+  @Override\n+  public void forDynamicBlock(RecordType type, DynamicRecord record,\n+                              RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker)\n+  {\n+    dispatch(type, DYNAMIC_REPORT, record, checker);\n+  }\n+\n+  @Override\n+  public void forDynamicLabelBlock(RecordType type, DynamicRecord record,\n+                                   RecordCheck<DynamicRecord, DynamicLabelConsistencyReport> checker)\n+  {\n+    dispatch(type, DYNAMIC_LABEL_REPORT, record, checker);\n+  }\n+\n+  @Override\n+  public void forRelationshipGroup(RelationshipGroupRecord record,\n+                                   RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.RELATIONSHIP_GROUP, RELATIONSHIP_GROUP_REPORT, record, checker);\n+  }\n+\n+  @Override\n+  public void forCounts(CountsEntry countsEntry,\n+                        RecordCheck<CountsEntry, ConsistencyReport.CountsConsistencyReport> checker)\n+  {\n+    dispatch(RecordType.COUNTS, COUNTS_REPORT, countsEntry, checker);\n+  }\n+\n+  public static class ProxyFactory<T>\n+  {\n+    private static Map<Class<?>, ProxyFactory<?>> instances = new HashMap<>();\n+    private Constructor<? extends T> constructor;\n+    private final Class<T> type;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    static <T> ProxyFactory<T> get(Class<T> cls)\n     {\n-        dispatch( RecordType.LABEL_SCAN_DOCUMENT, LABEL_SCAN_REPORT, document, checker );\n+      return (ProxyFactory<T>) instances.get(cls);\n     }\n \n-    @Override\n-    public void forIndexEntry( IndexEntry entry,\n-                               RecordCheck<IndexEntry, ConsistencyReport.IndexConsistencyReport> checker )\n+    @SuppressWarnings(\"unchecked\")\n+    ProxyFactory(Class<T> type) throws LinkageError\n     {\n-        dispatch( RecordType.INDEX, INDEX, entry, checker );\n+      this.type = type;\n+      try\n+      {\n+        this.constructor = (Constructor<? extends T>) Proxy\n+            .getProxyClass(ConsistencyReporter.class.getClassLoader(), type)\n+            .getConstructor(InvocationHandler.class);\n+        instances.put(type, this);\n+      } catch (NoSuchMethodException e)\n+      {\n+        throw new LinkageError(\"Cannot access Proxy constructor for \" + type.getName(), e);\n+      }\n     }\n \n     @Override\n-    public void forPropertyKey( PropertyKeyTokenRecord key,\n-                                RecordCheck<PropertyKeyTokenRecord, ConsistencyReport.PropertyKeyTokenConsistencyReport> checker )\n+    public String toString()\n     {\n-        dispatch( RecordType.PROPERTY_KEY, PROPERTY_KEY_REPORT, key, checker );\n+      return getClass().getSimpleName() + asList(constructor.getDeclaringClass().getInterfaces());\n     }\n \n-    @Override\n-    public void forDynamicBlock( RecordType type, DynamicRecord record,\n-                                 RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker )\n+    Class<?> type()\n     {\n-        dispatch( type, DYNAMIC_REPORT, record, checker );\n+      return type;\n     }\n \n-    @Override\n-    public void forDynamicLabelBlock( RecordType type, DynamicRecord record,\n-                                      RecordCheck<DynamicRecord, DynamicLabelConsistencyReport> checker )\n+    public T create(InvocationHandler handler)\n     {\n-        dispatch( type, DYNAMIC_LABEL_REPORT, record, checker );\n+      try\n+      {\n+        return constructor.newInstance(handler);\n+      } catch (Exception e)\n+      {\n+        throw new LinkageError(\"Failed to create proxy instance\", e);\n+      }\n     }\n \n-    @Override\n-    public void forRelationshipGroup( RelationshipGroupRecord record,\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker )\n+    public static <T> ProxyFactory<T> create(Class<T> type)\n     {\n-        dispatch( RecordType.RELATIONSHIP_GROUP, RELATIONSHIP_GROUP_REPORT, record, checker );\n-    }\n-\n-    @Override\n-    public void forCounts( CountsEntry countsEntry,\n-                           RecordCheck<CountsEntry,ConsistencyReport.CountsConsistencyReport> checker )\n-    {\n-        dispatch( RecordType.COUNTS, COUNTS_REPORT, countsEntry, checker );\n-    }\n-\n-    public static class ProxyFactory<T>\n-    {\n-        private static Map<Class<?>,ProxyFactory<?>> instances = new HashMap<>();\n-        private Constructor<? extends T> constructor;\n-        private final Class<T> type;\n-\n-        @SuppressWarnings( \"unchecked\" )\n-        static <T> ProxyFactory<T> get( Class<T> cls )\n-        {\n-            return (ProxyFactory<T>) instances.get( cls );\n-        }\n-\n-        @SuppressWarnings( \"unchecked\" )\n-        ProxyFactory( Class<T> type ) throws LinkageError\n-        {\n-            this.type = type;\n-            try\n-            {\n-                this.constructor = (Constructor<? extends T>) Proxy\n-                        .getProxyClass( ConsistencyReporter.class.getClassLoader(), type )\n-                        .getConstructor( InvocationHandler.class );\n-                instances.put( type, this );\n-            }\n-            catch ( NoSuchMethodException e )\n-            {\n-                throw new LinkageError( \"Cannot access Proxy constructor for \" + type.getName(), e );\n-            }\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return getClass().getSimpleName() + asList( constructor.getDeclaringClass().getInterfaces() );\n-        }\n-\n-        Class<?> type()\n-        {\n-            return type;\n-        }\n-\n-        public T create( InvocationHandler handler )\n-        {\n-            try\n-            {\n-                return constructor.newInstance( handler );\n-            }\n-            catch ( Exception e )\n-            {\n-                throw new LinkageError( \"Failed to create proxy instance\", e );\n-            }\n-        }\n-\n-        public static <T> ProxyFactory<T> create( Class<T> type )\n-        {\n-            return new ProxyFactory<>( type );\n-        }\n+      return new ProxyFactory<>(type);\n     }\n+  }\n }\n",
            "diff_size": 640
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "222",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "307",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2821/ConsistencyReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2821/ConsistencyReporter.java\nindex df54bec95e5..5c60c3c222b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2821/ConsistencyReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2821/ConsistencyReporter.java\n@@ -54,34 +54,32 @@ import static org.neo4j.helpers.Exceptions.stringify;\n \n public class ConsistencyReporter implements ConsistencyReport.Reporter\n {\n-    private static final ProxyFactory<ConsistencyReport.SchemaConsistencyReport> SCHEMA_REPORT =\n-            ProxyFactory.create( ConsistencyReport.SchemaConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.NodeConsistencyReport> NODE_REPORT =\n-            ProxyFactory.create( ConsistencyReport.NodeConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipConsistencyReport> RELATIONSHIP_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.PropertyConsistencyReport> PROPERTY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.PropertyConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipTypeConsistencyReport> RELATIONSHIP_TYPE_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipTypeConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.LabelTokenConsistencyReport> LABEL_KEY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.LabelTokenConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.PropertyKeyTokenConsistencyReport> PROPERTY_KEY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.PropertyKeyTokenConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.DynamicConsistencyReport> DYNAMIC_REPORT =\n-            ProxyFactory.create( ConsistencyReport.DynamicConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.DynamicLabelConsistencyReport> DYNAMIC_LABEL_REPORT =\n-            ProxyFactory.create( ConsistencyReport.DynamicLabelConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.LabelScanConsistencyReport> LABEL_SCAN_REPORT =\n-            ProxyFactory.create( ConsistencyReport.LabelScanConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.IndexConsistencyReport> INDEX =\n-            ProxyFactory.create( ConsistencyReport.IndexConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipGroupConsistencyReport> RELATIONSHIP_GROUP_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipGroupConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.CountsConsistencyReport> COUNTS_REPORT =\n-            ProxyFactory.create( ConsistencyReport.CountsConsistencyReport.class );\n-\n-    private final RecordAccess records;\n+    private static final ProxyFactory<ConsistencyReport.SchemaConsistencyReport> SCHEMA_REPORT = ProxyFactory.create( ConsistencyReport.SchemaConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.NodeConsistencyReport> NODE_REPORT = ProxyFactory.create( ConsistencyReport.NodeConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.RelationshipConsistencyReport> RELATIONSHIP_REPORT = ProxyFactory.create( ConsistencyReport.RelationshipConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.PropertyConsistencyReport> PROPERTY_REPORT = ProxyFactory.create( ConsistencyReport.PropertyConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.RelationshipTypeConsistencyReport> RELATIONSHIP_TYPE_REPORT = ProxyFactory.create( ConsistencyReport.RelationshipTypeConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.LabelTokenConsistencyReport> LABEL_KEY_REPORT = ProxyFactory.create( ConsistencyReport.LabelTokenConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.PropertyKeyTokenConsistencyReport> PROPERTY_KEY_REPORT = ProxyFactory.create( ConsistencyReport.PropertyKeyTokenConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.DynamicConsistencyReport> DYNAMIC_REPORT = ProxyFactory.create( ConsistencyReport.DynamicConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.DynamicLabelConsistencyReport> DYNAMIC_LABEL_REPORT = ProxyFactory.create( ConsistencyReport.DynamicLabelConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.LabelScanConsistencyReport> LABEL_SCAN_REPORT = ProxyFactory.create( ConsistencyReport.LabelScanConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.IndexConsistencyReport> INDEX = ProxyFactory.create( ConsistencyReport.IndexConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.RelationshipGroupConsistencyReport> RELATIONSHIP_GROUP_REPORT = ProxyFactory.create( ConsistencyReport.RelationshipGroupConsistencyReport.class );\n+\n+private static final ProxyFactory<ConsistencyReport.CountsConsistencyReport> COUNTS_REPORT = ProxyFactory.create( ConsistencyReport.CountsConsistencyReport.class );\n+private final RecordAccess records;\n     private final InconsistencyReport report;\n     private final Monitor monitor;\n \n@@ -106,12 +104,12 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         this.monitor = monitor;\n     }\n \n-    private <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-    void dispatch( RecordType type, ProxyFactory<REPORT> factory, RECORD record, RecordCheck<RECORD, REPORT> checker )\n+    private <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> void dispatch( RecordType type, ProxyFactory<REPORT> factory, RECORD record, RecordCheck<RECORD,REPORT> checker )\n     {\n         ReportInvocationHandler<RECORD,REPORT> handler = new ReportHandler<>( report, factory, type, records, record,\n                 monitor );\n-        try\n+\n+try\n         {\n             checker.check( record, handler, records );\n         }\n@@ -119,15 +117,13 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         {\n             // This is a rare event and exposing the stack trace is a good idea, otherwise we\n             // can only see that something went wrong, not at all what.\n-            handler.report.error( type, record, \"Failed to check record: \" + stringify( e ),\n-                    new Object[0] );\n+            handler.report.error( type, record, \"Failed to check record: \" + stringify( e ), new Object[0] );\n         }\n         handler.updateSummary();\n     }\n \n-    static void dispatchReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                   AbstractBaseRecord referenced, RecordAccess records )\n-    {\n+    static void dispatchReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced, RecordAccess records )\n+{\n         ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n         handler.checkReference( engine, checker, referenced, records );\n         handler.updateSummary();\n@@ -139,10 +135,9 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         return handler.pendingCheckToString(checker);\n     }\n \n-    static void dispatchChangeReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                         AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n+    static void dispatchChangeReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n                                          RecordAccess records )\n-    {\n+{\n         ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n         handler.checkDiffReference( engine, checker, oldReferenced, newReferenced, records );\n         handler.updateSummary();\n@@ -150,15 +145,13 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n \n     static void dispatchSkip( CheckerEngine engine )\n     {\n-        ((ReportInvocationHandler) engine ).updateSummary();\n+        ((ReportInvocationHandler) engine).updateSummary();\n     }\n \n-    public <RECORD extends AbstractBaseRecord,REPORT extends ConsistencyReport> REPORT report( RECORD record,\n-            Class<REPORT> cls, RecordType recordType )\n+    public <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> REPORT report( RECORD record, Class<REPORT> cls, RecordType recordType )\n     {\n         ProxyFactory<REPORT> proxyFactory = ProxyFactory.get( cls );\n-        ReportInvocationHandler<RECORD,REPORT> handler =\n-                new ReportHandler<RECORD,REPORT>( report, proxyFactory, recordType, records, record, monitor )\n+        ReportInvocationHandler<RECORD,REPORT> handler = new ReportHandler<RECORD,REPORT>( report, proxyFactory, recordType, records, record, monitor )\n         {\n             @Override\n             protected void inconsistencyReported()\n@@ -169,10 +162,8 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         return handler.report();\n     }\n \n-    public abstract static class ReportInvocationHandler\n-            <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-            implements CheckerEngine<RECORD, REPORT>, InvocationHandler\n-    {\n+    public abstract static class ReportInvocationHandler<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> implements CheckerEngine<RECORD, REPORT>, InvocationHandler\n+{\n         final InconsistencyReport report;\n         private final ProxyFactory<REPORT> factory;\n         final RecordType type;\n@@ -182,9 +173,8 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         private final RecordAccess records;\n         private final Monitor monitor;\n \n-        private ReportInvocationHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type,\n-               RecordAccess records, Monitor monitor )\n-        {\n+        private ReportInvocationHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type, RecordAccess records, Monitor monitor )\n+{\n             this.report = report;\n             this.factory = factory;\n             this.type = type;\n@@ -222,14 +212,14 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n             {\n                 checkName = checker.toString();\n             }\n-            return String.format( \"ReferenceCheck{%s[%s]/%s}\", type, recordId(), checkName );\n+\n+return String.format( \"ReferenceCheck{%s[%s]/%s}\", type, recordId(), checkName );\n         }\n \n         abstract long recordId();\n \n         @Override\n-        public <REFERRED extends AbstractBaseRecord> void comparativeCheck(\n-                RecordReference<REFERRED> reference, ComparativeRecordChecker<RECORD, ? super REFERRED, REPORT> checker )\n+        public <REFERRED extends AbstractBaseRecord> void comparativeCheck( RecordReference<REFERRED> reference, ComparativeRecordChecker<RECORD, ? super REFERRED, REPORT> checker )\n         {\n             references++;\n             reference.dispatch( new PendingReferenceCheck<>( this, checker ) );\n@@ -253,13 +243,14 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n             Documented annotation = method.getAnnotation( Documented.class );\n             if ( annotation != null && !\"\".equals( annotation.value() ) )\n             {\n-               message = annotation.value();\n-            }\n+    message = annotation.value();\n+    }\n             else\n             {\n                 message = method.getName();\n             }\n-            if ( method.getAnnotation( ConsistencyReport.Warning.class ) == null )\n+\n+if ( method.getAnnotation( ConsistencyReport.Warning.class ) == null )\n             {\n                 errors++;\n                 args = getRealRecords( args );\n@@ -293,17 +284,16 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n                 // this flag is used to signal that the real record needs to be read in order to be used as a general\n                 // purpose record.\n                 if ( args[i] instanceof AbstractBaseRecord && ((AbstractBaseRecord) args[i]).isCreated() )\n-                {   // get the real record\n+                {\n+    // get the real record\n                     if ( args[i] instanceof NodeRecord )\n                     {\n-                        args[i] = ((DirectRecordReference<NodeRecord>) records.node(\n-                                ((NodeRecord) args[i]).getId() )).record();\n+                        args[i] = ((DirectRecordReference<NodeRecord>) records.node(((NodeRecord) args[i]).getId() )).record();\n                     }\n                     else if ( args[i] instanceof RelationshipRecord )\n                     {\n-                        args[i] = ((DirectRecordReference<RelationshipRecord>) records.relationship(\n-                                ((RelationshipRecord) args[i]).getId() )).record();\n-                    }\n+                        args[i] = ((DirectRecordReference<RelationshipRecord>) records.relationship(((RelationshipRecord) args[i]).getId() )).record();\n+    }\n                 }\n             }\n             return args;\n@@ -313,17 +303,12 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n \n         protected abstract void logWarning( String message, Object[] args );\n \n-        abstract void checkReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                      AbstractBaseRecord referenced, RecordAccess records );\n-\n-        abstract void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                          AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n+        abstract void checkReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced, RecordAccess records );\n+    abstract void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n                                           RecordAccess records );\n     }\n \n-    public static class ReportHandler\n-            <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-            extends ReportInvocationHandler<RECORD,REPORT>\n+    public static class ReportHandler<RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> extends ReportInvocationHandler<RECORD,REPORT>\n     {\n         private final AbstractBaseRecord record;\n \n@@ -354,117 +339,102 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n \n         @Override\n         @SuppressWarnings( \"unchecked\" )\n-        void checkReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced,\n-                             RecordAccess records )\n-        {\n+        void checkReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced, RecordAccess records )\n+{\n             checker.checkReference( record, referenced, this, records );\n         }\n \n         @Override\n         @SuppressWarnings( \"unchecked\" )\n-        void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                 AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n+        void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n                                  RecordAccess records )\n-        {\n+{\n             checker.checkReference( record, newReferenced, this, records );\n         }\n     }\n \n     @Override\n-    public void forSchema( DynamicRecord schema,\n-                           RecordCheck<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> checker )\n-    {\n+    public void forSchema( DynamicRecord schema, RecordCheck<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> checker )\n+{\n         dispatch( RecordType.SCHEMA, SCHEMA_REPORT, schema, checker );\n     }\n \n     @Override\n-    public void forNode( NodeRecord node,\n-                         RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker )\n-    {\n+    public void forNode( NodeRecord node, RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker )\n+{\n         dispatch( RecordType.NODE, NODE_REPORT, node, checker );\n     }\n \n     @Override\n-    public void forRelationship( RelationshipRecord relationship,\n-                                 RecordCheck<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> checker )\n-    {\n+    public void forRelationship( RelationshipRecord relationship, RecordCheck<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> checker )\n+{\n         dispatch( RecordType.RELATIONSHIP, RELATIONSHIP_REPORT, relationship, checker );\n     }\n \n     @Override\n-    public void forProperty( PropertyRecord property,\n-                             RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> checker )\n-    {\n+    public void forProperty( PropertyRecord property, RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> checker )\n+{\n         dispatch( RecordType.PROPERTY, PROPERTY_REPORT, property, checker );\n     }\n \n     @Override\n-    public void forRelationshipTypeName( RelationshipTypeTokenRecord relationshipTypeTokenRecord,\n-                                         RecordCheck<RelationshipTypeTokenRecord,\n+    public void forRelationshipTypeName( RelationshipTypeTokenRecord relationshipTypeTokenRecord, RecordCheck<RelationshipTypeTokenRecord,\n                                          ConsistencyReport.RelationshipTypeConsistencyReport> checker )\n-    {\n+{\n         dispatch( RecordType.RELATIONSHIP_TYPE, RELATIONSHIP_TYPE_REPORT, relationshipTypeTokenRecord, checker );\n     }\n \n     @Override\n-    public void forLabelName( LabelTokenRecord label,\n-                              RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport> checker )\n-    {\n+    public void forLabelName( LabelTokenRecord label, RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport> checker )\n+{\n         dispatch( RecordType.LABEL, LABEL_KEY_REPORT, label, checker );\n     }\n \n     @Override\n-    public void forNodeLabelScan( LabelScanDocument document,\n-                                  RecordCheck<LabelScanDocument, ConsistencyReport.LabelScanConsistencyReport> checker )\n-    {\n+    public void forNodeLabelScan( LabelScanDocument document, RecordCheck<LabelScanDocument, ConsistencyReport.LabelScanConsistencyReport> checker )\n+{\n         dispatch( RecordType.LABEL_SCAN_DOCUMENT, LABEL_SCAN_REPORT, document, checker );\n     }\n \n     @Override\n-    public void forIndexEntry( IndexEntry entry,\n-                               RecordCheck<IndexEntry, ConsistencyReport.IndexConsistencyReport> checker )\n-    {\n+    public void forIndexEntry( IndexEntry entry, RecordCheck<IndexEntry, ConsistencyReport.IndexConsistencyReport> checker )\n+{\n         dispatch( RecordType.INDEX, INDEX, entry, checker );\n     }\n \n     @Override\n-    public void forPropertyKey( PropertyKeyTokenRecord key,\n-                                RecordCheck<PropertyKeyTokenRecord, ConsistencyReport.PropertyKeyTokenConsistencyReport> checker )\n-    {\n+    public void forPropertyKey( PropertyKeyTokenRecord key, RecordCheck<PropertyKeyTokenRecord, ConsistencyReport.PropertyKeyTokenConsistencyReport> checker )\n+{\n         dispatch( RecordType.PROPERTY_KEY, PROPERTY_KEY_REPORT, key, checker );\n     }\n \n     @Override\n-    public void forDynamicBlock( RecordType type, DynamicRecord record,\n-                                 RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker )\n-    {\n+    public void forDynamicBlock( RecordType type, DynamicRecord record, RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker )\n+{\n         dispatch( type, DYNAMIC_REPORT, record, checker );\n     }\n \n     @Override\n-    public void forDynamicLabelBlock( RecordType type, DynamicRecord record,\n-                                      RecordCheck<DynamicRecord, DynamicLabelConsistencyReport> checker )\n-    {\n+    public void forDynamicLabelBlock( RecordType type, DynamicRecord record, RecordCheck<DynamicRecord,DynamicLabelConsistencyReport> checker )\n+{\n         dispatch( type, DYNAMIC_LABEL_REPORT, record, checker );\n     }\n \n     @Override\n-    public void forRelationshipGroup( RelationshipGroupRecord record,\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker )\n+    public void forRelationshipGroup( RelationshipGroupRecord record, RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker )\n     {\n         dispatch( RecordType.RELATIONSHIP_GROUP, RELATIONSHIP_GROUP_REPORT, record, checker );\n     }\n \n     @Override\n-    public void forCounts( CountsEntry countsEntry,\n-                           RecordCheck<CountsEntry,ConsistencyReport.CountsConsistencyReport> checker )\n-    {\n+    public void forCounts( CountsEntry countsEntry, RecordCheck<CountsEntry,ConsistencyReport.CountsConsistencyReport> checker )\n+{\n         dispatch( RecordType.COUNTS, COUNTS_REPORT, countsEntry, checker );\n     }\n \n     public static class ProxyFactory<T>\n     {\n-        private static Map<Class<?>,ProxyFactory<?>> instances = new HashMap<>();\n+        private static Map<Class<?>, ProxyFactory<?>> instances = new HashMap<>();\n         private Constructor<? extends T> constructor;\n         private final Class<T> type;\n \n@@ -480,10 +450,9 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n             this.type = type;\n             try\n             {\n-                this.constructor = (Constructor<? extends T>) Proxy\n-                        .getProxyClass( ConsistencyReporter.class.getClassLoader(), type )\n+                this.constructor = (Constructor<? extends T>) Proxy.getProxyClass( ConsistencyReporter.class.getClassLoader(), type )\n                         .getConstructor( InvocationHandler.class );\n-                instances.put( type, this );\n+instances.put( type, this );\n             }\n             catch ( NoSuchMethodException e )\n             {\n@@ -519,4 +488,4 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n             return new ProxyFactory<>( type );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 124
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "139",
                    "column": "76",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "column": "58",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "150",
                    "column": "58",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "column": "36",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "275",
                    "column": "60",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "305",
                    "column": "39",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "305",
                    "column": "39",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "309",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "334",
                    "severity": "error",
                    "message": "Annotation 'SuppressWarnings' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "334",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "334",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "severity": "error",
                    "message": "Annotation 'SuppressWarnings' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "340",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "340",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "424",
                    "column": "38",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "429",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2821/ConsistencyReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2821/ConsistencyReporter.java\nindex df54bec95e5..c0efc11d838 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2821/ConsistencyReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2821/ConsistencyReporter.java\n@@ -25,7 +25,6 @@ import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.neo4j.consistency.RecordType;\n import org.neo4j.consistency.checking.CheckerEngine;\n import org.neo4j.consistency.checking.ComparativeRecordChecker;\n@@ -48,47 +47,33 @@ import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipGroupRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord;\n-\n import static java.util.Arrays.asList;\n+\n import static org.neo4j.helpers.Exceptions.stringify;\n \n public class ConsistencyReporter implements ConsistencyReport.Reporter\n {\n-    private static final ProxyFactory<ConsistencyReport.SchemaConsistencyReport> SCHEMA_REPORT =\n-            ProxyFactory.create( ConsistencyReport.SchemaConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.NodeConsistencyReport> NODE_REPORT =\n-            ProxyFactory.create( ConsistencyReport.NodeConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipConsistencyReport> RELATIONSHIP_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.PropertyConsistencyReport> PROPERTY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.PropertyConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipTypeConsistencyReport> RELATIONSHIP_TYPE_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipTypeConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.LabelTokenConsistencyReport> LABEL_KEY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.LabelTokenConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.PropertyKeyTokenConsistencyReport> PROPERTY_KEY_REPORT =\n-            ProxyFactory.create( ConsistencyReport.PropertyKeyTokenConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.DynamicConsistencyReport> DYNAMIC_REPORT =\n-            ProxyFactory.create( ConsistencyReport.DynamicConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.DynamicLabelConsistencyReport> DYNAMIC_LABEL_REPORT =\n-            ProxyFactory.create( ConsistencyReport.DynamicLabelConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.LabelScanConsistencyReport> LABEL_SCAN_REPORT =\n-            ProxyFactory.create( ConsistencyReport.LabelScanConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.IndexConsistencyReport> INDEX =\n-            ProxyFactory.create( ConsistencyReport.IndexConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.RelationshipGroupConsistencyReport> RELATIONSHIP_GROUP_REPORT =\n-            ProxyFactory.create( ConsistencyReport.RelationshipGroupConsistencyReport.class );\n-    private static final ProxyFactory<ConsistencyReport.CountsConsistencyReport> COUNTS_REPORT =\n-            ProxyFactory.create( ConsistencyReport.CountsConsistencyReport.class );\n-\n+    private static final ProxyFactory<ConsistencyReport.SchemaConsistencyReport> SCHEMA_REPORT = ProxyFactory.create( ConsistencyReport.SchemaConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.NodeConsistencyReport> NODE_REPORT = ProxyFactory.create( ConsistencyReport.NodeConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.RelationshipConsistencyReport> RELATIONSHIP_REPORT = ProxyFactory.create( ConsistencyReport.RelationshipConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.PropertyConsistencyReport> PROPERTY_REPORT = ProxyFactory.create( ConsistencyReport.PropertyConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.RelationshipTypeConsistencyReport> RELATIONSHIP_TYPE_REPORT = ProxyFactory.create( ConsistencyReport.RelationshipTypeConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.LabelTokenConsistencyReport> LABEL_KEY_REPORT = ProxyFactory.create( ConsistencyReport.LabelTokenConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.PropertyKeyTokenConsistencyReport> PROPERTY_KEY_REPORT = ProxyFactory.create( ConsistencyReport.PropertyKeyTokenConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.DynamicConsistencyReport> DYNAMIC_REPORT = ProxyFactory.create( ConsistencyReport.DynamicConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.DynamicLabelConsistencyReport> DYNAMIC_LABEL_REPORT = ProxyFactory.create( ConsistencyReport.DynamicLabelConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.LabelScanConsistencyReport> LABEL_SCAN_REPORT = ProxyFactory.create( ConsistencyReport.LabelScanConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.IndexConsistencyReport> INDEX = ProxyFactory.create( ConsistencyReport.IndexConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.RelationshipGroupConsistencyReport> RELATIONSHIP_GROUP_REPORT = ProxyFactory.create( ConsistencyReport.RelationshipGroupConsistencyReport.class );\n+    private static final ProxyFactory<ConsistencyReport.CountsConsistencyReport> COUNTS_REPORT = ProxyFactory.create( ConsistencyReport.CountsConsistencyReport.class );\n     private final RecordAccess records;\n     private final InconsistencyReport report;\n     private final Monitor monitor;\n \n     public interface Monitor\n-    {\n-        void reported( Class<?> report, String method, String message );\n-    }\n+{\n+   void reported( Class<?> report, String method, String message )\n+   ;}\n \n     public static final Monitor NO_MONITOR = ( report, method, message ) ->\n     {\n@@ -106,11 +91,9 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         this.monitor = monitor;\n     }\n \n-    private <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-    void dispatch( RecordType type, ProxyFactory<REPORT> factory, RECORD record, RecordCheck<RECORD, REPORT> checker )\n+    private< RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> void dispatch( RecordType type, ProxyFactory<REPORT> factory, RECORD record, RecordCheck<RECORD,REPORT> checker )\n     {\n-        ReportInvocationHandler<RECORD,REPORT> handler = new ReportHandler<>( report, factory, type, records, record,\n-                monitor );\n+        ReportInvocationHandler<RECORD,REPORT> handler = new ReportHandler<>( report, factory, type, records, record, monitor );\n         try\n         {\n             checker.check( record, handler, records );\n@@ -119,14 +102,13 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         {\n             // This is a rare event and exposing the stack trace is a good idea, otherwise we\n             // can only see that something went wrong, not at all what.\n-            handler.report.error( type, record, \"Failed to check record: \" + stringify( e ),\n-                    new Object[0] );\n+            handler.report.error( type, record, \"Failed to check record: \" + stringify( e ), new Object[0] );\n         }\n+\n         handler.updateSummary();\n     }\n \n-    static void dispatchReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                   AbstractBaseRecord referenced, RecordAccess records )\n+    static void dispatchReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced, RecordAccess records )\n     {\n         ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n         handler.checkReference( engine, checker, referenced, records );\n@@ -136,12 +118,10 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n     static String pendingCheckToString( CheckerEngine engine, ComparativeRecordChecker checker )\n     {\n         ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n-        return handler.pendingCheckToString(checker);\n+        return handler.pendingCheckToString( checker );\n     }\n \n-    static void dispatchChangeReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                         AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n-                                         RecordAccess records )\n+    static void dispatchChangeReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced, RecordAccess records )\n     {\n         ReportInvocationHandler handler = (ReportInvocationHandler) engine;\n         handler.checkDiffReference( engine, checker, oldReferenced, newReferenced, records );\n@@ -150,28 +130,24 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n \n     static void dispatchSkip( CheckerEngine engine )\n     {\n-        ((ReportInvocationHandler) engine ).updateSummary();\n+        ((ReportInvocationHandler) engine).updateSummary();\n     }\n \n-    public <RECORD extends AbstractBaseRecord,REPORT extends ConsistencyReport> REPORT report( RECORD record,\n-            Class<REPORT> cls, RecordType recordType )\n+    public < RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> REPORT report( RECORD record, Class<REPORT> cls, RecordType recordType )\n     {\n         ProxyFactory<REPORT> proxyFactory = ProxyFactory.get( cls );\n-        ReportInvocationHandler<RECORD,REPORT> handler =\n-                new ReportHandler<RECORD,REPORT>( report, proxyFactory, recordType, records, record, monitor )\n-        {\n-            @Override\n-            protected void inconsistencyReported()\n-            {\n-                updateSummary();\n-            }\n-        };\n+        ReportInvocationHandler<RECORD,REPORT> handler = new ReportHandler <RECORD,REPORT>( report, proxyFactory, recordType, records, record, monitor )\n+{\n+    @Override\n+    protected void inconsistencyReported()\n+    {\n+        updateSummary();\n+    }\n+};\n         return handler.report();\n     }\n \n-    public abstract static class ReportInvocationHandler\n-            <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-            implements CheckerEngine<RECORD, REPORT>, InvocationHandler\n+    public abstract static class ReportInvocationHandler < RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> implements CheckerEngine<RECORD,REPORT>, InvocationHandler\n     {\n         final InconsistencyReport report;\n         private final ProxyFactory<REPORT> factory;\n@@ -182,8 +158,7 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         private final RecordAccess records;\n         private final Monitor monitor;\n \n-        private ReportInvocationHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type,\n-               RecordAccess records, Monitor monitor )\n+        private ReportInvocationHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type, RecordAccess records, Monitor monitor )\n         {\n             this.report = report;\n             this.factory = factory;\n@@ -194,7 +169,7 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n \n         synchronized void updateSummary()\n         {\n-            if ( --references == 0 )\n+            if ( -- references == 0 )\n             {\n                 report.updateSummary( type, errors, warnings );\n             }\n@@ -222,14 +197,15 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n             {\n                 checkName = checker.toString();\n             }\n+\n             return String.format( \"ReferenceCheck{%s[%s]/%s}\", type, recordId(), checkName );\n         }\n \n-        abstract long recordId();\n+        abstract long recordId()\n+        ;\n \n         @Override\n-        public <REFERRED extends AbstractBaseRecord> void comparativeCheck(\n-                RecordReference<REFERRED> reference, ComparativeRecordChecker<RECORD, ? super REFERRED, REPORT> checker )\n+        public <REFERRED extends AbstractBaseRecord> void comparativeCheck( RecordReference<REFERRED> reference, ComparativeRecordChecker<RECORD, ? super REFERRED,REPORT> checker )\n         {\n             references++;\n             reference.dispatch( new PendingReferenceCheck<>( this, checker ) );\n@@ -246,19 +222,21 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n          *\n          * @param args array of the items referenced from this record with which it is inconsistent.\n          */\n+\n         @Override\n         public Object invoke( Object proxy, Method method, Object[] args )\n         {\n             String message;\n             Documented annotation = method.getAnnotation( Documented.class );\n-            if ( annotation != null && !\"\".equals( annotation.value() ) )\n+            if ( annotation != null&& ! \"\".equals( annotation.value() ) )\n             {\n-               message = annotation.value();\n+                message = annotation.value();\n             }\n             else\n             {\n                 message = method.getName();\n             }\n+\n             if ( method.getAnnotation( ConsistencyReport.Warning.class ) == null )\n             {\n                 errors++;\n@@ -271,6 +249,7 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n                 args = getRealRecords( args );\n                 logWarning( message, args );\n             }\n+\n             monitor.reported( factory.type(), method.getName(), message );\n             inconsistencyReported();\n             return null;\n@@ -286,49 +265,48 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n             {\n                 return args;\n             }\n+\n             for ( int i = 0; i < args.length; i++ )\n             {\n                 // We use \"created\" flag here. Consistency checking code revolves around records and so\n                 // even in scenarios where records are built from other sources, f.ex half-and-purpose-built from cache,\n                 // this flag is used to signal that the real record needs to be read in order to be used as a general\n                 // purpose record.\n-                if ( args[i] instanceof AbstractBaseRecord && ((AbstractBaseRecord) args[i]).isCreated() )\n+                if ( args[ i] instanceof AbstractBaseRecord&& ((AbstractBaseRecord) args[ i]).isCreated() )\n                 {   // get the real record\n-                    if ( args[i] instanceof NodeRecord )\n+                    if ( args[ i] instanceof NodeRecord )\n                     {\n-                        args[i] = ((DirectRecordReference<NodeRecord>) records.node(\n-                                ((NodeRecord) args[i]).getId() )).record();\n+                        args[i] = ((DirectRecordReference<NodeRecord>) records.node( ((NodeRecord) args[ i]).getId() )).record();\n                     }\n-                    else if ( args[i] instanceof RelationshipRecord )\n+                    else\n+                    if ( args[ i] instanceof RelationshipRecord )\n                     {\n-                        args[i] = ((DirectRecordReference<RelationshipRecord>) records.relationship(\n-                                ((RelationshipRecord) args[i]).getId() )).record();\n+                        args[i] = ((DirectRecordReference<RelationshipRecord>) records.relationship( ((RelationshipRecord) args[ i]).getId() )).record();\n                     }\n                 }\n             }\n+\n             return args;\n         }\n \n-        protected abstract void logError( String message, Object[] args );\n+        protected abstract void logError( String message, Object[] args )\n+        ;\n \n-        protected abstract void logWarning( String message, Object[] args );\n+        protected abstract void logWarning( String message, Object[] args )\n+        ;\n \n-        abstract void checkReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                      AbstractBaseRecord referenced, RecordAccess records );\n+        abstract void checkReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced, RecordAccess records )\n+        ;\n \n-        abstract void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                          AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n-                                          RecordAccess records );\n+        abstract void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced, RecordAccess records )\n+        ;\n     }\n \n-    public static class ReportHandler\n-            <RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport>\n-            extends ReportInvocationHandler<RECORD,REPORT>\n+    public static class ReportHandler < RECORD extends AbstractBaseRecord, REPORT extends ConsistencyReport> extends ReportInvocationHandler<RECORD,REPORT>\n     {\n         private final AbstractBaseRecord record;\n \n-        public ReportHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type,\n-                RecordAccess records, AbstractBaseRecord record, Monitor monitor )\n+        public ReportHandler( InconsistencyReport report, ProxyFactory<REPORT> factory, RecordType type, RecordAccess records, AbstractBaseRecord record, Monitor monitor )\n         {\n             super( report, factory, type, records, monitor );\n             this.record = record;\n@@ -353,136 +331,115 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n         }\n \n         @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        void checkReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced,\n-                             RecordAccess records )\n+        @ SuppressWarnings( \"unchecked\") void checkReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord referenced, RecordAccess records )\n         {\n             checker.checkReference( record, referenced, this, records );\n         }\n \n         @Override\n-        @SuppressWarnings( \"unchecked\" )\n-        void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker,\n-                                 AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced,\n-                                 RecordAccess records )\n+        @ SuppressWarnings( \"unchecked\") void checkDiffReference( CheckerEngine engine, ComparativeRecordChecker checker, AbstractBaseRecord oldReferenced, AbstractBaseRecord newReferenced, RecordAccess records )\n         {\n             checker.checkReference( record, newReferenced, this, records );\n         }\n     }\n \n     @Override\n-    public void forSchema( DynamicRecord schema,\n-                           RecordCheck<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> checker )\n+    public void forSchema( DynamicRecord schema, RecordCheck<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> checker )\n     {\n         dispatch( RecordType.SCHEMA, SCHEMA_REPORT, schema, checker );\n     }\n \n     @Override\n-    public void forNode( NodeRecord node,\n-                         RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport> checker )\n+    public void forNode( NodeRecord node, RecordCheck<NodeRecord,ConsistencyReport.NodeConsistencyReport> checker )\n     {\n         dispatch( RecordType.NODE, NODE_REPORT, node, checker );\n     }\n \n     @Override\n-    public void forRelationship( RelationshipRecord relationship,\n-                                 RecordCheck<RelationshipRecord, ConsistencyReport.RelationshipConsistencyReport> checker )\n+    public void forRelationship( RelationshipRecord relationship, RecordCheck<RelationshipRecord,ConsistencyReport.RelationshipConsistencyReport> checker )\n     {\n         dispatch( RecordType.RELATIONSHIP, RELATIONSHIP_REPORT, relationship, checker );\n     }\n \n     @Override\n-    public void forProperty( PropertyRecord property,\n-                             RecordCheck<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> checker )\n+    public void forProperty( PropertyRecord property, RecordCheck<PropertyRecord,ConsistencyReport.PropertyConsistencyReport> checker )\n     {\n         dispatch( RecordType.PROPERTY, PROPERTY_REPORT, property, checker );\n     }\n \n     @Override\n-    public void forRelationshipTypeName( RelationshipTypeTokenRecord relationshipTypeTokenRecord,\n-                                         RecordCheck<RelationshipTypeTokenRecord,\n-                                         ConsistencyReport.RelationshipTypeConsistencyReport> checker )\n+    public void forRelationshipTypeName( RelationshipTypeTokenRecord relationshipTypeTokenRecord, RecordCheck<RelationshipTypeTokenRecord,ConsistencyReport.RelationshipTypeConsistencyReport> checker )\n     {\n         dispatch( RecordType.RELATIONSHIP_TYPE, RELATIONSHIP_TYPE_REPORT, relationshipTypeTokenRecord, checker );\n     }\n \n     @Override\n-    public void forLabelName( LabelTokenRecord label,\n-                              RecordCheck<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport> checker )\n+    public void forLabelName( LabelTokenRecord label, RecordCheck<LabelTokenRecord,ConsistencyReport.LabelTokenConsistencyReport> checker )\n     {\n         dispatch( RecordType.LABEL, LABEL_KEY_REPORT, label, checker );\n     }\n \n     @Override\n-    public void forNodeLabelScan( LabelScanDocument document,\n-                                  RecordCheck<LabelScanDocument, ConsistencyReport.LabelScanConsistencyReport> checker )\n+    public void forNodeLabelScan( LabelScanDocument document, RecordCheck<LabelScanDocument,ConsistencyReport.LabelScanConsistencyReport> checker )\n     {\n         dispatch( RecordType.LABEL_SCAN_DOCUMENT, LABEL_SCAN_REPORT, document, checker );\n     }\n \n     @Override\n-    public void forIndexEntry( IndexEntry entry,\n-                               RecordCheck<IndexEntry, ConsistencyReport.IndexConsistencyReport> checker )\n+    public void forIndexEntry( IndexEntry entry, RecordCheck<IndexEntry,ConsistencyReport.IndexConsistencyReport> checker )\n     {\n         dispatch( RecordType.INDEX, INDEX, entry, checker );\n     }\n \n     @Override\n-    public void forPropertyKey( PropertyKeyTokenRecord key,\n-                                RecordCheck<PropertyKeyTokenRecord, ConsistencyReport.PropertyKeyTokenConsistencyReport> checker )\n+    public void forPropertyKey( PropertyKeyTokenRecord key, RecordCheck<PropertyKeyTokenRecord,ConsistencyReport.PropertyKeyTokenConsistencyReport> checker )\n     {\n         dispatch( RecordType.PROPERTY_KEY, PROPERTY_KEY_REPORT, key, checker );\n     }\n \n     @Override\n-    public void forDynamicBlock( RecordType type, DynamicRecord record,\n-                                 RecordCheck<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> checker )\n+    public void forDynamicBlock( RecordType type, DynamicRecord record, RecordCheck<DynamicRecord,ConsistencyReport.DynamicConsistencyReport> checker )\n     {\n         dispatch( type, DYNAMIC_REPORT, record, checker );\n     }\n \n     @Override\n-    public void forDynamicLabelBlock( RecordType type, DynamicRecord record,\n-                                      RecordCheck<DynamicRecord, DynamicLabelConsistencyReport> checker )\n+    public void forDynamicLabelBlock( RecordType type, DynamicRecord record, RecordCheck<DynamicRecord,DynamicLabelConsistencyReport> checker )\n     {\n         dispatch( type, DYNAMIC_LABEL_REPORT, record, checker );\n     }\n \n     @Override\n-    public void forRelationshipGroup( RelationshipGroupRecord record,\n-            RecordCheck<RelationshipGroupRecord, RelationshipGroupConsistencyReport> checker )\n+    public void forRelationshipGroup( RelationshipGroupRecord record, RecordCheck<RelationshipGroupRecord,RelationshipGroupConsistencyReport> checker )\n     {\n         dispatch( RecordType.RELATIONSHIP_GROUP, RELATIONSHIP_GROUP_REPORT, record, checker );\n     }\n \n     @Override\n-    public void forCounts( CountsEntry countsEntry,\n-                           RecordCheck<CountsEntry,ConsistencyReport.CountsConsistencyReport> checker )\n+    public void forCounts( CountsEntry countsEntry, RecordCheck<CountsEntry,ConsistencyReport.CountsConsistencyReport> checker )\n     {\n         dispatch( RecordType.COUNTS, COUNTS_REPORT, countsEntry, checker );\n     }\n \n-    public static class ProxyFactory<T>\n+    public static class ProxyFactory <T>\n     {\n         private static Map<Class<?>,ProxyFactory<?>> instances = new HashMap<>();\n         private Constructor<? extends T> constructor;\n         private final Class<T> type;\n-\n-        @SuppressWarnings( \"unchecked\" )\n+        @ SuppressWarnings( \"unchecked\")\n         static <T> ProxyFactory<T> get( Class<T> cls )\n         {\n             return (ProxyFactory<T>) instances.get( cls );\n         }\n \n-        @SuppressWarnings( \"unchecked\" )\n-        ProxyFactory( Class<T> type ) throws LinkageError\n+        @ SuppressWarnings( \"unchecked\")\n+        ProxyFactory( Class<T> type )\n+        throws LinkageError\n         {\n             this.type = type;\n             try\n             {\n-                this.constructor = (Constructor<? extends T>) Proxy\n-                        .getProxyClass( ConsistencyReporter.class.getClassLoader(), type )\n-                        .getConstructor( InvocationHandler.class );\n+                this.constructor = (Constructor<? extends T>) Proxy.getProxyClass( ConsistencyReporter.class.getClassLoader(), type ).getConstructor( InvocationHandler.class );\n                 instances.put( type, this );\n             }\n             catch ( NoSuchMethodException e )\n@@ -519,4 +476,4 @@ public class ConsistencyReporter implements ConsistencyReport.Reporter\n             return new ProxyFactory<>( type );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 142
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}