{
    "project_name": "graphfoundation-ongdb",
    "error_id": "70",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "241",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "331",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "444",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "499",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "520",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "528",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "581",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "586",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "598",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/70/Neo4jPackV1.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/70/Neo4jPackV1.java\nindex 8874272b36e..396d99bad78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/70/Neo4jPackV1.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/70/Neo4jPackV1.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.messaging;\n \n import java.io.IOException;\n@@ -58,554 +59,549 @@ import static org.neo4j.values.storable.Values.byteArray;\n  */\n public class Neo4jPackV1 implements Neo4jPack\n {\n-    public static final long VERSION = 1;\n-\n-    public static final byte NODE = 'N';\n-    public static final int NODE_SIZE = 3;\n+  public static final long VERSION = 1;\n+\n+  public static final byte NODE = 'N';\n+  public static final int NODE_SIZE = 3;\n+\n+  public static final byte RELATIONSHIP = 'R';\n+  public static final int RELATIONSHIP_SIZE = 5;\n+\n+  public static final byte UNBOUND_RELATIONSHIP = 'r';\n+  public static final int UNBOUND_RELATIONSHIP_SIZE = 3;\n+\n+  public static final byte PATH = 'P';\n+  public static final int PATH_SIZE = 3;\n+\n+  @Override\n+  public Neo4jPack.Packer newPacker(PackOutput output)\n+  {\n+    return new PackerV1(output);\n+  }\n+\n+  @Override\n+  public Neo4jPack.Unpacker newUnpacker(PackInput input)\n+  {\n+    return new UnpackerV1(input);\n+  }\n+\n+  @Override\n+  public long version()\n+  {\n+    return VERSION;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName();\n+  }\n+\n+  protected static class PackerV1 extends PackStream.Packer implements AnyValueWriter<IOException>, Neo4jPack.Packer\n+  {\n+    private static final int INITIAL_PATH_CAPACITY = 500;\n+    private static final int NO_SUCH_ID = -1;\n+    private final PrimitiveLongIntKeyValueArray nodeIndexes =\n+        new PrimitiveLongIntKeyValueArray(INITIAL_PATH_CAPACITY + 1);\n+    private final PrimitiveLongIntKeyValueArray relationshipIndexes =\n+        new PrimitiveLongIntKeyValueArray(INITIAL_PATH_CAPACITY);\n+\n+    protected PackerV1(PackOutput output)\n+    {\n+      super(output);\n+    }\n \n-    public static final byte RELATIONSHIP = 'R';\n-    public static final int RELATIONSHIP_SIZE = 5;\n+    @Override\n+    public void pack(AnyValue value) throws IOException\n+    {\n+      value.writeTo(this);\n+    }\n \n-    public static final byte UNBOUND_RELATIONSHIP = 'r';\n-    public static final int UNBOUND_RELATIONSHIP_SIZE = 3;\n+    @Override\n+    public void writeNodeReference(long nodeId)\n+    {\n+      throw new UnsupportedOperationException(\"Cannot write a raw node reference\");\n+    }\n \n-    public static final byte PATH = 'P';\n-    public static final int PATH_SIZE = 3;\n+    @Override\n+    public void writeNode(long nodeId, TextArray labels, MapValue properties) throws IOException\n+    {\n+      packStructHeader(NODE_SIZE, NODE);\n+      pack(nodeId);\n+      packListHeader(labels.length());\n+      for (int i = 0; i < labels.length(); i++)\n+      {\n+        labels.value(i).writeTo(this);\n+      }\n+      properties.writeTo(this);\n+    }\n \n     @Override\n-    public Neo4jPack.Packer newPacker( PackOutput output )\n+    public void writeRelationshipReference(long relationshipId)\n     {\n-        return new PackerV1( output );\n+      throw new UnsupportedOperationException(\"Cannot write a raw relationship reference\");\n     }\n \n     @Override\n-    public Neo4jPack.Unpacker newUnpacker( PackInput input )\n+    public void writeRelationship(long relationshipId, long startNodeId, long endNodeId, TextValue type, MapValue properties)\n+        throws IOException\n     {\n-        return new UnpackerV1( input );\n+      packStructHeader(RELATIONSHIP_SIZE, RELATIONSHIP);\n+      pack(relationshipId);\n+      pack(startNodeId);\n+      pack(endNodeId);\n+      type.writeTo(this);\n+      properties.writeTo(this);\n     }\n \n     @Override\n-    public long version()\n+    public void beginMap(int size) throws IOException\n     {\n-        return VERSION;\n+      packMapHeader(size);\n     }\n \n     @Override\n-    public String toString()\n+    public void endMap()\n     {\n-        return getClass().getSimpleName();\n+      //do nothing\n     }\n \n-    protected static class PackerV1 extends PackStream.Packer implements AnyValueWriter<IOException>, Neo4jPack.Packer\n+    @Override\n+    public void beginList(int size) throws IOException\n     {\n-        private static final int INITIAL_PATH_CAPACITY = 500;\n-        private static final int NO_SUCH_ID = -1;\n-        private final PrimitiveLongIntKeyValueArray nodeIndexes =\n-                new PrimitiveLongIntKeyValueArray( INITIAL_PATH_CAPACITY + 1 );\n-        private final PrimitiveLongIntKeyValueArray relationshipIndexes =\n-                new PrimitiveLongIntKeyValueArray( INITIAL_PATH_CAPACITY );\n+      packListHeader(size);\n+    }\n \n-        protected PackerV1( PackOutput output )\n-        {\n-            super( output );\n-        }\n+    @Override\n+    public void endList()\n+    {\n+      //do nothing\n+    }\n \n-        @Override\n-        public void pack( AnyValue value ) throws IOException\n-        {\n-            value.writeTo( this );\n-        }\n+    @Override\n+    public void writePath(NodeValue[] nodes, RelationshipValue[] relationships) throws IOException\n+    {\n+      //A path is serialized in the following form\n+      // Given path: (a {id: 42})-[r1 {id: 10}]->(b {id: 43})<-[r1 {id: 11}]-(c {id: 44})\n+      //The serialization will look like:\n+      //\n+      // {\n+      //    [a, b, c]\n+      //    [r1, r2]\n+      //    [1, 1, -2, 2]\n+      // }\n+      // The first list contains all nodes where the first node (a) is guaranteed to be the start node of\n+      // the path\n+      // The second list contains all edges of the path\n+      // The third list defines the path order, where every other item specifies the offset into the\n+      // relationship and node list respectively. Since all paths is guaranteed to start with a 0, meaning\n+      // that\n+      // a is the start node in this case, those are excluded. So the first integer in the array refers to the\n+      // position\n+      // in the relationship array (1 indexed where sign denotes direction) and the second one refers to\n+      // the offset\n+      // into the\n+      // node list (zero indexed) and so on.\n+      packStructHeader(PATH_SIZE, PATH);\n+\n+      writeNodesForPath(nodes);\n+      writeRelationshipsForPath(relationships);\n+\n+      packListHeader(2 * relationships.length);\n+      if (relationships.length == 0)\n+      {\n+        return;\n+      }\n+\n+      NodeValue node = nodes[0];\n+      for (int i = 1; i <= 2 * relationships.length; i++)\n+      {\n+        if (i % 2 == 0)\n+        {\n+          node = nodes[i / 2];\n+          int index = nodeIndexes.getOrDefault(node.id(), NO_SUCH_ID);\n+          pack(index);\n+        } else\n+        {\n+          RelationshipValue r = relationships[i / 2];\n+          int index = relationshipIndexes.getOrDefault(r.id(), NO_SUCH_ID);\n+\n+          if (node.id() == r.startNode().id())\n+          {\n+            pack(index);\n+          } else\n+          {\n+            pack(-index);\n+          }\n+        }\n+\n+      }\n+    }\n \n-        @Override\n-        public void writeNodeReference( long nodeId )\n-        {\n-            throw new UnsupportedOperationException( \"Cannot write a raw node reference\" );\n-        }\n+    private void writeNodesForPath(NodeValue[] nodes) throws IOException\n+    {\n+      nodeIndexes.reset(nodes.length);\n+      for (NodeValue node : nodes)\n+      {\n+        nodeIndexes.putIfAbsent(node.id(), nodeIndexes.size());\n+      }\n+\n+      int size = nodeIndexes.size();\n+      packListHeader(size);\n+      if (size > 0)\n+      {\n+        NodeValue node = nodes[0];\n+        for (long id : nodeIndexes.keys())\n+        {\n+          int i = 1;\n+          while (node.id() != id)\n+          {\n+            node = nodes[i++];\n+          }\n+          node.writeTo(this);\n+        }\n+      }\n+    }\n \n-        @Override\n-        public void writeNode( long nodeId, TextArray labels, MapValue properties ) throws IOException\n-        {\n-            packStructHeader( NODE_SIZE, NODE );\n-            pack( nodeId );\n-            packListHeader( labels.length() );\n-            for ( int i = 0; i < labels.length(); i++ )\n+    private void writeRelationshipsForPath(RelationshipValue[] relationships) throws IOException\n+    {\n+      relationshipIndexes.reset(relationships.length);\n+      for (RelationshipValue node : relationships)\n+      {\n+        // relationship indexes are one-based\n+        relationshipIndexes.putIfAbsent(node.id(), relationshipIndexes.size() + 1);\n+      }\n+\n+      int size = relationshipIndexes.size();\n+      packListHeader(size);\n+      if (size > 0)\n+      {\n+        {\n+          RelationshipValue edge = relationships[0];\n+          for (long id : relationshipIndexes.keys())\n+          {\n+            int i = 1;\n+            while (edge.id() != id)\n             {\n-                labels.value( i ).writeTo( this );\n+              edge = relationships[i++];\n             }\n-            properties.writeTo( this );\n-        }\n-\n-        @Override\n-        public void writeRelationshipReference( long relationshipId )\n-        {\n-            throw new UnsupportedOperationException( \"Cannot write a raw relationship reference\" );\n-        }\n-\n-        @Override\n-        public void writeRelationship( long relationshipId, long startNodeId, long endNodeId, TextValue type, MapValue properties )\n-                throws IOException\n-        {\n-            packStructHeader( RELATIONSHIP_SIZE, RELATIONSHIP );\n-            pack( relationshipId );\n-            pack( startNodeId );\n-            pack( endNodeId );\n-            type.writeTo( this );\n-            properties.writeTo( this );\n-        }\n-\n-        @Override\n-        public void beginMap( int size ) throws IOException\n-        {\n-            packMapHeader( size );\n-        }\n-\n-        @Override\n-        public void endMap()\n-        {\n-            //do nothing\n-        }\n-\n-        @Override\n-        public void beginList( int size ) throws IOException\n-        {\n-            packListHeader( size );\n-        }\n-\n-        @Override\n-        public void endList()\n-        {\n-            //do nothing\n-        }\n+            //Note that we are not doing relationship.writeTo(this) here since the serialization protocol\n+            //requires these to be _unbound relationships_, thus relationships without any start node nor\n+            // end node.\n+            packStructHeader(UNBOUND_RELATIONSHIP_SIZE, UNBOUND_RELATIONSHIP);\n+            pack(edge.id());\n+            edge.type().writeTo(this);\n+            edge.properties().writeTo(this);\n+          }\n+        }\n+      }\n+    }\n \n-        @Override\n-        public void writePath( NodeValue[] nodes, RelationshipValue[] relationships ) throws IOException\n-        {\n-            //A path is serialized in the following form\n-            // Given path: (a {id: 42})-[r1 {id: 10}]->(b {id: 43})<-[r1 {id: 11}]-(c {id: 44})\n-            //The serialization will look like:\n-            //\n-            // {\n-            //    [a, b, c]\n-            //    [r1, r2]\n-            //    [1, 1, -2, 2]\n-            // }\n-            // The first list contains all nodes where the first node (a) is guaranteed to be the start node of\n-            // the path\n-            // The second list contains all edges of the path\n-            // The third list defines the path order, where every other item specifies the offset into the\n-            // relationship and node list respectively. Since all paths is guaranteed to start with a 0, meaning\n-            // that\n-            // a is the start node in this case, those are excluded. So the first integer in the array refers to the\n-            // position\n-            // in the relationship array (1 indexed where sign denotes direction) and the second one refers to\n-            // the offset\n-            // into the\n-            // node list (zero indexed) and so on.\n-            packStructHeader( PATH_SIZE, PATH );\n-\n-            writeNodesForPath( nodes );\n-            writeRelationshipsForPath( relationships );\n-\n-            packListHeader( 2 * relationships.length );\n-            if ( relationships.length == 0 )\n-            {\n-                return;\n-            }\n+    @Override\n+    public void writePoint(CoordinateReferenceSystem crs, double[] coordinate) throws IOException\n+    {\n+      throwUnsupportedTypeError(\"Point\");\n+    }\n \n-            NodeValue node = nodes[0];\n-            for ( int i = 1; i <= 2 * relationships.length; i++ )\n-            {\n-                if ( i % 2 == 0 )\n-                {\n-                    node = nodes[i / 2];\n-                    int index = nodeIndexes.getOrDefault( node.id(), NO_SUCH_ID );\n-                    pack( index );\n-                }\n-                else\n-                {\n-                    RelationshipValue r = relationships[i / 2];\n-                    int index = relationshipIndexes.getOrDefault( r.id(), NO_SUCH_ID );\n-\n-                    if ( node.id() == r.startNode().id() )\n-                    {\n-                        pack( index );\n-                    }\n-                    else\n-                    {\n-                        pack( -index );\n-                    }\n-                }\n+    @Override\n+    public void writeDuration(long months, long days, long seconds, int nanos) throws IOException\n+    {\n+      throwUnsupportedTypeError(\"Duration\");\n+    }\n \n-            }\n-        }\n+    @Override\n+    public void writeDate(LocalDate localDate) throws IOException\n+    {\n+      throwUnsupportedTypeError(\"Date\");\n+    }\n \n-        private void writeNodesForPath( NodeValue[] nodes ) throws IOException\n-        {\n-            nodeIndexes.reset( nodes.length );\n-            for ( NodeValue node : nodes )\n-            {\n-                nodeIndexes.putIfAbsent( node.id(), nodeIndexes.size() );\n-            }\n+    @Override\n+    public void writeLocalTime(LocalTime localTime) throws IOException\n+    {\n+      throwUnsupportedTypeError(\"LocalTime\");\n+    }\n \n-            int size = nodeIndexes.size();\n-            packListHeader( size );\n-            if ( size > 0 )\n-            {\n-                NodeValue node = nodes[0];\n-                for ( long id : nodeIndexes.keys() )\n-                {\n-                    int i = 1;\n-                    while ( node.id() != id )\n-                    {\n-                        node = nodes[i++];\n-                    }\n-                    node.writeTo( this );\n-                }\n-            }\n-        }\n+    @Override\n+    public void writeTime(OffsetTime offsetTime) throws IOException\n+    {\n+      throwUnsupportedTypeError(\"Time\");\n+    }\n \n-        private void writeRelationshipsForPath( RelationshipValue[] relationships ) throws IOException\n-        {\n-            relationshipIndexes.reset( relationships.length );\n-            for ( RelationshipValue node : relationships )\n-            {\n-                // relationship indexes are one-based\n-                relationshipIndexes.putIfAbsent( node.id(), relationshipIndexes.size() + 1 );\n-            }\n+    @Override\n+    public void writeLocalDateTime(LocalDateTime localDateTime) throws IOException\n+    {\n+      throwUnsupportedTypeError(\"LocalDateTime\");\n+    }\n \n-            int size = relationshipIndexes.size();\n-            packListHeader( size );\n-            if ( size > 0 )\n-            {\n-                {\n-                    RelationshipValue edge = relationships[0];\n-                    for ( long id : relationshipIndexes.keys() )\n-                    {\n-                        int i = 1;\n-                        while ( edge.id() != id )\n-                        {\n-                            edge = relationships[i++];\n-                        }\n-                        //Note that we are not doing relationship.writeTo(this) here since the serialization protocol\n-                        //requires these to be _unbound relationships_, thus relationships without any start node nor\n-                        // end node.\n-                        packStructHeader( UNBOUND_RELATIONSHIP_SIZE, UNBOUND_RELATIONSHIP );\n-                        pack( edge.id() );\n-                        edge.type().writeTo( this );\n-                        edge.properties().writeTo( this );\n-                    }\n-                }\n-            }\n-        }\n+    @Override\n+    public void writeDateTime(ZonedDateTime zonedDateTime) throws IOException\n+    {\n+      throwUnsupportedTypeError(\"DateTime\");\n+    }\n \n-        @Override\n-        public void writePoint( CoordinateReferenceSystem crs, double[] coordinate ) throws IOException\n-        {\n-            throwUnsupportedTypeError( \"Point\" );\n-        }\n+    @Override\n+    public void writeNull() throws IOException\n+    {\n+      packNull();\n+    }\n \n-        @Override\n-        public void writeDuration( long months, long days, long seconds, int nanos ) throws IOException\n-        {\n-            throwUnsupportedTypeError( \"Duration\" );\n-        }\n+    @Override\n+    public void writeBoolean(boolean value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeDate( LocalDate localDate ) throws IOException\n-        {\n-            throwUnsupportedTypeError( \"Date\" );\n-        }\n+    @Override\n+    public void writeInteger(byte value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeLocalTime( LocalTime localTime ) throws IOException\n-        {\n-            throwUnsupportedTypeError( \"LocalTime\" );\n-        }\n+    @Override\n+    public void writeInteger(short value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeTime( OffsetTime offsetTime ) throws IOException\n-        {\n-            throwUnsupportedTypeError( \"Time\" );\n-        }\n+    @Override\n+    public void writeInteger(int value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeLocalDateTime( LocalDateTime localDateTime ) throws IOException\n-        {\n-            throwUnsupportedTypeError( \"LocalDateTime\" );\n-        }\n+    @Override\n+    public void writeInteger(long value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeDateTime( ZonedDateTime zonedDateTime ) throws IOException\n-        {\n-            throwUnsupportedTypeError( \"DateTime\" );\n-        }\n+    @Override\n+    public void writeFloatingPoint(float value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeNull() throws IOException\n-        {\n-            packNull();\n-        }\n+    @Override\n+    public void writeFloatingPoint(double value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeBoolean( boolean value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    @Override\n+    public void writeUTF8(byte[] bytes, int offset, int length) throws IOException\n+    {\n+      packUTF8(bytes, offset, length);\n+    }\n \n-        @Override\n-        public void writeInteger( byte value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    @Override\n+    public void writeString(String value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeInteger( short value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    @Override\n+    public void writeString(char value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeInteger( int value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    @Override\n+    public void beginArray(int size, ArrayType arrayType) throws IOException\n+    {\n+      switch (arrayType)\n+      {\n+        case BYTE:\n+          packBytesHeader(size);\n+          break;\n+        default:\n+          packListHeader(size);\n+      }\n \n-        @Override\n-        public void writeInteger( long value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    }\n \n-        @Override\n-        public void writeFloatingPoint( float value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    @Override\n+    public void endArray()\n+    {\n+      //Do nothing\n+    }\n \n-        @Override\n-        public void writeFloatingPoint( double value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    @Override\n+    public void writeByteArray(byte[] value) throws IOException\n+    {\n+      pack(value);\n+    }\n \n-        @Override\n-        public void writeUTF8( byte[] bytes, int offset, int length ) throws IOException\n-        {\n-            packUTF8(bytes, offset, length);\n-        }\n+    void throwUnsupportedTypeError(String type) throws BoltIOException\n+    {\n+      throw new BoltIOException(Status.Request.Invalid, type + \" is not supported as a return type in Bolt protocol version 1. \" +\n+          \"Please make sure driver supports at least protocol version 2. \" +\n+          \"Driver upgrade is most likely required.\");\n+    }\n+  }\n \n-        @Override\n-        public void writeString( String value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+  protected static class UnpackerV1 extends PackStream.Unpacker implements Neo4jPack.Unpacker\n+  {\n+    protected UnpackerV1(PackInput input)\n+    {\n+      super(input);\n+    }\n \n-        @Override\n-        public void writeString( char value ) throws IOException\n-        {\n-            pack( value );\n-        }\n+    @Override\n+    public AnyValue unpack() throws IOException\n+    {\n+      PackType valType = peekNextType();\n+      switch (valType)\n+      {\n+        case BYTES:\n+          return byteArray(unpackBytes());\n+        case STRING:\n+          return Values.utf8Value(unpackUTF8());\n+        case INTEGER:\n+          return Values.longValue(unpackLong());\n+        case FLOAT:\n+          return Values.doubleValue(unpackDouble());\n+        case BOOLEAN:\n+          return Values.booleanValue(unpackBoolean());\n+        case NULL:\n+          // still need to move past the null value\n+          unpackNull();\n+          return Values.NO_VALUE;\n+        case LIST:\n+        {\n+          return unpackList();\n+        }\n+        case MAP:\n+        {\n+          return unpackMap();\n+        }\n+        case STRUCT:\n+        {\n+          long size = unpackStructHeader();\n+          char signature = unpackStructSignature();\n+          return unpackStruct(signature, size);\n+        }\n+        case END_OF_STREAM:\n+        {\n+          unpackEndOfStream();\n+          return null;\n+        }\n+        default:\n+          throw new BoltIOException(Status.Request.InvalidFormat, \"Unknown value type: \" + valType);\n+      }\n+    }\n \n-        @Override\n-        public void beginArray( int size, ArrayType arrayType ) throws IOException\n-        {\n-            switch ( arrayType )\n-            {\n-            case BYTE:\n-                packBytesHeader( size );\n-                break;\n+    ListValue unpackList() throws IOException\n+    {\n+      int size = (int) unpackListHeader();\n+      if (size == 0)\n+      {\n+        return VirtualValues.EMPTY_LIST;\n+      } else if (size == UNKNOWN_SIZE)\n+      {\n+        List<AnyValue> list = new ArrayList<>();\n+        boolean more = true;\n+        while (more)\n+        {\n+          PackType keyType = peekNextType();\n+          switch (keyType)\n+          {\n+            case END_OF_STREAM:\n+              unpack();\n+              more = false;\n+              break;\n             default:\n-                packListHeader( size );\n-            }\n-\n+              list.add(unpack());\n+          }\n         }\n-\n-        @Override\n-        public void endArray()\n+        return VirtualValues.list(list.toArray(new AnyValue[0]));\n+      } else\n+      {\n+        AnyValue[] values = new AnyValue[size];\n+        for (int i = 0; i < size; i++)\n         {\n-            //Do nothing\n-        }\n-\n-        @Override\n-        public void writeByteArray( byte[] value ) throws IOException\n-        {\n-            pack( value );\n-        }\n-\n-        void throwUnsupportedTypeError( String type ) throws BoltIOException\n-        {\n-            throw new BoltIOException( Status.Request.Invalid, type + \" is not supported as a return type in Bolt protocol version 1. \" +\n-                                                               \"Please make sure driver supports at least protocol version 2. \" +\n-                                                               \"Driver upgrade is most likely required.\" );\n+          values[i] = unpack();\n         }\n+        return VirtualValues.list(values);\n+      }\n     }\n \n-    protected static class UnpackerV1 extends PackStream.Unpacker implements Neo4jPack.Unpacker\n+    protected AnyValue unpackStruct(char signature, long size) throws IOException\n     {\n-        protected UnpackerV1( PackInput input )\n-        {\n-            super( input );\n-        }\n+      StructType structType = StructType.valueOf(signature);\n+      if (structType == null)\n+      {\n+        throw new BoltIOException(Status.Request.InvalidFormat,\n+            String.format(\"Struct types of 0x%s are not recognized.\", Integer.toHexString(signature)));\n+      }\n+\n+      throw new BoltIOException(Status.Statement.TypeError,\n+          String.format(\"%s values cannot be unpacked with this version of bolt.\", structType.description()));\n+    }\n \n-        @Override\n-        public AnyValue unpack() throws IOException\n-        {\n-            PackType valType = peekNextType();\n-            switch ( valType )\n-            {\n-            case BYTES:\n-                return byteArray( unpackBytes() );\n+    @Override\n+    public MapValue unpackMap() throws IOException\n+    {\n+      int size = (int) unpackMapHeader();\n+      if (size == 0)\n+      {\n+        return VirtualValues.EMPTY_MAP;\n+      }\n+      Map<String, AnyValue> map;\n+      if (size == UNKNOWN_SIZE)\n+      {\n+        map = new HashMap<>();\n+        boolean more = true;\n+        while (more)\n+        {\n+          PackType keyType = peekNextType();\n+          String key;\n+          AnyValue val;\n+          switch (keyType)\n+          {\n+            case END_OF_STREAM:\n+              unpack();\n+              more = false;\n+              break;\n             case STRING:\n-                return Values.utf8Value( unpackUTF8() );\n-            case INTEGER:\n-                return Values.longValue( unpackLong() );\n-            case FLOAT:\n-                return Values.doubleValue( unpackDouble() );\n-            case BOOLEAN:\n-                return Values.booleanValue( unpackBoolean() );\n+              key = unpackString();\n+              val = unpack();\n+              if (map.put(key, val) != null)\n+              {\n+                throw new BoltIOException(Status.Request.Invalid, \"Duplicate map key `\" + key + \"`.\");\n+              }\n+              break;\n             case NULL:\n-                // still need to move past the null value\n-                unpackNull();\n-                return Values.NO_VALUE;\n-            case LIST:\n-            {\n-                return unpackList();\n-            }\n-            case MAP:\n-            {\n-                return unpackMap();\n-            }\n-            case STRUCT:\n-            {\n-                long size = unpackStructHeader();\n-                char signature = unpackStructSignature();\n-                return unpackStruct( signature, size );\n-            }\n-            case END_OF_STREAM:\n-            {\n-                unpackEndOfStream();\n-                return null;\n-            }\n+              throw new BoltIOException(Status.Request.Invalid, \"Value `null` is not supported as key in maps, must be a non-nullable string.\");\n             default:\n-                throw new BoltIOException( Status.Request.InvalidFormat, \"Unknown value type: \" + valType );\n-            }\n-        }\n-\n-        ListValue unpackList() throws IOException\n-        {\n-            int size = (int) unpackListHeader();\n-            if ( size == 0 )\n-            {\n-                return VirtualValues.EMPTY_LIST;\n-            }\n-            else if ( size == UNKNOWN_SIZE )\n-            {\n-                List<AnyValue> list = new ArrayList<>();\n-                boolean more = true;\n-                while ( more )\n-                {\n-                    PackType keyType = peekNextType();\n-                    switch ( keyType )\n-                    {\n-                    case END_OF_STREAM:\n-                        unpack();\n-                        more = false;\n-                        break;\n-                    default:\n-                        list.add( unpack() );\n-                    }\n-                }\n-                return VirtualValues.list( list.toArray( new AnyValue[0] ) );\n-            }\n-            else\n-            {\n-                AnyValue[] values = new AnyValue[size];\n-                for ( int i = 0; i < size; i++ )\n-                {\n-                    values[i] = unpack();\n-                }\n-                return VirtualValues.list( values );\n-            }\n-        }\n-\n-        protected AnyValue unpackStruct( char signature, long size ) throws IOException\n-        {\n-            StructType structType = StructType.valueOf( signature );\n-            if ( structType == null )\n-            {\n-                throw new BoltIOException( Status.Request.InvalidFormat,\n-                        String.format( \"Struct types of 0x%s are not recognized.\", Integer.toHexString( signature ) ) );\n-            }\n-\n-            throw new BoltIOException( Status.Statement.TypeError,\n-                    String.format( \"%s values cannot be unpacked with this version of bolt.\", structType.description() ) );\n-        }\n+              throw new BoltIOException(Status.Request.InvalidFormat, \"Bad key type: \" + keyType);\n+          }\n+        }\n+      } else\n+      {\n+        map = new HashMap<>(size, 1);\n+        for (int i = 0; i < size; i++)\n+        {\n+          PackType keyType = peekNextType();\n+          String key;\n+          switch (keyType)\n+          {\n+            case NULL:\n+              throw new BoltIOException(Status.Request.Invalid, \"Value `null` is not supported as key in maps, must be a non-nullable string.\");\n+            case STRING:\n+              key = unpackString();\n+              break;\n+            default:\n+              throw new BoltIOException(Status.Request.InvalidFormat, \"Bad key type: \" + keyType);\n+          }\n \n-        @Override\n-        public MapValue unpackMap() throws IOException\n-        {\n-            int size = (int) unpackMapHeader();\n-            if ( size == 0 )\n-            {\n-                return VirtualValues.EMPTY_MAP;\n-            }\n-            Map<String,AnyValue> map;\n-            if ( size == UNKNOWN_SIZE )\n-            {\n-                map = new HashMap<>();\n-                boolean more = true;\n-                while ( more )\n-                {\n-                    PackType keyType = peekNextType();\n-                    String key;\n-                    AnyValue val;\n-                    switch ( keyType )\n-                    {\n-                    case END_OF_STREAM:\n-                        unpack();\n-                        more = false;\n-                        break;\n-                    case STRING:\n-                        key = unpackString();\n-                        val = unpack();\n-                        if ( map.put( key, val ) != null )\n-                        {\n-                            throw new BoltIOException( Status.Request.Invalid, \"Duplicate map key `\" + key + \"`.\" );\n-                        }\n-                        break;\n-                    case NULL:\n-                        throw new BoltIOException( Status.Request.Invalid, \"Value `null` is not supported as key in maps, must be a non-nullable string.\" );\n-                    default:\n-                        throw new BoltIOException( Status.Request.InvalidFormat, \"Bad key type: \" + keyType );\n-                    }\n-                }\n-            }\n-            else\n-            {\n-                map = new HashMap<>( size, 1 );\n-                for ( int i = 0; i < size; i++ )\n-                {\n-                    PackType keyType = peekNextType();\n-                    String key;\n-                    switch ( keyType )\n-                    {\n-                    case NULL:\n-                        throw new BoltIOException( Status.Request.Invalid, \"Value `null` is not supported as key in maps, must be a non-nullable string.\" );\n-                    case STRING:\n-                        key = unpackString();\n-                        break;\n-                    default:\n-                        throw new BoltIOException( Status.Request.InvalidFormat, \"Bad key type: \" + keyType );\n-                    }\n-\n-                    AnyValue val = unpack();\n-                    if ( map.put( key, val ) != null )\n-                    {\n-                        throw new BoltIOException( Status.Request.Invalid, \"Duplicate map key `\" + key + \"`.\" );\n-                    }\n-                }\n-            }\n-            return VirtualValues.map( map );\n+          AnyValue val = unpack();\n+          if (map.put(key, val) != null)\n+          {\n+            throw new BoltIOException(Status.Request.Invalid, \"Duplicate map key `\" + key + \"`.\");\n+          }\n         }\n+      }\n+      return VirtualValues.map(map);\n     }\n+  }\n }\n",
            "diff_size": 730
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "434",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 249).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "491",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/70/Neo4jPackV1.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/70/Neo4jPackV1.java\nindex 8874272b36e..4b3cec51f2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/70/Neo4jPackV1.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/70/Neo4jPackV1.java\n@@ -61,16 +61,20 @@ public class Neo4jPackV1 implements Neo4jPack\n     public static final long VERSION = 1;\n \n     public static final byte NODE = 'N';\n-    public static final int NODE_SIZE = 3;\n+\n+public static final int NODE_SIZE = 3;\n \n     public static final byte RELATIONSHIP = 'R';\n-    public static final int RELATIONSHIP_SIZE = 5;\n+\n+public static final int RELATIONSHIP_SIZE = 5;\n \n     public static final byte UNBOUND_RELATIONSHIP = 'r';\n-    public static final int UNBOUND_RELATIONSHIP_SIZE = 3;\n+\n+public static final int UNBOUND_RELATIONSHIP_SIZE = 3;\n \n     public static final byte PATH = 'P';\n-    public static final int PATH_SIZE = 3;\n+\n+public static final int PATH_SIZE = 3;\n \n     @Override\n     public Neo4jPack.Packer newPacker( PackOutput output )\n@@ -100,12 +104,9 @@ public class Neo4jPackV1 implements Neo4jPack\n     {\n         private static final int INITIAL_PATH_CAPACITY = 500;\n         private static final int NO_SUCH_ID = -1;\n-        private final PrimitiveLongIntKeyValueArray nodeIndexes =\n-                new PrimitiveLongIntKeyValueArray( INITIAL_PATH_CAPACITY + 1 );\n-        private final PrimitiveLongIntKeyValueArray relationshipIndexes =\n-                new PrimitiveLongIntKeyValueArray( INITIAL_PATH_CAPACITY );\n-\n-        protected PackerV1( PackOutput output )\n+        private final PrimitiveLongIntKeyValueArray nodeIndexes = new PrimitiveLongIntKeyValueArray( INITIAL_PATH_CAPACITY + 1 );\n+private final PrimitiveLongIntKeyValueArray relationshipIndexes = new PrimitiveLongIntKeyValueArray( INITIAL_PATH_CAPACITY );\n+protected PackerV1( PackOutput output )\n         {\n             super( output );\n         }\n@@ -142,9 +143,8 @@ public class Neo4jPackV1 implements Neo4jPack\n         }\n \n         @Override\n-        public void writeRelationship( long relationshipId, long startNodeId, long endNodeId, TextValue type, MapValue properties )\n-                throws IOException\n-        {\n+        public void writeRelationship( long relationshipId, long startNodeId, long endNodeId, TextValue type, MapValue properties ) throws IOException\n+{\n             packStructHeader( RELATIONSHIP_SIZE, RELATIONSHIP );\n             pack( relationshipId );\n             pack( startNodeId );\n@@ -225,8 +225,7 @@ public class Neo4jPackV1 implements Neo4jPack\n                 {\n                     RelationshipValue r = relationships[i / 2];\n                     int index = relationshipIndexes.getOrDefault( r.id(), NO_SUCH_ID );\n-\n-                    if ( node.id() == r.startNode().id() )\n+if ( node.id() == r.startNode().id() )\n                     {\n                         pack( index );\n                     }\n@@ -235,8 +234,7 @@ public class Neo4jPackV1 implements Neo4jPack\n                         pack( -index );\n                     }\n                 }\n-\n-            }\n+    }\n         }\n \n         private void writeNodesForPath( NodeValue[] nodes ) throws IOException\n@@ -391,7 +389,7 @@ public class Neo4jPackV1 implements Neo4jPack\n         @Override\n         public void writeUTF8( byte[] bytes, int offset, int length ) throws IOException\n         {\n-            packUTF8(bytes, offset, length);\n+            packUTF8( bytes, offset, length );\n         }\n \n         @Override\n@@ -417,8 +415,7 @@ public class Neo4jPackV1 implements Neo4jPack\n             default:\n                 packListHeader( size );\n             }\n-\n-        }\n+    }\n \n         @Override\n         public void endArray()\n@@ -434,10 +431,8 @@ public class Neo4jPackV1 implements Neo4jPack\n \n         void throwUnsupportedTypeError( String type ) throws BoltIOException\n         {\n-            throw new BoltIOException( Status.Request.Invalid, type + \" is not supported as a return type in Bolt protocol version 1. \" +\n-                                                               \"Please make sure driver supports at least protocol version 2. \" +\n-                                                               \"Driver upgrade is most likely required.\" );\n-        }\n+            throw new BoltIOException( Status.Request.Invalid, type + \" is not supported as a return type in Bolt protocol version 1. \" + \"Please make sure driver supports at least protocol version 2. \" + \"Driver upgrade is most likely required.\" );\n+    }\n     }\n \n     protected static class UnpackerV1 extends PackStream.Unpacker implements Neo4jPack.Unpacker\n@@ -486,14 +481,14 @@ public class Neo4jPackV1 implements Neo4jPack\n                 unpackEndOfStream();\n                 return null;\n             }\n-            default:\n+    default:\n                 throw new BoltIOException( Status.Request.InvalidFormat, \"Unknown value type: \" + valType );\n             }\n         }\n \n         ListValue unpackList() throws IOException\n         {\n-            int size = (int) unpackListHeader();\n+            int size = ( int) unpackListHeader();\n             if ( size == 0 )\n             {\n                 return VirtualValues.EMPTY_LIST;\n@@ -524,7 +519,8 @@ public class Neo4jPackV1 implements Neo4jPack\n                 {\n                     values[i] = unpack();\n                 }\n-                return VirtualValues.list( values );\n+\n+return VirtualValues.list( values );\n             }\n         }\n \n@@ -544,7 +540,7 @@ public class Neo4jPackV1 implements Neo4jPack\n         @Override\n         public MapValue unpackMap() throws IOException\n         {\n-            int size = (int) unpackMapHeader();\n+            int size = ( int) unpackMapHeader();\n             if ( size == 0 )\n             {\n                 return VirtualValues.EMPTY_MAP;\n@@ -608,4 +604,4 @@ public class Neo4jPackV1 implements Neo4jPack\n             return VirtualValues.map( map );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}