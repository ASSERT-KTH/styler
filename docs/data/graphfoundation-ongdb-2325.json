{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2325",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "130",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2325/HighAvailabilitySlaves.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2325/HighAvailabilitySlaves.java\nindex 12ddea8e64e..9f89198d982 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2325/HighAvailabilitySlaves.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2325/HighAvailabilitySlaves.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.cluster.member;\n \n import java.net.URI;\n@@ -46,94 +47,93 @@ import static org.neo4j.kernel.ha.cluster.member.ClusterMembers.inRole;\n  */\n public class HighAvailabilitySlaves implements Lifecycle, Slaves\n {\n-    private final LifeSupport life = new LifeSupport();\n-    private final Map<ClusterMember, Slave> slaves = new CopyOnWriteHashMap<>();\n-    private final ClusterMembers clusterMembers;\n-    private final Cluster cluster;\n-    private final SlaveFactory slaveFactory;\n-    private final HostnamePort me;\n-    private HighAvailabilitySlaves.HASClusterListener clusterListener;\n-\n-    public HighAvailabilitySlaves( ClusterMembers clusterMembers, Cluster cluster, SlaveFactory slaveFactory,\n-            HostnamePort me )\n-    {\n-        this.clusterMembers = clusterMembers;\n-        this.cluster = cluster;\n-        this.slaveFactory = slaveFactory;\n-        this.me = me;\n-    }\n+  private final LifeSupport life = new LifeSupport();\n+  private final Map<ClusterMember, Slave> slaves = new CopyOnWriteHashMap<>();\n+  private final ClusterMembers clusterMembers;\n+  private final Cluster cluster;\n+  private final SlaveFactory slaveFactory;\n+  private final HostnamePort me;\n+  private HighAvailabilitySlaves.HASClusterListener clusterListener;\n \n-    private Function<ClusterMember, Slave> slaveForMember()\n-    {\n-        return from ->\n-        {\n-            synchronized ( HighAvailabilitySlaves.this )\n-            {\n-                return slaves.computeIfAbsent( from, f -> slaveFactory.newSlave( life, f, me.getHost(), me.getPort() ) );\n-            }\n-        };\n-    }\n+  public HighAvailabilitySlaves(ClusterMembers clusterMembers, Cluster cluster, SlaveFactory slaveFactory,\n+                                HostnamePort me)\n+  {\n+    this.clusterMembers = clusterMembers;\n+    this.cluster = cluster;\n+    this.slaveFactory = slaveFactory;\n+    this.me = me;\n+  }\n \n-    @Override\n-    public Iterable<Slave> getSlaves()\n+  private Function<ClusterMember, Slave> slaveForMember()\n+  {\n+    return from ->\n     {\n-        // Return all cluster members which are currently SLAVEs,\n-        // are alive, and convert to Slave with a cache if possible\n-        return map( clusterMember ->\n-        {\n-            Slave slave = slaveForMember().apply( clusterMember );\n-\n-            if ( slave == null )\n-            {\n-                return slaves.get( clusterMember );\n-            }\n-            else\n-            {\n-                return slave;\n-            }\n-        }, filter( inRole( HighAvailabilityModeSwitcher.SLAVE ), clusterMembers.getAliveMembers() ) );\n-    }\n+      synchronized (HighAvailabilitySlaves.this)\n+      {\n+        return slaves.computeIfAbsent(from, f -> slaveFactory.newSlave(life, f, me.getHost(), me.getPort()));\n+      }\n+    };\n+  }\n \n-    @Override\n-    public void init()\n+  @Override\n+  public Iterable<Slave> getSlaves()\n+  {\n+    // Return all cluster members which are currently SLAVEs,\n+    // are alive, and convert to Slave with a cache if possible\n+    return map(clusterMember ->\n     {\n-        life.init();\n+      Slave slave = slaveForMember().apply(clusterMember);\n \n-        clusterListener = new HASClusterListener();\n-        cluster.addClusterListener( clusterListener );\n-    }\n+      if (slave == null)\n+      {\n+        return slaves.get(clusterMember);\n+      } else\n+      {\n+        return slave;\n+      }\n+    }, filter(inRole(HighAvailabilityModeSwitcher.SLAVE), clusterMembers.getAliveMembers()));\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        life.start();\n-    }\n+  @Override\n+  public void init()\n+  {\n+    life.init();\n \n-    @Override\n-    public void stop()\n-    {\n-        life.stop();\n-    }\n+    clusterListener = new HASClusterListener();\n+    cluster.addClusterListener(clusterListener);\n+  }\n \n-    @Override\n-    public void shutdown()\n-    {\n-        cluster.removeClusterListener( clusterListener );\n+  @Override\n+  public void start()\n+  {\n+    life.start();\n+  }\n \n-        life.shutdown();\n-        slaves.clear();\n-    }\n+  @Override\n+  public void stop()\n+  {\n+    life.stop();\n+  }\n+\n+  @Override\n+  public void shutdown()\n+  {\n+    cluster.removeClusterListener(clusterListener);\n+\n+    life.shutdown();\n+    slaves.clear();\n+  }\n \n-    private class HASClusterListener extends ClusterListener.Adapter\n+  private class HASClusterListener extends ClusterListener.Adapter\n+  {\n+    @Override\n+    public void elected(String role, InstanceId instanceId, URI electedMember)\n     {\n-        @Override\n-        public void elected( String role, InstanceId instanceId, URI electedMember )\n-        {\n-            if ( role.equals( ClusterConfiguration.COORDINATOR ) )\n-            {\n-                life.clear();\n-                slaves.clear();\n-            }\n-        }\n+      if (role.equals(ClusterConfiguration.COORDINATOR))\n+      {\n+        life.clear();\n+        slaves.clear();\n+      }\n     }\n+  }\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2325/HighAvailabilitySlaves.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2325/HighAvailabilitySlaves.java\nindex 12ddea8e64e..2eff902438b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2325/HighAvailabilitySlaves.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2325/HighAvailabilitySlaves.java\n@@ -47,7 +47,7 @@ import static org.neo4j.kernel.ha.cluster.member.ClusterMembers.inRole;\n public class HighAvailabilitySlaves implements Lifecycle, Slaves\n {\n     private final LifeSupport life = new LifeSupport();\n-    private final Map<ClusterMember, Slave> slaves = new CopyOnWriteHashMap<>();\n+    private final Map<ClusterMember,Slave> slaves = new CopyOnWriteHashMap<>();\n     private final ClusterMembers clusterMembers;\n     private final Cluster cluster;\n     private final SlaveFactory slaveFactory;\n@@ -63,7 +63,7 @@ public class HighAvailabilitySlaves implements Lifecycle, Slaves\n         this.me = me;\n     }\n \n-    private Function<ClusterMember, Slave> slaveForMember()\n+    private Function<ClusterMember,Slave> slaveForMember()\n     {\n         return from ->\n         {\n@@ -82,8 +82,7 @@ public class HighAvailabilitySlaves implements Lifecycle, Slaves\n         return map( clusterMember ->\n         {\n             Slave slave = slaveForMember().apply( clusterMember );\n-\n-            if ( slave == null )\n+if ( slave == null )\n             {\n                 return slaves.get( clusterMember );\n             }\n@@ -119,8 +118,7 @@ public class HighAvailabilitySlaves implements Lifecycle, Slaves\n     public void shutdown()\n     {\n         cluster.removeClusterListener( clusterListener );\n-\n-        life.shutdown();\n+life.shutdown();\n         slaves.clear();\n     }\n \n@@ -136,4 +134,4 @@ public class HighAvailabilitySlaves implements Lifecycle, Slaves\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}