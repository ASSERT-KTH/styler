{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "127",
    "information": {
        "errors": [
            {
                "line": "91",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    public void setSchema(SchemaComponentCache cache)\n    {\n    \tschema = PreCondition.assertNotNull(cache);\n    }\n    \n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/127/NamespaceFixupSequenceFilter.java\nindex 9cd2e7dc3f0..8222e08523b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/127/NamespaceFixupSequenceFilter.java\n@@ -88,7 +88,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(SchemaComponentCache cache)\n     {\n-    \tschema = PreCondition.assertNotNull(cache);\n+    schema = PreCondition.assertNotNull(cache);\n     }\n     \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/127/NamespaceFixupSequenceFilter.java\nindex 9cd2e7dc3f0..583fa649dc6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/127/NamespaceFixupSequenceFilter.java\n@@ -20,36 +20,37 @@ import org.genxdm.xs.types.Type;\n \n public class NamespaceFixupSequenceFilter<A>\n     extends AbstractNamespaceFixupHandler\n-    implements SequenceFilter<A>\n-{\n+    implements SequenceFilter<A> {\n \n-    public NamespaceFixupSequenceFilter()\n-    {\n+    public NamespaceFixupSequenceFilter() {\n         // you can't extend a simple type in attribute context (it can't have attributes)\n         // methods.add(DerivationMethod.Extension);\n-        methods.add(DerivationMethod.Restriction); // allowed; enum or pattern or length/maxlen/minlen\n+        methods\n+            .add(DerivationMethod.Restriction); // allowed; enum or pattern or length/maxlen/minlen\n         methods.add(DerivationMethod.List); // honestly, this is problematic to handle\n         // we prolly ought to allow the union, right?\n         //methods.add(DerivationMethod.Union); // also problematic ...\n     }\n-    \n+\n     @Override\n-    public void attribute(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n-        throws GenXDMException\n-    {\n+    public void attribute(String namespaceURI, String localName, String prefix,\n+                          List<? extends A> data, QName type)\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n-        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")) )\n-        {\n+        if (localName.equalsIgnoreCase(\"xmlns\") ||\n+            ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\"))) {\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n-            if (atoms != null)\n-                namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName, atoms.getC14NString(data));\n+            if (atoms != null) {\n+                namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName,\n+                    atoms.getC14NString(data));\n+            }\n             return;\n         }\n         NamespaceBinding pns = handleAttributeNS(namespaceURI, localName, prefix);\n-        Type t = (type == null) ? BuiltInSchema.SINGLETON.UNTYPED_ATOMIC : schema.getComponentProvider().getTypeDefinition(type);\n+        Type t = (type == null) ? BuiltInSchema.SINGLETON.UNTYPED_ATOMIC :\n+            schema.getComponentProvider().getTypeDefinition(type);\n //        // i'm not sure about this test\n-        if ( (type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods) )\n-        {\n+        if ((type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods)) {\n //            // TODO: finish the job\n //            // we need to check for qnames in content, here, and insure\n //            // that any bindings that they require are also declared.\n@@ -59,8 +60,7 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void startElement(String namespaceURI, String localName, String prefix, QName type)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         newScope();\n@@ -72,46 +72,38 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void text(List<? extends A> data)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.text(data);\n     }\n \n     @Override\n-    public void setOutputSequenceHandler(SequenceHandler<A> handler)\n-    {\n+    public void setOutputSequenceHandler(SequenceHandler<A> handler) {\n         output = PreCondition.assertNotNull(handler);\n     }\n-    \n+\n     @Override\n-    public void setSchema(SchemaComponentCache cache)\n-    {\n-    \tschema = PreCondition.assertNotNull(cache);\n+    public void setSchema(SchemaComponentCache cache) {\n+        schema = PreCondition.assertNotNull(cache);\n     }\n-    \n+\n     @Override\n-    public void setAtomBridge(AtomBridge<A> bridge)\n-    {\n+    public void setAtomBridge(AtomBridge<A> bridge) {\n         atoms = PreCondition.assertNotNull(bridge);\n     }\n-    \n+\n     @Override\n-    protected ContentHandler getOutputHandler()\n-    {\n+    protected ContentHandler getOutputHandler() {\n         return output;\n     }\n \n     @Override\n-    protected void outputAttribute(Attr a)\n-    {\n-        if (a instanceof NamespaceFixupSequenceFilter.SeqAttr)\n-        {\n+    protected void outputAttribute(Attr a) {\n+        if (a instanceof NamespaceFixupSequenceFilter.SeqAttr) {\n             @SuppressWarnings(\"unchecked\")\n-            SeqAttr sa = (SeqAttr)a;\n-            if (sa.data != null)\n-            {\n+            SeqAttr sa = (SeqAttr) a;\n+            if (sa.data != null) {\n                 output.attribute(sa.namespace, sa.name, sa.prefix, sa.data, sa.typeName);\n                 return;\n             }\n@@ -123,8 +115,7 @@ public class NamespaceFixupSequenceFilter<A>\n     }\n \n     @Override\n-    protected void outputCurrentElement()\n-    {\n+    protected void outputCurrentElement() {\n         PreCondition.assertNotNull(output);\n         output.startElement(elementNs, elementName, elementPrefix, elementType);\n         elementNs = null;\n@@ -133,24 +124,30 @@ public class NamespaceFixupSequenceFilter<A>\n         elementType = null;\n     }\n \n-    private class SeqAttr extends AbstractNamespaceFixupHandler.Attr\n-    {\n-        SeqAttr(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n-        {\n+    private class SeqAttr extends AbstractNamespaceFixupHandler.Attr {\n+        SeqAttr(String namespaceURI, String localName, String prefix, List<? extends A> data,\n+                QName type) {\n             this.namespace = namespaceURI;\n             this.name = localName;\n             this.prefix = prefix;\n             this.data = data;\n             this.typeName = type;\n         }\n+\n         List<? extends A> data;\n+\n         QName typeName;\n     }\n \n     private QName elementType;\n+\n     private SequenceHandler<A> output;\n+\n     private AtomBridge<A> atoms;\n-    private SchemaComponentCache schema; // never used? why is this here? oh, for qnames in content; never mind\n+\n+    private SchemaComponentCache schema;\n+        // never used? why is this here? oh, for qnames in content; never mind\n+\n     private Set<DerivationMethod> methods = new HashSet<DerivationMethod>(3);\n-    \n+\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/127/NamespaceFixupSequenceFilter.java\nindex 9cd2e7dc3f0..888981ea514 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/127/NamespaceFixupSequenceFilter.java\n@@ -43,7 +43,7 @@ public class NamespaceFixupSequenceFilter<A>\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n             if (atoms != null)\n                 namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName, atoms.getC14NString(data));\n-            return;\n+return;\n         }\n         NamespaceBinding pns = handleAttributeNS(namespaceURI, localName, prefix);\n         Type t = (type == null) ? BuiltInSchema.SINGLETON.UNTYPED_ATOMIC : schema.getComponentProvider().getTypeDefinition(type);\n@@ -88,7 +88,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(SchemaComponentCache cache)\n     {\n-    \tschema = PreCondition.assertNotNull(cache);\n+    schema = PreCondition.assertNotNull(cache);\n     }\n     \n     @Override\n@@ -153,4 +153,4 @@ public class NamespaceFixupSequenceFilter<A>\n     private SchemaComponentCache schema; // never used? why is this here? oh, for qnames in content; never mind\n     private Set<DerivationMethod> methods = new HashSet<DerivationMethod>(3);\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/127/NamespaceFixupSequenceFilter.java\nindex 9cd2e7dc3f0..ed705d164e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/127/NamespaceFixupSequenceFilter.java\n@@ -3,9 +3,7 @@ package org.genxdm.bridgekit.filters;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import javax.xml.namespace.QName;\n-\n import org.genxdm.bridgekit.xs.BuiltInSchema;\n import org.genxdm.exceptions.GenXDMException;\n import org.genxdm.exceptions.PreCondition;\n@@ -19,10 +17,8 @@ import org.genxdm.xs.enums.DerivationMethod;\n import org.genxdm.xs.types.Type;\n \n public class NamespaceFixupSequenceFilter<A>\n-    extends AbstractNamespaceFixupHandler\n-    implements SequenceFilter<A>\n+    extends AbstractNamespaceFixupHandler implements SequenceFilter<A>\n {\n-\n     public NamespaceFixupSequenceFilter()\n     {\n         // you can't extend a simple type in attribute context (it can't have attributes)\n@@ -32,13 +28,13 @@ public class NamespaceFixupSequenceFilter<A>\n         // we prolly ought to allow the union, right?\n         //methods.add(DerivationMethod.Union); // also problematic ...\n     }\n-    \n+\n     @Override\n     public void attribute(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n         throws GenXDMException\n     {\n         PreCondition.assertNotNull(output);\n-        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")) )\n+        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")))\n         {\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n             if (atoms != null)\n@@ -48,11 +44,12 @@ public class NamespaceFixupSequenceFilter<A>\n         NamespaceBinding pns = handleAttributeNS(namespaceURI, localName, prefix);\n         Type t = (type == null) ? BuiltInSchema.SINGLETON.UNTYPED_ATOMIC : schema.getComponentProvider().getTypeDefinition(type);\n //        // i'm not sure about this test\n-        if ( (type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods) )\n+        if ( (type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods))\n         {\n //            // TODO: finish the job\n //            // we need to check for qnames in content, here, and insure\n //            // that any bindings that they require are also declared.\n+\n         }\n         attributes.add(new SeqAttr(pns.getNamespaceURI(), localName, pns.getPrefix(), data, type));\n     }\n@@ -84,19 +81,19 @@ public class NamespaceFixupSequenceFilter<A>\n     {\n         output = PreCondition.assertNotNull(handler);\n     }\n-    \n+\n     @Override\n     public void setSchema(SchemaComponentCache cache)\n     {\n-    \tschema = PreCondition.assertNotNull(cache);\n+        schema = PreCondition.assertNotNull(cache);\n     }\n-    \n+\n     @Override\n     public void setAtomBridge(AtomBridge<A> bridge)\n     {\n         atoms = PreCondition.assertNotNull(bridge);\n     }\n-    \n+\n     @Override\n     protected ContentHandler getOutputHandler()\n     {\n@@ -108,8 +105,7 @@ public class NamespaceFixupSequenceFilter<A>\n     {\n         if (a instanceof NamespaceFixupSequenceFilter.SeqAttr)\n         {\n-            @SuppressWarnings(\"unchecked\")\n-            SeqAttr sa = (SeqAttr)a;\n+            @SuppressWarnings(\"unchecked\")SeqAttr sa = (SeqAttr)a;\n             if (sa.data != null)\n             {\n                 output.attribute(sa.namespace, sa.name, sa.prefix, sa.data, sa.typeName);\n@@ -135,6 +131,7 @@ public class NamespaceFixupSequenceFilter<A>\n \n     private class SeqAttr extends AbstractNamespaceFixupHandler.Attr\n     {\n+\n         SeqAttr(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n         {\n             this.namespace = namespaceURI;\n@@ -143,6 +140,7 @@ public class NamespaceFixupSequenceFilter<A>\n             this.data = data;\n             this.typeName = type;\n         }\n+\n         List<? extends A> data;\n         QName typeName;\n     }\n@@ -152,5 +150,4 @@ public class NamespaceFixupSequenceFilter<A>\n     private AtomBridge<A> atoms;\n     private SchemaComponentCache schema; // never used? why is this here? oh, for qnames in content; never mind\n     private Set<DerivationMethod> methods = new HashSet<DerivationMethod>(3);\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/127/NamespaceFixupSequenceFilter.java\nindex 9cd2e7dc3f0..8222e08523b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/127/NamespaceFixupSequenceFilter.java\n@@ -88,7 +88,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(SchemaComponentCache cache)\n     {\n-    \tschema = PreCondition.assertNotNull(cache);\n+    schema = PreCondition.assertNotNull(cache);\n     }\n     \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/127/NamespaceFixupSequenceFilter.java\nindex 9cd2e7dc3f0..bb4bfd471f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/127/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/127/NamespaceFixupSequenceFilter.java\n@@ -88,7 +88,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(SchemaComponentCache cache)\n     {\n-    \tschema = PreCondition.assertNotNull(cache);\n+        schema = PreCondition.assertNotNull(cache);\n     }\n     \n     @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}