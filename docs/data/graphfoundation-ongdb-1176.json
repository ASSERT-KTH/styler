{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1176",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "159",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "133",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1176/StandardConstraintSemantics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1176/StandardConstraintSemantics.java\nindex c042fb66434..9b70764694b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1176/StandardConstraintSemantics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1176/StandardConstraintSemantics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.constraints;\n \n import java.util.Iterator;\n@@ -44,114 +45,115 @@ import org.neo4j.storageengine.api.txstate.TxStateVisitor;\n \n public class StandardConstraintSemantics implements ConstraintSemantics\n {\n-    public static final String ERROR_MESSAGE_EXISTS = \"Property existence constraint requires Neo4j Enterprise Edition\";\n-    public static final String ERROR_MESSAGE_NODE_KEY = \"Node Key constraint requires Neo4j Enterprise Edition\";\n-\n-    @Override\n-    public void validateNodePropertyExistenceConstraint( Iterator<Cursor<NodeItem>> allNodes,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasProperty )\n-            throws CreateConstraintFailureException\n-    {\n-        throw propertyExistenceConstraintsNotAllowed( descriptor );\n-    }\n-\n-    @Override\n-    public void validateNodeKeyConstraint( NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n-            PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor ) throws CreateConstraintFailureException\n-    {\n-        throw nodeKeyConstraintsNotAllowed( descriptor );\n-    }\n-\n-    @Override\n-    public void validateNodePropertyExistenceConstraint( NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n-            PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor ) throws CreateConstraintFailureException\n-    {\n-        throw propertyExistenceConstraintsNotAllowed( descriptor );\n-    }\n-\n-    @Override\n-    public void validateRelationshipPropertyExistenceConstraint( Cursor<RelationshipItem> allRelationships,\n-            RelationTypeSchemaDescriptor descriptor, BiPredicate<RelationshipItem,Integer> hasPropertyCheck )\n-            throws CreateConstraintFailureException\n-    {\n-        throw propertyExistenceConstraintsNotAllowed( descriptor );\n-    }\n-\n-    @Override\n-    public void validateRelationshipPropertyExistenceConstraint( RelationshipScanCursor relationshipCursor,\n-            PropertyCursor propertyCursor, RelationTypeSchemaDescriptor descriptor )  throws CreateConstraintFailureException\n-    {\n-        throw propertyExistenceConstraintsNotAllowed( descriptor );\n-    }\n-\n-    @Override\n-    public void validateNodeKeyConstraint( Iterator<Cursor<NodeItem>> allNodes,\n-            LabelSchemaDescriptor descriptor, BiPredicate<NodeItem,Integer> hasProperty )\n-            throws CreateConstraintFailureException\n-    {\n-        throw nodeKeyConstraintsNotAllowed( descriptor );\n-    }\n-\n-    @Override\n-    public ConstraintDescriptor readConstraint( ConstraintRule rule )\n-    {\n-        ConstraintDescriptor desc = rule.getConstraintDescriptor();\n-        switch ( desc.type() )\n-        {\n-        case EXISTS:\n-            return readNonStandardConstraint( rule, ERROR_MESSAGE_EXISTS );\n-        case UNIQUE_EXISTS:\n-            return readNonStandardConstraint( rule, ERROR_MESSAGE_NODE_KEY );\n-        default:\n-            return desc;\n-        }\n-    }\n-\n-    protected ConstraintDescriptor readNonStandardConstraint( ConstraintRule rule, String errorMessage )\n-    {\n-        // When opening a store in Community Edition that contains a Property Existence Constraint\n-        throw new IllegalStateException( errorMessage );\n-    }\n-\n-    private CreateConstraintFailureException propertyExistenceConstraintsNotAllowed( SchemaDescriptor descriptor )\n-    {\n-        // When creating a Property Existence Constraint in Community Edition\n-        return new CreateConstraintFailureException(\n-                ConstraintDescriptorFactory.existsForSchema( descriptor ), ERROR_MESSAGE_EXISTS );\n-    }\n-\n-    private CreateConstraintFailureException nodeKeyConstraintsNotAllowed( SchemaDescriptor descriptor )\n-    {\n-        // When creating a Node Key Constraint in Community Edition\n-        return new CreateConstraintFailureException(\n-                ConstraintDescriptorFactory.existsForSchema( descriptor ), ERROR_MESSAGE_NODE_KEY );\n-    }\n-\n-    @Override\n-    public ConstraintRule createUniquenessConstraintRule(\n-            long ruleId, UniquenessConstraintDescriptor descriptor, long indexId )\n-    {\n-        return ConstraintRule.constraintRule( ruleId, descriptor, indexId );\n-    }\n-\n-    @Override\n-    public ConstraintRule createNodeKeyConstraintRule(\n-            long ruleId, NodeKeyConstraintDescriptor descriptor, long indexId ) throws CreateConstraintFailureException\n-    {\n-        throw nodeKeyConstraintsNotAllowed( descriptor.schema() );\n-    }\n-\n-    @Override\n-    public ConstraintRule createExistenceConstraint( long ruleId, ConstraintDescriptor descriptor )\n-            throws CreateConstraintFailureException\n-    {\n-        throw propertyExistenceConstraintsNotAllowed( descriptor.schema() );\n-    }\n-\n-    @Override\n-    public TxStateVisitor decorateTxStateVisitor( StoreReadLayer storeLayer, ReadableTransactionState txState,\n-            TxStateVisitor visitor )\n+  public static final String ERROR_MESSAGE_EXISTS = \"Property existence constraint requires Neo4j Enterprise Edition\";\n+  public static final String ERROR_MESSAGE_NODE_KEY = \"Node Key constraint requires Neo4j Enterprise Edition\";\n+\n+  @Override\n+  public void validateNodePropertyExistenceConstraint(Iterator<Cursor<NodeItem>> allNodes,\n+                                                      LabelSchemaDescriptor descriptor, BiPredicate<NodeItem, Integer> hasProperty)\n+      throws CreateConstraintFailureException\n+  {\n+    throw propertyExistenceConstraintsNotAllowed(descriptor);\n+  }\n+\n+  @Override\n+  public void validateNodeKeyConstraint(NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n+                                        PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor) throws CreateConstraintFailureException\n+  {\n+    throw nodeKeyConstraintsNotAllowed(descriptor);\n+  }\n+\n+  @Override\n+  public void validateNodePropertyExistenceConstraint(NodeLabelIndexCursor allNodes, NodeCursor nodeCursor,\n+                                                      PropertyCursor propertyCursor, LabelSchemaDescriptor descriptor) throws CreateConstraintFailureException\n+  {\n+    throw propertyExistenceConstraintsNotAllowed(descriptor);\n+  }\n+\n+  @Override\n+  public void validateRelationshipPropertyExistenceConstraint(Cursor<RelationshipItem> allRelationships,\n+                                                              RelationTypeSchemaDescriptor descriptor, BiPredicate<RelationshipItem, Integer> hasPropertyCheck)\n+      throws CreateConstraintFailureException\n+  {\n+    throw propertyExistenceConstraintsNotAllowed(descriptor);\n+  }\n+\n+  @Override\n+  public void validateRelationshipPropertyExistenceConstraint(RelationshipScanCursor relationshipCursor,\n+                                                              PropertyCursor propertyCursor, RelationTypeSchemaDescriptor descriptor)\n+      throws CreateConstraintFailureException\n+  {\n+    throw propertyExistenceConstraintsNotAllowed(descriptor);\n+  }\n+\n+  @Override\n+  public void validateNodeKeyConstraint(Iterator<Cursor<NodeItem>> allNodes,\n+                                        LabelSchemaDescriptor descriptor, BiPredicate<NodeItem, Integer> hasProperty)\n+      throws CreateConstraintFailureException\n+  {\n+    throw nodeKeyConstraintsNotAllowed(descriptor);\n+  }\n+\n+  @Override\n+  public ConstraintDescriptor readConstraint(ConstraintRule rule)\n+  {\n+    ConstraintDescriptor desc = rule.getConstraintDescriptor();\n+    switch (desc.type())\n     {\n-        return visitor;\n+      case EXISTS:\n+        return readNonStandardConstraint(rule, ERROR_MESSAGE_EXISTS);\n+      case UNIQUE_EXISTS:\n+        return readNonStandardConstraint(rule, ERROR_MESSAGE_NODE_KEY);\n+      default:\n+        return desc;\n     }\n+  }\n+\n+  protected ConstraintDescriptor readNonStandardConstraint(ConstraintRule rule, String errorMessage)\n+  {\n+    // When opening a store in Community Edition that contains a Property Existence Constraint\n+    throw new IllegalStateException(errorMessage);\n+  }\n+\n+  private CreateConstraintFailureException propertyExistenceConstraintsNotAllowed(SchemaDescriptor descriptor)\n+  {\n+    // When creating a Property Existence Constraint in Community Edition\n+    return new CreateConstraintFailureException(\n+        ConstraintDescriptorFactory.existsForSchema(descriptor), ERROR_MESSAGE_EXISTS);\n+  }\n+\n+  private CreateConstraintFailureException nodeKeyConstraintsNotAllowed(SchemaDescriptor descriptor)\n+  {\n+    // When creating a Node Key Constraint in Community Edition\n+    return new CreateConstraintFailureException(\n+        ConstraintDescriptorFactory.existsForSchema(descriptor), ERROR_MESSAGE_NODE_KEY);\n+  }\n+\n+  @Override\n+  public ConstraintRule createUniquenessConstraintRule(\n+      long ruleId, UniquenessConstraintDescriptor descriptor, long indexId)\n+  {\n+    return ConstraintRule.constraintRule(ruleId, descriptor, indexId);\n+  }\n+\n+  @Override\n+  public ConstraintRule createNodeKeyConstraintRule(\n+      long ruleId, NodeKeyConstraintDescriptor descriptor, long indexId) throws CreateConstraintFailureException\n+  {\n+    throw nodeKeyConstraintsNotAllowed(descriptor.schema());\n+  }\n+\n+  @Override\n+  public ConstraintRule createExistenceConstraint(long ruleId, ConstraintDescriptor descriptor)\n+      throws CreateConstraintFailureException\n+  {\n+    throw propertyExistenceConstraintsNotAllowed(descriptor.schema());\n+  }\n+\n+  @Override\n+  public TxStateVisitor decorateTxStateVisitor(StoreReadLayer storeLayer, ReadableTransactionState txState,\n+                                               TxStateVisitor visitor)\n+  {\n+    return visitor;\n+  }\n }\n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}