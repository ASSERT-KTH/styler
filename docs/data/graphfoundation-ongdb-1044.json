{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1044",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "214",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "251",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "276",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "451",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1044/ParameterConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1044/ParameterConverter.java\nindex 844484f8de3..d55742e0f08 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1044/ParameterConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1044/ParameterConverter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cypher.internal.codegen;\n \n import java.lang.reflect.Array;\n@@ -57,470 +58,465 @@ import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n  */\n class ParameterConverter implements AnyValueWriter<RuntimeException>\n {\n-    private final Deque<Writer> stack = new ArrayDeque<>();\n-    private final EmbeddedProxySPI proxySpi;\n-\n-    ParameterConverter( EmbeddedProxySPI proxySpi )\n-    {\n-        this.proxySpi = proxySpi;\n-        stack.push( new ObjectWriter() );\n-    }\n-\n-    public Object value()\n-    {\n-        assert stack.size() == 1;\n-        return stack.getLast().value();\n-    }\n-\n-    private void writeValue( Object value )\n-    {\n-        assert !stack.isEmpty();\n-        Writer head = stack.peek();\n-        head.write( value );\n-    }\n-\n-    @Override\n-    public void writeNodeReference( long nodeId )\n-    {\n-        writeValue( VirtualValues.node( nodeId ) );\n-    }\n-\n-    @Override\n-    public void writeNode( long nodeId, TextArray ignore, MapValue properties )\n-    {\n-        writeValue( VirtualValues.node( nodeId ) );\n-    }\n-\n-    @Override\n-    public void writeRelationshipReference( long relId )\n-    {\n-        writeValue( VirtualValues.relationship( relId ) );\n-    }\n-\n-    @Override\n-    public void writeRelationship( long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties )\n-    {\n-        writeValue( VirtualValues.relationship( relId ) );\n-    }\n-\n-    @Override\n-    public void beginMap( int size )\n-    {\n-        stack.push( new MapWriter( size ) );\n-    }\n-\n-    @Override\n-    public void endMap()\n-    {\n-        assert !stack.isEmpty();\n-        writeValue( stack.pop().value() );\n-    }\n-\n-    @Override\n-    public void beginList( int size )\n-    {\n-        stack.push( new ListWriter( size ) );\n-    }\n-\n-    @Override\n-    public void endList()\n-    {\n-        assert !stack.isEmpty();\n-        writeValue( stack.pop().value() );\n-    }\n-\n-    @Override\n-    public void writePath( NodeValue[] nodes, RelationshipValue[] relationships )\n-    {\n-        assert nodes != null;\n-        assert nodes.length > 0;\n-        assert relationships != null;\n-        assert nodes.length == relationships.length + 1;\n-\n-        Node[] nodeProxies = new Node[nodes.length];\n-        for ( int i = 0; i < nodes.length; i++ )\n+  private final Deque<Writer> stack = new ArrayDeque<>();\n+  private final EmbeddedProxySPI proxySpi;\n+\n+  ParameterConverter(EmbeddedProxySPI proxySpi)\n+  {\n+    this.proxySpi = proxySpi;\n+    stack.push(new ObjectWriter());\n+  }\n+\n+  public Object value()\n+  {\n+    assert stack.size() == 1;\n+    return stack.getLast().value();\n+  }\n+\n+  private void writeValue(Object value)\n+  {\n+    assert !stack.isEmpty();\n+    Writer head = stack.peek();\n+    head.write(value);\n+  }\n+\n+  @Override\n+  public void writeNodeReference(long nodeId)\n+  {\n+    writeValue(VirtualValues.node(nodeId));\n+  }\n+\n+  @Override\n+  public void writeNode(long nodeId, TextArray ignore, MapValue properties)\n+  {\n+    writeValue(VirtualValues.node(nodeId));\n+  }\n+\n+  @Override\n+  public void writeRelationshipReference(long relId)\n+  {\n+    writeValue(VirtualValues.relationship(relId));\n+  }\n+\n+  @Override\n+  public void writeRelationship(long relId, long startNodeId, long endNodeId, TextValue type, MapValue properties)\n+  {\n+    writeValue(VirtualValues.relationship(relId));\n+  }\n+\n+  @Override\n+  public void beginMap(int size)\n+  {\n+    stack.push(new MapWriter(size));\n+  }\n+\n+  @Override\n+  public void endMap()\n+  {\n+    assert !stack.isEmpty();\n+    writeValue(stack.pop().value());\n+  }\n+\n+  @Override\n+  public void beginList(int size)\n+  {\n+    stack.push(new ListWriter(size));\n+  }\n+\n+  @Override\n+  public void endList()\n+  {\n+    assert !stack.isEmpty();\n+    writeValue(stack.pop().value());\n+  }\n+\n+  @Override\n+  public void writePath(NodeValue[] nodes, RelationshipValue[] relationships)\n+  {\n+    assert nodes != null;\n+    assert nodes.length > 0;\n+    assert relationships != null;\n+    assert nodes.length == relationships.length + 1;\n+\n+    Node[] nodeProxies = new Node[nodes.length];\n+    for (int i = 0; i < nodes.length; i++)\n+    {\n+      nodeProxies[i] = proxySpi.newNodeProxy(nodes[i].id());\n+    }\n+    Relationship[] relationship = new Relationship[relationships.length];\n+    for (int i = 0; i < relationships.length; i++)\n+    {\n+      relationship[i] = proxySpi.newRelationshipProxy(relationships[i].id());\n+    }\n+    writeValue(new Path()\n+    {\n+      @Override\n+      public Node startNode()\n+      {\n+        return nodeProxies[0];\n+      }\n+\n+      @Override\n+      public Node endNode()\n+      {\n+        return nodeProxies[nodeProxies.length - 1];\n+      }\n+\n+      @Override\n+      public Relationship lastRelationship()\n+      {\n+        return relationship[relationship.length - 1];\n+      }\n+\n+      @Override\n+      public Iterable<Relationship> relationships()\n+      {\n+        return Arrays.asList(relationship);\n+      }\n+\n+      @Override\n+      public Iterable<Relationship> reverseRelationships()\n+      {\n+        return () -> new ReverseArrayIterator<>(relationship);\n+      }\n+\n+      @Override\n+      public Iterable<Node> nodes()\n+      {\n+        return Arrays.asList(nodeProxies);\n+      }\n+\n+      @Override\n+      public Iterable<Node> reverseNodes()\n+      {\n+        return () -> new ReverseArrayIterator<>(nodeProxies);\n+      }\n+\n+      @Override\n+      public int length()\n+      {\n+        return relationship.length;\n+      }\n+\n+      @Override\n+      public int hashCode()\n+      {\n+        if (relationship.length == 0)\n         {\n-            nodeProxies[i] = proxySpi.newNodeProxy( nodes[i].id() );\n-        }\n-        Relationship[] relationship = new Relationship[relationships.length];\n-        for ( int i = 0; i < relationships.length; i++ )\n+          return startNode().hashCode();\n+        } else\n         {\n-            relationship[i] = proxySpi.newRelationshipProxy( relationships[i].id() );\n+          return Arrays.hashCode(relationship);\n         }\n-        writeValue( new Path()\n-        {\n-            @Override\n-            public Node startNode()\n-            {\n-                return nodeProxies[0];\n-            }\n-\n-            @Override\n-            public Node endNode()\n-            {\n-                return nodeProxies[nodeProxies.length - 1];\n-            }\n-\n-            @Override\n-            public Relationship lastRelationship()\n-            {\n-                return relationship[relationship.length - 1];\n-            }\n+      }\n \n-            @Override\n-            public Iterable<Relationship> relationships()\n-            {\n-                return Arrays.asList( relationship );\n-            }\n-\n-            @Override\n-            public Iterable<Relationship> reverseRelationships()\n-            {\n-                return () -> new ReverseArrayIterator<>( relationship );\n-            }\n-\n-            @Override\n-            public Iterable<Node> nodes()\n-            {\n-                return Arrays.asList( nodeProxies );\n-            }\n-\n-            @Override\n-            public Iterable<Node> reverseNodes()\n-            {\n-                return () -> new ReverseArrayIterator<>( nodeProxies );\n-            }\n-\n-            @Override\n-            public int length()\n-            {\n-                return relationship.length;\n-            }\n+      @Override\n+      public boolean equals(Object obj)\n+      {\n+        if (this == obj)\n+        {\n+          return true;\n+        } else if (obj instanceof Path)\n+        {\n+          Path other = (Path) obj;\n+          return startNode().equals(other.startNode()) &&\n+              iteratorsEqual(this.relationships().iterator(), other.relationships().iterator());\n \n-            @Override\n-            public int hashCode()\n-            {\n-                if ( relationship.length == 0 )\n-                {\n-                    return startNode().hashCode();\n-                }\n-                else\n-                {\n-                    return Arrays.hashCode( relationship );\n-                }\n-            }\n+        } else\n+        {\n+          return false;\n+        }\n+      }\n \n-            @Override\n-            public boolean equals( Object obj )\n+      @Override\n+      public Iterator<PropertyContainer> iterator()\n+      {\n+        return new Iterator<PropertyContainer>()\n+        {\n+          Iterator<? extends PropertyContainer> current = nodes().iterator();\n+          Iterator<? extends PropertyContainer> next = relationships().iterator();\n+\n+          @Override\n+          public boolean hasNext()\n+          {\n+            return current.hasNext();\n+          }\n+\n+          @Override\n+          public PropertyContainer next()\n+          {\n+            try\n             {\n-                if ( this == obj )\n-                {\n-                    return true;\n-                }\n-                else if ( obj instanceof Path )\n-                {\n-                    Path other = (Path) obj;\n-                    return startNode().equals( other.startNode() ) &&\n-                           iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n-\n-                }\n-                else\n-                {\n-                    return false;\n-                }\n-            }\n-\n-            @Override\n-            public Iterator<PropertyContainer> iterator()\n+              return current.next();\n+            } finally\n             {\n-                return new Iterator<PropertyContainer>()\n-                {\n-                    Iterator<? extends PropertyContainer> current = nodes().iterator();\n-                    Iterator<? extends PropertyContainer> next = relationships().iterator();\n-\n-                    @Override\n-                    public boolean hasNext()\n-                    {\n-                        return current.hasNext();\n-                    }\n-\n-                    @Override\n-                    public PropertyContainer next()\n-                    {\n-                        try\n-                        {\n-                            return current.next();\n-                        }\n-                        finally\n-                        {\n-                            Iterator<? extends PropertyContainer> temp = current;\n-                            current = next;\n-                            next = temp;\n-                        }\n-                    }\n-\n-                    @Override\n-                    public void remove()\n-                    {\n-                        next.remove();\n-                    }\n-                };\n+              Iterator<? extends PropertyContainer> temp = current;\n+              current = next;\n+              next = temp;\n             }\n-        } );\n-    }\n-\n-    @Override\n-    public void writeNull()\n-    {\n-        writeValue( null );\n-    }\n-\n-    @Override\n-    public void writeBoolean( boolean value )\n-    {\n-        writeValue( value );\n-    }\n-\n-    @Override\n-    public void writeInteger( byte value )\n-    {\n-        writeValue( (long) value );\n-    }\n-\n-    @Override\n-    public void writeInteger( short value )\n-    {\n-        writeValue( (long) value );\n-    }\n-\n-    @Override\n-    public void writeInteger( int value )\n-    {\n-        writeValue( (long) value );\n-    }\n-\n-    @Override\n-    public void writeInteger( long value )\n-    {\n-        writeValue( value );\n-    }\n-\n-    @Override\n-    public void writeFloatingPoint( float value )\n-    {\n-        writeValue( (double) value );\n-    }\n-\n-    @Override\n-    public void writeFloatingPoint( double value )\n-    {\n-        writeValue( value );\n-    }\n+          }\n+\n+          @Override\n+          public void remove()\n+          {\n+            next.remove();\n+          }\n+        };\n+      }\n+    });\n+  }\n+\n+  @Override\n+  public void writeNull()\n+  {\n+    writeValue(null);\n+  }\n+\n+  @Override\n+  public void writeBoolean(boolean value)\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeInteger(byte value)\n+  {\n+    writeValue((long) value);\n+  }\n+\n+  @Override\n+  public void writeInteger(short value)\n+  {\n+    writeValue((long) value);\n+  }\n+\n+  @Override\n+  public void writeInteger(int value)\n+  {\n+    writeValue((long) value);\n+  }\n+\n+  @Override\n+  public void writeInteger(long value)\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(float value)\n+  {\n+    writeValue((double) value);\n+  }\n+\n+  @Override\n+  public void writeFloatingPoint(double value)\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeString(String value)\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writeString(char value)\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void beginArray(int size, ArrayType arrayType)\n+  {\n+    stack.push(new ArrayWriter(size, arrayType));\n+  }\n+\n+  @Override\n+  public void endArray()\n+  {\n+    assert !stack.isEmpty();\n+    writeValue(stack.pop().value());\n+  }\n+\n+  @Override\n+  public void writeByteArray(byte[] value)\n+  {\n+    writeValue(value);\n+  }\n+\n+  @Override\n+  public void writePoint(CoordinateReferenceSystem crs, double[] coordinate)\n+  {\n+    writeValue(Values.pointValue(crs, coordinate));\n+  }\n+\n+  @Override\n+  public void writeDuration(long months, long days, long seconds, int nanos)\n+  {\n+    writeValue(DurationValue.duration(months, days, seconds, nanos));\n+  }\n+\n+  @Override\n+  public void writeDate(LocalDate localDate)\n+  {\n+    writeValue(localDate);\n+  }\n+\n+  @Override\n+  public void writeLocalTime(LocalTime localTime)\n+  {\n+    writeValue(localTime);\n+  }\n+\n+  @Override\n+  public void writeTime(OffsetTime offsetTime)\n+  {\n+    writeValue(offsetTime);\n+  }\n+\n+  @Override\n+  public void writeLocalDateTime(LocalDateTime localDateTime)\n+  {\n+    writeValue(localDateTime);\n+  }\n+\n+  @Override\n+  public void writeDateTime(ZonedDateTime zonedDateTime)\n+  {\n+    writeValue(zonedDateTime);\n+  }\n+\n+  private interface Writer\n+  {\n+    void write(Object value);\n+\n+    Object value();\n+  }\n+\n+  private static class ObjectWriter implements Writer\n+  {\n+    private Object value;\n \n     @Override\n-    public void writeString( String value )\n+    public void write(Object value)\n     {\n-        writeValue( value );\n+      this.value = value;\n     }\n \n     @Override\n-    public void writeString( char value )\n+    public Object value()\n     {\n-        writeValue( value );\n+      return value;\n     }\n+  }\n \n-    @Override\n-    public void beginArray( int size, ArrayType arrayType )\n-    {\n-        stack.push( new ArrayWriter( size, arrayType ) );\n-    }\n+  private static class MapWriter implements Writer\n+  {\n+    private String key;\n+    private boolean isKey = true;\n+    private final HashMap<String, Object> map;\n \n-    @Override\n-    public void endArray()\n+    MapWriter(int size)\n     {\n-        assert !stack.isEmpty();\n-        writeValue( stack.pop().value() );\n+      this.map = new HashMap<>(size);\n     }\n \n     @Override\n-    public void writeByteArray( byte[] value )\n+    public void write(Object value)\n     {\n-        writeValue( value );\n+      if (isKey)\n+      {\n+        key = (String) value;\n+        isKey = false;\n+      } else\n+      {\n+        map.put(key, value);\n+        isKey = true;\n+      }\n     }\n \n     @Override\n-    public void writePoint( CoordinateReferenceSystem crs, double[] coordinate )\n+    public Object value()\n     {\n-        writeValue( Values.pointValue( crs, coordinate ) );\n+      return map;\n+    }\n+  }\n+\n+  private static class ArrayWriter implements Writer\n+  {\n+    protected final Object array;\n+    private int index;\n+\n+    ArrayWriter(int size, ArrayType arrayType)\n+    {\n+      switch (arrayType)\n+      {\n+        case SHORT:\n+          this.array = Array.newInstance(short.class, size);\n+          break;\n+        case INT:\n+          this.array = Array.newInstance(int.class, size);\n+          break;\n+        case BYTE:\n+          this.array = Array.newInstance(byte.class, size);\n+          break;\n+        case LONG:\n+          this.array = Array.newInstance(long.class, size);\n+          break;\n+        case FLOAT:\n+          this.array = Array.newInstance(float.class, size);\n+          break;\n+        case DOUBLE:\n+          this.array = Array.newInstance(double.class, size);\n+          break;\n+        case BOOLEAN:\n+          this.array = Array.newInstance(boolean.class, size);\n+          break;\n+        case STRING:\n+          this.array = Array.newInstance(String.class, size);\n+          break;\n+        case CHAR:\n+          this.array = Array.newInstance(char.class, size);\n+          break;\n+        default:\n+          this.array = new Object[size];\n+      }\n     }\n \n     @Override\n-    public void writeDuration( long months, long days, long seconds, int nanos )\n+    public void write(Object value)\n     {\n-        writeValue( DurationValue.duration( months, days, seconds, nanos ) );\n+      Array.set(array, index, value);\n+      index++;\n     }\n \n     @Override\n-    public void writeDate( LocalDate localDate )\n+    public Object value()\n     {\n-        writeValue( localDate );\n+      return array;\n     }\n+  }\n \n-    @Override\n-    public void writeLocalTime( LocalTime localTime )\n-    {\n-        writeValue( localTime );\n-    }\n+  private static class ListWriter implements Writer\n+  {\n+    private final List<Object> list;\n \n-    @Override\n-    public void writeTime( OffsetTime offsetTime )\n+    ListWriter(int size)\n     {\n-        writeValue( offsetTime );\n+      this.list = new ArrayList<>(size);\n     }\n \n     @Override\n-    public void writeLocalDateTime( LocalDateTime localDateTime )\n+    public void write(Object value)\n     {\n-        writeValue( localDateTime );\n+      list.add(value);\n     }\n \n     @Override\n-    public void writeDateTime( ZonedDateTime zonedDateTime )\n-    {\n-        writeValue( zonedDateTime );\n-    }\n-\n-    private interface Writer\n-    {\n-        void write( Object value );\n-\n-        Object value();\n-    }\n-\n-    private static class ObjectWriter implements Writer\n-    {\n-        private Object value;\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            this.value = value;\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return value;\n-        }\n-    }\n-\n-    private static class MapWriter implements Writer\n-    {\n-        private String key;\n-        private boolean isKey = true;\n-        private final HashMap<String,Object> map;\n-\n-        MapWriter( int size )\n-        {\n-            this.map = new HashMap<>( size );\n-        }\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            if ( isKey )\n-            {\n-                key = (String) value;\n-                isKey = false;\n-            }\n-            else\n-            {\n-                map.put( key, value );\n-                isKey = true;\n-            }\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return map;\n-        }\n-    }\n-\n-    private static class ArrayWriter implements Writer\n-    {\n-        protected final Object array;\n-        private int index;\n-\n-        ArrayWriter( int size, ArrayType arrayType )\n-        {\n-            switch ( arrayType )\n-            {\n-            case SHORT:\n-                this.array = Array.newInstance( short.class, size );\n-                break;\n-            case INT:\n-                this.array = Array.newInstance( int.class, size );\n-                break;\n-            case BYTE:\n-                this.array = Array.newInstance( byte.class, size );\n-                break;\n-            case LONG:\n-                this.array = Array.newInstance( long.class, size );\n-                break;\n-            case FLOAT:\n-                this.array = Array.newInstance( float.class, size );\n-                break;\n-            case DOUBLE:\n-                this.array = Array.newInstance( double.class, size );\n-                break;\n-            case BOOLEAN:\n-                this.array = Array.newInstance( boolean.class, size );\n-                break;\n-            case STRING:\n-                this.array = Array.newInstance( String.class, size );\n-                break;\n-            case CHAR:\n-                this.array = Array.newInstance( char.class, size );\n-                break;\n-            default:\n-                this.array = new Object[size];\n-            }\n-        }\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            Array.set( array, index, value );\n-            index++;\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return array;\n-        }\n-    }\n-\n-    private static class ListWriter implements Writer\n+    public Object value()\n     {\n-        private final List<Object> list;\n-\n-        ListWriter( int size )\n-        {\n-            this.list = new ArrayList<>( size );\n-        }\n-\n-        @Override\n-        public void write( Object value )\n-        {\n-            list.add( value );\n-        }\n-\n-        @Override\n-        public Object value()\n-        {\n-            return list;\n-        }\n+      return list;\n     }\n+  }\n }\n",
            "diff_size": 643
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "136",
                    "column": "28",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1044/ParameterConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1044/ParameterConverter.java\nindex 844484f8de3..570d7857447 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1044/ParameterConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1044/ParameterConverter.java\n@@ -133,7 +133,7 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>\n     public void writePath( NodeValue[] nodes, RelationshipValue[] relationships )\n     {\n         assert nodes != null;\n-        assert nodes.length > 0;\n+        assert nodes.length> 0;\n         assert relationships != null;\n         assert nodes.length == relationships.length + 1;\n \n@@ -142,12 +142,14 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>\n         {\n             nodeProxies[i] = proxySpi.newNodeProxy( nodes[i].id() );\n         }\n-        Relationship[] relationship = new Relationship[relationships.length];\n+\n+Relationship[] relationship = new Relationship[relationships.length];\n         for ( int i = 0; i < relationships.length; i++ )\n         {\n             relationship[i] = proxySpi.newRelationshipProxy( relationships[i].id() );\n         }\n-        writeValue( new Path()\n+\n+writeValue( new Path()\n         {\n             @Override\n             public Node startNode()\n@@ -220,10 +222,8 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>\n                 else if ( obj instanceof Path )\n                 {\n                     Path other = (Path) obj;\n-                    return startNode().equals( other.startNode() ) &&\n-                           iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n-\n-                }\n+                    return startNode().equals( other.startNode() ) && iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n+    }\n                 else\n                 {\n                     return false;\n@@ -393,8 +393,7 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>\n     private interface Writer\n     {\n         void write( Object value );\n-\n-        Object value();\n+Object value();\n     }\n \n     private static class ObjectWriter implements Writer\n@@ -523,4 +522,4 @@ class ParameterConverter implements AnyValueWriter<RuntimeException>\n             return list;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}