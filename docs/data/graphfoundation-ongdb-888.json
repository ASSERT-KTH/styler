{
    "project_name": "graphfoundation-ongdb",
    "error_id": "888",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/888/SpaceFillingCurveConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/888/SpaceFillingCurveConfiguration.java\nindex 3878ea60c21..151f6cdbeb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/888/SpaceFillingCurveConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/888/SpaceFillingCurveConfiguration.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.gis.spatial.index.curves;\n \n import org.neo4j.gis.spatial.index.Envelope;\n@@ -29,30 +30,30 @@ import org.neo4j.gis.spatial.index.Envelope;\n  */\n public interface SpaceFillingCurveConfiguration\n {\n-    /**\n-     * Decides whether to stop at this depth or recurse deeper.\n-     *\n-     * @param overlap the overlap between search space and the current extent\n-     * @param depth the current recursion depth\n-     * @param maxDepth the maximum depth that was calculated to recurse to,\n-     * @return if the algorithm should recurse deeper, returns {@code false}; if the algorithm\n-     * should stop at this depth, returns {@code true}\n-     */\n-    boolean stopAtThisDepth( double overlap, int depth, int maxDepth );\n+  /**\n+   * Decides whether to stop at this depth or recurse deeper.\n+   *\n+   * @param overlap  the overlap between search space and the current extent\n+   * @param depth    the current recursion depth\n+   * @param maxDepth the maximum depth that was calculated to recurse to,\n+   * @return if the algorithm should recurse deeper, returns {@code false}; if the algorithm\n+   * should stop at this depth, returns {@code true}\n+   */\n+  boolean stopAtThisDepth(double overlap, int depth, int maxDepth);\n \n-    /**\n-     * Decide how deep to recurse at max.\n-     *\n-     * @param referenceEnvelope the envelope describing the search area\n-     * @param range the envelope describing the indexed area\n-     * @param nbrDim the number of dimensions\n-     * @param maxLevel the depth of the spaceFillingCurve\n-     * @return the maximum depth to which the algorithm should recurse in the space filling curve.\n-     */\n-    int maxDepth( Envelope referenceEnvelope, Envelope range, int nbrDim, int maxLevel );\n+  /**\n+   * Decide how deep to recurse at max.\n+   *\n+   * @param referenceEnvelope the envelope describing the search area\n+   * @param range             the envelope describing the indexed area\n+   * @param nbrDim            the number of dimensions\n+   * @param maxLevel          the depth of the spaceFillingCurve\n+   * @return the maximum depth to which the algorithm should recurse in the space filling curve.\n+   */\n+  int maxDepth(Envelope referenceEnvelope, Envelope range, int nbrDim, int maxLevel);\n \n-    /**\n-     * @return the size to use when initializing the ArrayList to store ranges.\n-     */\n-    int initialRangesListCapacity();\n+  /**\n+   * @return the size to use when initializing the ArrayList to store ranges.\n+   */\n+  int initialRangesListCapacity();\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/888/SpaceFillingCurveConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/888/SpaceFillingCurveConfiguration.java\nindex 3878ea60c21..cd4688bdff7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/888/SpaceFillingCurveConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/888/SpaceFillingCurveConfiguration.java\n@@ -55,4 +55,4 @@ public interface SpaceFillingCurveConfiguration\n      * @return the size to use when initializing the ArrayList to store ranges.\n      */\n     int initialRangesListCapacity();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}