{
    "project_name": "ibinti-bugvm",
    "error_id": "172",
    "information": {
        "errors": [
            {
                "line": "56",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 81).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     *         {@code ==} operator for all but the floating point type, so the\n     *         implementation may as well use {@code ==} in these cases for\n     *         performance reasons. Only for the {@code float} and {@code double}\n     *         types the result will be slightly different: {@code NaN} is equal\n     *         to {@code NaN}, and {@code -0.0} is equal to {@code 0.0}, both of\n     *         which is normally not the case.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/172/Annotation.java\nindex 29220938f46..360e71fde8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/172/Annotation.java\n@@ -27,99 +27,97 @@ package java.lang.annotation;\n  */\n public interface Annotation {\n \n-    /**\n-     * Returns the type of this annotation.\n-     *\n-     * @return A {@code Class} instance representing the annotation type.\n-     */\n-    Class<? extends Annotation> annotationType();\n+  /**\n+   * Returns the type of this annotation.\n+   *\n+   * @return A {@code Class} instance representing the annotation type.\n+   */\n+  Class<? extends Annotation> annotationType();\n \n-    /**\n-     * Determines whether or not this annotation is equivalent to the annotation\n-     * passed. This is determined according to the following rules:\n-     *\n-     * <ul>\n-     *     <li>\n-     *         Two annotations {@code x} and {@code y} are equal if and only if\n-     *         they are members of the same annotation type and all the member\n-     *         values of {@code x} are equal to the corresponding member values\n-     *         of {@code y}.\n-     *     </li>\n-     *     <li>\n-     *         The equality of primitive member values {@code x} and {@code y}\n-     *         is determined (in a way similar to) using the corresponding\n-     *         wrapper classes. For example,\n-     *         {@code Integer.valueOf(x).equals(Integer.valueOf(y)} is used for\n-     *         {@code int} values. Note: The behavior is identical to the\n-     *         {@code ==} operator for all but the floating point type, so the\n-     *         implementation may as well use {@code ==} in these cases for\n-     *         performance reasons. Only for the {@code float} and {@code double}\n-     *         types the result will be slightly different: {@code NaN} is equal\n-     *         to {@code NaN}, and {@code -0.0} is equal to {@code 0.0}, both of\n-     *         which is normally not the case.\n-     *     </li>\n-     *     <li>\n-     *         The equality of two array member values {@code x} and {@code y}\n-     *         is determined using the corresponding {@code equals(x, y)}\n-     *         helper function in {@link java.util.Arrays}.\n-     *     </li>\n-     *     <li>\n-     *         The hash code for all other member values is determined by simply\n-     *         calling their {@code equals()} method.\n-     *     </li>\n-     * </ul>\n-     *\n-     * @param obj\n-     *            The object to compare to.\n-     *\n-     * @return {@code true} if {@code obj} is equal to this annotation,\n-     *            {@code false} otherwise.\n-     */\n-    boolean equals(Object obj);\n+  /**\n+   * Determines whether or not this annotation is equivalent to the annotation\n+   * passed. This is determined according to the following rules:\n+   *\n+   * <ul>\n+   *     <li>\n+   *         Two annotations {@code x} and {@code y} are equal if and only if\n+   *         they are members of the same annotation type and all the member\n+   *         values of {@code x} are equal to the corresponding member values\n+   *         of {@code y}.\n+   *     </li>\n+   *     <li>\n+   *         The equality of primitive member values {@code x} and {@code y}\n+   *         is determined (in a way similar to) using the corresponding\n+   *         wrapper classes. For example,\n+   *         {@code Integer.valueOf(x).equals(Integer.valueOf(y)} is used for\n+   *         {@code int} values. Note: The behavior is identical to the\n+   *         {@code ==} operator for all but the floating point type, so the\n+   *         implementation may as well use {@code ==} in these cases for\n+   *         performance reasons. Only for the {@code float} and {@code double}\n+   *         types the result will be slightly different: {@code NaN} is equal\n+   *         to {@code NaN}, and {@code -0.0} is equal to {@code 0.0}, both of\n+   *         which is normally not the case.\n+   *     </li>\n+   *     <li>\n+   *         The equality of two array member values {@code x} and {@code y}\n+   *         is determined using the corresponding {@code equals(x, y)}\n+   *         helper function in {@link java.util.Arrays}.\n+   *     </li>\n+   *     <li>\n+   *         The hash code for all other member values is determined by simply\n+   *         calling their {@code equals()} method.\n+   *     </li>\n+   * </ul>\n+   *\n+   * @param obj The object to compare to.\n+   * @return {@code true} if {@code obj} is equal to this annotation,\n+   * {@code false} otherwise.\n+   */\n+  boolean equals(Object obj);\n \n-    /**\n-     * Returns the hash code of this annotation. The hash code is determined\n-     * according to the following rules:\n-     *\n-     * <ul>\n-     *     <li>\n-     *         The hash code of an annotation is the sum of the hash codes of\n-     *         its annotation members.\n-     *     </li>\n-     *     <li>\n-     *         The hash code of an annotation member is calculated as {@code\n-     *         (0x7f * n.hashCode()) ^ v.hashCode())}, where {@code n} is the\n-     *         name of the member (as a {@code String}) and {@code v} its value.\n-     *     </li>\n-     *     <li>\n-     *         The hash code for a primitive member value is determined using\n-     *         the corresponding wrapper type. For example, {@code\n-     *         Integer.valueOf(v).hashCode()} is used for an {@code int} value\n-     *         {@code v}.\n-     *     </li>\n-     *     <li>\n-     *         The hash code for an array member value {@code v} is determined\n-     *         using the corresponding {@code hashCode(v)} helper function in\n-     *         {@link java.util.Arrays}.\n-     *     </li>\n-     *     <li>\n-     *         The hash code for all other member values is determined by simply\n-     *         calling their {@code hashCode} method.\n-     *     </li>\n-     * </ul>\n-     *\n-     * @return the hash code.\n-     */\n-    int hashCode();\n+  /**\n+   * Returns the hash code of this annotation. The hash code is determined\n+   * according to the following rules:\n+   *\n+   * <ul>\n+   *     <li>\n+   *         The hash code of an annotation is the sum of the hash codes of\n+   *         its annotation members.\n+   *     </li>\n+   *     <li>\n+   *         The hash code of an annotation member is calculated as {@code\n+   *         (0x7f * n.hashCode()) ^ v.hashCode())}, where {@code n} is the\n+   *         name of the member (as a {@code String}) and {@code v} its value.\n+   *     </li>\n+   *     <li>\n+   *         The hash code for a primitive member value is determined using\n+   *         the corresponding wrapper type. For example, {@code\n+   *         Integer.valueOf(v).hashCode()} is used for an {@code int} value\n+   *         {@code v}.\n+   *     </li>\n+   *     <li>\n+   *         The hash code for an array member value {@code v} is determined\n+   *         using the corresponding {@code hashCode(v)} helper function in\n+   *         {@link java.util.Arrays}.\n+   *     </li>\n+   *     <li>\n+   *         The hash code for all other member values is determined by simply\n+   *         calling their {@code hashCode} method.\n+   *     </li>\n+   * </ul>\n+   *\n+   * @return the hash code.\n+   */\n+  int hashCode();\n \n-    /**\n-     * Returns a {@code String} representation of this annotation. It is not\n-     * strictly defined what the representation has to look like, but it usually\n-     * consists of the name of the annotation, preceded by a \"@\". If the\n-     * annotation contains field members, their names and values are also\n-     * included in the result.\n-     *\n-     * @return the {@code String} that represents this annotation.\n-     */\n-    String toString();\n+  /**\n+   * Returns a {@code String} representation of this annotation. It is not\n+   * strictly defined what the representation has to look like, but it usually\n+   * consists of the name of the annotation, preceded by a \"@\". If the\n+   * annotation contains field members, their names and values are also\n+   * included in the result.\n+   *\n+   * @return the {@code String} that represents this annotation.\n+   */\n+  String toString();\n }\n",
            "diff_size": 92
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/172/Annotation.java\nindex 29220938f46..1acf08f0605 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/172/Annotation.java\n@@ -122,4 +122,4 @@ public interface Annotation {\n      * @return the {@code String} that represents this annotation.\n      */\n     String toString();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/172/Annotation.java\nindex 29220938f46..a11cd4a5a8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/172/Annotation.java\n@@ -25,6 +25,8 @@ package java.lang.annotation;\n  *\n  * @since 1.5\n  */\n+\n+\n public interface Annotation {\n \n     /**\n@@ -32,6 +34,8 @@ public interface Annotation {\n      *\n      * @return A {@code Class} instance representing the annotation type.\n      */\n+\n+\n     Class<? extends Annotation> annotationType();\n \n     /**\n@@ -75,6 +79,8 @@ public interface Annotation {\n      * @return {@code true} if {@code obj} is equal to this annotation,\n      *            {@code false} otherwise.\n      */\n+\n+\n     boolean equals(Object obj);\n \n     /**\n@@ -110,6 +116,8 @@ public interface Annotation {\n      *\n      * @return the hash code.\n      */\n+\n+\n     int hashCode();\n \n     /**\n@@ -121,5 +129,8 @@ public interface Annotation {\n      *\n      * @return the {@code String} that represents this annotation.\n      */\n+\n+\n     String toString();\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/styler_three_grams/172/Annotation.java\nindex 29220938f46..9198d225c9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/172/Annotation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/styler_three_grams/172/Annotation.java\n@@ -33,7 +33,6 @@ public interface Annotation {\n      * @return A {@code Class} instance representing the annotation type.\n      */\n     Class<? extends Annotation> annotationType();\n-\n     /**\n      * Determines whether or not this annotation is equivalent to the annotation\n      * passed. This is determined according to the following rules:\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}