{
    "project_name": "Qihoo360-Quicksql",
    "error_id": "108",
    "information": {
        "errors": [
            {
                "line": "25",
                "column": "33",
                "severity": "error",
                "message": "'}' at column 33 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public void prepareQuery() {}\n\n    //remember to remove temporary files after computing in hdfs or local machine\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/108/SparkJdbcGenerator.java\nindex 1d82fc08ce7..c191b63435f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler/108/SparkJdbcGenerator.java\n@@ -22,7 +22,8 @@ public class SparkJdbcGenerator extends QueryGenerator {\n     }\n \n     @Override\n-    public void prepareQuery() {}\n+    public void prepareQuery() {\n+    }\n \n     //remember to remove temporary files after computing in hdfs or local machine\n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/108/SparkJdbcGenerator.java\nindex 1d82fc08ce7..f940e46d6f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/intellij/108/SparkJdbcGenerator.java\n@@ -22,7 +22,8 @@ public class SparkJdbcGenerator extends QueryGenerator {\n     }\n \n     @Override\n-    public void prepareQuery() {}\n+    public void prepareQuery() {\n+    }\n \n     //remember to remove temporary files after computing in hdfs or local machine\n     @Override\n@@ -31,7 +32,7 @@ public class SparkJdbcGenerator extends QueryGenerator {\n         Invoker config = Invoker.registerMethod(\"SparkJdbcGenerator.config\");\n         String invokeWrap = config.invoke(convertProperties(\"jdbcUser\", \"jdbcPassword\", \"jdbcDriver\"));\n         String invoked = String.format(\"tmp = spark.read().jdbc(\\\"%s\\\", \\\"%s\\\", %s);\",\n-                properties.getOrDefault(\"jdbcUrl\", \"\"),\n+            properties.getOrDefault(\"jdbcUrl\", \"\"),\n             \"(\" + query + \") as \" + tableName, invokeWrap);\n         composer.handleComposition(ClassBodyComposer.CodeCategory.SENTENCE, invoked);\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'\"(\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/naturalize/108/SparkJdbcGenerator.java\nindex 1d82fc08ce7..654c6d582bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/naturalize/108/SparkJdbcGenerator.java\n@@ -22,7 +22,9 @@ public class SparkJdbcGenerator extends QueryGenerator {\n     }\n \n     @Override\n-    public void prepareQuery() {}\n+    public void prepareQuery() {\n+\n+}\n \n     //remember to remove temporary files after computing in hdfs or local machine\n     @Override\n@@ -32,7 +34,7 @@ public class SparkJdbcGenerator extends QueryGenerator {\n         String invokeWrap = config.invoke(convertProperties(\"jdbcUser\", \"jdbcPassword\", \"jdbcDriver\"));\n         String invoked = String.format(\"tmp = spark.read().jdbc(\\\"%s\\\", \\\"%s\\\", %s);\",\n                 properties.getOrDefault(\"jdbcUrl\", \"\"),\n-            \"(\" + query + \") as \" + tableName, invokeWrap);\n+    \"(\" + query + \") as \" + tableName, invokeWrap);\n         composer.handleComposition(ClassBodyComposer.CodeCategory.SENTENCE, invoked);\n     }\n \n@@ -52,4 +54,4 @@ public class SparkJdbcGenerator extends QueryGenerator {\n         properties.put(\"driver\", driver);\n         return properties;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/108/SparkJdbcGenerator.java\nindex 1d82fc08ce7..55b1d06b61e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/codebuff/108/SparkJdbcGenerator.java\n@@ -8,6 +8,8 @@ import java.util.Properties;\n  * Code generator, used when {@link com.qihoo.qsql.exec.spark.SparkPipeline} is chosen and source\n  * data of query is in MySql at the same time.\n  */\n+\n+\n public class SparkJdbcGenerator extends QueryGenerator {\n \n     @Override\n@@ -22,17 +24,21 @@ public class SparkJdbcGenerator extends QueryGenerator {\n     }\n \n     @Override\n-    public void prepareQuery() {}\n+    public void prepareQuery() {\n+\n+    }\n \n     //remember to remove temporary files after computing in hdfs or local machine\n+\n     @Override\n     public void executeQuery() {\n         //TODO change to generate invoking from reflection\n         Invoker config = Invoker.registerMethod(\"SparkJdbcGenerator.config\");\n         String invokeWrap = config.invoke(convertProperties(\"jdbcUser\", \"jdbcPassword\", \"jdbcDriver\"));\n         String invoked = String.format(\"tmp = spark.read().jdbc(\\\"%s\\\", \\\"%s\\\", %s);\",\n-                properties.getOrDefault(\"jdbcUrl\", \"\"),\n-            \"(\" + query + \") as \" + tableName, invokeWrap);\n+                                       properties.getOrDefault(\"jdbcUrl\", \"\"),\n+                                       \"(\" + query + \") as \" + tableName,\n+                                       invokeWrap);\n         composer.handleComposition(ClassBodyComposer.CodeCategory.SENTENCE, invoked);\n     }\n \n@@ -45,6 +51,7 @@ public class SparkJdbcGenerator extends QueryGenerator {\n     /**\n      * .\n      */\n+\n     public static Properties config(String user, String password, String driver) {\n         Properties properties = new Properties();\n         properties.put(\"user\", user);\n@@ -52,4 +59,4 @@ public class SparkJdbcGenerator extends QueryGenerator {\n         properties.put(\"driver\", driver);\n         return properties;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_random/108/SparkJdbcGenerator.java\nindex 1d82fc08ce7..c191b63435f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/errored/1/108/SparkJdbcGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Qihoo360-Quicksql/styler_random/108/SparkJdbcGenerator.java\n@@ -22,7 +22,8 @@ public class SparkJdbcGenerator extends QueryGenerator {\n     }\n \n     @Override\n-    public void prepareQuery() {}\n+    public void prepareQuery() {\n+    }\n \n     //remember to remove temporary files after computing in hdfs or local machine\n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "25",
                    "column": "33",
                    "severity": "error",
                    "message": "'}' at column 33 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}