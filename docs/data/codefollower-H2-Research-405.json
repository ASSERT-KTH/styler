{
    "project_name": "codefollower-H2-Research",
    "error_id": "405",
    "information": {
        "errors": [
            {
                "line": "107",
                "column": "28",
                "severity": "warning",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            // their associated tables, and we will ignore the problematic ones\n            // that belong to session-local temp tables.\n            if (!((Sequence)obj).getBelongsToTable()) {\n                list.add(obj);\n            }\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/405/DropDatabase.java\nindex 7408368de54..6e6cceeb69f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/405/DropDatabase.java\n@@ -104,7 +104,7 @@ public class DropDatabase extends DefineCommand {\n             // ignore these. the ones we want to drop will get dropped when we drop\n             // their associated tables, and we will ignore the problematic ones\n             // that belong to session-local temp tables.\n-            if (!((Sequence)obj).getBelongsToTable()) {\n+            if (!((Sequence) obj).getBelongsToTable()) {\n                 list.add(obj);\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/405/DropDatabase.java\nindex 7408368de54..772e5487c6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/405/DropDatabase.java\n@@ -3,9 +3,11 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import java.util.ArrayList;\n+\n import org.h2.command.CommandInterface;\n import org.h2.engine.Database;\n import org.h2.engine.DbObject;\n@@ -25,137 +27,137 @@ import org.h2.util.New;\n  */\n public class DropDatabase extends DefineCommand {\n \n-    private boolean dropAllObjects;\n-    private boolean deleteFiles;\n+  private boolean dropAllObjects;\n+  private boolean deleteFiles;\n \n-    public DropDatabase(Session session) {\n-        super(session);\n-    }\n+  public DropDatabase(Session session) {\n+    super(session);\n+  }\n \n-    @Override\n-    public int update() {\n-        if (dropAllObjects) {\n-            dropAllObjects();\n-        }\n-        if (deleteFiles) {\n-            session.getDatabase().setDeleteFilesOnDisconnect(true);\n-        }\n-        return 0;\n+  @Override\n+  public int update() {\n+    if (dropAllObjects) {\n+      dropAllObjects();\n     }\n+    if (deleteFiles) {\n+      session.getDatabase().setDeleteFilesOnDisconnect(true);\n+    }\n+    return 0;\n+  }\n \n-    private void dropAllObjects() {\n-        session.getUser().checkAdmin();\n-        session.commit(true);\n-        Database db = session.getDatabase();\n-        db.lockMeta(session);\n-\n-        // There can be dependencies between tables e.g. using computed columns,\n-        // so we might need to loop over them multiple times.\n-        boolean runLoopAgain;\n-        do {\n-            ArrayList<Table> tables = db.getAllTablesAndViews(false);\n-            ArrayList<Table> toRemove = New.arrayList();\n-            for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.VIEW == t.getTableType()) {\n-                    toRemove.add(t);\n-                }\n-            }\n-            for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.TABLE_LINK == t.getTableType()) {\n-                    toRemove.add(t);\n-                }\n-            }\n-            for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.TABLE == t.getTableType() &&\n-                        !t.isHidden()) {\n-                    toRemove.add(t);\n-                }\n-            }\n-            for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.EXTERNAL_TABLE_ENGINE == t.getTableType() &&\n-                        !t.isHidden()) {\n-                    toRemove.add(t);\n-                }\n-            }\n-            runLoopAgain = false;\n-            for (Table t : toRemove) {\n-                if (t.getName() == null) {\n-                    // ignore, already dead\n-                } else if (db.getDependentTable(t, t) == null) {\n-                    db.removeSchemaObject(session, t);\n-                } else {\n-                    runLoopAgain = true;\n-                }\n-            }\n-        } while (runLoopAgain);\n+  private void dropAllObjects() {\n+    session.getUser().checkAdmin();\n+    session.commit(true);\n+    Database db = session.getDatabase();\n+    db.lockMeta(session);\n \n-        // TODO session-local temp tables are not removed\n-        for (Schema schema : db.getAllSchemas()) {\n-            if (schema.canDrop()) {\n-                db.removeDatabaseObject(session, schema);\n-            }\n+    // There can be dependencies between tables e.g. using computed columns,\n+    // so we might need to loop over them multiple times.\n+    boolean runLoopAgain;\n+    do {\n+      ArrayList<Table> tables = db.getAllTablesAndViews(false);\n+      ArrayList<Table> toRemove = New.arrayList();\n+      for (Table t : tables) {\n+        if (t.getName() != null &&\n+            TableType.VIEW == t.getTableType()) {\n+          toRemove.add(t);\n         }\n-        ArrayList<SchemaObject> list = New.arrayList();\n-        for (SchemaObject obj : db.getAllSchemaObjects(DbObject.SEQUENCE))  {\n-            // ignore these. the ones we want to drop will get dropped when we drop\n-            // their associated tables, and we will ignore the problematic ones\n-            // that belong to session-local temp tables.\n-            if (!((Sequence)obj).getBelongsToTable()) {\n-                list.add(obj);\n-            }\n+      }\n+      for (Table t : tables) {\n+        if (t.getName() != null &&\n+            TableType.TABLE_LINK == t.getTableType()) {\n+          toRemove.add(t);\n         }\n-        // maybe constraints and triggers on system tables will be allowed in\n-        // the future\n-        list.addAll(db.getAllSchemaObjects(DbObject.CONSTRAINT));\n-        list.addAll(db.getAllSchemaObjects(DbObject.TRIGGER));\n-        list.addAll(db.getAllSchemaObjects(DbObject.CONSTANT));\n-        list.addAll(db.getAllSchemaObjects(DbObject.FUNCTION_ALIAS));\n-        for (SchemaObject obj : list) {\n-            if (obj.isHidden()) {\n-                continue;\n-            }\n-            db.removeSchemaObject(session, obj);\n+      }\n+      for (Table t : tables) {\n+        if (t.getName() != null &&\n+            TableType.TABLE == t.getTableType() &&\n+            !t.isHidden()) {\n+          toRemove.add(t);\n         }\n-        for (User user : db.getAllUsers()) {\n-            if (user != session.getUser()) {\n-                db.removeDatabaseObject(session, user);\n-            }\n+      }\n+      for (Table t : tables) {\n+        if (t.getName() != null &&\n+            TableType.EXTERNAL_TABLE_ENGINE == t.getTableType() &&\n+            !t.isHidden()) {\n+          toRemove.add(t);\n         }\n-        for (Role role : db.getAllRoles()) {\n-            String sql = role.getCreateSQL();\n-            // the role PUBLIC must not be dropped\n-            if (sql != null) {\n-                db.removeDatabaseObject(session, role);\n-            }\n+      }\n+      runLoopAgain = false;\n+      for (Table t : toRemove) {\n+        if (t.getName() == null) {\n+          // ignore, already dead\n+        } else if (db.getDependentTable(t, t) == null) {\n+          db.removeSchemaObject(session, t);\n+        } else {\n+          runLoopAgain = true;\n         }\n-        ArrayList<DbObject> dbObjects = New.arrayList();\n-        dbObjects.addAll(db.getAllRights());\n-        dbObjects.addAll(db.getAllAggregates());\n-        dbObjects.addAll(db.getAllUserDataTypes());\n-        for (DbObject obj : dbObjects) {\n-            String sql = obj.getCreateSQL();\n-            // the role PUBLIC must not be dropped\n-            if (sql != null) {\n-                db.removeDatabaseObject(session, obj);\n-            }\n-        }\n-    }\n+      }\n+    } while (runLoopAgain);\n \n-    public void setDropAllObjects(boolean b) {\n-        this.dropAllObjects = b;\n+    // TODO session-local temp tables are not removed\n+    for (Schema schema : db.getAllSchemas()) {\n+      if (schema.canDrop()) {\n+        db.removeDatabaseObject(session, schema);\n+      }\n     }\n-\n-    public void setDeleteFiles(boolean b) {\n-        this.deleteFiles = b;\n+    ArrayList<SchemaObject> list = New.arrayList();\n+    for (SchemaObject obj : db.getAllSchemaObjects(DbObject.SEQUENCE)) {\n+      // ignore these. the ones we want to drop will get dropped when we drop\n+      // their associated tables, and we will ignore the problematic ones\n+      // that belong to session-local temp tables.\n+      if (!((Sequence) obj).getBelongsToTable()) {\n+        list.add(obj);\n+      }\n     }\n-\n-    @Override\n-    public int getType() {\n-        return CommandInterface.DROP_ALL_OBJECTS;\n+    // maybe constraints and triggers on system tables will be allowed in\n+    // the future\n+    list.addAll(db.getAllSchemaObjects(DbObject.CONSTRAINT));\n+    list.addAll(db.getAllSchemaObjects(DbObject.TRIGGER));\n+    list.addAll(db.getAllSchemaObjects(DbObject.CONSTANT));\n+    list.addAll(db.getAllSchemaObjects(DbObject.FUNCTION_ALIAS));\n+    for (SchemaObject obj : list) {\n+      if (obj.isHidden()) {\n+        continue;\n+      }\n+      db.removeSchemaObject(session, obj);\n+    }\n+    for (User user : db.getAllUsers()) {\n+      if (user != session.getUser()) {\n+        db.removeDatabaseObject(session, user);\n+      }\n+    }\n+    for (Role role : db.getAllRoles()) {\n+      String sql = role.getCreateSQL();\n+      // the role PUBLIC must not be dropped\n+      if (sql != null) {\n+        db.removeDatabaseObject(session, role);\n+      }\n     }\n+    ArrayList<DbObject> dbObjects = New.arrayList();\n+    dbObjects.addAll(db.getAllRights());\n+    dbObjects.addAll(db.getAllAggregates());\n+    dbObjects.addAll(db.getAllUserDataTypes());\n+    for (DbObject obj : dbObjects) {\n+      String sql = obj.getCreateSQL();\n+      // the role PUBLIC must not be dropped\n+      if (sql != null) {\n+        db.removeDatabaseObject(session, obj);\n+      }\n+    }\n+  }\n+\n+  public void setDropAllObjects(boolean b) {\n+    this.dropAllObjects = b;\n+  }\n+\n+  public void setDeleteFiles(boolean b) {\n+    this.deleteFiles = b;\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return CommandInterface.DROP_ALL_OBJECTS;\n+  }\n \n }\n",
            "diff_size": 187
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "107",
                    "column": "28",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/405/DropDatabase.java\nindex 7408368de54..cf451ac7f67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/405/DropDatabase.java\n@@ -100,7 +100,7 @@ public class DropDatabase extends DefineCommand {\n             }\n         }\n         ArrayList<SchemaObject> list = New.arrayList();\n-        for (SchemaObject obj : db.getAllSchemaObjects(DbObject.SEQUENCE))  {\n+        for (SchemaObject obj : db.getAllSchemaObjects(DbObject.SEQUENCE)) {\n             // ignore these. the ones we want to drop will get dropped when we drop\n             // their associated tables, and we will ignore the problematic ones\n             // that belong to session-local temp tables.\n@@ -158,4 +158,4 @@ public class DropDatabase extends DefineCommand {\n         return CommandInterface.DROP_ALL_OBJECTS;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/405/DropDatabase.java\nindex 7408368de54..cfc91fe99fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/405/DropDatabase.java\n@@ -23,6 +23,8 @@ import org.h2.util.New;\n  * This class represents the statement\n  * DROP ALL OBJECTS\n  */\n+\n+\n public class DropDatabase extends DefineCommand {\n \n     private boolean dropAllObjects;\n@@ -56,28 +58,24 @@ public class DropDatabase extends DefineCommand {\n             ArrayList<Table> tables = db.getAllTablesAndViews(false);\n             ArrayList<Table> toRemove = New.arrayList();\n             for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.VIEW == t.getTableType()) {\n+                if (t.getName() != null && TableType.VIEW == t.getTableType()) {\n                     toRemove.add(t);\n                 }\n             }\n             for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.TABLE_LINK == t.getTableType()) {\n+                if (t.getName() != null && TableType.TABLE_LINK == t.getTableType()) {\n                     toRemove.add(t);\n                 }\n             }\n             for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.TABLE == t.getTableType() &&\n-                        !t.isHidden()) {\n+                if (t.getName() != null && TableType.TABLE == t.getTableType()\n+                        && !t.isHidden()) {\n                     toRemove.add(t);\n                 }\n             }\n             for (Table t : tables) {\n-                if (t.getName() != null &&\n-                        TableType.EXTERNAL_TABLE_ENGINE == t.getTableType() &&\n-                        !t.isHidden()) {\n+                if (t.getName() != null && TableType.EXTERNAL_TABLE_ENGINE == t.getTableType()\n+                        && !t.isHidden()) {\n                     toRemove.add(t);\n                 }\n             }\n@@ -85,9 +83,10 @@ public class DropDatabase extends DefineCommand {\n             for (Table t : toRemove) {\n                 if (t.getName() == null) {\n                     // ignore, already dead\n+\n                 } else if (db.getDependentTable(t, t) == null) {\n                     db.removeSchemaObject(session, t);\n-                } else {\n+                                     } else {\n                     runLoopAgain = true;\n                 }\n             }\n@@ -100,11 +99,11 @@ public class DropDatabase extends DefineCommand {\n             }\n         }\n         ArrayList<SchemaObject> list = New.arrayList();\n-        for (SchemaObject obj : db.getAllSchemaObjects(DbObject.SEQUENCE))  {\n+        for (SchemaObject obj : db.getAllSchemaObjects(DbObject.SEQUENCE)) {\n             // ignore these. the ones we want to drop will get dropped when we drop\n             // their associated tables, and we will ignore the problematic ones\n             // that belong to session-local temp tables.\n-            if (!((Sequence)obj).getBelongsToTable()) {\n+            if (!((Sequence) obj).getBelongsToTable()) {\n                 list.add(obj);\n             }\n         }\n@@ -145,10 +144,12 @@ public class DropDatabase extends DefineCommand {\n         }\n     }\n \n+\n     public void setDropAllObjects(boolean b) {\n         this.dropAllObjects = b;\n     }\n \n+\n     public void setDeleteFiles(boolean b) {\n         this.deleteFiles = b;\n     }\n@@ -158,4 +159,4 @@ public class DropDatabase extends DefineCommand {\n         return CommandInterface.DROP_ALL_OBJECTS;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/405/DropDatabase.java\nindex 7408368de54..6e6cceeb69f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/405/DropDatabase.java\n@@ -104,7 +104,7 @@ public class DropDatabase extends DefineCommand {\n             // ignore these. the ones we want to drop will get dropped when we drop\n             // their associated tables, and we will ignore the problematic ones\n             // that belong to session-local temp tables.\n-            if (!((Sequence)obj).getBelongsToTable()) {\n+            if (!((Sequence) obj).getBelongsToTable()) {\n                 list.add(obj);\n             }\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/405/DropDatabase.java\nindex 7408368de54..6e6cceeb69f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/405/DropDatabase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/405/DropDatabase.java\n@@ -104,7 +104,7 @@ public class DropDatabase extends DefineCommand {\n             // ignore these. the ones we want to drop will get dropped when we drop\n             // their associated tables, and we will ignore the problematic ones\n             // that belong to session-local temp tables.\n-            if (!((Sequence)obj).getBelongsToTable()) {\n+            if (!((Sequence) obj).getBelongsToTable()) {\n                 list.add(obj);\n             }\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}