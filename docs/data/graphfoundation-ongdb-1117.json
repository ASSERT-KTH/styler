{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1117",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1117/RelationshipCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1117/RelationshipCreator.java\nindex fe067939574..9412027374e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1117/RelationshipCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1117/RelationshipCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import org.neo4j.kernel.impl.locking.LockTracer;\n@@ -32,232 +33,229 @@ import org.neo4j.storageengine.api.lock.ResourceLocker;\n \n public class RelationshipCreator\n {\n-    private final RelationshipGroupGetter relGroupGetter;\n-    private final int denseNodeThreshold;\n+  private final RelationshipGroupGetter relGroupGetter;\n+  private final int denseNodeThreshold;\n+\n+  public RelationshipCreator(RelationshipGroupGetter relGroupGetter, int denseNodeThreshold)\n+  {\n+    this.relGroupGetter = relGroupGetter;\n+    this.denseNodeThreshold = denseNodeThreshold;\n+  }\n+\n+  /**\n+   * Creates a relationship with the given id, from the nodes identified by id\n+   * and of type typeId\n+   *\n+   * @param id           The id of the relationship to create.\n+   * @param type         The id of the relationship type this relationship will\n+   *                     have.\n+   * @param firstNodeId  The id of the start node.\n+   * @param secondNodeId The id of the end node.\n+   */\n+  public void relationshipCreate(long id, int type, long firstNodeId, long secondNodeId,\n+                                 RecordAccessSet recordChangeSet, ResourceLocker locks)\n+  {\n+    // TODO could be unnecessary to mark as changed here already, dense nodes may not need to change\n+    NodeRecord firstNode = recordChangeSet.getNodeRecords().getOrLoad(firstNodeId, null).forChangingLinkage();\n+    NodeRecord secondNode = recordChangeSet.getNodeRecords().getOrLoad(secondNodeId, null).forChangingLinkage();\n+    convertNodeToDenseIfNecessary(firstNode, recordChangeSet.getRelRecords(),\n+        recordChangeSet.getRelGroupRecords(), locks);\n+    convertNodeToDenseIfNecessary(secondNode, recordChangeSet.getRelRecords(),\n+        recordChangeSet.getRelGroupRecords(), locks);\n+    RelationshipRecord record = recordChangeSet.getRelRecords().create(id, null).forChangingLinkage();\n+    record.setLinks(firstNodeId, secondNodeId, type);\n+    record.setInUse(true);\n+    record.setCreated();\n+    connectRelationship(firstNode, secondNode, record, recordChangeSet.getRelRecords(),\n+        recordChangeSet.getRelGroupRecords(), locks);\n+  }\n \n-    public RelationshipCreator( RelationshipGroupGetter relGroupGetter, int denseNodeThreshold )\n+  public static int relCount(long nodeId, RelationshipRecord rel)\n+  {\n+    return (int) (nodeId == rel.getFirstNode() ? rel.getFirstPrevRel() : rel.getSecondPrevRel());\n+  }\n+\n+  private void convertNodeToDenseIfNecessary(NodeRecord node,\n+                                             RecordAccess<RelationshipRecord, Void> relRecords,\n+                                             RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks)\n+  {\n+    if (node.isDense())\n     {\n-        this.relGroupGetter = relGroupGetter;\n-        this.denseNodeThreshold = denseNodeThreshold;\n+      return;\n     }\n-\n-    /**\n-     * Creates a relationship with the given id, from the nodes identified by id\n-     * and of type typeId\n-     *\n-     * @param id The id of the relationship to create.\n-     * @param type The id of the relationship type this relationship will\n-     *            have.\n-     * @param firstNodeId The id of the start node.\n-     * @param secondNodeId The id of the end node.\n-     */\n-    public void relationshipCreate( long id, int type, long firstNodeId, long secondNodeId,\n-            RecordAccessSet recordChangeSet, ResourceLocker locks )\n+    long relId = node.getNextRel();\n+    if (relId != Record.NO_NEXT_RELATIONSHIP.intValue())\n     {\n-        // TODO could be unnecessary to mark as changed here already, dense nodes may not need to change\n-        NodeRecord firstNode = recordChangeSet.getNodeRecords().getOrLoad( firstNodeId, null ).forChangingLinkage();\n-        NodeRecord secondNode = recordChangeSet.getNodeRecords().getOrLoad( secondNodeId, null ).forChangingLinkage();\n-        convertNodeToDenseIfNecessary( firstNode, recordChangeSet.getRelRecords(),\n-                recordChangeSet.getRelGroupRecords(), locks );\n-        convertNodeToDenseIfNecessary( secondNode, recordChangeSet.getRelRecords(),\n-                recordChangeSet.getRelGroupRecords(), locks );\n-        RelationshipRecord record = recordChangeSet.getRelRecords().create( id, null ).forChangingLinkage();\n-        record.setLinks( firstNodeId, secondNodeId, type );\n-        record.setInUse( true );\n-        record.setCreated();\n-        connectRelationship( firstNode, secondNode, record, recordChangeSet.getRelRecords(),\n-                recordChangeSet.getRelGroupRecords(), locks );\n+      RecordProxy<RelationshipRecord, Void> relChange = relRecords.getOrLoad(relId, null);\n+      RelationshipRecord rel = relChange.forReadingLinkage();\n+      if (relCount(node.getId(), rel) >= denseNodeThreshold)\n+      {\n+        locks.acquireExclusive(LockTracer.NONE, ResourceTypes.RELATIONSHIP, relId);\n+        // Re-read the record after we've locked it since another transaction might have\n+        // changed in the meantime.\n+        relChange = relRecords.getOrLoad(relId, null);\n+\n+        convertNodeToDenseNode(node, relChange.forChangingLinkage(), relRecords, relGroupRecords, locks);\n+      }\n     }\n+  }\n \n-    public static int relCount( long nodeId, RelationshipRecord rel )\n+  private void connectRelationship(NodeRecord firstNode,\n+                                   NodeRecord secondNode, RelationshipRecord rel,\n+                                   RecordAccess<RelationshipRecord, Void> relRecords,\n+                                   RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks)\n+  {\n+    // Assertion interpreted: if node is a normal node and we're trying to create a\n+    // relationship that we already have as first rel for that node --> error\n+    assert firstNode.getNextRel() != rel.getId() || firstNode.isDense();\n+    assert secondNode.getNextRel() != rel.getId() || secondNode.isDense();\n+\n+    if (!firstNode.isDense())\n     {\n-        return (int) (nodeId == rel.getFirstNode() ? rel.getFirstPrevRel() : rel.getSecondPrevRel());\n+      rel.setFirstNextRel(firstNode.getNextRel());\n     }\n-\n-    private void convertNodeToDenseIfNecessary( NodeRecord node,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+    if (!secondNode.isDense())\n     {\n-        if ( node.isDense() )\n-        {\n-            return;\n-        }\n-        long relId = node.getNextRel();\n-        if ( relId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {\n-            RecordProxy<RelationshipRecord, Void> relChange = relRecords.getOrLoad( relId, null );\n-            RelationshipRecord rel = relChange.forReadingLinkage();\n-            if ( relCount( node.getId(), rel ) >= denseNodeThreshold )\n-            {\n-                locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, relId );\n-                // Re-read the record after we've locked it since another transaction might have\n-                // changed in the meantime.\n-                relChange = relRecords.getOrLoad( relId, null );\n+      rel.setSecondNextRel(secondNode.getNextRel());\n+    }\n \n-                convertNodeToDenseNode( node, relChange.forChangingLinkage(), relRecords, relGroupRecords, locks );\n-            }\n-        }\n+    if (!firstNode.isDense())\n+    {\n+      connect(firstNode, rel, relRecords, locks);\n+    } else\n+    {\n+      connectRelationshipToDenseNode(firstNode, rel, relRecords, relGroupRecords, locks);\n     }\n \n-    private void connectRelationship( NodeRecord firstNode,\n-            NodeRecord secondNode, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+    if (!secondNode.isDense())\n+    {\n+      if (firstNode.getId() != secondNode.getId())\n+      {\n+        connect(secondNode, rel, relRecords, locks);\n+      } else\n+      {\n+        rel.setFirstInFirstChain(true);\n+        rel.setSecondPrevRel(rel.getFirstPrevRel());\n+      }\n+    } else if (firstNode.getId() != secondNode.getId())\n     {\n-        // Assertion interpreted: if node is a normal node and we're trying to create a\n-        // relationship that we already have as first rel for that node --> error\n-        assert firstNode.getNextRel() != rel.getId() || firstNode.isDense();\n-        assert secondNode.getNextRel() != rel.getId() || secondNode.isDense();\n+      connectRelationshipToDenseNode(secondNode, rel, relRecords, relGroupRecords, locks);\n+    }\n \n-        if ( !firstNode.isDense() )\n-        {\n-            rel.setFirstNextRel( firstNode.getNextRel() );\n-        }\n-        if ( !secondNode.isDense() )\n-        {\n-            rel.setSecondNextRel( secondNode.getNextRel() );\n-        }\n+    if (!firstNode.isDense())\n+    {\n+      firstNode.setNextRel(rel.getId());\n+    }\n+    if (!secondNode.isDense())\n+    {\n+      secondNode.setNextRel(rel.getId());\n+    }\n+  }\n \n-        if ( !firstNode.isDense() )\n-        {\n-            connect( firstNode, rel, relRecords, locks );\n-        }\n-        else\n-        {\n-            connectRelationshipToDenseNode( firstNode, rel, relRecords, relGroupRecords, locks );\n-        }\n+  private void connectRelationshipToDenseNode(NodeRecord node, RelationshipRecord rel,\n+                                              RecordAccess<RelationshipRecord, Void> relRecords,\n+                                              RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks)\n+  {\n+    RelationshipGroupRecord group =\n+        relGroupGetter.getOrCreateRelationshipGroup(node, rel.getType(), relGroupRecords).forChangingData();\n+    DirectionWrapper dir = DirectionIdentifier.wrapDirection(rel, node);\n+    long nextRel = dir.getNextRel(group);\n+    setCorrectNextRel(node, rel, nextRel);\n+    connect(node.getId(), nextRel, rel, relRecords, locks);\n+    dir.setNextRel(group, rel.getId());\n+  }\n \n-        if ( !secondNode.isDense() )\n-        {\n-            if ( firstNode.getId() != secondNode.getId() )\n-            {\n-                connect( secondNode, rel, relRecords, locks );\n-            }\n-            else\n-            {\n-                rel.setFirstInFirstChain( true );\n-                rel.setSecondPrevRel( rel.getFirstPrevRel() );\n-            }\n-        }\n-        else if ( firstNode.getId() != secondNode.getId() )\n-        {\n-            connectRelationshipToDenseNode( secondNode, rel, relRecords, relGroupRecords, locks );\n-        }\n+  private void connect(NodeRecord node, RelationshipRecord rel,\n+                       RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks)\n+  {\n+    connect(node.getId(), node.getNextRel(), rel, relRecords, locks);\n+  }\n \n-        if ( !firstNode.isDense() )\n-        {\n-            firstNode.setNextRel( rel.getId() );\n-        }\n-        if ( !secondNode.isDense() )\n-        {\n-            secondNode.setNextRel( rel.getId() );\n-        }\n+  private void convertNodeToDenseNode(NodeRecord node, RelationshipRecord firstRel,\n+                                      RecordAccess<RelationshipRecord, Void> relRecords,\n+                                      RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks)\n+  {\n+    node.setDense(true);\n+    node.setNextRel(Record.NO_NEXT_RELATIONSHIP.intValue());\n+    long relId = firstRel.getId();\n+    RelationshipRecord relRecord = firstRel;\n+    while (relId != Record.NO_NEXT_RELATIONSHIP.intValue())\n+    {\n+      // Get the next relationship id before connecting it (where linkage is overwritten)\n+      relId = relChain(relRecord, node.getId()).get(relRecord);\n+      connectRelationshipToDenseNode(node, relRecord, relRecords, relGroupRecords, locks);\n+      if (relId != Record.NO_NEXT_RELATIONSHIP.intValue())\n+      {   // Lock and load the next relationship in the chain\n+        locks.acquireExclusive(LockTracer.NONE, ResourceTypes.RELATIONSHIP, relId);\n+        relRecord = relRecords.getOrLoad(relId, null).forChangingLinkage();\n+      }\n     }\n+  }\n \n-    private void connectRelationshipToDenseNode( NodeRecord node, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+  private void connect(long nodeId, long firstRelId, RelationshipRecord rel,\n+                       RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks)\n+  {\n+    long newCount = 1;\n+    if (firstRelId != Record.NO_NEXT_RELATIONSHIP.intValue())\n     {\n-        RelationshipGroupRecord group =\n-                relGroupGetter.getOrCreateRelationshipGroup( node, rel.getType(), relGroupRecords ).forChangingData();\n-        DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, node );\n-        long nextRel = dir.getNextRel( group );\n-        setCorrectNextRel( node, rel, nextRel );\n-        connect( node.getId(), nextRel, rel, relRecords, locks );\n-        dir.setNextRel( group, rel.getId() );\n+      locks.acquireExclusive(LockTracer.NONE, ResourceTypes.RELATIONSHIP, firstRelId);\n+      RelationshipRecord firstRel = relRecords.getOrLoad(firstRelId, null).forChangingLinkage();\n+      boolean changed = false;\n+      if (firstRel.getFirstNode() == nodeId)\n+      {\n+        newCount = firstRel.getFirstPrevRel() + 1;\n+        firstRel.setFirstPrevRel(rel.getId());\n+        firstRel.setFirstInFirstChain(false);\n+        changed = true;\n+      }\n+      if (firstRel.getSecondNode() == nodeId)\n+      {\n+        newCount = firstRel.getSecondPrevRel() + 1;\n+        firstRel.setSecondPrevRel(rel.getId());\n+        firstRel.setFirstInSecondChain(false);\n+        changed = true;\n+      }\n+      if (!changed)\n+      {\n+        throw new InvalidRecordException(nodeId + \" doesn't match \" + firstRel);\n+      }\n     }\n \n-    private void connect( NodeRecord node, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks )\n+    // Set the relationship count\n+    if (rel.getFirstNode() == nodeId)\n     {\n-        connect( node.getId(), node.getNextRel(), rel, relRecords, locks );\n+      rel.setFirstPrevRel(newCount);\n+      rel.setFirstInFirstChain(true);\n     }\n-\n-    private void convertNodeToDenseNode( NodeRecord node, RelationshipRecord firstRel,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+    if (rel.getSecondNode() == nodeId)\n     {\n-        node.setDense( true );\n-        node.setNextRel( Record.NO_NEXT_RELATIONSHIP.intValue() );\n-        long relId = firstRel.getId();\n-        RelationshipRecord relRecord = firstRel;\n-        while ( relId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {\n-            // Get the next relationship id before connecting it (where linkage is overwritten)\n-            relId = relChain( relRecord, node.getId() ).get( relRecord );\n-            connectRelationshipToDenseNode( node, relRecord, relRecords, relGroupRecords, locks );\n-            if ( relId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-            {   // Lock and load the next relationship in the chain\n-                locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, relId );\n-                relRecord = relRecords.getOrLoad( relId, null ).forChangingLinkage();\n-            }\n-        }\n+      rel.setSecondPrevRel(newCount);\n+      rel.setFirstInSecondChain(true);\n     }\n+  }\n \n-    private void connect( long nodeId, long firstRelId, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks )\n+  private void setCorrectNextRel(NodeRecord node, RelationshipRecord rel, long nextRel)\n+  {\n+    if (node.getId() == rel.getFirstNode())\n     {\n-        long newCount = 1;\n-        if ( firstRelId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-        {\n-            locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, firstRelId );\n-            RelationshipRecord firstRel = relRecords.getOrLoad( firstRelId, null ).forChangingLinkage();\n-            boolean changed = false;\n-            if ( firstRel.getFirstNode() == nodeId )\n-            {\n-                newCount = firstRel.getFirstPrevRel() + 1;\n-                firstRel.setFirstPrevRel( rel.getId() );\n-                firstRel.setFirstInFirstChain( false );\n-                changed = true;\n-            }\n-            if ( firstRel.getSecondNode() == nodeId )\n-            {\n-                newCount = firstRel.getSecondPrevRel() + 1;\n-                firstRel.setSecondPrevRel( rel.getId() );\n-                firstRel.setFirstInSecondChain( false );\n-                changed = true;\n-            }\n-            if ( !changed )\n-            {\n-                throw new InvalidRecordException( nodeId + \" doesn't match \" + firstRel );\n-            }\n-        }\n-\n-        // Set the relationship count\n-        if ( rel.getFirstNode() == nodeId )\n-        {\n-            rel.setFirstPrevRel( newCount );\n-            rel.setFirstInFirstChain( true );\n-        }\n-        if ( rel.getSecondNode() == nodeId )\n-        {\n-            rel.setSecondPrevRel( newCount );\n-            rel.setFirstInSecondChain( true );\n-        }\n+      rel.setFirstNextRel(nextRel);\n     }\n-\n-    private void setCorrectNextRel( NodeRecord node, RelationshipRecord rel, long nextRel )\n+    if (node.getId() == rel.getSecondNode())\n     {\n-        if ( node.getId() == rel.getFirstNode() )\n-        {\n-            rel.setFirstNextRel( nextRel );\n-        }\n-        if ( node.getId() == rel.getSecondNode() )\n-        {\n-            rel.setSecondNextRel( nextRel );\n-        }\n+      rel.setSecondNextRel(nextRel);\n     }\n+  }\n \n-    private static RelationshipConnection relChain( RelationshipRecord rel, long nodeId )\n+  private static RelationshipConnection relChain(RelationshipRecord rel, long nodeId)\n+  {\n+    if (rel.getFirstNode() == nodeId)\n+    {\n+      return RelationshipConnection.START_NEXT;\n+    }\n+    if (rel.getSecondNode() == nodeId)\n     {\n-        if ( rel.getFirstNode() == nodeId )\n-        {\n-            return RelationshipConnection.START_NEXT;\n-        }\n-        if ( rel.getSecondNode() == nodeId )\n-        {\n-            return RelationshipConnection.END_NEXT;\n-        }\n-        throw new RuntimeException( nodeId + \" neither start not end node in \" + rel );\n+      return RelationshipConnection.END_NEXT;\n     }\n+    throw new RuntimeException(nodeId + \" neither start not end node in \" + rel);\n+  }\n }\n",
            "diff_size": 303
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1117/RelationshipCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1117/RelationshipCreator.java\nindex fe067939574..546a7e47ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1117/RelationshipCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1117/RelationshipCreator.java\n@@ -57,26 +57,21 @@ public class RelationshipCreator\n         // TODO could be unnecessary to mark as changed here already, dense nodes may not need to change\n         NodeRecord firstNode = recordChangeSet.getNodeRecords().getOrLoad( firstNodeId, null ).forChangingLinkage();\n         NodeRecord secondNode = recordChangeSet.getNodeRecords().getOrLoad( secondNodeId, null ).forChangingLinkage();\n-        convertNodeToDenseIfNecessary( firstNode, recordChangeSet.getRelRecords(),\n-                recordChangeSet.getRelGroupRecords(), locks );\n-        convertNodeToDenseIfNecessary( secondNode, recordChangeSet.getRelRecords(),\n-                recordChangeSet.getRelGroupRecords(), locks );\n-        RelationshipRecord record = recordChangeSet.getRelRecords().create( id, null ).forChangingLinkage();\n+        convertNodeToDenseIfNecessary( firstNode, recordChangeSet.getRelRecords(), recordChangeSet.getRelGroupRecords(), locks );\n+convertNodeToDenseIfNecessary( secondNode, recordChangeSet.getRelRecords(), recordChangeSet.getRelGroupRecords(), locks );\n+RelationshipRecord record = recordChangeSet.getRelRecords().create( id, null ).forChangingLinkage();\n         record.setLinks( firstNodeId, secondNodeId, type );\n         record.setInUse( true );\n         record.setCreated();\n-        connectRelationship( firstNode, secondNode, record, recordChangeSet.getRelRecords(),\n-                recordChangeSet.getRelGroupRecords(), locks );\n+        connectRelationship( firstNode, secondNode, record, recordChangeSet.getRelRecords(), recordChangeSet.getRelGroupRecords(), locks );\n     }\n \n     public static int relCount( long nodeId, RelationshipRecord rel )\n     {\n-        return (int) (nodeId == rel.getFirstNode() ? rel.getFirstPrevRel() : rel.getSecondPrevRel());\n+        return ( int) ( nodeId == rel.getFirstNode() ? rel.getFirstPrevRel() : rel.getSecondPrevRel() );\n     }\n \n-    private void convertNodeToDenseIfNecessary( NodeRecord node,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+    private void convertNodeToDenseIfNecessary( NodeRecord node, RecordAccess<RelationshipRecord,Void> relRecords, RecordAccess<RelationshipGroupRecord,Integer> relGroupRecords, ResourceLocker locks )\n     {\n         if ( node.isDense() )\n         {\n@@ -85,7 +80,7 @@ public class RelationshipCreator\n         long relId = node.getNextRel();\n         if ( relId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n         {\n-            RecordProxy<RelationshipRecord, Void> relChange = relRecords.getOrLoad( relId, null );\n+            RecordProxy<RelationshipRecord,Void> relChange = relRecords.getOrLoad( relId, null );\n             RelationshipRecord rel = relChange.forReadingLinkage();\n             if ( relCount( node.getId(), rel ) >= denseNodeThreshold )\n             {\n@@ -100,20 +95,18 @@ public class RelationshipCreator\n     }\n \n     private void connectRelationship( NodeRecord firstNode,\n-            NodeRecord secondNode, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+            NodeRecord secondNode, RelationshipRecord rel, RecordAccess<RelationshipRecord,Void> relRecords, RecordAccess<RelationshipGroupRecord,Integer> relGroupRecords, ResourceLocker locks )\n     {\n         // Assertion interpreted: if node is a normal node and we're trying to create a\n         // relationship that we already have as first rel for that node --> error\n         assert firstNode.getNextRel() != rel.getId() || firstNode.isDense();\n         assert secondNode.getNextRel() != rel.getId() || secondNode.isDense();\n-\n-        if ( !firstNode.isDense() )\n+if ( !firstNode.isDense() )\n         {\n             rel.setFirstNextRel( firstNode.getNextRel() );\n         }\n-        if ( !secondNode.isDense() )\n+\n+if ( !secondNode.isDense() )\n         {\n             rel.setSecondNextRel( secondNode.getNextRel() );\n         }\n@@ -148,34 +141,29 @@ public class RelationshipCreator\n         {\n             firstNode.setNextRel( rel.getId() );\n         }\n-        if ( !secondNode.isDense() )\n+\n+if ( !secondNode.isDense() )\n         {\n             secondNode.setNextRel( rel.getId() );\n         }\n     }\n \n-    private void connectRelationshipToDenseNode( NodeRecord node, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+    private void connectRelationshipToDenseNode( NodeRecord node, RelationshipRecord rel, RecordAccess<RelationshipRecord,Void> relRecords, RecordAccess<RelationshipGroupRecord,Integer> relGroupRecords, ResourceLocker locks )\n     {\n-        RelationshipGroupRecord group =\n-                relGroupGetter.getOrCreateRelationshipGroup( node, rel.getType(), relGroupRecords ).forChangingData();\n-        DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, node );\n+        RelationshipGroupRecord group = relGroupGetter.getOrCreateRelationshipGroup( node, rel.getType(), relGroupRecords ).forChangingData();\n+DirectionWrapper dir = DirectionIdentifier.wrapDirection( rel, node );\n         long nextRel = dir.getNextRel( group );\n         setCorrectNextRel( node, rel, nextRel );\n         connect( node.getId(), nextRel, rel, relRecords, locks );\n         dir.setNextRel( group, rel.getId() );\n     }\n \n-    private void connect( NodeRecord node, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks )\n+    private void connect( NodeRecord node, RelationshipRecord rel, RecordAccess<RelationshipRecord,Void> relRecords, ResourceLocker locks )\n     {\n         connect( node.getId(), node.getNextRel(), rel, relRecords, locks );\n     }\n \n-    private void convertNodeToDenseNode( NodeRecord node, RelationshipRecord firstRel,\n-            RecordAccess<RelationshipRecord, Void> relRecords,\n-            RecordAccess<RelationshipGroupRecord, Integer> relGroupRecords, ResourceLocker locks )\n+    private void convertNodeToDenseNode( NodeRecord node, RelationshipRecord firstRel, RecordAccess<RelationshipRecord,Void> relRecords, RecordAccess<RelationshipGroupRecord,Integer> relGroupRecords, ResourceLocker locks )\n     {\n         node.setDense( true );\n         node.setNextRel( Record.NO_NEXT_RELATIONSHIP.intValue() );\n@@ -187,15 +175,15 @@ public class RelationshipCreator\n             relId = relChain( relRecord, node.getId() ).get( relRecord );\n             connectRelationshipToDenseNode( node, relRecord, relRecords, relGroupRecords, locks );\n             if ( relId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n-            {   // Lock and load the next relationship in the chain\n+            {\n+    // Lock and load the next relationship in the chain\n                 locks.acquireExclusive( LockTracer.NONE, ResourceTypes.RELATIONSHIP, relId );\n                 relRecord = relRecords.getOrLoad( relId, null ).forChangingLinkage();\n             }\n         }\n     }\n \n-    private void connect( long nodeId, long firstRelId, RelationshipRecord rel,\n-            RecordAccess<RelationshipRecord, Void> relRecords, ResourceLocker locks )\n+    private void connect( long nodeId, long firstRelId, RelationshipRecord rel, RecordAccess<RelationshipRecord,Void> relRecords, ResourceLocker locks )\n     {\n         long newCount = 1;\n         if ( firstRelId != Record.NO_NEXT_RELATIONSHIP.intValue() )\n@@ -210,14 +198,16 @@ public class RelationshipCreator\n                 firstRel.setFirstInFirstChain( false );\n                 changed = true;\n             }\n-            if ( firstRel.getSecondNode() == nodeId )\n+\n+if ( firstRel.getSecondNode() == nodeId )\n             {\n                 newCount = firstRel.getSecondPrevRel() + 1;\n                 firstRel.setSecondPrevRel( rel.getId() );\n                 firstRel.setFirstInSecondChain( false );\n                 changed = true;\n             }\n-            if ( !changed )\n+\n+if ( !changed )\n             {\n                 throw new InvalidRecordException( nodeId + \" doesn't match \" + firstRel );\n             }\n@@ -229,7 +219,8 @@ public class RelationshipCreator\n             rel.setFirstPrevRel( newCount );\n             rel.setFirstInFirstChain( true );\n         }\n-        if ( rel.getSecondNode() == nodeId )\n+\n+if ( rel.getSecondNode() == nodeId )\n         {\n             rel.setSecondPrevRel( newCount );\n             rel.setFirstInSecondChain( true );\n@@ -242,7 +233,8 @@ public class RelationshipCreator\n         {\n             rel.setFirstNextRel( nextRel );\n         }\n-        if ( node.getId() == rel.getSecondNode() )\n+\n+if ( node.getId() == rel.getSecondNode() )\n         {\n             rel.setSecondNextRel( nextRel );\n         }\n@@ -254,10 +246,11 @@ public class RelationshipCreator\n         {\n             return RelationshipConnection.START_NEXT;\n         }\n-        if ( rel.getSecondNode() == nodeId )\n+\n+if ( rel.getSecondNode() == nodeId )\n         {\n             return RelationshipConnection.END_NEXT;\n         }\n         throw new RuntimeException( nodeId + \" neither start not end node in \" + rel );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}