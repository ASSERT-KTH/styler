{
    "project_name": "graphfoundation-ongdb",
    "error_id": "477",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "90",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "130",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "187",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "233",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "246",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "259",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "272",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "286",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "299",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "314",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "339",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "346",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "365",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "378",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "391",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "404",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "410",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "422",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "434",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "453",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "472",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "493",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/477/FlippableIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/477/FlippableIndexProxy.java\nindex c8d8ecc600a..a93ea398fe2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/477/FlippableIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/477/FlippableIndexProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.File;\n@@ -50,486 +51,461 @@ import org.neo4j.values.storable.Value;\n \n public class FlippableIndexProxy implements IndexProxy\n {\n-    private volatile boolean closed;\n-    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock( true );\n-    private volatile IndexProxyFactory flipTarget;\n-    // This variable below is volatile because it can be changed in flip or flipTo\n-    // and even though it may look like acquiring the read lock, when using this variable\n-    // for various things, execution flow would go through a memory barrier of some sort.\n-    // But it turns out that that may not be the case. F.ex. ReentrantReadWriteLock\n-    // code uses unsafe compareAndSwap that sort of circumvents an equivalent of a volatile read.\n-    private volatile IndexProxy delegate;\n-    private boolean started;\n-\n-    public FlippableIndexProxy()\n-    {\n-        this( null );\n-    }\n-\n-    FlippableIndexProxy( IndexProxy originalDelegate )\n+  private volatile boolean closed;\n+  private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock(true);\n+  private volatile IndexProxyFactory flipTarget;\n+  // This variable below is volatile because it can be changed in flip or flipTo\n+  // and even though it may look like acquiring the read lock, when using this variable\n+  // for various things, execution flow would go through a memory barrier of some sort.\n+  // But it turns out that that may not be the case. F.ex. ReentrantReadWriteLock\n+  // code uses unsafe compareAndSwap that sort of circumvents an equivalent of a volatile read.\n+  private volatile IndexProxy delegate;\n+  private boolean started;\n+\n+  public FlippableIndexProxy()\n+  {\n+    this(null);\n+  }\n+\n+  FlippableIndexProxy(IndexProxy originalDelegate)\n+  {\n+    this.delegate = originalDelegate;\n+  }\n+\n+  @Override\n+  public void start() throws IOException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        this.delegate = originalDelegate;\n-    }\n-\n-    @Override\n-    public void start() throws IOException\n+      delegate.start();\n+      started = true;\n+    } finally\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            delegate.start();\n-            started = true;\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      lock.readLock().unlock();\n     }\n-\n-    @Override\n-    public IndexUpdater newUpdater( IndexUpdateMode mode )\n+  }\n+\n+  @Override\n+  public IndexUpdater newUpdater(IndexUpdateMode mode)\n+  {\n+    // Making use of reentrant locks to ensure that the delegate's constructor is called under lock protection\n+    // while still retaining the lock until a call to close on the returned IndexUpdater\n+    lock.readLock().lock();\n+    try\n     {\n-        // Making use of reentrant locks to ensure that the delegate's constructor is called under lock protection\n-        // while still retaining the lock until a call to close on the returned IndexUpdater\n-        lock.readLock().lock();\n-        try\n-        {\n-            return new LockingIndexUpdater( delegate.newUpdater( mode ) );\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return new LockingIndexUpdater(delegate.newUpdater(mode));\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void drop() throws IOException\n+  @Override\n+  public void drop() throws IOException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            closed = true;\n-            delegate.drop();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      closed = true;\n+      delegate.drop();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n-\n-    /**\n-     * The {@code force()}-method is called during log rotation. At this time we do not want to wait for locks held by\n-     * {@link LockingIndexUpdater}. Waiting on such locks would cause a serious risk of deadlocks, since very likely\n-     * the reader we would be waiting on would be waiting on the log rotation lock held by the thread calling this\n-     * method. The reason we would wait for a read lock while trying to acquire a read lock is if there is a third\n-     * thread waiting on the write lock, probably an index populator wanting to\n-     * {@linkplain #flip(Callable, FailedIndexProxyFactory) flip the index into active state}.\n-     * <p/>\n-     * We avoid this deadlock situation by \"barging\" on the read lock, i.e. acquire it in an <i>unfair</i> way, where\n-     * we don't care about waiting threads, only about whether the exclusive lock is held or not.\n-     */\n-    @Override\n-    public void force( IOLimiter ioLimiter ) throws IOException\n+  }\n+\n+  /**\n+   * The {@code force()}-method is called during log rotation. At this time we do not want to wait for locks held by\n+   * {@link LockingIndexUpdater}. Waiting on such locks would cause a serious risk of deadlocks, since very likely\n+   * the reader we would be waiting on would be waiting on the log rotation lock held by the thread calling this\n+   * method. The reason we would wait for a read lock while trying to acquire a read lock is if there is a third\n+   * thread waiting on the write lock, probably an index populator wanting to\n+   * {@linkplain #flip(Callable, FailedIndexProxyFactory) flip the index into active state}.\n+   * <p/>\n+   * We avoid this deadlock situation by \"barging\" on the read lock, i.e. acquire it in an <i>unfair</i> way, where\n+   * we don't care about waiting threads, only about whether the exclusive lock is held or not.\n+   */\n+  @Override\n+  public void force(IOLimiter ioLimiter) throws IOException\n+  {\n+    barge(lock.readLock()); // see javadoc of this method (above) for rationale on why we use barge(...) here\n+    try\n     {\n-        barge( lock.readLock() ); // see javadoc of this method (above) for rationale on why we use barge(...) here\n-        try\n-        {\n-            delegate.force( ioLimiter );\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      delegate.force(ioLimiter);\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void refresh() throws IOException\n+  @Override\n+  public void refresh() throws IOException\n+  {\n+    lock.readLock();\n+    try\n     {\n-        lock.readLock();\n-        try\n-        {\n-            delegate.refresh();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      delegate.refresh();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n-\n-    /**\n-     * Acquire the {@code ReadLock} in an <i>unfair</i> way, without waiting for queued up writers.\n-     * <p/>\n-     * The {@link ReentrantReadWriteLock.ReadLock#tryLock() tryLock}-method of the {@code ReadLock} implementation of\n-     * {@code ReentrantReadWriteLock} implements a <i>barging</i> behaviour, where if an exclusive lock is not held,\n-     * the shared lock will be acquired, even if there are other threads waiting for the lock. This behaviour is\n-     * regardless of whether the lock is fair or not.\n-     * <p/>\n-     * This allows us to avoid deadlocks where readers would wait for writers that wait for readers in critical\n-     * methods.\n-     * <p/>\n-     * The naive way to implement this method would be:\n-     * <pre><code>\n-     *     if ( !lock.tryLock() ) // try to barge\n-     *         lock.lock(); // fall back to normal blocking lock call\n-     * </code></pre>\n-     * This would however not implement the appropriate barging behaviour in a scenario like the following: Say the\n-     * exclusive lock is held, and there is a queue waiting containing first a reader and then a writer, in this case\n-     * the {@code tryLock()} method will return false. If the writer then finishes between the naive implementation\n-     * exiting {@code tryLock()} and before entering {@code lock()} the {@code barge(...)} method would now block in\n-     * the exact way we don't want it to block, with a read lock held and a writer waiting.<br/>\n-     * In order to get around this situation, the implementation of this method uses a\n-     * {@linkplain Lock#tryLock(long, TimeUnit) timed wait} in a retry-loop in order to ensure that we make another\n-     * attempt to barge the lock at a later point.\n-     * <p/>\n-     * This method is written to be compatible with the signature of {@link Lock#lock()}, which is not interruptible,\n-     * but implemented based on the interruptible {@link Lock#tryLock(long, TimeUnit)}, so the implementation needs to\n-     * remember being interrupted, and reset the flag before exiting, so that later invocations of interruptible\n-     * methods detect the interruption.\n-     *\n-     * @param lock a {@link java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock}\n-     */\n-    private static void barge( ReentrantReadWriteLock.ReadLock lock )\n-    {\n-        boolean interrupted = false;\n-        // exponential retry back-off, no more than 1 second\n-        for ( long timeout = 10; !lock.tryLock(); timeout = Math.min( 1000, timeout * 2 ) )\n-        {\n-            try\n-            {\n-                if ( lock.tryLock( timeout, TimeUnit.MILLISECONDS ) )\n-                {\n-                    return;\n-                }\n-            }\n-            // the barge()-method is uninterruptable, but implemented based on the interruptible tryLock()-method\n-            catch ( InterruptedException e )\n-            {\n-                Thread.interrupted(); // ensure the interrupt flag is cleared\n-                interrupted = true; // remember to set interrupt flag before we exit\n-            }\n-        }\n-        if ( interrupted )\n-        {\n-            Thread.currentThread().interrupt(); // reset the interrupt flag\n-        }\n+  }\n+\n+  /**\n+   * Acquire the {@code ReadLock} in an <i>unfair</i> way, without waiting for queued up writers.\n+   * <p/>\n+   * The {@link ReentrantReadWriteLock.ReadLock#tryLock() tryLock}-method of the {@code ReadLock} implementation of\n+   * {@code ReentrantReadWriteLock} implements a <i>barging</i> behaviour, where if an exclusive lock is not held,\n+   * the shared lock will be acquired, even if there are other threads waiting for the lock. This behaviour is\n+   * regardless of whether the lock is fair or not.\n+   * <p/>\n+   * This allows us to avoid deadlocks where readers would wait for writers that wait for readers in critical\n+   * methods.\n+   * <p/>\n+   * The naive way to implement this method would be:\n+   * <pre><code>\n+   *     if ( !lock.tryLock() ) // try to barge\n+   *         lock.lock(); // fall back to normal blocking lock call\n+   * </code></pre>\n+   * This would however not implement the appropriate barging behaviour in a scenario like the following: Say the\n+   * exclusive lock is held, and there is a queue waiting containing first a reader and then a writer, in this case\n+   * the {@code tryLock()} method will return false. If the writer then finishes between the naive implementation\n+   * exiting {@code tryLock()} and before entering {@code lock()} the {@code barge(...)} method would now block in\n+   * the exact way we don't want it to block, with a read lock held and a writer waiting.<br/>\n+   * In order to get around this situation, the implementation of this method uses a\n+   * {@linkplain Lock#tryLock(long, TimeUnit) timed wait} in a retry-loop in order to ensure that we make another\n+   * attempt to barge the lock at a later point.\n+   * <p/>\n+   * This method is written to be compatible with the signature of {@link Lock#lock()}, which is not interruptible,\n+   * but implemented based on the interruptible {@link Lock#tryLock(long, TimeUnit)}, so the implementation needs to\n+   * remember being interrupted, and reset the flag before exiting, so that later invocations of interruptible\n+   * methods detect the interruption.\n+   *\n+   * @param lock a {@link java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock}\n+   */\n+  private static void barge(ReentrantReadWriteLock.ReadLock lock)\n+  {\n+    boolean interrupted = false;\n+    // exponential retry back-off, no more than 1 second\n+    for (long timeout = 10; !lock.tryLock(); timeout = Math.min(1000, timeout * 2))\n+    {\n+      try\n+      {\n+        if (lock.tryLock(timeout, TimeUnit.MILLISECONDS))\n+        {\n+          return;\n+        }\n+      }\n+      // the barge()-method is uninterruptable, but implemented based on the interruptible tryLock()-method\n+      catch (InterruptedException e)\n+      {\n+        Thread.interrupted(); // ensure the interrupt flag is cleared\n+        interrupted = true; // remember to set interrupt flag before we exit\n+      }\n     }\n-\n-    @Override\n-    public SchemaIndexDescriptor getDescriptor()\n+    if (interrupted)\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.getDescriptor();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      Thread.currentThread().interrupt(); // reset the interrupt flag\n     }\n+  }\n \n-    @Override\n-    public SchemaDescriptor schema()\n+  @Override\n+  public SchemaIndexDescriptor getDescriptor()\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.schema();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.getDescriptor();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public IndexProvider.Descriptor getProviderDescriptor()\n+  @Override\n+  public SchemaDescriptor schema()\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.getProviderDescriptor();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.schema();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public InternalIndexState getState()\n+  @Override\n+  public IndexProvider.Descriptor getProviderDescriptor()\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.getState();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.getProviderDescriptor();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public IndexCapability getIndexCapability()\n+  @Override\n+  public InternalIndexState getState()\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.getIndexCapability();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.getState();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void close() throws IOException\n+  @Override\n+  public IndexCapability getIndexCapability()\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            closed = true;\n-            delegate.close();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.getIndexCapability();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public IndexReader newReader() throws IndexNotFoundKernelException\n+  @Override\n+  public void close() throws IOException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.newReader();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      closed = true;\n+      delegate.close();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public boolean awaitStoreScanCompleted() throws IndexPopulationFailedKernelException, InterruptedException\n+  @Override\n+  public IndexReader newReader() throws IndexNotFoundKernelException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        IndexProxy proxy;\n-        do\n-        {\n-            lock.readLock().lock();\n-            proxy = delegate;\n-            lock.readLock().unlock();\n-        } while ( !closed && proxy.awaitStoreScanCompleted() );\n-        return true;\n+      return delegate.newReader();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void activate() throws IndexActivationFailedKernelException\n+  @Override\n+  public boolean awaitStoreScanCompleted() throws IndexPopulationFailedKernelException, InterruptedException\n+  {\n+    IndexProxy proxy;\n+    do\n     {\n-        // use write lock, since activate() might call flip*() which acquires a write lock itself.\n-        lock.writeLock().lock();\n-        try\n-        {\n-            delegate.activate();\n-        }\n-        finally\n-        {\n-            lock.writeLock().unlock();\n-        }\n+      lock.readLock().lock();\n+      proxy = delegate;\n+      lock.readLock().unlock();\n+    } while (!closed && proxy.awaitStoreScanCompleted());\n+    return true;\n+  }\n+\n+  @Override\n+  public void activate() throws IndexActivationFailedKernelException\n+  {\n+    // use write lock, since activate() might call flip*() which acquires a write lock itself.\n+    lock.writeLock().lock();\n+    try\n+    {\n+      delegate.activate();\n+    } finally\n+    {\n+      lock.writeLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void validate() throws IndexPopulationFailedKernelException, UniquePropertyValueValidationException\n+  @Override\n+  public void validate() throws IndexPopulationFailedKernelException, UniquePropertyValueValidationException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            delegate.validate();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      delegate.validate();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void validateBeforeCommit( Value[] tuple )\n+  @Override\n+  public void validateBeforeCommit(Value[] tuple)\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            delegate.validateBeforeCommit( tuple );\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      delegate.validateBeforeCommit(tuple);\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public long getIndexId()\n+  @Override\n+  public long getIndexId()\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.getIndexId();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.getIndexId();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public ResourceIterator<File> snapshotFiles() throws IOException\n+  @Override\n+  public ResourceIterator<File> snapshotFiles() throws IOException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.snapshotFiles();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.snapshotFiles();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public IndexPopulationFailure getPopulationFailure() throws IllegalStateException\n+  @Override\n+  public IndexPopulationFailure getPopulationFailure() throws IllegalStateException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.getPopulationFailure();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.getPopulationFailure();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public PopulationProgress getIndexPopulationProgress()\n+  @Override\n+  public PopulationProgress getIndexPopulationProgress()\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            return delegate.getIndexPopulationProgress();\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      return delegate.getIndexPopulationProgress();\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    void setFlipTarget( IndexProxyFactory flipTarget )\n+  void setFlipTarget(IndexProxyFactory flipTarget)\n+  {\n+    lock.writeLock().lock();\n+    try\n     {\n-        lock.writeLock().lock();\n-        try\n-        {\n-            this.flipTarget = flipTarget;\n-        }\n-        finally\n-        {\n-            lock.writeLock().unlock();\n-        }\n+      this.flipTarget = flipTarget;\n+    } finally\n+    {\n+      lock.writeLock().unlock();\n     }\n+  }\n \n-    void flipTo( IndexProxy targetDelegate )\n+  void flipTo(IndexProxy targetDelegate)\n+  {\n+    lock.writeLock().lock();\n+    try\n     {\n-        lock.writeLock().lock();\n-        try\n-        {\n-            this.delegate = targetDelegate;\n-        }\n-        finally\n-        {\n-            lock.writeLock().unlock();\n-        }\n+      this.delegate = targetDelegate;\n+    } finally\n+    {\n+      lock.writeLock().unlock();\n     }\n+  }\n \n-    public void flip( Callable<Boolean> actionDuringFlip, FailedIndexProxyFactory failureDelegate )\n-            throws FlipFailedKernelException\n+  public void flip(Callable<Boolean> actionDuringFlip, FailedIndexProxyFactory failureDelegate)\n+      throws FlipFailedKernelException\n+  {\n+    lock.writeLock().lock();\n+    try\n     {\n-        lock.writeLock().lock();\n-        try\n-        {\n-            assertOpen();\n-            try\n-            {\n-                if ( actionDuringFlip.call() )\n-                {\n-                    this.delegate = flipTarget.create();\n-\n-                    if ( started )\n-                    {\n-                        this.delegate.start();\n-\n-                    }\n-                }\n-            }\n-            catch ( Exception e )\n-            {\n-                this.delegate = failureDelegate.create( e );\n-                throw new ExceptionDuringFlipKernelException( e );\n-            }\n-        }\n-        finally\n+      assertOpen();\n+      try\n+      {\n+        if (actionDuringFlip.call())\n         {\n-            lock.writeLock().unlock();\n+          this.delegate = flipTarget.create();\n+\n+          if (started)\n+          {\n+            this.delegate.start();\n+\n+          }\n         }\n+      } catch (Exception e)\n+      {\n+        this.delegate = failureDelegate.create(e);\n+        throw new ExceptionDuringFlipKernelException(e);\n+      }\n+    } finally\n+    {\n+      lock.writeLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \" -> \" + delegate + \"[target:\" + flipTarget + \"]\";\n+  }\n+\n+  private void assertOpen() throws IndexProxyAlreadyClosedKernelException\n+  {\n+    if (closed)\n     {\n-        return getClass().getSimpleName() + \" -> \" + delegate + \"[target:\" + flipTarget + \"]\";\n+      throw new IndexProxyAlreadyClosedKernelException(this.getClass());\n     }\n+  }\n \n-    private void assertOpen() throws IndexProxyAlreadyClosedKernelException\n+  @Override\n+  public void verifyDeferredConstraints(PropertyAccessor accessor) throws IndexEntryConflictException, IOException\n+  {\n+    lock.readLock().lock();\n+    try\n     {\n-        if ( closed )\n-        {\n-            throw new IndexProxyAlreadyClosedKernelException( this.getClass() );\n-        }\n+      delegate.verifyDeferredConstraints(accessor);\n+    } finally\n+    {\n+      lock.readLock().unlock();\n     }\n+  }\n \n-    @Override\n-    public void verifyDeferredConstraints( PropertyAccessor accessor ) throws IndexEntryConflictException, IOException\n+  private class LockingIndexUpdater extends DelegatingIndexUpdater\n+  {\n+    private LockingIndexUpdater(IndexUpdater delegate)\n     {\n-        lock.readLock().lock();\n-        try\n-        {\n-            delegate.verifyDeferredConstraints( accessor );\n-        }\n-        finally\n-        {\n-            lock.readLock().unlock();\n-        }\n+      super(delegate);\n+      lock.readLock().lock();\n     }\n \n-    private class LockingIndexUpdater extends DelegatingIndexUpdater\n+    @Override\n+    public void close() throws IOException, IndexEntryConflictException\n     {\n-        private LockingIndexUpdater( IndexUpdater delegate )\n-        {\n-            super( delegate );\n-            lock.readLock().lock();\n-        }\n-\n-        @Override\n-        public void close() throws IOException, IndexEntryConflictException\n-        {\n-            try\n-            {\n-                delegate.close();\n-            }\n-            finally\n-            {\n-                lock.readLock().unlock();\n-            }\n-        }\n+      try\n+      {\n+        delegate.close();\n+      } finally\n+      {\n+        lock.readLock().unlock();\n+      }\n     }\n+  }\n }\n",
            "diff_size": 536
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/477/FlippableIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/477/FlippableIndexProxy.java\nindex c8d8ecc600a..f1a9fae415d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/477/FlippableIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/477/FlippableIndexProxy.java\n@@ -451,9 +451,8 @@ public class FlippableIndexProxy implements IndexProxy\n         }\n     }\n \n-    public void flip( Callable<Boolean> actionDuringFlip, FailedIndexProxyFactory failureDelegate )\n-            throws FlipFailedKernelException\n-    {\n+    public void flip( Callable<Boolean> actionDuringFlip, FailedIndexProxyFactory failureDelegate ) throws FlipFailedKernelException\n+{\n         lock.writeLock().lock();\n         try\n         {\n@@ -463,12 +462,10 @@ public class FlippableIndexProxy implements IndexProxy\n                 if ( actionDuringFlip.call() )\n                 {\n                     this.delegate = flipTarget.create();\n-\n-                    if ( started )\n+if ( started )\n                     {\n                         this.delegate.start();\n-\n-                    }\n+    }\n                 }\n             }\n             catch ( Exception e )\n@@ -532,4 +529,4 @@ public class FlippableIndexProxy implements IndexProxy\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}