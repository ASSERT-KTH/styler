{
    "project_name": "CESNET-perun",
    "error_id": "406",
    "information": {
        "errors": [
            {
                "line": "4555",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t}\n\n\tpublic Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n\t\t\t\t WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n\t\treturn this.mergeAttributeValue(sess, attribute, user);\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/406/AttributesManagerBlImpl.java\nindex 75877d21e81..bc6767e460f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/406/AttributesManagerBlImpl.java\n@@ -4553,7 +4553,7 @@ public class AttributesManagerBlImpl implements AttributesManagerBl {\n \t}\n \n \tpublic Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\t\t WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n \t\treturn this.mergeAttributeValue(sess, attribute, user);\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/406/AttributesManagerBlImpl.java\nindex 75877d21e81..dcfaec4ce14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/406/AttributesManagerBlImpl.java\n@@ -1,6 +1,7 @@\n package cz.metacentrum.perun.core.blImpl;\n \n import cz.metacentrum.perun.core.api.ActionType;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_FACILITY_ATTR;\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_GROUP_ATTR;\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_GROUP_RESOURCE_ATTR;\n@@ -74,6 +75,7 @@ import cz.metacentrum.perun.core.impl.Utils;\n import cz.metacentrum.perun.core.implApi.AttributesManagerImplApi;\n import cz.metacentrum.perun.core.implApi.modules.attributes.AttributesModuleImplApi;\n import cz.metacentrum.perun.core.implApi.modules.attributes.UserVirtualAttributesModuleImplApi;\n+\n import java.util.concurrent.ConcurrentHashMap;\n \n /**\n@@ -83,6618 +85,7045 @@ import java.util.concurrent.ConcurrentHashMap;\n  */\n public class AttributesManagerBlImpl implements AttributesManagerBl {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(AttributesManagerBlImpl.class);\n-\n-\tprivate final AttributesManagerImplApi attributesManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\t//Attributes dependencies. Attr => dependent attributes (and inverse version)\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> dependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> strongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> allDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\n-\tprivate final static int MAX_SIZE_OF_BULK_IN_SQL = 10000;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tpublic AttributesManagerBlImpl(AttributesManagerImplApi attributesManagerImpl) {\n-\t\tthis.attributesManagerImpl = attributesManagerImpl;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, facility);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, vo);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, vo));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, group);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getVirtualAttributes(sess, resource);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, resource);\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, resource, member);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getAttributes(sess, resource, member, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n-\t\t// filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\t\t// adds all attributes which names are in attrNames list (virtual and empty too)\n-\t\treturn  getAttributesManagerImpl().getAttributes(sess, member, group, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n-\t\t// filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t// adds virtual attributes too\n-\t\t\tattributes.addAll(this.getAttributes(sess, user));\n-\t\t\tattributes.addAll(this.getAttributes(sess, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(attrNames.isEmpty()) return this.getAttributes(sess, member, group, workWithUserAttributes);\n-\n-\t\t//differentiate between user+member and member-group namespace\n-\t\tList<String> userAndMemberAttributeNames = new ArrayList<>();\n-\t\tList<String> memberGroupAttributeNames = new ArrayList<>();\n-\t\tfor(String attrName : attrNames) {\n-\t\t\tif(attrName.startsWith(AttributesManager.NS_USER_ATTR) || attrName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tuserAndMemberAttributeNames.add(attrName);\n-\t\t\t} else if(attrName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tmemberGroupAttributeNames.add(attrName);\n-\t\t\t} else {\n-\t\t\t\tlog.error(\"Attribute defined by \" + attrName + \" is not in supported namespace. Skip it there!\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tif(!userAndMemberAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n-\t\tif(!memberGroupAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, resource, member);\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, resource, member);\n-\t\t//remove virtual attributes with null value\n-\t\tIterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n-\t\twhile (virtualAttributesIterator.hasNext()) if(virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(virtualAttributes);\n-\n-\t\tif(workWithUserAttributes) {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(attrNames.isEmpty()) return this.getAttributes(sess, resource, member, workWithUserAttributes);\n-\n-\t\tList<String> userAndMemberAttributeNames = new ArrayList<>();\n-\t\tList<String> memberResourceAttributeNames = new ArrayList<>();\n-\t\tList<String> userFacilityAttirbuteNames = new ArrayList<>();\n-\t\tfor(String attributeName: attrNames) {\n-\t\t\tif(attributeName.startsWith(AttributesManager.NS_USER_ATTR) || attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tuserAndMemberAttributeNames.add(attributeName);\n-\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tmemberResourceAttributeNames.add(attributeName);\n-\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tuserFacilityAttirbuteNames.add(attributeName);\n-\t\t\t} else {\n-\t\t\t\tlog.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\t//Call only if list of attributes is not empty\n-\t\tif(!userAndMemberAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n-\t\tif(!memberResourceAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource, memberResourceAttributeNames));\n-\t\tif(workWithUserAttributes && !userFacilityAttirbuteNames.isEmpty()) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user, facility, userFacilityAttirbuteNames));\n-\t\t}\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tList<Attribute> attributes = getAttributes(sess, resource, member, attrNames, workWithUserAttributes);\n-\n-\t\tif(attrNames.isEmpty()) {\n-\t\t\tattributes.addAll(getAttributes(sess, member, group));\n-\t\t\treturn attributes;\n-\t\t}\n-\n-\t\tList<String> memberGroupAttributeNames = new ArrayList<>();\n-\n-\t\tfor(String attributeName: attrNames) {\n-\t\t\tif(attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tmemberGroupAttributeNames.add(attributeName);\n-\t\t\t}\n-\t\t}\n-\t\tif(!memberGroupAttributeNames.isEmpty()){\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(this.getAttributes(sess, member));\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tattributes.addAll(this.getAttributes(sess, user));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException {\n-\t\tList<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, group, startPartOfName);\n-\t\tIterator<Attribute> i = attrs.iterator();\n-\t\twhile(i.hasNext()) {\n-\t\t\tAttribute attr = i.next();\n-\t\t\tif(attr.getValue() == null) i.remove();\n-\t\t}\n-\t\treturn attrs;\n-\t}\n-\n-\tpublic List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException {\n-\t\tList<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, startPartOfName);\n-\t\tIterator<Attribute> i = attrs.iterator();\n-\t\twhile(i.hasNext()) {\n-\t\t\tAttribute attr = i.next();\n-\t\t\tif(attr.getValue() == null) i.remove();\n-\t\t}\n-\t\treturn attrs;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, member, attrNames);\n-\t}\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, group, attrNames);\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Attribute> attributes = this.getAttributes(sess, member, attrNames);\n-\n-\t\tif(!workWithUserAttributes) return attributes;\n-\t\telse {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tattributes.addAll(this.getAttributes(sess, user, attrNames));\n-\n-\t\t\treturn attributes;\n-\t\t}\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, vo, attrNames);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, UserExtSource ues, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, ues, attrNames);\n-\t}\n-\n-\tpublic List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\tList<Attribute> attributes =  getAttributesManagerImpl().getUserFacilityAttributesForAnyUser(sess, facility);\n-\t\tList<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\tList<Attribute> virtualAttributes = new ArrayList<Attribute>();\n-\t\tfor(User user: facilityUsers) {\n-\t\t\tvirtualAttributes.addAll(getVirtualAttributes(sess, facility, user));\n-\t\t}\n-\n-\t\t//remove virtual attributes with null value\n-\t\tIterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n-\t\twhile(virtualAttributesIterator.hasNext()) {\n-\t\t\tif(virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n-\t\t}\n-\n-\t\tattributes.addAll(virtualAttributes);\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Attribute> attributes =  getAttributesManagerImpl().getAttributes(sess, facility, user);\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n-\n-\t\t//remove virtual attributes with null value\n-\t\tIterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n-\t\twhile(virtualAttributesIterator.hasNext()) {\n-\t\t\tif(virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n-\t\t}\n-\n-\t\tattributes.addAll(virtualAttributes);\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, key);\n-\t}\n-\n-\tpublic List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws  InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getEntitylessAttributes(sess, attrName);\n-\t}\n-\n-\tpublic List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException{\n-\t\treturn getAttributesManagerImpl().getEntitylessKeys(sess, attributeDefinition);\n-\t}\n-\n-\tpublic Attribute getEntitylessAttributeForUpdate(PerunSession sess, String key, String attrName) throws InternalErrorException, AttributeNotExistsException {\n-\t\tAttributeDefinition attrDef = this.getAttributeDefinition(sess, attrName);\n-\t\tAttribute attr = new Attribute(attrDef);\n-\n-\t\tString value = getAttributesManagerImpl().getEntitylessAttrValueForUpdate(sess, attrDef.getId(), key);\n-\n-\t\tif(value != null) {\n-\t\t\tattr.setValue(BeansUtils.stringToAttributeValue(value, attr.getType()));\n-\t\t}\n-\n-\t\treturn attr;\n-\t}\n-\n-\tpublic List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(isCoreAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition)) throw new WrongAttributeAssignmentException(attributeDefinition);\n-\n-\t\treturn getAttributesManagerImpl().getAttributesByAttributeDefinition(sess, attributeDefinition);\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, facility, user);\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, user);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, user);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, user, attrNames);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, host);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, host));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, resource, group);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group));\n-\t\tif(workWithGroupAttributes) {\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, List<String> attrNames, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(attrNames.isEmpty()) return this.getAttributes(sess, resource, group, workWithGroupAttributes);\n-\n-\t\tList<String> groupAttributeNames = new ArrayList<>();\n-\t\tList<String> groupResourceAttributeNames = new ArrayList<>();\n-\n-\t\tfor(String attributeName: attrNames) {\n-\t\t\tif(attributeName.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\tgroupAttributeNames.add(attributeName);\n-\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\tgroupResourceAttributeNames.add(attributeName);\n-\t\t\t} else {\n-\t\t\t\tlog.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\t//Call only if list of attributes is not empty\n-\t\tif(workWithGroupAttributes && !groupAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, group, attrNames));\n-\t\tif(!groupResourceAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group, attrNames));\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, ues);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, ues));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t\t//getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, facility, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, attributesToSet);\n-\t\tlog.debug(\"IMPORTANT: ENTERING CHECK ATTRIBUTES DEPENDENCIES\");\n-\t\tcheckAttributesDependencies(sess, facility, null, attributesToSet);\n-\t\tlog.debug(\"IMPORTANT: EXITING CHECK ATTRIBUTES DEPENDENCIES\");\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, vo, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t\t//getAttributesManagerImpl().setVirtualAttribute(sess, vo, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, vo, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, vo, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, vo, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, group, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, group, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, group, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, group, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute: attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, resource, attribute);\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, resource, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttributes(sess, resource, member, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n-\t\tsetAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n-\t\t// classification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, group, attributesToRemove, workWithUserAttributes);\n-\t\t// fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, group, attribute, false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\t// skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\t// this can handle member-group, member and user attributes too\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, group, attribute, true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, member, group, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, member, group, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, attributesToRemove);\n-\t\tUser user;\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tlog.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n-\t\t}else{\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlog.debug(\"addMember timer: getMember and User [{}].\", Utils.getRunningTime(timer));\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\tboolean changed = false;\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t\t\tif(changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t\t\tif(changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, member, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, member, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, member, attributesToRemove, workWithUserAttributes);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tlog.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n-\t\t} else {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlog.debug(\"addMember timer: getFacility and User [{}].\", Utils.getRunningTime(timer));\n-\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\tboolean changed = false;\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t\t\tif(changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute rm [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute uf [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, resource, member, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, resource, member, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, resource, user, member, attributesToRemove);\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, resource, user, member, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, member, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, member, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, user, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, user, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, facility, user, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, user, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, user, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, user, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, host, attributesToRemove);\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, host, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, host, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, host, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, group, attributesToRemove);\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, resource, group, attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, group, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, group, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, group, attributesToRemove, workWithGroupAttributes);\n-\t\tif (!workWithGroupAttributes) {\n-\t\t\tsetAttributes(sess, resource, group, attributes);\n-\t\t} else {\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tsetAttributeWithoutCheck(sess, resource, group, attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\t\t\tsetAttributeWithoutCheck(sess, group, attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, group, attributesToSet, workWithGroupAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributesToSet, workWithGroupAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, ues, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, ues, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, ues, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, ues, null, attributesToSet);\n-\t}\n-\n-\tpublic void setCoreAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\n-\t\tif(!attribute.getName().equals(\"urn:perun:member:attribute-def:core:status\")) {\n-\t\t\tthrow new InternalErrorException(\"We can set only urn:perun:member:attribute-def:core:status from member's core attributes. Others are not permitted.\");\n-\t\t}\n-\n-\t\t//defensive construction\n-\t\tMember storedMember;\n-\t\ttry {\n-\t\t\tstoredMember = getPerunBl().getMembersManagerBl().getMemberById(sess, member.getId());\n-\t\t} catch(MemberNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\t\tif(!member.equals(storedMember)) throw new InternalErrorException(\"You wan't to store core attribute for member which is not equals to member from DB (with same Id)\");\n-\n-\t\tString methodName = \"set\" + Character.toUpperCase(attribute.getFriendlyName().charAt(0)) + attribute.getFriendlyName().substring(1);\n-\t\tMethod method;\n-\t\ttry {\n-\t\t\tmethod = member.getClass().getMethod(methodName, Class.forName(attribute.getType()));\n-\t\t} catch(NoSuchMethodException ex) {\n-\t\t\tthrow new InternalErrorException(\"Bad core attribute definition. \" + attribute , ex);\n-\t\t} catch(ClassNotFoundException ex) {\n-\t\t\tthrow new InternalErrorException(\"Bad core attribute type. \" + attribute , ex);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tmethod.invoke(member, attribute.getValue());\n-\t\t} catch(IllegalAccessException ex) {\n+    private final static Logger log = LoggerFactory.getLogger(AttributesManagerBlImpl.class);\n+\n+    private final AttributesManagerImplApi attributesManagerImpl;\n+    private PerunBl perunBl;\n+\n+    //Attributes dependencies. Attr => dependent attributes (and inverse version)\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> dependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> strongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+    private Map<AttributeDefinition, Set<AttributeDefinition>> allDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+\n+    private final static int MAX_SIZE_OF_BULK_IN_SQL = 10000;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public AttributesManagerBlImpl(AttributesManagerImplApi attributesManagerImpl) {\n+        this.attributesManagerImpl = attributesManagerImpl;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, facility);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, vo);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, vo));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, group);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getVirtualAttributes(sess, resource);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, resource);\n+    }\n+\n+    public List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, resource, member);\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return getAttributes(sess, resource, member, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+        // get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n+        // filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+        // adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<>();\n+        }\n+        // adds all attributes which names are in attrNames list (virtual and empty too)\n+        return getAttributesManagerImpl().getAttributes(sess, member, group, attrNames);\n+    }\n+\n+    @Override\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        // get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n+        // filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+        // adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            // adds virtual attributes too\n+            attributes.addAll(this.getAttributes(sess, user));\n+            attributes.addAll(this.getAttributes(sess, member));\n+        }\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (attrNames.isEmpty()) {\n+            return this.getAttributes(sess, member, group, workWithUserAttributes);\n+        }\n+\n+        //differentiate between user+member and member-group namespace\n+        List<String> userAndMemberAttributeNames = new ArrayList<>();\n+        List<String> memberGroupAttributeNames = new ArrayList<>();\n+        for (String attrName : attrNames) {\n+            if (attrName.startsWith(AttributesManager.NS_USER_ATTR) || attrName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+                userAndMemberAttributeNames.add(attrName);\n+            } else if (attrName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                memberGroupAttributeNames.add(attrName);\n+            } else {\n+                log.error(\"Attribute defined by \" + attrName + \" is not in supported namespace. Skip it there!\");\n+            }\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        if (!userAndMemberAttributeNames.isEmpty()) {\n+            attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n+        }\n+        if (!memberGroupAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n+        }\n+\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        // get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, resource, member);\n+        List<Attribute> virtualAttributes = getVirtualAttributes(sess, resource, member);\n+        //remove virtual attributes with null value\n+        Iterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n+        while (virtualAttributesIterator.hasNext()) {\n+            if (virtualAttributesIterator.next().getValue() == null) {\n+                virtualAttributesIterator.remove();\n+            }\n+        }\n+        // adds non-empty non-virtual attributes\n+        attributes.addAll(virtualAttributes);\n+\n+        if (workWithUserAttributes) {\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+        }\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (attrNames.isEmpty()) {\n+            return this.getAttributes(sess, resource, member, workWithUserAttributes);\n+        }\n+\n+        List<String> userAndMemberAttributeNames = new ArrayList<>();\n+        List<String> memberResourceAttributeNames = new ArrayList<>();\n+        List<String> userFacilityAttirbuteNames = new ArrayList<>();\n+        for (String attributeName : attrNames) {\n+            if (attributeName.startsWith(AttributesManager.NS_USER_ATTR) || attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+                userAndMemberAttributeNames.add(attributeName);\n+            } else if (attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                memberResourceAttributeNames.add(attributeName);\n+            } else if (attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                userFacilityAttirbuteNames.add(attributeName);\n+            } else {\n+                log.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n+            }\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        //Call only if list of attributes is not empty\n+        if (!userAndMemberAttributeNames.isEmpty()) {\n+            attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n+        }\n+        if (!memberResourceAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource, memberResourceAttributeNames));\n+        }\n+        if (workWithUserAttributes && !userFacilityAttirbuteNames.isEmpty()) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user, facility, userFacilityAttirbuteNames));\n+        }\n+\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Group group, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        List<Attribute> attributes = getAttributes(sess, resource, member, attrNames, workWithUserAttributes);\n+\n+        if (attrNames.isEmpty()) {\n+            attributes.addAll(getAttributes(sess, member, group));\n+            return attributes;\n+        }\n+\n+        List<String> memberGroupAttributeNames = new ArrayList<>();\n+\n+        for (String attributeName : attrNames) {\n+            if (attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                memberGroupAttributeNames.add(attributeName);\n+            }\n+        }\n+        if (!memberGroupAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n+        }\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(this.getAttributes(sess, member));\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            attributes.addAll(this.getAttributes(sess, user));\n+        }\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException {\n+        List<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, group, startPartOfName);\n+        Iterator<Attribute> i = attrs.iterator();\n+        while (i.hasNext()) {\n+            Attribute attr = i.next();\n+            if (attr.getValue() == null) {\n+                i.remove();\n+            }\n+        }\n+        return attrs;\n+    }\n+\n+    public List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException {\n+        List<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, startPartOfName);\n+        Iterator<Attribute> i = attrs.iterator();\n+        while (i.hasNext()) {\n+            Attribute attr = i.next();\n+            if (attr.getValue() == null) {\n+                i.remove();\n+            }\n+        }\n+        return attrs;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<Attribute>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, member, attrNames);\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<Attribute>();\n+        }\n+        List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, group, attrNames);\n+\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n+        List<Attribute> attributes = this.getAttributes(sess, member, attrNames);\n+\n+        if (!workWithUserAttributes) {\n+            return attributes;\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            attributes.addAll(this.getAttributes(sess, user, attrNames));\n+\n+            return attributes;\n+        }\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<Attribute>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, vo, attrNames);\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, UserExtSource ues, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<Attribute>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, ues, attrNames);\n+    }\n+\n+    public List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException {\n+        List<Attribute> attributes = getAttributesManagerImpl().getUserFacilityAttributesForAnyUser(sess, facility);\n+        List<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+        List<Attribute> virtualAttributes = new ArrayList<Attribute>();\n+        for (User user : facilityUsers) {\n+            virtualAttributes.addAll(getVirtualAttributes(sess, facility, user));\n+        }\n+\n+        //remove virtual attributes with null value\n+        Iterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n+        while (virtualAttributesIterator.hasNext()) {\n+            if (virtualAttributesIterator.next().getValue() == null) {\n+                virtualAttributesIterator.remove();\n+            }\n+        }\n+\n+        attributes.addAll(virtualAttributes);\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, facility, user);\n+        List<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n+\n+        //remove virtual attributes with null value\n+        Iterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n+        while (virtualAttributesIterator.hasNext()) {\n+            if (virtualAttributesIterator.next().getValue() == null) {\n+                virtualAttributesIterator.remove();\n+            }\n+        }\n+\n+        attributes.addAll(virtualAttributes);\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAttributes(sess, key);\n+    }\n+\n+    public List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws InternalErrorException {\n+        return getAttributesManagerImpl().getEntitylessAttributes(sess, attrName);\n+    }\n+\n+    public List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+        return getAttributesManagerImpl().getEntitylessKeys(sess, attributeDefinition);\n+    }\n+\n+    public Attribute getEntitylessAttributeForUpdate(PerunSession sess, String key, String attrName) throws InternalErrorException, AttributeNotExistsException {\n+        AttributeDefinition attrDef = this.getAttributeDefinition(sess, attrName);\n+        Attribute attr = new Attribute(attrDef);\n+\n+        String value = getAttributesManagerImpl().getEntitylessAttrValueForUpdate(sess, attrDef.getId(), key);\n+\n+        if (value != null) {\n+            attr.setValue(BeansUtils.stringToAttributeValue(value, attr.getType()));\n+        }\n+\n+        return attr;\n+    }\n+\n+    public List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (isCoreAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition)) {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+\n+        return getAttributesManagerImpl().getAttributesByAttributeDefinition(sess, attributeDefinition);\n+    }\n+\n+    public List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, facility, user);\n+    }\n+\n+    public List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getVirtualAttributes(sess, user);\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, user);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n+        if (attrNames.isEmpty()) {\n+            return new ArrayList<Attribute>();\n+        }\n+\n+        return getAttributesManagerImpl().getAttributes(sess, user, attrNames);\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, host);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        //adds non-empty non-virtual attributes\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, host));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return getAttributesManagerImpl().getAttributes(sess, resource, group);\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group));\n+        if (workWithGroupAttributes) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n+        }\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, List<String> attrNames, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (attrNames.isEmpty()) {\n+            return this.getAttributes(sess, resource, group, workWithGroupAttributes);\n+        }\n+\n+        List<String> groupAttributeNames = new ArrayList<>();\n+        List<String> groupResourceAttributeNames = new ArrayList<>();\n+\n+        for (String attributeName : attrNames) {\n+            if (attributeName.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n+                groupAttributeNames.add(attributeName);\n+            } else if (attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                groupResourceAttributeNames.add(attributeName);\n+            } else {\n+                log.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n+            }\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        //Call only if list of attributes is not empty\n+        if (workWithGroupAttributes && !groupAttributeNames.isEmpty()) {\n+            attributes.addAll(this.getAttributes(sess, group, attrNames));\n+        }\n+        if (!groupResourceAttributeNames.isEmpty()) {\n+            attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group, attrNames));\n+        }\n+\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, member));\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException {\n+        //get virtual attributes\n+        List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, ues);\n+        //filter out virtual attributes with null value\n+        Iterator<Attribute> attributeIterator = attributes.iterator();\n+        while (attributeIterator.hasNext()) {\n+            if (attributeIterator.next().getValue() == null) {\n+                attributeIterator.remove();\n+            }\n+        }\n+\n+        attributes.addAll(getAttributesManagerImpl().getAttributes(sess, ues));\n+        return attributes;\n+    }\n+\n+    public void setAttributes(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, facility, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                    //getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n+                } else {\n+                    setAttributeWithoutCheck(sess, facility, attribute);\n+                }\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, facility, attributesToSet);\n+        log.debug(\"IMPORTANT: ENTERING CHECK ATTRIBUTES DEPENDENCIES\");\n+        checkAttributesDependencies(sess, facility, null, attributesToSet);\n+        log.debug(\"IMPORTANT: EXITING CHECK ATTRIBUTES DEPENDENCIES\");\n+    }\n+\n+    public void setAttributes(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, vo, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                    //getAttributesManagerImpl().setVirtualAttribute(sess, vo, attribute);\n+                } else {\n+                    setAttributeWithoutCheck(sess, vo, attribute);\n+                }\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, vo, attributesToSet);\n+        this.checkAttributesDependencies(sess, vo, null, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, group, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, group, attribute);\n+                }\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, group, attributesToSet);\n+        this.checkAttributesDependencies(sess, group, null, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                setAttributeWithoutCheck(sess, resource, attribute);\n+            }\n+        }\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, resource, attributesToSet);\n+        this.checkAttributesDependencies(sess, resource, null, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        setAttributes(sess, resource, member, attributes, false);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n+        setAttributes(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n+        // classification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, member, group, attributesToRemove, workWithUserAttributes);\n+        // fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        if (!workWithUserAttributes) {\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    setAttributeWithoutCheck(sess, member, group, attribute, false);\n+                }\n+            }\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            for (Attribute attribute : attributesToSet) {\n+                // skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    // this can handle member-group, member and user attributes too\n+                    setAttributeWithoutCheck(sess, member, group, attribute, true);\n+                }\n+            }\n+        }\n+\n+        // if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, member, group, attributesToSet, workWithUserAttributes);\n+        this.checkAttributesDependencies(sess, member, group, attributesToSet, workWithUserAttributes);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, member, attributesToRemove);\n+        User user;\n+        if (!workWithUserAttributes) {\n+            long timer = Utils.startTimer();\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            }\n+            log.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n+        } else {\n+            long timer = Utils.startTimer();\n+            user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            log.debug(\"addMember timer: getMember and User [{}].\", Utils.getRunningTime(timer));\n+            for (Attribute attribute : attributesToSet) {\n+                boolean changed = false;\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, user, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, member, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, member, attributesToSet, workWithUserAttributes);\n+        this.checkAttributesDependencies(sess, member, attributesToSet, workWithUserAttributes);\n+    }\n+\n+\n+    public void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, member, attributesToRemove, workWithUserAttributes);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        if (!workWithUserAttributes) {\n+            long timer = Utils.startTimer();\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+                }\n+            }\n+            log.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n+        } else {\n+            long timer = Utils.startTimer();\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            log.debug(\"addMember timer: getFacility and User [{}].\", Utils.getRunningTime(timer));\n+\n+            for (Attribute attribute : attributesToSet) {\n+                boolean changed = false;\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute rm [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, facility, user, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute uf [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, user, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        timer = Utils.startTimer();\n+                        changed = setAttributeWithoutCheck(sess, member, attribute);\n+                        if (changed) {\n+                            log.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, resource, member, attributesToSet, workWithUserAttributes);\n+        this.checkAttributesDependencies(sess, resource, member, attributesToSet, workWithUserAttributes);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, facility, resource, user, member, attributesToRemove);\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    setAttributeWithoutCheck(sess, facility, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    setAttributeWithoutCheck(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    setAttributeWithoutCheck(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, facility, resource, user, member, attributesToSet);\n+        this.checkAttributesDependencies(sess, resource, member, user, facility, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, member, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, member, attributesToSet);\n+        this.checkAttributesDependencies(sess, member, null, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, facility, user, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                setAttributeWithoutCheck(sess, facility, user, attribute);\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, facility, user, attributesToSet);\n+        this.checkAttributesDependencies(sess, facility, user, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, user, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, user, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, user, attributesToSet);\n+        this.checkAttributesDependencies(sess, user, null, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, host, attributesToRemove);\n+        for (Attribute attribute : attributesToSet) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, host, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, host, attributesToSet);\n+        this.checkAttributesDependencies(sess, host, null, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, group, attributesToRemove);\n+        for (Attribute attribute : attributesToSet) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                setAttributeWithoutCheck(sess, resource, group, attribute);\n+            }\n+        }\n+        checkAttributesValue(sess, resource, group, attributesToSet);\n+        this.checkAttributesDependencies(sess, resource, group, attributesToSet);\n+    }\n+\n+    public void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, resource, group, attributesToRemove, workWithGroupAttributes);\n+        if (!workWithGroupAttributes) {\n+            setAttributes(sess, resource, group, attributes);\n+        } else {\n+            for (Attribute attribute : attributesToSet) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                        setAttributeWithoutCheck(sess, resource, group, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n+                        setAttributeWithoutCheck(sess, group, attribute);\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, resource, group, attributesToSet, workWithGroupAttributes);\n+            this.checkAttributesDependencies(sess, resource, group, attributesToSet, workWithGroupAttributes);\n+        }\n+    }\n+\n+    public void setAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        // clasification of attributes to attributes to remove and attributes to set\n+        List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+        List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+        convertEmptyAttrValueToNull(attributes);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                attributesToRemove.add(attribute);\n+            } else {\n+                attributesToSet.add(attribute);\n+            }\n+        }\n+        removeAttributes(sess, ues, attributesToRemove);\n+        //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+        for (Attribute attribute : attributesToSet) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+                } else {\n+                    setAttributeWithoutCheck(sess, ues, attribute);\n+                }\n+            }\n+        }\n+\n+        //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+        checkAttributesValue(sess, ues, attributesToSet);\n+        this.checkAttributesDependencies(sess, ues, null, attributesToSet);\n+    }\n+\n+    public void setCoreAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+\n+        if (!attribute.getName().equals(\"urn:perun:member:attribute-def:core:status\")) {\n+            throw new InternalErrorException(\"We can set only urn:perun:member:attribute-def:core:status from member's core attributes. Others are not permitted.\");\n+        }\n+\n+        //defensive construction\n+        Member storedMember;\n+        try {\n+            storedMember = getPerunBl().getMembersManagerBl().getMemberById(sess, member.getId());\n+        } catch (MemberNotExistsException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+        if (!member.equals(storedMember)) {\n+            throw new InternalErrorException(\"You wan't to store core attribute for member which is not equals to member from DB (with same Id)\");\n+        }\n+\n+        String methodName = \"set\" + Character.toUpperCase(attribute.getFriendlyName().charAt(0)) + attribute.getFriendlyName().substring(1);\n+        Method method;\n+        try {\n+            method = member.getClass().getMethod(methodName, Class.forName(attribute.getType()));\n+        } catch (NoSuchMethodException ex) {\n+            throw new InternalErrorException(\"Bad core attribute definition. \" + attribute, ex);\n+        } catch (ClassNotFoundException ex) {\n+            throw new InternalErrorException(\"Bad core attribute type. \" + attribute, ex);\n+        }\n+\n+        try {\n+            method.invoke(member, attribute.getValue());\n+        } catch (IllegalAccessException ex) {\n+            throw new InternalErrorException(ex);\n+        } catch (InvocationTargetException ex) {\n+            throw new WrongAttributeValueException(ex);\n+        } catch (IllegalArgumentException ex) {\n+            throw new WrongAttributeValueException(attribute, \"Probably bad type of value\", ex);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        member = getPerunBl().getMembersManagerBl().updateMember(sess, member);\n+    }\n+\n+    public List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAllSimilarAttributeNames(sess, startingPartOfAttributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_FACILITY_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, facility, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_VO_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, vo, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        String namespace = getNamespaceFromAttributeName(attributeName);\n+        if (!namespace.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, group, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_RESOURCE_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, resource, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, resource, member, attributeName);\n+    }\n+\n+    @Override\n+    public Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        // check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, member, group, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, member, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, facility, user, attributeName);\n+\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_USER_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, user, attributeName);\n+    }\n+\n+\n+    public Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        if (!attributeName.startsWith(AttributesManager.NS_HOST_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+        }\n+        return getAttributesManagerImpl().getAttribute(sess, host, attributeName);\n+\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+        }\n+        return getAttributesManagerImpl().getAttribute(sess, resource, group, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        if (!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+        }\n+        return getAttributesManagerImpl().getAttribute(sess, key, attributeName);\n+    }\n+\n+    public Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        //check namespace\n+        if (!attributeName.startsWith(AttributesManager.NS_UES_ATTR)) {\n+            throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+        }\n+\n+        return getAttributesManagerImpl().getAttribute(sess, ues, attributeName);\n+    }\n+\n+    public AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException {\n+        return getAttributesManagerImpl().getAttributeDefinition(sess, attributeName);\n+    }\n+\n+    public List<AttributeDefinition> getAttributesDefinitionWithRights(PerunSession sess, List<PerunBean> entities) throws InternalErrorException, AttributeNotExistsException {\n+        List<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();\n+\n+        //if there is no entities, so no attribute definition will be returned => empty array list of ADs\n+        if (entities == null || entities.isEmpty()) {\n+            return attributeDefinitions;\n+        }\n+        //or fill list by all attributeDefinitions\n+        else {\n+            attributeDefinitions = this.getAttributesDefinition(sess);\n+        }\n+\n+        //Prepare possible objects\n+        User user = null;\n+        Member member = null;\n+        Vo vo = null;\n+        Resource resource = null;\n+        Group group = null;\n+        Facility facility = null;\n+        Host host = null;\n+        UserExtSource ues = null;\n+\n+        //Iterate through all entities and fill those which are in list of entities\n+        for (PerunBean entity : entities) {\n+            if (entity instanceof User) {\n+                user = (User) entity;\n+            } else if (entity instanceof Member) {\n+                member = (Member) entity;\n+            } else if (entity instanceof Vo) {\n+                vo = (Vo) entity;\n+            } else if (entity instanceof Resource) {\n+                resource = (Resource) entity;\n+            } else if (entity instanceof Group) {\n+                group = (Group) entity;\n+            } else if (entity instanceof Facility) {\n+                facility = (Facility) entity;\n+            } else if (entity instanceof Host) {\n+                host = (Host) entity;\n+            } else if (entity instanceof UserExtSource) {\n+                ues = (UserExtSource) entity;\n+            }\n+            //Else skip not identified entity (log it)\n+            else {\n+                log.debug(\"In method GetAttributesDefinitionWithRights there are entity which is not identified correctly and will be skipped: \" + entity);\n+            }\n+        }\n+\n+        //Iterate through all attributesDefinitions and remove those which are not in the possible namespace or user in session has no rights to read them\n+        Iterator<AttributeDefinition> iterator = attributeDefinitions.iterator();\n+        while (iterator.hasNext()) {\n+            AttributeDefinition attrDef = iterator.next();\n+\n+            if (this.isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR) && user != null && facility != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, facility)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, facility));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR) && member != null && resource != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, resource)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, resource));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR) && member != null && group != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, group)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, group));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR) && group != null && resource != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, resource)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, resource));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_USER_ATTR) && user != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, null));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_ATTR) && member != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, null));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_VO_ATTR) && vo != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, vo, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, vo, null));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR) && resource != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, resource, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, resource, null));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_GROUP_ATTR) && group != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, null));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, NS_FACILITY_ATTR) && facility != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, facility, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, facility, null));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR) && host != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, host, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, host, null));\n+                }\n+            } else if (this.isFromNamespace(sess, attrDef, AttributesManager.NS_UES_ATTR) && ues != null) {\n+                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, ues, null)) {\n+                    iterator.remove();\n+                } else {\n+                    attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, ues, null));\n+                }\n+            } else {\n+                //if there is another namespace or if there are no entities (which are needed for the namespace) remove this attributeDefinition\n+                iterator.remove();\n+            }\n+        }\n+\n+        return attributeDefinitions;\n+    }\n+\n+    public List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAttributesDefinition(sess);\n+    }\n+\n+    public List<AttributeDefinition> getAttributesDefinition(PerunSession sess, List<String> listOfAttributesNames) throws AttributeNotExistsException, InternalErrorException {\n+        List<AttributeDefinition> listOfAttributeDefinitions = new ArrayList<AttributeDefinition>();\n+        for (String name : listOfAttributesNames) {\n+            listOfAttributeDefinitions.add(this.getAttributeDefinition(sess, name));\n+        }\n+        return listOfAttributeDefinitions;\n+    }\n+\n+    public AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException {\n+        return getAttributesManagerImpl().getAttributeDefinitionById(sess, id);\n+    }\n+\n+    public List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException {\n+        return getAttributesManagerImpl().getAttributesDefinitionByNamespace(sess, namespace);\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, vo, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        AttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n+\n+        if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+            Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, member, id);\n+            getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+            return attribute;\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+            //user-facility attribues\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+\n+            return getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n+\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n+            //user and user core attributes\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            return getAttributesManagerImpl().getAttributeById(sess, user, id);\n+        } else {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+    }\n+\n+    @Override\n+    public Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+        AttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n+\n+        if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+            Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, group, id);\n+            getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+            return attribute;\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_ATTR)) {\n+            return getAttributesManagerImpl().getAttributeById(sess, member, id);\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n+            //user and user core attributes\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            return getAttributesManagerImpl().getAttributeById(sess, user, id);\n+        } else {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, user, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, host, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, group, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, group, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+        return attribute;\n+    }\n+\n+    public Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+        Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, ues, id);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+        return attribute;\n+    }\n+\n+    public void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n+        //fill attributes and get back only those which were really filled with new value\n+        List<Attribute> filledAttributes = this.fillAttributes(sess, facility, resource, user, member, attributes, true);\n+\n+        //Remove all filledAttributes from all attributes list\n+        Iterator<Attribute> iterAttr = attributes.iterator();\n+        while (iterAttr.hasNext()) {\n+            Attribute attributeFromAllAttrs = iterAttr.next();\n+            for (Attribute attributeFromFillAttrs : filledAttributes) {\n+                if (attributeFromAllAttrs.getName().equals(attributeFromFillAttrs.getName())) {\n+                    iterAttr.remove();\n+                    break;\n+                }\n+            }\n+        }\n+\n+        //Set all filledAttributes withoutCheck\n+        for (Attribute attribute : filledAttributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, facility, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    this.setAttributeWithoutCheck(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+\n+        //Join all attributes and filled attributes together\n+        attributes.addAll(filledAttributes);\n+\n+        //refresh all virtual attributes with new value\n+        for (Attribute attr : attributes) {\n+            if (this.isVirtAttribute(sess, attr)) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, resource, member, attr.getName()).getValue());\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, facility, user, attr.getName()).getValue());\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, user, attr.getName()).getValue());\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_ATTR)) {\n+                    attr.setValue(this.getAttribute(sess, member, attr.getName()).getValue());\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+        }\n+\n+        //Check all attributes\n+        checkAttributesValue(sess, facility, resource, user, member, attributes);\n+\n+        //Check all attributes dependencies\n+        this.checkAttributesDependencies(sess, resource, member, user, facility, attributes);\n+    }\n+\n+    public void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException, AttributeNotExistsException {\n+        //get all attributes (for member, resource, facility and user) with values\n+        List<Attribute> attributes = this.getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n+\n+        this.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n+    }\n+\n+    public void setRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n+        //get all attributes (for member, resource, facility, user and service) with values\n+        List<Attribute> attributes = this.getRequiredAttributes(sess, service, facility, resource, user, member);\n+\n+        this.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n+    }\n+\n+    public void setAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, facility, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, facility, attribute)) {\n+            checkAttributeValue(sess, facility, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(facility, null, attribute));\n+        }\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //TODO\n+            throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+            //getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, facility, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, facility);\n+            getAttributesManagerImpl().changedAttributeHook(sess, facility, attribute);\n+        }\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, vo, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, vo, attribute)) {\n+            checkAttributeValue(sess, vo, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(vo, null, attribute));\n+        }\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_VO_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //TODO\n+            throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, vo, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, vo);\n+            getAttributesManagerImpl().changedAttributeHook(sess, vo, attribute);\n+        }\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, group, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, group, attribute)) {\n+            checkAttributeValue(sess, group, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(group, null, attribute));\n+        }\n+    }\n+\n+    public void setAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, resource, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, resource, attribute)) {\n+            checkAttributeValue(sess, resource, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(resource, null, attribute));\n+        }\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            try {\n+                changed = getAttributesManagerImpl().setVirtualAttribute(sess, resource, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, resource, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, resource);\n+            getAttributesManagerImpl().changedAttributeHook(sess, resource, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //TODO\n+            throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, group, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, group);\n+            getAttributesManagerImpl().changedAttributeHook(sess, group, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, resource, member, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n+            checkAttributeValue(sess, resource, member, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n+        }\n+    }\n+\n+    @Override\n+    public void setAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, AttributeNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, member, group, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, member, group, attribute, false)) {\n+            checkAttributeValue(sess, member, group, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(member, group, attribute));\n+        }\n+    }\n+\n+    public void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, resource, member, attribute);\n+            return;\n+        }\n+        if (!workWithUserAttributes) {\n+            if (setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n+                this.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n+                checkAttributeValue(sess, resource, member, attribute);\n+            }\n+        } else {\n+            if (setAttributeWithoutCheck(sess, resource, member, attribute, true)) {\n+                List<Attribute> listOfAttributes = new ArrayList<Attribute>();\n+                listOfAttributes.add(attribute);\n+                checkAttributesValue(sess, resource, member, listOfAttributes, workWithUserAttributes);\n+                this.checkAttributesDependencies(sess, resource, member, listOfAttributes, workWithUserAttributes);\n+            }\n+        }\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+            //TODO better exception here\n+            try {\n+                changed = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+\n+            //FIXME update changed variable\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, facility, user, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, facility, user);\n+            getAttributesManagerImpl().changedAttributeHook(sess, facility, user, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+            //NS_MEMBER_RESOURCE_ATTR\n+            if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                //TODO\n+                throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+            } else {\n+                changed = getAttributesManagerImpl().setAttribute(sess, resource, member, attribute);\n+                if (changed) {\n+                    getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, resource, member);\n+                    getAttributesManagerImpl().changedAttributeHook(sess, resource, member, attribute);\n+                }\n+            }\n+        } else if (workWithUserAttributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                //NS_USER_FACILITY_ATTR\n+                User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, facility, user, attribute);\n+                }\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                //NS_USER_ATTR\n+                User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    //TODO\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, user, attribute);\n+                }\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+        return changed;\n+    }\n+\n+    @Override\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Member member, Group group, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+            if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, group, attribute);\n+            } else {\n+                changed = getAttributesManagerImpl().setAttribute(sess, member, group, attribute);\n+                if (changed) {\n+                    getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, member, group);\n+                    getAttributesManagerImpl().changedAttributeHook(sess, member, group, attribute);\n+                }\n+            }\n+        } else if (workWithUserAttributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, user, attribute);\n+                }\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+                } else {\n+                    changed = setAttributeWithoutCheck(sess, member, attribute);\n+                }\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, member, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, member, attribute)) {\n+            checkAttributeValue(sess, member, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(member, null, attribute));\n+        }\n+    }\n+\n+    public void setAttributeInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        setAttribute(sess, member, attribute);\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR);\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //TODO better exception here\n+            try {\n+                return getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+\n+            //FIXME update \"changed\" variable\n+\n+        } else if (isCoreAttribute(sess, attribute)) {\n+            //TODO better exception\n+            try {\n+                setCoreAttributeWithoutCheck(sess, member, attribute);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            } catch (WrongAttributeValueException ex) {\n+                throw new InternalErrorException(ex);\n+            }\n+            changed = true; //FIXME check if attribute is acctualy changed\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, member, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, member);\n+            getAttributesManagerImpl().changedAttributeHook(sess, member, attribute);\n+        }\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, facility, user, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, facility, user, attribute)) {\n+            checkAttributeValue(sess, facility, user, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(facility, user, attribute));\n+        }\n+    }\n+\n+    public void setAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, user, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, user, attribute)) {\n+            checkAttributeValue(sess, user, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(user, null, attribute));\n+        }\n+    }\n+\n+    public void setAttributeInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        setAttribute(sess, user, attribute);\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            return getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, user, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, user);\n+            getAttributesManagerImpl().changedAttributeHook(sess, user, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, host, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, host, attribute)) {\n+            checkAttributeValue(sess, host, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(host, null, attribute));\n+        }\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //TODO\n+            throw new InternalErrorException(\"Virtual attribute \" + attribute + \" can't be set this way yet. Please set physical attribute.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, host, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, host);\n+            //TODO this method not existed yet!\n+            //getAttributesManagerImpl().changedAttributeHook(sess, host, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, resource, group, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, resource, group, attribute)) {\n+            this.checkAttributeDependencies(sess, new RichAttribute(resource, group, attribute));\n+            checkAttributeValue(sess, resource, group, attribute);\n+        }\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //FIXME Zatim je zakazane nastavovani virtualnich atributu group_resource\n+\n+            Attribute storedAttribute;\n+            try {\n+                storedAttribute = getAttribute(sess, resource, group, attribute.getName());\n+            } catch (AttributeNotExistsException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+            if (!(storedAttribute.getValue() == null ? attribute.getValue() == null : storedAttribute.getValue().equals(attribute.getValue()))) { //unless attribute and storedAttribute have equals value\n+                //FIXME\n+                if (attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGID\") ||\n+                        attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGroupName\")) {\n+                    return getAttributesManagerImpl().setVirtualAttribute(sess, resource, group, attribute);\n+                } else {\n+                    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute. \" + attribute);\n+                }\n+            } else {\n+                return false;\n+            }\n+\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, resource, group, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, group, resource);\n+            getAttributesManagerImpl().changedAttributeHook(sess, resource, group, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            return getAttributesManagerImpl().setVirtualAttribute(sess, ues, attribute);\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, ues, attribute);\n+        }\n+\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, ues);\n+            getAttributesManagerImpl().changedAttributeHook(sess, ues, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public boolean setAttributeWithoutCheck(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+        if (isVirtAttribute(sess, attribute)) {\n+            //TODO\n+            throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+        } else {\n+            changed = getAttributesManagerImpl().setAttribute(sess, key, attribute);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, key);\n+            //TODO this method not existed yet\n+            //getAttributesManagerImpl().changedAttributeHook(sess, key, attribute);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public void setAttribute(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, key, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, key, attribute)) {\n+            checkAttributeValue(sess, key, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(key, null, attribute));\n+        }\n+    }\n+\n+    public void setAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null) {\n+            removeAttribute(sess, ues, attribute);\n+            return;\n+        }\n+        if (setAttributeWithoutCheck(sess, ues, attribute)) {\n+            checkAttributeValue(sess, ues, attribute);\n+            this.checkAttributeDependencies(sess, new RichAttribute(ues, null, attribute));\n+        }\n+    }\n+\n+    public AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeDefinitionExistsException {\n+        Utils.notNull(attribute.getName(), \"attribute.getName\");\n+        Utils.notNull(attribute.getNamespace(), \"attribute.getNamespace\");\n+        Utils.notNull(attribute.getFriendlyName(), \"attribute.getFriendlyName\");\n+        Utils.notNull(attribute.getType(), \"attribute.getType\");\n+\n+        //check if attribute.nameSpace is valid nameSpace\n+        if (!isCorrectNameSpace(attribute.getNamespace())) {\n+            throw new InternalErrorException(\"Incorrect namespace \" + attribute.getNamespace());\n+        }\n+\n+        //check if attribute.type is valid class name\n+        try {\n+            if (!attribute.getType().equals(BeansUtils.largeStringClassName) &&\n+                    !attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n+                Class.forName(attribute.getType());\n+            }\n+        } catch (ClassNotFoundException ex) {\n+            //TODO dat nejakou jinou vyjimku\n+            throw new InternalErrorException(\"Wrong attribute type\", ex);\n+        } catch (RuntimeException ex) {\n+            throw new InternalErrorException(ex);\n+        }\n+\n+        getPerunBl().getAuditer().log(sess, \"{} created.\", attribute);\n+        return getAttributesManagerImpl().createAttribute(sess, attribute);\n+    }\n+\n+    private boolean isCorrectNameSpace(String value) {\n+        for (String entityType : AttributesManager.ENTITY_TYPES) {\n+            if (value.matches(\"urn:perun:\" + entityType + \":attribute-def:(def|opt|virt|core)\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+        //Remove services' required attributes\n+        //TODO\n+\n+        //Remove attribute and all it's values\n+        getPerunBl().getAuditer().log(sess, \"{} deleted.\", attribute);\n+        this.deleteAllAttributeAuthz(sess, attribute);\n+        getAttributesManagerImpl().deleteAttribute(sess, attribute);\n+    }\n+\n+    public void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+        getPerunBl().getAuditer().log(sess, \"All authorization information were deleted for {}.\", attribute);\n+        getAttributesManagerImpl().deleteAllAttributeAuthz(sess, attribute);\n+    }\n+\n+    public void deleteAttribute(PerunSession sess, AttributeDefinition attributeDefinition, boolean force) throws InternalErrorException {\n+        throw new InternalErrorException(\"Not implemented yet!\");\n+    }\n+\n+    public List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getResourceRequiredAttributesDefinition(sess, resource);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return getResourceRequiredAttributes(sess, resourceToGetServicesFrom, resource, member, false);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n+\n+        if (workWithUserAttributes) {\n+            User user;\n+            Facility facility;\n+            try {\n+                user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityById(sess, resource.getFacilityId());\n+            } catch (UserNotExistsException e) {\n+                throw new ConsistencyErrorException(\"Member has non-existent user.\", e);\n+            } catch (FacilityNotExistsException e) {\n+                throw new ConsistencyErrorException(\"Resource has non-existent facility.\", e);\n+            }\n+\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+        }\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, group, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        List<Attribute> attributes = new ArrayList<>();\n+\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, group));\n+\n+        if (workWithUserAttributes) {\n+            User user;\n+            try {\n+                user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+            } catch (UserNotExistsException e) {\n+                throw new ConsistencyErrorException(\"Member has non-existent user.\", e);\n+            }\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+        }\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Resource resource) throws InternalErrorException {\n+        List<Integer> serviceIds = new ArrayList<>();\n+        for (Service service : services) {\n+            serviceIds.add(service.getId());\n+        }\n+        return this.attributesManagerImpl.getRequiredAttributes(sess, resource, serviceIds);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+        return this.getResourceRequiredAttributes(sess, resource, resource);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return this.getResourceRequiredAttributes(sess, resource, resource, member);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return this.getResourceRequiredAttributes(sess, resource, resource, member, workWithUserAttributes);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+        List<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, facility, user);\n+        Set<Attribute> attributes = new HashSet<Attribute>();\n+        for (Resource resource : resources) {\n+            attributes.addAll(this.getResourceRequiredAttributes(sess, resource, facility, user));\n+        }\n+        return new ArrayList<Attribute>(attributes);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, User user) throws InternalErrorException {\n+        List<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, user);\n+        Set<Attribute> attributes = new HashSet<Attribute>();\n+        for (Resource resource : resources) {\n+            attributes.addAll(this.getResourceRequiredAttributes(sess, resource, user));\n+        }\n+        return new ArrayList<Attribute>(attributes);\n+\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n+        Set<Attribute> attributes = new HashSet<Attribute>();\n+        for (Resource resource : resources) {\n+            attributes.addAll(this.getResourceRequiredAttributes(sess, resource, member));\n+        }\n+\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            attributes.addAll(this.getRequiredAttributes(sess, user));\n+        }\n+        return new ArrayList<Attribute>(attributes);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group));\n+\n+        if (workWithGroupAttributes) {\n+            attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group));\n+        }\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, host);\n+    }\n+\n+    public List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributesDefinition(sess, service);\n+    }\n+\n+    public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, facility);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, vo);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return getRequiredAttributes(sess, service, resource, member, false);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (!workWithUserAttributes) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member);\n+        }\n+\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+        return attributes;\n+    }\n+\n+    public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, List<Member> members, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        // check if members are from the same VO as resource\n+        if (members.isEmpty()) {\n+            return new HashMap<>();\n+        }\n+\n+        for (Member m : members) {\n+            this.checkMemberIsFromTheSameVoLikeResource(sess, m, resource);\n+        }\n+\n+        if (!workWithUserAttributes) {\n+            HashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n+            HashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n+\n+            for (Member mem : memberAttributes.keySet()) {\n+                if (!resourceMemberAttributes.containsKey(mem)) {\n+                    resourceMemberAttributes.put(mem, memberAttributes.get(mem));\n+                } else {\n+                    resourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n+                }\n+            }\n+            return resourceMemberAttributes;\n+        }\n+\n+        // get list of users, save user id as a key and list of member objects as a value\n+        List<User> users = new ArrayList<>();\n+        HashMap<User, List<Member>> userMemberIdMap = new HashMap<>();\n+\n+        // Maps user ids to member objects and fills list of users\n+        for (Member m : members) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, m);\n+            users.add(user);\n+            if (userMemberIdMap.containsKey(user)) {\n+                userMemberIdMap.get(user).add(m);\n+            } else {\n+                userMemberIdMap.put(user, Arrays.asList(m));\n+            }\n+        }\n+\n+        // get facility if null\n+        if (facility == null) {\n+            facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        }\n+\n+        // get 4 maps from Impl getRequiredAttributes\n+        HashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n+        HashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n+        HashMap<User, List<Attribute>> userFacilityAttributes = getRequiredAttributes(sess, service, facility, users);\n+        HashMap<User, List<Attribute>> userAttributes = getRequiredAttributes(sess, service, users);\n+\n+        for (Member mem : memberAttributes.keySet()) {\n+            if (!resourceMemberAttributes.containsKey(mem)) {\n+                resourceMemberAttributes.put(mem, memberAttributes.get(mem));\n+            } else {\n+                resourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n+            }\n+        }\n+\n+        for (User user : userFacilityAttributes.keySet()) {\n+            // List of members for given user\n+            List<Member> mems = userMemberIdMap.get(user);\n+            for (Member mem : mems) {\n+                if (!resourceMemberAttributes.containsKey(mem)) {\n+                    resourceMemberAttributes.put(mem, userFacilityAttributes.get(user));\n+                } else {\n+                    resourceMemberAttributes.get(mem).addAll(userFacilityAttributes.get(user));\n+                }\n+            }\n+        }\n+\n+        for (User user : userAttributes.keySet()) {\n+            // List of members for given user\n+            List<Member> mems = userMemberIdMap.get(user);\n+            for (Member mem : mems) {\n+                if (!resourceMemberAttributes.containsKey(mem)) {\n+                    resourceMemberAttributes.put(mem, userAttributes.get(user));\n+                } else {\n+                    resourceMemberAttributes.get(mem).addAll(userAttributes.get(user));\n+                }\n+            }\n+        }\n+\n+        return resourceMemberAttributes;\n+\n+    }\n+\n+    @Override\n+    public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n+        if (!members.isEmpty()) {\n+            return getRequiredAttributesForBulk(sess, service, resource, members);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n+        if (!members.isEmpty()) {\n+            return getRequiredAttributesForBulk(sess, resource, service, members);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n+        if (!users.isEmpty()) {\n+            return getRequiredAttributesForBulk(sess, service, facility, users);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n+        if (!users.isEmpty()) {\n+            return getRequiredAttributesForBulk(sess, service, users);\n+        }\n+        return new HashMap<>();\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n+    }\n+\n+    @Override\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n+        if (!workWithUserAttributes) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n+        }\n+\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+        return attributes;\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, boolean withGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!withGroupAttributes) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n+        }\n+\n+        List<Attribute> attributes = new ArrayList<Attribute>();\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group));\n+        attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, group));\n+        return attributes;\n+\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, member);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, host);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, group);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, user);\n+    }\n+\n+    public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException {\n+        return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user);\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+\n+        return getAttributesManagerImpl().fillAttribute(sess, resource, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+\n+        return getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return fillAttributes(sess, resource, member, attributes, false);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (!workWithUserAttributes) {\n+            List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+            for (Attribute attribute : attributes) {\n+                getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+                if (attribute.getValue() == null) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n+                } else {\n+                    //skip non-empty attribute\n+                    filledAttributes.add(attribute);\n+                }\n+            }\n+            return filledAttributes;\n+        }\n+\n+        Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+\n+                //TODO and check it's namespace\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    @Override\n+    public Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, member, group, attribute);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        return fillAttributes(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (!workWithUserAttributes) {\n+            List<Attribute> filledAttributes = new ArrayList<>();\n+            for (Attribute attribute : attributes) {\n+                getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+                if (attribute.getValue() == null) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n+                } else {\n+                    //skip non-empty attribute\n+                    filledAttributes.add(attribute);\n+                }\n+            }\n+            return filledAttributes;\n+        }\n+\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+        List<Attribute> filledAttributes = new ArrayList<>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+\n+                //TODO and check it's namespace\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes, boolean returnOnlyAttributesWithChangedValue) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (!returnOnlyAttributesWithChangedValue) {\n+            return this.fillAttributes(sess, facility, resource, user, member, attributes);\n+        } else {\n+            List<Attribute> attributesWithChangedValue = new ArrayList<Attribute>();\n+            for (Attribute attribute : attributes) {\n+                if (attribute.getValue() == null) {\n+                    Attribute a;\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        a = getAttributesManagerImpl().fillAttribute(sess, member, attribute);\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                    if (a.getValue() != null) {\n+                        attributesWithChangedValue.add(a);\n+                    }\n+                }\n+            }\n+            return attributesWithChangedValue;\n+        }\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        throw new InternalErrorException(\"Not implemented yet!\");\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        throw new InternalErrorException(\"Not implemented yet!\");\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+\n+        return getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, host, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, host, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+\n+    public Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, group, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Group group, List<Attribute> groupReqAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, groupReqAttributes, AttributesManager.NS_GROUP_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+\n+        for (Attribute attribute : groupReqAttributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!workWithGroupAttributes) {\n+            return this.fillAttributes(sess, resource, group, attributes);\n+        }\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, NS_GROUP_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n+                }\n+            } else {\n+\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+        return getAttributesManagerImpl().fillAttribute(sess, ues, attribute);\n+    }\n+\n+    public List<Attribute> fillAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+        List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null) {\n+                filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, ues, attribute));\n+            } else {\n+                //skip non-empty attribute\n+                filledAttributes.add(attribute);\n+            }\n+        }\n+        return filledAttributes;\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, facility, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_FACILITY_ATTR);\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) {\n+                continue;\n+            }\n+            checkAttributeValue(sess, facility, attribute);\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, group, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() != null || isTrulyRequiredAttribute(sess, group, attribute)) {\n+                getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+            }\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        checkAttributesValue(sess, resource, member, attributes, false);\n+    }\n+\n+    @Override\n+    public void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        checkAttributesValue(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n+\n+            for (Attribute attribute : attributes) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+            }\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            for (Attribute attribute : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            checkAttributesValue(sess, member, attributes);\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            for (Attribute attribute : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        if (!workWithUserAttributes) {\n+            for (Attribute attribute : attributes) {\n+                getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+            }\n+        } else {\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+\n+            for (Attribute attribute : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                        continue;\n+                    }\n+                    getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    public void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        for (Attribute attribute : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                    continue;\n+                }\n+                getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, group, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            checkAttributeValue(sess, resource, group, attribute);\n+        }\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        if (!workWithGroupAttribute) {\n+            this.checkAttributesValue(sess, resource, group, attributes);\n+        }\n+        for (Attribute attribute : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                getAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n+                getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attribute);\n+            }\n+        }\n+    }\n+\n+\n+    public void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+\n+        if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+            return;\n+        }\n+        getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) {\n+                continue;\n+            }\n+            getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+        }\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            getAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n+    }\n+\n+    public void checkAttributesValue(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+\n+        for (Attribute attribute : attributes) {\n+            getAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n+        }\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n+    }\n+\n+    public void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, key, attribute);\n+    }\n+\n+    public void forceCheckAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+    }\n+\n+    public void forceCheckAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n+\n+        getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, key, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, key, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, key);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        this.attributesManagerImpl.removeAllMemberResourceAttributes(sess, resource);\n+        this.getPerunBl().getAuditer().log(sess, \"All non-virtual member-resource attributes removed for all members and {}\", resource);\n+    }\n+\n+    public void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        List<Group> groups = this.getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        for (Group group : groups) {\n+            this.getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, group);\n+        }\n+        this.attributesManagerImpl.removeAllGroupResourceAttributes(sess, resource);\n+        this.getPerunBl().getAuditer().log(sess, \"All non-virtual group-resource attributes removed for all groups and {}\", resource);\n+    }\n+\n+    public void removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, key, attribute)) {\n+            this.checkAttributeValue(sess, key, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(key, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, facility, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, facility);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, facility, attribute)) {\n+            this.checkAttributeValue(sess, facility, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(facility, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Member member, boolean workWithUserAttributes, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+            for (AttributeDefinition attribute : attributes) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                }\n+            }\n+            this.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n+            this.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n+        } else {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+            for (AttributeDefinition attribute : attributes) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            this.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck), true);\n+            this.checkAttributesDependencies(sess, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+        }\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Facility facility, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributesDefinition, NS_FACILITY_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributesDefinition) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, facility, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        this.checkAttributesValue(sess, facility, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, facility, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, resource, member, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                    if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attribute);\n+                }\n+            }\n+        }\n+        this.checkAttributesValue(sess, facility, resource, user, member, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, member, user, facility, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, facility);\n+        getAttributesManagerImpl().removeAllAttributes(sess, facility);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", facility);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, facility, attributes);\n+            this.checkAttributesDependencies(sess, facility, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        removeAllAttributes(sess, resource, group);\n+        if (workWithGroupAttributes) {\n+            removeAllAttributes(sess, group);\n+        }\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Facility facility, boolean removeAlsoUserFacilityAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        removeAllAttributes(sess, facility);\n+        if (removeAlsoUserFacilityAttributes) {\n+            List<Attribute> userFacilityAttributes = getUserFacilityAttributesForAnyUser(sess, facility);\n+            getAttributesManagerImpl().removeAllUserFacilityAttributesForAnyUser(sess, facility);\n+            getPerunBl().getAuditer().log(sess, \"All user-facility attributes removed for {} for any user.\", facility);\n+\n+            for (Attribute attribute : userFacilityAttributes) {\n+                attribute.setValue(null);\n+            }\n+            List<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+            for (User user : facilityUsers) {\n+                try {\n+                    checkAttributesValue(sess, facility, user, userFacilityAttributes);\n+                    this.checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+                } catch (WrongAttributeAssignmentException ex) {\n+                    throw new ConsistencyErrorException(ex);\n+                }\n+                for (Attribute attribute : userFacilityAttributes) {\n+                    try {\n+                        getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+                    } catch (WrongAttributeValueException ex) {\n+                        //TODO better exception here\n+                        throw new InternalErrorException(ex);\n+                    } catch (WrongReferenceAttributeValueException ex) {\n+                        //TODO better exception here\n+                        throw new InternalErrorException(ex);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, host, attribute)) {\n+            checkAttributeValue(sess, host, new Attribute(attribute));\n+            try {\n+                this.checkAttributeDependencies(sess, new RichAttribute(host, null, new Attribute(attribute)));\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                throw new WrongAttributeValueException(ex);\n+            }\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, host, attribute);\n+        if (changed) {\n+            //TODO HOOK FOR HOSTS!\n+\t\t\t/*try {\n+\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n+\t\t\t\t} catch (WrongAttributeValueException ex) {\n+\t\t\t//TODO better exception here\n \t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch(InvocationTargetException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t} catch(IllegalArgumentException ex) {\n-\t\t\tthrow new WrongAttributeValueException(attribute, \"Probably bad type of value\", ex);\n-\t\t} catch(RuntimeException ex) {\n+\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n+\t\t\t//TODO better exception here\n \t\t\tthrow new InternalErrorException(ex);\n+\t\t\t}*/\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, host);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Host host, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributesDefinition, AttributesManager.NS_HOST_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributesDefinition) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, host, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        this.checkAttributesValue(sess, host, attributesFromDefinitions(attributesToCheck));\n+        try {\n+            this.checkAttributesDependencies(sess, host, null, attributesFromDefinitions(attributesToCheck));\n+        } catch (WrongReferenceAttributeValueException ex) {\n+            throw new WrongAttributeValueException(ex);\n+        }\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException, WrongAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, host);\n+        getAttributesManagerImpl().removeAllAttributes(sess, host);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", host);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, host, attributes);\n+            this.checkAttributesDependencies(sess, host, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        } catch (WrongReferenceAttributeValueException ex) {\n+            throw new WrongAttributeValueException(ex);\n+        }\n+\n+        //TODO HOOK FOR HOSTS\n+\t\t/*\n+\t\t\t for(Attribute attribute: attributes) {\n+\t\t\t try {\n+\t\t\t getAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n+\t\t\t } catch (WrongAttributeValueException ex) {\n+\t\t//TODO better exception here\n+\t\tthrow new InternalErrorException(ex);\n+\t\t} catch (WrongReferenceAttributeValueException ex) {\n+\t\t//TODO better exception here\n+\t\tthrow new InternalErrorException(ex);\n \t\t}\n+\t\t}*/\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, vo, attribute)) {\n+            checkAttributeValue(sess, vo, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(vo, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, vo, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, vo);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Vo vo, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, vo, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, vo, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, vo, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, vo);\n+        getAttributesManagerImpl().removeAllAttributes(sess, vo);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", vo);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, vo, attributes);\n+            this.checkAttributesDependencies(sess, vo, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, group, attribute)) {\n+            checkAttributeValue(sess, group, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(group, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, group, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, group);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, group, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, group, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, group, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, group);\n+        getAttributesManagerImpl().removeAllAttributes(sess, group);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", group);\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, group, attributes);\n+            this.checkAttributesDependencies(sess, group, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        boolean changed = removeAttributeWithoutCheck(sess, resource, attribute);\n+        if (changed) {\n+            checkAttributeValue(sess, resource, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(resource, null, new Attribute(attribute)));\n+        }\n+        return changed;\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = true;\n+\n+        try {\n+            if (this.isVirtAttribute(sess, attribute)) {\n+                changed = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n+            } else {\n+                changed = getAttributesManagerImpl().removeAttribute(sess, resource, attribute);\n+            }\n+            if (changed) {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n+            }\n+        } catch (WrongAttributeValueException ex) {\n+            //TODO better exception here\n+            throw new InternalErrorException(ex);\n+        } catch (WrongReferenceAttributeValueException ex) {\n+            //TODO better exception here\n+            throw new InternalErrorException(ex);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, resource);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Resource resource, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            //skip core attributes\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, resource, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, resource, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, resource);\n+        getAttributesManagerImpl().removeAllAttributes(sess, resource);\n+\n+        //remove all virtual attributes\n+\t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n+\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n+\t\t\t}*/\n \n-\t\tmember = getPerunBl().getMembersManagerBl().updateMember(sess, member);\n-\t}\n-\n-\tpublic List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAllSimilarAttributeNames(sess, startingPartOfAttributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_FACILITY_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, facility, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_VO_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, vo, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tString namespace = getNamespaceFromAttributeName(attributeName);\n-\t\tif(!namespace.startsWith(AttributesManager.NS_GROUP_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, group, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, member, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\t// check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, member, group, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, member, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, facility, user, attributeName);\n-\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_USER_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, user, attributeName);\n-\t}\n-\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_HOST_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, host, attributeName);\n-\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, group, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, key, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_UES_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, ues, attributeName);\n-\t}\n-\n-\tpublic AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getAttributesManagerImpl().getAttributeDefinition(sess, attributeName);\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinitionWithRights(PerunSession sess, List<PerunBean> entities) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();\n-\n-\t\t//if there is no entities, so no attribute definition will be returned => empty array list of ADs\n-\t\tif(entities == null || entities.isEmpty()) return attributeDefinitions;\n-\t\t//or fill list by all attributeDefinitions\n-\t\telse attributeDefinitions = this.getAttributesDefinition(sess);\n-\n-\t\t//Prepare possible objects\n-\t\tUser user = null;\n-\t\tMember member = null;\n-\t\tVo vo = null;\n-\t\tResource resource = null;\n-\t\tGroup group = null;\n-\t\tFacility facility = null;\n-\t\tHost host = null;\n-\t\tUserExtSource ues = null;\n-\n-\t\t//Iterate through all entities and fill those which are in list of entities\n-\t\tfor(PerunBean entity: entities) {\n-\t\t\tif(entity instanceof User) user = (User) entity;\n-\t\t\telse if(entity instanceof Member) member = (Member) entity;\n-\t\t\telse if(entity instanceof Vo) vo = (Vo) entity;\n-\t\t\telse if(entity instanceof Resource) resource = (Resource) entity;\n-\t\t\telse if(entity instanceof Group) group = (Group) entity;\n-\t\t\telse if(entity instanceof Facility) facility = (Facility) entity;\n-\t\t\telse if(entity instanceof Host) host = (Host) entity;\n-\t\t\telse if(entity instanceof UserExtSource) ues = (UserExtSource) entity;\n-\t\t\t//Else skip not identified entity (log it)\n-\t\t\telse log.debug(\"In method GetAttributesDefinitionWithRights there are entity which is not identified correctly and will be skipped: \" + entity);\n-\t\t}\n-\n-\t\t//Iterate through all attributesDefinitions and remove those which are not in the possible namespace or user in session has no rights to read them\n-\t\tIterator<AttributeDefinition> iterator = attributeDefinitions.iterator();\n-\t\twhile(iterator.hasNext()) {\n-\t\t\tAttributeDefinition attrDef = iterator.next();\n-\n-\t\t\tif(this.isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR) && user != null && facility != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, facility)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, facility));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR) && member != null && resource != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, resource)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, resource));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR) && member != null && group != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, group)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, group));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR) && group != null && resource != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, resource)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, resource));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_USER_ATTR) && user != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_MEMBER_ATTR) && member != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_VO_ATTR) && vo != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, vo, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, vo, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR) && resource != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, resource, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, resource, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_GROUP_ATTR) && group != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_FACILITY_ATTR) && facility != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, facility, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, facility, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR) && host != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, host, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, host, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, AttributesManager.NS_UES_ATTR) && ues != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, ues, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, ues, null));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//if there is another namespace or if there are no entities (which are needed for the namespace) remove this attributeDefinition\n-\t\t\t\titerator.remove();\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn attributeDefinitions;\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributesDefinition(sess);\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinition(PerunSession sess, List<String> listOfAttributesNames) throws AttributeNotExistsException, InternalErrorException {\n-\t\tList<AttributeDefinition> listOfAttributeDefinitions = new ArrayList<AttributeDefinition>();\n-\t\tfor(String name: listOfAttributesNames) {\n-\t\t\tlistOfAttributeDefinitions.add(this.getAttributeDefinition(sess, name));\n-\t\t}\n-\t\treturn listOfAttributeDefinitions;\n-\t}\n-\n-\tpublic AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getAttributesManagerImpl().getAttributeDefinitionById(sess, id);\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributesDefinitionByNamespace(sess, namespace);\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, vo, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tAttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n-\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, member, id);\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\treturn attribute;\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t//user-facility attribues\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n-\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t//user and user core attributes\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n-\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, group, id);\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\t\treturn attribute;\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, member, id);\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t//user and user core attributes\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\t\t}\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, host, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, group, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, group, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, ues, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n-\t\t//fill attributes and get back only those which were really filled with new value\n-\t\tList<Attribute> filledAttributes = this.fillAttributes(sess, facility, resource, user, member, attributes, true);\n-\n-\t\t//Remove all filledAttributes from all attributes list\n-\t\tIterator<Attribute> iterAttr = attributes.iterator();\n-\t\twhile(iterAttr.hasNext()) {\n-\t\t\tAttribute attributeFromAllAttrs = iterAttr.next();\n-\t\t\tfor(Attribute attributeFromFillAttrs: filledAttributes) {\n-\t\t\t\tif(attributeFromAllAttrs.getName().equals(attributeFromFillAttrs.getName())) {\n-\t\t\t\t\titerAttr.remove();\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Set all filledAttributes withoutCheck\n-\t\tfor(Attribute attribute : filledAttributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Join all attributes and filled attributes together\n-\t\tattributes.addAll(filledAttributes);\n-\n-\t\t//refresh all virtual attributes with new value\n-\t\tfor(Attribute attr: attributes) {\n-\t\t\tif(this.isVirtAttribute(sess, attr)) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, resource, member, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, facility, user, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, user, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, member, attr.getName()).getValue());\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Check all attributes\n-\t\tcheckAttributesValue(sess, facility, resource, user, member, attributes);\n-\n-\t\t//Check all attributes dependencies\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributes);\n-\t}\n-\n-\tpublic void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException, AttributeNotExistsException {\n-\t\t//get all attributes (for member, resource, facility and user) with values\n-\t\tList<Attribute> attributes = this.getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n-\n-\t\tthis.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n-\t}\n-\n-\tpublic void setRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n-\t\t//get all attributes (for member, resource, facility, user and service) with values\n-\t\tList<Attribute> attributes = this.getRequiredAttributes(sess, service, facility, resource, user, member);\n-\n-\t\tthis.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, facility, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, facility, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t//getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, facility, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, facility);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, vo, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, vo, attribute)) {\n-\t\t\tcheckAttributeValue(sess, vo, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(vo, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_VO_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, vo, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, vo);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, group, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(group, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, resource, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", resource);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, resource, attributes);\n+            this.checkAttributesDependencies(sess, resource, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, resource, member, attribute)) {\n+            checkAttributeValue(sess, resource, member, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(resource, member, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, resource, member, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, resource, member);\n+        }\n+\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_RESOURCE_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, resource, member, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes)\n+            throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (!(workWithUserAttributes)) {\n+            removeAttributes(sess, resource, member, attributes);\n+        } else {\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+            for (AttributeDefinition attribute : attributes) {\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                    User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, resource, member, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+            this.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+        }\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        List<Attribute> attributes = getAttributes(sess, resource, member);\n+        getAttributesManagerImpl().removeAllAttributes(sess, resource, member);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", resource, member);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, resource, member, attributes);\n+            checkAttributesValue(sess, resource, member, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+            checkAttributeValue(sess, member, group, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(member, group, new Attribute(attribute)));\n+        }\n+    }\n+\n+    // s workWithUserAttr.\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, member, group, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, member, group);\n+        }\n+\n+        return changed;\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        removeAttributes(sess, member, group, attributes, false);\n+    }\n+\n+    @Override\n+    public void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (!workWithUserAttributes) {\n+            getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+            for (AttributeDefinition attribute : attributes) {\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck));\n+            this.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck));\n+        } else {\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+            for (AttributeDefinition attribute : attributes) {\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                    User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+            }\n+            checkAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+            this.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, member, group);\n+        getAttributesManagerImpl().removeAllAttributes(sess, member, group);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", member, group);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, member, group, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+            checkAttributeValue(sess, member, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(member, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, member, attribute);\n+\n+        if (changed) {\n+            try {\n+                if (changed) {\n+                    getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n+                }\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, member);\n+        }\n+\n+        return changed;\n+\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, member);\n+        getAttributesManagerImpl().removeAllAttributes(sess, member);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", member);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, member, attributes);\n+            this.checkAttributesDependencies(sess, member, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+            checkAttributeValue(sess, facility, user, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(facility, user, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = false;\n+\n+        if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+            changed = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n+        } else {\n+            changed = getAttributesManagerImpl().removeAttribute(sess, facility, user, attribute);\n+        }\n+\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, facility, user);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Facility facility, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+                    if (getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                } else {\n+                    if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+                        attributesToCheck.add(attribute);\n+                    }\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, facility, user);\n+        //remove all non-virtual attributes\n+        getAttributesManagerImpl().removeAllAttributes(sess, facility, user);\n+\n+        //remove all virtual attributes\n+        List<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n+        for (Attribute attribute : virtualAttributes) {\n+            getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n+        }\n+        attributes.addAll(virtualAttributes);\n+\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", facility, user);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, facility, user, attributes);\n+            this.checkAttributesDependencies(sess, facility, user, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+\n+        List<RichAttribute<User, Facility>> userFacilitiesAttributes = getAttributesManagerImpl().getAllUserFacilityRichAttributes(sess, user);\n+\n+        //remove all non-virtual attributes\n+        getAttributesManagerImpl().removeAllUserFacilityAttributes(sess, user);\n+        getPerunBl().getAuditer().log(sess, \"All non-virtual user-facility attributes removed for all facilities and {}\", user);\n+\n+        for (RichAttribute<User, Facility> richAttribute : userFacilitiesAttributes) {\n+            try {\n+                checkAttributeValue(sess, richAttribute.getSecondaryHolder(), richAttribute.getPrimaryHolder(), new Attribute(richAttribute.getAttribute()));\n+                this.checkAttributeDependencies(sess, richAttribute);\n+            } catch (WrongAttributeAssignmentException ex) {\n+                throw new ConsistencyErrorException(ex);\n+            }\n+        }\n+        for (RichAttribute<User, Facility> attribute : userFacilitiesAttributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, attribute.getSecondaryHolder(), attribute.getPrimaryHolder(), new Attribute(attribute.getAttribute()));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+            checkAttributeValue(sess, user, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(user, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, user, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, user);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, user, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, user, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, user);\n+        getAttributesManagerImpl().removeAllAttributes(sess, user);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", user);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, user, attributes);\n+            this.checkAttributesDependencies(sess, user, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n+            checkAttributeValue(sess, resource, group, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(resource, group, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        boolean changed = false;\n+        try {\n+            if (this.isVirtAttribute(sess, attribute)) {\n+                changed = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, group, attribute);\n+            } else {\n+                changed = getAttributesManagerImpl().removeAttribute(sess, resource, group, attribute);\n+            }\n+\n+            if (changed) {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n+            }\n+        } catch (WrongAttributeValueException ex) {\n+            //TODO better exception here\n+            throw new InternalErrorException(ex);\n+        } catch (WrongReferenceAttributeValueException ex) {\n+            //TODO better exception here\n+            throw new InternalErrorException(ex);\n+        }\n+        if (changed) {\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, group, resource);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        //getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n+                attributesToCheck.add(attribute);\n+            }\n+        }\n+        checkAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (!workWithGroupAttributes) {\n+            removeAttributes(sess, resource, group, attributes);\n+        } else {\n+\n+            List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+            for (AttributeDefinition attribute : attributes) {\n+                //skip core attributes\n+                if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+\n+                    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n+                        if (removeAttributeWithoutCheck(sess, group, attribute)) {\n+                            attributesToCheck.add(attribute);\n+                        }\n+                    } else {\n+                        throw new WrongAttributeAssignmentException(attribute);\n+                    }\n+                }\n+\n+            }\n+            checkAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n+            this.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n+        }\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        List<Attribute> attributes = getAttributes(sess, resource, group);\n+        getAttributesManagerImpl().removeAllAttributes(sess, resource, group);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", group, resource);\n+\n+        //remove all virtual attributes\n+\t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n+\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n+\t\t\t}*/\n \n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, resource, group, attributes);\n+            this.checkAttributesDependencies(sess, resource, group, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        if (removeAttributeWithoutCheck(sess, ues, attribute)) {\n+            checkAttributeValue(sess, ues, new Attribute(attribute));\n+            this.checkAttributeDependencies(sess, new RichAttribute(ues, null, new Attribute(attribute)));\n+        }\n+    }\n+\n+    public boolean removeAttributeWithoutCheck(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+\n+        if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+            throw new WrongAttributeAssignmentException(attribute);\n+        }\n+\n+        boolean changed = getAttributesManagerImpl().removeAttribute(sess, ues, attribute);\n+        if (changed) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+            getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, ues);\n+        }\n+        return changed;\n+    }\n+\n+    public void removeAttributes(PerunSession sess, UserExtSource ues, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+        List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+        for (AttributeDefinition attribute : attributes) {\n+            if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+                if (removeAttributeWithoutCheck(sess, ues, attribute)) {\n+                    attributesToCheck.add(attribute);\n+                }\n+            }\n+        }\n+        checkAttributesValue(sess, ues, attributesFromDefinitions(attributesToCheck));\n+        this.checkAttributesDependencies(sess, ues, null, attributesFromDefinitions(attributesToCheck));\n+    }\n+\n+    public void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        List<Attribute> attributes = getAttributes(sess, ues);\n+        getAttributesManagerImpl().removeAllAttributes(sess, ues);\n+        getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", ues);\n+\n+        for (Attribute attribute : attributes) {\n+            attribute.setValue(null);\n+        }\n+        try {\n+            checkAttributesValue(sess, ues, attributes);\n+            this.checkAttributesDependencies(sess, ues, null, attributes);\n+        } catch (WrongAttributeAssignmentException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+\n+        for (Attribute attribute : attributes) {\n+            try {\n+                getAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n+            } catch (WrongAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            } catch (WrongReferenceAttributeValueException ex) {\n+                //TODO better exception here\n+                throw new InternalErrorException(ex);\n+            }\n+        }\n+    }\n+\n+    public void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException {\n+        getAttributesManagerImpl().checkActionTypeExists(sess, actionType);\n+    }\n+\n+    public void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException {\n+        getAttributesManagerImpl().checkAttributeExists(sess, attribute);\n+    }\n+\n+    public void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException {\n+        getAttributesManagerImpl().checkAttributesExists(sess, attributes);\n+    }\n+\n+    public boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isDefAttribute(sess, attribute);\n+    }\n+\n+    public boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isOptAttribute(sess, attribute);\n+    }\n+\n+    public boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isCoreAttribute(sess, attribute);\n+    }\n+\n+    public boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isCoreManagedAttribute(sess, attribute);\n+    }\n+\n+    public boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute) {\n+        return getAttributesManagerImpl().isVirtAttribute(sess, attribute);\n+    }\n+\n+    public boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) {\n+        return getAttributesManagerImpl().isFromNamespace(sess, attribute, namespace);\n+    }\n+\n+    public void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attribute, namespace);\n+    }\n+\n+    public void checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException {\n+        getAttributesManagerImpl().checkNamespace(sess, attributes, namespace);\n+    }\n+\n+    public String getNamespaceFromAttributeName(String attributeName) {\n+        return attributeName.replaceFirst(\"(urn:perun:[^:]+:attribute-def:[^:]+):.*\", \"$1\");\n+    }\n+\n+    public String getFriendlyNameFromAttributeName(String attributeName) {\n+        return attributeName.replaceFirst(\"urn:perun:[^:]+:attribute-def:[^:]+:\", \"\");\n+    }\n+\n+    public List<Attribute> getLogins(PerunSession sess, User user) throws InternalErrorException {\n+        List<Attribute> usersAttributes = this.getAttributes(sess, user);  //Get all non-empty user's attributes\n+        Iterator<Attribute> it = usersAttributes.iterator();\n+        while (it.hasNext()) {\n+            if (!it.next().getFriendlyName().startsWith(\"login-namespace:\")) {\n+                it.remove();\n+            }\n+        }\n+        return usersAttributes;\n+    }\n+\n+    public List<Object> getAllValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        if (isCoreAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition)) {\n+            throw new WrongAttributeAssignmentException(attributeDefinition);\n+        }\n+\n+        if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_RESOURCE_ATTR)) {\n+            return getAttributesManagerImpl().getAllResourceValues(sess, attributeDefinition);\n+        } else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+            return getAttributesManagerImpl().getAllGroupResourceValues(sess, attributeDefinition);\n+        } else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_ATTR)) {\n+            return getAttributesManagerImpl().getAllGroupValues(sess, attributeDefinition);\n+        } else {\n+            //TODO\n+            throw new InternalErrorException(\"Not implemented yet!\");\n+        }\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_FACILITY_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition);\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_VO_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByVo(sess, vo, attributeDefinition);\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_GROUP_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByGroup(sess, group, attributeDefinition);\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_RESOURCE_ATTR);\n+        return getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_MEMBER_ATTR);\n+        List<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+        for (Resource resource : allowedResources) {\n+            if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_USER_ATTR);\n+        List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+        for (Member member : members) {\n+            List<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+            for (Resource resource : allowedResources) {\n+                if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_USER_FACILITY_ATTR);\n+        List<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+        if (!allowedFacilities.contains(facility)) {\n+            return false;\n+        } else {\n+            if (!getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition)) {\n+                return false;\n+            }\n+            List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+            resources.retainAll(getPerunBl().getUsersManagerBl().getAllowedResources(sess, user));\n+            for (Resource resource : resources) {\n+                if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                    return true;\n+                }\n+            }\n+            return false;\n+        }\n+\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+        this.checkNamespace(sess, attributeDefinition, NS_MEMBER_RESOURCE_ATTR);\n+        List<Member> allowedMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+        if (!allowedMembers.contains(member)) {\n+            return false;\n+        } else {\n+            return getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+        }\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkNamespace(sess, attributeDefinition, NS_MEMBER_GROUP_ATTR);\n+        List<Resource> assignedResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+        for (Resource resource : assignedResources) {\n+            if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+        this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+        this.checkNamespace(sess, attributeDefinition, NS_GROUP_RESOURCE_ATTR);\n+        List<Group> assignedGroups = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+        if (!assignedGroups.contains(group)) {\n+            return false;\n+        } else {\n+            return getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+        }\n+    }\n+\n+    public Object stringToAttributeValue(String value, String type) throws InternalErrorException {\n+        if (type.equals(ArrayList.class.getName()) || type.equals(LinkedHashMap.class.getName()) ||\n+                type.equals(BeansUtils.largeArrayListClassName)) {\n+            if (value != null && !value.isEmpty() && !value.endsWith(String.valueOf(AttributesManagerImpl.LIST_DELIMITER))) {\n+                value = value.concat(String.valueOf(AttributesManagerImpl.LIST_DELIMITER));\n+            }\n+        }\n+        return BeansUtils.stringToAttributeValue(value, type);\n+    }\n+\n+    public static String escapeListAttributeValue(String value) {\n+        return AttributesManagerImpl.escapeListAttributeValue(value);\n+    }\n+\n+    public static String escapeMapAttributeValue(String value) {\n+        return AttributesManagerImpl.escapeMapAttributeValue(value);\n+    }\n+\n+    public void doTheMagic(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        doTheMagic(sess, member, false);\n+    }\n+\n+    public void doTheMagic(PerunSession sess, Member member, boolean trueMagic) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+        for (Resource resource : resources) {\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            List<Attribute> requiredAttributes = getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n+            boolean allOk = false;\n+            AttributeDefinition lastWrongAttribute = null;\n+            int safetyCounter = 0;\n+            do {\n+                try {\n+                    setRequiredAttributes(sess, facility, resource, user, member, requiredAttributes);\n+                    allOk = true;\n+                } catch (AttributeNotExistsException ex) {\n+                    throw new ConsistencyErrorException(ex);\n+                } catch (WrongAttributeAssignmentException ex) {\n+                    throw new ConsistencyErrorException(ex);\n+                } catch (WrongAttributeValueException ex) {\n+                    if (!trueMagic) {\n+                        throw ex;\n+                    }\n+                    AttributeDefinition wrongAttributeDefinition = ex.getAttribute();\n+                    if (wrongAttributeDefinition == null) {\n+                        throw new ConsistencyErrorException(\"WrongAttributeValueException doesn't have set the wrong attribute.\", ex);\n+                    }\n+                    if (wrongAttributeDefinition.equals(lastWrongAttribute)) {\n+                        throw new WrongAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n+                    }\n+                    lastWrongAttribute = wrongAttributeDefinition;\n+                    findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null);\n+                } catch (WrongReferenceAttributeValueException ex) {\n+                    if (!trueMagic) {\n+                        throw ex;\n+                    }\n+                    AttributeDefinition wrongAttributeDefinition = ex.getReferenceAttribute();\n+                    if (wrongAttributeDefinition == null) {\n+                        throw new ConsistencyErrorException(\"WrongReferenceAttributeValueException doesn't have set reference attribute.\", ex);\n+                    }\n+                    if (wrongAttributeDefinition.equals(lastWrongAttribute)) {\n+                        throw new WrongReferenceAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n+                    }\n+                    lastWrongAttribute = wrongAttributeDefinition;\n+                    if (!findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null)) {\n+                        //this attribute can't be fixed here\n+                        throw ex;\n+                    }\n+                }\n+                safetyCounter++;\n+                if (safetyCounter == 50) {\n+                    throw new InternalErrorException(\"Method doTheMagic possibly stays in infinite loop.\");\n+                }\n+            } while (trueMagic && !allOk);\n+        }\n+    }\n+\n+    public void mergeAttributesValues(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        for (Attribute attribute : attributes) {\n+            this.mergeAttributeValue(sess, user, attribute);\n+        }\n+    }\n+\n+    public void mergeAttributesValues(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        for (Attribute attribute : attributes) {\n+            this.mergeAttributeValue(sess, member, attribute);\n+        }\n+    }\n+\n+    /**\n+     * Merges attribute value for supported attribute's namespaces if the attribute type is list or map. In other cases it only stores new value.\n+     * <p>\n+     * If attribute has null value or it's value is same as value of attribute already stored in Perun, return stored attribute instead.\n+     * If the type is list, new values are added to the current stored list.\n+     * It the type is map, new values are added and existing are overwritten with new values, but only if there is any change.\n+     * <p>\n+     * Supported namespaces\n+     * - user attributes\n+     * - member attributes\n+     *\n+     * @param sess\n+     * @param attribute     attribute to merge it's value if possible\n+     * @param primaryHolder holder defines object for which is attribute stored in Perun\n+     * @return attribute after merging his value\n+     * @throws InternalErrorException                if one of mandatory objects is null or some internal problem has occured\n+     * @throws WrongAttributeValueException          attribute value of set attribute is not correct\n+     * @throws WrongReferenceAttributeValueException any reference attribute value is not correct\n+     * @throws WrongAttributeAssignmentException     if attribute is not from the same namespace defined by primaryHolder\n+     */\n+    private Attribute mergeAttributeValue(PerunSession sess, Attribute attribute, PerunBean primaryHolder) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        //If attribute is null, throw an exception\n+        if (attribute == null) {\n+            throw new InternalErrorException(\"Can't merge null attribute with anything!\");\n+        }\n+        if (primaryHolder == null) {\n+            throw new InternalErrorException(\"Can't merge attribute value without notNull primaryHolder!\");\n+        }\n+\n+        //Get stored attribute in Perun\n+        Attribute storedAttribute = null;\n+        try {\n+            if (primaryHolder instanceof User) {\n+                storedAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (User) primaryHolder, attribute.getName());\n+            } else if (primaryHolder instanceof Member) {\n+                storedAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (Member) primaryHolder, attribute.getName());\n+            } else {\n+                throw new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n+            }\n+        } catch (AttributeNotExistsException e) {\n+            throw new ConsistencyErrorException(e);\n+        }\n+\n+        //if attribute to merge has null value or it's value is same as stored attribute's value, return the stored attribute\n+        convertEmptyAttrValueToNull(attribute);\n+        if (attribute.getValue() == null || Objects.equals(attribute.getValue(), storedAttribute.getValue())) {\n+            return storedAttribute;\n+        }\n+\n+        // Check type ArrayList\n+        if (attribute.getType().equals(ArrayList.class.getName()) || attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n+            ArrayList<String> updatedList = (ArrayList<String>) storedAttribute.getValue();\n+            // If there were someting then find values which haven't been already stored\n+            if (updatedList != null) {\n+                for (String value : ((ArrayList<String>) attribute.getValue())) {\n+                    if (!updatedList.contains(value)) {\n+                        updatedList.add(value);\n+                    }\n+                }\n+                attribute.setValue(updatedList);\n+            }\n+            // Check type LinkedHashMap\n+        } else if (attribute.getType().equals(LinkedHashMap.class.getName())) {\n+            //Find values which haven't been already stored\n+            LinkedHashMap<String, String> updatedMap = (LinkedHashMap<String, String>) storedAttribute.getValue();\n+            if (updatedMap != null) {\n+                LinkedHashMap<String, String> receivedMap = (LinkedHashMap<String, String>) attribute.getValue();\n+                updatedMap.putAll(receivedMap);\n+                attribute.setValue(updatedMap);\n+            }\n+        }\n+\n+        //Other types as String, Integer, Boolean etc. will be replaced by new value (no way how to merge them properly)\n+        if (primaryHolder instanceof User) {\n+            getPerunBl().getAttributesManagerBl().setAttribute(sess, (User) primaryHolder, attribute);\n+        } else if (primaryHolder instanceof Member) {\n+            getPerunBl().getAttributesManagerBl().setAttribute(sess, (Member) primaryHolder, attribute);\n+        } else {\n+            throw new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n+        }\n+\n+        return attribute;\n+    }\n+\n+    public Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return this.mergeAttributeValue(sess, attribute, user);\n+    }\n+\n+    public Attribute mergeAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n+            WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return this.mergeAttributeValue(sess, attribute, member);\n+    }\n+\n+    public Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return mergeAttributeValue(sess, user, attribute);\n+    }\n+\n+    public Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        return mergeAttributeValue(sess, member, attribute);\n+    }\n+\n+    private boolean findAndSetValueInList(List<Attribute> attributes, AttributeDefinition attributeDefinition, Object value) {\n+        for (Attribute attribute : attributes) {\n+            if (attribute.getId() == attributeDefinition.getId()) {\n+                attribute.setValue(value);\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+        getPerunBl().getAuditer().log(perunSession, \"{} updated.\", attributeDefinition);\n+        return getAttributesManagerImpl().updateAttributeDefinition(perunSession, attributeDefinition);\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithGroupAttributes) {\n+            List<Attribute> groupAttributes = new ArrayList<Attribute>();\n+            List<Attribute> groupResourceAttributes = new ArrayList<Attribute>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_RESOURCE_ATTR)) {\n+                    groupResourceAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_ATTR)) {\n+                    groupAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, resource, group, groupResourceAttributes);\n+            checkAttributesDependencies(sess, group, null, groupAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, resource, group, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<Attribute> userAttributes = new ArrayList<Attribute>();\n+            List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+                    userAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+                    memberAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, member, null, memberAttributes);\n+            checkAttributesDependencies(sess, user, null, userAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, member, null, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, User user, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        List<Attribute> userAttributes = new ArrayList<Attribute>();\n+        List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+        List<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n+        List<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n+        for (Attribute attr : attributes) {\n+            if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+                userAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+                memberAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n+                memberResourceAttributes.add(attr);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n+                userFacilityAttributes.add(attr);\n+            } else {\n+                throw new WrongAttributeAssignmentException(attr);\n+            }\n+        }\n+        checkAttributesDependencies(sess, member, null, memberAttributes);\n+        checkAttributesDependencies(sess, user, null, userAttributes);\n+        checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+        checkAttributesDependencies(sess, resource, member, memberResourceAttributes);\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            List<Attribute> userAttributes = new ArrayList<Attribute>();\n+            List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+            List<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n+            List<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+                    userAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+                    memberAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n+                    memberResourceAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n+                    userFacilityAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, member, null, memberAttributes);\n+            checkAttributesDependencies(sess, user, null, userAttributes);\n+            checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+            checkAttributesDependencies(sess, resource, member, memberResourceAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, resource, member, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (workWithUserAttributes) {\n+            User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+            List<Attribute> userAttributes = new ArrayList<Attribute>();\n+            List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+            List<Attribute> memberGroupAttributes = new ArrayList<Attribute>();\n+            for (Attribute attr : attributes) {\n+                if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+                    userAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+                    memberAttributes.add(attr);\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_GROUP_ATTR)) {\n+                    memberGroupAttributes.add(attr);\n+                } else {\n+                    throw new WrongAttributeAssignmentException(attr);\n+                }\n+            }\n+            checkAttributesDependencies(sess, member, null, memberAttributes);\n+            checkAttributesDependencies(sess, user, null, userAttributes);\n+            checkAttributesDependencies(sess, member, group, memberGroupAttributes);\n+        } else {\n+            checkAttributesDependencies(sess, member, group, attributes);\n+        }\n+    }\n+\n+    private void checkAttributesDependencies(PerunSession sess, Object primaryHolder, Object secondaryHolder, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (attributes != null && !attributes.isEmpty()) {\n+            for (Attribute attr : attributes) {\n+                checkAttributeDependencies(sess, new RichAttribute(primaryHolder, secondaryHolder, attr));\n+            }\n+        }\n+    }\n+\n+    public void checkAttributeDependencies(PerunSession sess, RichAttribute richAttr) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+        if (getAllDependencies() == null || getAllDependencies().isEmpty()) {\n+            log.error(\"Map of all dependencies is empty. If this is not test, its an error probably.\");\n+        }\n+        if (richAttr == null || richAttr.getAttribute() == null) {\n+            throw new InternalErrorException(\"RichAttribute or Attribute in it can't be null!\");\n+        } else {\n+            //Get All attributeDef which are dependencies\n+            Set<AttributeDefinition> dependencies = getAllDependencies().get(new AttributeDefinition(richAttr.getAttribute()));\n+            if (dependencies != null && !dependencies.isEmpty()) {\n+                for (AttributeDefinition dependency : dependencies) {\n+                    List<RichAttribute> richAttributesToCheck;\n+                    try {\n+                        richAttributesToCheck = getRichAttributesWithHoldersForAttributeDefinition(sess, dependency, richAttr);\n+                    } catch (AttributeNotExistsException ex) {\n+                        //TODO better exception here (need to implement to all setMethods)\n+                        throw new InternalErrorException(ex);\n+                    } catch (VoNotExistsException ex) {\n+                        //TODO better exception here (need to implement to all setMethods)\n+                        throw new InternalErrorException(ex);\n+                    }\n+                    for (RichAttribute richAttribute : richAttributesToCheck) {\n+                        if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_VO_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Vo) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for VO Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Vo) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For VO Attribute there must be VO in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Group Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Group Attribute there must be Group in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Member Attribute there must be Member in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for User Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For User Attribute there must be User in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_RESOURCE_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Resource Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Resource Attribute there must be Resource in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_FACILITY_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Facility Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Facility Attribute there must be Facility in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_ENTITYLESS_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof String) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Entityless Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (String) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Entityless Attribute there must be String in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_HOST_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Host) {\n+                                if (richAttribute.getSecondaryHolder() != null) {\n+                                    throw new InternalErrorException(\"Secondary Holder for Host Attribute must be null!\");\n+                                } else {\n+                                    this.checkAttributeValue(sess, (Host) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Host Attribute there must be Host in primaryHolder\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_RESOURCE_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n+                                    this.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                    this.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Group_Resource Attribute there must be Group or Resource in primaryHolder.\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_RESOURCE_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n+                                    this.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Member) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                    this.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Member_Resource Attribute there must be Member or Resource in primaryHolder.\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_GROUP_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n+                                    this.checkAttributeValue(sess, (Member) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                    this.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Member_Group Attribute there must be Member or Group in primaryHolder.\");\n+                            }\n+                        } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_FACILITY_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n+                                if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof User) {\n+                                    this.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), (User) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n+                                }\n+                            } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Facility) {\n+                                if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n+                                    this.checkAttributeValue(sess, (Facility) richAttribute.getSecondaryHolder(), (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                                } else {\n+                                    throw new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n+                                }\n+                            } else {\n+                                throw new InternalErrorException(\"For Facility_User Attribute there must be Facility or User in primaryHolder.\");\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public List<RichAttribute> getRichAttributesWithHoldersForAttributeDefinition(PerunSession sess, AttributeDefinition attrDef, RichAttribute aidingAttr)\n+            throws InternalErrorException, AttributeNotExistsException, VoNotExistsException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+        //Filling objects from aidingAttr\n+        if (aidingAttr == null) {\n+            throw new InternalErrorException(\"Aiding attribute cant be null.\");\n+        }\n+        if (attrDef == null) {\n+            throw new InternalErrorException(\"attrDef cant be null.\");\n+        }\n+\n+        List<RichAttribute> listOfRichAttributes = new ArrayList<RichAttribute>();\n+\n+        //All possible useful objects\n+        Vo vo = null;\n+        Facility facility = null;\n+        Group group = null;\n+        Member member = null;\n+        User user = null;\n+        Host host = null;\n+        Resource resource = null;\n+        String key = null;\n+        Attribute attribute = null;\n+\n+        //Get object for primaryHolder of aidingAttr\n+        if (aidingAttr.getPrimaryHolder() != null) {\n+            if (aidingAttr.getPrimaryHolder() instanceof Vo) {\n+                vo = (Vo) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Facility) {\n+                facility = (Facility) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Group) {\n+                group = (Group) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Member) {\n+                member = (Member) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof User) {\n+                user = (User) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Host) {\n+                host = (Host) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof Resource) {\n+                resource = (Resource) aidingAttr.getPrimaryHolder();\n+            } else if (aidingAttr.getPrimaryHolder() instanceof String) {\n+                key = (String) aidingAttr.getPrimaryHolder();\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n+            }\n+        } else {\n+            throw new InternalErrorException(\"Aiding attribute must have primaryHolder which is not null.\");\n+        }\n+\n+        //Get object for secondaryHolder of aidingAttr\n+        if (aidingAttr.getSecondaryHolder() != null) {\n+            if (aidingAttr.getSecondaryHolder() instanceof Vo) {\n+                vo = (Vo) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Facility) {\n+                facility = (Facility) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Group) {\n+                group = (Group) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Member) {\n+                member = (Member) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof User) {\n+                user = (User) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Host) {\n+                host = (Host) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof Resource) {\n+                resource = (Resource) aidingAttr.getSecondaryHolder();\n+            } else if (aidingAttr.getSecondaryHolder() instanceof String) {\n+                key = (String) aidingAttr.getSecondaryHolder();\n+            } else {\n+                throw new InternalErrorException(\"There is unrecognized object in secondaryHolder of aidingAttr\");\n+            }\n+        } // If not, its ok, secondary holder can be null\n+\n+        //First i choose what i am looking for by descriptionAttr\n+        //IMPORTANT: If member is Invalid, all objects bind to him are not accept\n+\n+        //!!! PROJIT VSECHNY DOTAZY A POUZIT JAKO KLICOVOU VRSTVU KDE TO JDE VRSTVU S MEMBERY PODLE VALIDITY !!!\n+\n+        if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_VO_ATTR)) {\n+            //Second on the fact what i really have in aidingAttr i try to find what i am looking for\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    vo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+            } else if (user != null && facility != null) {\n+                List<Vo> vosFromUser = new ArrayList<Vo>();\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                for (Member memberElement : membersFromUser) {\n+                    resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                }\n+                for (Resource resourceElement : resourcesFromUser) {\n+                    vosFromUser.add(getPerunBl().getResourcesManagerBl().getVo(sess, resourceElement));\n+                }\n+                List<Vo> vosFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n+                vosFromFacility.retainAll(vosFromUser);\n+                vosFromFacility = new ArrayList<Vo>(new HashSet<Vo>(vosFromFacility));\n+                for (Vo voElement : vosFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                }\n+            } else if (member != null && group != null) {\n+                vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+            } else if (group != null) {\n+                vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+                }\n+            } else if (resource != null) {\n+                vo = getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId());\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+            } else if (user != null) {\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Vo> vosFromMembers = new ArrayList<Vo>();\n+                for (Member memberElement : membersFromUser) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        vosFromMembers.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, memberElement));\n+                    }\n+                }\n+                for (Vo voElement : vosFromMembers) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n+                for (Vo voElement : vos) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                }\n+            } else if (facility != null) {\n+                List<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n+                for (Vo voElement : vos) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                }\n+            } else if (vo != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+            } else if (key != null) {\n+                List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                for (Vo voElement : vos) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                    List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                    groupsFromResource.retainAll(groupsFromMember);\n+                    groupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n+                    for (Group groupElement : groupsFromResource) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                    }\n+                }\n+            } else if (group != null && resource != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(group, null, attribute));\n+            } else if (user != null && facility != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                Set<Group> groupsFromMembers = new HashSet<Group>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                    }\n+                }\n+                groupsFromMembers.retainAll(getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility));\n+                for (Group groupElement : groupsFromMembers) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                }\n+            } else if (member != null && group != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(group, null, attribute));\n+            } else if (group != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(group, null, attribute));\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                    for (Group groupElement : groupsFromMember) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                    }\n+                }\n+            } else if (resource != null) {\n+                List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                for (Group groupElement : groupsFromResource) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                }\n+            } else if (user != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Group> groupsFromMembers = new ArrayList<Group>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                    }\n+                }\n+                groupsFromMembers = new ArrayList<Group>(new HashSet<Group>(groupsFromMembers));\n+                for (Group groupElement : groupsFromMembers) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                for (Group groupElement : groupsFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                }\n+            } else if (facility != null) {\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                for (Group groupElement : groupsFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                }\n+            } else if (vo != null) {\n+                List<Group> groups = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n+                for (Group groupElement : groups) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                }\n+            } else if (key != null) {\n+                List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                List<Group> groupsFromVos = new ArrayList<Group>();\n+                for (Vo voElement : vos) {\n+                    groupsFromVos.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n+                }\n+                groupsFromVos = new ArrayList<Group>(new HashSet<Group>(groupsFromVos));\n+                for (Group groupElement : groupsFromVos) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_FACILITY_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+            } else if (user != null && facility != null) {\n+                List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                if (facilitiesFromUser.contains(facility)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+                }\n+            } else if (member != null && group != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                List<Facility> facilitiesFromResources = new ArrayList<>();\n+                for (Resource resourceElement : resources) {\n+                    facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                }\n+                facilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n+                for (Facility facilityElement : facilitiesFromResources) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                List<Facility> facilitiesFromResources = new ArrayList<Facility>();\n+                for (Resource resourceElemenet : resources) {\n+                    facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n+                }\n+                facilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n+                for (Facility facilityElement : facilitiesFromResources) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                    List<Resource> resourcesFromMember = new ArrayList<Resource>();\n+                    for (Group groupElement : groupsForMember) {\n+                        resourcesFromMember.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement));\n+                    }\n+                    resourcesFromMember = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromMember));\n+                    for (Resource resourceElement : resourcesFromMember) {\n+                        Facility facilityFromMember = getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement);\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityFromMember, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(facilityFromMember, null, attribute));\n+                    }\n+                }\n+            } else if (resource != null) {\n+                facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+            } else if (user != null) {\n+                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                for (Facility facilityElement : facilities) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+            } else if (facility != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+            } else if (vo != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                List<Facility> facilitiesFromResources = new ArrayList<Facility>();\n+                for (Resource resourceElemenet : resources) {\n+                    facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n+                }\n+                facilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n+                for (Facility facilityElement : facilitiesFromResources) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                }\n+            } else if (key != null) {\n+                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                for (Facility facilityElement : facilities) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(member, null, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                membersFromResource.retainAll(membersFromGroup);\n+                membersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n+                for (Member memberElement : membersFromResource) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                    }\n+                }\n+            } else if (user != null && facility != null) {\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                membersFromUser.retainAll(membersFromFacility);\n+                membersFromUser = new ArrayList<Member>(new HashSet<Member>(membersFromUser));\n+                for (Member memberElement : membersFromUser) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                }\n+            } else if (member != null && group != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(member, null, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                for (Member memberElement : membersFromGroup) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                    }\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(member, null, attribute));\n+                }\n+            } else if (resource != null) {\n+                List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                for (Member memberElement : membersFromResource) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                }\n+            } else if (user != null) {\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                for (Member memberElement : membersFromUser) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                    }\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<Member> membersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                for (Member memberElement : membersFromHost) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                }\n+            } else if (facility != null) {\n+                List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                for (Member memberElement : membersFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                }\n+            } else if (vo != null) {\n+                List<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                for (Member memberElement : membersFromVo) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                    }\n+                }\n+            } else if (key != null) {\n+                List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                List<Member> allMembers = new ArrayList<Member>();\n+                for (Vo voElement : vos) {\n+                    allMembers.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n+                }\n+                allMembers = new ArrayList<Member>(new HashSet<Member>(allMembers));\n+                for (Member memberElement : allMembers) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                    }\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n+            } else if (user != null && facility != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                    }\n+                }\n+                List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                resourcesFromUser.retainAll(resourcesFromFacility);\n+                resourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n+                for (Resource resourceElement : resourcesFromUser) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            } else if (member != null && group != null) {\n+                List<Resource> resourcesFromGroup =\n+                        new ArrayList<>(new HashSet<>(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group)));\n+                for (Resource resourceElement : resourcesFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                for (Resource resourceElement : resourcesFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                    for (Resource resourceElement : resourcesFromMember) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                    }\n+                }\n+            } else if (resource != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n+            } else if (user != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                    }\n+                }\n+                resourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n+                for (Resource resourceElement : resourcesFromUser) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource resourceElement : resourcesFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            } else if (facility != null) {\n+                List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource resourceElement : resourcesFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            } else if (vo != null) {\n+                List<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                for (Resource resourceElement : resourcesFromVo) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            } else if (key != null) {\n+                List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                List<Resource> allResources = new ArrayList<Resource>();\n+                for (Vo voElement : vos) {\n+                    allResources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n+                }\n+                allResources = new ArrayList<Resource>(new HashSet<Resource>(allResources));\n+                for (Resource resourceElement : allResources) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                members.retainAll(membersFromResource);\n+                List<User> usersFromGroup = new ArrayList<User>();\n+                for (Member memberElement : members) {\n+                    usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                }\n+                usersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n+                for (User userElement : usersFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                }\n+            } else if (user != null && facility != null) {\n+                List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                if (facilitiesFromUser.contains(user)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                }\n+            } else if (member != null && group != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                List<User> usersFromGroup = new ArrayList<User>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                    }\n+                }\n+                usersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n+                for (User userElement : usersFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                }\n+            } else if (resource != null) {\n+                List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+                for (User userElement : usersFromResource) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                }\n+            } else if (user != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                for (User userElement : usersFromHost) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                }\n+            } else if (facility != null) {\n+                List<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                for (User userElement : usersFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                }\n+            } else if (vo != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                List<User> usersFromVo = new ArrayList<User>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        usersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                    }\n+                }\n+                usersFromVo = new ArrayList<User>(new HashSet<User>(usersFromVo));\n+                for (User userElement : usersFromVo) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                }\n+            } else if (key != null) {\n+                List<User> allUsers = getPerunBl().getUsersManagerBl().getUsers(sess);\n+                for (User userElement : allUsers) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                    List<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                    for (Host hostElement : hostsFromResource) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                    }\n+                }\n+            } else if (group != null && resource != null) {\n+                facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                List<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                for (Host hostElement : hostsFromResource) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            } else if (user != null && facility != null) {\n+                if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facility)) {\n+                    List<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                    for (Host hostElement : hostsFromFacility) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                    }\n+                }\n+            } else if (member != null && group != null) {\n+                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                List<Facility> facilitiesFromResources = new ArrayList<>();\n+                for (Resource resourceElement : resourcesFromGroup) {\n+                    facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                }\n+                facilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n+                List<Host> hostsFromFacilities = new ArrayList<>();\n+                for (Facility facilityElement : facilitiesFromResources) {\n+                    hostsFromFacilities.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                }\n+                for (Host hostElement : hostsFromFacilities) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                List<Facility> facilities = new ArrayList<Facility>();\n+                for (Resource resourceElement : resources) {\n+                    facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                }\n+                List<Host> hostsFromGroup = new ArrayList<Host>();\n+                for (Facility facilityElement : facilities) {\n+                    hostsFromGroup.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                }\n+                hostsFromGroup = new ArrayList<Host>(new HashSet<Host>(hostsFromGroup));\n+                for (Host hostElement : hostsFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                    List<Facility> facilities = new ArrayList<Facility>();\n+                    for (Resource resourceElement : resources) {\n+                        facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                    }\n+                    List<Host> hostsFromMembers = new ArrayList<Host>();\n+                    for (Facility facilityElement : facilities) {\n+                        hostsFromMembers.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                    }\n+                    hostsFromMembers = new ArrayList<Host>(new HashSet<Host>(hostsFromMembers));\n+                    for (Host hostElement : hostsFromMembers) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                    }\n+                }\n+            } else if (resource != null) {\n+                facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                List<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                for (Host hostElement : hostsFromResource) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            } else if (user != null) {\n+                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                List<Host> hostsFromUser = new ArrayList<Host>();\n+                for (Facility facilityElement : facilities) {\n+                    hostsFromUser.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                }\n+                hostsFromUser = new ArrayList<Host>(new HashSet<Host>(hostsFromUser));\n+                for (Host hostElement : hostsFromUser) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            } else if (host != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, host, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(host, null, attribute));\n+            } else if (facility != null) {\n+                List<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                for (Host hostElement : hostsFromFacility) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            } else if (vo != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                List<Facility> facilities = new ArrayList<Facility>();\n+                for (Resource resourceElement : resources) {\n+                    facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                }\n+                List<Host> hostsFromVo = new ArrayList<Host>();\n+                for (Facility facilityElement : facilities) {\n+                    hostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                }\n+                hostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n+                for (Host hostElement : hostsFromVo) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            } else if (key != null) {\n+                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                List<Host> hostsFromVo = new ArrayList<Host>();\n+                for (Facility facilityElement : facilities) {\n+                    hostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                }\n+                hostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n+                for (Host hostElement : hostsFromVo) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_ENTITYLESS_ATTR)) {\n+            if (key != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, key, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(key, null, attribute));\n+            } else {\n+                List<String> keys = this.getEntitylessKeys(sess, attrDef);\n+                for (String keyElement : keys) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, keyElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(keyElement, null, attribute));\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                    List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                    groupsFromResource.retainAll(groupsFromMember);\n+                    groupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n+                    for (Group groupElement : groupsFromResource) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n+                    }\n+                }\n+            } else if (group != null && resource != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, group, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(resource, group, attribute));\n+            } else if (user != null && facility != null) {\n+                //Groups from User\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Group> groupsFromUser = new ArrayList<Group>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        groupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                    }\n+                }\n+                //Retain of Groups from facility\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                groupsFromFacility.retainAll(groupsFromUser);\n+                //Resources from user\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                for (Member memberElement : membersFromUser) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                    }\n+                }\n+                //Resource from facility\n+                List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                //Retain of Resources\n+                resourcesFromFacility.retainAll(resourcesFromUser);\n+                //All possibilities\n+                resourcesFromFacility = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromFacility));\n+                for (Resource resourceElement : resourcesFromFacility) {\n+                    List<Group> groupsForResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                    groupsForResourceElement.retainAll(groupsFromFacility);\n+                    groupsForResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsForResourceElement));\n+                    for (Group groupElement : groupsForResourceElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (member != null && group != null) {\n+                // there is no need to get Resources from Member because Members are only in those groups\n+                // from which we already took Resources\n+                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                for (Resource resourceElement : resourcesFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                for (Resource resourceElement : resourcesFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                    List<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                    for (Resource resourceElement : resourcesFromMember) {\n+                        List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                        groupsFromResourceElement.retainAll(groupsFromMember);\n+                        groupsFromResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsFromResourceElement));\n+                        for (Group groupElement : groupsFromResourceElement) {\n+                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                            listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                        }\n+                    }\n+                }\n+            } else if (resource != null) {\n+                List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                for (Group groupElement : groupsFromResource) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n+                }\n+            } else if (user != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Group> groupsFromUser = new ArrayList<Group>();\n+                List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        groupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                        resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                    }\n+                }\n+                groupsFromUser = new ArrayList<Group>(new HashSet<Group>(groupsFromUser));\n+                for (Group groupElement : groupsFromUser) {\n+                    List<Resource> resourcesFromGroupElement = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement);\n+                    resourcesFromGroupElement.retainAll(resourcesFromUser);\n+                    resourcesFromGroupElement = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromGroupElement));\n+                    for (Resource resourceElement : resourcesFromGroupElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource resourceElement : resourcesFromHost) {\n+                    List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                    for (Group groupElement : groupsFromResourceElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (facility != null) {\n+                List<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource resourceElement : resourcesFromHost) {\n+                    List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                    for (Group groupElement : groupsFromResourceElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (vo != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                for (Resource resourceElement : resources) {\n+                    List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                    for (Group groupElement : groupsFromResourceElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (key != null) {\n+                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                List<Resource> resources = new ArrayList<Resource>();\n+                for (Facility facilityElement : facilities) {\n+                    resources.addAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facilityElement));\n+                }\n+                resources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n+                for (Resource resourceElement : resources) {\n+                    List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                    for (Group groupElement : groupsFromResourceElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                    }\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR)) {\n+            if (resource != null && member != null) {\n+                List<Group> groupFromMembers = new ArrayList<>();\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    groupFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                }\n+                List<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                groupsFromResources.retainAll(groupFromMembers);\n+                groupsFromResources = new ArrayList<>(new HashSet<>(groupsFromResources));\n+                for (Group groupElement : groupsFromResources) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(member, group, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                // there is no need to get Members from Resource because needed Members are only from 'group' variable\n+                // which we already have. Other Members (aquired from Resource) than from 'group' variable will be redundant because\n+                // they will be not assigned to it.\n+                List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                for (Member memberElement : membersFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n+                }\n+            } else if (user != null && facility != null) {\n+                // get all groups from facility\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                // get all groups from user\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                Set<Group> groupsFromMembers = new HashSet<>();\n+                for (Member memberElement : membersFromUser) {\n+                    groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                }\n+                // retain of groups\n+                groupsFromMembers.retainAll(groupsFromFacility);\n+                List<Group> retainedGroups = new ArrayList<>(groupsFromMembers);\n+                // all possible groups\n+                for (Group groupElement : retainedGroups) {\n+                    // get all members for 'groupElement' variable\n+                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                    // all possibilities\n+                    for (Member memberElement : membersFromGroup) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (member != null && group != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, group, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(member, group, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Member> membersFromGroups = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                for (Member memberElement : membersFromGroups) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Group> groupsFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                    for (Group groupElement : groupsFromMembers) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(member, groupElement, attribute));\n+                    }\n+                }\n+            } else if (resource != null) {\n+                List<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                for (Group groupElement : groupsFromResources) {\n+                    // get all members for 'groupElement' variable\n+                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                    for (Member memberElement : membersFromGroup) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (user != null) {\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                for (Member memberElement : membersFromUser) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        // get all groups for 'memberElement' variable\n+                        List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement);\n+                        for (Group groupElement : groupsFromMember) {\n+                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                            listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                        }\n+                    }\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                for (Group groupElement : groupsFromFacility) {\n+                    // get all members for 'groupElement' variable\n+                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                    for (Member memberElement : membersFromGroup) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (facility != null) {\n+                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                for (Group groupElement : groupsFromFacility) {\n+                    // get all members for 'groupElement' variable\n+                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                    for (Member memberElement : membersFromGroup) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (vo != null) {\n+                List<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n+                for (Group groupElement : groupsFromVo) {\n+                    // get all members for 'groupElement' variable\n+                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                    for (Member memberElement : membersFromGroup) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                    }\n+                }\n+            } else if (key != null) {\n+                List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                List<Group> groupsFromVo = new ArrayList<>();\n+                for (Vo voElement : vos) {\n+                    groupsFromVo.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n+                }\n+                groupsFromVo = new ArrayList<>(new HashSet<>(groupsFromVo));\n+                for (Group groupElement : groupsFromVo) {\n+                    // get all members for 'groupElement' variable\n+                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                    for (Member memberElement : membersFromGroup) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                    }\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, member, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resource, member, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                membersFromGroup.retainAll(membersFromResource);\n+                membersFromGroup = new ArrayList<Member>(new HashSet<Member>(membersFromGroup));\n+                for (Member memberElement : membersFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n+                }\n+            } else if (user != null && facility != null) {\n+                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                for (Member memberElement : membersFromUser) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                    }\n+                }\n+                membersFromUser.retainAll(membersFromFacility);\n+                resourcesFromUser.retainAll(resourcesFromFacility);\n+                resourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n+                for (Resource resourceElement : resourcesFromUser) {\n+                    List<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                    membersForResourceElement.retainAll(membersFromUser);\n+                    membersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n+                    for (Member memberElement : membersForResourceElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                    }\n+                }\n+            } else if (member != null && group != null) {\n+                // there is no need to get Resources from Member because Members are only in those groups\n+                // from which we already took Resources\n+                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                for (Resource resourceElement : resourcesFromGroup) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                for (Resource resourceElement : resources) {\n+                    List<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                    membersForResourceElement.retainAll(members);\n+                    membersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n+                    for (Member memberElement : members) {\n+                        if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                            listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                        }\n+                    }\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                    for (Resource resourceElement : resources) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n+                    }\n+                }\n+            } else if (resource != null) {\n+                List<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                for (Member memberElement : members) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n+                }\n+            } else if (user != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement);\n+                        for (Resource resourceElement : resources) {\n+                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                            listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                        }\n+                    }\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource resourceElement : resources) {\n+                    List<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                    for (Member memberElement : members) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                    }\n+                }\n+            } else if (facility != null) {\n+                List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                for (Resource resourceElement : resources) {\n+                    List<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                    for (Member memberElement : members) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                    }\n+                }\n+            } else if (vo != null) {\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                List<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                for (Resource resourceElement : resources) {\n+                    List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                    membersFromResource.retainAll(membersFromVo);\n+                    for (Member memberElement : membersFromResource) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                    }\n+                }\n+\n+            } else if (key != null) {\n+                List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                List<Resource> resources = new ArrayList<Resource>();\n+                List<Member> membersFromVo = new ArrayList<Member>();\n+                for (Vo voElement : vos) {\n+                    resources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n+                    membersFromVo.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n+                }\n+                resources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n+                for (Resource resourceElement : resources) {\n+                    List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                    membersFromResource.retainAll(membersFromVo);\n+                    membersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n+                    for (Member memberElement : membersFromResource) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                    }\n+                }\n+            }\n+        } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR)) {\n+            if (resource != null && member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                    user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n+                }\n+            } else if (group != null && resource != null) {\n+                facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                //get Users from Group\n+                List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                List<User> usersFromGroup = new ArrayList<User>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                    }\n+                }\n+                //get users from resource\n+                List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                List<User> usersFromResource = new ArrayList<User>();\n+                for (Member memberElement : membersFromResource) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        usersFromResource.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                    }\n+                }\n+                usersFromGroup.retainAll(usersFromResource);\n+                usersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n+                for (User userElement : usersFromGroup) {\n+                    if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement).contains(facility)) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                    }\n+                }\n+            } else if (user != null && facility != null) {\n+                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n+                listOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n+            } else if (member != null && group != null) {\n+                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                List<Facility> facilitiesFromResources = new ArrayList<>();\n+                for (Resource resourceElement : resourcesFromGroup) {\n+                    facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                }\n+                facilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n+                User userFromMember = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                for (Facility facilityElement : facilitiesFromResources) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userFromMember, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facilityElement, userFromMember, attribute));\n+                }\n+            } else if (group != null) {\n+                List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                List<User> users = new ArrayList<User>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        users.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                    }\n+                }\n+                List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                List<Facility> facilities = new ArrayList<Facility>();\n+                for (Resource resourceElement : resources) {\n+                    facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                }\n+                users = new ArrayList<User>(new HashSet<User>(users));\n+                for (User userElement : users) {\n+                    List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n+                    facilities.retainAll(facilitiesFromUser);\n+                    facilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n+                    for (Facility facilityElement : facilities) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n+                    }\n+                }\n+            } else if (member != null) {\n+                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                    user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                    List<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                    List<Facility> facilities = new ArrayList<Facility>();\n+                    for (Resource resourceElement : memberResources) {\n+                        facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                    }\n+                    facilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n+                    for (Facility facilityElement : facilities) {\n+                        if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facilityElement)) {\n+                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n+                            listOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n+                        }\n+                    }\n+                }\n+            } else if (resource != null) {\n+                facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+                for (User userElement : usersFromResource) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                }\n+            } else if (user != null) {\n+                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                for (Facility facilityElement : facilities) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n+                }\n+            } else if (host != null) {\n+                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                for (User userElement : users) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                }\n+            } else if (facility != null) {\n+                List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                for (User userElement : users) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                }\n+            } else if (vo != null) {\n+                List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                List<User> users = new ArrayList<User>();\n+                for (Member memberElement : members) {\n+                    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                        users.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                    }\n+                }\n+                List<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                List<Facility> facilitiesFromVo = new ArrayList<Facility>();\n+                for (Resource resourceElement : resourcesFromVo) {\n+                    facilitiesFromVo.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                }\n+                users = new ArrayList<User>(new HashSet<User>(users));\n+                for (User userElement : users) {\n+                    List<Facility> facilitiesFromUserElement = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n+                    facilitiesFromUserElement.retainAll(facilitiesFromVo);\n+                    facilitiesFromUserElement = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromUserElement));\n+                    for (Facility facilityElement : facilitiesFromUserElement) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n+                    }\n+                }\n+            } else if (key != null) {\n+                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                for (Facility facilityElement : facilities) {\n+                    List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facilityElement);\n+                    for (User userElement : users) {\n+                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                        listOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n+                    }\n+                }\n+            }\n+        } else {\n+            throw new InternalErrorException(\"There is unrecognized namespace in attribute \" + attrDef);\n+        }\n+\n+        return listOfRichAttributes;\n+    }\n+\n+    /**\n+     * Checks if the attributes represent empty values. If so, converts them into null.\n+     *\n+     * @param attributes attributes to be checked if are null\n+     */\n+    public void convertEmptyAttrValueToNull(List<Attribute> attributes) throws ConsistencyErrorException {\n+        for (Attribute attribute : attributes) {\n+            convertEmptyAttrValueToNull(attribute);\n+        }\n+    }\n+\n+    /**\n+     * Checks if the attribute represents empty value. If so, converts it into null.\n+     *\n+     * @param attribute attribute to be checked if is null\n+     */\n+    public void convertEmptyAttrValueToNull(Attribute attribute) throws ConsistencyErrorException {\n+        if (attribute.getValue() == null) {\n+            return;\n+        }\n+        if (attribute.getValue() instanceof Integer) {\n+            return;\n+        }\n+        if (attribute.getValue() instanceof String) {\n+            if (((String) attribute.getValue()).matches(\"\\\\s*\")) {\n+                attribute.setValue(null);\n+            }\n+        } else if (attribute.getValue() instanceof Boolean) {\n+            if (attribute.getValue().equals(Boolean.FALSE)) {\n+                attribute.setValue(null);\n+            }\n+        } else if (attribute.getValue() instanceof ArrayList) {\n+            if (((ArrayList) attribute.getValue()).isEmpty()) {\n+                attribute.setValue(null);\n+            }\n+        } else if (attribute.getValue() instanceof LinkedHashMap) {\n+            if (((LinkedHashMap) attribute.getValue()).isEmpty()) {\n+                attribute.setValue(null);\n+            }\n+        } else {\n+            throw new ConsistencyErrorException(\"Invalid attribute value type: \" + attribute.getType() +\n+                    \" class: \" + attribute.getValue().getClass().getName());\n+        }\n+    }\n+\n+    /**\n+     * Gets the getAttributesManagerImpl().\n+     *\n+     * @return The getAttributesManagerImpl().\n+     */\n+    public AttributesManagerImplApi getAttributesManagerImpl() {\n+        return this.attributesManagerImpl;\n+    }\n+\n+    /**\n+     * Gets the perunBl.\n+     *\n+     * @return The perunBl.\n+     */\n+    public PerunBl getPerunBl() {\n+        return this.perunBl;\n+    }\n+\n+    public void setPerunBl(PerunBl perunBl) {\n+        this.perunBl = perunBl;\n+    }\n+\n+    private List<Attribute> attributesFromDefinitions(List<? extends AttributeDefinition> attributesDefinition) {\n+        List<Attribute> attributes = new ArrayList<Attribute>(attributesDefinition.size());\n+        for (AttributeDefinition attributeDefinition : attributesDefinition) {\n+            attributes.add(new Attribute(attributeDefinition));\n+        }\n+        return attributes;\n+    }\n+\n+    protected void initialize() throws InternalErrorException {\n+        log.debug(\"AttributesManagerBlImpl initialize started.\");\n+\n+        //Get PerunSession\n+        String attributesManagerInitializator = \"attributesManagerBlImplInitializator\";\n+        PerunPrincipal pp = new PerunPrincipal(attributesManagerInitializator, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL);\n+        PerunSession sess = perunBl.getPerunSession(pp, new PerunClient());\n+\n+        //Prepare all attribute definition from system perun\n+        Set<AttributeDefinition> allAttributesDef = new HashSet<AttributeDefinition>();\n+        allAttributesDef.addAll(this.getAttributesDefinition(sess));\n+\n+        //Basic state of all maps (record for every existing attributeDefinitions)\n+        for (AttributeDefinition ad : allAttributesDef) {\n+            dependencies.put(ad, new HashSet<AttributeDefinition>());\n+            strongDependencies.put(ad, new HashSet<AttributeDefinition>());\n+            inverseDependencies.put(ad, new HashSet<AttributeDefinition>());\n+            inverseStrongDependencies.put(ad, new HashSet<AttributeDefinition>());\n+            allDependencies.put(ad, new HashSet<AttributeDefinition>());\n+        }\n+\n+        log.debug(\"Dependencies and StrongDependencies filling started.\");\n+\n+        //Fill dep and strongDep maps\n+        for (AttributeDefinition ad : allAttributesDef) {\n+            AttributesModuleImplApi module = null;\n+            List<String> depList = new ArrayList<String>();\n+            List<String> strongDepList = new ArrayList<String>();\n+            Set<AttributeDefinition> depSet = new HashSet<AttributeDefinition>();\n+            Set<AttributeDefinition> strongDepSet = new HashSet<AttributeDefinition>();\n+\n+            //Return null to object if module not exist\n+            Object attributeModule = getAttributesManagerImpl().getAttributesModule(sess, ad);\n+\n+            //If there is any existing module\n+            if (attributeModule != null) {\n+                module = (AttributesModuleImplApi) attributeModule;\n+                depList = module.getDependencies();\n+                strongDepList = module.getStrongDependencies();\n+                //Fill Set of dependencies\n+                for (String s : depList) {\n+                    if (!s.endsWith(\"*\")) {\n+                        try {\n+                            AttributeDefinition attrDef = getAttributeDefinition(sess, s);\n+                            depSet.add(attrDef);\n+                        } catch (AttributeNotExistsException ex) {\n+                            log.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+                        }\n+                        //If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n+                    } else {\n+                        List<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length() - 2));\n+                        for (String variant : allVariantOfDependence) {\n+                            try {\n+                                AttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n+                                depSet.add(attrDef);\n+                            } catch (AttributeNotExistsException ex) {\n+                                log.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+                            }\n+                        }\n+                    }\n+                }\n+                //Fil Set of strongDependencies\n+                for (String s : strongDepList) {\n+                    if (!s.endsWith(\"*\")) {\n+                        try {\n+                            AttributeDefinition attrDef = getAttributeDefinition(sess, s);\n+                            strongDepSet.add(attrDef);\n+                        } catch (AttributeNotExistsException ex) {\n+                            log.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+                        }\n+                        //If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n+                    } else {\n+                        List<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length() - 2));\n+                        for (String variant : allVariantOfDependence) {\n+                            try {\n+                                AttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n+                                strongDepSet.add(attrDef);\n+                            } catch (AttributeNotExistsException ex) {\n+                                log.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+            dependencies.put(ad, depSet);\n+            strongDependencies.put(ad, strongDepSet);\n+        }\n+\n+        log.debug(\"Dependencies and StrongDependencies was filled successfully.\");\n+\n+        log.debug(\"InverseDependencies and InverseStrongDependencies filling started.\");\n+\n+        //First create inversion map for simple dependencies\n+        Set<AttributeDefinition> depSet = dependencies.keySet();\n+        for (AttributeDefinition key : depSet) {\n+            Set<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n+            keySet = dependencies.get(key);\n+            for (AttributeDefinition keySetItem : keySet) {\n+                Set<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n+                changeSet = inverseDependencies.get(keySetItem);\n+                changeSet.add(key);\n+                //inverseDependencies.put(keySetItem, changeSet);\n+            }\n+        }\n+\n+        //Second create inversion map for strong dependencies\n+        depSet = strongDependencies.keySet();\n+        for (AttributeDefinition key : depSet) {\n+            Set<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n+            keySet = strongDependencies.get(key);\n+            for (AttributeDefinition keySetItem : keySet) {\n+                Set<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n+                changeSet = inverseStrongDependencies.get(keySetItem);\n+                changeSet.add(key);\n+                //inverseDependencies.put(keySetItem, changeSet);\n+            }\n+        }\n+\n+        log.debug(\"InverseDependencies and InverseStrongDependencies was filled successfully.\");\n+\n+        log.debug(\"Cycle test of InverseStrongDependencies started.\");\n+        //Test StrDepInveMap on cycles\n+\n+        if (isMapOfAttributesDefCyclic(inverseStrongDependencies)) {\n+            log.error(\"There is cycle in inverseStrongDependencies so map of All attribute will be not created!\");\n+        } else {\n+            log.debug(\"Cycle test of InverseStrongDependencies was successfull.\");\n+            log.debug(\"Filling map of allDependencies started.\");\n+\n+            for (AttributeDefinition key : allDependencies.keySet()) {\n+                List<AttributeDefinition> stackingAttributes = new ArrayList<AttributeDefinition>();\n+                Set<AttributeDefinition> dependenciesOfAttribute = new HashSet<AttributeDefinition>();\n+                dependenciesOfAttribute.addAll(inverseStrongDependencies.get(key));\n+                dependenciesOfAttribute.addAll(inverseDependencies.get(key));\n+                stackingAttributes.addAll(inverseStrongDependencies.get(key));\n+                while (!stackingAttributes.isEmpty()) {\n+                    AttributeDefinition firstAttr = stackingAttributes.get(0);\n+                    stackingAttributes.remove(firstAttr);\n+                    dependenciesOfAttribute.addAll(inverseStrongDependencies.get(firstAttr));\n+                    dependenciesOfAttribute.addAll(inverseDependencies.get(firstAttr));\n+                    stackingAttributes.addAll(inverseStrongDependencies.get(firstAttr));\n+                }\n+                allDependencies.put(key, dependenciesOfAttribute);\n+            }\n+\n+            log.debug(\"Map of allDependencies was filled successfully.\");\n+        }\n+\n+        //DEBUG creating file with all dependencies of all attributes (180+- on devel)\n+\t\t/*String pathToFile = \"./AllDependencies.log\";\n+\t\t\tFile f = new File(pathToFile);\n \t\t\ttry {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, resource, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n+\t\t\tf.createNewFile();\n+\t\t\tPrintWriter writer;\n+\t\t\twriter = new PrintWriter(new FileWriter(f, true));\n+\t\t\tint i=1;\n+\t\t\tfor(AttributeDefinition ad: allDependencies.keySet()) {\n+\t\t\twriter.println(i + \") \" + ad.toString());\n+\t\t\tfor(AttributeDefinition a: allDependencies.get(ad)) {\n+\t\t\twriter.println(\" ---> \" + a);\n \t\t\t}\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, resource);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, group, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, group);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, member, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n-\t\t\tcheckAttributeValue(sess, resource, member, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, AttributeNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, member, group, attribute, false)) {\n-\t\t\tcheckAttributeValue(sess, member, group, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, group, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, member, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tif(setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n-\t\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n-\t\t\t\tcheckAttributeValue(sess, resource, member, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif(setAttributeWithoutCheck(sess, resource, member, attribute, true)) {\n-\t\t\t\tList<Attribute> listOfAttributes = new ArrayList<Attribute>();\n-\t\t\t\tlistOfAttributes.add(attribute);\n-\t\t\t\tcheckAttributesValue(sess, resource, member, listOfAttributes, workWithUserAttributes);\n-\t\t\t\tthis.checkAttributesDependencies(sess, resource, member, listOfAttributes, workWithUserAttributes);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO better exception here\n-\t\t\ttry {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//FIXME update changed variable\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, facility, user);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t//NS_MEMBER_RESOURCE_ATTR\n-\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t//TODO\n-\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, member, attribute);\n-\t\t\t\tif(changed) {\n-\t\t\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, resource, member);\n-\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(workWithUserAttributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t//NS_USER_FACILITY_ATTR\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t//NS_USER_ATTR\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Member member, Group group, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, member, group, attribute);\n-\t\t\t\tif(changed) {\n-\t\t\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, member, group);\n-\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(workWithUserAttributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttributeInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttribute(sess, member, attribute);\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO better exception here\n-\t\t\ttry {\n-\t\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//FIXME update \"changed\" variable\n-\n-\t\t} else if(isCoreAttribute(sess, attribute)) {\n-\t\t\t//TODO better exception\n-\t\t\ttry {\n-\t\t\t\tsetCoreAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tchanged = true; //FIXME check if attribute is acctualy changed\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, member, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, member);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, facility, user, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, facility, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, user, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, user, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, user, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, user, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(user, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttributeInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttribute(sess, user, attribute);\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, user, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, user);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, host, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, host, attribute)) {\n-\t\t\tcheckAttributeValue(sess, host, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(host, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute \" + attribute + \" can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, host, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, host);\n-\t\t\t//TODO this method not existed yet!\n-\t\t\t//getAttributesManagerImpl().changedAttributeHook(sess, host, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, resource, group, attribute)) {\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, group, attribute));\n-\t\t\tcheckAttributeValue(sess, resource, group, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//FIXME Zatim je zakazane nastavovani virtualnich atributu group_resource\n-\n-\t\t\tAttribute storedAttribute;\n-\t\t\ttry {\n-\t\t\t\tstoredAttribute = getAttribute(sess, resource, group, attribute.getName());\n-\t\t\t} catch(AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t\tif(!(storedAttribute.getValue() == null ? attribute.getValue() == null : storedAttribute.getValue().equals(attribute.getValue()))) { //unless attribute and storedAttribute have equals value\n-\t\t\t\t//FIXME\n-\t\t\t\tif(attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT  + \":unixGID\") ||\n-\t\t\t\t\t\tattribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT  + \":unixGroupName\")) {\n-\t\t\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, resource, group, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute. \" + attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, group, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, group, resource);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, group, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, ues, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, ues, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, ues);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, key, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, key);\n-\t\t\t//TODO this method not existed yet\n-\t\t\t//getAttributesManagerImpl().changedAttributeHook(sess, key, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, key, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, key, attribute)) {\n-\t\t\tcheckAttributeValue(sess, key, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(key, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, ues, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, ues, attribute)) {\n-\t\t\tcheckAttributeValue(sess, ues, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(ues, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeDefinitionExistsException {\n-\t\tUtils.notNull(attribute.getName(), \"attribute.getName\");\n-\t\tUtils.notNull(attribute.getNamespace(), \"attribute.getNamespace\");\n-\t\tUtils.notNull(attribute.getFriendlyName(), \"attribute.getFriendlyName\");\n-\t\tUtils.notNull(attribute.getType(), \"attribute.getType\");\n-\n-\t\t//check if attribute.nameSpace is valid nameSpace\n-\t\tif(!isCorrectNameSpace(attribute.getNamespace())) {\n-\t\t\tthrow new InternalErrorException(\"Incorrect namespace \" + attribute.getNamespace());\n-\t\t}\n-\n-\t\t//check if attribute.type is valid class name\n-\t\ttry {\n-\t\t\tif (!attribute.getType().equals(BeansUtils.largeStringClassName) &&\n-\t\t\t\t\t!attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\t\tClass.forName(attribute.getType());\n-\t\t\t}\n-\t\t} catch(ClassNotFoundException ex) {\n-\t\t\t//TODO dat nejakou jinou vyjimku\n-\t\t\tthrow new InternalErrorException(\"Wrong attribute type\", ex);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", attribute);\n-\t\treturn getAttributesManagerImpl().createAttribute(sess, attribute);\n-\t}\n-\n-\tprivate boolean isCorrectNameSpace(String value) {\n-\t\tfor(String entityType : AttributesManager.ENTITY_TYPES) {\n-\t\t\tif(value.matches(\"urn:perun:\" + entityType + \":attribute-def:(def|opt|virt|core)\")) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\t//Remove services' required attributes\n-\t\t//TODO\n-\n-\t\t//Remove attribute and all it's values\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} deleted.\", attribute);\n-\t\tthis.deleteAllAttributeAuthz(sess, attribute);\n-\t\tgetAttributesManagerImpl().deleteAttribute(sess, attribute);\n-\t}\n-\n-\tpublic void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(sess, \"All authorization information were deleted for {}.\", attribute);\n-\t\tgetAttributesManagerImpl().deleteAllAttributeAuthz(sess, attribute);\n-\t}\n-\n-\tpublic void deleteAttribute(PerunSession sess, AttributeDefinition attributeDefinition, boolean force) throws InternalErrorException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\tpublic List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getResourceRequiredAttributesDefinition(sess, resource);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getResourceRequiredAttributes(sess, resourceToGetServicesFrom, resource, member, false);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n-\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user;\n-\t\t\tFacility facility;\n-\t\t\ttry {\n-\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityById(sess, resource.getFacilityId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member has non-existent user.\", e);\n-\t\t\t} catch (FacilityNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Resource has non-existent facility.\", e);\n-\t\t\t}\n-\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, group, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, group));\n-\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user;\n-\t\t\ttry {\n-\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member has non-existent user.\", e);\n-\t\t\t}\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Resource resource) throws InternalErrorException {\n-\t\tList<Integer> serviceIds = new ArrayList<>();\n-\t\tfor(Service service: services) {\n-\t\t\tserviceIds.add(service.getId());\n-\t\t}\n-\t\treturn this.attributesManagerImpl.getRequiredAttributes(sess, resource, serviceIds);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, resource);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, resource, member);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, resource, member, workWithUserAttributes);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, facility, user);\n-\t\tSet<Attribute> attributes = new HashSet<Attribute>();\n-\t\tfor(Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, facility, user));\n-\t\t}\n-\t\treturn new ArrayList<Attribute>(attributes);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, user);\n-\t\tSet<Attribute> attributes = new HashSet<Attribute>();\n-\t\tfor(Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, user));\n-\t\t}\n-\t\treturn new ArrayList<Attribute>(attributes);\n-\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n-\t\tSet<Attribute> attributes = new HashSet<Attribute>();\n-\t\tfor(Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, member));\n-\t\t}\n-\n-\t\tif(workWithUserAttributes){\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tattributes.addAll(this.getRequiredAttributes(sess, user));\n-\t\t}\n-\t\treturn new ArrayList<Attribute>(attributes);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute>getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group));\n-\n-\t\tif(workWithGroupAttributes) {\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, host);\n-\t}\n-\tpublic List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributesDefinition(sess, service);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, facility);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, facility);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, vo);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, resource);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getRequiredAttributes(sess, service, resource, member, false);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(!workWithUserAttributes) return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member);\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, List<Member> members, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\t// check if members are from the same VO as resource\n-\t\tif (members.isEmpty()) {\n-\t\t\treturn new HashMap<>();\n-\t\t}\n-\n-\t\tfor (Member m : members) {\n-\t\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, m, resource);\n-\t\t}\n-\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tHashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n-\t\t\tHashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n-\n-\t\t\tfor (Member mem : memberAttributes.keySet()) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, memberAttributes.get(mem));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn resourceMemberAttributes;\n-\t\t}\n-\n-\t\t// get list of users, save user id as a key and list of member objects as a value\n-\t\tList<User> users = new ArrayList<>();\n-\t\tHashMap<User, List<Member>> userMemberIdMap = new HashMap<>();\n-\n-\t\t// Maps user ids to member objects and fills list of users\n-\t\tfor (Member m : members) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, m);\n-\t\t\tusers.add(user);\n-\t\t\tif (userMemberIdMap.containsKey(user)) {\n-\t\t\t\tuserMemberIdMap.get(user).add(m);\n-\t\t\t} else {\n-\t\t\t\tuserMemberIdMap.put(user, Arrays.asList(m));\n-\t\t\t}\n-\t\t}\n-\n-\t\t// get facility if null\n-\t\tif (facility == null) {\n-\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t}\n-\n-\t\t// get 4 maps from Impl getRequiredAttributes\n-\t\tHashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n-\t\tHashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n-\t\tHashMap<User, List<Attribute>> userFacilityAttributes = getRequiredAttributes(sess, service, facility, users);\n-\t\tHashMap<User, List<Attribute>> userAttributes = getRequiredAttributes(sess, service, users);\n-\n-\t\tfor (Member mem : memberAttributes.keySet()) {\n-\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\tresourceMemberAttributes.put(mem, memberAttributes.get(mem));\n-\t\t\t} else {\n-\t\t\t\tresourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (User user : userFacilityAttributes.keySet()) {\n-\t\t\t// List of members for given user\n-\t\t\tList<Member> mems = userMemberIdMap.get(user);\n-\t\t\tfor (Member mem : mems) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, userFacilityAttributes.get(user));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(userFacilityAttributes.get(user));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (User user : userAttributes.keySet()) {\n-\t\t\t// List of members for given user\n-\t\t\tList<Member> mems = userMemberIdMap.get(user);\n-\t\t\tfor (Member mem : mems) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, userAttributes.get(user));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(userAttributes.get(user));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn resourceMemberAttributes;\n-\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n-\t\tif (!members.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, service, resource, members);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n-\t\tif (!members.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, resource, service, members);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n-\t\tif (!users.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, service, facility, users);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n-\t\tif (!users.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, service, users);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tif(!workWithUserAttributes) return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, boolean withGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!withGroupAttributes) return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n-\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, group));\n-\t\treturn attributes;\n-\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, host);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, group);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, user);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user);\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn fillAttributes(sess, resource, member, attributes, false);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\t//skip non-empty attribute\n-\t\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn filledAttributes;\n-\t\t}\n-\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\n-\t\t\t\t//TODO and check it's namespace\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, member, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn fillAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\t//skip non-empty attribute\n-\t\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn filledAttributes;\n-\t\t}\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\n-\t\t\t\t//TODO and check it's namespace\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes, boolean returnOnlyAttributesWithChangedValue) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(!returnOnlyAttributesWithChangedValue) {\n-\t\t\treturn this.fillAttributes(sess, facility, resource, user, member, attributes);\n-\t\t} else {\n-\t\t\tList<Attribute> attributesWithChangedValue = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\t\tAttribute a;\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, member, attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(a.getValue() != null) attributesWithChangedValue.add(a);\n-\t\t\t\t}\n-\t\t\t}\n-\t\treturn attributesWithChangedValue;\n-\t\t}\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, host, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, host, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, group, attribute);\n-\t}\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Group group, List<Attribute> groupReqAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, groupReqAttributes, AttributesManager.NS_GROUP_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : groupReqAttributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource,group,  attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!workWithGroupAttributes) {\n-\t\t\treturn this.fillAttributes(sess, resource, group, attributes);\n-\t\t}\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, NS_GROUP_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else {\n-\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, ues, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, ues, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_FACILITY_ATTR);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) continue;\n-\t\t\tcheckAttributeValue(sess, facility, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() != null || isTrulyRequiredAttribute(sess, group, attribute)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tcheckAttributesValue(sess, resource, member, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tcheckAttributesValue(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n-\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(!workWithUserAttributes) checkAttributesValue(sess, member, attributes);\n-\t\telse {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException,WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tcheckAttributeValue(sess, resource, group, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!workWithGroupAttribute) {\n-\t\t\tthis.checkAttributesValue(sess, resource, group, attributes);\n-\t\t}\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\n-\tpublic void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,WrongAttributeAssignmentException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n-\t\t}\n-\t}\n-\tpublic void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,WrongAttributeAssignmentException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, key, attribute);\n-\t}\n-\n-\tpublic void forceCheckAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t}\n-\n-\tpublic void forceCheckAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t}\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, key, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, key, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, key);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.attributesManagerImpl.removeAllMemberResourceAttributes(sess, resource);\n-\t\tthis.getPerunBl().getAuditer().log(sess, \"All non-virtual member-resource attributes removed for all members and {}\", resource);\n-\t}\n-\n-\tpublic void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tList<Group> groups = this.getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tfor (Group group : groups) {\n-\t\t\tthis.getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, group);\n-\t\t}\n-\t\tthis.attributesManagerImpl.removeAllGroupResourceAttributes(sess, resource);\n-\t\tthis.getPerunBl().getAuditer().log(sess, \"All non-virtual group-resource attributes removed for all groups and {}\", resource);\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, key, attribute)) {\n-\t\t\tthis.checkAttributeValue(sess, key, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(key, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, facility, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, facility);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, facility, attribute)) {\n-\t\t\tthis.checkAttributeValue(sess, facility, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Member member, boolean workWithUserAttributes, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif(!workWithUserAttributes){\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthis.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n-\t\t\tthis.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n-\t\t}else{\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthis.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck), true);\n-\t\t\tthis.checkAttributesDependencies(sess, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributesDefinition, NS_FACILITY_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributesDefinition) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, facility, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, facility, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException{\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)){\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)){\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, facility, resource, user, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, facility);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, facility);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", facility);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, facility, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, facility, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tremoveAllAttributes(sess, resource, group);\n-\t\tif (workWithGroupAttributes) {\n-\t\t\tremoveAllAttributes(sess, group);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility, boolean removeAlsoUserFacilityAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tremoveAllAttributes(sess, facility);\n-\t\tif(removeAlsoUserFacilityAttributes) {\n-\t\t\tList<Attribute> userFacilityAttributes = getUserFacilityAttributesForAnyUser(sess, facility);\n-\t\t\tgetAttributesManagerImpl().removeAllUserFacilityAttributesForAnyUser(sess, facility);\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"All user-facility attributes removed for {} for any user.\", facility);\n-\n-\t\t\tfor(Attribute attribute : userFacilityAttributes) attribute.setValue(null);\n-\t\t\tList<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\tfor(User user: facilityUsers) {\n-\t\t\t\ttry {\n-\t\t\t\t\tcheckAttributesValue(sess, facility, user, userFacilityAttributes);\n-\t\t\t\t\tthis.checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\t\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t}\n-\t\t\t\tfor(Attribute attribute : userFacilityAttributes) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t\t\t//TODO better exception here\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t\t\t//TODO better exception here\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, host, attribute)) {\n-\t\t\tcheckAttributeValue(sess, host, new Attribute(attribute));\n-\t\t\ttry {\n-\t\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(host, null, new Attribute(attribute)));\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, host, attribute);\n-\t\tif (changed) {\n-\t\t\t//TODO HOOK FOR HOSTS!\n-\t\t\t/*try {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n-\t\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}*/\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, host);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Host host, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributesDefinition, AttributesManager.NS_HOST_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributesDefinition) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, host, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, host, attributesFromDefinitions(attributesToCheck));\n-\t\ttry {\n-\t\t\tthis.checkAttributesDependencies(sess, host, null, attributesFromDefinitions(attributesToCheck));\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException, WrongAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, host);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, host);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", host);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, host, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, host, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t} catch(WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t}\n-\n-\t\t//TODO HOOK FOR HOSTS\n-\t\t/*\n-\t\t\t for(Attribute attribute: attributes) {\n-\t\t\t try {\n-\t\t\t getAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n-\t\t\t } catch (WrongAttributeValueException ex) {\n-\t\t//TODO better exception here\n-\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t//TODO better exception here\n-\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\t}*/\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, vo, attribute)) {\n-\t\t\tcheckAttributeValue(sess, vo, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(vo, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, vo, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, vo);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Vo vo, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, vo, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, vo, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, vo, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, vo);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, vo);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", vo);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, vo, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, vo, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(group, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, group, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, group);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, group, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, group, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, group);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, group);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", group);\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, group, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, group, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tboolean changed = removeAttributeWithoutCheck(sess, resource, attribute);\n-\t\tif (changed) {\n-\t\t\tcheckAttributeValue(sess, resource, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, null, new Attribute(attribute)));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\n-\t\ttry {\n-\t\t\tif (this.isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, resource, attribute);\n-\t\t\t}\n-\t\t\tif (changed) getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n-\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif (changed) getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, resource);\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, resource);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, resource);\n-\n-\t\t//remove all virtual attributes\n-\t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n-\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n-\t\t\t}*/\n-\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", resource);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, member, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, member, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, resource, member, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, resource, member);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!(workWithUserAttributes)) {\n-\t\t\tremoveAttributes(sess, resource, member, attributes);\n-\t\t} else {\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = getAttributes(sess, resource, member);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, resource, member);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", resource, member);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, member, attributes);\n-\t\t\tcheckAttributesValue(sess, resource, member, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, group, new Attribute(attribute)));\n-\t\t}\n-\t}\n-// s workWithUserAttr.\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, member, group, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, member, group);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tremoveAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck));\n-\t\t\tthis.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck));\n-\t\t} else {\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, member, group);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, member, group);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", member, group);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, member, group, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, member, attribute);\n-\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tif (changed) getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, member);\n-\t\t}\n-\n-\t\treturn changed;\n-\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, member);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, member);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", member);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, member, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, member, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, user, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, user, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = false;\n-\n-\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, facility, user);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tif (getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, facility, user);\n-\t\t//remove all non-virtual attributes\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, facility, user);\n-\n-\t\t//remove all virtual attributes\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n-\t\tfor(Attribute attribute : virtualAttributes) {\n-\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n-\t\t}\n-\t\tattributes.addAll(virtualAttributes);\n-\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", facility, user);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, facility, user, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, facility, user, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\n-\t\tList<RichAttribute<User, Facility>> userFacilitiesAttributes = getAttributesManagerImpl().getAllUserFacilityRichAttributes(sess, user);\n-\n-\t\t//remove all non-virtual attributes\n-\t\tgetAttributesManagerImpl().removeAllUserFacilityAttributes(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All non-virtual user-facility attributes removed for all facilities and {}\", user);\n-\n-\t\tfor(RichAttribute<User, Facility> richAttribute : userFacilitiesAttributes) {\n-\t\t\ttry {\n-\t\t\t\tcheckAttributeValue(sess, richAttribute.getSecondaryHolder(), richAttribute.getPrimaryHolder(), new Attribute(richAttribute.getAttribute()));\n-\t\t\t\tthis.checkAttributeDependencies(sess, richAttribute);\n-\t\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t\tfor(RichAttribute<User, Facility> attribute: userFacilitiesAttributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, attribute.getSecondaryHolder(), attribute.getPrimaryHolder(),  new Attribute(attribute.getAttribute()));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, user, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(user, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, user, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, user);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, user, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, user, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, user);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", user);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, user, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, user, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, group, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tboolean changed = false;\n-\t\ttry {\n-\t\t\tif (this.isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, resource, group, attribute);\n-\t\t\t}\n-\n-\t\t\tif (changed) getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n-\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif (changed) getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, group, resource);\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t//getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) attributesToCheck.add(attribute);\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithGroupAttributes) {\n-\t\t\tremoveAttributes(sess, resource, group, attributes);\n-\t\t} else {\n-\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = getAttributes(sess, resource, group);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, resource, group);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", group, resource);\n-\n-\t\t//remove all virtual attributes\n-\t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n-\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n-\t\t\t}*/\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, group, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, ues, attribute)) {\n-\t\t\tcheckAttributeValue(sess, ues, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(ues, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, ues, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, ues);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, UserExtSource ues, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, ues, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, ues, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, ues, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, ues);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, ues);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", ues);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, ues, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, ues, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkActionTypeExists(sess, actionType);\n-\t}\n-\n-\tpublic void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkAttributeExists(sess, attribute);\n-\t}\n-\n-\tpublic void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkAttributesExists(sess, attributes);\n-\t}\n-\n-\tpublic boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isDefAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isOptAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isCoreAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isCoreManagedAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isVirtAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) {\n-\t\treturn getAttributesManagerImpl().isFromNamespace(sess, attribute, namespace);\n-\t}\n-\n-\tpublic void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, namespace);\n-\t}\n-\n-\tpublic void checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, namespace);\n-\t}\n-\n-\tpublic String getNamespaceFromAttributeName(String attributeName) {\n-\t\treturn attributeName.replaceFirst(\"(urn:perun:[^:]+:attribute-def:[^:]+):.*\", \"$1\");\n-\t}\n-\n-\tpublic String getFriendlyNameFromAttributeName(String attributeName) {\n-\t\treturn attributeName.replaceFirst(\"urn:perun:[^:]+:attribute-def:[^:]+:\", \"\");\n-\t}\n-\n-\tpublic List<Attribute> getLogins(PerunSession sess, User user) throws InternalErrorException {\n-\t\tList<Attribute> usersAttributes = this.getAttributes(sess, user);  //Get all non-empty user's attributes\n-\t\tIterator<Attribute> it = usersAttributes.iterator();\n-\t\twhile (it.hasNext()) {\n-\t\t\tif(!it.next().getFriendlyName().startsWith(\"login-namespace:\")) it.remove();\n-\t\t}\n-\t\treturn usersAttributes;\n-\t}\n-\n-\tpublic List<Object> getAllValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(isCoreAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition)) throw new WrongAttributeAssignmentException(attributeDefinition);\n-\n-\t\tif(isFromNamespace(sess, attributeDefinition, AttributesManager.NS_RESOURCE_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllResourceValues(sess, attributeDefinition);\n-\t\t} else if(isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllGroupResourceValues(sess, attributeDefinition);\n-\t\t} else if(isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllGroupValues(sess, attributeDefinition);\n-\t\t} else {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t\t}\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_FACILITY_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_VO_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByVo(sess, vo, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByGroup(sess, group, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_RESOURCE_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_ATTR);\n-\t\tList<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\tfor(Resource resource : allowedResources) {\n-\t\t\tif(getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_USER_ATTR);\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor(Member member : members) {\n-\t\t\tList<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\tfor(Resource resource : allowedResources) {\n-\t\t\t\tif(getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_USER_FACILITY_ATTR);\n-\t\tList<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tif(!allowedFacilities.contains(facility)) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\tif(!getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition)) return false;\n-\t\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\tresources.retainAll(getPerunBl().getUsersManagerBl().getAllowedResources(sess, user));\n-\t\t\tfor(Resource resource : resources) {\n-\t\t\t\tif(getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t}\n-\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_RESOURCE_ATTR);\n-\t\tList<Member> allowedMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\tif(!allowedMembers.contains(member)) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\treturn getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_GROUP_ATTR);\n-\t\tList<Resource> assignedResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tfor (Resource resource : assignedResources) {\n-\t\t\tif (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_GROUP_RESOURCE_ATTR);\n-\t\tList<Group> assignedGroups = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tif(!assignedGroups.contains(group)) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\treturn getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t\t}\n-\t}\n-\n-\tpublic Object stringToAttributeValue(String value, String type) throws InternalErrorException {\n-\t\tif (type.equals(ArrayList.class.getName()) || type.equals(LinkedHashMap.class.getName()) ||\n-\t\t\t\ttype.equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\tif (value != null && !value.isEmpty() && !value.endsWith(String.valueOf(AttributesManagerImpl.LIST_DELIMITER))) {\n-\t\t\t\tvalue = value.concat(String.valueOf(AttributesManagerImpl.LIST_DELIMITER));\n-\t\t\t}\n-\t\t}\n-\t\treturn BeansUtils.stringToAttributeValue(value, type);\n-\t}\n-\n-\tpublic static String escapeListAttributeValue(String value) {\n-\t\treturn AttributesManagerImpl.escapeListAttributeValue(value);\n-\t}\n-\n-\tpublic static String escapeMapAttributeValue(String value) {\n-\t\treturn AttributesManagerImpl.escapeMapAttributeValue(value);\n-\t}\n-\n-\tpublic void doTheMagic(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tdoTheMagic(sess, member, false);\n-\t}\n-\n-\tpublic void doTheMagic(PerunSession sess, Member member, boolean trueMagic) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\tfor(Resource resource : resources) {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tList<Attribute> requiredAttributes = getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n-\t\t\tboolean allOk = false;\n-\t\t\tAttributeDefinition lastWrongAttribute = null;\n-\t\t\tint safetyCounter = 0;\n-\t\t\tdo {\n-\t\t\t\ttry {\n-\t\t\t\t\tsetRequiredAttributes(sess, facility, resource, user, member, requiredAttributes);\n-\t\t\t\t\tallOk = true;\n-\t\t\t\t} catch(AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t} catch(WrongAttributeValueException ex) {\n-\t\t\t\t\tif(!trueMagic) throw ex;\n-\t\t\t\t\tAttributeDefinition wrongAttributeDefinition = ex.getAttribute();\n-\t\t\t\t\tif(wrongAttributeDefinition == null) throw new ConsistencyErrorException(\"WrongAttributeValueException doesn't have set the wrong attribute.\", ex);\n-\t\t\t\t\tif(wrongAttributeDefinition.equals(lastWrongAttribute)) throw new WrongAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n-\t\t\t\t\tlastWrongAttribute = wrongAttributeDefinition;\n-\t\t\t\t\tfindAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null);\n-\t\t\t\t} catch(WrongReferenceAttributeValueException ex) {\n-\t\t\t\t\tif(!trueMagic) throw ex;\n-\t\t\t\t\tAttributeDefinition wrongAttributeDefinition = ex.getReferenceAttribute();\n-\t\t\t\t\tif(wrongAttributeDefinition == null) throw new ConsistencyErrorException(\"WrongReferenceAttributeValueException doesn't have set reference attribute.\", ex);\n-\t\t\t\t\tif(wrongAttributeDefinition.equals(lastWrongAttribute)) throw new WrongReferenceAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n-\t\t\t\t\tlastWrongAttribute = wrongAttributeDefinition;\n-\t\t\t\t\tif(!findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null)) {\n-\t\t\t\t\t\t//this attribute can't be fixed here\n-\t\t\t\t\t\tthrow ex;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tsafetyCounter++;\n-\t\t\t\tif(safetyCounter == 50) throw new InternalErrorException(\"Method doTheMagic possibly stays in infinite loop.\");\n-\t\t\t} while(trueMagic && !allOk);\n-\t\t}\n-\t}\n-\n-\tpublic void mergeAttributesValues(PerunSession sess, User user, List<Attribute> attributes)  throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tfor (Attribute attribute: attributes) {\n-\t\t\tthis.mergeAttributeValue(sess, user, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void mergeAttributesValues(PerunSession sess, Member member, List<Attribute> attributes)  throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tfor (Attribute attribute: attributes) {\n-\t\t\tthis.mergeAttributeValue(sess, member, attribute);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Merges attribute value for supported attribute's namespaces if the attribute type is list or map. In other cases it only stores new value.\n-\t *\n-\t * If attribute has null value or it's value is same as value of attribute already stored in Perun, return stored attribute instead.\n-\t * If the type is list, new values are added to the current stored list.\n-\t * It the type is map, new values are added and existing are overwritten with new values, but only if there is any change.\n-\t *\n-\t * Supported namespaces\n-\t *  - user attributes\n-\t *  - member attributes\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute to merge it's value if possible\n-\t * @param primaryHolder holder defines object for which is attribute stored in Perun\n-\t *\n-\t * @return attribute after merging his value\n-\t *\n-\t * @throws InternalErrorException if one of mandatory objects is null or some internal problem has occured\n-\t * @throws WrongAttributeValueException attribute value of set attribute is not correct\n-\t * @throws WrongReferenceAttributeValueException any reference attribute value is not correct\n-\t * @throws WrongAttributeAssignmentException if attribute is not from the same namespace defined by primaryHolder\n-\t */\n-\tprivate Attribute mergeAttributeValue(PerunSession sess, Attribute attribute, PerunBean primaryHolder) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\t//If attribute is null, throw an exception\n-\t\tif(attribute == null) throw new InternalErrorException(\"Can't merge null attribute with anything!\");\n-\t\tif(primaryHolder == null) throw new InternalErrorException(\"Can't merge attribute value without notNull primaryHolder!\");\n-\n-\t\t//Get stored attribute in Perun\n-\t\tAttribute storedAttribute = null;\n-\t\ttry {\n-\t\t\tif(primaryHolder instanceof User) {\n-\t\t\t\tstoredAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (User) primaryHolder, attribute.getName());\n-\t\t\t} else if(primaryHolder instanceof Member) {\n-\t\t\t\tstoredAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (Member) primaryHolder, attribute.getName());\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t}\n-\n-\t\t//if attribute to merge has null value or it's value is same as stored attribute's value, return the stored attribute\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif(attribute.getValue() == null || Objects.equals(attribute.getValue(), storedAttribute.getValue())) return storedAttribute;\n-\n-\t\t// Check type ArrayList\n-\t\tif (attribute.getType().equals(ArrayList.class.getName()) || attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\tArrayList<String> updatedList = (ArrayList<String>) storedAttribute.getValue();\n-\t\t\t// If there were someting then find values which haven't been already stored\n-\t\t\tif (updatedList != null) {\n-\t\t\t\tfor (String value : ((ArrayList<String>) attribute.getValue())) {\n-\t\t\t\t\tif (!updatedList.contains(value)) {\n-\t\t\t\t\t\tupdatedList.add(value);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tattribute.setValue(updatedList);\n-\t\t\t}\n-\t\t// Check type LinkedHashMap\n-\t\t} else if (attribute.getType().equals(LinkedHashMap.class.getName())) {\n-\t\t\t//Find values which haven't been already stored\n-\t\t\tLinkedHashMap<String, String> updatedMap = (LinkedHashMap<String, String>) storedAttribute.getValue();\n-\t\t\tif (updatedMap != null) {\n-\t\t\t\tLinkedHashMap<String, String> receivedMap = (LinkedHashMap<String, String>) attribute.getValue();\n-\t\t\t\tupdatedMap.putAll(receivedMap);\n-\t\t\t\tattribute.setValue(updatedMap);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Other types as String, Integer, Boolean etc. will be replaced by new value (no way how to merge them properly)\n-\t\tif(primaryHolder instanceof User) {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, (User) primaryHolder, attribute);\n-\t\t} else if(primaryHolder instanceof Member) {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, (Member) primaryHolder, attribute);\n-\t\t}  else {\n-\t\t\tthrow new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n-\t\t}\n-\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\t\t WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn this.mergeAttributeValue(sess, attribute, user);\n-\t}\n-\n-\tpublic Attribute mergeAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn this.mergeAttributeValue(sess, attribute, member);\n-\t}\n-\n-\tpublic Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn mergeAttributeValue(sess, user, attribute);\n-\t}\n-\n-\tpublic Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn mergeAttributeValue(sess, member, attribute);\n-\t}\n-\n-\tprivate boolean findAndSetValueInList(List<Attribute> attributes, AttributeDefinition attributeDefinition, Object value) {\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getId() == attributeDefinition.getId()) {\n-\t\t\t\tattribute.setValue(value);\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(perunSession, \"{} updated.\", attributeDefinition);\n-\t\treturn getAttributesManagerImpl().updateAttributeDefinition(perunSession, attributeDefinition);\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithGroupAttributes) {\n-\t\t\tList<Attribute> groupAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> groupResourceAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\tgroupResourceAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_ATTR)) {\n-\t\t\t\t\tgroupAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, resource, group, groupResourceAttributes);\n-\t\t\tcheckAttributesDependencies(sess, group, null, groupAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, resource, group, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, member, null, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, User user, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attr: attributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\tuserAttributes.add(attr);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tmemberResourceAttributes.add(attr);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tuserFacilityAttributes.add(attr);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\tcheckAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\tcheckAttributesDependencies(sess, resource, member, memberResourceAttributes);\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tmemberResourceAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tuserFacilityAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t\tcheckAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\t\tcheckAttributesDependencies(sess, resource, member, memberResourceAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, resource, member, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberGroupAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tmemberGroupAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t\tcheckAttributesDependencies(sess, member, group, memberGroupAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, member, group, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Object primaryHolder, Object secondaryHolder, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(attributes != null && !attributes.isEmpty()) {\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tcheckAttributeDependencies(sess, new RichAttribute(primaryHolder, secondaryHolder, attr));\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeDependencies(PerunSession sess, RichAttribute richAttr) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(getAllDependencies() == null || getAllDependencies().isEmpty()) log.error(\"Map of all dependencies is empty. If this is not test, its an error probably.\");\n-\t\tif(richAttr == null || richAttr.getAttribute() == null) throw new InternalErrorException(\"RichAttribute or Attribute in it can't be null!\");\n-\t\telse {\n-\t\t\t//Get All attributeDef which are dependencies\n-\t\t\tSet<AttributeDefinition> dependencies = getAllDependencies().get(new AttributeDefinition(richAttr.getAttribute()));\n-\t\t\tif(dependencies != null && !dependencies.isEmpty() ) {\n-\t\t\t\tfor(AttributeDefinition dependency: dependencies) {\n-\t\t\t\t\tList<RichAttribute> richAttributesToCheck;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trichAttributesToCheck = getRichAttributesWithHoldersForAttributeDefinition(sess, dependency, richAttr);\n-\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t//TODO better exception here (need to implement to all setMethods)\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t} catch (VoNotExistsException ex) {\n-\t\t\t\t\t\t//TODO better exception here (need to implement to all setMethods)\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t}\n-\t\t\t\t\tfor(RichAttribute richAttribute: richAttributesToCheck) {\n-\t\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_VO_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Vo) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for VO Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Vo) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For VO Attribute there must be VO in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Group Attribute there must be Group in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member Attribute there must be Member in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for User Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For User Attribute there must be User in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Resource Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Resource Attribute there must be Resource in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_FACILITY_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Facility Attribute there must be Facility in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_ENTITYLESS_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof String) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Entityless Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (String) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Entityless Attribute there must be String in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_HOST_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Host) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Host Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Host) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Host Attribute there must be Host in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Group_Resource Attribute there must be Group or Resource in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Member) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member_Resource Attribute there must be Member or Resource in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member_Group Attribute there must be Member or Group in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), (User) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getSecondaryHolder(), (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Facility_User Attribute there must be Facility or User in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic List<RichAttribute> getRichAttributesWithHoldersForAttributeDefinition(PerunSession sess, AttributeDefinition attrDef, RichAttribute aidingAttr) throws InternalErrorException, AttributeNotExistsException, VoNotExistsException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t//Filling objects from aidingAttr\n-\t\tif(aidingAttr == null) throw new InternalErrorException(\"Aiding attribute cant be null.\");\n-\t\tif(attrDef == null) throw new InternalErrorException(\"attrDef cant be null.\");\n-\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<RichAttribute>();\n-\n-\t\t//All possible useful objects\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\t\tString key = null;\n-\t\tAttribute attribute = null;\n-\n-\t\t//Get object for primaryHolder of aidingAttr\n-\t\tif(aidingAttr.getPrimaryHolder() != null) {\n-\t\t\tif(aidingAttr.getPrimaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Facility) facility = (Facility) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Group) group = (Group) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Member) member = (Member) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof User) user = (User) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Host) host = (Host) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Resource) resource = (Resource) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof String) key = (String) aidingAttr.getPrimaryHolder();\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Aiding attribute must have primaryHolder which is not null.\");\n-\t\t}\n-\n-\t\t//Get object for secondaryHolder of aidingAttr\n-\t\tif(aidingAttr.getSecondaryHolder() != null) {\n-\t\t\tif(aidingAttr.getSecondaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Facility) facility = (Facility) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Group) group = (Group) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Member) member = (Member) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof User) user = (User) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Host) host = (Host) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Resource) resource = (Resource) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof String) key = (String) aidingAttr.getSecondaryHolder();\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in secondaryHolder of aidingAttr\");\n-\t\t\t}\n-\t\t} // If not, its ok, secondary holder can be null\n-\n-\t\t//First i choose what i am looking for by descriptionAttr\n-\t\t//IMPORTANT: If member is Invalid, all objects bind to him are not accept\n-\n-\t\t//!!! PROJIT VSECHNY DOTAZY A POUZIT JAKO KLICOVOU VRSTVU KDE TO JDE VRSTVU S MEMBERY PODLE VALIDITY !!!\n-\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_VO_ATTR)) {\n-\t\t\t//Second on the fact what i really have in aidingAttr i try to find what i am looking for\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Vo> vosFromUser = new ArrayList<Vo>();\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\tfor (Resource resourceElement : resourcesFromUser) {\n-\t\t\t\t\tvosFromUser.add(getPerunBl().getResourcesManagerBl().getVo(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tList<Vo> vosFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n-\t\t\t\tvosFromFacility.retainAll(vosFromUser);\n-\t\t\t\tvosFromFacility = new ArrayList<Vo>(new HashSet<Vo>(vosFromFacility));\n-\t\t\t\tfor (Vo voElement : vosFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(group != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tvo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Vo> vosFromMembers = new ArrayList<Vo>();\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tvosFromMembers.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tfor(Vo voElement: vosFromMembers){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n-\t\t\t\tfor(Vo voElement: vos){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n-\t\t\t\tfor(Vo voElement: vos){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(key != null){\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tfor(Vo voElement: vos){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tgroupsFromResource.retainAll(groupsFromMember);\n-\t\t\t\t\tgroupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n-\t\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(group, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tSet<Group> groupsFromMembers = new HashSet<Group>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tgroupsFromMembers.retainAll(getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility));\n-\t\t\t\tfor (Group groupElement : groupsFromMembers) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(group, null, attribute));\n-\t\t\t} else if(group != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(group, null, attribute));\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tfor(Group groupElement: groupsFromMember) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Group> groupsFromMembers = new ArrayList<Group>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tgroupsFromMembers = new ArrayList<Group>(new HashSet<Group>(groupsFromMembers));\n-\t\t\t\tfor(Group groupElement: groupsFromMembers) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor(Group groupElement: groupsFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor(Group groupElement: groupsFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Group> groups = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n-\t\t\t\tfor(Group groupElement: groups) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Group> groupsFromVos = new ArrayList<Group>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tgroupsFromVos.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tgroupsFromVos = new ArrayList<Group>(new HashSet<Group>(groupsFromVos));\n-\t\t\t\tfor(Group groupElement: groupsFromVos) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_FACILITY_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tif(facilitiesFromUser.contains(facility)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<>();\n-\t\t\t\tfor (Resource resourceElement : resources) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n-\t\t\t\tfor (Facility facilityElement : facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElemenet: resources) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n-\t\t\t\tfor(Facility facilityElement: facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tList<Resource> resourcesFromMember = new ArrayList<Resource>();\n-\t\t\t\t\tfor(Group groupElement: groupsForMember) {\n-\t\t\t\t\t\tresourcesFromMember.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement));\n-\t\t\t\t\t}\n-\t\t\t\t\tresourcesFromMember = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromMember));\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromMember) {\n-\t\t\t\t\t\tFacility facilityFromMember = getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement);\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityFromMember, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityFromMember, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElemenet: resources) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n-\t\t\t\tfor(Facility facilityElement: facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tmembersFromResource.retainAll(membersFromGroup);\n-\t\t\t\tmembersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n-\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tmembersFromUser.retainAll(membersFromFacility);\n-\t\t\t\tmembersFromUser = new ArrayList<Member>(new HashSet<Member>(membersFromUser));\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tfor(Member memberElement: membersFromGroup) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Member> membersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tfor(Member memberElement: membersFromHost) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tfor(Member memberElement: membersFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tfor(Member memberElement: membersFromVo) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Member> allMembers = new ArrayList<Member>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tallMembers.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tallMembers = new ArrayList<Member>(new HashSet<Member>(allMembers));\n-\t\t\t\tfor(Member memberElement: allMembers) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tresourcesFromUser.retainAll(resourcesFromFacility);\n-\t\t\t\tresourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup =\n-\t\t\t\t\t\tnew ArrayList<>(new HashSet<>(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group)));\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromMember) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tresourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Resource> allResources = new ArrayList<Resource>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tallResources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tallResources = new ArrayList<Resource>(new HashSet<Resource>(allResources));\n-\t\t\t\tfor(Resource resourceElement: allResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tmembers.retainAll(membersFromResource);\n-\t\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\tusersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n-\t\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tif(facilitiesFromUser.contains(user)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tusersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n-\t\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\t\t\tfor(User userElement: usersFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: usersFromHost) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: usersFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tList<User> usersFromVo = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tusersFromVo = new ArrayList<User>(new HashSet<User>(usersFromVo));\n-\t\t\t\tfor(User userElement: usersFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<User> allUsers = getPerunBl().getUsersManagerBl().getUsers(sess);\n-\t\t\t\tfor(User userElement: allUsers) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tList<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\t\tfor(Host hostElement: hostsFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tList<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\tfor(Host hostElement: hostsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tif(getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facility)) {\n-\t\t\t\t\tList<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\t\tfor(Host hostElement: hostsFromFacility) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<>();\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n-\t\t\t\tList<Host> hostsFromFacilities = new ArrayList<>();\n-\t\t\t\tfor (Facility facilityElement : facilitiesFromResources) {\n-\t\t\t\t\thostsFromFacilities.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\tfor (Host hostElement : hostsFromFacilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tList<Host> hostsFromGroup = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromGroup.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromGroup = new ArrayList<Host>(new HashSet<Host>(hostsFromGroup));\n-\t\t\t\tfor(Host hostElement: hostsFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t\t}\n-\t\t\t\t\tList<Host> hostsFromMembers = new ArrayList<Host>();\n-\t\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\t\thostsFromMembers.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t\t}\n-\t\t\t\t\thostsFromMembers = new ArrayList<Host>(new HashSet<Host>(hostsFromMembers));\n-\t\t\t\t\tfor(Host hostElement: hostsFromMembers) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tList<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\tfor(Host hostElement: hostsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tList<Host> hostsFromUser = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromUser.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromUser = new ArrayList<Host>(new HashSet<Host>(hostsFromUser));\n-\t\t\t\tfor(Host hostElement: hostsFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, host, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(host, null, attribute));\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\tfor(Host hostElement: hostsFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tList<Host> hostsFromVo = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n-\t\t\t\tfor(Host hostElement: hostsFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tList<Host> hostsFromVo = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n-\t\t\t\tfor(Host hostElement: hostsFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_ENTITYLESS_ATTR)) {\n-\t\t\tif(key != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, key, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(key, null, attribute));\n-\t\t\t} else {\n-\t\t\t\tList<String> keys = this.getEntitylessKeys(sess, attrDef);\n-\t\t\t\tfor(String keyElement: keys) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, keyElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(keyElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tgroupsFromResource.retainAll(groupsFromMember);\n-\t\t\t\t\tgroupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n-\t\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, group, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\t//Groups from User\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Group> groupsFromUser = new ArrayList<Group>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//Retain of Groups from facility\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tgroupsFromFacility.retainAll(groupsFromUser);\n-\t\t\t\t//Resources from user\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//Resource from facility\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\t//Retain of Resources\n-\t\t\t\tresourcesFromFacility.retainAll(resourcesFromUser);\n-\t\t\t\t//All possibilities\n-\t\t\t\tresourcesFromFacility = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromFacility));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromFacility) {\n-\t\t\t\t\tList<Group> groupsForResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tgroupsForResourceElement.retainAll(groupsFromFacility);\n-\t\t\t\t\tgroupsForResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsForResourceElement));\n-\t\t\t\t\tfor(Group groupElement: groupsForResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t// there is no need to get Resources from Member because Members are only in those groups\n-\t\t\t\t// from which we already took Resources\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tList<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromMember) {\n-\t\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\t\tgroupsFromResourceElement.retainAll(groupsFromMember);\n-\t\t\t\t\t\tgroupsFromResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsFromResourceElement));\n-\t\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Group> groupsFromUser = new ArrayList<Group>();\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tgroupsFromUser = new ArrayList<Group>(new HashSet<Group>(groupsFromUser));\n-\t\t\t\tfor(Group groupElement: groupsFromUser) {\n-\t\t\t\t\tList<Resource> resourcesFromGroupElement = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement);\n-\t\t\t\t\tresourcesFromGroupElement.retainAll(resourcesFromUser);\n-\t\t\t\t\tresourcesFromGroupElement = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromGroupElement));\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromGroupElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromHost) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromHost) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tresources.addAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\tresources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tList<Group> groupFromMembers = new ArrayList<>();\n-\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tgroupFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t}\n-\t\t\t\tList<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tgroupsFromResources.retainAll(groupFromMembers);\n-\t\t\t\tgroupsFromResources = new ArrayList<>(new HashSet<>(groupsFromResources));\n-\t\t\t\tfor (Group groupElement : groupsFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t// there is no need to get Members from Resource because needed Members are only from 'group' variable\n-\t\t\t\t// which we already have. Other Members (aquired from Resource) than from 'group' variable will be redundant because\n-\t\t\t\t// they will be not assigned to it.\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\t// get all groups from facility\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\t// get all groups from user\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tSet<Group> groupsFromMembers = new HashSet<>();\n-\t\t\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\t// retain of groups\n-\t\t\t\tgroupsFromMembers.retainAll(groupsFromFacility);\n-\t\t\t\tList<Group> retainedGroups = new ArrayList<>(groupsFromMembers);\n-\t\t\t\t// all possible groups\n-\t\t\t\tfor (Group groupElement : retainedGroups) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\t// all possibilities\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (group != null) {\n-\t\t\t\tList<Member> membersFromGroups = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\tfor (Member memberElement: membersFromGroups) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null) {\n-\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tfor(Group groupElement : groupsFromMembers) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tList<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tfor (Group groupElement : groupsFromResources) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (user != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tfor (Member memberElement: membersFromUser) {\n-\t\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\t// get all groups for 'memberElement' variable\n-\t\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement);\n-\t\t\t\t\t\tfor (Group groupElement : groupsFromMember) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor (Group groupElement : groupsFromFacility) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor (Group groupElement : groupsFromFacility) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n-\t\t\t\tfor (Group groupElement : groupsFromVo) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Group> groupsFromVo = new ArrayList<>();\n-\t\t\t\tfor(Vo voElement : vos) {\n-\t\t\t\t\tgroupsFromVo.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tgroupsFromVo = new ArrayList<>(new HashSet<>(groupsFromVo));\n-\t\t\t\tfor (Group groupElement : groupsFromVo) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, member, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tmembersFromGroup.retainAll(membersFromResource);\n-\t\t\t\tmembersFromGroup = new ArrayList<Member>(new HashSet<Member>(membersFromGroup));\n-\t\t\t\tfor(Member memberElement: membersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tmembersFromUser.retainAll(membersFromFacility);\n-\t\t\t\tresourcesFromUser.retainAll(resourcesFromFacility);\n-\t\t\t\tresourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromUser) {\n-\t\t\t\t\tList<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tmembersForResourceElement.retainAll(membersFromUser);\n-\t\t\t\t\tmembersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n-\t\t\t\t\tfor(Member memberElement: membersForResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t// there is no need to get Resources from Member because Members are only in those groups\n-\t\t\t\t// from which we already took Resources\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tmembersForResourceElement.retainAll(members);\n-\t\t\t\t\tmembersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n-\t\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement);\n-\t\t\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\t\tmembersFromResource.retainAll(membersFromVo);\n-\t\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\t\tList<Member> membersFromVo = new ArrayList<Member>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n-\t\t\t\t\tmembersFromVo.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tresources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tmembersFromResource.retainAll(membersFromVo);\n-\t\t\t\t\tmembersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n-\t\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t//get Users from Group\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//get users from resource\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tList<User> usersFromResource = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromResource.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tusersFromGroup.retainAll(usersFromResource);\n-\t\t\t\tusersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n-\t\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\t\tif(getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement).contains(facility)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<>();\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n-\t\t\t\tUser userFromMember = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tfor (Facility facilityElement : facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userFromMember, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userFromMember, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<User> users = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusers.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tusers = new ArrayList<User>(new HashSet<User>(users));\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n-\t\t\t\t\tfacilities.retainAll(facilitiesFromUser);\n-\t\t\t\t\tfacilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n-\t\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tList<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\t\tfor(Resource resourceElement: memberResources) {\n-\t\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t\t}\n-\t\t\t\t\tfacilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n-\t\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\t\tif(getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facilityElement)) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\t\t\tfor(User userElement: usersFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tList<User> users = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusers.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tList<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Facility> facilitiesFromVo = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resourcesFromVo) {\n-\t\t\t\t\tfacilitiesFromVo.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tusers = new ArrayList<User>(new HashSet<User>(users));\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tList<Facility> facilitiesFromUserElement = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n-\t\t\t\t\tfacilitiesFromUserElement.retainAll(facilitiesFromVo);\n-\t\t\t\t\tfacilitiesFromUserElement = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromUserElement));\n-\t\t\t\t\tfor(Facility facilityElement: facilitiesFromUserElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facilityElement);\n-\t\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"There is unrecognized namespace in attribute \" + attrDef);\n-\t\t}\n-\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Checks if the attributes represent empty values. If so, converts them into null.\n-\t *\n-\t * @param attributes attributes to be checked if are null\n-\t */\n-\tpublic void convertEmptyAttrValueToNull(List<Attribute> attributes) throws ConsistencyErrorException {\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Checks if the attribute represents empty value. If so, converts it into null.\n-\t *\n-\t * @param attribute attribute to be checked if is null\n-\t */\n-\tpublic void convertEmptyAttrValueToNull(Attribute attribute) throws ConsistencyErrorException {\n-\t\tif(attribute.getValue() == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (attribute.getValue() instanceof Integer) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (attribute.getValue() instanceof String) {\n-\t\t\tif(((String)attribute.getValue()).matches(\"\\\\s*\")) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof Boolean) {\n-\t\t\tif(attribute.getValue().equals(Boolean.FALSE)) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof ArrayList) {\n-\t\t\tif(((ArrayList)attribute.getValue()).isEmpty()) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof LinkedHashMap) {\n-\t\t\tif(((LinkedHashMap)attribute.getValue()).isEmpty()) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new ConsistencyErrorException(\"Invalid attribute value type: \" + attribute.getType() +\n-\t\t\t                                    \" class: \" + attribute.getValue().getClass().getName());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Gets the getAttributesManagerImpl().\n-\t *\n-\t * @return The getAttributesManagerImpl().\n-\t */\n-\tpublic AttributesManagerImplApi getAttributesManagerImpl() {\n-\t\treturn this.attributesManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\tprivate List<Attribute> attributesFromDefinitions(List<? extends AttributeDefinition> attributesDefinition) {\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>(attributesDefinition.size());\n-\t\tfor(AttributeDefinition attributeDefinition : attributesDefinition) {\n-\t\t\tattributes.add(new Attribute(attributeDefinition));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tprotected void initialize() throws InternalErrorException {\n-\t\tlog.debug(\"AttributesManagerBlImpl initialize started.\");\n-\n-\t\t//Get PerunSession\n-\t\tString attributesManagerInitializator = \"attributesManagerBlImplInitializator\";\n-\t\tPerunPrincipal pp = new PerunPrincipal(attributesManagerInitializator, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL);\n-\t\tPerunSession sess = perunBl.getPerunSession(pp, new PerunClient());\n-\n-\t\t//Prepare all attribute definition from system perun\n-\t\tSet<AttributeDefinition> allAttributesDef = new HashSet<AttributeDefinition>();\n-\t\tallAttributesDef.addAll(this.getAttributesDefinition(sess));\n-\n-\t\t//Basic state of all maps (record for every existing attributeDefinitions)\n-\t\tfor(AttributeDefinition ad: allAttributesDef) {\n-\t\t\tdependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tstrongDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tinverseDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tinverseStrongDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tallDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t}\n-\n-\t\tlog.debug(\"Dependencies and StrongDependencies filling started.\");\n-\n-\t\t//Fill dep and strongDep maps\n-\t\tfor(AttributeDefinition ad: allAttributesDef) {\n-\t\t\tAttributesModuleImplApi module = null;\n-\t\t\tList<String> depList = new ArrayList<String>();\n-\t\t\tList<String> strongDepList = new ArrayList<String>();\n-\t\t\tSet<AttributeDefinition> depSet = new HashSet<AttributeDefinition>();\n-\t\t\tSet<AttributeDefinition> strongDepSet = new HashSet<AttributeDefinition>();\n-\n-\t\t\t//Return null to object if module not exist\n-\t\t\tObject attributeModule = getAttributesManagerImpl().getAttributesModule(sess, ad);\n-\n-\t\t\t//If there is any existing module\n-\t\t\tif(attributeModule != null) {\n-\t\t\t\tmodule = (AttributesModuleImplApi) attributeModule;\n-\t\t\t\tdepList = module.getDependencies();\n-\t\t\t\tstrongDepList = module.getStrongDependencies();\n-\t\t\t\t//Fill Set of dependencies\n-\t\t\t\tfor(String s: depList) {\n-\t\t\t\t\tif(!s.endsWith(\"*\")) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, s);\n-\t\t\t\t\t\t\tdepSet.add(attrDef);\n-\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\tlog.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t//If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tList<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length()-2));\n-\t\t\t\t\t\tfor(String variant: allVariantOfDependence) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n-\t\t\t\t\t\t\t\tdepSet.add(attrDef);\n-\t\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\t\tlog.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//Fil Set of strongDependencies\n-\t\t\t\tfor(String s: strongDepList) {\n-\t\t\t\t\tif(!s.endsWith(\"*\")) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, s);\n-\t\t\t\t\t\t\tstrongDepSet.add(attrDef);\n-\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\tlog.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t//If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tList<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length()-2));\n-\t\t\t\t\t\tfor(String variant: allVariantOfDependence) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n-\t\t\t\t\t\t\t\tstrongDepSet.add(attrDef);\n-\t\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\t\tlog.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tdependencies.put(ad, depSet);\n-\t\t\tstrongDependencies.put(ad, strongDepSet);\n-\t\t}\n-\n-\t\tlog.debug(\"Dependencies and StrongDependencies was filled successfully.\");\n-\n-\t\tlog.debug(\"InverseDependencies and InverseStrongDependencies filling started.\");\n-\n-\t\t//First create inversion map for simple dependencies\n-\t\tSet<AttributeDefinition> depSet = dependencies.keySet();\n-\t\tfor(AttributeDefinition key: depSet) {\n-\t\t\tSet<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n-\t\t\tkeySet = dependencies.get(key);\n-\t\t\tfor(AttributeDefinition keySetItem: keySet) {\n-\t\t\t\tSet<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n-\t\t\t\tchangeSet = inverseDependencies.get(keySetItem);\n-\t\t\t\tchangeSet.add(key);\n-\t\t\t\t//inverseDependencies.put(keySetItem, changeSet);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Second create inversion map for strong dependencies\n-\t\tdepSet = strongDependencies.keySet();\n-\t\tfor(AttributeDefinition key: depSet) {\n-\t\t\tSet<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n-\t\t\tkeySet = strongDependencies.get(key);\n-\t\t\tfor(AttributeDefinition keySetItem: keySet) {\n-\t\t\t\tSet<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n-\t\t\t\tchangeSet = inverseStrongDependencies.get(keySetItem);\n-\t\t\t\tchangeSet.add(key);\n-\t\t\t\t//inverseDependencies.put(keySetItem, changeSet);\n-\t\t\t}\n-\t\t}\n-\n-\t\tlog.debug(\"InverseDependencies and InverseStrongDependencies was filled successfully.\");\n-\n-\t\tlog.debug(\"Cycle test of InverseStrongDependencies started.\");\n-\t\t//Test StrDepInveMap on cycles\n-\n-\t\tif(isMapOfAttributesDefCyclic(inverseStrongDependencies)) {\n-\t\t\tlog.error(\"There is cycle in inverseStrongDependencies so map of All attribute will be not created!\");\n-\t\t} else {\n-\t\t\tlog.debug(\"Cycle test of InverseStrongDependencies was successfull.\");\n-\t\t\tlog.debug(\"Filling map of allDependencies started.\");\n-\n-\t\t\tfor(AttributeDefinition key: allDependencies.keySet()) {\n-\t\t\t\tList<AttributeDefinition> stackingAttributes = new ArrayList<AttributeDefinition>();\n-\t\t\t\tSet<AttributeDefinition> dependenciesOfAttribute = new HashSet<AttributeDefinition>();\n-\t\t\t\tdependenciesOfAttribute.addAll(inverseStrongDependencies.get(key));\n-\t\t\t\tdependenciesOfAttribute.addAll(inverseDependencies.get(key));\n-\t\t\t\tstackingAttributes.addAll(inverseStrongDependencies.get(key));\n-\t\t\t\twhile(!stackingAttributes.isEmpty()) {\n-\t\t\t\t\tAttributeDefinition firstAttr = stackingAttributes.get(0);\n-\t\t\t\t\tstackingAttributes.remove(firstAttr);\n-\t\t\t\t\tdependenciesOfAttribute.addAll(inverseStrongDependencies.get(firstAttr));\n-\t\t\t\t\tdependenciesOfAttribute.addAll(inverseDependencies.get(firstAttr));\n-\t\t\t\t\tstackingAttributes.addAll(inverseStrongDependencies.get(firstAttr));\n-\t\t\t\t}\n-\t\t\t\tallDependencies.put(key, dependenciesOfAttribute);\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Map of allDependencies was filled successfully.\");\n-\t\t}\n-\n-\t\t//DEBUG creating file with all dependencies of all attributes (180+- on devel)\n-\t\t/*String pathToFile = \"./AllDependencies.log\";\n-\t\t\tFile f = new File(pathToFile);\n-\t\t\ttry {\n-\t\t\tf.createNewFile();\n-\t\t\tPrintWriter writer;\n-\t\t\twriter = new PrintWriter(new FileWriter(f, true));\n-\t\t\tint i=1;\n-\t\t\tfor(AttributeDefinition ad: allDependencies.keySet()) {\n-\t\t\twriter.println(i + \") \" + ad.toString());\n-\t\t\tfor(AttributeDefinition a: allDependencies.get(ad)) {\n-\t\t\twriter.println(\" ---> \" + a);\n-\t\t\t}\n-\t\t\ti++;\n+\t\t\ti++;\n \t\t\t}\n \t\t\twriter.close();\n \t\t\t} catch (IOException ex) {\n \t\t\tlog.error(\"Error at saving AllDependencies file.\");\n \t\t\t}*/\n-\t\t//DEBUG end\n-\n-\t\tlog.debug(\"AttributesManagerBlImpl initialize ended.\");\n-\t}\n-\n-\t/**\n-\t * This method try to find cycle between strongDependencies of Attributes modules.\n-\t * If exist at least 1 cycle, return true.\n-\t * If there is no cycle, return false.\n-\t *\n-\t * @param map\n-\t * @return true if cycle exist, false if cycle not exist\n-\t */\n-\tprivate static boolean isMapOfAttributesDefCyclic(Map<AttributeDefinition, Set<AttributeDefinition>> map) {\n-\t\tSet<AttributeDefinition> processed = new HashSet<AttributeDefinition>();\n-\t\tSet<AttributeDefinition> unprocessed = new HashSet<AttributeDefinition>();\n-\t\tList<AttributeDefinition> stack = new ArrayList<AttributeDefinition>();\n-\n-\t\tfor(AttributeDefinition attributeDef: map.keySet()) {\n-\t\t\tstack.add(attributeDef);\n-\t\t\twhile(!stack.isEmpty()) {\n-\t\t\t\tAttributeDefinition firstInStack = stack.get(0);\n-\t\t\t\tif(map.get(firstInStack).contains(attributeDef)) {\n-\t\t\t\t\tlog.error(\"Cycle exist for \" + attributeDef);\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t\tprocessed.add(firstInStack);\n-\t\t\t\tunprocessed.addAll(map.get(firstInStack));\n-\t\t\t\tunprocessed.removeAll(processed);\n-\t\t\t\tstack.remove(firstInStack);\n-\t\t\t\tfor(AttributeDefinition unprocessedAttr: unprocessed) {\n-\t\t\t\t\tif(!stack.contains(unprocessedAttr)) stack.add(unprocessedAttr);\n-\t\t\t\t}\n-\t\t\t\tunprocessed.clear();\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic List<Attribute> setWritableTrue(PerunSession sess, List<Attribute> attributes) throws InternalErrorException {\n-\t\tList<Attribute> emptyList = new ArrayList<Attribute>();\n-\t\tif(attributes == null) return emptyList;\n-\n-\t\tfor(Attribute a: attributes) {\n-\t\t\tif(a != null) a.setWritable(true);\n-\t\t}\n-\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException {\n-\t\tList<AttributeRights> listOfAr = getAttributesManagerImpl().getAttributeRights(sess, attributeId);\n-\n-\t\t//Do not return VoObsever rights by this method\n-\t\tif(listOfAr != null) {\n-\t\t\tIterator<AttributeRights> iterator = listOfAr.iterator();\n-\t\t\twhile(iterator.hasNext()) {\n-\t\t\t\tAttributeRights ar = iterator.next();\n-\t\t\t\tif(ar.getRole().equals(Role.VOOBSERVER)) iterator.remove();\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn listOfAr;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributeRights(PerunSession sess, List<AttributeRights> rights) throws InternalErrorException {\n-\t\tfor (AttributeRights right : rights) {\n-\t\t\tgetAttributesManagerImpl().setAttributeRight(sess, right);\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n-\n-\t\t\t//If these rights are for VoAdmin, do the same for VoObserver but only for READ privilegies\n-\t\t\tif(right.getRole().equals(Role.VOADMIN)) {\n-\t\t\t\tList<ActionType> onlyReadActionType = new ArrayList<ActionType>();\n-\t\t\t\tif(right.getRights().contains(ActionType.READ)) onlyReadActionType.add(ActionType.READ);\n-\t\t\t\tright.setRights(onlyReadActionType);\n-\t\t\t\tright.setRole(Role.VOOBSERVER);\n-\t\t\t\t//Rights are now set for VoObserver with read privilegies on the same attribute like VoAdmin\n-\t\t\t\tgetAttributesManagerImpl().setAttributeRight(sess, right);\n-\t\t\t\tgetPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getUserVirtualAttributeModule(sess, attribute);\n-\t}\n-\n-\t/**\n-\t * Check if member is assigned on resource. If not, throw WrongAttributeAssignment Exception\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param resource\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tprivate void checkMemberIsFromTheSameVoLikeResource(PerunSession sess, Member member, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n-\t\tUtils.notNull(sess, \"sess\");\n-\t\tUtils.notNull(member, \"member\");\n-\t\tUtils.notNull(resource, \"resource\");\n-\n-\t\tif(member.getVoId() != resource.getVoId()) throw new WrongAttributeAssignmentException(\"Member is not from the same vo like Resource: \" + member + \" \" + resource);\n-\t}\n-\n-\t/**\n-\t * Check if group is assigned on resource. If not, throw WrongAttributeAssignment Exception\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tprivate void checkGroupIsFromTheSameVoLikeResource(PerunSession sess, Group group, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n-\t\tUtils.notNull(sess, \"sess\");\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(resource, \"resource\");\n-\n-\t\tif(group.getVoId() != resource.getVoId()) throw new WrongAttributeAssignmentException(\"Group is not from the same vo like Resource: \" + group + \" \" + resource);\n-\t}\n-\n-\tpublic Map<AttributeDefinition, Set<AttributeDefinition>> getAllDependencies() {\n-\t\treturn allDependencies;\n-\t}\n-\n-\t/**\n-\t * Get Map of members with list of member-resource attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, service, resource, List members)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n-\t *\n-\t * Example: if there are 25000 records in list of members, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param service service to get required attributes for\n-\t * @param resource resource to get required attributes for\n-\t * @param members members to get required attributes for\n-\t * @return map of members in keys with list of their member-resource attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n-\t\tif(members.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members);\n-\n-\t\tHashMap<Member, List<Attribute>> memberResourceAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tmemberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (members.size()>to);\n-\t\tmemberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, members.size())));\n-\n-\t\treturn memberResourceAttrs;\n-\t}\n-\n-\t/**\n-\t * Get Map of members with list of member attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, resource, service, List members)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n-\t *\n-\t * Example: if there are 25000 records in list of members, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param resource resource to get required attributes for\n-\t * @param service service to get required attributes for\n-\t * @param members members to get required attributes for\n-\t * @return map of members in keys with list of their member attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n-\t\tif(members.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members);\n-\n-\t\tHashMap<Member, List<Attribute>> memberAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tmemberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (members.size()>to);\n-\t\tmemberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, members.size())));\n-\n-\t\treturn memberAttrs;\n-\t}\n-\n-\t/**\n-\t * Get Map of users with list of user-facility attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, service, facility, List users)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n-\t *\n-\t * Example: if there are 25000 records in list of users, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param service service to get required attributes for\n-\t * @param facility facility to get required attributes for\n-\t * @param users users to get required attributes for\n-\t * @return map of users in keys with list of their user-facility attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n-\t\tif(users.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users);\n-\n-\t\tHashMap<User, List<Attribute>> userFacAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tuserFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (users.size()>to);\n-\t\tuserFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, users.size())));\n-\n-\t\treturn userFacAttrs;\n-\t}\n-\n-\t/**\n-\t * Get Map of users with list of user attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, service, List users)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n-\t *\n-\t * Example: if there are 25000 records in list of users, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param service service to get required attributes for\n-\t * @param users users to get required attributes for\n-\t * @return map of users in keys with list of their user attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n-\t\tif(users.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, service, users);\n-\n-\t\tHashMap<User, List<Attribute>> userAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tuserAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (users.size()>to);\n-\t\tuserAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, users.size())));\n-\n-\t\treturn userAttrs;\n-\t}\n+        //DEBUG end\n+\n+        log.debug(\"AttributesManagerBlImpl initialize ended.\");\n+    }\n+\n+    /**\n+     * This method try to find cycle between strongDependencies of Attributes modules.\n+     * If exist at least 1 cycle, return true.\n+     * If there is no cycle, return false.\n+     *\n+     * @param map\n+     * @return true if cycle exist, false if cycle not exist\n+     */\n+    private static boolean isMapOfAttributesDefCyclic(Map<AttributeDefinition, Set<AttributeDefinition>> map) {\n+        Set<AttributeDefinition> processed = new HashSet<AttributeDefinition>();\n+        Set<AttributeDefinition> unprocessed = new HashSet<AttributeDefinition>();\n+        List<AttributeDefinition> stack = new ArrayList<AttributeDefinition>();\n+\n+        for (AttributeDefinition attributeDef : map.keySet()) {\n+            stack.add(attributeDef);\n+            while (!stack.isEmpty()) {\n+                AttributeDefinition firstInStack = stack.get(0);\n+                if (map.get(firstInStack).contains(attributeDef)) {\n+                    log.error(\"Cycle exist for \" + attributeDef);\n+                    return true;\n+                }\n+                processed.add(firstInStack);\n+                unprocessed.addAll(map.get(firstInStack));\n+                unprocessed.removeAll(processed);\n+                stack.remove(firstInStack);\n+                for (AttributeDefinition unprocessedAttr : unprocessed) {\n+                    if (!stack.contains(unprocessedAttr)) {\n+                        stack.add(unprocessedAttr);\n+                    }\n+                }\n+                unprocessed.clear();\n+            }\n+        }\n+        return false;\n+    }\n+\n+    public List<Attribute> setWritableTrue(PerunSession sess, List<Attribute> attributes) throws InternalErrorException {\n+        List<Attribute> emptyList = new ArrayList<Attribute>();\n+        if (attributes == null) {\n+            return emptyList;\n+        }\n+\n+        for (Attribute a : attributes) {\n+            if (a != null) {\n+                a.setWritable(true);\n+            }\n+        }\n+\n+        return attributes;\n+    }\n+\n+    @Override\n+    public List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException {\n+        List<AttributeRights> listOfAr = getAttributesManagerImpl().getAttributeRights(sess, attributeId);\n+\n+        //Do not return VoObsever rights by this method\n+        if (listOfAr != null) {\n+            Iterator<AttributeRights> iterator = listOfAr.iterator();\n+            while (iterator.hasNext()) {\n+                AttributeRights ar = iterator.next();\n+                if (ar.getRole().equals(Role.VOOBSERVER)) {\n+                    iterator.remove();\n+                }\n+            }\n+        }\n+\n+        return listOfAr;\n+    }\n+\n+    @Override\n+    public void setAttributeRights(PerunSession sess, List<AttributeRights> rights) throws InternalErrorException {\n+        for (AttributeRights right : rights) {\n+            getAttributesManagerImpl().setAttributeRight(sess, right);\n+            getPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n+\n+            //If these rights are for VoAdmin, do the same for VoObserver but only for READ privilegies\n+            if (right.getRole().equals(Role.VOADMIN)) {\n+                List<ActionType> onlyReadActionType = new ArrayList<ActionType>();\n+                if (right.getRights().contains(ActionType.READ)) {\n+                    onlyReadActionType.add(ActionType.READ);\n+                }\n+                right.setRights(onlyReadActionType);\n+                right.setRole(Role.VOOBSERVER);\n+                //Rights are now set for VoObserver with read privilegies on the same attribute like VoAdmin\n+                getAttributesManagerImpl().setAttributeRight(sess, right);\n+                getPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n+            }\n+        }\n+    }\n+\n+    public UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException {\n+        return getAttributesManagerImpl().getUserVirtualAttributeModule(sess, attribute);\n+    }\n+\n+    /**\n+     * Check if member is assigned on resource. If not, throw WrongAttributeAssignment Exception\n+     *\n+     * @param sess\n+     * @param member\n+     * @param resource\n+     * @throws WrongAttributeAssignmentException\n+     * @throws InternalErrorException\n+     * @throws MemberNotExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    private void checkMemberIsFromTheSameVoLikeResource(PerunSession sess, Member member, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n+        Utils.notNull(sess, \"sess\");\n+        Utils.notNull(member, \"member\");\n+        Utils.notNull(resource, \"resource\");\n+\n+        if (member.getVoId() != resource.getVoId()) {\n+            throw new WrongAttributeAssignmentException(\"Member is not from the same vo like Resource: \" + member + \" \" + resource);\n+        }\n+    }\n+\n+    /**\n+     * Check if group is assigned on resource. If not, throw WrongAttributeAssignment Exception\n+     *\n+     * @param sess\n+     * @param group\n+     * @param resource\n+     * @throws WrongAttributeAssignmentException\n+     * @throws InternalErrorException\n+     * @throws GroupNotExistsException\n+     * @throws ResourceNotExistsException\n+     */\n+    private void checkGroupIsFromTheSameVoLikeResource(PerunSession sess, Group group, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n+        Utils.notNull(sess, \"sess\");\n+        Utils.notNull(group, \"group\");\n+        Utils.notNull(resource, \"resource\");\n+\n+        if (group.getVoId() != resource.getVoId()) {\n+            throw new WrongAttributeAssignmentException(\"Group is not from the same vo like Resource: \" + group + \" \" + resource);\n+        }\n+    }\n+\n+    public Map<AttributeDefinition, Set<AttributeDefinition>> getAllDependencies() {\n+        return allDependencies;\n+    }\n+\n+    /**\n+     * Get Map of members with list of member-resource attributes in values.\n+     * <p>\n+     * This method calls 'getRequiredAttributes(session, service, resource, List members)' for\n+     * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n+     * <p>\n+     * Example: if there are 25000 records in list of members, this method call it by 3 separate\n+     * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n+     * calls getRequiredAttributes just once without any changes\n+     * <p>\n+     * Reason: SQL error in Oracle for too much records in one SQL query\n+     *\n+     * @param sess     perunSession\n+     * @param service  service to get required attributes for\n+     * @param resource resource to get required attributes for\n+     * @param members  members to get required attributes for\n+     * @return map of members in keys with list of their member-resource attributes in value\n+     * @throws InternalErrorException\n+     */\n+    private HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n+        if (members.size() <= MAX_SIZE_OF_BULK_IN_SQL) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members);\n+        }\n+\n+        HashMap<Member, List<Attribute>> memberResourceAttrs = new HashMap<>();\n+\n+        int from = 0;\n+        int to = MAX_SIZE_OF_BULK_IN_SQL;\n+        do {\n+            memberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, to)));\n+            from += MAX_SIZE_OF_BULK_IN_SQL;\n+            to += MAX_SIZE_OF_BULK_IN_SQL;\n+        } while (members.size() > to);\n+        memberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, members.size())));\n+\n+        return memberResourceAttrs;\n+    }\n+\n+    /**\n+     * Get Map of members with list of member attributes in values.\n+     * <p>\n+     * This method calls 'getRequiredAttributes(session, resource, service, List members)' for\n+     * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n+     * <p>\n+     * Example: if there are 25000 records in list of members, this method call it by 3 separate\n+     * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n+     * calls getRequiredAttributes just once without any changes\n+     * <p>\n+     * Reason: SQL error in Oracle for too much records in one SQL query\n+     *\n+     * @param sess     perunSession\n+     * @param resource resource to get required attributes for\n+     * @param service  service to get required attributes for\n+     * @param members  members to get required attributes for\n+     * @return map of members in keys with list of their member attributes in value\n+     * @throws InternalErrorException\n+     */\n+    private HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n+        if (members.size() <= MAX_SIZE_OF_BULK_IN_SQL) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members);\n+        }\n+\n+        HashMap<Member, List<Attribute>> memberAttrs = new HashMap<>();\n+\n+        int from = 0;\n+        int to = MAX_SIZE_OF_BULK_IN_SQL;\n+        do {\n+            memberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, to)));\n+            from += MAX_SIZE_OF_BULK_IN_SQL;\n+            to += MAX_SIZE_OF_BULK_IN_SQL;\n+        } while (members.size() > to);\n+        memberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, members.size())));\n+\n+        return memberAttrs;\n+    }\n+\n+    /**\n+     * Get Map of users with list of user-facility attributes in values.\n+     * <p>\n+     * This method calls 'getRequiredAttributes(session, service, facility, List users)' for\n+     * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n+     * <p>\n+     * Example: if there are 25000 records in list of users, this method call it by 3 separate\n+     * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n+     * calls getRequiredAttributes just once without any changes\n+     * <p>\n+     * Reason: SQL error in Oracle for too much records in one SQL query\n+     *\n+     * @param sess     perunSession\n+     * @param service  service to get required attributes for\n+     * @param facility facility to get required attributes for\n+     * @param users    users to get required attributes for\n+     * @return map of users in keys with list of their user-facility attributes in value\n+     * @throws InternalErrorException\n+     */\n+    private HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n+        if (users.size() <= MAX_SIZE_OF_BULK_IN_SQL) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users);\n+        }\n+\n+        HashMap<User, List<Attribute>> userFacAttrs = new HashMap<>();\n+\n+        int from = 0;\n+        int to = MAX_SIZE_OF_BULK_IN_SQL;\n+        do {\n+            userFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, to)));\n+            from += MAX_SIZE_OF_BULK_IN_SQL;\n+            to += MAX_SIZE_OF_BULK_IN_SQL;\n+        } while (users.size() > to);\n+        userFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, users.size())));\n+\n+        return userFacAttrs;\n+    }\n+\n+    /**\n+     * Get Map of users with list of user attributes in values.\n+     * <p>\n+     * This method calls 'getRequiredAttributes(session, service, List users)' for\n+     * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n+     * <p>\n+     * Example: if there are 25000 records in list of users, this method call it by 3 separate\n+     * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n+     * calls getRequiredAttributes just once without any changes\n+     * <p>\n+     * Reason: SQL error in Oracle for too much records in one SQL query\n+     *\n+     * @param sess    perunSession\n+     * @param service service to get required attributes for\n+     * @param users   users to get required attributes for\n+     * @return map of users in keys with list of their user attributes in value\n+     * @throws InternalErrorException\n+     */\n+    private HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n+        if (users.size() <= MAX_SIZE_OF_BULK_IN_SQL) {\n+            return getAttributesManagerImpl().getRequiredAttributes(sess, service, users);\n+        }\n+\n+        HashMap<User, List<Attribute>> userAttrs = new HashMap<>();\n+\n+        int from = 0;\n+        int to = MAX_SIZE_OF_BULK_IN_SQL;\n+        do {\n+            userAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, to)));\n+            from += MAX_SIZE_OF_BULK_IN_SQL;\n+            to += MAX_SIZE_OF_BULK_IN_SQL;\n+        } while (users.size() > to);\n+        userAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, users.size())));\n+\n+        return userAttrs;\n+    }\n }\n",
            "diff_size": 11829
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/406/AttributesManagerBlImpl.java\nindex 75877d21e81..70967a6e451 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/406/AttributesManagerBlImpl.java\n@@ -2,16 +2,24 @@ package cz.metacentrum.perun.core.blImpl;\n \n import cz.metacentrum.perun.core.api.ActionType;\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_FACILITY_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_GROUP_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_GROUP_RESOURCE_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_MEMBER_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_MEMBER_GROUP_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_MEMBER_RESOURCE_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_RESOURCE_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_USER_ATTR;\n+\n import static cz.metacentrum.perun.core.api.AttributesManager.NS_USER_FACILITY_ATTR;\n-import static cz.metacentrum.perun.core.api.AttributesManager.NS_VO_ATTR;\n \n+import static cz.metacentrum.perun.core.api.AttributesManager.NS_VO_ATTR;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n@@ -24,11 +32,9 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.Objects;\n-\n import cz.metacentrum.perun.core.api.PerunClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import cz.metacentrum.perun.core.api.BeansUtils;\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.AttributeDefinition;\n@@ -81,6620 +87,6660 @@ import java.util.concurrent.ConcurrentHashMap;\n  *\n  * @author Slavek Licehammer glory@ics.muni.cz\n  */\n+\n+\n public class AttributesManagerBlImpl implements AttributesManagerBl {\n \n-\tprivate final static Logger log = LoggerFactory.getLogger(AttributesManagerBlImpl.class);\n-\n-\tprivate final AttributesManagerImplApi attributesManagerImpl;\n-\tprivate PerunBl perunBl;\n-\n-\t//Attributes dependencies. Attr => dependent attributes (and inverse version)\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> dependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> strongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\tprivate Map<AttributeDefinition, Set<AttributeDefinition>> allDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n-\n-\tprivate final static int MAX_SIZE_OF_BULK_IN_SQL = 10000;\n-\n-\t/**\n-\t * Constructor.\n-\t */\n-\tpublic AttributesManagerBlImpl(AttributesManagerImplApi attributesManagerImpl) {\n-\t\tthis.attributesManagerImpl = attributesManagerImpl;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, facility);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, vo);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, vo));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, group);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getVirtualAttributes(sess, resource);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, resource);\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, resource, member);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getAttributes(sess, resource, member, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n-\t\t// filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif (attrNames.isEmpty()) return new ArrayList<>();\n-\t\t// adds all attributes which names are in attrNames list (virtual and empty too)\n-\t\treturn  getAttributesManagerImpl().getAttributes(sess, member, group, attrNames);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n-\t\t// filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t// adds virtual attributes too\n-\t\t\tattributes.addAll(this.getAttributes(sess, user));\n-\t\t\tattributes.addAll(this.getAttributes(sess, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(attrNames.isEmpty()) return this.getAttributes(sess, member, group, workWithUserAttributes);\n-\n-\t\t//differentiate between user+member and member-group namespace\n-\t\tList<String> userAndMemberAttributeNames = new ArrayList<>();\n-\t\tList<String> memberGroupAttributeNames = new ArrayList<>();\n-\t\tfor(String attrName : attrNames) {\n-\t\t\tif(attrName.startsWith(AttributesManager.NS_USER_ATTR) || attrName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tuserAndMemberAttributeNames.add(attrName);\n-\t\t\t} else if(attrName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tmemberGroupAttributeNames.add(attrName);\n-\t\t\t} else {\n-\t\t\t\tlog.error(\"Attribute defined by \" + attrName + \" is not in supported namespace. Skip it there!\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\tif(!userAndMemberAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n-\t\tif(!memberGroupAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\t// get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, resource, member);\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, resource, member);\n-\t\t//remove virtual attributes with null value\n-\t\tIterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n-\t\twhile (virtualAttributesIterator.hasNext()) if(virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n-\t\t// adds non-empty non-virtual attributes\n-\t\tattributes.addAll(virtualAttributes);\n-\n-\t\tif(workWithUserAttributes) {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(attrNames.isEmpty()) return this.getAttributes(sess, resource, member, workWithUserAttributes);\n-\n-\t\tList<String> userAndMemberAttributeNames = new ArrayList<>();\n-\t\tList<String> memberResourceAttributeNames = new ArrayList<>();\n-\t\tList<String> userFacilityAttirbuteNames = new ArrayList<>();\n-\t\tfor(String attributeName: attrNames) {\n-\t\t\tif(attributeName.startsWith(AttributesManager.NS_USER_ATTR) || attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tuserAndMemberAttributeNames.add(attributeName);\n-\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tmemberResourceAttributeNames.add(attributeName);\n-\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tuserFacilityAttirbuteNames.add(attributeName);\n-\t\t\t} else {\n-\t\t\t\tlog.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\t//Call only if list of attributes is not empty\n-\t\tif(!userAndMemberAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n-\t\tif(!memberResourceAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource, memberResourceAttributeNames));\n-\t\tif(workWithUserAttributes && !userFacilityAttirbuteNames.isEmpty()) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user, facility, userFacilityAttirbuteNames));\n-\t\t}\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tList<Attribute> attributes = getAttributes(sess, resource, member, attrNames, workWithUserAttributes);\n-\n-\t\tif(attrNames.isEmpty()) {\n-\t\t\tattributes.addAll(getAttributes(sess, member, group));\n-\t\t\treturn attributes;\n-\t\t}\n-\n-\t\tList<String> memberGroupAttributeNames = new ArrayList<>();\n-\n-\t\tfor(String attributeName: attrNames) {\n-\t\t\tif(attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\tmemberGroupAttributeNames.add(attributeName);\n-\t\t\t}\n-\t\t}\n-\t\tif(!memberGroupAttributeNames.isEmpty()){\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(this.getAttributes(sess, member));\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tattributes.addAll(this.getAttributes(sess, user));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException {\n-\t\tList<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, group, startPartOfName);\n-\t\tIterator<Attribute> i = attrs.iterator();\n-\t\twhile(i.hasNext()) {\n-\t\t\tAttribute attr = i.next();\n-\t\t\tif(attr.getValue() == null) i.remove();\n-\t\t}\n-\t\treturn attrs;\n-\t}\n-\n-\tpublic List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException {\n-\t\tList<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, startPartOfName);\n-\t\tIterator<Attribute> i = attrs.iterator();\n-\t\twhile(i.hasNext()) {\n-\t\t\tAttribute attr = i.next();\n-\t\t\tif(attr.getValue() == null) i.remove();\n-\t\t}\n-\t\treturn attrs;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, member, attrNames);\n-\t}\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, group, attrNames);\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Attribute> attributes = this.getAttributes(sess, member, attrNames);\n-\n-\t\tif(!workWithUserAttributes) return attributes;\n-\t\telse {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tattributes.addAll(this.getAttributes(sess, user, attrNames));\n-\n-\t\t\treturn attributes;\n-\t\t}\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, vo, attrNames);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, UserExtSource ues, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, ues, attrNames);\n-\t}\n-\n-\tpublic List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\tList<Attribute> attributes =  getAttributesManagerImpl().getUserFacilityAttributesForAnyUser(sess, facility);\n-\t\tList<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\tList<Attribute> virtualAttributes = new ArrayList<Attribute>();\n-\t\tfor(User user: facilityUsers) {\n-\t\t\tvirtualAttributes.addAll(getVirtualAttributes(sess, facility, user));\n-\t\t}\n-\n-\t\t//remove virtual attributes with null value\n-\t\tIterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n-\t\twhile(virtualAttributesIterator.hasNext()) {\n-\t\t\tif(virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n-\t\t}\n-\n-\t\tattributes.addAll(virtualAttributes);\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Attribute> attributes =  getAttributesManagerImpl().getAttributes(sess, facility, user);\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n-\n-\t\t//remove virtual attributes with null value\n-\t\tIterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n-\t\twhile(virtualAttributesIterator.hasNext()) {\n-\t\t\tif(virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n-\t\t}\n-\n-\t\tattributes.addAll(virtualAttributes);\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, key);\n-\t}\n-\n-\tpublic List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws  InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getEntitylessAttributes(sess, attrName);\n-\t}\n-\n-\tpublic List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException{\n-\t\treturn getAttributesManagerImpl().getEntitylessKeys(sess, attributeDefinition);\n-\t}\n-\n-\tpublic Attribute getEntitylessAttributeForUpdate(PerunSession sess, String key, String attrName) throws InternalErrorException, AttributeNotExistsException {\n-\t\tAttributeDefinition attrDef = this.getAttributeDefinition(sess, attrName);\n-\t\tAttribute attr = new Attribute(attrDef);\n-\n-\t\tString value = getAttributesManagerImpl().getEntitylessAttrValueForUpdate(sess, attrDef.getId(), key);\n-\n-\t\tif(value != null) {\n-\t\t\tattr.setValue(BeansUtils.stringToAttributeValue(value, attr.getType()));\n-\t\t}\n-\n-\t\treturn attr;\n-\t}\n-\n-\tpublic List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(isCoreAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition)) throw new WrongAttributeAssignmentException(attributeDefinition);\n-\n-\t\treturn getAttributesManagerImpl().getAttributesByAttributeDefinition(sess, attributeDefinition);\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, facility, user);\n-\t}\n-\n-\tpublic List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getVirtualAttributes(sess, user);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, user);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n-\t\tif(attrNames.isEmpty()) return new ArrayList<Attribute>();\n-\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, user, attrNames);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, host);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\t//adds non-empty non-virtual attributes\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, host));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getAttributesManagerImpl().getAttributes(sess, resource, group);\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group));\n-\t\tif(workWithGroupAttributes) {\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, List<String> attrNames, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(attrNames.isEmpty()) return this.getAttributes(sess, resource, group, workWithGroupAttributes);\n-\n-\t\tList<String> groupAttributeNames = new ArrayList<>();\n-\t\tList<String> groupResourceAttributeNames = new ArrayList<>();\n-\n-\t\tfor(String attributeName: attrNames) {\n-\t\t\tif(attributeName.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\tgroupAttributeNames.add(attributeName);\n-\t\t\t} else if(attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\tgroupResourceAttributeNames.add(attributeName);\n-\t\t\t} else {\n-\t\t\t\tlog.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n-\t\t\t}\n-\t\t}\n-\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\t\t//Call only if list of attributes is not empty\n-\t\tif(workWithGroupAttributes && !groupAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, group, attrNames));\n-\t\tif(!groupResourceAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group, attrNames));\n-\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException {\n-\t\t//get virtual attributes\n-\t\tList<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, ues);\n-\t\t//filter out virtual attributes with null value\n-\t\tIterator<Attribute> attributeIterator = attributes.iterator();\n-\t\twhile(attributeIterator.hasNext()) if(attributeIterator.next().getValue() == null) attributeIterator.remove();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getAttributes(sess, ues));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t\t//getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, facility, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, attributesToSet);\n-\t\tlog.debug(\"IMPORTANT: ENTERING CHECK ATTRIBUTES DEPENDENCIES\");\n-\t\tcheckAttributesDependencies(sess, facility, null, attributesToSet);\n-\t\tlog.debug(\"IMPORTANT: EXITING CHECK ATTRIBUTES DEPENDENCIES\");\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, vo, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t\t//getAttributesManagerImpl().setVirtualAttribute(sess, vo, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, vo, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, vo, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, vo, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, group, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, group, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, group, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, group, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute: attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, resource, attribute);\n-\t\t\t}\n-\t\t}\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, resource, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttributes(sess, resource, member, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n-\t\tsetAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n-\t\t// classification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, group, attributesToRemove, workWithUserAttributes);\n-\t\t// fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, group, attribute, false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\t// skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\t// this can handle member-group, member and user attributes too\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, group, attribute, true);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t// if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, member, group, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, member, group, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, attributesToRemove);\n-\t\tUser user;\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tlog.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n-\t\t}else{\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlog.debug(\"addMember timer: getMember and User [{}].\", Utils.getRunningTime(timer));\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\tboolean changed = false;\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t\t\tif(changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t\t\tif(changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, member, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, member, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, member, attributesToRemove, workWithUserAttributes);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tlog.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\", Utils.getRunningTime(timer));\n-\t\t} else {\n-\t\t\tlong timer = Utils.startTimer();\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tlog.debug(\"addMember timer: getFacility and User [{}].\", Utils.getRunningTime(timer));\n-\n-\t\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t\tboolean changed = false;\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t\t\tif(changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute rm [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute uf [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ttimer = Utils.startTimer();\n-\t\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t\t\tif (changed) {\n-\t\t\t\t\t\t\tlog.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, resource, member, attributesToSet, workWithUserAttributes);\n-\t\tthis.checkAttributesDependencies(sess, resource, member, attributesToSet, workWithUserAttributes);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, resource, user, member, attributesToRemove);\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, resource, user, member, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, member, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, member, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, member, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, facility, user, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, facility, user, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, facility, user, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, user, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, user, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, user, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, host, attributesToRemove);\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, host, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, host, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, host, null, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, group, attributesToRemove);\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tsetAttributeWithoutCheck(sess, resource, group, attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, group, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, resource, group, attributesToSet);\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, resource, group, attributesToRemove, workWithGroupAttributes);\n-\t\tif (!workWithGroupAttributes) {\n-\t\t\tsetAttributes(sess, resource, group, attributes);\n-\t\t} else {\n-\t\t\tfor (Attribute attribute : attributesToSet) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tsetAttributeWithoutCheck(sess, resource, group, attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\t\t\tsetAttributeWithoutCheck(sess, group, attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, group, attributesToSet, workWithGroupAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributesToSet, workWithGroupAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void setAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\t// clasification of attributes to attributes to remove and attributes to set\n-\t\tList<Attribute> attributesToRemove = new ArrayList<Attribute>();\n-\t\tList<Attribute> attributesToSet = new ArrayList<Attribute>();\n-\t\tconvertEmptyAttrValueToNull(attributes);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif (attribute.getValue() == null) {\n-\t\t\t\tattributesToRemove.add(attribute);\n-\t\t\t} else {\n-\t\t\t\tattributesToSet.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tremoveAttributes(sess, ues, attributesToRemove);\n-\t\t//fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n-\t\tfor(Attribute attribute : attributesToSet) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tsetAttributeWithoutCheck(sess, ues, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//if checkAttributesValue fails it causes rollback so no attribute will be stored\n-\t\tcheckAttributesValue(sess, ues, attributesToSet);\n-\t\tthis.checkAttributesDependencies(sess, ues, null, attributesToSet);\n-\t}\n-\n-\tpublic void setCoreAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\n-\t\tif(!attribute.getName().equals(\"urn:perun:member:attribute-def:core:status\")) {\n-\t\t\tthrow new InternalErrorException(\"We can set only urn:perun:member:attribute-def:core:status from member's core attributes. Others are not permitted.\");\n-\t\t}\n-\n-\t\t//defensive construction\n-\t\tMember storedMember;\n-\t\ttry {\n-\t\t\tstoredMember = getPerunBl().getMembersManagerBl().getMemberById(sess, member.getId());\n-\t\t} catch(MemberNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\t\tif(!member.equals(storedMember)) throw new InternalErrorException(\"You wan't to store core attribute for member which is not equals to member from DB (with same Id)\");\n-\n-\t\tString methodName = \"set\" + Character.toUpperCase(attribute.getFriendlyName().charAt(0)) + attribute.getFriendlyName().substring(1);\n-\t\tMethod method;\n-\t\ttry {\n-\t\t\tmethod = member.getClass().getMethod(methodName, Class.forName(attribute.getType()));\n-\t\t} catch(NoSuchMethodException ex) {\n-\t\t\tthrow new InternalErrorException(\"Bad core attribute definition. \" + attribute , ex);\n-\t\t} catch(ClassNotFoundException ex) {\n-\t\t\tthrow new InternalErrorException(\"Bad core attribute type. \" + attribute , ex);\n-\t\t}\n-\n-\t\ttry {\n-\t\t\tmethod.invoke(member, attribute.getValue());\n-\t\t} catch(IllegalAccessException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch(InvocationTargetException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t} catch(IllegalArgumentException ex) {\n-\t\t\tthrow new WrongAttributeValueException(attribute, \"Probably bad type of value\", ex);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tmember = getPerunBl().getMembersManagerBl().updateMember(sess, member);\n-\t}\n-\n-\tpublic List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAllSimilarAttributeNames(sess, startingPartOfAttributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_FACILITY_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, facility, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_VO_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, vo, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tString namespace = getNamespaceFromAttributeName(attributeName);\n-\t\tif(!namespace.startsWith(AttributesManager.NS_GROUP_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, group, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, member, attributeName);\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\t// check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, member, group, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, member, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, facility, user, attributeName);\n-\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_USER_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, user, attributeName);\n-\t}\n-\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_HOST_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, host, attributeName);\n-\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, resource, group, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, key, attributeName);\n-\t}\n-\n-\tpublic Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\t//check namespace\n-\t\tif(!attributeName.startsWith(AttributesManager.NS_UES_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n-\n-\t\treturn getAttributesManagerImpl().getAttribute(sess, ues, attributeName);\n-\t}\n-\n-\tpublic AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getAttributesManagerImpl().getAttributeDefinition(sess, attributeName);\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinitionWithRights(PerunSession sess, List<PerunBean> entities) throws InternalErrorException, AttributeNotExistsException {\n-\t\tList<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();\n-\n-\t\t//if there is no entities, so no attribute definition will be returned => empty array list of ADs\n-\t\tif(entities == null || entities.isEmpty()) return attributeDefinitions;\n-\t\t//or fill list by all attributeDefinitions\n-\t\telse attributeDefinitions = this.getAttributesDefinition(sess);\n-\n-\t\t//Prepare possible objects\n-\t\tUser user = null;\n-\t\tMember member = null;\n-\t\tVo vo = null;\n-\t\tResource resource = null;\n-\t\tGroup group = null;\n-\t\tFacility facility = null;\n-\t\tHost host = null;\n-\t\tUserExtSource ues = null;\n-\n-\t\t//Iterate through all entities and fill those which are in list of entities\n-\t\tfor(PerunBean entity: entities) {\n-\t\t\tif(entity instanceof User) user = (User) entity;\n-\t\t\telse if(entity instanceof Member) member = (Member) entity;\n-\t\t\telse if(entity instanceof Vo) vo = (Vo) entity;\n-\t\t\telse if(entity instanceof Resource) resource = (Resource) entity;\n-\t\t\telse if(entity instanceof Group) group = (Group) entity;\n-\t\t\telse if(entity instanceof Facility) facility = (Facility) entity;\n-\t\t\telse if(entity instanceof Host) host = (Host) entity;\n-\t\t\telse if(entity instanceof UserExtSource) ues = (UserExtSource) entity;\n-\t\t\t//Else skip not identified entity (log it)\n-\t\t\telse log.debug(\"In method GetAttributesDefinitionWithRights there are entity which is not identified correctly and will be skipped: \" + entity);\n-\t\t}\n-\n-\t\t//Iterate through all attributesDefinitions and remove those which are not in the possible namespace or user in session has no rights to read them\n-\t\tIterator<AttributeDefinition> iterator = attributeDefinitions.iterator();\n-\t\twhile(iterator.hasNext()) {\n-\t\t\tAttributeDefinition attrDef = iterator.next();\n-\n-\t\t\tif(this.isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR) && user != null && facility != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, facility)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, facility));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR) && member != null && resource != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, resource)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, resource));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR) && member != null && group != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, group)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, group));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR) && group != null && resource != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, resource)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, resource));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_USER_ATTR) && user != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_MEMBER_ATTR) && member != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_VO_ATTR) && vo != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, vo, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, vo, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR) && resource != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, resource, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, resource, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_GROUP_ATTR) && group != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, NS_FACILITY_ATTR) && facility != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, facility, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, facility, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR) && host != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, host, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, host, null));\n-\t\t\t\t}\n-\t\t\t} else if(this.isFromNamespace(sess, attrDef, AttributesManager.NS_UES_ATTR) && ues != null) {\n-\t\t\t\tif(!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, ues, null)) {\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t} else {\n-\t\t\t\t\tattrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, ues, null));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//if there is another namespace or if there are no entities (which are needed for the namespace) remove this attributeDefinition\n-\t\t\t\titerator.remove();\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn attributeDefinitions;\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributesDefinition(sess);\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinition(PerunSession sess, List<String> listOfAttributesNames) throws AttributeNotExistsException, InternalErrorException {\n-\t\tList<AttributeDefinition> listOfAttributeDefinitions = new ArrayList<AttributeDefinition>();\n-\t\tfor(String name: listOfAttributesNames) {\n-\t\t\tlistOfAttributeDefinitions.add(this.getAttributeDefinition(sess, name));\n-\t\t}\n-\t\treturn listOfAttributeDefinitions;\n-\t}\n-\n-\tpublic AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException {\n-\t\treturn getAttributesManagerImpl().getAttributeDefinitionById(sess, id);\n-\t}\n-\n-\tpublic List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getAttributesDefinitionByNamespace(sess, namespace);\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, vo, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tAttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n-\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, member, id);\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\treturn attribute;\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t//user-facility attribues\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n-\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t//user and user core attributes\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n-\t\tAttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n-\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, group, id);\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\t\treturn attribute;\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, member, id);\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t//user and user core attributes\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\treturn getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attributeDefinition);\n-\t\t}\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, user, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, host, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, group, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, group, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n-\t\tAttribute attribute = getAttributesManagerImpl().getAttributeById(sess, ues, id);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n-\t\t//fill attributes and get back only those which were really filled with new value\n-\t\tList<Attribute> filledAttributes = this.fillAttributes(sess, facility, resource, user, member, attributes, true);\n-\n-\t\t//Remove all filledAttributes from all attributes list\n-\t\tIterator<Attribute> iterAttr = attributes.iterator();\n-\t\twhile(iterAttr.hasNext()) {\n-\t\t\tAttribute attributeFromAllAttrs = iterAttr.next();\n-\t\t\tfor(Attribute attributeFromFillAttrs: filledAttributes) {\n-\t\t\t\tif(attributeFromAllAttrs.getName().equals(attributeFromFillAttrs.getName())) {\n-\t\t\t\t\titerAttr.remove();\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Set all filledAttributes withoutCheck\n-\t\tfor(Attribute attribute : filledAttributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, resource, member, attribute, false);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tthis.setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Join all attributes and filled attributes together\n-\t\tattributes.addAll(filledAttributes);\n-\n-\t\t//refresh all virtual attributes with new value\n-\t\tfor(Attribute attr: attributes) {\n-\t\t\tif(this.isVirtAttribute(sess, attr)) {\n-\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, resource, member, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, facility, user, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, user, attr.getName()).getValue());\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tattr.setValue(this.getAttribute(sess, member, attr.getName()).getValue());\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Check all attributes\n-\t\tcheckAttributesValue(sess, facility, resource, user, member, attributes);\n-\n-\t\t//Check all attributes dependencies\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributes);\n-\t}\n-\n-\tpublic void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException, AttributeNotExistsException {\n-\t\t//get all attributes (for member, resource, facility and user) with values\n-\t\tList<Attribute> attributes = this.getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n-\n-\t\tthis.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n-\t}\n-\n-\tpublic void setRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n-\t\t//get all attributes (for member, resource, facility, user and service) with values\n-\t\tList<Attribute> attributes = this.getRequiredAttributes(sess, service, facility, resource, user, member);\n-\n-\t\tthis.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, facility, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, facility, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t\t//getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, facility, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, facility);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, vo, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, vo, attribute)) {\n-\t\t\tcheckAttributeValue(sess, vo, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(vo, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_VO_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, vo, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, vo);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, group, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(group, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, resource, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\ttry {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, resource, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, resource);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, group, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, group);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, member, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n-\t\t\tcheckAttributeValue(sess, resource, member, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, AttributeNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif (setAttributeWithoutCheck(sess, member, group, attribute, false)) {\n-\t\t\tcheckAttributeValue(sess, member, group, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, group, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, member, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tif(setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n-\t\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n-\t\t\t\tcheckAttributeValue(sess, resource, member, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif(setAttributeWithoutCheck(sess, resource, member, attribute, true)) {\n-\t\t\t\tList<Attribute> listOfAttributes = new ArrayList<Attribute>();\n-\t\t\t\tlistOfAttributes.add(attribute);\n-\t\t\t\tcheckAttributesValue(sess, resource, member, listOfAttributes, workWithUserAttributes);\n-\t\t\t\tthis.checkAttributesDependencies(sess, resource, member, listOfAttributes, workWithUserAttributes);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO better exception here\n-\t\t\ttry {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//FIXME update changed variable\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, facility, user);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Member member, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t//NS_MEMBER_RESOURCE_ATTR\n-\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t//TODO\n-\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, member, attribute);\n-\t\t\t\tif(changed) {\n-\t\t\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, resource, member);\n-\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, member, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(workWithUserAttributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t//NS_USER_FACILITY_ATTR\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, facility, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t//NS_USER_ATTR\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\t//TODO\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Member member, Group group, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, member, group, attribute);\n-\t\t\t\tif(changed) {\n-\t\t\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, member, group);\n-\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(workWithUserAttributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, user, attribute);\n-\t\t\t\t}\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tchanged = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tchanged = setAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, member, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttributeInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttribute(sess, member, attribute);\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO better exception here\n-\t\t\ttry {\n-\t\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\n-\t\t\t//FIXME update \"changed\" variable\n-\n-\t\t} else if(isCoreAttribute(sess, attribute)) {\n-\t\t\t//TODO better exception\n-\t\t\ttry {\n-\t\t\t\tsetCoreAttributeWithoutCheck(sess, member, attribute);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tchanged = true; //FIXME check if attribute is acctualy changed\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, member, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, member);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, attribute);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, facility, user, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, facility, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, user, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, user, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, user, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, user, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(user, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttributeInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tsetAttribute(sess, user, attribute);\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, user, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, user);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, host, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, host, attribute)) {\n-\t\t\tcheckAttributeValue(sess, host, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(host, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute \" + attribute + \" can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, host, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, host);\n-\t\t\t//TODO this method not existed yet!\n-\t\t\t//getAttributesManagerImpl().changedAttributeHook(sess, host, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, resource, group, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, resource, group, attribute)) {\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, group, attribute));\n-\t\t\tcheckAttributeValue(sess, resource, group, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//FIXME Zatim je zakazane nastavovani virtualnich atributu group_resource\n-\n-\t\t\tAttribute storedAttribute;\n-\t\t\ttry {\n-\t\t\t\tstoredAttribute = getAttribute(sess, resource, group, attribute.getName());\n-\t\t\t} catch(AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t\tif(!(storedAttribute.getValue() == null ? attribute.getValue() == null : storedAttribute.getValue().equals(attribute.getValue()))) { //unless attribute and storedAttribute have equals value\n-\t\t\t\t//FIXME\n-\t\t\t\tif(attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT  + \":unixGID\") ||\n-\t\t\t\t\t\tattribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT  + \":unixGroupName\")) {\n-\t\t\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, resource, group, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute. \" + attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, resource, group, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, group, resource);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, group, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\treturn getAttributesManagerImpl().setVirtualAttribute(sess, ues, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, ues, attribute);\n-\t\t}\n-\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, ues);\n-\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean setAttributeWithoutCheck(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\t\tif(isVirtAttribute(sess, attribute)) {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().setAttribute(sess, key, attribute);\n-\t\t}\n-\t\tif(changed) {\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, key);\n-\t\t\t//TODO this method not existed yet\n-\t\t\t//getAttributesManagerImpl().changedAttributeHook(sess, key, attribute);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, key, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, key, attribute)) {\n-\t\t\tcheckAttributeValue(sess, key, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(key, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic void setAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif (attribute.getValue() == null) {\n-\t\t\tremoveAttribute(sess, ues, attribute);\n-\t\t\treturn;\n-\t\t}\n-\t\tif(setAttributeWithoutCheck(sess, ues, attribute)) {\n-\t\t\tcheckAttributeValue(sess, ues, attribute);\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(ues, null, attribute));\n-\t\t}\n-\t}\n-\n-\tpublic AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeDefinitionExistsException {\n-\t\tUtils.notNull(attribute.getName(), \"attribute.getName\");\n-\t\tUtils.notNull(attribute.getNamespace(), \"attribute.getNamespace\");\n-\t\tUtils.notNull(attribute.getFriendlyName(), \"attribute.getFriendlyName\");\n-\t\tUtils.notNull(attribute.getType(), \"attribute.getType\");\n-\n-\t\t//check if attribute.nameSpace is valid nameSpace\n-\t\tif(!isCorrectNameSpace(attribute.getNamespace())) {\n-\t\t\tthrow new InternalErrorException(\"Incorrect namespace \" + attribute.getNamespace());\n-\t\t}\n-\n-\t\t//check if attribute.type is valid class name\n-\t\ttry {\n-\t\t\tif (!attribute.getType().equals(BeansUtils.largeStringClassName) &&\n-\t\t\t\t\t!attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\t\tClass.forName(attribute.getType());\n-\t\t\t}\n-\t\t} catch(ClassNotFoundException ex) {\n-\t\t\t//TODO dat nejakou jinou vyjimku\n-\t\t\tthrow new InternalErrorException(\"Wrong attribute type\", ex);\n-\t\t} catch(RuntimeException ex) {\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} created.\", attribute);\n-\t\treturn getAttributesManagerImpl().createAttribute(sess, attribute);\n-\t}\n-\n-\tprivate boolean isCorrectNameSpace(String value) {\n-\t\tfor(String entityType : AttributesManager.ENTITY_TYPES) {\n-\t\t\tif(value.matches(\"urn:perun:\" + entityType + \":attribute-def:(def|opt|virt|core)\")) {\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\t//Remove services' required attributes\n-\t\t//TODO\n-\n-\t\t//Remove attribute and all it's values\n-\t\tgetPerunBl().getAuditer().log(sess, \"{} deleted.\", attribute);\n-\t\tthis.deleteAllAttributeAuthz(sess, attribute);\n-\t\tgetAttributesManagerImpl().deleteAttribute(sess, attribute);\n-\t}\n-\n-\tpublic void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(sess, \"All authorization information were deleted for {}.\", attribute);\n-\t\tgetAttributesManagerImpl().deleteAllAttributeAuthz(sess, attribute);\n-\t}\n-\n-\tpublic void deleteAttribute(PerunSession sess, AttributeDefinition attributeDefinition, boolean force) throws InternalErrorException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\tpublic List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getResourceRequiredAttributesDefinition(sess, resource);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getResourceRequiredAttributes(sess, resourceToGetServicesFrom, resource, member, false);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n-\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user;\n-\t\t\tFacility facility;\n-\t\t\ttry {\n-\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityById(sess, resource.getFacilityId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member has non-existent user.\", e);\n-\t\t\t} catch (FacilityNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Resource has non-existent facility.\", e);\n-\t\t\t}\n-\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, group, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tList<Attribute> attributes = new ArrayList<>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, group));\n-\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user;\n-\t\t\ttry {\n-\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n-\t\t\t} catch (UserNotExistsException e) {\n-\t\t\t\tthrow new ConsistencyErrorException(\"Member has non-existent user.\", e);\n-\t\t\t}\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Resource resource) throws InternalErrorException {\n-\t\tList<Integer> serviceIds = new ArrayList<>();\n-\t\tfor(Service service: services) {\n-\t\t\tserviceIds.add(service.getId());\n-\t\t}\n-\t\treturn this.attributesManagerImpl.getRequiredAttributes(sess, resource, serviceIds);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, resource);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, resource, member);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn this.getResourceRequiredAttributes(sess, resource, resource, member, workWithUserAttributes);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, facility, user);\n-\t\tSet<Attribute> attributes = new HashSet<Attribute>();\n-\t\tfor(Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, facility, user));\n-\t\t}\n-\t\treturn new ArrayList<Attribute>(attributes);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, User user) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, user);\n-\t\tSet<Attribute> attributes = new HashSet<Attribute>();\n-\t\tfor(Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, user));\n-\t\t}\n-\t\treturn new ArrayList<Attribute>(attributes);\n-\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n-\t\tSet<Attribute> attributes = new HashSet<Attribute>();\n-\t\tfor(Resource resource : resources) {\n-\t\t\tattributes.addAll(this.getResourceRequiredAttributes(sess, resource, member));\n-\t\t}\n-\n-\t\tif(workWithUserAttributes){\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tattributes.addAll(this.getRequiredAttributes(sess, user));\n-\t\t}\n-\t\treturn new ArrayList<Attribute>(attributes);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute>getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group));\n-\n-\t\tif(workWithGroupAttributes) {\n-\t\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, host);\n-\t}\n-\tpublic List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributesDefinition(sess, service);\n-\t}\n-\n-\tpublic List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, facility);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, facility);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, vo);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, resource);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn getRequiredAttributes(sess, service, resource, member, false);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(!workWithUserAttributes) return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member);\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, List<Member> members, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\t// check if members are from the same VO as resource\n-\t\tif (members.isEmpty()) {\n-\t\t\treturn new HashMap<>();\n-\t\t}\n-\n-\t\tfor (Member m : members) {\n-\t\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, m, resource);\n-\t\t}\n-\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tHashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n-\t\t\tHashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n-\n-\t\t\tfor (Member mem : memberAttributes.keySet()) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, memberAttributes.get(mem));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn resourceMemberAttributes;\n-\t\t}\n-\n-\t\t// get list of users, save user id as a key and list of member objects as a value\n-\t\tList<User> users = new ArrayList<>();\n-\t\tHashMap<User, List<Member>> userMemberIdMap = new HashMap<>();\n-\n-\t\t// Maps user ids to member objects and fills list of users\n-\t\tfor (Member m : members) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, m);\n-\t\t\tusers.add(user);\n-\t\t\tif (userMemberIdMap.containsKey(user)) {\n-\t\t\t\tuserMemberIdMap.get(user).add(m);\n-\t\t\t} else {\n-\t\t\t\tuserMemberIdMap.put(user, Arrays.asList(m));\n-\t\t\t}\n-\t\t}\n-\n-\t\t// get facility if null\n-\t\tif (facility == null) {\n-\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t}\n-\n-\t\t// get 4 maps from Impl getRequiredAttributes\n-\t\tHashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n-\t\tHashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n-\t\tHashMap<User, List<Attribute>> userFacilityAttributes = getRequiredAttributes(sess, service, facility, users);\n-\t\tHashMap<User, List<Attribute>> userAttributes = getRequiredAttributes(sess, service, users);\n-\n-\t\tfor (Member mem : memberAttributes.keySet()) {\n-\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\tresourceMemberAttributes.put(mem, memberAttributes.get(mem));\n-\t\t\t} else {\n-\t\t\t\tresourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (User user : userFacilityAttributes.keySet()) {\n-\t\t\t// List of members for given user\n-\t\t\tList<Member> mems = userMemberIdMap.get(user);\n-\t\t\tfor (Member mem : mems) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, userFacilityAttributes.get(user));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(userFacilityAttributes.get(user));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tfor (User user : userAttributes.keySet()) {\n-\t\t\t// List of members for given user\n-\t\t\tList<Member> mems = userMemberIdMap.get(user);\n-\t\t\tfor (Member mem : mems) {\n-\t\t\t\tif (!resourceMemberAttributes.containsKey(mem)) {\n-\t\t\t\t\tresourceMemberAttributes.put(mem, userAttributes.get(user));\n-\t\t\t\t} else {\n-\t\t\t\t\tresourceMemberAttributes.get(mem).addAll(userAttributes.get(user));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn resourceMemberAttributes;\n-\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n-\t\tif (!members.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, service, resource, members);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n-\t\tif (!members.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, resource, service, members);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n-\t\tif (!users.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, service, facility, users);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n-\t\tif (!users.isEmpty()) {\n-\t\t\treturn getRequiredAttributesForBulk(sess, service, users);\n-\t\t}\n-\t\treturn new HashMap<>();\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n-\t\tif(!workWithUserAttributes) return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n-\t\treturn attributes;\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, boolean withGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!withGroupAttributes) return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n-\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>();\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group));\n-\t\tattributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, group));\n-\t\treturn attributes;\n-\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, member);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, host);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, group);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, user);\n-\t}\n-\n-\tpublic List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user);\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn fillAttributes(sess, resource, member, attributes, false);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\t//skip non-empty attribute\n-\t\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn filledAttributes;\n-\t\t}\n-\n-\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\n-\t\t\t\t//TODO and check it's namespace\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, member, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\treturn fillAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\t//skip non-empty attribute\n-\t\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn filledAttributes;\n-\t\t}\n-\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\n-\t\t\t\t//TODO and check it's namespace\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes, boolean returnOnlyAttributesWithChangedValue) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(!returnOnlyAttributesWithChangedValue) {\n-\t\t\treturn this.fillAttributes(sess, facility, resource, user, member, attributes);\n-\t\t} else {\n-\t\t\tList<Attribute> attributesWithChangedValue = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\t\tAttribute a;\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\ta = getAttributesManagerImpl().fillAttribute(sess, member, attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t\tif(a.getValue() != null) attributesWithChangedValue.add(a);\n-\t\t\t\t}\n-\t\t\t}\n-\t\treturn attributesWithChangedValue;\n-\t\t}\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, host, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, host, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, group, attribute);\n-\t}\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Group group, List<Attribute> groupReqAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, groupReqAttributes, AttributesManager.NS_GROUP_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : groupReqAttributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource,group,  attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!workWithGroupAttributes) {\n-\t\t\treturn this.fillAttributes(sess, resource, group, attributes);\n-\t\t}\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, NS_GROUP_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n-\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else {\n-\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\t\treturn getAttributesManagerImpl().fillAttribute(sess, ues, attribute);\n-\t}\n-\n-\tpublic List<Attribute> fillAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\t\tList<Attribute> filledAttributes = new ArrayList<Attribute>();\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null) {\n-\t\t\t\tfilledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, ues, attribute));\n-\t\t\t} else {\n-\t\t\t\t//skip non-empty attribute\n-\t\t\t\tfilledAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\treturn filledAttributes;\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_FACILITY_ATTR);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) continue;\n-\t\t\tcheckAttributeValue(sess, facility, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() != null || isTrulyRequiredAttribute(sess, group, attribute)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tcheckAttributesValue(sess, resource, member, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\n-\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tcheckAttributesValue(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n-\n-\t\t\tfor (Attribute attribute : attributes) {\n-\t\t\t\tif (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(!workWithUserAttributes) checkAttributesValue(sess, member, attributes);\n-\t\telse {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tif(!workWithUserAttributes) {\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\n-\t\t\tfor(Attribute attribute : attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException,WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, group, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tcheckAttributeValue(sess, resource, group, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tif(!workWithGroupAttribute) {\n-\t\t\tthis.checkAttributesValue(sess, resource, group, attributes);\n-\t\t}\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\n-\tpublic void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\n-\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) return;\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException,WrongAttributeAssignmentException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n-\t\t}\n-\t}\n-\tpublic void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,WrongAttributeAssignmentException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n-\t}\n-\n-\tpublic void checkAttributesValue(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException{\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tgetAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n-\t}\n-\n-\tpublic void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, key, attribute);\n-\t}\n-\n-\tpublic void forceCheckAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n-\t}\n-\n-\tpublic void forceCheckAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n-\n-\t\tgetAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n-\t}\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, key, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, key, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, key);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.attributesManagerImpl.removeAllMemberResourceAttributes(sess, resource);\n-\t\tthis.getPerunBl().getAuditer().log(sess, \"All non-virtual member-resource attributes removed for all members and {}\", resource);\n-\t}\n-\n-\tpublic void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tList<Group> groups = this.getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tfor (Group group : groups) {\n-\t\t\tthis.getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, group);\n-\t\t}\n-\t\tthis.attributesManagerImpl.removeAllGroupResourceAttributes(sess, resource);\n-\t\tthis.getPerunBl().getAuditer().log(sess, \"All non-virtual group-resource attributes removed for all groups and {}\", resource);\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, key, attribute)) {\n-\t\t\tthis.checkAttributeValue(sess, key, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(key, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, facility, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, facility);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, facility, attribute)) {\n-\t\t\tthis.checkAttributeValue(sess, facility, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Member member, boolean workWithUserAttributes, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif(!workWithUserAttributes){\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthis.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n-\t\t\tthis.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n-\t\t}else{\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tthis.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck), true);\n-\t\t\tthis.checkAttributesDependencies(sess, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributesDefinition, NS_FACILITY_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributesDefinition) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, facility, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, facility, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException{\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)){\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)){\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, facility, resource, user, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, member, user, facility, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, facility);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, facility);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", facility);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, facility, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, facility, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tremoveAllAttributes(sess, resource, group);\n-\t\tif (workWithGroupAttributes) {\n-\t\t\tremoveAllAttributes(sess, group);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility, boolean removeAlsoUserFacilityAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tremoveAllAttributes(sess, facility);\n-\t\tif(removeAlsoUserFacilityAttributes) {\n-\t\t\tList<Attribute> userFacilityAttributes = getUserFacilityAttributesForAnyUser(sess, facility);\n-\t\t\tgetAttributesManagerImpl().removeAllUserFacilityAttributesForAnyUser(sess, facility);\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"All user-facility attributes removed for {} for any user.\", facility);\n-\n-\t\t\tfor(Attribute attribute : userFacilityAttributes) attribute.setValue(null);\n-\t\t\tList<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\tfor(User user: facilityUsers) {\n-\t\t\t\ttry {\n-\t\t\t\t\tcheckAttributesValue(sess, facility, user, userFacilityAttributes);\n-\t\t\t\t\tthis.checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\t\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t}\n-\t\t\t\tfor(Attribute attribute : userFacilityAttributes) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t\t\t//TODO better exception here\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t\t\t//TODO better exception here\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, host, attribute)) {\n-\t\t\tcheckAttributeValue(sess, host, new Attribute(attribute));\n-\t\t\ttry {\n-\t\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(host, null, new Attribute(attribute)));\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, host, attribute);\n-\t\tif (changed) {\n-\t\t\t//TODO HOOK FOR HOSTS!\n-\t\t\t/*try {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n-\t\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}*/\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, host);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Host host, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributesDefinition, AttributesManager.NS_HOST_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributesDefinition) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, host, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tthis.checkAttributesValue(sess, host, attributesFromDefinitions(attributesToCheck));\n-\t\ttry {\n-\t\t\tthis.checkAttributesDependencies(sess, host, null, attributesFromDefinitions(attributesToCheck));\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException, WrongAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, host);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, host);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", host);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, host, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, host, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t} catch(WrongReferenceAttributeValueException ex) {\n-\t\t\tthrow new WrongAttributeValueException(ex);\n-\t\t}\n-\n-\t\t//TODO HOOK FOR HOSTS\n-\t\t/*\n-\t\t\t for(Attribute attribute: attributes) {\n-\t\t\t try {\n-\t\t\t getAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n-\t\t\t } catch (WrongAttributeValueException ex) {\n-\t\t//TODO better exception here\n-\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t//TODO better exception here\n-\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\t}*/\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, vo, attribute)) {\n-\t\t\tcheckAttributeValue(sess, vo, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(vo, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, vo, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, vo);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Vo vo, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, vo, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, vo, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, vo, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, vo);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, vo);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", vo);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, vo, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, vo, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(group, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, group, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, group);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, group, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, group, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, group);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, group);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", group);\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, group, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, group, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tboolean changed = removeAttributeWithoutCheck(sess, resource, attribute);\n-\t\tif (changed) {\n-\t\t\tcheckAttributeValue(sess, resource, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, null, new Attribute(attribute)));\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = true;\n-\n-\t\ttry {\n-\t\t\tif (this.isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, resource, attribute);\n-\t\t\t}\n-\t\t\tif (changed) getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n-\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif (changed) getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, resource);\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t//skip core attributes\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, resource);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, resource);\n-\n-\t\t//remove all virtual attributes\n-\t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n-\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n-\t\t\t}*/\n-\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", resource);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, member, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, member, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, resource, member, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, resource, member);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!(workWithUserAttributes)) {\n-\t\t\tremoveAttributes(sess, resource, member, attributes);\n-\t\t} else {\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tList<Attribute> attributes = getAttributes(sess, resource, member);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, resource, member);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", resource, member);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, member, attributes);\n-\t\t\tcheckAttributesValue(sess, resource, member, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, group, new Attribute(attribute)));\n-\t\t}\n-\t}\n+\n+ private final static Logger log = LoggerFactory.getLogger(AttributesManagerBlImpl.class);\n+ private final AttributesManagerImplApi attributesManagerImpl;\n+ private PerunBl perunBl;\n+\n+ //Attributes dependencies. Attr => dependent attributes (and inverse version)\n+ private Map<AttributeDefinition, Set<AttributeDefinition>> dependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+ private Map<AttributeDefinition, Set<AttributeDefinition>> strongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+ private Map<AttributeDefinition, Set<AttributeDefinition>> inverseDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+ private Map<AttributeDefinition, Set<AttributeDefinition>> inverseStrongDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+ private Map<AttributeDefinition, Set<AttributeDefinition>> allDependencies = new ConcurrentHashMap<AttributeDefinition, Set<AttributeDefinition>>();\n+ private final static int MAX_SIZE_OF_BULK_IN_SQL = 10000;\n+\n+ /**\n+  * Constructor.\n+  */\n+\n+\n+ public AttributesManagerBlImpl(AttributesManagerImplApi attributesManagerImpl) {\n+  this.attributesManagerImpl = attributesManagerImpl;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, facility);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+\n+  //adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, vo);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+\n+  //adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, vo));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, group);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+\n+  //adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getVirtualAttributes(sess, resource);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+\n+  //adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+  return getAttributesManagerImpl().getVirtualAttributes(sess, resource);\n+ }\n+\n+ public List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException {\n+  return getAttributesManagerImpl().getVirtualAttributes(sess, resource, member);\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return getAttributes(sess, resource, member, false);\n+ }\n+\n+ @Override\n+ public List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+  // get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n+  // filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+  // adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n+  return attributes;\n+ }\n+\n+ @Override\n+ public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException, WrongAttributeAssignmentException {\n+  if (attrNames.isEmpty())\n+   return new ArrayList<>();\n+  // adds all attributes which names are in attrNames list (virtual and empty too)\n+  return getAttributesManagerImpl().getAttributes(sess, member, group, attrNames);\n+ }\n+\n+ @Override\n+ public List<Attribute> getAttributes(PerunSession sess, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  // get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member, group);\n+  // filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+  // adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group));\n+  if (workWithUserAttributes) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   // adds virtual attributes too\n+   attributes.addAll(this.getAttributes(sess, user));\n+   attributes.addAll(this.getAttributes(sess, member));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess,\n+                                      Member member,\n+                                      Group group,\n+                                      List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  if (attrNames.isEmpty())\n+   return this.getAttributes(sess, member, group, workWithUserAttributes);\n+\n+  //differentiate between user+member and member-group namespace\n+  List<String> userAndMemberAttributeNames = new ArrayList<>();\n+  List<String> memberGroupAttributeNames = new ArrayList<>();\n+  for (String attrName : attrNames) {\n+   if (attrName.startsWith(AttributesManager.NS_USER_ATTR) || attrName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+    userAndMemberAttributeNames.add(attrName);\n+   } else if (attrName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+    memberGroupAttributeNames.add(attrName);\n+   } else {\n+    log.error(\"Attribute defined by \" + attrName + \" is not in supported namespace. Skip it there!\");\n+   }\n+  }\n+  List<Attribute> attributes = new ArrayList<>();\n+  if (!userAndMemberAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n+  if (!memberGroupAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  // get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, resource, member);\n+  List<Attribute> virtualAttributes = getVirtualAttributes(sess, resource, member);\n+  //remove virtual attributes with null value\n+  Iterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n+  while (virtualAttributesIterator.hasNext()) if (virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n+  // adds non-empty non-virtual attributes\n+  attributes.addAll(virtualAttributes);\n+  if (workWithUserAttributes) {\n+   Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n+   attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+   attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  if (attrNames.isEmpty())\n+   return this.getAttributes(sess, resource, member, workWithUserAttributes);\n+  List<String> userAndMemberAttributeNames = new ArrayList<>();\n+  List<String> memberResourceAttributeNames = new ArrayList<>();\n+  List<String> userFacilityAttirbuteNames = new ArrayList<>();\n+  for (String attributeName : attrNames) {\n+   if (attributeName.startsWith(AttributesManager.NS_USER_ATTR) || attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) {\n+    userAndMemberAttributeNames.add(attributeName);\n+   } else if (attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+    memberResourceAttributeNames.add(attributeName);\n+   } else if (attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) {\n+           userFacilityAttirbuteNames.add(attributeName);\n+          } else {\n+           log.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n+          }\n+  }\n+  List<Attribute> attributes = new ArrayList<>();\n+  //Call only if list of attributes is not empty\n+  if (!userAndMemberAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, member, userAndMemberAttributeNames, workWithUserAttributes));\n+  if (!memberResourceAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, resource, memberResourceAttributeNames));\n+  if (workWithUserAttributes && !userFacilityAttirbuteNames.isEmpty()) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+   attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user, facility, userFacilityAttirbuteNames));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Group group, Resource resource, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  List<Attribute> attributes = getAttributes(sess, resource, member, attrNames, workWithUserAttributes);\n+  if (attrNames.isEmpty()) {\n+   attributes.addAll(getAttributes(sess, member, group));\n+   return attributes;\n+  }\n+  List<String> memberGroupAttributeNames = new ArrayList<>();\n+  for (String attributeName : attrNames) {\n+   if (attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+    memberGroupAttributeNames.add(attributeName);\n+   }\n+  }\n+  if (!memberGroupAttributeNames.isEmpty()) {\n+   attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member, group, memberGroupAttributeNames));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(this.getAttributes(sess, member));\n+  if (workWithUserAttributes) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   attributes.addAll(this.getAttributes(sess, user));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, member);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+\n+  //adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException {\n+  List<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, group, startPartOfName);\n+  Iterator<Attribute> i = attrs.iterator();\n+  while (i.hasNext()) {\n+   Attribute attr = i.next();\n+   if (attr.getValue() == null) i.remove();\n+  }\n+\n+  return attrs;\n+ }\n+\n+ public List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException {\n+  List<Attribute> attrs = getAttributesManagerImpl().getAllAttributesStartWithNameWithoutNullValue(sess, resource, startPartOfName);\n+  Iterator<Attribute> i = attrs.iterator();\n+  while (i.hasNext()) {\n+   Attribute attr = i.next();\n+   if (attr.getValue() == null) i.remove();\n+  }\n+\n+  return attrs;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException {\n+  if (attrNames.isEmpty())\n+   return new ArrayList<Attribute>();\n+  return getAttributesManagerImpl().getAttributes(sess, member, attrNames);\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException {\n+  if (attrNames.isEmpty())\n+   return new ArrayList<Attribute>();\n+  List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, group, attrNames);\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames, boolean workWithUserAttributes) throws InternalErrorException {\n+  List<Attribute> attributes = this.getAttributes(sess, member, attrNames);\n+  if (!workWithUserAttributes) return attributes;\n+  else {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   attributes.addAll(this.getAttributes(sess, user, attrNames));\n+   return attributes;\n+  }\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException {\n+  if (attrNames.isEmpty())\n+   return new ArrayList<Attribute>();\n+  return getAttributesManagerImpl().getAttributes(sess, vo, attrNames);\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, UserExtSource ues, List<String> attrNames) throws InternalErrorException {\n+  if (attrNames.isEmpty())\n+   return new ArrayList<Attribute>();\n+  return getAttributesManagerImpl().getAttributes(sess, ues, attrNames);\n+ }\n+\n+ public List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException {\n+  List<Attribute> attributes = getAttributesManagerImpl().getUserFacilityAttributesForAnyUser(sess, facility);\n+  List<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+  List<Attribute> virtualAttributes = new ArrayList<Attribute>();\n+  for (User user : facilityUsers) {\n+   virtualAttributes.addAll(getVirtualAttributes(sess, facility, user));\n+  }\n+\n+  //remove virtual attributes with null value\n+  Iterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n+  while (virtualAttributesIterator.hasNext()) {\n+   if (virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n+  }\n+  attributes.addAll(virtualAttributes);\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+  List<Attribute> attributes = getAttributesManagerImpl().getAttributes(sess, facility, user);\n+  List<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n+\n+  //remove virtual attributes with null value\n+  Iterator<Attribute> virtualAttributesIterator = virtualAttributes.iterator();\n+  while (virtualAttributesIterator.hasNext()) {\n+   if (virtualAttributesIterator.next().getValue() == null) virtualAttributesIterator.remove();\n+  }\n+  attributes.addAll(virtualAttributes);\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException {\n+  return getAttributesManagerImpl().getAttributes(sess, key);\n+ }\n+\n+ public List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws InternalErrorException {\n+  return getAttributesManagerImpl().getEntitylessAttributes(sess, attrName);\n+ }\n+\n+ public List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+  return getAttributesManagerImpl().getEntitylessKeys(sess, attributeDefinition);\n+ }\n+\n+ public Attribute getEntitylessAttributeForUpdate(PerunSession sess, String key, String attrName) throws InternalErrorException, AttributeNotExistsException {\n+  AttributeDefinition attrDef = this.getAttributeDefinition(sess, attrName);\n+  Attribute attr = new Attribute(attrDef);\n+  String value = getAttributesManagerImpl().getEntitylessAttrValueForUpdate(sess, attrDef.getId(), key);\n+  if (value != null) {\n+   attr.setValue(BeansUtils.stringToAttributeValue(value, attr.getType()));\n+  }\n+\n+  return attr;\n+ }\n+\n+ public List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  if (isCoreAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition)) throw new WrongAttributeAssignmentException(attributeDefinition);\n+  return getAttributesManagerImpl().getAttributesByAttributeDefinition(sess, attributeDefinition);\n+ }\n+\n+ public List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+  return getAttributesManagerImpl().getVirtualAttributes(sess, facility, user);\n+ }\n+\n+ public List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException {\n+  return getAttributesManagerImpl().getVirtualAttributes(sess, user);\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, user);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException {\n+  if (attrNames.isEmpty())\n+   return new ArrayList<Attribute>();\n+  return getAttributesManagerImpl().getAttributes(sess, user, attrNames);\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, host);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+\n+  //adds non-empty non-virtual attributes\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, host));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return getAttributesManagerImpl().getAttributes(sess, resource, group);\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group));\n+  if (workWithGroupAttributes) {\n+   attributes.addAll(getAttributesManagerImpl().getAttributes(sess, group));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group, List<String> attrNames, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  if (attrNames.isEmpty())\n+   return this.getAttributes(sess, resource, group, workWithGroupAttributes);\n+  List<String> groupAttributeNames = new ArrayList<>();\n+  List<String> groupResourceAttributeNames = new ArrayList<>();\n+  for (String attributeName : attrNames) {\n+   if (attributeName.startsWith(AttributesManager.NS_GROUP_ATTR)) {\n+    groupAttributeNames.add(attributeName);\n+   } else if (attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+    groupResourceAttributeNames.add(attributeName);\n+   } else {\n+    log.error(\"Attribute defined by \" + attributeName + \" is not in supported namespace. Skip it there!\");\n+   }\n+  }\n+  List<Attribute> attributes = new ArrayList<>();\n+  //Call only if list of attributes is not empty\n+  if (workWithGroupAttributes && !groupAttributeNames.isEmpty()) attributes.addAll(this.getAttributes(sess, group, attrNames));\n+  if (!groupResourceAttributeNames.isEmpty()) attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, group, attrNames));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, resource, member));\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, facility, user));\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, user));\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, member));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException {\n+  //get virtual attributes\n+  List<Attribute> attributes = getAttributesManagerImpl().getVirtualAttributes(sess, ues);\n+  //filter out virtual attributes with null value\n+  Iterator<Attribute> attributeIterator = attributes.iterator();\n+  while (attributeIterator.hasNext()) if (attributeIterator.next().getValue() == null) attributeIterator.remove();\n+  attributes.addAll(getAttributesManagerImpl().getAttributes(sess, ues));\n+  return attributes;\n+ }\n+\n+ public void setAttributes(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, facility, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!isCoreAttribute(sess, attribute)) {\n+    if (isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+     //getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n+    } else {\n+     setAttributeWithoutCheck(sess, facility, attribute);\n+    }\n+   }\n+  }\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, facility, attributesToSet);\n+  log.debug(\"IMPORTANT: ENTERING CHECK ATTRIBUTES DEPENDENCIES\");\n+  checkAttributesDependencies(sess, facility, null, attributesToSet);\n+  log.debug(\"IMPORTANT: EXITING CHECK ATTRIBUTES DEPENDENCIES\");\n+ }\n+\n+ public void setAttributes(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, vo, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+     //getAttributesManagerImpl().setVirtualAttribute(sess, vo, attribute);\n+    } else {\n+     setAttributeWithoutCheck(sess, vo, attribute);\n+    }\n+   }\n+  }\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, vo, attributesToSet);\n+  this.checkAttributesDependencies(sess, vo, null, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, group, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+    } else {\n+     setAttributeWithoutCheck(sess, group, attribute);\n+    }\n+   }\n+  }\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, group, attributesToSet);\n+  this.checkAttributesDependencies(sess, group, null, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, resource, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    setAttributeWithoutCheck(sess, resource, attribute);\n+   }\n+  }\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, resource, attributesToSet);\n+  this.checkAttributesDependencies(sess, resource, null, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  setAttributes(sess, resource, member, attributes, false);\n+ }\n+\n+ @Override\n+ public void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n+  setAttributes(sess, member, group, attributes, false);\n+ }\n+\n+ @Override\n+ public void setAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, UserNotExistsException {\n+  // classification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, member, group, attributesToRemove, workWithUserAttributes);\n+  // fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  if (!workWithUserAttributes) {\n+\n+   for (Attribute attribute : attributesToSet) {\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     setAttributeWithoutCheck(sess, member, group, attribute, false);\n+    }\n+   }\n+  } else {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   for (Attribute attribute : attributesToSet) {\n+    // skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     // this can handle member-group, member and user attributes too\n+     setAttributeWithoutCheck(sess, member, group, attribute, true);\n+    }\n+   }\n+  }\n+\n+  // if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, member, group, attributesToSet, workWithUserAttributes);\n+  this.checkAttributesDependencies(sess, member, group, attributesToSet, workWithUserAttributes);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, member, attributesToRemove);\n+  User user;\n+  if (!workWithUserAttributes) {\n+   long timer = Utils.startTimer();\n+   for (Attribute attribute : attributesToSet) {\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     setAttributeWithoutCheck(sess, member, attribute);\n+    }\n+   }\n+   log.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\",\n+   Utils.getRunningTime(timer));\n+  } else {\n+   long timer = Utils.startTimer();\n+   user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   log.debug(\"addMember timer: getMember and User [{}].\", Utils.getRunningTime(timer));\n+   for (Attribute attribute : attributesToSet) {\n+\n+    boolean changed = false;\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+      timer = Utils.startTimer();\n+      changed = setAttributeWithoutCheck(sess, user, attribute);\n+      if (changed) {\n+       log.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+      }\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+      timer = Utils.startTimer();\n+      changed = setAttributeWithoutCheck(sess, member, attribute);\n+      if (changed) {\n+       log.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+      }\n+     } else {\n+      throw new WrongAttributeAssignmentException(attribute);\n+     }\n+    }\n+   }\n+  }\n+  checkAttributesValue(sess, member, attributesToSet, workWithUserAttributes);\n+  this.checkAttributesDependencies(sess, member, attributesToSet, workWithUserAttributes);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, resource, member, attributesToRemove, workWithUserAttributes);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  if (!workWithUserAttributes) {\n+   long timer = Utils.startTimer();\n+   for (Attribute attribute : attributesToSet) {\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+    }\n+   }\n+   log.debug(\"addMember timer: setAttributes (for(Attribute attribute : attributes)) [{}].\",\n+   Utils.getRunningTime(timer));\n+  } else {\n+   long timer = Utils.startTimer();\n+   Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   log.debug(\"addMember timer: getFacility and User [{}].\", Utils.getRunningTime(timer));\n+   for (Attribute attribute : attributesToSet) {\n+\n+    boolean changed = false;\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+      timer = Utils.startTimer();\n+      changed = setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+      if (changed) {\n+       log.debug(\"addMember timer: setAttribute rm [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+      }\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+      timer = Utils.startTimer();\n+      changed = setAttributeWithoutCheck(sess, facility, user, attribute);\n+      if (changed) {\n+       log.debug(\"addMember timer: setAttribute uf [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+      }\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+             timer = Utils.startTimer();\n+             changed = setAttributeWithoutCheck(sess, user, attribute);\n+             if (changed) {\n+              log.debug(\"addMember timer: setAttribute u [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+             }\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+             timer = Utils.startTimer();\n+             changed = setAttributeWithoutCheck(sess, member, attribute);\n+             if (changed) {\n+              log.debug(\"addMember timer: setAttribute m [{}] [{}].\", attribute, Utils.getRunningTime(timer));\n+             }\n+            } else {\n+             throw new WrongAttributeAssignmentException(attribute);\n+            }\n+    }\n+   }\n+  }\n+\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, resource, member, attributesToSet, workWithUserAttributes);\n+  this.checkAttributesDependencies(sess, resource, member, attributesToSet, workWithUserAttributes);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, facility, resource, user, member, attributesToRemove);\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+     setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+     setAttributeWithoutCheck(sess, facility, user, attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+            setAttributeWithoutCheck(sess, user, attribute);\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+            setAttributeWithoutCheck(sess, member, attribute);\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   }\n+  }\n+\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, facility, resource, user, member, attributesToSet);\n+  this.checkAttributesDependencies(sess, resource, member, user, facility, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, member, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+    } else {\n+     setAttributeWithoutCheck(sess, member, attribute);\n+    }\n+   }\n+  }\n+\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, member, attributesToSet);\n+  this.checkAttributesDependencies(sess, member, null, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, facility, user, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    setAttributeWithoutCheck(sess, facility, user, attribute);\n+   }\n+  }\n+\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, facility, user, attributesToSet);\n+  this.checkAttributesDependencies(sess, facility, user, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, user, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+    } else {\n+     setAttributeWithoutCheck(sess, user, attribute);\n+    }\n+   }\n+  }\n+\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, user, attributesToSet);\n+  this.checkAttributesDependencies(sess, user, null, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, host, attributesToRemove);\n+  for (Attribute attribute : attributesToSet) {\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+    } else {\n+     setAttributeWithoutCheck(sess, host, attribute);\n+    }\n+   }\n+  }\n+\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, host, attributesToSet);\n+  this.checkAttributesDependencies(sess, host, null, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, resource, group, attributesToRemove);\n+  for (Attribute attribute : attributesToSet) {\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    setAttributeWithoutCheck(sess, resource, group, attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, resource, group, attributesToSet);\n+  this.checkAttributesDependencies(sess, resource, group, attributesToSet);\n+ }\n+\n+ public void setAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, resource, group, attributesToRemove, workWithGroupAttributes);\n+  if (!workWithGroupAttributes) {\n+   setAttributes(sess, resource, group, attributes);\n+  } else {\n+\n+   for (Attribute attribute : attributesToSet) {\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+      setAttributeWithoutCheck(sess, resource, group, attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n+      setAttributeWithoutCheck(sess, group, attribute);\n+     } else {\n+      throw new WrongAttributeAssignmentException(attribute);\n+     }\n+    }\n+   }\n+   checkAttributesValue(sess, resource, group, attributesToSet, workWithGroupAttributes);\n+   this.checkAttributesDependencies(sess, resource, group, attributesToSet, workWithGroupAttributes);\n+  }\n+ }\n+\n+ public void setAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  // clasification of attributes to attributes to remove and attributes to set\n+  List<Attribute> attributesToRemove = new ArrayList<Attribute>();\n+  List<Attribute> attributesToSet = new ArrayList<Attribute>();\n+  convertEmptyAttrValueToNull(attributes);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    attributesToRemove.add(attribute);\n+   } else {\n+    attributesToSet.add(attribute);\n+   }\n+  }\n+  removeAttributes(sess, ues, attributesToRemove);\n+  //fist we have to store attributes into DB because checkAttributesValue can be preformed only on stored attributes.\n+  for (Attribute attribute : attributesToSet) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+    } else {\n+     setAttributeWithoutCheck(sess, ues, attribute);\n+    }\n+   }\n+  }\n+\n+  //if checkAttributesValue fails it causes rollback so no attribute will be stored\n+  checkAttributesValue(sess, ues, attributesToSet);\n+  this.checkAttributesDependencies(sess, ues, null, attributesToSet);\n+ }\n+\n+ public void setCoreAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (!attribute.getName().equals(\"urn:perun:member:attribute-def:core:status\")) {\n+   throw new InternalErrorException(\"We can set only urn:perun:member:attribute-def:core:status from member's core attributes. Others are not permitted.\");\n+  }\n+\n+  //defensive construction\n+  Member storedMember;\n+  try {\n+   storedMember = getPerunBl().getMembersManagerBl().getMemberById(sess, member.getId());\n+  } catch (MemberNotExistsException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+  if (!member.equals(storedMember)) throw new InternalErrorException(\"You wan't to store core attribute for member which is not equals to member from DB (with same Id)\");\n+  String methodName = \"set\" + Character.toUpperCase(attribute.getFriendlyName().charAt(0)) + attribute.getFriendlyName().substring(1);\n+  Method method;\n+  try {\n+   method = member.getClass().getMethod(methodName, Class.forName(attribute.getType()));\n+  } catch (NoSuchMethodException ex) {\n+   throw new InternalErrorException(\"Bad core attribute definition. \" + attribute, ex);\n+  } catch (ClassNotFoundException ex) {\n+   throw new InternalErrorException(\"Bad core attribute type. \" + attribute, ex);\n+  }\n+\n+  try {\n+   method.invoke(member, attribute.getValue());\n+  } catch (IllegalAccessException ex) {\n+   throw new InternalErrorException(ex);\n+  } catch (InvocationTargetException ex) {\n+   throw new WrongAttributeValueException(ex);\n+  } catch (IllegalArgumentException ex) {\n+   throw new WrongAttributeValueException(attribute, \"Probably bad type of value\", ex);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  member = getPerunBl().getMembersManagerBl().updateMember(sess, member);\n+ }\n+\n+ public List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException {\n+  return getAttributesManagerImpl().getAllSimilarAttributeNames(sess, startingPartOfAttributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_FACILITY_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, facility, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_VO_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, vo, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  String namespace = getNamespaceFromAttributeName(attributeName);\n+  if (!namespace.startsWith(AttributesManager.NS_GROUP_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, group, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, resource, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_MEMBER_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, resource, member, attributeName);\n+ }\n+\n+ @Override\n+ public Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+  // check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_MEMBER_GROUP_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, member, group, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_MEMBER_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, member, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_USER_FACILITY_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, facility, user, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_USER_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, user, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  if (!attributeName.startsWith(AttributesManager.NS_HOST_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, host, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  if (!attributeName.startsWith(AttributesManager.NS_GROUP_RESOURCE_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, resource, group, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+  if (!attributeName.startsWith(AttributesManager.NS_ENTITYLESS_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name= \" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, key, attributeName);\n+ }\n+\n+ public Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  //check namespace\n+  if (!attributeName.startsWith(AttributesManager.NS_UES_ATTR)) throw new WrongAttributeAssignmentException(\"Attribute name=\" + attributeName);\n+  return getAttributesManagerImpl().getAttribute(sess, ues, attributeName);\n+ }\n+\n+ public AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException {\n+  return getAttributesManagerImpl().getAttributeDefinition(sess, attributeName);\n+ }\n+\n+ public List<AttributeDefinition> getAttributesDefinitionWithRights(PerunSession sess, List<PerunBean> entities) throws InternalErrorException, AttributeNotExistsException {\n+  List<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();\n+\n+  //if there is no entities, so no attribute definition will be returned => empty array list of ADs\n+  if (entities == null || entities.isEmpty()) return attributeDefinitions;\n+  //or fill list by all attributeDefinitions\n+  else attributeDefinitions = this.getAttributesDefinition(sess);\n+\n+  //Prepare possible objects\n+  User user = null;\n+  Member member = null;\n+  Vo vo = null;\n+  Resource resource = null;\n+  Group group = null;\n+  Facility facility = null;\n+  Host host = null;\n+  UserExtSource ues = null;\n+\n+  //Iterate through all entities and fill those which are in list of entities\n+  for (PerunBean entity : entities) {\n+   if (entity instanceof User) user = (User) entity;\n+   else if (entity instanceof Member) member = (Member) entity;\n+   else if (entity instanceof Vo) vo = (Vo) entity;\n+   else if (entity instanceof Resource) resource = (Resource) entity;\n+   else if (entity instanceof Group) group = (Group) entity;\n+   else if (entity instanceof Facility) facility = (Facility) entity;\n+   else if (entity instanceof Host) host = (Host) entity;\n+   else if (entity instanceof UserExtSource) ues = (UserExtSource) entity;\n+   //Else skip not identified entity (log it)\n+   else log.debug(\"In method GetAttributesDefinitionWithRights there are entity which is not identified correctly and will be skipped: \" + entity);\n+  }\n+\n+  //Iterate through all attributesDefinitions and remove those which are not in the possible namespace or user in session has no rights to read them\n+  Iterator<AttributeDefinition> iterator = attributeDefinitions.iterator();\n+  while (iterator.hasNext()) {\n+   AttributeDefinition attrDef = iterator.next();\n+   if (this.isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR) && user != null && facility != null) {\n+    if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, facility)) {\n+     iterator.remove();\n+    } else {\n+     attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, facility));\n+    }\n+   } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR) && member != null && resource != null) {\n+    if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, resource)) {\n+     iterator.remove();\n+    } else {\n+     attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, resource));\n+    }\n+   } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR) && member != null && group != null) {\n+           if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, group)) {\n+            iterator.remove();\n+           } else {\n+            attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, group));\n+           }\n+          } else if (this.isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR) && group != null && resource != null) {\n+           if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, resource)) {\n+            iterator.remove();\n+           } else {\n+            attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, resource));\n+           }\n+          } else if (this.isFromNamespace(sess, attrDef, NS_USER_ATTR) && user != null) {\n+                  if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, user, null)) {\n+                   iterator.remove();\n+                  } else {\n+                   attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, user, null));\n+                  }\n+                 } else if (this.isFromNamespace(sess, attrDef, NS_MEMBER_ATTR) && member != null) {\n+                  if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, member, null)) {\n+                   iterator.remove();\n+                  } else {\n+                   attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, member, null));\n+                  }\n+                 } else if (this.isFromNamespace(sess, attrDef, NS_VO_ATTR) && vo != null) {\n+                         if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, vo, null)) {\n+                          iterator.remove();\n+                         } else {\n+                          attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, vo, null));\n+                         }\n+                        } else if (this.isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR) && resource != null) {\n+                         if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, resource, null)) {\n+                          iterator.remove();\n+                         } else {\n+                          attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, resource, null));\n+                         }\n+                        } else if (this.isFromNamespace(sess, attrDef, NS_GROUP_ATTR) && group != null) {\n+                                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, group, null)) {\n+                                 iterator.remove();\n+                                } else {\n+                                 attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, group, null));\n+                                }\n+                               } else if (this.isFromNamespace(sess, attrDef, NS_FACILITY_ATTR) && facility != null) {\n+                                if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, facility, null)) {\n+                                 iterator.remove();\n+                                } else {\n+                                 attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, facility, null));\n+                                }\n+                               } else if (this.isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR) && host != null) {\n+                                       if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, host, null)) {\n+                                        iterator.remove();\n+                                       } else {\n+                                        attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, host, null));\n+                                       }\n+                                      } else if (this.isFromNamespace(sess, attrDef, AttributesManager.NS_UES_ATTR) && ues != null) {\n+                                       if (!AuthzResolver.isAuthorizedForAttribute(sess, ActionType.READ, attrDef, ues, null)) {\n+                                        iterator.remove();\n+                                       } else {\n+                                        attrDef.setWritable(AuthzResolver.isAuthorizedForAttribute(sess, ActionType.WRITE, attrDef, ues, null));\n+                                       }\n+                                      } else {\n+    //if there is another namespace or if there are no entities (which are needed for the namespace) remove this attributeDefinition\n+                                       iterator.remove();\n+                                      }\n+  }\n+\n+  return attributeDefinitions;\n+ }\n+\n+ public List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException {\n+  return getAttributesManagerImpl().getAttributesDefinition(sess);\n+ }\n+\n+ public List<AttributeDefinition> getAttributesDefinition(PerunSession sess, List<String> listOfAttributesNames) throws AttributeNotExistsException, InternalErrorException {\n+  List<AttributeDefinition> listOfAttributeDefinitions = new ArrayList<AttributeDefinition>();\n+  for (String name : listOfAttributesNames) {\n+   listOfAttributeDefinitions.add(this.getAttributeDefinition(sess, name));\n+  }\n+\n+  return listOfAttributeDefinitions;\n+ }\n+\n+ public AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException {\n+  return getAttributesManagerImpl().getAttributeDefinitionById(sess, id);\n+ }\n+\n+ public List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException {\n+  return getAttributesManagerImpl().getAttributesDefinitionByNamespace(sess, namespace);\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, vo, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  AttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n+  if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+   Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, member, id);\n+   getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+   return attribute;\n+  } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+   //user-facility attribues\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+   return getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n+  } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n+   //user and user core attributes\n+          User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+          return getAttributesManagerImpl().getAttributeById(sess, user, id);\n+         } else {\n+          throw new WrongAttributeAssignmentException(attributeDefinition);\n+         }\n+ }\n+\n+ @Override\n+ public Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException {\n+  AttributeDefinition attributeDefinition = getAttributeDefinitionById(sess, id);\n+  if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+   Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, group, id);\n+   getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+   return attribute;\n+  } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_MEMBER_ATTR)) {\n+   return getAttributesManagerImpl().getAttributeById(sess, member, id);\n+  } else if (getAttributesManagerImpl().isFromNamespace(sess, attributeDefinition, AttributesManager.NS_USER_ATTR)) {\n+   //user and user core attributes\n+          User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+          return getAttributesManagerImpl().getAttributeById(sess, user, id);\n+         } else {\n+          throw new WrongAttributeAssignmentException(attributeDefinition);\n+         }\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, member, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, facility, user, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, user, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, host, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, resource, group, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, group, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+  return attribute;\n+ }\n+\n+ public Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, WrongAttributeAssignmentException, AttributeNotExistsException {\n+  Attribute attribute = getAttributesManagerImpl().getAttributeById(sess, ues, id);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+  return attribute;\n+ }\n+\n+ public void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n+  //fill attributes and get back only those which were really filled with new value\n+  List<Attribute> filledAttributes = this.fillAttributes(sess, facility, resource, user, member, attributes, true);\n+\n+  //Remove all filledAttributes from all attributes list\n+  Iterator<Attribute> iterAttr = attributes.iterator();\n+  while (iterAttr.hasNext()) {\n+   Attribute attributeFromAllAttrs = iterAttr.next();\n+   for (Attribute attributeFromFillAttrs : filledAttributes) {\n+    if (attributeFromAllAttrs.getName().equals(attributeFromFillAttrs.getName())) {\n+     iterAttr.remove();\n+     break;\n+    }\n+   }\n+  }\n+\n+  //Set all filledAttributes withoutCheck\n+\n+  for (Attribute attribute : filledAttributes) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+     this.setAttributeWithoutCheck(sess, resource, member, attribute, false);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+     this.setAttributeWithoutCheck(sess, facility, user, attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+            this.setAttributeWithoutCheck(sess, user, attribute);\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+            this.setAttributeWithoutCheck(sess, member, attribute);\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   }\n+  }\n+\n+  //Join all attributes and filled attributes together\n+  attributes.addAll(filledAttributes);\n+\n+  //refresh all virtual attributes with new value\n+  for (Attribute attr : attributes) {\n+   if (this.isVirtAttribute(sess, attr)) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+     attr.setValue(this.getAttribute(sess, resource, member, attr.getName()).getValue());\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+     attr.setValue(this.getAttribute(sess, facility, user, attr.getName()).getValue());\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_USER_ATTR)) {\n+            attr.setValue(this.getAttribute(sess, user, attr.getName()).getValue());\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, AttributesManager.NS_MEMBER_ATTR)) {\n+            attr.setValue(this.getAttribute(sess, member, attr.getName()).getValue());\n+           } else {\n+            throw new WrongAttributeAssignmentException(attr);\n+           }\n+   }\n+  }\n+\n+  //Check all attributes\n+  checkAttributesValue(sess, facility, resource, user, member, attributes);\n+\n+  //Check all attributes dependencies\n+  this.checkAttributesDependencies(sess, resource, member, user, facility, attributes);\n+ }\n+\n+ public void setRequiredAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException, AttributeNotExistsException {\n+  //get all attributes (for member, resource, facility and user) with values\n+  List<Attribute> attributes = this.getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n+  this.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n+ }\n+\n+ public void setRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, AttributeNotExistsException, WrongAttributeValueException {\n+  //get all attributes (for member, resource, facility, user and service) with values\n+  List<Attribute> attributes = this.getRequiredAttributes(sess, service, facility, resource, user, member);\n+  this.setRequiredAttributes(sess, facility, resource, user, member, attributes);\n+ }\n+\n+ public void setAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, facility, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, facility, attribute)) {\n+   checkAttributeValue(sess, facility, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(facility, null, attribute));\n+  }\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   //TODO\n+   throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+   //getAttributesManagerImpl().setVirtualAttribute(sess, facility, attribute);\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, facility, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, facility);\n+   getAttributesManagerImpl().changedAttributeHook(sess, facility, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, vo, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, vo, attribute)) {\n+   checkAttributeValue(sess, vo, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(vo, null, attribute));\n+  }\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_VO_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   //TODO\n+   throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, vo, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, vo);\n+   getAttributesManagerImpl().changedAttributeHook(sess, vo, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, group, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, group, attribute)) {\n+   checkAttributeValue(sess, group, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(group, null, attribute));\n+  }\n+ }\n+\n+ public void setAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, resource, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, resource, attribute)) {\n+   checkAttributeValue(sess, resource, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(resource, null, attribute));\n+  }\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   try {\n+    changed = getAttributesManagerImpl().setVirtualAttribute(sess, resource, attribute);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, resource, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, resource);\n+   getAttributesManagerImpl().changedAttributeHook(sess, resource, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   //TODO\n+   throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, group, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, group);\n+   getAttributesManagerImpl().changedAttributeHook(sess, group, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, resource, member, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n+   checkAttributeValue(sess, resource, member, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n+  }\n+ }\n+\n+ @Override\n+ public void setAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, AttributeNotExistsException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, member, group, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, member, group, attribute, false)) {\n+   checkAttributeValue(sess, member, group, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(member, group, attribute));\n+  }\n+ }\n+\n+ public void setAttribute(PerunSession sess,\n+                          Resource resource,\n+                          Member member,\n+                          Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, resource, member, attribute);\n+   return;\n+  }\n+  if (!workWithUserAttributes) {\n+   if (setAttributeWithoutCheck(sess, resource, member, attribute, false)) {\n+    this.checkAttributeDependencies(sess, new RichAttribute(resource, member, attribute));\n+    checkAttributeValue(sess, resource, member, attribute);\n+   }\n+  } else {\n+   if (setAttributeWithoutCheck(sess, resource, member, attribute, true)) {\n+    List<Attribute> listOfAttributes = new ArrayList<Attribute>();\n+    listOfAttributes.add(attribute);\n+    checkAttributesValue(sess, resource, member, listOfAttributes, workWithUserAttributes);\n+    this.checkAttributesDependencies(sess, resource, member, listOfAttributes, workWithUserAttributes);\n+   }\n+  }\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+   //TODO better exception here\n+   try {\n+    changed = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+\n+   //FIXME update changed variable\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, facility, user, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, facility, user);\n+   getAttributesManagerImpl().changedAttributeHook(sess, facility, user, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess,\n+                                         Resource resource,\n+                                         Member member,\n+                                         Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+   //NS_MEMBER_RESOURCE_ATTR\n+   if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+    //TODO\n+    throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+   } else {\n+    changed = getAttributesManagerImpl().setAttribute(sess, resource, member, attribute);\n+    if (changed) {\n+     getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, resource, member);\n+     getAttributesManagerImpl().changedAttributeHook(sess, resource, member, attribute);\n+    }\n+   }\n+  } else if (workWithUserAttributes) {\n+   if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+    //NS_USER_FACILITY_ATTR\n+    User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+    Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+    if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+     changed = getAttributesManagerImpl().setVirtualAttribute(sess, facility, user, attribute);\n+    } else {\n+     changed = setAttributeWithoutCheck(sess, facility, user, attribute);\n+    }\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+    //NS_USER_ATTR\n+    User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+    if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+     //TODO\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute instead.\");\n+    } else {\n+     changed = setAttributeWithoutCheck(sess, user, attribute);\n+    }\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+           if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+            changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+           } else {\n+            changed = setAttributeWithoutCheck(sess, member, attribute);\n+           }\n+          } else {\n+           throw new WrongAttributeAssignmentException(attribute);\n+          }\n+  } else {\n+   throw new WrongAttributeAssignmentException(attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ @Override\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Member member, Group group, Attribute attribute, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+   if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+    changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, group, attribute);\n+   } else {\n+    changed = getAttributesManagerImpl().setAttribute(sess, member, group, attribute);\n+    if (changed) {\n+     getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, member, group);\n+     getAttributesManagerImpl().changedAttributeHook(sess, member, group, attribute);\n+    }\n+   }\n+  } else if (workWithUserAttributes) {\n+   if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+    User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+    if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+     changed = getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n+    } else {\n+     changed = setAttributeWithoutCheck(sess, user, attribute);\n+    }\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+    if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+     changed = getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+    } else {\n+     changed = setAttributeWithoutCheck(sess, member, attribute);\n+    }\n+   } else {\n+    throw new WrongAttributeAssignmentException(attribute);\n+   }\n+  } else {\n+   throw new WrongAttributeAssignmentException(attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, member, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, member, attribute)) {\n+   checkAttributeValue(sess, member, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(member, null, attribute));\n+  }\n+ }\n+\n+ public void setAttributeInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  setAttribute(sess, member, attribute);\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   //TODO better exception here\n+   try {\n+    return getAttributesManagerImpl().setVirtualAttribute(sess, member, attribute);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+\n+   //FIXME update \"changed\" variable\n+  } else if (isCoreAttribute(sess, attribute)) {\n+   //TODO better exception\n+   try {\n+    setCoreAttributeWithoutCheck(sess, member, attribute);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   } catch (WrongAttributeValueException ex) {\n+    throw new InternalErrorException(ex);\n+   }\n+   changed = true; //FIXME check if attribute is acctualy changed\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, member, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, member);\n+   getAttributesManagerImpl().changedAttributeHook(sess, member, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, facility, user, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, facility, user, attribute)) {\n+   checkAttributeValue(sess, facility, user, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(facility, user, attribute));\n+  }\n+ }\n+\n+ public void setAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, user, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, user, attribute)) {\n+   checkAttributeValue(sess, user, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(user, null, attribute));\n+  }\n+ }\n+\n+ public void setAttributeInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  setAttribute(sess, user, attribute);\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_USER_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   return getAttributesManagerImpl().setVirtualAttribute(sess, user, attribute);\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, user, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, user);\n+   getAttributesManagerImpl().changedAttributeHook(sess, user, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, host, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, host, attribute)) {\n+   checkAttributeValue(sess, host, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(host, null, attribute));\n+  }\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   //TODO\n+   throw new InternalErrorException(\"Virtual attribute \" + attribute + \" can't be set this way yet. Please set physical attribute.\");\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, host, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, host);\n+   //TODO this method not existed yet!\n+   //getAttributesManagerImpl().changedAttributeHook(sess, host, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, resource, group, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, resource, group, attribute)) {\n+   this.checkAttributeDependencies(sess, new RichAttribute(resource, group, attribute));\n+   checkAttributeValue(sess, resource, group, attribute);\n+  }\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   //FIXME Zatim je zakazane nastavovani virtualnich atributu group_resource\n+   Attribute storedAttribute;\n+   try {\n+    storedAttribute = getAttribute(sess, resource, group, attribute.getName());\n+   } catch (AttributeNotExistsException ex) {\n+    throw new ConsistencyErrorException(ex);\n+   }\n+   if (!(storedAttribute.getValue() == null ? attribute.getValue() == null : storedAttribute.getValue().equals(attribute.getValue()))) { //unless attribute and storedAttribute have equals value\n+    //FIXME\n+    if (attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGID\") || attribute.getName().equals(AttributesManager.NS_GROUP_RESOURCE_ATTR_VIRT + \":unixGroupName\")) {\n+     return getAttributesManagerImpl().setVirtualAttribute(sess, resource, group, attribute);\n+    } else {\n+     throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute. \" + attribute);\n+    }\n+   } else {\n+    return false;\n+   }\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, resource, group, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {} and {}.\", attribute, group, resource);\n+   getAttributesManagerImpl().changedAttributeHook(sess, resource, group, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   return getAttributesManagerImpl().setVirtualAttribute(sess, ues, attribute);\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, ues, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, ues);\n+   getAttributesManagerImpl().changedAttributeHook(sess, ues, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public boolean setAttributeWithoutCheck(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  if (isVirtAttribute(sess, attribute)) {\n+   //TODO\n+   throw new InternalErrorException(\"Virtual attribute can't be set this way yet. Please set physical attribute.\");\n+  } else {\n+   changed = getAttributesManagerImpl().setAttribute(sess, key, attribute);\n+  }\n+  if (changed) {\n+   getPerunBl().getAuditer().log(sess, \"{} set for {}.\", attribute, key);\n+   //TODO this method not existed yet\n+   //getAttributesManagerImpl().changedAttributeHook(sess, key, attribute);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void setAttribute(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, key, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, key, attribute)) {\n+   checkAttributeValue(sess, key, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(key, null, attribute));\n+  }\n+ }\n+\n+ public void setAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null) {\n+   removeAttribute(sess, ues, attribute);\n+   return;\n+  }\n+  if (setAttributeWithoutCheck(sess, ues, attribute)) {\n+   checkAttributeValue(sess, ues, attribute);\n+   this.checkAttributeDependencies(sess, new RichAttribute(ues, null, attribute));\n+  }\n+ }\n+\n+ public AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeDefinitionExistsException {\n+  Utils.notNull(attribute.getName(), \"attribute.getName\");\n+  Utils.notNull(attribute.getNamespace(), \"attribute.getNamespace\");\n+  Utils.notNull(attribute.getFriendlyName(), \"attribute.getFriendlyName\");\n+  Utils.notNull(attribute.getType(), \"attribute.getType\");\n+\n+  //check if attribute.nameSpace is valid nameSpace\n+  if (!isCorrectNameSpace(attribute.getNamespace())) {\n+   throw new InternalErrorException(\"Incorrect namespace \" + attribute.getNamespace());\n+  }\n+\n+  //check if attribute.type is valid class name\n+\n+  try {\n+   if (!attribute.getType().equals(BeansUtils.largeStringClassName) && !attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n+    Class.forName(attribute.getType());\n+   }\n+  } catch (ClassNotFoundException ex) {\n+   //TODO dat nejakou jinou vyjimku\n+   throw new InternalErrorException(\"Wrong attribute type\", ex);\n+  } catch (RuntimeException ex) {\n+   throw new InternalErrorException(ex);\n+  }\n+  getPerunBl().getAuditer().log(sess, \"{} created.\", attribute);\n+  return getAttributesManagerImpl().createAttribute(sess, attribute);\n+ }\n+\n+\n+ private boolean isCorrectNameSpace(String value) {\n+\n+  for (String entityType : AttributesManager.ENTITY_TYPES) {\n+   if (value.matches(\"urn:perun:\" + entityType + \":attribute-def:(def|opt|virt|core)\")) {\n+    return true;\n+   }\n+  }\n+\n+  return false;\n+ }\n+\n+ public void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+  //Remove services' required attributes\n+  //TODO\n+\n+  //Remove attribute and all it's values\n+  getPerunBl().getAuditer().log(sess, \"{} deleted.\", attribute);\n+  this.deleteAllAttributeAuthz(sess, attribute);\n+  getAttributesManagerImpl().deleteAttribute(sess, attribute);\n+ }\n+\n+ public void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException {\n+  getPerunBl().getAuditer().log(sess, \"All authorization information were deleted for {}.\", attribute);\n+  getAttributesManagerImpl().deleteAllAttributeAuthz(sess, attribute);\n+ }\n+\n+ public void deleteAttribute(PerunSession sess, AttributeDefinition attributeDefinition, boolean force) throws InternalErrorException {\n+  throw new InternalErrorException(\"Not implemented yet!\");\n+ }\n+\n+ public List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException {\n+  return getAttributesManagerImpl().getResourceRequiredAttributesDefinition(sess, resource);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return getResourceRequiredAttributes(sess, resourceToGetServicesFrom, resource, member, false);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n+  if (workWithUserAttributes) {\n+   User user;\n+   Facility facility;\n+   try {\n+    user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+    facility = getPerunBl().getFacilitiesManagerBl().getFacilityById(sess, resource.getFacilityId());\n+   } catch (UserNotExistsException e) {\n+    throw new ConsistencyErrorException(\"Member has non-existent user.\", e);\n+   } catch (FacilityNotExistsException e) {\n+    throw new ConsistencyErrorException(\"Resource has non-existent facility.\", e);\n+   }\n+   attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n+   attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+   attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ @Override\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess,\n+                                                      Resource resourceToGetServicesFrom,\n+                                                      Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return getResourceRequiredAttributes(sess, resourceToGetServicesFrom, member, group, false);\n+ }\n+\n+ @Override\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  List<Attribute> attributes = new ArrayList<>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member, group));\n+  if (workWithUserAttributes) {\n+   User user;\n+   try {\n+    user = getPerunBl().getUsersManagerBl().getUserById(sess, member.getUserId());\n+   } catch (UserNotExistsException e) {\n+    throw new ConsistencyErrorException(\"Member has non-existent user.\", e);\n+   }\n+   attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+   attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, List<Service> services, Resource resource) throws InternalErrorException {\n+  List<Integer> serviceIds = new ArrayList<>();\n+  for (Service service : services) {\n+   serviceIds.add(service.getId());\n+  }\n+\n+  return this.attributesManagerImpl.getRequiredAttributes(sess, resource, serviceIds);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource) throws InternalErrorException {\n+  return this.getResourceRequiredAttributes(sess, resource, resource);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return this.getResourceRequiredAttributes(sess, resource, resource, member);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return this.getResourceRequiredAttributes(sess, resource, resource, member, workWithUserAttributes);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException {\n+  List<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, facility, user);\n+  Set<Attribute> attributes = new HashSet<Attribute>();\n+  for (Resource resource : resources) {\n+   attributes.addAll(this.getResourceRequiredAttributes(sess, resource, facility, user));\n+  }\n+\n+  return new ArrayList<Attribute>(attributes);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, User user) throws InternalErrorException {\n+  List<Resource> resources = getPerunBl().getUsersManagerBl().getAssignedResources(sess, user);\n+  Set<Attribute> attributes = new HashSet<Attribute>();\n+  for (Resource resource : resources) {\n+   attributes.addAll(this.getResourceRequiredAttributes(sess, resource, user));\n+  }\n+\n+  return new ArrayList<Attribute>(attributes);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Member member, boolean workWithUserAttributes) throws InternalErrorException {\n+  List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, member);\n+  Set<Attribute> attributes = new HashSet<Attribute>();\n+  for (Resource resource : resources) {\n+   attributes.addAll(this.getResourceRequiredAttributes(sess, resource, member));\n+  }\n+  if (workWithUserAttributes) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   attributes.addAll(this.getRequiredAttributes(sess, user));\n+  }\n+\n+  return new ArrayList<Attribute>(attributes);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, member));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, facility, user));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, member);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, resource, group));\n+  if (workWithGroupAttributes) {\n+   attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, group));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, host);\n+ }\n+\n+ public List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributesDefinition(sess, service);\n+ }\n+\n+ public List<Attribute> getResourceRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, resourceToGetServicesFrom, user);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, facility);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, vo);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return getRequiredAttributes(sess, service, resource, member, false);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess,\n+                                              Service service,\n+                                              Resource resource,\n+                                              Member member, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  if (!workWithUserAttributes)\n+   return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member);\n+  User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+  Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+  return attributes;\n+ }\n+\n+ public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, List<Member> members, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  // check if members are from the same VO as resource\n+  if (members.isEmpty()) {\n+   return new HashMap<>();\n+  }\n+\n+  for (Member m : members) {\n+   this.checkMemberIsFromTheSameVoLikeResource(sess, m, resource);\n+  }\n+  if (!workWithUserAttributes) {\n+   HashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n+   HashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n+   for (Member mem : memberAttributes.keySet()) {\n+    if (!resourceMemberAttributes.containsKey(mem)) {\n+     resourceMemberAttributes.put(mem, memberAttributes.get(mem));\n+    } else {\n+     resourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n+    }\n+   }\n+\n+   return resourceMemberAttributes;\n+  }\n+\n+  // get list of users, save user id as a key and list of member objects as a value\n+  List<User> users = new ArrayList<>();\n+  HashMap<User, List<Member>> userMemberIdMap = new HashMap<>();\n+\n+  // Maps user ids to member objects and fills list of users\n+  for (Member m : members) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, m);\n+   users.add(user);\n+   if (userMemberIdMap.containsKey(user)) {\n+    userMemberIdMap.get(user).add(m);\n+   } else {\n+    userMemberIdMap.put(user, Arrays.asList(m));\n+   }\n+  }\n+\n+  // get facility if null\n+  if (facility == null) {\n+   facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+  }\n+\n+  // get 4 maps from Impl getRequiredAttributes\n+  HashMap<Member, List<Attribute>> resourceMemberAttributes = getRequiredAttributes(sess, service, resource, members);\n+  HashMap<Member, List<Attribute>> memberAttributes = getRequiredAttributes(sess, resource, service, members);\n+  HashMap<User, List<Attribute>> userFacilityAttributes = getRequiredAttributes(sess, service, facility, users);\n+  HashMap<User, List<Attribute>> userAttributes = getRequiredAttributes(sess, service, users);\n+  for (Member mem : memberAttributes.keySet()) {\n+   if (!resourceMemberAttributes.containsKey(mem)) {\n+    resourceMemberAttributes.put(mem, memberAttributes.get(mem));\n+   } else {\n+    resourceMemberAttributes.get(mem).addAll(memberAttributes.get(mem));\n+   }\n+  }\n+\n+  for (User user : userFacilityAttributes.keySet()) {\n+   // List of members for given user\n+   List<Member> mems = userMemberIdMap.get(user);\n+   for (Member mem : mems) {\n+    if (!resourceMemberAttributes.containsKey(mem)) {\n+     resourceMemberAttributes.put(mem, userFacilityAttributes.get(user));\n+    } else {\n+     resourceMemberAttributes.get(mem).addAll(userFacilityAttributes.get(user));\n+    }\n+   }\n+  }\n+\n+  for (User user : userAttributes.keySet()) {\n+   // List of members for given user\n+   List<Member> mems = userMemberIdMap.get(user);\n+   for (Member mem : mems) {\n+    if (!resourceMemberAttributes.containsKey(mem)) {\n+     resourceMemberAttributes.put(mem, userAttributes.get(user));\n+    } else {\n+     resourceMemberAttributes.get(mem).addAll(userAttributes.get(user));\n+    }\n+   }\n+  }\n+\n+  return resourceMemberAttributes;\n+ }\n+\n+ @Override\n+ public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n+  if (!members.isEmpty()) {\n+   return getRequiredAttributesForBulk(sess, service, resource, members);\n+  }\n+\n+  return new HashMap<>();\n+ }\n+\n+ @Override\n+ public HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n+  if (!members.isEmpty()) {\n+   return getRequiredAttributesForBulk(sess, resource, service, members);\n+  }\n+\n+  return new HashMap<>();\n+ }\n+\n+ @Override\n+ public HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n+  if (!users.isEmpty()) {\n+   return getRequiredAttributesForBulk(sess, service, facility, users);\n+  }\n+\n+  return new HashMap<>();\n+ }\n+\n+ @Override\n+ public HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n+  if (!users.isEmpty()) {\n+   return getRequiredAttributesForBulk(sess, service, users);\n+  }\n+\n+  return new HashMap<>();\n+ }\n+\n+ @Override\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n+ }\n+\n+ @Override\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group, boolean workWithUserAttributes) throws InternalErrorException {\n+  if (!workWithUserAttributes)\n+   return getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group);\n+  User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member, group));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, Resource resource, User user, Member member) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, member));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, member));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, user));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group, boolean withGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  if (!withGroupAttributes)\n+   return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n+  List<Attribute> attributes = new ArrayList<Attribute>();\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group));\n+  attributes.addAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, group));\n+  return attributes;\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, member);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, group);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, host);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, group);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, user);\n+ }\n+\n+ public List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException {\n+  return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, user);\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, resource, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, attribute));\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return fillAttributes(sess, resource, member, attributes, false);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  if (!workWithUserAttributes) {\n+   List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+   for (Attribute attribute : attributes) {\n+    getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+    if (attribute.getValue() == null) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n+    } else {\n+     //skip non-empty attribute\n+     filledAttributes.add(attribute);\n+    }\n+   }\n+\n+   return filledAttributes;\n+  }\n+  Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+  User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+            filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+            filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+\n+    //TODO and check it's namespace\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ @Override\n+ public Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, member, group, attribute);\n+ }\n+\n+ @Override\n+ public List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  return fillAttributes(sess, member, group, attributes, false);\n+ }\n+\n+ @Override\n+ public List<Attribute> fillAttributes(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  if (!workWithUserAttributes) {\n+   List<Attribute> filledAttributes = new ArrayList<>();\n+   for (Attribute attribute : attributes) {\n+    getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+    if (attribute.getValue() == null) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n+    } else {\n+     //skip non-empty attribute\n+     filledAttributes.add(attribute);\n+    }\n+   }\n+\n+   return filledAttributes;\n+  }\n+  User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+  List<Attribute> filledAttributes = new ArrayList<>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, group, attribute));\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+            filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute));\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+            filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+            filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, member, attribute));\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+\n+    //TODO and check it's namespace\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes, boolean returnOnlyAttributesWithChangedValue) throws InternalErrorException, WrongAttributeAssignmentException {\n+  if (!returnOnlyAttributesWithChangedValue) {\n+   return this.fillAttributes(sess, facility, resource, user, member, attributes);\n+  } else {\n+   List<Attribute> attributesWithChangedValue = new ArrayList<Attribute>();\n+   for (Attribute attribute : attributes) {\n+    if (attribute.getValue() == null) {\n+     Attribute a;\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+      a = getAttributesManagerImpl().fillAttribute(sess, resource, member, attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+      a = getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+             a = getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+             a = getAttributesManagerImpl().fillAttribute(sess, member, attribute);\n+            } else {\n+             throw new WrongAttributeAssignmentException(attribute);\n+            }\n+     if (a.getValue() != null) attributesWithChangedValue.add(a);\n+    }\n+   }\n+\n+   return attributesWithChangedValue;\n+  }\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  throw new InternalErrorException(\"Not implemented yet!\");\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  throw new InternalErrorException(\"Not implemented yet!\");\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, facility, user, attribute));\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, user, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, user, attribute));\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, host, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, host, attribute));\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, group, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Group group, List<Attribute> groupReqAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, groupReqAttributes, AttributesManager.NS_GROUP_ATTR);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : groupReqAttributes) {\n+   if (attribute.getValue() == null) {\n+    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  if (!workWithGroupAttributes) {\n+   return this.fillAttributes(sess, resource, group, attributes);\n+  }\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, NS_GROUP_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, group, attribute));\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+     filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, resource, group, attribute));\n+    }\n+   } else {\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+  return getAttributesManagerImpl().fillAttribute(sess, ues, attribute);\n+ }\n+\n+ public List<Attribute> fillAttributes(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+  List<Attribute> filledAttributes = new ArrayList<Attribute>();\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null) {\n+    filledAttributes.add(getAttributesManagerImpl().fillAttribute(sess, ues, attribute));\n+   } else {\n+    //skip non-empty attribute\n+    filledAttributes.add(attribute);\n+   }\n+  }\n+\n+  return filledAttributes;\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, facility, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_FACILITY_ATTR);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, attribute)) continue;\n+   checkAttributeValue(sess, facility, attribute);\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Vo vo, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, vo, attribute)) continue;\n+   getAttributesManagerImpl().checkAttributeValue(sess, vo, attribute);\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, group, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() != null || isTrulyRequiredAttribute(sess, group, attribute)) {\n+    getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+   }\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Resource resource, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, attribute)) continue;\n+   getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  checkAttributesValue(sess, resource, member, attributes, false);\n+ }\n+\n+ @Override\n+ public void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+ }\n+\n+ @Override\n+ public void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  checkAttributesValue(sess, member, group, attributes, false);\n+ }\n+\n+ @Override\n+ public void checkAttributesValue(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (!workWithUserAttributes) {\n+   getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n+   for (Attribute attribute : attributes) {\n+    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n+    getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+   }\n+  } else {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   for (Attribute attribute : attributes) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+     if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, group, attribute)) continue;\n+     getAttributesManagerImpl().checkAttributeValue(sess, member, group, attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+     if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n+     getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n+            getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   }\n+  }\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (!workWithUserAttributes) checkAttributesValue(sess, member, attributes);\n+  else {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   for (Attribute attribute : attributes) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+     if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n+     getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+     if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n+     getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+    } else {\n+     throw new WrongAttributeAssignmentException(attribute);\n+    }\n+   }\n+  }\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  if (!workWithUserAttributes) {\n+\n+   for (Attribute attribute : attributes) {\n+    getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n+    getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+   }\n+  } else {\n+   Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   for (Attribute attribute : attributes) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+     if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n+     getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+     if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n+     getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n+            getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+            if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n+            getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   }\n+  }\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  for (Attribute attribute : attributes) {\n+   if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, member, attribute)) continue;\n+    getAttributesManagerImpl().checkAttributeValue(sess, resource, member, attribute);\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+    if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n+    getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+           if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n+           getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+          } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+           if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n+           getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+          } else {\n+           throw new WrongAttributeAssignmentException(attribute);\n+          }\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, member, attribute)) continue;\n+   getAttributesManagerImpl().checkAttributeValue(sess, member, attribute);\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Facility facility, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, facility, user, attribute)) continue;\n+   getAttributesManagerImpl().checkAttributeValue(sess, facility, user, attribute);\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, resource, group, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+  for (Attribute attribute : attributes) {\n+   checkAttributeValue(sess, resource, group, attribute);\n+  }\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  if (!workWithGroupAttribute) {\n+   this.checkAttributesValue(sess, resource, group, attributes);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+    getAttributesManagerImpl().checkAttributeValue(sess, resource, group, attribute);\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n+    getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+   } else {\n+    throw new WrongAttributeAssignmentException(attribute);\n+   }\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+  if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute))\n+   return;\n+  getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getValue() == null && !isTrulyRequiredAttribute(sess, user, attribute)) continue;\n+   getAttributesManagerImpl().checkAttributeValue(sess, user, attribute);\n+  }\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, Host host, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_HOST_ATTR);\n+  for (Attribute attribute : attributes) {\n+   getAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+  getAttributesManagerImpl().checkAttributeValue(sess, host, attribute);\n+ }\n+\n+ public void checkAttributesValue(PerunSession sess, UserExtSource ues, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+  for (Attribute attribute : attributes) {\n+   getAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n+  }\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+  getAttributesManagerImpl().checkAttributeValue(sess, ues, attribute);\n+ }\n+\n+ public void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+  getAttributesManagerImpl().checkAttributeValue(sess, key, attribute);\n+ }\n+\n+ public void forceCheckAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR);\n+  getAttributesManagerImpl().checkAttributeValue(sess, group, attribute);\n+ }\n+\n+ public void forceCheckAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_RESOURCE_ATTR);\n+  getAttributesManagerImpl().checkAttributeValue(sess, resource, attribute);\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_ENTITYLESS_ATTR);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, key, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, key, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, key);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  this.attributesManagerImpl.removeAllMemberResourceAttributes(sess, resource);\n+  this.getPerunBl().getAuditer().log(sess, \"All non-virtual member-resource attributes removed for all members and {}\", resource);\n+ }\n+\n+ public void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  List<Group> groups = this.getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+  for (Group group : groups) {\n+   this.getPerunBl().getAttributesManagerBl().removeAllAttributes(sess, resource, group);\n+  }\n+\n+  this.attributesManagerImpl.removeAllGroupResourceAttributes(sess, resource);\n+  this.getPerunBl().getAuditer().log(sess, \"All non-virtual group-resource attributes removed for all groups and {}\", resource);\n+ }\n+\n+ public void removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, key, attribute)) {\n+   this.checkAttributeValue(sess, key, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(key, null, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_FACILITY_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, facility, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, facility);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, facility, attribute)) {\n+   this.checkAttributeValue(sess, facility, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(facility, null, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public void removeAttributes(PerunSession sess,\n+                              Member member,\n+                              boolean workWithUserAttributes, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (!workWithUserAttributes) {\n+   getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+   List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+   for (AttributeDefinition attribute : attributes) {\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     if (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n+    }\n+   }\n+\n+   this.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n+   this.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n+  } else {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+   for (AttributeDefinition attribute : attributes) {\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n+     } else {\n+      throw new WrongAttributeAssignmentException(attribute);\n+     }\n+    }\n+   }\n+\n+   this.checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck), true);\n+   this.checkAttributesDependencies(sess, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+  }\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Facility facility, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException, WrongAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributesDefinition, NS_FACILITY_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributesDefinition) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, facility, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+\n+  this.checkAttributesValue(sess, facility, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, facility, null, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Facility facility, Resource resource, User user, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+     if (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+     if (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+            if (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+            if (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n+           } else {\n+            throw new WrongAttributeAssignmentException(attribute);\n+           }\n+   }\n+  }\n+\n+  this.checkAttributesValue(sess, facility, resource, user, member, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, resource, member, user, facility, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, facility);\n+  getAttributesManagerImpl().removeAllAttributes(sess, facility);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", facility);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, facility, attributes);\n+   this.checkAttributesDependencies(sess, facility, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, facility, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Resource resource, Group group, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  removeAllAttributes(sess, resource, group);\n+  if (workWithGroupAttributes) {\n+   removeAllAttributes(sess, group);\n+  }\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Facility facility, boolean removeAlsoUserFacilityAttributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  removeAllAttributes(sess, facility);\n+  if (removeAlsoUserFacilityAttributes) {\n+   List<Attribute> userFacilityAttributes = getUserFacilityAttributesForAnyUser(sess, facility);\n+   getAttributesManagerImpl().removeAllUserFacilityAttributesForAnyUser(sess, facility);\n+   getPerunBl().getAuditer().log(sess, \"All user-facility attributes removed for {} for any user.\", facility);\n+   for (Attribute attribute : userFacilityAttributes)\n+   attribute.setValue(null);\n+   List<User> facilityUsers = perunBl.getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+   for (User user : facilityUsers) {\n+    try {\n+     checkAttributesValue(sess, facility, user, userFacilityAttributes);\n+     this.checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+    } catch (WrongAttributeAssignmentException ex) {\n+     throw new ConsistencyErrorException(ex);\n+    }\n+\n+    for (Attribute attribute : userFacilityAttributes) {\n+     try {\n+      getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+     } catch (WrongAttributeValueException ex) {\n+      //TODO better exception here\n+      throw new InternalErrorException(ex);\n+     } catch (WrongReferenceAttributeValueException ex) {\n+      //TODO better exception here\n+      throw new InternalErrorException(ex);\n+     }\n+    }\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, host, attribute)) {\n+   checkAttributeValue(sess, host, new Attribute(attribute));\n+\n+   try {\n+    this.checkAttributeDependencies(sess, new RichAttribute(host, null, new Attribute(attribute)));\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    throw new WrongAttributeValueException(ex);\n+   }\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_HOST_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, host, attribute);\n+  if (changed) {\n+   //TODO HOOK FOR HOSTS!\n+   /*try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n+    } catch (WrongAttributeValueException ex) {\n+   //TODO better exception here\n+   throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+   //TODO better exception here\n+   throw new InternalErrorException(ex);\n+   }*/\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, host);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Host host, List<? extends AttributeDefinition> attributesDefinition) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributesDefinition, AttributesManager.NS_HOST_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributesDefinition) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, host, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+\n+  this.checkAttributesValue(sess, host, attributesFromDefinitions(attributesToCheck));\n+\n+  try {\n+   this.checkAttributesDependencies(sess, host, null, attributesFromDefinitions(attributesToCheck));\n+  } catch (WrongReferenceAttributeValueException ex) {\n+   throw new WrongAttributeValueException(ex);\n+  }\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException, WrongAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, host);\n+  getAttributesManagerImpl().removeAllAttributes(sess, host);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", host);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, host, attributes);\n+   this.checkAttributesDependencies(sess, host, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  } catch (WrongReferenceAttributeValueException ex) {\n+   throw new WrongAttributeValueException(ex);\n+  }\n+\n+  //TODO HOOK FOR HOSTS\n+  /*\n+    for(Attribute attribute: attributes) {\n+    try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, host, new Attribute(attribute));\n+    } catch (WrongAttributeValueException ex) {\n+  //TODO better exception here\n+  throw new InternalErrorException(ex);\n+  } catch (WrongReferenceAttributeValueException ex) {\n+  //TODO better exception here\n+  throw new InternalErrorException(ex);\n+  }\n+  }*/\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, vo, attribute)) {\n+   checkAttributeValue(sess, vo, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(vo, null, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_VO_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, vo, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, vo);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Vo vo, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_VO_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, vo, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, vo, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, vo, null, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, vo);\n+  getAttributesManagerImpl().removeAllAttributes(sess, vo);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", vo);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, vo, attributes);\n+   this.checkAttributesDependencies(sess, vo, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, vo, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, group, attribute)) {\n+   checkAttributeValue(sess, group, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(group, null, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_GROUP_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, group, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, group);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_GROUP_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, group, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, group, null, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, group);\n+  getAttributesManagerImpl().removeAllAttributes(sess, group);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", group);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, group, attributes);\n+   this.checkAttributesDependencies(sess, group, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, group, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+\n+                                                                                                                                                                                                                                            boolean changed = removeAttributeWithoutCheck(sess, resource, attribute);\n+                                                                                                                                                                                                                                            if (changed) {\n+                                                                                                                                                                                                                                             checkAttributeValue(sess, resource, new Attribute(attribute));\n+                                                                                                                                                                                                                                             this.checkAttributeDependencies(sess, new RichAttribute(resource, null, new Attribute(attribute)));\n+                                                                                                                                                                                                                                            }\n+\n+                                                                                                                                                                                                                                            return changed;\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_RESOURCE_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = true;\n+  try {\n+   if (this.isVirtAttribute(sess, attribute)) {\n+    changed = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n+   } else {\n+    changed = getAttributesManagerImpl().removeAttribute(sess, resource, attribute);\n+   }\n+   if (changed) getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n+  } catch (WrongAttributeValueException ex) {\n+   //TODO better exception here\n+   throw new InternalErrorException(ex);\n+  } catch (WrongReferenceAttributeValueException ex) {\n+   //TODO better exception here\n+   throw new InternalErrorException(ex);\n+  }\n+  if (changed) getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, resource);\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Resource resource, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_RESOURCE_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   //skip core attributes\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, resource, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, resource, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, resource, null, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, resource);\n+  getAttributesManagerImpl().removeAllAttributes(sess, resource);\n+\n+  //remove all virtual attributes\n+  /*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n+   getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n+   }*/\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", resource);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, resource, attributes);\n+   this.checkAttributesDependencies(sess, resource, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, resource, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, resource, member, attribute)) {\n+   checkAttributeValue(sess, resource, member, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(resource, member, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_RESOURCE_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, resource, member, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, resource, member);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_RESOURCE_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Resource resource, Member member, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (!(workWithUserAttributes)) {\n+   removeAttributes(sess, resource, member, attributes);\n+  } else {\n+   List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+   for (AttributeDefinition attribute : attributes) {\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+     User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_RESOURCE_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, resource, member, attribute)) attributesToCheck.add(attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_FACILITY_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+             if (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n+            } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+             if (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n+            } else {\n+             throw new WrongAttributeAssignmentException(attribute);\n+            }\n+    }\n+   }\n+   checkAttributesValue(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+   this.checkAttributesDependencies(sess, resource, member, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+  }\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  List<Attribute> attributes = getAttributes(sess, resource, member);\n+  getAttributesManagerImpl().removeAllAttributes(sess, resource, member);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", resource, member);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, resource, member, attributes);\n+   checkAttributesValue(sess, resource, member, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, resource, member, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ @Override\n+ public void removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, member, group, attribute)) {\n+   checkAttributeValue(sess, member, group, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(member, group, new Attribute(attribute)));\n+  }\n+ }\n // s workWithUserAttr.\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, member, group, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, member, group);\n-\t\t}\n-\n-\t\treturn changed;\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tremoveAttributes(sess, member, group, attributes, false);\n-\t}\n-\n-\t@Override\n-\tpublic void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithUserAttributes) {\n-\t\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck));\n-\t\t\tthis.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck));\n-\t\t} else {\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, member, group);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, member, group);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", member, group);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, member, group, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) {\n-\t\t\tcheckAttributeValue(sess, member, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(member, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n-\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, member, attribute);\n-\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tif (changed) getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, member);\n-\t\t}\n-\n-\t\treturn changed;\n-\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, member);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, member);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", member);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, member, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, member, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, facility, user, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(facility, user, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = false;\n-\n-\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n-\t\t} else {\n-\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, facility, user, attribute);\n-\t\t}\n-\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, facility, user);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Facility facility, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif(getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n-\t\t\t\t\tif (getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t} else {\n-\t\t\t\t\tif (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, facility, user);\n-\t\t//remove all non-virtual attributes\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, facility, user);\n-\n-\t\t//remove all virtual attributes\n-\t\tList<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n-\t\tfor(Attribute attribute : virtualAttributes) {\n-\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n-\t\t}\n-\t\tattributes.addAll(virtualAttributes);\n-\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", facility, user);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, facility, user, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, facility, user, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\n-\t\tList<RichAttribute<User, Facility>> userFacilitiesAttributes = getAttributesManagerImpl().getAllUserFacilityRichAttributes(sess, user);\n-\n-\t\t//remove all non-virtual attributes\n-\t\tgetAttributesManagerImpl().removeAllUserFacilityAttributes(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All non-virtual user-facility attributes removed for all facilities and {}\", user);\n-\n-\t\tfor(RichAttribute<User, Facility> richAttribute : userFacilitiesAttributes) {\n-\t\t\ttry {\n-\t\t\t\tcheckAttributeValue(sess, richAttribute.getSecondaryHolder(), richAttribute.getPrimaryHolder(), new Attribute(richAttribute.getAttribute()));\n-\t\t\t\tthis.checkAttributeDependencies(sess, richAttribute);\n-\t\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t\tfor(RichAttribute<User, Facility> attribute: userFacilitiesAttributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, attribute.getSecondaryHolder(), attribute.getPrimaryHolder(),  new Attribute(attribute.getAttribute()));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) {\n-\t\t\tcheckAttributeValue(sess, user, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(user, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n-\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, user, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, user);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, user, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, user, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, user);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, user);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", user);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, user, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, user, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n-\t\t\tcheckAttributeValue(sess, resource, group, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(resource, group, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tboolean changed = false;\n-\t\ttry {\n-\t\t\tif (this.isVirtAttribute(sess, attribute)) {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, group, attribute);\n-\t\t\t} else {\n-\t\t\t\tchanged = getAttributesManagerImpl().removeAttribute(sess, resource, group, attribute);\n-\t\t\t}\n-\n-\t\t\tif (changed) getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n-\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t//TODO better exception here\n-\t\t\tthrow new InternalErrorException(ex);\n-\t\t}\n-\t\tif (changed) getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, group, resource);\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t//getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) attributesToCheck.add(attribute);\n-\t\t}\n-\t\tcheckAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (!workWithGroupAttributes) {\n-\t\t\tremoveAttributes(sess, resource, group, attributes);\n-\t\t} else {\n-\n-\t\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\t\tfor (AttributeDefinition attribute : attributes) {\n-\t\t\t\t//skip core attributes\n-\t\t\t\tif (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\n-\t\t\t\t\tif (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, resource, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\t\t\t\tif (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tthrow new WrongAttributeAssignmentException(attribute);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t}\n-\t\t\tcheckAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n-\t\t}\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tList<Attribute> attributes = getAttributes(sess, resource, group);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, resource, group);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", group, resource);\n-\n-\t\t//remove all virtual attributes\n-\t\t/*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n-\t\t\tgetAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n-\t\t\t}*/\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, resource, group, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, resource, group, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tif (removeAttributeWithoutCheck(sess, ues, attribute)) {\n-\t\t\tcheckAttributeValue(sess, ues, new Attribute(attribute));\n-\t\t\tthis.checkAttributeDependencies(sess, new RichAttribute(ues, null, new Attribute(attribute)));\n-\t\t}\n-\t}\n-\n-\tpublic boolean removeAttributeWithoutCheck(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n-\n-\t\tif(getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n-\n-\t\tboolean changed = getAttributesManagerImpl().removeAttribute(sess, ues, attribute);\n-\t\tif (changed) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, ues);\n-\t\t}\n-\t\treturn changed;\n-\t}\n-\n-\tpublic void removeAttributes(PerunSession sess, UserExtSource ues, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n-\t\tList<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n-\t\tfor(AttributeDefinition attribute : attributes) {\n-\t\t\tif(!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n-\t\t\t\tif (removeAttributeWithoutCheck(sess, ues, attribute)) attributesToCheck.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesValue(sess, ues, attributesFromDefinitions(attributesToCheck));\n-\t\tthis.checkAttributesDependencies(sess, ues, null, attributesFromDefinitions(attributesToCheck));\n-\t}\n-\n-\tpublic void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> attributes = getAttributes(sess, ues);\n-\t\tgetAttributesManagerImpl().removeAllAttributes(sess, ues);\n-\t\tgetPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", ues);\n-\n-\t\tfor(Attribute attribute : attributes) attribute.setValue(null);\n-\t\ttry {\n-\t\t\tcheckAttributesValue(sess, ues, attributes);\n-\t\t\tthis.checkAttributesDependencies(sess, ues, null, attributes);\n-\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n-\n-\t\tfor(Attribute attribute: attributes) {\n-\t\t\ttry {\n-\t\t\t\tgetAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n-\t\t\t} catch (WrongAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t} catch (WrongReferenceAttributeValueException ex) {\n-\t\t\t\t//TODO better exception here\n-\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkActionTypeExists(sess, actionType);\n-\t}\n-\n-\tpublic void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkAttributeExists(sess, attribute);\n-\t}\n-\n-\tpublic void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException {\n-\t\tgetAttributesManagerImpl().checkAttributesExists(sess, attributes);\n-\t}\n-\n-\tpublic boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isDefAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isOptAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isCoreAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isCoreManagedAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute) {\n-\t\treturn getAttributesManagerImpl().isVirtAttribute(sess, attribute);\n-\t}\n-\n-\tpublic boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) {\n-\t\treturn getAttributesManagerImpl().isFromNamespace(sess, attribute, namespace);\n-\t}\n-\n-\tpublic void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attribute, namespace);\n-\t}\n-\n-\tpublic void checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException {\n-\t\tgetAttributesManagerImpl().checkNamespace(sess, attributes, namespace);\n-\t}\n-\n-\tpublic String getNamespaceFromAttributeName(String attributeName) {\n-\t\treturn attributeName.replaceFirst(\"(urn:perun:[^:]+:attribute-def:[^:]+):.*\", \"$1\");\n-\t}\n-\n-\tpublic String getFriendlyNameFromAttributeName(String attributeName) {\n-\t\treturn attributeName.replaceFirst(\"urn:perun:[^:]+:attribute-def:[^:]+:\", \"\");\n-\t}\n-\n-\tpublic List<Attribute> getLogins(PerunSession sess, User user) throws InternalErrorException {\n-\t\tList<Attribute> usersAttributes = this.getAttributes(sess, user);  //Get all non-empty user's attributes\n-\t\tIterator<Attribute> it = usersAttributes.iterator();\n-\t\twhile (it.hasNext()) {\n-\t\t\tif(!it.next().getFriendlyName().startsWith(\"login-namespace:\")) it.remove();\n-\t\t}\n-\t\treturn usersAttributes;\n-\t}\n-\n-\tpublic List<Object> getAllValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tif(isCoreAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition)) throw new WrongAttributeAssignmentException(attributeDefinition);\n-\n-\t\tif(isFromNamespace(sess, attributeDefinition, AttributesManager.NS_RESOURCE_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllResourceValues(sess, attributeDefinition);\n-\t\t} else if(isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllGroupResourceValues(sess, attributeDefinition);\n-\t\t} else if(isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_ATTR)) {\n-\t\t\treturn getAttributesManagerImpl().getAllGroupValues(sess, attributeDefinition);\n-\t\t} else {\n-\t\t\t//TODO\n-\t\t\tthrow new InternalErrorException(\"Not implemented yet!\");\n-\t\t}\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_FACILITY_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_VO_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByVo(sess, vo, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_GROUP_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByGroup(sess, group, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_RESOURCE_ATTR);\n-\t\treturn getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_ATTR);\n-\t\tList<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\tfor(Resource resource : allowedResources) {\n-\t\t\tif(getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_USER_ATTR);\n-\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\tfor(Member member : members) {\n-\t\t\tList<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\tfor(Resource resource : allowedResources) {\n-\t\t\t\tif(getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_USER_FACILITY_ATTR);\n-\t\tList<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\tif(!allowedFacilities.contains(facility)) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\tif(!getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition)) return false;\n-\t\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\tresources.retainAll(getPerunBl().getUsersManagerBl().getAllowedResources(sess, user));\n-\t\t\tfor(Resource resource : resources) {\n-\t\t\t\tif(getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t\t}\n-\t\t\treturn false;\n-\t\t}\n-\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_RESOURCE_ATTR);\n-\t\tList<Member> allowedMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\tif(!allowedMembers.contains(member)) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\treturn getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t\t}\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_MEMBER_GROUP_ATTR);\n-\t\tList<Resource> assignedResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\tfor (Resource resource : assignedResources) {\n-\t\t\tif (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition)) return true;\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n-\t\tthis.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n-\t\tthis.checkNamespace(sess, attributeDefinition, NS_GROUP_RESOURCE_ATTR);\n-\t\tList<Group> assignedGroups = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\tif(!assignedGroups.contains(group)) {\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\treturn getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n-\t\t}\n-\t}\n-\n-\tpublic Object stringToAttributeValue(String value, String type) throws InternalErrorException {\n-\t\tif (type.equals(ArrayList.class.getName()) || type.equals(LinkedHashMap.class.getName()) ||\n-\t\t\t\ttype.equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\tif (value != null && !value.isEmpty() && !value.endsWith(String.valueOf(AttributesManagerImpl.LIST_DELIMITER))) {\n-\t\t\t\tvalue = value.concat(String.valueOf(AttributesManagerImpl.LIST_DELIMITER));\n-\t\t\t}\n-\t\t}\n-\t\treturn BeansUtils.stringToAttributeValue(value, type);\n-\t}\n-\n-\tpublic static String escapeListAttributeValue(String value) {\n-\t\treturn AttributesManagerImpl.escapeListAttributeValue(value);\n-\t}\n-\n-\tpublic static String escapeMapAttributeValue(String value) {\n-\t\treturn AttributesManagerImpl.escapeMapAttributeValue(value);\n-\t}\n-\n-\tpublic void doTheMagic(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tdoTheMagic(sess, member, false);\n-\t}\n-\n-\tpublic void doTheMagic(PerunSession sess, Member member, boolean trueMagic) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\tfor(Resource resource : resources) {\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tList<Attribute> requiredAttributes = getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n-\t\t\tboolean allOk = false;\n-\t\t\tAttributeDefinition lastWrongAttribute = null;\n-\t\t\tint safetyCounter = 0;\n-\t\t\tdo {\n-\t\t\t\ttry {\n-\t\t\t\t\tsetRequiredAttributes(sess, facility, resource, user, member, requiredAttributes);\n-\t\t\t\t\tallOk = true;\n-\t\t\t\t} catch(AttributeNotExistsException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t} catch(WrongAttributeAssignmentException ex) {\n-\t\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t\t} catch(WrongAttributeValueException ex) {\n-\t\t\t\t\tif(!trueMagic) throw ex;\n-\t\t\t\t\tAttributeDefinition wrongAttributeDefinition = ex.getAttribute();\n-\t\t\t\t\tif(wrongAttributeDefinition == null) throw new ConsistencyErrorException(\"WrongAttributeValueException doesn't have set the wrong attribute.\", ex);\n-\t\t\t\t\tif(wrongAttributeDefinition.equals(lastWrongAttribute)) throw new WrongAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n-\t\t\t\t\tlastWrongAttribute = wrongAttributeDefinition;\n-\t\t\t\t\tfindAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null);\n-\t\t\t\t} catch(WrongReferenceAttributeValueException ex) {\n-\t\t\t\t\tif(!trueMagic) throw ex;\n-\t\t\t\t\tAttributeDefinition wrongAttributeDefinition = ex.getReferenceAttribute();\n-\t\t\t\t\tif(wrongAttributeDefinition == null) throw new ConsistencyErrorException(\"WrongReferenceAttributeValueException doesn't have set reference attribute.\", ex);\n-\t\t\t\t\tif(wrongAttributeDefinition.equals(lastWrongAttribute)) throw new WrongReferenceAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n-\t\t\t\t\tlastWrongAttribute = wrongAttributeDefinition;\n-\t\t\t\t\tif(!findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null)) {\n-\t\t\t\t\t\t//this attribute can't be fixed here\n-\t\t\t\t\t\tthrow ex;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tsafetyCounter++;\n-\t\t\t\tif(safetyCounter == 50) throw new InternalErrorException(\"Method doTheMagic possibly stays in infinite loop.\");\n-\t\t\t} while(trueMagic && !allOk);\n-\t\t}\n-\t}\n-\n-\tpublic void mergeAttributesValues(PerunSession sess, User user, List<Attribute> attributes)  throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tfor (Attribute attribute: attributes) {\n-\t\t\tthis.mergeAttributeValue(sess, user, attribute);\n-\t\t}\n-\t}\n-\n-\tpublic void mergeAttributesValues(PerunSession sess, Member member, List<Attribute> attributes)  throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tfor (Attribute attribute: attributes) {\n-\t\t\tthis.mergeAttributeValue(sess, member, attribute);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Merges attribute value for supported attribute's namespaces if the attribute type is list or map. In other cases it only stores new value.\n-\t *\n-\t * If attribute has null value or it's value is same as value of attribute already stored in Perun, return stored attribute instead.\n-\t * If the type is list, new values are added to the current stored list.\n-\t * It the type is map, new values are added and existing are overwritten with new values, but only if there is any change.\n-\t *\n-\t * Supported namespaces\n-\t *  - user attributes\n-\t *  - member attributes\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute to merge it's value if possible\n-\t * @param primaryHolder holder defines object for which is attribute stored in Perun\n-\t *\n-\t * @return attribute after merging his value\n-\t *\n-\t * @throws InternalErrorException if one of mandatory objects is null or some internal problem has occured\n-\t * @throws WrongAttributeValueException attribute value of set attribute is not correct\n-\t * @throws WrongReferenceAttributeValueException any reference attribute value is not correct\n-\t * @throws WrongAttributeAssignmentException if attribute is not from the same namespace defined by primaryHolder\n-\t */\n-\tprivate Attribute mergeAttributeValue(PerunSession sess, Attribute attribute, PerunBean primaryHolder) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\t//If attribute is null, throw an exception\n-\t\tif(attribute == null) throw new InternalErrorException(\"Can't merge null attribute with anything!\");\n-\t\tif(primaryHolder == null) throw new InternalErrorException(\"Can't merge attribute value without notNull primaryHolder!\");\n-\n-\t\t//Get stored attribute in Perun\n-\t\tAttribute storedAttribute = null;\n-\t\ttry {\n-\t\t\tif(primaryHolder instanceof User) {\n-\t\t\t\tstoredAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (User) primaryHolder, attribute.getName());\n-\t\t\t} else if(primaryHolder instanceof Member) {\n-\t\t\t\tstoredAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (Member) primaryHolder, attribute.getName());\n-\t\t\t} else {\n-\t\t\t\tthrow new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException e) {\n-\t\t\tthrow new ConsistencyErrorException(e);\n-\t\t}\n-\n-\t\t//if attribute to merge has null value or it's value is same as stored attribute's value, return the stored attribute\n-\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\tif(attribute.getValue() == null || Objects.equals(attribute.getValue(), storedAttribute.getValue())) return storedAttribute;\n-\n-\t\t// Check type ArrayList\n-\t\tif (attribute.getType().equals(ArrayList.class.getName()) || attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n-\t\t\tArrayList<String> updatedList = (ArrayList<String>) storedAttribute.getValue();\n-\t\t\t// If there were someting then find values which haven't been already stored\n-\t\t\tif (updatedList != null) {\n-\t\t\t\tfor (String value : ((ArrayList<String>) attribute.getValue())) {\n-\t\t\t\t\tif (!updatedList.contains(value)) {\n-\t\t\t\t\t\tupdatedList.add(value);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tattribute.setValue(updatedList);\n-\t\t\t}\n-\t\t// Check type LinkedHashMap\n-\t\t} else if (attribute.getType().equals(LinkedHashMap.class.getName())) {\n-\t\t\t//Find values which haven't been already stored\n-\t\t\tLinkedHashMap<String, String> updatedMap = (LinkedHashMap<String, String>) storedAttribute.getValue();\n-\t\t\tif (updatedMap != null) {\n-\t\t\t\tLinkedHashMap<String, String> receivedMap = (LinkedHashMap<String, String>) attribute.getValue();\n-\t\t\t\tupdatedMap.putAll(receivedMap);\n-\t\t\t\tattribute.setValue(updatedMap);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Other types as String, Integer, Boolean etc. will be replaced by new value (no way how to merge them properly)\n-\t\tif(primaryHolder instanceof User) {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, (User) primaryHolder, attribute);\n-\t\t} else if(primaryHolder instanceof Member) {\n-\t\t\tgetPerunBl().getAttributesManagerBl().setAttribute(sess, (Member) primaryHolder, attribute);\n-\t\t}  else {\n-\t\t\tthrow new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n-\t\t}\n-\n-\t\treturn attribute;\n-\t}\n-\n-\tpublic Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\t\t WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn this.mergeAttributeValue(sess, attribute, user);\n-\t}\n-\n-\tpublic Attribute mergeAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn this.mergeAttributeValue(sess, attribute, member);\n-\t}\n-\n-\tpublic Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn mergeAttributeValue(sess, user, attribute);\n-\t}\n-\n-\tpublic Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\treturn mergeAttributeValue(sess, member, attribute);\n-\t}\n-\n-\tprivate boolean findAndSetValueInList(List<Attribute> attributes, AttributeDefinition attributeDefinition, Object value) {\n-\t\tfor(Attribute attribute : attributes) {\n-\t\t\tif(attribute.getId() == attributeDefinition.getId()) {\n-\t\t\t\tattribute.setValue(value);\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException {\n-\t\tgetPerunBl().getAuditer().log(perunSession, \"{} updated.\", attributeDefinition);\n-\t\treturn getAttributesManagerImpl().updateAttributeDefinition(perunSession, attributeDefinition);\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithGroupAttributes) {\n-\t\t\tList<Attribute> groupAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> groupResourceAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\tgroupResourceAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_ATTR)) {\n-\t\t\t\t\tgroupAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, resource, group, groupResourceAttributes);\n-\t\t\tcheckAttributesDependencies(sess, group, null, groupAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, resource, group, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, member, null, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, User user, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n-\t\tList<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n-\t\tfor(Attribute attr: attributes) {\n-\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\tuserAttributes.add(attr);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\tmemberResourceAttributes.add(attr);\n-\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n-\t\t\t\tuserFacilityAttributes.add(attr);\n-\t\t\t} else {\n-\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t}\n-\t\t}\n-\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\tcheckAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\tcheckAttributesDependencies(sess, resource, member, memberResourceAttributes);\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tFacility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\tmemberResourceAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\tuserFacilityAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t\tcheckAttributesDependencies(sess, facility, user, userFacilityAttributes);\n-\t\t\tcheckAttributesDependencies(sess, resource, member, memberResourceAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, resource, member, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(workWithUserAttributes) {\n-\t\t\tUser user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\t\tList<Attribute> memberGroupAttributes = new ArrayList<Attribute>();\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n-\t\t\t\t\tuserAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n-\t\t\t\t\tmemberAttributes.add(attr);\n-\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\tmemberGroupAttributes.add(attr);\n-\t\t\t\t} else {\n-\t\t\t\t\tthrow new WrongAttributeAssignmentException(attr);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcheckAttributesDependencies(sess, member, null, memberAttributes);\n-\t\t\tcheckAttributesDependencies(sess, user, null, userAttributes);\n-\t\t\tcheckAttributesDependencies(sess, member, group, memberGroupAttributes);\n-\t\t} else {\n-\t\t\tcheckAttributesDependencies(sess, member, group, attributes);\n-\t\t}\n-\t}\n-\n-\tprivate void checkAttributesDependencies(PerunSession sess, Object primaryHolder, Object secondaryHolder, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(attributes != null && !attributes.isEmpty()) {\n-\t\t\tfor(Attribute attr: attributes) {\n-\t\t\t\tcheckAttributeDependencies(sess, new RichAttribute(primaryHolder, secondaryHolder, attr));\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic void checkAttributeDependencies(PerunSession sess, RichAttribute richAttr) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n-\t\tif(getAllDependencies() == null || getAllDependencies().isEmpty()) log.error(\"Map of all dependencies is empty. If this is not test, its an error probably.\");\n-\t\tif(richAttr == null || richAttr.getAttribute() == null) throw new InternalErrorException(\"RichAttribute or Attribute in it can't be null!\");\n-\t\telse {\n-\t\t\t//Get All attributeDef which are dependencies\n-\t\t\tSet<AttributeDefinition> dependencies = getAllDependencies().get(new AttributeDefinition(richAttr.getAttribute()));\n-\t\t\tif(dependencies != null && !dependencies.isEmpty() ) {\n-\t\t\t\tfor(AttributeDefinition dependency: dependencies) {\n-\t\t\t\t\tList<RichAttribute> richAttributesToCheck;\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trichAttributesToCheck = getRichAttributesWithHoldersForAttributeDefinition(sess, dependency, richAttr);\n-\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t//TODO better exception here (need to implement to all setMethods)\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t} catch (VoNotExistsException ex) {\n-\t\t\t\t\t\t//TODO better exception here (need to implement to all setMethods)\n-\t\t\t\t\t\tthrow new InternalErrorException(ex);\n-\t\t\t\t\t}\n-\t\t\t\t\tfor(RichAttribute richAttribute: richAttributesToCheck) {\n-\t\t\t\t\t\tif(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_VO_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Vo) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for VO Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Vo) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For VO Attribute there must be VO in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Group Attribute there must be Group in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member Attribute there must be Member in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for User Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For User Attribute there must be User in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Resource Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Resource Attribute there must be Resource in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_FACILITY_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Facility Attribute there must be Facility in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_ENTITYLESS_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof String) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Entityless Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (String) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Entityless Attribute there must be String in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_HOST_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Host) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null) {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Host Attribute must be null!\");\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Host) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Host Attribute there must be Host in primaryHolder\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Group_Resource Attribute there must be Group or Resource in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), (Member) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Resource) richAttribute.getSecondaryHolder(), (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member_Resource Attribute there must be Member or Resource in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_GROUP_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getSecondaryHolder(), (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), (Group) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Member_Group Attribute there must be Member or Group in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_FACILITY_ATTR)) {\n-\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), (User) richAttribute.getSecondaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else if(richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Facility) {\n-\t\t\t\t\t\t\t\tif(richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n-\t\t\t\t\t\t\t\t\tthis.checkAttributeValue(sess, (Facility) richAttribute.getSecondaryHolder(), (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\tthrow new InternalErrorException(\"For Facility_User Attribute there must be Facility or User in primaryHolder.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic List<RichAttribute> getRichAttributesWithHoldersForAttributeDefinition(PerunSession sess, AttributeDefinition attrDef, RichAttribute aidingAttr) throws InternalErrorException, AttributeNotExistsException, VoNotExistsException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n-\t\t//Filling objects from aidingAttr\n-\t\tif(aidingAttr == null) throw new InternalErrorException(\"Aiding attribute cant be null.\");\n-\t\tif(attrDef == null) throw new InternalErrorException(\"attrDef cant be null.\");\n-\n-\t\tList<RichAttribute> listOfRichAttributes = new ArrayList<RichAttribute>();\n-\n-\t\t//All possible useful objects\n-\t\tVo vo = null;\n-\t\tFacility facility = null;\n-\t\tGroup group = null;\n-\t\tMember member = null;\n-\t\tUser user = null;\n-\t\tHost host = null;\n-\t\tResource resource = null;\n-\t\tString key = null;\n-\t\tAttribute attribute = null;\n-\n-\t\t//Get object for primaryHolder of aidingAttr\n-\t\tif(aidingAttr.getPrimaryHolder() != null) {\n-\t\t\tif(aidingAttr.getPrimaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Facility) facility = (Facility) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Group) group = (Group) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Member) member = (Member) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof User) user = (User) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Host) host = (Host) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof Resource) resource = (Resource) aidingAttr.getPrimaryHolder();\n-\t\t\telse if(aidingAttr.getPrimaryHolder() instanceof String) key = (String) aidingAttr.getPrimaryHolder();\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"Aiding attribute must have primaryHolder which is not null.\");\n-\t\t}\n-\n-\t\t//Get object for secondaryHolder of aidingAttr\n-\t\tif(aidingAttr.getSecondaryHolder() != null) {\n-\t\t\tif(aidingAttr.getSecondaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Facility) facility = (Facility) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Group) group = (Group) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Member) member = (Member) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof User) user = (User) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Host) host = (Host) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof Resource) resource = (Resource) aidingAttr.getSecondaryHolder();\n-\t\t\telse if(aidingAttr.getSecondaryHolder() instanceof String) key = (String) aidingAttr.getSecondaryHolder();\n-\t\t\telse {\n-\t\t\t\tthrow new InternalErrorException(\"There is unrecognized object in secondaryHolder of aidingAttr\");\n-\t\t\t}\n-\t\t} // If not, its ok, secondary holder can be null\n-\n-\t\t//First i choose what i am looking for by descriptionAttr\n-\t\t//IMPORTANT: If member is Invalid, all objects bind to him are not accept\n-\n-\t\t//!!! PROJIT VSECHNY DOTAZY A POUZIT JAKO KLICOVOU VRSTVU KDE TO JDE VRSTVU S MEMBERY PODLE VALIDITY !!!\n-\n-\t\tif(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_VO_ATTR)) {\n-\t\t\t//Second on the fact what i really have in aidingAttr i try to find what i am looking for\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Vo> vosFromUser = new ArrayList<Vo>();\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\tfor (Resource resourceElement : resourcesFromUser) {\n-\t\t\t\t\tvosFromUser.add(getPerunBl().getResourcesManagerBl().getVo(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tList<Vo> vosFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n-\t\t\t\tvosFromFacility.retainAll(vosFromUser);\n-\t\t\t\tvosFromFacility = new ArrayList<Vo>(new HashSet<Vo>(vosFromFacility));\n-\t\t\t\tfor (Vo voElement : vosFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(group != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tvo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tvo = getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId());\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Vo> vosFromMembers = new ArrayList<Vo>();\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tvosFromMembers.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tfor(Vo voElement: vosFromMembers){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n-\t\t\t\tfor(Vo voElement: vos){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n-\t\t\t\tfor(Vo voElement: vos){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n-\t\t\t} else if(key != null){\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tfor(Vo voElement: vos){\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tgroupsFromResource.retainAll(groupsFromMember);\n-\t\t\t\t\tgroupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n-\t\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(group, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tSet<Group> groupsFromMembers = new HashSet<Group>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tgroupsFromMembers.retainAll(getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility));\n-\t\t\t\tfor (Group groupElement : groupsFromMembers) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(group, null, attribute));\n-\t\t\t} else if(group != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(group, null, attribute));\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tfor(Group groupElement: groupsFromMember) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Group> groupsFromMembers = new ArrayList<Group>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tgroupsFromMembers = new ArrayList<Group>(new HashSet<Group>(groupsFromMembers));\n-\t\t\t\tfor(Group groupElement: groupsFromMembers) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor(Group groupElement: groupsFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor(Group groupElement: groupsFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Group> groups = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n-\t\t\t\tfor(Group groupElement: groups) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Group> groupsFromVos = new ArrayList<Group>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tgroupsFromVos.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tgroupsFromVos = new ArrayList<Group>(new HashSet<Group>(groupsFromVos));\n-\t\t\t\tfor(Group groupElement: groupsFromVos) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_FACILITY_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tif(facilitiesFromUser.contains(facility)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<>();\n-\t\t\t\tfor (Resource resourceElement : resources) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n-\t\t\t\tfor (Facility facilityElement : facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElemenet: resources) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n-\t\t\t\tfor(Facility facilityElement: facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tList<Resource> resourcesFromMember = new ArrayList<Resource>();\n-\t\t\t\t\tfor(Group groupElement: groupsForMember) {\n-\t\t\t\t\t\tresourcesFromMember.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement));\n-\t\t\t\t\t}\n-\t\t\t\t\tresourcesFromMember = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromMember));\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromMember) {\n-\t\t\t\t\t\tFacility facilityFromMember = getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement);\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityFromMember, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityFromMember, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElemenet: resources) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n-\t\t\t\tfor(Facility facilityElement: facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tmembersFromResource.retainAll(membersFromGroup);\n-\t\t\t\tmembersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n-\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tmembersFromUser.retainAll(membersFromFacility);\n-\t\t\t\tmembersFromUser = new ArrayList<Member>(new HashSet<Member>(membersFromUser));\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tfor(Member memberElement: membersFromGroup) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Member> membersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tfor(Member memberElement: membersFromHost) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tfor(Member memberElement: membersFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tfor(Member memberElement: membersFromVo) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Member> allMembers = new ArrayList<Member>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tallMembers.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tallMembers = new ArrayList<Member>(new HashSet<Member>(allMembers));\n-\t\t\t\tfor(Member memberElement: allMembers) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tresourcesFromUser.retainAll(resourcesFromFacility);\n-\t\t\t\tresourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup =\n-\t\t\t\t\t\tnew ArrayList<>(new HashSet<>(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group)));\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromMember) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tresourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Resource> allResources = new ArrayList<Resource>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tallResources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tallResources = new ArrayList<Resource>(new HashSet<Resource>(allResources));\n-\t\t\t\tfor(Resource resourceElement: allResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tmembers.retainAll(membersFromResource);\n-\t\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\tusersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n-\t\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tif(facilitiesFromUser.contains(user)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tusersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n-\t\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\t\t\tfor(User userElement: usersFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(user, null, attribute));\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: usersFromHost) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: usersFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tList<User> usersFromVo = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tusersFromVo = new ArrayList<User>(new HashSet<User>(usersFromVo));\n-\t\t\t\tfor(User userElement: usersFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<User> allUsers = getPerunBl().getUsersManagerBl().getUsers(sess);\n-\t\t\t\tfor(User userElement: allUsers) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tList<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\t\tfor(Host hostElement: hostsFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tList<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\tfor(Host hostElement: hostsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tif(getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facility)) {\n-\t\t\t\t\tList<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\t\tfor(Host hostElement: hostsFromFacility) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<>();\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n-\t\t\t\tList<Host> hostsFromFacilities = new ArrayList<>();\n-\t\t\t\tfor (Facility facilityElement : facilitiesFromResources) {\n-\t\t\t\t\thostsFromFacilities.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\tfor (Host hostElement : hostsFromFacilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tList<Host> hostsFromGroup = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromGroup.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromGroup = new ArrayList<Host>(new HashSet<Host>(hostsFromGroup));\n-\t\t\t\tfor(Host hostElement: hostsFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t\t}\n-\t\t\t\t\tList<Host> hostsFromMembers = new ArrayList<Host>();\n-\t\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\t\thostsFromMembers.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t\t}\n-\t\t\t\t\thostsFromMembers = new ArrayList<Host>(new HashSet<Host>(hostsFromMembers));\n-\t\t\t\t\tfor(Host hostElement: hostsFromMembers) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tList<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\tfor(Host hostElement: hostsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tList<Host> hostsFromUser = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromUser.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromUser = new ArrayList<Host>(new HashSet<Host>(hostsFromUser));\n-\t\t\t\tfor(Host hostElement: hostsFromUser) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, host, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(host, null, attribute));\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n-\t\t\t\tfor(Host hostElement: hostsFromFacility) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tList<Host> hostsFromVo = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n-\t\t\t\tfor(Host hostElement: hostsFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tList<Host> hostsFromVo = new ArrayList<Host>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\thostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\thostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n-\t\t\t\tfor(Host hostElement: hostsFromVo) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_ENTITYLESS_ATTR)) {\n-\t\t\tif(key != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, key, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(key, null, attribute));\n-\t\t\t} else {\n-\t\t\t\tList<String> keys = this.getEntitylessKeys(sess, attrDef);\n-\t\t\t\tfor(String keyElement: keys) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, keyElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(keyElement, null, attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tgroupsFromResource.retainAll(groupsFromMember);\n-\t\t\t\t\tgroupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n-\t\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, group, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, group, attribute));\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\t//Groups from User\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Group> groupsFromUser = new ArrayList<Group>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//Retain of Groups from facility\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tgroupsFromFacility.retainAll(groupsFromUser);\n-\t\t\t\t//Resources from user\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//Resource from facility\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\t//Retain of Resources\n-\t\t\t\tresourcesFromFacility.retainAll(resourcesFromUser);\n-\t\t\t\t//All possibilities\n-\t\t\t\tresourcesFromFacility = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromFacility));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromFacility) {\n-\t\t\t\t\tList<Group> groupsForResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tgroupsForResourceElement.retainAll(groupsFromFacility);\n-\t\t\t\t\tgroupsForResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsForResourceElement));\n-\t\t\t\t\tfor(Group groupElement: groupsForResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t// there is no need to get Resources from Member because Members are only in those groups\n-\t\t\t\t// from which we already took Resources\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tList<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromMember) {\n-\t\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\t\tgroupsFromResourceElement.retainAll(groupsFromMember);\n-\t\t\t\t\t\tgroupsFromResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsFromResourceElement));\n-\t\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tfor(Group groupElement: groupsFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Group> groupsFromUser = new ArrayList<Group>();\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tgroupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tgroupsFromUser = new ArrayList<Group>(new HashSet<Group>(groupsFromUser));\n-\t\t\t\tfor(Group groupElement: groupsFromUser) {\n-\t\t\t\t\tList<Resource> resourcesFromGroupElement = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement);\n-\t\t\t\t\tresourcesFromGroupElement.retainAll(resourcesFromUser);\n-\t\t\t\t\tresourcesFromGroupElement = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromGroupElement));\n-\t\t\t\t\tfor(Resource resourceElement: resourcesFromGroupElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromHost) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resourcesFromHost) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tresources.addAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facilityElement));\n-\t\t\t\t}\n-\t\t\t\tresources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n-\t\t\t\t\tfor(Group groupElement: groupsFromResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR)) {\n-\t\t\tif (resource != null && member != null) {\n-\t\t\t\tList<Group> groupFromMembers = new ArrayList<>();\n-\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tgroupFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t}\n-\t\t\t\tList<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tgroupsFromResources.retainAll(groupFromMembers);\n-\t\t\t\tgroupsFromResources = new ArrayList<>(new HashSet<>(groupsFromResources));\n-\t\t\t\tfor (Group groupElement : groupsFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (group != null && resource != null) {\n-\t\t\t\t// there is no need to get Members from Resource because needed Members are only from 'group' variable\n-\t\t\t\t// which we already have. Other Members (aquired from Resource) than from 'group' variable will be redundant because\n-\t\t\t\t// they will be not assigned to it.\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (user != null && facility != null) {\n-\t\t\t\t// get all groups from facility\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\t// get all groups from user\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tSet<Group> groupsFromMembers = new HashSet<>();\n-\t\t\t\tfor (Member memberElement : membersFromUser) {\n-\t\t\t\t\tgroupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n-\t\t\t\t}\n-\t\t\t\t// retain of groups\n-\t\t\t\tgroupsFromMembers.retainAll(groupsFromFacility);\n-\t\t\t\tList<Group> retainedGroups = new ArrayList<>(groupsFromMembers);\n-\t\t\t\t// all possible groups\n-\t\t\t\tfor (Group groupElement : retainedGroups) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\t// all possibilities\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (group != null) {\n-\t\t\t\tList<Member> membersFromGroups = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\tfor (Member memberElement: membersFromGroups) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n-\t\t\t\t}\n-\t\t\t} else if (member != null) {\n-\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Group> groupsFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n-\t\t\t\t\tfor(Group groupElement : groupsFromMembers) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(member, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (resource != null) {\n-\t\t\t\tList<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n-\t\t\t\tfor (Group groupElement : groupsFromResources) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (user != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tfor (Member memberElement: membersFromUser) {\n-\t\t\t\t\tif (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\t// get all groups for 'memberElement' variable\n-\t\t\t\t\t\tList<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement);\n-\t\t\t\t\t\tfor (Group groupElement : groupsFromMember) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor (Group groupElement : groupsFromFacility) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (facility != null) {\n-\t\t\t\tList<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n-\t\t\t\tfor (Group groupElement : groupsFromFacility) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n-\t\t\t\tfor (Group groupElement : groupsFromVo) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Group> groupsFromVo = new ArrayList<>();\n-\t\t\t\tfor(Vo voElement : vos) {\n-\t\t\t\t\tgroupsFromVo.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tgroupsFromVo = new ArrayList<>(new HashSet<>(groupsFromVo));\n-\t\t\t\tfor (Group groupElement : groupsFromVo) {\n-\t\t\t\t\t// get all members for 'groupElement' variable\n-\t\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n-\t\t\t\t\tfor (Member memberElement : membersFromGroup) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, member, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tList<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tmembersFromGroup.retainAll(membersFromResource);\n-\t\t\t\tmembersFromGroup = new ArrayList<Member>(new HashSet<Member>(membersFromGroup));\n-\t\t\t\tfor(Member memberElement: membersFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tList<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tList<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n-\t\t\t\tList<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tList<Resource> resourcesFromUser = new ArrayList<Resource>();\n-\t\t\t\tfor(Member memberElement: membersFromUser) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tresourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tmembersFromUser.retainAll(membersFromFacility);\n-\t\t\t\tresourcesFromUser.retainAll(resourcesFromFacility);\n-\t\t\t\tresourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n-\t\t\t\tfor(Resource resourceElement: resourcesFromUser) {\n-\t\t\t\t\tList<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tmembersForResourceElement.retainAll(membersFromUser);\n-\t\t\t\t\tmembersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n-\t\t\t\t\tfor(Member memberElement: membersForResourceElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\t// there is no need to get Resources from Member because Members are only in those groups\n-\t\t\t\t// from which we already took Resources\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tmembersForResourceElement.retainAll(members);\n-\t\t\t\t\tmembersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n-\t\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement);\n-\t\t\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\t\tmembersFromResource.retainAll(membersFromVo);\n-\t\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n-\t\t\t\tList<Resource> resources = new ArrayList<Resource>();\n-\t\t\t\tList<Member> membersFromVo = new ArrayList<Member>();\n-\t\t\t\tfor(Vo voElement: vos) {\n-\t\t\t\t\tresources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n-\t\t\t\t\tmembersFromVo.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n-\t\t\t\t}\n-\t\t\t\tresources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n-\t\t\t\t\tmembersFromResource.retainAll(membersFromVo);\n-\t\t\t\t\tmembersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n-\t\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else if(getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR)) {\n-\t\t\tif(resource != null && member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null && resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\t//get Users from Group\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<User> usersFromGroup = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//get users from resource\n-\t\t\t\tList<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n-\t\t\t\tList<User> usersFromResource = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: membersFromResource) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusersFromResource.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tusersFromGroup.retainAll(usersFromResource);\n-\t\t\t\tusersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n-\t\t\t\tfor(User userElement: usersFromGroup) {\n-\t\t\t\t\tif(getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement).contains(facility)) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(user != null && facility != null) {\n-\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n-\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n-\t\t\t} else if (member != null && group != null) {\n-\t\t\t\tList<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilitiesFromResources = new ArrayList<>();\n-\t\t\t\tfor (Resource resourceElement : resourcesFromGroup) {\n-\t\t\t\t\tfacilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tfacilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n-\t\t\t\tUser userFromMember = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\tfor (Facility facilityElement : facilitiesFromResources) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userFromMember, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userFromMember, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(group != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n-\t\t\t\tList<User> users = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusers.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tList<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n-\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resources) {\n-\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tusers = new ArrayList<User>(new HashSet<User>(users));\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tList<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n-\t\t\t\t\tfacilities.retainAll(facilitiesFromUser);\n-\t\t\t\t\tfacilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n-\t\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(member != null) {\n-\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n-\t\t\t\t\tuser = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n-\t\t\t\t\tList<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n-\t\t\t\t\tList<Facility> facilities = new ArrayList<Facility>();\n-\t\t\t\t\tfor(Resource resourceElement: memberResources) {\n-\t\t\t\t\t\tfacilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t\t}\n-\t\t\t\t\tfacilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n-\t\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\t\tif(getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facilityElement)) {\n-\t\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n-\t\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(resource != null) {\n-\t\t\t\tfacility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n-\t\t\t\tList<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n-\t\t\t\tfor(User userElement: usersFromResource) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(user != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(host != null) {\n-\t\t\t\tfacility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n-\t\t\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(facility != null) {\n-\t\t\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n-\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n-\t\t\t\t}\n-\t\t\t} else if(vo != null) {\n-\t\t\t\tList<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n-\t\t\t\tList<User> users = new ArrayList<User>();\n-\t\t\t\tfor(Member memberElement: members) {\n-\t\t\t\t\tif(!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n-\t\t\t\t\t\tusers.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tList<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n-\t\t\t\tList<Facility> facilitiesFromVo = new ArrayList<Facility>();\n-\t\t\t\tfor(Resource resourceElement: resourcesFromVo) {\n-\t\t\t\t\tfacilitiesFromVo.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n-\t\t\t\t}\n-\t\t\t\tusers = new ArrayList<User>(new HashSet<User>(users));\n-\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\tList<Facility> facilitiesFromUserElement = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n-\t\t\t\t\tfacilitiesFromUserElement.retainAll(facilitiesFromVo);\n-\t\t\t\t\tfacilitiesFromUserElement = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromUserElement));\n-\t\t\t\t\tfor(Facility facilityElement: facilitiesFromUserElement) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} else if(key != null) {\n-\t\t\t\tList<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n-\t\t\t\tfor(Facility facilityElement: facilities) {\n-\t\t\t\t\tList<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facilityElement);\n-\t\t\t\t\tfor(User userElement: users) {\n-\t\t\t\t\t\tattribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n-\t\t\t\t\t\tlistOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new InternalErrorException(\"There is unrecognized namespace in attribute \" + attrDef);\n-\t\t}\n-\n-\t\treturn listOfRichAttributes;\n-\t}\n-\n-\t/**\n-\t * Checks if the attributes represent empty values. If so, converts them into null.\n-\t *\n-\t * @param attributes attributes to be checked if are null\n-\t */\n-\tpublic void convertEmptyAttrValueToNull(List<Attribute> attributes) throws ConsistencyErrorException {\n-\t\tfor (Attribute attribute : attributes) {\n-\t\t\tconvertEmptyAttrValueToNull(attribute);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Checks if the attribute represents empty value. If so, converts it into null.\n-\t *\n-\t * @param attribute attribute to be checked if is null\n-\t */\n-\tpublic void convertEmptyAttrValueToNull(Attribute attribute) throws ConsistencyErrorException {\n-\t\tif(attribute.getValue() == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (attribute.getValue() instanceof Integer) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (attribute.getValue() instanceof String) {\n-\t\t\tif(((String)attribute.getValue()).matches(\"\\\\s*\")) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof Boolean) {\n-\t\t\tif(attribute.getValue().equals(Boolean.FALSE)) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof ArrayList) {\n-\t\t\tif(((ArrayList)attribute.getValue()).isEmpty()) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else if (attribute.getValue() instanceof LinkedHashMap) {\n-\t\t\tif(((LinkedHashMap)attribute.getValue()).isEmpty()) {\n-\t\t\t\tattribute.setValue(null);\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new ConsistencyErrorException(\"Invalid attribute value type: \" + attribute.getType() +\n-\t\t\t                                    \" class: \" + attribute.getValue().getClass().getName());\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Gets the getAttributesManagerImpl().\n-\t *\n-\t * @return The getAttributesManagerImpl().\n-\t */\n-\tpublic AttributesManagerImplApi getAttributesManagerImpl() {\n-\t\treturn this.attributesManagerImpl;\n-\t}\n-\n-\t/**\n-\t * Gets the perunBl.\n-\t *\n-\t * @return The perunBl.\n-\t */\n-\tpublic PerunBl getPerunBl() {\n-\t\treturn this.perunBl;\n-\t}\n-\n-\tpublic void setPerunBl(PerunBl perunBl) {\n-\t\tthis.perunBl = perunBl;\n-\t}\n-\n-\tprivate List<Attribute> attributesFromDefinitions(List<? extends AttributeDefinition> attributesDefinition) {\n-\t\tList<Attribute> attributes = new ArrayList<Attribute>(attributesDefinition.size());\n-\t\tfor(AttributeDefinition attributeDefinition : attributesDefinition) {\n-\t\t\tattributes.add(new Attribute(attributeDefinition));\n-\t\t}\n-\t\treturn attributes;\n-\t}\n-\n-\tprotected void initialize() throws InternalErrorException {\n-\t\tlog.debug(\"AttributesManagerBlImpl initialize started.\");\n-\n-\t\t//Get PerunSession\n-\t\tString attributesManagerInitializator = \"attributesManagerBlImplInitializator\";\n-\t\tPerunPrincipal pp = new PerunPrincipal(attributesManagerInitializator, ExtSourcesManager.EXTSOURCE_NAME_INTERNAL, ExtSourcesManager.EXTSOURCE_INTERNAL);\n-\t\tPerunSession sess = perunBl.getPerunSession(pp, new PerunClient());\n-\n-\t\t//Prepare all attribute definition from system perun\n-\t\tSet<AttributeDefinition> allAttributesDef = new HashSet<AttributeDefinition>();\n-\t\tallAttributesDef.addAll(this.getAttributesDefinition(sess));\n-\n-\t\t//Basic state of all maps (record for every existing attributeDefinitions)\n-\t\tfor(AttributeDefinition ad: allAttributesDef) {\n-\t\t\tdependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tstrongDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tinverseDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tinverseStrongDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t\tallDependencies.put(ad, new HashSet<AttributeDefinition>());\n-\t\t}\n-\n-\t\tlog.debug(\"Dependencies and StrongDependencies filling started.\");\n-\n-\t\t//Fill dep and strongDep maps\n-\t\tfor(AttributeDefinition ad: allAttributesDef) {\n-\t\t\tAttributesModuleImplApi module = null;\n-\t\t\tList<String> depList = new ArrayList<String>();\n-\t\t\tList<String> strongDepList = new ArrayList<String>();\n-\t\t\tSet<AttributeDefinition> depSet = new HashSet<AttributeDefinition>();\n-\t\t\tSet<AttributeDefinition> strongDepSet = new HashSet<AttributeDefinition>();\n-\n-\t\t\t//Return null to object if module not exist\n-\t\t\tObject attributeModule = getAttributesManagerImpl().getAttributesModule(sess, ad);\n-\n-\t\t\t//If there is any existing module\n-\t\t\tif(attributeModule != null) {\n-\t\t\t\tmodule = (AttributesModuleImplApi) attributeModule;\n-\t\t\t\tdepList = module.getDependencies();\n-\t\t\t\tstrongDepList = module.getStrongDependencies();\n-\t\t\t\t//Fill Set of dependencies\n-\t\t\t\tfor(String s: depList) {\n-\t\t\t\t\tif(!s.endsWith(\"*\")) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, s);\n-\t\t\t\t\t\t\tdepSet.add(attrDef);\n-\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\tlog.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t//If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tList<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length()-2));\n-\t\t\t\t\t\tfor(String variant: allVariantOfDependence) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n-\t\t\t\t\t\t\t\tdepSet.add(attrDef);\n-\t\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\t\tlog.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\t//Fil Set of strongDependencies\n-\t\t\t\tfor(String s: strongDepList) {\n-\t\t\t\t\tif(!s.endsWith(\"*\")) {\n-\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, s);\n-\t\t\t\t\t\t\tstrongDepSet.add(attrDef);\n-\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\tlog.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t//If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tList<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length()-2));\n-\t\t\t\t\t\tfor(String variant: allVariantOfDependence) {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tAttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n-\t\t\t\t\t\t\t\tstrongDepSet.add(attrDef);\n-\t\t\t\t\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\t\t\t\t\tlog.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tdependencies.put(ad, depSet);\n-\t\t\tstrongDependencies.put(ad, strongDepSet);\n-\t\t}\n-\n-\t\tlog.debug(\"Dependencies and StrongDependencies was filled successfully.\");\n-\n-\t\tlog.debug(\"InverseDependencies and InverseStrongDependencies filling started.\");\n-\n-\t\t//First create inversion map for simple dependencies\n-\t\tSet<AttributeDefinition> depSet = dependencies.keySet();\n-\t\tfor(AttributeDefinition key: depSet) {\n-\t\t\tSet<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n-\t\t\tkeySet = dependencies.get(key);\n-\t\t\tfor(AttributeDefinition keySetItem: keySet) {\n-\t\t\t\tSet<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n-\t\t\t\tchangeSet = inverseDependencies.get(keySetItem);\n-\t\t\t\tchangeSet.add(key);\n-\t\t\t\t//inverseDependencies.put(keySetItem, changeSet);\n-\t\t\t}\n-\t\t}\n-\n-\t\t//Second create inversion map for strong dependencies\n-\t\tdepSet = strongDependencies.keySet();\n-\t\tfor(AttributeDefinition key: depSet) {\n-\t\t\tSet<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n-\t\t\tkeySet = strongDependencies.get(key);\n-\t\t\tfor(AttributeDefinition keySetItem: keySet) {\n-\t\t\t\tSet<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n-\t\t\t\tchangeSet = inverseStrongDependencies.get(keySetItem);\n-\t\t\t\tchangeSet.add(key);\n-\t\t\t\t//inverseDependencies.put(keySetItem, changeSet);\n-\t\t\t}\n-\t\t}\n-\n-\t\tlog.debug(\"InverseDependencies and InverseStrongDependencies was filled successfully.\");\n-\n-\t\tlog.debug(\"Cycle test of InverseStrongDependencies started.\");\n-\t\t//Test StrDepInveMap on cycles\n-\n-\t\tif(isMapOfAttributesDefCyclic(inverseStrongDependencies)) {\n-\t\t\tlog.error(\"There is cycle in inverseStrongDependencies so map of All attribute will be not created!\");\n-\t\t} else {\n-\t\t\tlog.debug(\"Cycle test of InverseStrongDependencies was successfull.\");\n-\t\t\tlog.debug(\"Filling map of allDependencies started.\");\n-\n-\t\t\tfor(AttributeDefinition key: allDependencies.keySet()) {\n-\t\t\t\tList<AttributeDefinition> stackingAttributes = new ArrayList<AttributeDefinition>();\n-\t\t\t\tSet<AttributeDefinition> dependenciesOfAttribute = new HashSet<AttributeDefinition>();\n-\t\t\t\tdependenciesOfAttribute.addAll(inverseStrongDependencies.get(key));\n-\t\t\t\tdependenciesOfAttribute.addAll(inverseDependencies.get(key));\n-\t\t\t\tstackingAttributes.addAll(inverseStrongDependencies.get(key));\n-\t\t\t\twhile(!stackingAttributes.isEmpty()) {\n-\t\t\t\t\tAttributeDefinition firstAttr = stackingAttributes.get(0);\n-\t\t\t\t\tstackingAttributes.remove(firstAttr);\n-\t\t\t\t\tdependenciesOfAttribute.addAll(inverseStrongDependencies.get(firstAttr));\n-\t\t\t\t\tdependenciesOfAttribute.addAll(inverseDependencies.get(firstAttr));\n-\t\t\t\t\tstackingAttributes.addAll(inverseStrongDependencies.get(firstAttr));\n-\t\t\t\t}\n-\t\t\t\tallDependencies.put(key, dependenciesOfAttribute);\n-\t\t\t}\n-\n-\t\t\tlog.debug(\"Map of allDependencies was filled successfully.\");\n-\t\t}\n-\n-\t\t//DEBUG creating file with all dependencies of all attributes (180+- on devel)\n-\t\t/*String pathToFile = \"./AllDependencies.log\";\n-\t\t\tFile f = new File(pathToFile);\n-\t\t\ttry {\n-\t\t\tf.createNewFile();\n-\t\t\tPrintWriter writer;\n-\t\t\twriter = new PrintWriter(new FileWriter(f, true));\n-\t\t\tint i=1;\n-\t\t\tfor(AttributeDefinition ad: allDependencies.keySet()) {\n-\t\t\twriter.println(i + \") \" + ad.toString());\n-\t\t\tfor(AttributeDefinition a: allDependencies.get(ad)) {\n-\t\t\twriter.println(\" ---> \" + a);\n-\t\t\t}\n-\t\t\ti++;\n-\t\t\t}\n-\t\t\twriter.close();\n-\t\t\t} catch (IOException ex) {\n-\t\t\tlog.error(\"Error at saving AllDependencies file.\");\n-\t\t\t}*/\n-\t\t//DEBUG end\n-\n-\t\tlog.debug(\"AttributesManagerBlImpl initialize ended.\");\n-\t}\n-\n-\t/**\n-\t * This method try to find cycle between strongDependencies of Attributes modules.\n-\t * If exist at least 1 cycle, return true.\n-\t * If there is no cycle, return false.\n-\t *\n-\t * @param map\n-\t * @return true if cycle exist, false if cycle not exist\n-\t */\n-\tprivate static boolean isMapOfAttributesDefCyclic(Map<AttributeDefinition, Set<AttributeDefinition>> map) {\n-\t\tSet<AttributeDefinition> processed = new HashSet<AttributeDefinition>();\n-\t\tSet<AttributeDefinition> unprocessed = new HashSet<AttributeDefinition>();\n-\t\tList<AttributeDefinition> stack = new ArrayList<AttributeDefinition>();\n-\n-\t\tfor(AttributeDefinition attributeDef: map.keySet()) {\n-\t\t\tstack.add(attributeDef);\n-\t\t\twhile(!stack.isEmpty()) {\n-\t\t\t\tAttributeDefinition firstInStack = stack.get(0);\n-\t\t\t\tif(map.get(firstInStack).contains(attributeDef)) {\n-\t\t\t\t\tlog.error(\"Cycle exist for \" + attributeDef);\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t\tprocessed.add(firstInStack);\n-\t\t\t\tunprocessed.addAll(map.get(firstInStack));\n-\t\t\t\tunprocessed.removeAll(processed);\n-\t\t\t\tstack.remove(firstInStack);\n-\t\t\t\tfor(AttributeDefinition unprocessedAttr: unprocessed) {\n-\t\t\t\t\tif(!stack.contains(unprocessedAttr)) stack.add(unprocessedAttr);\n-\t\t\t\t}\n-\t\t\t\tunprocessed.clear();\n-\t\t\t}\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tpublic List<Attribute> setWritableTrue(PerunSession sess, List<Attribute> attributes) throws InternalErrorException {\n-\t\tList<Attribute> emptyList = new ArrayList<Attribute>();\n-\t\tif(attributes == null) return emptyList;\n-\n-\t\tfor(Attribute a: attributes) {\n-\t\t\tif(a != null) a.setWritable(true);\n-\t\t}\n-\n-\t\treturn attributes;\n-\t}\n-\n-\t@Override\n-\tpublic List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException {\n-\t\tList<AttributeRights> listOfAr = getAttributesManagerImpl().getAttributeRights(sess, attributeId);\n-\n-\t\t//Do not return VoObsever rights by this method\n-\t\tif(listOfAr != null) {\n-\t\t\tIterator<AttributeRights> iterator = listOfAr.iterator();\n-\t\t\twhile(iterator.hasNext()) {\n-\t\t\t\tAttributeRights ar = iterator.next();\n-\t\t\t\tif(ar.getRole().equals(Role.VOOBSERVER)) iterator.remove();\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn listOfAr;\n-\t}\n-\n-\t@Override\n-\tpublic void setAttributeRights(PerunSession sess, List<AttributeRights> rights) throws InternalErrorException {\n-\t\tfor (AttributeRights right : rights) {\n-\t\t\tgetAttributesManagerImpl().setAttributeRight(sess, right);\n-\t\t\tgetPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n-\n-\t\t\t//If these rights are for VoAdmin, do the same for VoObserver but only for READ privilegies\n-\t\t\tif(right.getRole().equals(Role.VOADMIN)) {\n-\t\t\t\tList<ActionType> onlyReadActionType = new ArrayList<ActionType>();\n-\t\t\t\tif(right.getRights().contains(ActionType.READ)) onlyReadActionType.add(ActionType.READ);\n-\t\t\t\tright.setRights(onlyReadActionType);\n-\t\t\t\tright.setRole(Role.VOOBSERVER);\n-\t\t\t\t//Rights are now set for VoObserver with read privilegies on the same attribute like VoAdmin\n-\t\t\t\tgetAttributesManagerImpl().setAttributeRight(sess, right);\n-\t\t\t\tgetPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException {\n-\t\treturn getAttributesManagerImpl().getUserVirtualAttributeModule(sess, attribute);\n-\t}\n-\n-\t/**\n-\t * Check if member is assigned on resource. If not, throw WrongAttributeAssignment Exception\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param resource\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws InternalErrorException\n-\t * @throws MemberNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tprivate void checkMemberIsFromTheSameVoLikeResource(PerunSession sess, Member member, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n-\t\tUtils.notNull(sess, \"sess\");\n-\t\tUtils.notNull(member, \"member\");\n-\t\tUtils.notNull(resource, \"resource\");\n-\n-\t\tif(member.getVoId() != resource.getVoId()) throw new WrongAttributeAssignmentException(\"Member is not from the same vo like Resource: \" + member + \" \" + resource);\n-\t}\n-\n-\t/**\n-\t * Check if group is assigned on resource. If not, throw WrongAttributeAssignment Exception\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @throws WrongAttributeAssignmentException\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tprivate void checkGroupIsFromTheSameVoLikeResource(PerunSession sess, Group group, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n-\t\tUtils.notNull(sess, \"sess\");\n-\t\tUtils.notNull(group, \"group\");\n-\t\tUtils.notNull(resource, \"resource\");\n-\n-\t\tif(group.getVoId() != resource.getVoId()) throw new WrongAttributeAssignmentException(\"Group is not from the same vo like Resource: \" + group + \" \" + resource);\n-\t}\n-\n-\tpublic Map<AttributeDefinition, Set<AttributeDefinition>> getAllDependencies() {\n-\t\treturn allDependencies;\n-\t}\n-\n-\t/**\n-\t * Get Map of members with list of member-resource attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, service, resource, List members)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n-\t *\n-\t * Example: if there are 25000 records in list of members, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param service service to get required attributes for\n-\t * @param resource resource to get required attributes for\n-\t * @param members members to get required attributes for\n-\t * @return map of members in keys with list of their member-resource attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n-\t\tif(members.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members);\n-\n-\t\tHashMap<Member, List<Attribute>> memberResourceAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tmemberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (members.size()>to);\n-\t\tmemberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, members.size())));\n-\n-\t\treturn memberResourceAttrs;\n-\t}\n-\n-\t/**\n-\t * Get Map of members with list of member attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, resource, service, List members)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n-\t *\n-\t * Example: if there are 25000 records in list of members, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param resource resource to get required attributes for\n-\t * @param service service to get required attributes for\n-\t * @param members members to get required attributes for\n-\t * @return map of members in keys with list of their member attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n-\t\tif(members.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members);\n-\n-\t\tHashMap<Member, List<Attribute>> memberAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tmemberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (members.size()>to);\n-\t\tmemberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, members.size())));\n-\n-\t\treturn memberAttrs;\n-\t}\n-\n-\t/**\n-\t * Get Map of users with list of user-facility attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, service, facility, List users)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n-\t *\n-\t * Example: if there are 25000 records in list of users, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param service service to get required attributes for\n-\t * @param facility facility to get required attributes for\n-\t * @param users users to get required attributes for\n-\t * @return map of users in keys with list of their user-facility attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n-\t\tif(users.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users);\n-\n-\t\tHashMap<User, List<Attribute>> userFacAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tuserFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (users.size()>to);\n-\t\tuserFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, users.size())));\n-\n-\t\treturn userFacAttrs;\n-\t}\n-\n-\t/**\n-\t * Get Map of users with list of user attributes in values.\n-\t *\n-\t * This method calls 'getRequiredAttributes(session, service, List users)' for\n-\t * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n-\t *\n-\t * Example: if there are 25000 records in list of users, this method call it by 3 separate\n-\t * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n-\t * calls getRequiredAttributes just once without any changes\n-\t *\n-\t * Reason: SQL error in Oracle for too much records in one SQL query\n-\t *\n-\t * @param sess perunSession\n-\t * @param service service to get required attributes for\n-\t * @param users users to get required attributes for\n-\t * @return map of users in keys with list of their user attributes in value\n-\t * @throws InternalErrorException\n-\t */\n-\tprivate HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n-\t\tif(users.size() <= MAX_SIZE_OF_BULK_IN_SQL) return getAttributesManagerImpl().getRequiredAttributes(sess, service, users);\n-\n-\t\tHashMap<User, List<Attribute>> userAttrs = new HashMap<>();\n-\n-\t\tint from = 0;\n-\t\tint to = MAX_SIZE_OF_BULK_IN_SQL;\n-\t\tdo {\n-\t\t\tuserAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, to)));\n-\t\t\tfrom+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t\tto+=MAX_SIZE_OF_BULK_IN_SQL;\n-\t\t} while (users.size()>to);\n-\t\tuserAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, users.size())));\n-\n-\t\treturn userAttrs;\n-\t}\n-}\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_GROUP_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, member, group, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, member, group);\n+  }\n+\n+  return changed;\n+ }\n+\n+ @Override\n+ public void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  removeAttributes(sess, member, group, attributes, false);\n+ }\n+\n+ @Override\n+ public void removeAttributes(PerunSession sess, Member member, Group group, List<? extends AttributeDefinition> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (!workWithUserAttributes) {\n+   getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_GROUP_ATTR);\n+   List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+   for (AttributeDefinition attribute : attributes) {\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     if (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n+    }\n+   }\n+   checkAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck));\n+   this.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck));\n+  } else {\n+   List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+   for (AttributeDefinition attribute : attributes) {\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_GROUP_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, member, group, attribute)) attributesToCheck.add(attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_USER_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_MEMBER_ATTR)) {\n+             if (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n+            } else {\n+             throw new WrongAttributeAssignmentException(attribute);\n+            }\n+    }\n+   }\n+   checkAttributesValue(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+   this.checkAttributesDependencies(sess, member, group, attributesFromDefinitions(attributesToCheck), workWithUserAttributes);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, member, group);\n+  getAttributesManagerImpl().removeAllAttributes(sess, member, group);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", member, group);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, member, group, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, member, group, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, member, attribute)) {\n+   checkAttributeValue(sess, member, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(member, null, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_MEMBER_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, member, attribute);\n+  if (changed) {\n+   try {\n+    if (changed) getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, member);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Member member, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_MEMBER_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, member, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, member, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, member, null, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, member);\n+  getAttributesManagerImpl().removeAllAttributes(sess, member);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", member);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, member, attributes);\n+   this.checkAttributesDependencies(sess, member, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, member, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, facility, user, attribute)) {\n+   checkAttributeValue(sess, facility, user, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(facility, user, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_FACILITY_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = false;\n+  if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+   changed = getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n+  } else {\n+   changed = getAttributesManagerImpl().removeAttribute(sess, facility, user, attribute);\n+  }\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, facility, user);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Facility facility, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_FACILITY_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (getAttributesManagerImpl().isVirtAttribute(sess, attribute)) {\n+     if (getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n+    } else {\n+     if (removeAttributeWithoutCheck(sess, facility, user, attribute)) attributesToCheck.add(attribute);\n+    }\n+   }\n+  }\n+  checkAttributesValue(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, facility, user, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, facility, user);\n+  //remove all non-virtual attributes\n+  getAttributesManagerImpl().removeAllAttributes(sess, facility, user);\n+\n+  //remove all virtual attributes\n+  List<Attribute> virtualAttributes = getVirtualAttributes(sess, facility, user);\n+  for (Attribute attribute : virtualAttributes) {\n+   getAttributesManagerImpl().removeVirtualAttribute(sess, facility, user, attribute);\n+  }\n+  attributes.addAll(virtualAttributes);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", facility, user);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, facility, user, attributes);\n+   this.checkAttributesDependencies(sess, facility, user, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, facility, user, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<RichAttribute<User, Facility>> userFacilitiesAttributes = getAttributesManagerImpl().getAllUserFacilityRichAttributes(sess, user);\n+\n+  //remove all non-virtual attributes\n+  getAttributesManagerImpl().removeAllUserFacilityAttributes(sess, user);\n+  getPerunBl().getAuditer().log(sess, \"All non-virtual user-facility attributes removed for all facilities and {}\", user);\n+  for (RichAttribute<User, Facility> richAttribute : userFacilitiesAttributes) {\n+   try {\n+    checkAttributeValue(sess,\n+     richAttribute.getSecondaryHolder(),\n+      richAttribute.getPrimaryHolder(),\n+       new Attribute(richAttribute.getAttribute()));\n+    this.checkAttributeDependencies(sess, richAttribute);\n+   } catch (WrongAttributeAssignmentException ex) {\n+    throw new ConsistencyErrorException(ex);\n+   }\n+  }\n+\n+  for (RichAttribute<User, Facility> attribute : userFacilitiesAttributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess,\n+attribute.getSecondaryHolder(),\n+attribute.getPrimaryHolder(),\n+new Attribute(attribute.getAttribute()));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, user, attribute)) {\n+   checkAttributeValue(sess, user, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(user, null, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, NS_USER_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, user, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, user);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, User user, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, NS_USER_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, user, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, user, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, user, null, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, user);\n+  getAttributesManagerImpl().removeAllAttributes(sess, user);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", user);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, user, attributes);\n+   this.checkAttributesDependencies(sess, user, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, user, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, resource, group, attribute)) {\n+   checkAttributeValue(sess, resource, group, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(resource, group, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+\n+  boolean changed = false;\n+  try {\n+   if (this.isVirtAttribute(sess, attribute)) {\n+    changed = getAttributesManagerImpl().removeVirtualAttribute(sess, resource, group, attribute);\n+   } else {\n+    changed = getAttributesManagerImpl().removeAttribute(sess, resource, group, attribute);\n+   }\n+   if (changed) getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n+  } catch (WrongAttributeValueException ex) {\n+   //TODO better exception here\n+   throw new InternalErrorException(ex);\n+  } catch (WrongReferenceAttributeValueException ex) {\n+   //TODO better exception here\n+   throw new InternalErrorException(ex);\n+  }\n+  if (changed) getPerunBl().getAuditer().log(sess, \"{} removed for {} and {}\", attribute, group, resource);\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  //getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_GROUP_RESOURCE_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   if (removeAttributeWithoutCheck(sess, resource, group, attribute)) attributesToCheck.add(attribute);\n+  }\n+  checkAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAttributes(PerunSession sess, Resource resource, Group group, List<? extends AttributeDefinition> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (!workWithGroupAttributes) {\n+   removeAttributes(sess, resource, group, attributes);\n+  } else {\n+   List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+   for (AttributeDefinition attribute : attributes) {\n+    //skip core attributes\n+    if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+     if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, resource, group, attribute)) attributesToCheck.add(attribute);\n+     } else if (getAttributesManagerImpl().isFromNamespace(sess, attribute, AttributesManager.NS_GROUP_ATTR)) {\n+      if (removeAttributeWithoutCheck(sess, group, attribute)) attributesToCheck.add(attribute);\n+     } else {\n+      throw new WrongAttributeAssignmentException(attribute);\n+     }\n+    }\n+   }\n+   checkAttributesValue(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n+   this.checkAttributesDependencies(sess, resource, group, attributesFromDefinitions(attributesToCheck), workWithGroupAttributes);\n+  }\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  List<Attribute> attributes = getAttributes(sess, resource, group);\n+  getAttributesManagerImpl().removeAllAttributes(sess, resource, group);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {} and {}\", group, resource);\n+\n+  //remove all virtual attributes\n+  /*for(Attribute attribute : getVirtualAttributes(sess, resource)) {\n+   getAttributesManagerImpl().removeVirtualAttribute(sess, resource, attribute);\n+   }*/\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, resource, group, attributes);\n+   this.checkAttributesDependencies(sess, resource, group, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, resource, group, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  if (removeAttributeWithoutCheck(sess, ues, attribute)) {\n+   checkAttributeValue(sess, ues, new Attribute(attribute));\n+   this.checkAttributeDependencies(sess, new RichAttribute(ues, null, new Attribute(attribute)));\n+  }\n+ }\n+\n+ public boolean removeAttributeWithoutCheck(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, AttributesManager.NS_UES_ATTR);\n+  if (getAttributesManagerImpl().isCoreAttribute(sess, attribute)) throw new WrongAttributeAssignmentException(attribute);\n+\n+  boolean changed = getAttributesManagerImpl().removeAttribute(sess, ues, attribute);\n+  if (changed) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+   getPerunBl().getAuditer().log(sess, \"{} removed for {}\", attribute, ues);\n+  }\n+\n+  return changed;\n+ }\n+\n+ public void removeAttributes(PerunSession sess, UserExtSource ues, List<? extends AttributeDefinition> attributes) throws InternalErrorException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, AttributesManager.NS_UES_ATTR);\n+  List<AttributeDefinition> attributesToCheck = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attribute : attributes) {\n+   if (!getAttributesManagerImpl().isCoreAttribute(sess, attribute)) {\n+    if (removeAttributeWithoutCheck(sess, ues, attribute)) attributesToCheck.add(attribute);\n+   }\n+  }\n+  checkAttributesValue(sess, ues, attributesFromDefinitions(attributesToCheck));\n+  this.checkAttributesDependencies(sess, ues, null, attributesFromDefinitions(attributesToCheck));\n+ }\n+\n+ public void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  List<Attribute> attributes = getAttributes(sess, ues);\n+  getAttributesManagerImpl().removeAllAttributes(sess, ues);\n+  getPerunBl().getAuditer().log(sess, \"All attributes removed for {}\", ues);\n+  for (Attribute attribute : attributes)\n+  attribute.setValue(null);\n+\n+  try {\n+   checkAttributesValue(sess, ues, attributes);\n+   this.checkAttributesDependencies(sess, ues, null, attributes);\n+  } catch (WrongAttributeAssignmentException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+\n+  for (Attribute attribute : attributes) {\n+   try {\n+    getAttributesManagerImpl().changedAttributeHook(sess, ues, new Attribute(attribute));\n+   } catch (WrongAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   } catch (WrongReferenceAttributeValueException ex) {\n+    //TODO better exception here\n+    throw new InternalErrorException(ex);\n+   }\n+  }\n+ }\n+\n+ public void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException {\n+  getAttributesManagerImpl().checkActionTypeExists(sess, actionType);\n+ }\n+\n+ public void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException {\n+  getAttributesManagerImpl().checkAttributeExists(sess, attribute);\n+ }\n+\n+ public void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException {\n+  getAttributesManagerImpl().checkAttributesExists(sess, attributes);\n+ }\n+\n+ public boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute) {\n+  return getAttributesManagerImpl().isDefAttribute(sess, attribute);\n+ }\n+\n+ public boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute) {\n+  return getAttributesManagerImpl().isOptAttribute(sess, attribute);\n+ }\n+\n+ public boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute) {\n+  return getAttributesManagerImpl().isCoreAttribute(sess, attribute);\n+ }\n+\n+ public boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute) {\n+  return getAttributesManagerImpl().isCoreManagedAttribute(sess, attribute);\n+ }\n+\n+ public boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute) {\n+  return getAttributesManagerImpl().isVirtAttribute(sess, attribute);\n+ }\n+\n+ public boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) {\n+  return getAttributesManagerImpl().isFromNamespace(sess, attribute, namespace);\n+ }\n+\n+ public void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attribute, namespace);\n+ }\n+\n+ public void checkNamespace(PerunSession sess,\n+                            List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException {\n+  getAttributesManagerImpl().checkNamespace(sess, attributes, namespace);\n+ }\n+\n+ public String getNamespaceFromAttributeName(String attributeName) {\n+  return attributeName.replaceFirst(\"(urn:perun:[^:]+:attribute-def:[^:]+):.*\", \"$1\");\n+ }\n+\n+ public String getFriendlyNameFromAttributeName(String attributeName) {\n+  return attributeName.replaceFirst(\"urn:perun:[^:]+:attribute-def:[^:]+:\", \"\");\n+ }\n+\n+ public List<Attribute> getLogins(PerunSession sess, User user) throws InternalErrorException {\n+  List<Attribute> usersAttributes = this.getAttributes(sess, user);  //Get all non-empty user's attributes\n+  Iterator<Attribute> it = usersAttributes.iterator();\n+  while (it.hasNext()) {\n+   if (!it.next().getFriendlyName().startsWith(\"login-namespace:\")) it.remove();\n+  }\n+\n+  return usersAttributes;\n+ }\n+\n+ public List<Object> getAllValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  if (isCoreAttribute(sess, attributeDefinition) || isCoreManagedAttribute(sess, attributeDefinition) || isVirtAttribute(sess, attributeDefinition)) throw new WrongAttributeAssignmentException(attributeDefinition);\n+  if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_RESOURCE_ATTR)) {\n+   return getAttributesManagerImpl().getAllResourceValues(sess, attributeDefinition);\n+  } else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_RESOURCE_ATTR)) {\n+   return getAttributesManagerImpl().getAllGroupResourceValues(sess, attributeDefinition);\n+  } else if (isFromNamespace(sess, attributeDefinition, AttributesManager.NS_GROUP_ATTR)) {\n+          return getAttributesManagerImpl().getAllGroupValues(sess, attributeDefinition);\n+         } else {\n+   //TODO\n+          throw new InternalErrorException(\"Not implemented yet!\");\n+         }\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_FACILITY_ATTR);\n+  return getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition);\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_VO_ATTR);\n+  return getAttributesManagerImpl().isAttributeRequiredByVo(sess, vo, attributeDefinition);\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_GROUP_ATTR);\n+  return getAttributesManagerImpl().isAttributeRequiredByGroup(sess, group, attributeDefinition);\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_RESOURCE_ATTR);\n+  return getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_MEMBER_ATTR);\n+  List<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+  for (Resource resource : allowedResources) {\n+   if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n+    return true;\n+  }\n+\n+  return false;\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_USER_ATTR);\n+  List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+  for (Member member : members) {\n+   List<Resource> allowedResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+   for (Resource resource : allowedResources) {\n+    if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n+     return true;\n+   }\n+  }\n+\n+  return false;\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_USER_FACILITY_ATTR);\n+  List<Facility> allowedFacilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+  if (!allowedFacilities.contains(facility)) {\n+   return false;\n+  } else {\n+   if (!getAttributesManagerImpl().isAttributeRequiredByFacility(sess, facility, attributeDefinition))\n+    return false;\n+   List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+   resources.retainAll(getPerunBl().getUsersManagerBl().getAllowedResources(sess, user));\n+   for (Resource resource : resources) {\n+    if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n+     return true;\n+   }\n+\n+   return false;\n+  }\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkMemberIsFromTheSameVoLikeResource(sess, member, resource);\n+  this.checkNamespace(sess, attributeDefinition, NS_MEMBER_RESOURCE_ATTR);\n+  List<Member> allowedMembers = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+  if (!allowedMembers.contains(member)) {\n+   return false;\n+  } else {\n+   return getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+  }\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkNamespace(sess, attributeDefinition, NS_MEMBER_GROUP_ATTR);\n+  List<Resource> assignedResources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+  for (Resource resource : assignedResources) {\n+   if (getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition))\n+    return true;\n+  }\n+\n+  return false;\n+ }\n+\n+ public boolean isTrulyRequiredAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException, WrongAttributeAssignmentException {\n+  this.checkGroupIsFromTheSameVoLikeResource(sess, group, resource);\n+  this.checkNamespace(sess, attributeDefinition, NS_GROUP_RESOURCE_ATTR);\n+  List<Group> assignedGroups = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+  if (!assignedGroups.contains(group)) {\n+   return false;\n+  } else {\n+   return getAttributesManagerImpl().isAttributeRequiredByResource(sess, resource, attributeDefinition);\n+  }\n+ }\n+\n+ public Object stringToAttributeValue(String value, String type) throws InternalErrorException {\n+  if (type.equals(ArrayList.class.getName()) || type.equals(LinkedHashMap.class.getName()) || type.equals(BeansUtils.largeArrayListClassName)) {\n+   if (value != null && !value.isEmpty() && !value.endsWith(String.valueOf(AttributesManagerImpl.LIST_DELIMITER))) {\n+    value = value.concat(String.valueOf(AttributesManagerImpl.LIST_DELIMITER));\n+   }\n+  }\n+\n+  return BeansUtils.stringToAttributeValue(value, type);\n+ }\n+\n+ public static String escapeListAttributeValue(String value) {\n+  return AttributesManagerImpl.escapeListAttributeValue(value);\n+ }\n+\n+ public static String escapeMapAttributeValue(String value) {\n+  return AttributesManagerImpl.escapeMapAttributeValue(value);\n+ }\n+\n+ public void doTheMagic(PerunSession sess, Member member) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  doTheMagic(sess, member, false);\n+ }\n+\n+ public void doTheMagic(PerunSession sess, Member member, boolean trueMagic) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+  List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+  for (Resource resource : resources) {\n+   Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+   List<Attribute> requiredAttributes = getResourceRequiredAttributes(sess, resource, facility, resource, user, member);\n+   boolean allOk = false;\n+   AttributeDefinition lastWrongAttribute = null;\n+   int safetyCounter = 0;\n+   do {\n+    try {\n+     setRequiredAttributes(sess, facility, resource, user, member, requiredAttributes);\n+     allOk = true;\n+    } catch (AttributeNotExistsException ex) {\n+     throw new ConsistencyErrorException(ex);\n+    } catch (WrongAttributeAssignmentException ex) {\n+     throw new ConsistencyErrorException(ex);\n+    } catch (WrongAttributeValueException ex) {\n+     if (!trueMagic) throw ex;\n+     AttributeDefinition wrongAttributeDefinition = ex.getAttribute();\n+     if (wrongAttributeDefinition == null) throw new ConsistencyErrorException(\"WrongAttributeValueException doesn't have set the wrong attribute.\", ex);\n+     if (wrongAttributeDefinition.equals(lastWrongAttribute)) throw new WrongAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n+     lastWrongAttribute = wrongAttributeDefinition;\n+     findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null);\n+    } catch (WrongReferenceAttributeValueException ex) {\n+     if (!trueMagic) throw ex;\n+     AttributeDefinition wrongAttributeDefinition = ex.getReferenceAttribute();\n+     if (wrongAttributeDefinition == null) throw new ConsistencyErrorException(\"WrongReferenceAttributeValueException doesn't have set reference attribute.\", ex);\n+     if (wrongAttributeDefinition.equals(lastWrongAttribute)) throw new WrongReferenceAttributeValueException(\"Method doTheMagic can't fix this attribute value\", ex);\n+     lastWrongAttribute = wrongAttributeDefinition;\n+     if (!findAndSetValueInList(requiredAttributes, wrongAttributeDefinition, null)) {\n+      //this attribute can't be fixed here\n+      throw ex;\n+     }\n+    }\n+    safetyCounter++;\n+    if (safetyCounter == 50) throw new InternalErrorException(\"Method doTheMagic possibly stays in infinite loop.\");\n+   } while (trueMagic && !allOk);\n+  }\n+ }\n+\n+ public void mergeAttributesValues(PerunSession sess, User user, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+\n+  for (Attribute attribute : attributes) {\n+   this.mergeAttributeValue(sess, user, attribute);\n+  }\n+ }\n+\n+ public void mergeAttributesValues(PerunSession sess, Member member, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+\n+  for (Attribute attribute : attributes) {\n+   this.mergeAttributeValue(sess, member, attribute);\n+  }\n+ }\n+\n+ /**\n+  * Merges attribute value for supported attribute's namespaces if the attribute type is list or map. In other cases it only stores new value.\n+  *\n+  * If attribute has null value or it's value is same as value of attribute already stored in Perun, return stored attribute instead.\n+  * If the type is list, new values are added to the current stored list.\n+  * It the type is map, new values are added and existing are overwritten with new values, but only if there is any change.\n+  *\n+  * Supported namespaces\n+  *  - user attributes\n+  *  - member attributes\n+  *\n+  * @param sess\n+  * @param attribute attribute to merge it's value if possible\n+  * @param primaryHolder holder defines object for which is attribute stored in Perun\n+  *\n+  * @return attribute after merging his value\n+  *\n+  * @throws InternalErrorException if one of mandatory objects is null or some internal problem has occured\n+  * @throws WrongAttributeValueException attribute value of set attribute is not correct\n+  * @throws WrongReferenceAttributeValueException any reference attribute value is not correct\n+  * @throws WrongAttributeAssignmentException if attribute is not from the same namespace defined by primaryHolder\n+  */\n+\n+\n+ private Attribute mergeAttributeValue(PerunSession sess, Attribute attribute, PerunBean primaryHolder) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  //If attribute is null, throw an exception\n+  if (attribute == null) throw new InternalErrorException(\"Can't merge null attribute with anything!\");\n+  if (primaryHolder == null) throw new InternalErrorException(\"Can't merge attribute value without notNull primaryHolder!\");\n+\n+  //Get stored attribute in Perun\n+  Attribute storedAttribute = null;\n+  try {\n+   if (primaryHolder instanceof User) {\n+    storedAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (User) primaryHolder, attribute.getName());\n+   } else if (primaryHolder instanceof Member) {\n+    storedAttribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, (Member) primaryHolder, attribute.getName());\n+   } else {\n+    throw new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n+   }\n+  } catch (AttributeNotExistsException e) {\n+   throw new ConsistencyErrorException(e);\n+  }\n+\n+  //if attribute to merge has null value or it's value is same as stored attribute's value, return the stored attribute\n+  convertEmptyAttrValueToNull(attribute);\n+  if (attribute.getValue() == null || Objects.equals(attribute.getValue(), storedAttribute.getValue()))\n+   return storedAttribute;\n+\n+  // Check type ArrayList\n+  if (attribute.getType().equals(ArrayList.class.getName()) || attribute.getType().equals(BeansUtils.largeArrayListClassName)) {\n+   ArrayList<String> updatedList = (ArrayList<String>) storedAttribute.getValue();\n+   // If there were someting then find values which haven't been already stored\n+   if (updatedList != null) {\n+\n+    for (String value : ((ArrayList<String>) attribute.getValue())) {\n+     if (!updatedList.contains(value)) {\n+      updatedList.add(value);\n+     }\n+    }\n+    attribute.setValue(updatedList);\n+   }\n+  // Check type LinkedHashMap\n+  } else if (attribute.getType().equals(LinkedHashMap.class.getName())) {\n+   //Find values which haven't been already stored\n+   LinkedHashMap<String, String> updatedMap = (LinkedHashMap<String, String>) storedAttribute.getValue();\n+   if (updatedMap != null) {\n+    LinkedHashMap<String, String> receivedMap = (LinkedHashMap<String, String>) attribute.getValue();\n+    updatedMap.putAll(receivedMap);\n+    attribute.setValue(updatedMap);\n+   }\n+  }\n+\n+  //Other types as String, Integer, Boolean etc. will be replaced by new value (no way how to merge them properly)\n+  if (primaryHolder instanceof User) {\n+   getPerunBl().getAttributesManagerBl().setAttribute(sess, (User) primaryHolder, attribute);\n+  } else if (primaryHolder instanceof Member) {\n+   getPerunBl().getAttributesManagerBl().setAttribute(sess, (Member) primaryHolder, attribute);\n+  } else {\n+   throw new InternalErrorException(\"Primary holder for attribute is not supported: \" + primaryHolder);\n+  }\n+\n+  return attribute;\n+ }\n+\n+ public Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  return this.mergeAttributeValue(sess, attribute, user);\n+ }\n+\n+ public Attribute mergeAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  return this.mergeAttributeValue(sess, attribute, member);\n+ }\n+\n+ public Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  return mergeAttributeValue(sess, user, attribute);\n+ }\n+\n+ public Attribute mergeAttributeValueInNestedTransaction(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  return mergeAttributeValue(sess, member, attribute);\n+ }\n+\n+\n+ private boolean findAndSetValueInList(List<Attribute> attributes, AttributeDefinition attributeDefinition, Object value) {\n+\n+  for (Attribute attribute : attributes) {\n+   if (attribute.getId() == attributeDefinition.getId()) {\n+    attribute.setValue(value);\n+    return true;\n+   }\n+  }\n+\n+  return false;\n+ }\n+\n+ public AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException {\n+  getPerunBl().getAuditer().log(perunSession, \"{} updated.\", attributeDefinition);\n+  return getAttributesManagerImpl().updateAttributeDefinition(perunSession, attributeDefinition);\n+ }\n+\n+\n+ private void checkAttributesDependencies(PerunSession sess, Resource resource, Group group, List<Attribute> attributes, boolean workWithGroupAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (workWithGroupAttributes) {\n+   List<Attribute> groupAttributes = new ArrayList<Attribute>();\n+   List<Attribute> groupResourceAttributes = new ArrayList<Attribute>();\n+   for (Attribute attr : attributes) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_RESOURCE_ATTR)) {\n+     groupResourceAttributes.add(attr);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_GROUP_ATTR)) {\n+     groupAttributes.add(attr);\n+    } else {\n+     throw new WrongAttributeAssignmentException(attr);\n+    }\n+   }\n+   checkAttributesDependencies(sess, resource, group, groupResourceAttributes);\n+   checkAttributesDependencies(sess, group, null, groupAttributes);\n+  } else {\n+   checkAttributesDependencies(sess, resource, group, attributes);\n+  }\n+ }\n+\n+\n+ private void checkAttributesDependencies(PerunSession sess, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (workWithUserAttributes) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   List<Attribute> userAttributes = new ArrayList<Attribute>();\n+   List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+   for (Attribute attr : attributes) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+     userAttributes.add(attr);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+     memberAttributes.add(attr);\n+    } else {\n+     throw new WrongAttributeAssignmentException(attr);\n+    }\n+   }\n+   checkAttributesDependencies(sess, member, null, memberAttributes);\n+   checkAttributesDependencies(sess, user, null, userAttributes);\n+  } else {\n+   checkAttributesDependencies(sess, member, null, attributes);\n+  }\n+ }\n+\n+\n+ private void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, User user, Facility facility, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  List<Attribute> userAttributes = new ArrayList<Attribute>();\n+  List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+  List<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n+  List<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n+  for (Attribute attr : attributes) {\n+   if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+    userAttributes.add(attr);\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+    memberAttributes.add(attr);\n+   } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n+           memberResourceAttributes.add(attr);\n+          } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n+           userFacilityAttributes.add(attr);\n+          } else {\n+           throw new WrongAttributeAssignmentException(attr);\n+          }\n+  }\n+  checkAttributesDependencies(sess, member, null, memberAttributes);\n+  checkAttributesDependencies(sess, user, null, userAttributes);\n+  checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+  checkAttributesDependencies(sess, resource, member, memberResourceAttributes);\n+ }\n+\n+\n+ private void checkAttributesDependencies(PerunSession sess, Resource resource, Member member, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (workWithUserAttributes) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   Facility facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+   List<Attribute> userAttributes = new ArrayList<Attribute>();\n+   List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+   List<Attribute> memberResourceAttributes = new ArrayList<Attribute>();\n+   List<Attribute> userFacilityAttributes = new ArrayList<Attribute>();\n+   for (Attribute attr : attributes) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+     userAttributes.add(attr);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+     memberAttributes.add(attr);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_RESOURCE_ATTR)) {\n+            memberResourceAttributes.add(attr);\n+           } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_FACILITY_ATTR)) {\n+            userFacilityAttributes.add(attr);\n+           } else {\n+            throw new WrongAttributeAssignmentException(attr);\n+           }\n+   }\n+   checkAttributesDependencies(sess, member, null, memberAttributes);\n+   checkAttributesDependencies(sess, user, null, userAttributes);\n+   checkAttributesDependencies(sess, facility, user, userFacilityAttributes);\n+   checkAttributesDependencies(sess, resource, member, memberResourceAttributes);\n+  } else {\n+   checkAttributesDependencies(sess, resource, member, attributes);\n+  }\n+ }\n+\n+\n+ private void checkAttributesDependencies(PerunSession sess, Member member, Group group, List<Attribute> attributes, boolean workWithUserAttributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (workWithUserAttributes) {\n+   User user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+   List<Attribute> userAttributes = new ArrayList<Attribute>();\n+   List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+   List<Attribute> memberGroupAttributes = new ArrayList<Attribute>();\n+   for (Attribute attr : attributes) {\n+    if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_USER_ATTR)) {\n+     userAttributes.add(attr);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_ATTR)) {\n+     memberAttributes.add(attr);\n+    } else if (getAttributesManagerImpl().isFromNamespace(sess, attr, NS_MEMBER_GROUP_ATTR)) {\n+            memberGroupAttributes.add(attr);\n+           } else {\n+            throw new WrongAttributeAssignmentException(attr);\n+           }\n+   }\n+   checkAttributesDependencies(sess, member, null, memberAttributes);\n+   checkAttributesDependencies(sess, user, null, userAttributes);\n+   checkAttributesDependencies(sess, member, group, memberGroupAttributes);\n+  } else {\n+   checkAttributesDependencies(sess, member, group, attributes);\n+  }\n+ }\n+\n+\n+ private void checkAttributesDependencies(PerunSession sess, Object primaryHolder, Object secondaryHolder, List<Attribute> attributes) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (attributes != null && !attributes.isEmpty()) {\n+\n+   for (Attribute attr : attributes) {\n+    checkAttributeDependencies(sess, new RichAttribute(primaryHolder, secondaryHolder, attr));\n+   }\n+  }\n+ }\n+\n+ public void checkAttributeDependencies(PerunSession sess, RichAttribute richAttr) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException, WrongReferenceAttributeValueException {\n+  if (getAllDependencies() == null || getAllDependencies().isEmpty()) log.error(\"Map of all dependencies is empty. If this is not test, its an error probably.\");\n+  if (richAttr == null || richAttr.getAttribute() == null) throw new InternalErrorException(\"RichAttribute or Attribute in it can't be null!\");\n+  else {\n+   //Get All attributeDef which are dependencies\n+   Set<AttributeDefinition> dependencies = getAllDependencies().get(new AttributeDefinition(richAttr.getAttribute()));\n+   if (dependencies != null && !dependencies.isEmpty()) {\n+\n+    for (AttributeDefinition dependency : dependencies) {\n+     List<RichAttribute> richAttributesToCheck;\n+     try {\n+      richAttributesToCheck = getRichAttributesWithHoldersForAttributeDefinition(sess, dependency, richAttr);\n+     } catch (AttributeNotExistsException ex) {\n+      //TODO better exception here (need to implement to all setMethods)\n+      throw new InternalErrorException(ex);\n+     } catch (VoNotExistsException ex) {\n+      //TODO better exception here (need to implement to all setMethods)\n+      throw new InternalErrorException(ex);\n+     }\n+\n+     for (RichAttribute richAttribute : richAttributesToCheck) {\n+      if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_VO_ATTR)) {\n+       if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Vo) {\n+        if (richAttribute.getSecondaryHolder() != null) {\n+         throw new InternalErrorException(\"Secondary Holder for VO Attribute must be null!\");\n+        } else {\n+         this.checkAttributeValue(sess, (Vo) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+        }\n+       } else {\n+        throw new InternalErrorException(\"For VO Attribute there must be VO in primaryHolder\");\n+       }\n+      } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_ATTR)) {\n+       if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+        if (richAttribute.getSecondaryHolder() != null) {\n+         throw new InternalErrorException(\"Secondary Holder for Group Attribute must be null!\");\n+        } else {\n+         this.checkAttributeValue(sess, (Group) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+        }\n+       } else {\n+        throw new InternalErrorException(\"For Group Attribute there must be Group in primaryHolder\");\n+       }\n+      } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_ATTR)) {\n+              if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+               if (richAttribute.getSecondaryHolder() != null) {\n+                throw new InternalErrorException(\"Secondary Holder for Member Attribute must be null!\");\n+               } else {\n+                this.checkAttributeValue(sess, (Member) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+               }\n+              } else {\n+               throw new InternalErrorException(\"For Member Attribute there must be Member in primaryHolder\");\n+              }\n+             } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_ATTR)) {\n+              if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n+               if (richAttribute.getSecondaryHolder() != null) {\n+                throw new InternalErrorException(\"Secondary Holder for User Attribute must be null!\");\n+               } else {\n+                this.checkAttributeValue(sess, (User) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+               }\n+              } else {\n+               throw new InternalErrorException(\"For User Attribute there must be User in primaryHolder\");\n+              }\n+             } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_RESOURCE_ATTR)) {\n+                     if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                      if (richAttribute.getSecondaryHolder() != null) {\n+                       throw new InternalErrorException(\"Secondary Holder for Resource Attribute must be null!\");\n+                      } else {\n+                       this.checkAttributeValue(sess, (Resource) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                      }\n+                     } else {\n+                      throw new InternalErrorException(\"For Resource Attribute there must be Resource in primaryHolder\");\n+                     }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_FACILITY_ATTR)) {\n+                     if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n+                      if (richAttribute.getSecondaryHolder() != null) {\n+                       throw new InternalErrorException(\"Secondary Holder for Facility Attribute must be null!\");\n+                      } else {\n+                       this.checkAttributeValue(sess, (Facility) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                      }\n+                     } else {\n+                      throw new InternalErrorException(\"For Facility Attribute there must be Facility in primaryHolder\");\n+                     }\n+                    } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_ENTITYLESS_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof String) {\n+                             if (richAttribute.getSecondaryHolder() != null) {\n+                              throw new InternalErrorException(\"Secondary Holder for Entityless Attribute must be null!\");\n+                             } else {\n+                              this.checkAttributeValue(sess, (String) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                             }\n+                            } else {\n+                             throw new InternalErrorException(\"For Entityless Attribute there must be String in primaryHolder\");\n+                            }\n+                           } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), AttributesManager.NS_HOST_ATTR)) {\n+                            if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Host) {\n+                             if (richAttribute.getSecondaryHolder() != null) {\n+                              throw new InternalErrorException(\"Secondary Holder for Host Attribute must be null!\");\n+                             } else {\n+                              this.checkAttributeValue(sess, (Host) richAttribute.getPrimaryHolder(), richAttribute.getAttribute());\n+                             }\n+                            } else {\n+                             throw new InternalErrorException(\"For Host Attribute there must be Host in primaryHolder\");\n+                            }\n+                           } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_GROUP_RESOURCE_ATTR)) {\n+                                   if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                    if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n+                                     this.checkAttributeValue(sess,\n+(Resource) richAttribute.getPrimaryHolder(),\n+(Group) richAttribute.getSecondaryHolder(),\n+richAttribute.getAttribute());\n+                                    } else {\n+                                     throw new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n+                                    }\n+                                   } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n+                                    if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                     this.checkAttributeValue(sess,\n+(Resource) richAttribute.getSecondaryHolder(),\n+(Group) richAttribute.getPrimaryHolder(),\n+richAttribute.getAttribute());\n+                                    } else {\n+                                     throw new InternalErrorException(\"Secondary Holder for Group_Resource Attribute is null or its not group or resource\");\n+                                    }\n+                                   } else {\n+                                    throw new InternalErrorException(\"For Group_Resource Attribute there must be Group or Resource in primaryHolder.\");\n+                                   }\n+                                  } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_RESOURCE_ATTR)) {\n+                                   if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Resource) {\n+                                    if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n+                                     this.checkAttributeValue(sess,\n+(Resource) richAttribute.getPrimaryHolder(),\n+(Member) richAttribute.getSecondaryHolder(),\n+richAttribute.getAttribute());\n+                                    } else {\n+                                     throw new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n+                                    }\n+                                   } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Resource) {\n+                                    if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                     this.checkAttributeValue(sess,\n+(Resource) richAttribute.getSecondaryHolder(),\n+(Member) richAttribute.getPrimaryHolder(),\n+richAttribute.getAttribute());\n+                                    } else {\n+                                     throw new InternalErrorException(\"Secondary Holder for Member_Resource Attribute is null or its not member or resource\");\n+                                    }\n+                                   } else {\n+                                    throw new InternalErrorException(\"For Member_Resource Attribute there must be Member or Resource in primaryHolder.\");\n+                                   }\n+                                  } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_MEMBER_GROUP_ATTR)) {\n+                                          if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Group) {\n+                                           if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Member) {\n+                                            this.checkAttributeValue(sess,\n+(Member) richAttribute.getSecondaryHolder(),\n+(Group) richAttribute.getPrimaryHolder(),\n+richAttribute.getAttribute());\n+                                           } else {\n+                                            throw new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n+                                           }\n+                                          } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Group) {\n+                                           if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Member) {\n+                                            this.checkAttributeValue(sess,\n+(Member) richAttribute.getPrimaryHolder(),\n+(Group) richAttribute.getSecondaryHolder(),\n+richAttribute.getAttribute());\n+                                           } else {\n+                                            throw new InternalErrorException(\"Secondary Holder for Member_Group Attribute is null or its not member or group\");\n+                                           }\n+                                          } else {\n+                                           throw new InternalErrorException(\"For Member_Group Attribute there must be Member or Group in primaryHolder.\");\n+                                          }\n+                                         } else if (getAttributesManagerImpl().isFromNamespace(sess, richAttribute.getAttribute(), NS_USER_FACILITY_ATTR)) {\n+                                          if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof Facility) {\n+                                           if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof User) {\n+                                            this.checkAttributeValue(sess,\n+(Facility) richAttribute.getPrimaryHolder(),\n+(User) richAttribute.getSecondaryHolder(),\n+richAttribute.getAttribute());\n+                                           } else {\n+                                            throw new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n+                                           }\n+                                          } else if (richAttribute.getSecondaryHolder() != null && richAttribute.getSecondaryHolder() instanceof Facility) {\n+                                           if (richAttribute.getPrimaryHolder() != null && richAttribute.getPrimaryHolder() instanceof User) {\n+                                            this.checkAttributeValue(sess,\n+(Facility) richAttribute.getSecondaryHolder(),\n+(User) richAttribute.getPrimaryHolder(),\n+richAttribute.getAttribute());\n+                                           } else {\n+                                            throw new InternalErrorException(\"Secondary Holder for Facility_User Attribute is null or its not facility or user\");\n+                                           }\n+                                          } else {\n+                                           throw new InternalErrorException(\"For Facility_User Attribute there must be Facility or User in primaryHolder.\");\n+                                          }\n+                                         }\n+     }\n+    }\n+   }\n+  }\n+ }\n+\n+ public List<RichAttribute> getRichAttributesWithHoldersForAttributeDefinition(PerunSession sess, AttributeDefinition attrDef, RichAttribute aidingAttr) throws InternalErrorException, AttributeNotExistsException, VoNotExistsException, WrongAttributeAssignmentException, WrongAttributeValueException, WrongReferenceAttributeValueException {\n+  //Filling objects from aidingAttr\n+  if (aidingAttr == null) throw new InternalErrorException(\"Aiding attribute cant be null.\");\n+  if (attrDef == null) throw new InternalErrorException(\"attrDef cant be null.\");\n+  List<RichAttribute> listOfRichAttributes = new ArrayList<RichAttribute>();\n+\n+  //All possible useful objects\n+  Vo vo = null;\n+  Facility facility = null;\n+  Group group = null;\n+  Member member = null;\n+  User user = null;\n+  Host host = null;\n+  Resource resource = null;\n+  String key = null;\n+  Attribute attribute = null;\n+\n+  //Get object for primaryHolder of aidingAttr\n+  if (aidingAttr.getPrimaryHolder() != null) {\n+   if (aidingAttr.getPrimaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getPrimaryHolder();\n+   else if (aidingAttr.getPrimaryHolder() instanceof Facility) facility = (Facility) aidingAttr.getPrimaryHolder();\n+   else if (aidingAttr.getPrimaryHolder() instanceof Group) group = (Group) aidingAttr.getPrimaryHolder();\n+   else if (aidingAttr.getPrimaryHolder() instanceof Member) member = (Member) aidingAttr.getPrimaryHolder();\n+   else if (aidingAttr.getPrimaryHolder() instanceof User) user = (User) aidingAttr.getPrimaryHolder();\n+   else if (aidingAttr.getPrimaryHolder() instanceof Host) host = (Host) aidingAttr.getPrimaryHolder();\n+   else if (aidingAttr.getPrimaryHolder() instanceof Resource) resource = (Resource) aidingAttr.getPrimaryHolder();\n+   else if (aidingAttr.getPrimaryHolder() instanceof String) key = (String) aidingAttr.getPrimaryHolder();\n+   else {\n+         throw new InternalErrorException(\"There is unrecognized object in primaryHolder of aidingAttr.\");\n+        }\n+  } else {\n+   throw new InternalErrorException(\"Aiding attribute must have primaryHolder which is not null.\");\n+  }\n+\n+  //Get object for secondaryHolder of aidingAttr\n+  if (aidingAttr.getSecondaryHolder() != null) {\n+   if (aidingAttr.getSecondaryHolder() instanceof Vo) vo = (Vo) aidingAttr.getSecondaryHolder();\n+   else if (aidingAttr.getSecondaryHolder() instanceof Facility) facility = (Facility) aidingAttr.getSecondaryHolder();\n+   else if (aidingAttr.getSecondaryHolder() instanceof Group) group = (Group) aidingAttr.getSecondaryHolder();\n+   else if (aidingAttr.getSecondaryHolder() instanceof Member) member = (Member) aidingAttr.getSecondaryHolder();\n+   else if (aidingAttr.getSecondaryHolder() instanceof User) user = (User) aidingAttr.getSecondaryHolder();\n+   else if (aidingAttr.getSecondaryHolder() instanceof Host) host = (Host) aidingAttr.getSecondaryHolder();\n+   else if (aidingAttr.getSecondaryHolder() instanceof Resource) resource = (Resource) aidingAttr.getSecondaryHolder();\n+   else if (aidingAttr.getSecondaryHolder() instanceof String) key = (String) aidingAttr.getSecondaryHolder();\n+   else {\n+         throw new InternalErrorException(\"There is unrecognized object in secondaryHolder of aidingAttr\");\n+        }\n+  } // If not, its ok, secondary holder can be null\n+\n+  //First i choose what i am looking for by descriptionAttr\n+  //IMPORTANT: If member is Invalid, all objects bind to him are not accept\n+\n+  //!!! PROJIT VSECHNY DOTAZY A POUZIT JAKO KLICOVOU VRSTVU KDE TO JDE VRSTVU S MEMBERY PODLE VALIDITY !!!\n+  if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_VO_ATTR)) {\n+   //Second on the fact what i really have in aidingAttr i try to find what i am looking for\n+   if (resource != null && member != null) {\n+    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+     vo = getPerunBl().getVosManagerBl().getVoById(sess, member.getVoId());\n+     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+     listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+    }\n+   } else if (group != null && resource != null) {\n+    vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+    listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+   } else if (user != null && facility != null) {\n+           List<Vo> vosFromUser = new ArrayList<Vo>();\n+           List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+           List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+           for (Member memberElement : membersFromUser) {\n+            resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+           }\n+\n+           for (Resource resourceElement : resourcesFromUser) {\n+            vosFromUser.add(getPerunBl().getResourcesManagerBl().getVo(sess, resourceElement));\n+           }\n+           List<Vo> vosFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n+           vosFromFacility.retainAll(vosFromUser);\n+           vosFromFacility = new ArrayList<Vo>(new HashSet<Vo>(vosFromFacility));\n+           for (Vo voElement : vosFromFacility) {\n+            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+           }\n+          } else if (member != null && group != null) {\n+           vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+           attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+           listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+          } else if (group != null) {\n+                  vo = getPerunBl().getVosManagerBl().getVoById(sess, group.getVoId());\n+                  attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                  listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+                 } else if (member != null) {\n+                  if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                   vo = getPerunBl().getMembersManagerBl().getMemberVo(sess, member);\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+                  }\n+                 } else if (resource != null) {\n+                         vo = getPerunBl().getVosManagerBl().getVoById(sess, resource.getVoId());\n+                         attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                         listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+                        } else if (user != null) {\n+                         List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                         List<Vo> vosFromMembers = new ArrayList<Vo>();\n+                         for (Member memberElement : membersFromUser) {\n+                          if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                           vosFromMembers.add(getPerunBl().getMembersManagerBl().getMemberVo(sess, memberElement));\n+                          }\n+                         }\n+\n+                         for (Vo voElement : vosFromMembers) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                         }\n+                        } else if (host != null) {\n+                                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                List<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n+                                for (Vo voElement : vos) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                                }\n+                               } else if (facility != null) {\n+                                List<Vo> vos = getPerunBl().getFacilitiesManagerBl().getAllowedVos(sess, facility);\n+                                for (Vo voElement : vos) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                                }\n+                               } else if (vo != null) {\n+                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, vo, attrDef.getName());\n+                                       listOfRichAttributes.add(new RichAttribute(vo, null, attribute));\n+                                      } else if (key != null) {\n+                                       List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                                       for (Vo voElement : vos) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, voElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(voElement, null, attribute));\n+                                       }\n+                                      }\n+  } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_ATTR)) {\n+   if (resource != null && member != null) {\n+    if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+     List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+     List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+     groupsFromResource.retainAll(groupsFromMember);\n+     groupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n+     for (Group groupElement : groupsFromResource) {\n+      attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+      listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+     }\n+    }\n+   } else if (group != null && resource != null) {\n+    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n+    listOfRichAttributes.add(new RichAttribute(group, null, attribute));\n+   } else if (user != null && facility != null) {\n+           List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+           Set<Group> groupsFromMembers = new HashSet<Group>();\n+           for (Member memberElement : members) {\n+            if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+             groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+            }\n+           }\n+           groupsFromMembers.retainAll(getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility));\n+           for (Group groupElement : groupsFromMembers) {\n+            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+           }\n+          } else if (member != null && group != null) {\n+           attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n+           listOfRichAttributes.add(new RichAttribute(group, null, attribute));\n+          } else if (group != null) {\n+                  attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, group, attrDef.getName());\n+                  listOfRichAttributes.add(new RichAttribute(group, null, attribute));\n+                 } else if (member != null) {\n+                  if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                   List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                   for (Group groupElement : groupsFromMember) {\n+                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                    listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                   }\n+                  }\n+                 } else if (resource != null) {\n+                         List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                         for (Group groupElement : groupsFromResource) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                         }\n+                        } else if (user != null) {\n+                         List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                         List<Group> groupsFromMembers = new ArrayList<Group>();\n+                         for (Member memberElement : members) {\n+                          if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                           groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                          }\n+                         }\n+                         groupsFromMembers = new ArrayList<Group>(new HashSet<Group>(groupsFromMembers));\n+                         for (Group groupElement : groupsFromMembers) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                         }\n+                        } else if (host != null) {\n+                                facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                                for (Group groupElement : groupsFromFacility) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                                }\n+                               } else if (facility != null) {\n+                                List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                                for (Group groupElement : groupsFromFacility) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                                }\n+                               } else if (vo != null) {\n+                                       List<Group> groups = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n+                                       for (Group groupElement : groups) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                                       }\n+                                      } else if (key != null) {\n+                                       List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                                       List<Group> groupsFromVos = new ArrayList<Group>();\n+                                       for (Vo voElement : vos) {\n+                                        groupsFromVos.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n+                                       }\n+                                       groupsFromVos = new ArrayList<Group>(new HashSet<Group>(groupsFromVos));\n+                                       for (Group groupElement : groupsFromVos) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, groupElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(groupElement, null, attribute));\n+                                       }\n+                                      }\n+  } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_FACILITY_ATTR)) {\n+          if (resource != null && member != null) {\n+           if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+            facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+           }\n+          } else if (group != null && resource != null) {\n+           facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+           attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+           listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+          } else if (user != null && facility != null) {\n+                  List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                  if (facilitiesFromUser.contains(facility)) {\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+                  }\n+                 } else if (member != null && group != null) {\n+                  List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                  List<Facility> facilitiesFromResources = new ArrayList<>();\n+                  for (Resource resourceElement : resources) {\n+                   facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                  }\n+                  facilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n+                  for (Facility facilityElement : facilitiesFromResources) {\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                  }\n+                 } else if (group != null) {\n+                         List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                         List<Facility> facilitiesFromResources = new ArrayList<Facility>();\n+                         for (Resource resourceElemenet : resources) {\n+                          facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n+                         }\n+                         facilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n+                         for (Facility facilityElement : facilitiesFromResources) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                         }\n+                        } else if (member != null) {\n+                         if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                          List<Group> groupsForMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                          List<Resource> resourcesFromMember = new ArrayList<Resource>();\n+                          for (Group groupElement : groupsForMember) {\n+                           resourcesFromMember.addAll(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement));\n+                          }\n+                          resourcesFromMember = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromMember));\n+                          for (Resource resourceElement : resourcesFromMember) {\n+                           Facility facilityFromMember = getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement);\n+                           attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityFromMember, attrDef.getName());\n+                           listOfRichAttributes.add(new RichAttribute(facilityFromMember, null, attribute));\n+                          }\n+                         }\n+                        } else if (resource != null) {\n+                                facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                                listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+                               } else if (user != null) {\n+                                List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                                for (Facility facilityElement : facilities) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                                }\n+                               } else if (host != null) {\n+                                       facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                                       listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+                                      } else if (facility != null) {\n+                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, attrDef.getName());\n+                                       listOfRichAttributes.add(new RichAttribute(facility, null, attribute));\n+                                      } else if (vo != null) {\n+                                              List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                                              List<Facility> facilitiesFromResources = new ArrayList<Facility>();\n+                                              for (Resource resourceElemenet : resources) {\n+                                               facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElemenet));\n+                                              }\n+                                              facilitiesFromResources = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromResources));\n+                                              for (Facility facilityElement : facilitiesFromResources) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                                              }\n+                                             } else if (key != null) {\n+                                              List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                                              for (Facility facilityElement : facilities) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(facilityElement, null, attribute));\n+                                              }\n+                                             }\n+         } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_ATTR)) {\n+          if (resource != null && member != null) {\n+           if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n+            listOfRichAttributes.add(new RichAttribute(member, null, attribute));\n+           }\n+          } else if (group != null && resource != null) {\n+           List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+           List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+           membersFromResource.retainAll(membersFromGroup);\n+           membersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n+           for (Member memberElement : membersFromResource) {\n+            if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+             attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+             listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+            }\n+           }\n+          } else if (user != null && facility != null) {\n+                  List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                  List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                  membersFromUser.retainAll(membersFromFacility);\n+                  membersFromUser = new ArrayList<Member>(new HashSet<Member>(membersFromUser));\n+                  for (Member memberElement : membersFromUser) {\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                  }\n+                 } else if (member != null && group != null) {\n+                  if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(member, null, attribute));\n+                  }\n+                 } else if (group != null) {\n+                         List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                         for (Member memberElement : membersFromGroup) {\n+                          if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                           attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                           listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                          }\n+                         }\n+                        } else if (member != null) {\n+                         if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(member, null, attribute));\n+                         }\n+                        } else if (resource != null) {\n+                                List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                                for (Member memberElement : membersFromResource) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                                }\n+                               } else if (user != null) {\n+                                List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                for (Member memberElement : membersFromUser) {\n+                                 if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                  attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                                  listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                                 }\n+                                }\n+                               } else if (host != null) {\n+                                       facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                       List<Member> membersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                                       for (Member memberElement : membersFromHost) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                                       }\n+                                      } else if (facility != null) {\n+                                       List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                                       for (Member memberElement : membersFromFacility) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                                       }\n+                                      } else if (vo != null) {\n+                                              List<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                                              for (Member memberElement : membersFromVo) {\n+                                               if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                                                listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                                               }\n+                                              }\n+                                             } else if (key != null) {\n+                                              List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                                              List<Member> allMembers = new ArrayList<Member>();\n+                                              for (Vo voElement : vos) {\n+                                               allMembers.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n+                                              }\n+                                              allMembers = new ArrayList<Member>(new HashSet<Member>(allMembers));\n+                                              for (Member memberElement : allMembers) {\n+                                               if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, attrDef.getName());\n+                                                listOfRichAttributes.add(new RichAttribute(memberElement, null, attribute));\n+                                               }\n+                                              }\n+                                             }\n+         } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_RESOURCE_ATTR)) {\n+                 if (resource != null && member != null) {\n+                  if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n+                  }\n+                 } else if (group != null && resource != null) {\n+                  attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+                  listOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n+                 } else if (user != null && facility != null) {\n+                         List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                         List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                         for (Member memberElement : members) {\n+                          if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                           resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                          }\n+                         }\n+                         List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                         resourcesFromUser.retainAll(resourcesFromFacility);\n+                         resourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n+                         for (Resource resourceElement : resourcesFromUser) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                         }\n+                        } else if (member != null && group != null) {\n+                         List<Resource> resourcesFromGroup = new ArrayList<>(new HashSet<>(getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group)));\n+                         for (Resource resourceElement : resourcesFromGroup) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                         }\n+                        } else if (group != null) {\n+                                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                for (Resource resourceElement : resourcesFromGroup) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                                }\n+                               } else if (member != null) {\n+                                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                 List<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                                 for (Resource resourceElement : resourcesFromMember) {\n+                                  attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                                  listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                                 }\n+                                }\n+                               } else if (resource != null) {\n+                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, attrDef.getName());\n+                                       listOfRichAttributes.add(new RichAttribute(resource, null, attribute));\n+                                      } else if (user != null) {\n+                                       List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                       List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                                       for (Member memberElement : members) {\n+                                        if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                         resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                                        }\n+                                       }\n+                                       resourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n+                                       for (Resource resourceElement : resourcesFromUser) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                                       }\n+                                      } else if (host != null) {\n+                                              facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                              List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                                              for (Resource resourceElement : resourcesFromFacility) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                                              }\n+                                             } else if (facility != null) {\n+                                              List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                                              for (Resource resourceElement : resourcesFromFacility) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                                              }\n+                                             } else if (vo != null) {\n+                                                     List<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                                                     for (Resource resourceElement : resourcesFromVo) {\n+                                                      attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                                                      listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                                                     }\n+                                                    } else if (key != null) {\n+                                                     List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                                                     List<Resource> allResources = new ArrayList<Resource>();\n+                                                     for (Vo voElement : vos) {\n+                                                      allResources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n+                                                     }\n+                                                     allResources = new ArrayList<Resource>(new HashSet<Resource>(allResources));\n+                                                     for (Resource resourceElement : allResources) {\n+                                                      attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, attrDef.getName());\n+                                                      listOfRichAttributes.add(new RichAttribute(resourceElement, null, attribute));\n+                                                     }\n+                                                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_ATTR)) {\n+                 if (resource != null && member != null) {\n+                  if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                   user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                  }\n+                 } else if (group != null && resource != null) {\n+                  List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                  List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                  members.retainAll(membersFromResource);\n+                  List<User> usersFromGroup = new ArrayList<User>();\n+                  for (Member memberElement : members) {\n+                   usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                  }\n+                  usersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n+                  for (User userElement : usersFromGroup) {\n+                   attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                   listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                  }\n+                 } else if (user != null && facility != null) {\n+                         List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                         if (facilitiesFromUser.contains(user)) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                         }\n+                        } else if (member != null && group != null) {\n+                         if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                          user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                         }\n+                        } else if (group != null) {\n+                                List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                                List<User> usersFromGroup = new ArrayList<User>();\n+                                for (Member memberElement : members) {\n+                                 if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                  usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                                 }\n+                                }\n+                                usersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n+                                for (User userElement : usersFromGroup) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                                }\n+                               } else if (member != null) {\n+                                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                 user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                                }\n+                               } else if (resource != null) {\n+                                       List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+                                       for (User userElement : usersFromResource) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                                       }\n+                                      } else if (user != null) {\n+                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, user, attrDef.getName());\n+                                       listOfRichAttributes.add(new RichAttribute(user, null, attribute));\n+                                      } else if (host != null) {\n+                                              facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                              List<User> usersFromHost = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                                              for (User userElement : usersFromHost) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                                              }\n+                                             } else if (facility != null) {\n+                                              List<User> usersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                                              for (User userElement : usersFromFacility) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                                              }\n+                                             } else if (vo != null) {\n+                                                     List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                                                     List<User> usersFromVo = new ArrayList<User>();\n+                                                     for (Member memberElement : members) {\n+                                                      if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                       usersFromVo.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                                                      }\n+                                                     }\n+                                                     usersFromVo = new ArrayList<User>(new HashSet<User>(usersFromVo));\n+                                                     for (User userElement : usersFromVo) {\n+                                                      attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                                                      listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                                                     }\n+                                                    } else if (key != null) {\n+                                                     List<User> allUsers = getPerunBl().getUsersManagerBl().getUsers(sess);\n+                                                     for (User userElement : allUsers) {\n+                                                      attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, userElement, attrDef.getName());\n+                                                      listOfRichAttributes.add(new RichAttribute(userElement, null, attribute));\n+                                                     }\n+                                                    }\n+                } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_HOST_ATTR)) {\n+                        if (resource != null && member != null) {\n+                         if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                          facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                          List<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                          for (Host hostElement : hostsFromResource) {\n+                           attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                           listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                          }\n+                         }\n+                        } else if (group != null && resource != null) {\n+                         facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                         List<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                         for (Host hostElement : hostsFromResource) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                         }\n+                        } else if (user != null && facility != null) {\n+                                if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facility)) {\n+                                 List<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                                 for (Host hostElement : hostsFromFacility) {\n+                                  attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                  listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                 }\n+                                }\n+                               } else if (member != null && group != null) {\n+                                List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                List<Facility> facilitiesFromResources = new ArrayList<>();\n+                                for (Resource resourceElement : resourcesFromGroup) {\n+                                 facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                }\n+                                facilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n+                                List<Host> hostsFromFacilities = new ArrayList<>();\n+                                for (Facility facilityElement : facilitiesFromResources) {\n+                                 hostsFromFacilities.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                                }\n+\n+                                for (Host hostElement : hostsFromFacilities) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                }\n+                               } else if (group != null) {\n+                                       List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                       List<Facility> facilities = new ArrayList<Facility>();\n+                                       for (Resource resourceElement : resources) {\n+                                        facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                       }\n+                                       List<Host> hostsFromGroup = new ArrayList<Host>();\n+                                       for (Facility facilityElement : facilities) {\n+                                        hostsFromGroup.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                                       }\n+                                       hostsFromGroup = new ArrayList<Host>(new HashSet<Host>(hostsFromGroup));\n+                                       for (Host hostElement : hostsFromGroup) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                       }\n+                                      } else if (member != null) {\n+                                       if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                        List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                                        List<Facility> facilities = new ArrayList<Facility>();\n+                                        for (Resource resourceElement : resources) {\n+                                         facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                        }\n+                                        List<Host> hostsFromMembers = new ArrayList<Host>();\n+                                        for (Facility facilityElement : facilities) {\n+                                         hostsFromMembers.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                                        }\n+                                        hostsFromMembers = new ArrayList<Host>(new HashSet<Host>(hostsFromMembers));\n+                                        for (Host hostElement : hostsFromMembers) {\n+                                         attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                         listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                        }\n+                                       }\n+                                      } else if (resource != null) {\n+                                              facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                                              List<Host> hostsFromResource = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                                              for (Host hostElement : hostsFromResource) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                              }\n+                                             } else if (user != null) {\n+                                              List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                                              List<Host> hostsFromUser = new ArrayList<Host>();\n+                                              for (Facility facilityElement : facilities) {\n+                                               hostsFromUser.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                                              }\n+                                              hostsFromUser = new ArrayList<Host>(new HashSet<Host>(hostsFromUser));\n+                                              for (Host hostElement : hostsFromUser) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                              }\n+                                             } else if (host != null) {\n+                                                     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, host, attrDef.getName());\n+                                                     listOfRichAttributes.add(new RichAttribute(host, null, attribute));\n+                                                    } else if (facility != null) {\n+                                                     List<Host> hostsFromFacility = getPerunBl().getFacilitiesManagerBl().getHosts(sess, facility);\n+                                                     for (Host hostElement : hostsFromFacility) {\n+                                                      attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                                      listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                                     }\n+                                                    } else if (vo != null) {\n+                                                            List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                                                            List<Facility> facilities = new ArrayList<Facility>();\n+                                                            for (Resource resourceElement : resources) {\n+                                                             facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                                            }\n+                                                            List<Host> hostsFromVo = new ArrayList<Host>();\n+                                                            for (Facility facilityElement : facilities) {\n+                                                             hostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                                                            }\n+                                                            hostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n+                                                            for (Host hostElement : hostsFromVo) {\n+                                                             attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                                             listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                                            }\n+                                                           } else if (key != null) {\n+                                                            List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                                                            List<Host> hostsFromVo = new ArrayList<Host>();\n+                                                            for (Facility facilityElement : facilities) {\n+                                                             hostsFromVo.addAll(getPerunBl().getFacilitiesManagerBl().getHosts(sess, facilityElement));\n+                                                            }\n+                                                            hostsFromVo = new ArrayList<Host>(new HashSet<Host>(hostsFromVo));\n+                                                            for (Host hostElement : hostsFromVo) {\n+                                                             attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, hostElement, attrDef.getName());\n+                                                             listOfRichAttributes.add(new RichAttribute(hostElement, null, attribute));\n+                                                            }\n+                                                           }\n+                       } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, AttributesManager.NS_ENTITYLESS_ATTR)) {\n+                        if (key != null) {\n+                         attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, key, attrDef.getName());\n+                         listOfRichAttributes.add(new RichAttribute(key, null, attribute));\n+                        } else {\n+                         List<String> keys = this.getEntitylessKeys(sess, attrDef);\n+                         for (String keyElement : keys) {\n+                          attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, keyElement, attrDef.getName());\n+                          listOfRichAttributes.add(new RichAttribute(keyElement, null, attribute));\n+                         }\n+                        }\n+                       } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_GROUP_RESOURCE_ATTR)) {\n+                               if (resource != null && member != null) {\n+                                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                 List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                                 List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                                 groupsFromResource.retainAll(groupsFromMember);\n+                                 groupsFromResource = new ArrayList<Group>(new HashSet<Group>(groupsFromResource));\n+                                 for (Group groupElement : groupsFromResource) {\n+                                  attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n+                                  listOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n+                                 }\n+                                }\n+                               } else if (group != null && resource != null) {\n+                                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, group, attrDef.getName());\n+                                listOfRichAttributes.add(new RichAttribute(resource, group, attribute));\n+                               } else if (user != null && facility != null) {\n+    //Groups from User\n+                                       List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                       List<Group> groupsFromUser = new ArrayList<Group>();\n+                                       for (Member memberElement : members) {\n+                                        if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                         groupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                                        }\n+                                       }\n+    //Retain of Groups from facility\n+                                       List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                                       groupsFromFacility.retainAll(groupsFromUser);\n+    //Resources from user\n+                                       List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                       List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                                       for (Member memberElement : membersFromUser) {\n+                                        if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                         resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                                        }\n+                                       }\n+    //Resource from facility\n+                                       List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+    //Retain of Resources\n+                                       resourcesFromFacility.retainAll(resourcesFromUser);\n+    //All possibilities\n+                                       resourcesFromFacility = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromFacility));\n+                                       for (Resource resourceElement : resourcesFromFacility) {\n+                                        List<Group> groupsForResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                                        groupsForResourceElement.retainAll(groupsFromFacility);\n+                                        groupsForResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsForResourceElement));\n+                                        for (Group groupElement : groupsForResourceElement) {\n+                                         attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                                         listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                                        }\n+                                       }\n+                                      } else if (member != null && group != null) {\n+    // there is no need to get Resources from Member because Members are only in those groups\n+    // from which we already took Resources\n+                                       List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                       for (Resource resourceElement : resourcesFromGroup) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n+                                       }\n+                                      } else if (group != null) {\n+                                              List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                              for (Resource resourceElement : resourcesFromGroup) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, group, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(resourceElement, group, attribute));\n+                                              }\n+                                             } else if (member != null) {\n+                                              if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                               List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                                               List<Resource> resourcesFromMember = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                                               for (Resource resourceElement : resourcesFromMember) {\n+                                                List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                                                groupsFromResourceElement.retainAll(groupsFromMember);\n+                                                groupsFromResourceElement = new ArrayList<Group>(new HashSet<Group>(groupsFromResourceElement));\n+                                                for (Group groupElement : groupsFromResourceElement) {\n+                                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                                                 listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                                                }\n+                                               }\n+                                              }\n+                                             } else if (resource != null) {\n+                                                     List<Group> groupsFromResource = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                                                     for (Group groupElement : groupsFromResource) {\n+                                                      attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, groupElement, attrDef.getName());\n+                                                      listOfRichAttributes.add(new RichAttribute(resource, groupElement, attribute));\n+                                                     }\n+                                                    } else if (user != null) {\n+                                                     List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                                     List<Group> groupsFromUser = new ArrayList<Group>();\n+                                                     List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                                                     for (Member memberElement : members) {\n+                                                      if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                       groupsFromUser.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                                                       resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                                                      }\n+                                                     }\n+                                                     groupsFromUser = new ArrayList<Group>(new HashSet<Group>(groupsFromUser));\n+                                                     for (Group groupElement : groupsFromUser) {\n+                                                      List<Resource> resourcesFromGroupElement = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, groupElement);\n+                                                      resourcesFromGroupElement.retainAll(resourcesFromUser);\n+                                                      resourcesFromGroupElement = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromGroupElement));\n+                                                      for (Resource resourceElement : resourcesFromGroupElement) {\n+                                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                                                       listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                                                      }\n+                                                     }\n+                                                    } else if (host != null) {\n+                                                            facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                                            List<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                                                            for (Resource resourceElement : resourcesFromHost) {\n+                                                             List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                                                             for (Group groupElement : groupsFromResourceElement) {\n+                                                              attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                                                              listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                                                             }\n+                                                            }\n+                                                           } else if (facility != null) {\n+                                                            List<Resource> resourcesFromHost = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                                                            for (Resource resourceElement : resourcesFromHost) {\n+                                                             List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                                                             for (Group groupElement : groupsFromResourceElement) {\n+                                                              attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                                                              listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                                                             }\n+                                                            }\n+                                                           } else if (vo != null) {\n+                                                                   List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                                                                   for (Resource resourceElement : resources) {\n+                                                                    List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                                                                    for (Group groupElement : groupsFromResourceElement) {\n+                                                                     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                                                                     listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                                                                    }\n+                                                                   }\n+                                                                  } else if (key != null) {\n+                                                                   List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                                                                   List<Resource> resources = new ArrayList<Resource>();\n+                                                                   for (Facility facilityElement : facilities) {\n+                                                                    resources.addAll(getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facilityElement));\n+                                                                   }\n+                                                                   resources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n+                                                                   for (Resource resourceElement : resources) {\n+                                                                    List<Group> groupsFromResourceElement = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resourceElement);\n+                                                                    for (Group groupElement : groupsFromResourceElement) {\n+                                                                     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, groupElement, attrDef.getName());\n+                                                                     listOfRichAttributes.add(new RichAttribute(resourceElement, groupElement, attribute));\n+                                                                    }\n+                                                                   }\n+                                                                  }\n+                              } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_GROUP_ATTR)) {\n+                               if (resource != null && member != null) {\n+                                List<Group> groupFromMembers = new ArrayList<>();\n+                                if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                 groupFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                                }\n+                                List<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                                groupsFromResources.retainAll(groupFromMembers);\n+                                groupsFromResources = new ArrayList<>(new HashSet<>(groupsFromResources));\n+                                for (Group groupElement : groupsFromResources) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(member, group, attribute));\n+                                }\n+                               } else if (group != null && resource != null) {\n+    // there is no need to get Members from Resource because needed Members are only from 'group' variable\n+    // which we already have. Other Members (aquired from Resource) than from 'group' variable will be redundant because\n+    // they will be not assigned to it.\n+                                List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                                for (Member memberElement : membersFromGroup) {\n+                                 attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n+                                 listOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n+                                }\n+                               } else if (user != null && facility != null) {\n+    // get all groups from facility\n+                                       List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+    // get all groups from user\n+                                       List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                       Set<Group> groupsFromMembers = new HashSet<>();\n+                                       for (Member memberElement : membersFromUser) {\n+                                        groupsFromMembers.addAll(getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement));\n+                                       }\n+    // retain of groups\n+                                       groupsFromMembers.retainAll(groupsFromFacility);\n+                                       List<Group> retainedGroups = new ArrayList<>(groupsFromMembers);\n+    // all possible groups\n+                                       for (Group groupElement : retainedGroups) {\n+     // get all members for 'groupElement' variable\n+                                        List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+     // all possibilities\n+                                        for (Member memberElement : membersFromGroup) {\n+                                         attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                                         listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                                        }\n+                                       }\n+                                      } else if (member != null && group != null) {\n+                                       if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, group, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(member, group, attribute));\n+                                       }\n+                                      } else if (group != null) {\n+                                              List<Member> membersFromGroups = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                                              for (Member memberElement : membersFromGroups) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, group, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(memberElement, group, attribute));\n+                                              }\n+                                             } else if (member != null) {\n+                                              if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                               List<Group> groupsFromMembers = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, member);\n+                                               for (Group groupElement : groupsFromMembers) {\n+                                                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, member, groupElement, attrDef.getName());\n+                                                listOfRichAttributes.add(new RichAttribute(member, groupElement, attribute));\n+                                               }\n+                                              }\n+                                             } else if (resource != null) {\n+                                                     List<Group> groupsFromResources = getPerunBl().getResourcesManagerBl().getAssignedGroups(sess, resource);\n+                                                     for (Group groupElement : groupsFromResources) {\n+     // get all members for 'groupElement' variable\n+                                                      List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                                                      for (Member memberElement : membersFromGroup) {\n+                                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                                                       listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                                                      }\n+                                                     }\n+                                                    } else if (user != null) {\n+                                                     List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                                     for (Member memberElement : membersFromUser) {\n+                                                      if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+      // get all groups for 'memberElement' variable\n+                                                       List<Group> groupsFromMember = getPerunBl().getGroupsManagerBl().getAllMemberGroups(sess, memberElement);\n+                                                       for (Group groupElement : groupsFromMember) {\n+                                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                                                        listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                                                       }\n+                                                      }\n+                                                     }\n+                                                    } else if (host != null) {\n+                                                            facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                                            List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                                                            for (Group groupElement : groupsFromFacility) {\n+     // get all members for 'groupElement' variable\n+                                                             List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                                                             for (Member memberElement : membersFromGroup) {\n+                                                              attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                                                              listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                                                             }\n+                                                            }\n+                                                           } else if (facility != null) {\n+                                                            List<Group> groupsFromFacility = getPerunBl().getGroupsManagerBl().getAssignedGroupsToFacility(sess, facility);\n+                                                            for (Group groupElement : groupsFromFacility) {\n+     // get all members for 'groupElement' variable\n+                                                             List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                                                             for (Member memberElement : membersFromGroup) {\n+                                                              attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                                                              listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                                                             }\n+                                                            }\n+                                                           } else if (vo != null) {\n+                                                                   List<Group> groupsFromVo = getPerunBl().getGroupsManagerBl().getAllGroups(sess, vo);\n+                                                                   for (Group groupElement : groupsFromVo) {\n+     // get all members for 'groupElement' variable\n+                                                                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                                                                    for (Member memberElement : membersFromGroup) {\n+                                                                     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                                                                     listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                                                                    }\n+                                                                   }\n+                                                                  } else if (key != null) {\n+                                                                   List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                                                                   List<Group> groupsFromVo = new ArrayList<>();\n+                                                                   for (Vo voElement : vos) {\n+                                                                    groupsFromVo.addAll(getPerunBl().getGroupsManagerBl().getAllGroups(sess, voElement));\n+                                                                   }\n+                                                                   groupsFromVo = new ArrayList<>(new HashSet<>(groupsFromVo));\n+                                                                   for (Group groupElement : groupsFromVo) {\n+     // get all members for 'groupElement' variable\n+                                                                    List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group, Status.VALID);\n+                                                                    for (Member memberElement : membersFromGroup) {\n+                                                                     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, memberElement, groupElement, attrDef.getName());\n+                                                                     listOfRichAttributes.add(new RichAttribute(memberElement, groupElement, attribute));\n+                                                                    }\n+                                                                   }\n+                                                                  }\n+                              } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_MEMBER_RESOURCE_ATTR)) {\n+                                      if (resource != null && member != null) {\n+                                       if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, member, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(resource, member, attribute));\n+                                       }\n+                                      } else if (group != null && resource != null) {\n+                                       List<Member> membersFromGroup = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                                       List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                                       membersFromGroup.retainAll(membersFromResource);\n+                                       membersFromGroup = new ArrayList<Member>(new HashSet<Member>(membersFromGroup));\n+                                       for (Member memberElement : membersFromGroup) {\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n+                                       }\n+                                      } else if (user != null && facility != null) {\n+                                              List<Member> membersFromUser = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                              List<Member> membersFromFacility = getPerunBl().getFacilitiesManagerBl().getAllowedMembers(sess, facility);\n+                                              List<Resource> resourcesFromFacility = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                                              List<Resource> resourcesFromUser = new ArrayList<Resource>();\n+                                              for (Member memberElement : membersFromUser) {\n+                                               if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                resourcesFromUser.addAll(getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement));\n+                                               }\n+                                              }\n+                                              membersFromUser.retainAll(membersFromFacility);\n+                                              resourcesFromUser.retainAll(resourcesFromFacility);\n+                                              resourcesFromUser = new ArrayList<Resource>(new HashSet<Resource>(resourcesFromUser));\n+                                              for (Resource resourceElement : resourcesFromUser) {\n+                                               List<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                                               membersForResourceElement.retainAll(membersFromUser);\n+                                               membersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n+                                               for (Member memberElement : membersForResourceElement) {\n+                                                attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                                                listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                                               }\n+                                              }\n+                                             } else if (member != null && group != null) {\n+    // there is no need to get Resources from Member because Members are only in those groups\n+    // from which we already took Resources\n+                                              List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                              for (Resource resourceElement : resourcesFromGroup) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n+                                              }\n+                                             } else if (group != null) {\n+                                                     List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                                     List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                                                     for (Resource resourceElement : resources) {\n+                                                      List<Member> membersForResourceElement = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                                                      membersForResourceElement.retainAll(members);\n+                                                      membersForResourceElement = new ArrayList<Member>(new HashSet<Member>(membersForResourceElement));\n+                                                      for (Member memberElement : members) {\n+                                                       if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                                                        listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                                                       }\n+                                                      }\n+                                                     }\n+                                                    } else if (member != null) {\n+                                                     if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                                      List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                                                      for (Resource resourceElement : resources) {\n+                                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, member, attrDef.getName());\n+                                                       listOfRichAttributes.add(new RichAttribute(resourceElement, member, attribute));\n+                                                      }\n+                                                     }\n+                                                    } else if (resource != null) {\n+                                                            List<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                                                            for (Member memberElement : members) {\n+                                                             attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, memberElement, attrDef.getName());\n+                                                             listOfRichAttributes.add(new RichAttribute(resource, memberElement, attribute));\n+                                                            }\n+                                                           } else if (user != null) {\n+                                                            List<Member> members = getPerunBl().getMembersManagerBl().getMembersByUser(sess, user);\n+                                                            for (Member memberElement : members) {\n+                                                             if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                              List<Resource> resources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, memberElement);\n+                                                              for (Resource resourceElement : resources) {\n+                                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                                                               listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                                                              }\n+                                                             }\n+                                                            }\n+                                                           } else if (host != null) {\n+                                                                   facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                                                   List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                                                                   for (Resource resourceElement : resources) {\n+                                                                    List<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                                                                    for (Member memberElement : members) {\n+                                                                     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                                                                     listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                                                                    }\n+                                                                   }\n+                                                                  } else if (facility != null) {\n+                                                                   List<Resource> resources = getPerunBl().getFacilitiesManagerBl().getAssignedResources(sess, facility);\n+                                                                   for (Resource resourceElement : resources) {\n+                                                                    List<Member> members = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                                                                    for (Member memberElement : members) {\n+                                                                     attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                                                                     listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                                                                    }\n+                                                                   }\n+                                                                  } else if (vo != null) {\n+                                                                          List<Resource> resources = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                                                                          List<Member> membersFromVo = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                                                                          for (Resource resourceElement : resources) {\n+                                                                           List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                                                                           membersFromResource.retainAll(membersFromVo);\n+                                                                           for (Member memberElement : membersFromResource) {\n+                                                                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                                                                            listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                                                                           }\n+                                                                          }\n+                                                                         } else if (key != null) {\n+                                                                          List<Vo> vos = getPerunBl().getVosManagerBl().getVos(sess);\n+                                                                          List<Resource> resources = new ArrayList<Resource>();\n+                                                                          List<Member> membersFromVo = new ArrayList<Member>();\n+                                                                          for (Vo voElement : vos) {\n+                                                                           resources.addAll(getPerunBl().getResourcesManagerBl().getResources(sess, voElement));\n+                                                                           membersFromVo.addAll(getPerunBl().getMembersManagerBl().getMembers(sess, voElement));\n+                                                                          }\n+                                                                          resources = new ArrayList<Resource>(new HashSet<Resource>(resources));\n+                                                                          for (Resource resourceElement : resources) {\n+                                                                           List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resourceElement);\n+                                                                           membersFromResource.retainAll(membersFromVo);\n+                                                                           membersFromResource = new ArrayList<Member>(new HashSet<Member>(membersFromResource));\n+                                                                           for (Member memberElement : membersFromResource) {\n+                                                                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, resourceElement, memberElement, attrDef.getName());\n+                                                                            listOfRichAttributes.add(new RichAttribute(resourceElement, memberElement, attribute));\n+                                                                           }\n+                                                                          }\n+                                                                         }\n+                                     } else if (getAttributesManagerImpl().isFromNamespace(sess, attrDef, NS_USER_FACILITY_ATTR)) {\n+                                      if (resource != null && member != null) {\n+                                       if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                        facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                                        user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n+                                        listOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n+                                       }\n+                                      } else if (group != null && resource != null) {\n+                                       facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+    //get Users from Group\n+                                       List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                                       List<User> usersFromGroup = new ArrayList<User>();\n+                                       for (Member memberElement : members) {\n+                                        if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                         usersFromGroup.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                                        }\n+                                       }\n+    //get users from resource\n+                                       List<Member> membersFromResource = getPerunBl().getResourcesManagerBl().getAllowedMembers(sess, resource);\n+                                       List<User> usersFromResource = new ArrayList<User>();\n+                                       for (Member memberElement : membersFromResource) {\n+                                        if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                         usersFromResource.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                                        }\n+                                       }\n+                                       usersFromGroup.retainAll(usersFromResource);\n+                                       usersFromGroup = new ArrayList<User>(new HashSet<User>(usersFromGroup));\n+                                       for (User userElement : usersFromGroup) {\n+                                        if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement).contains(facility)) {\n+                                         attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                                         listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                                        }\n+                                       }\n+                                      } else if (user != null && facility != null) {\n+                                              attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, user, attrDef.getName());\n+                                              listOfRichAttributes.add(new RichAttribute(facility, user, attribute));\n+                                             } else if (member != null && group != null) {\n+                                              List<Resource> resourcesFromGroup = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                              List<Facility> facilitiesFromResources = new ArrayList<>();\n+                                              for (Resource resourceElement : resourcesFromGroup) {\n+                                               facilitiesFromResources.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                              }\n+                                              facilitiesFromResources = new ArrayList<>(new HashSet<>(facilitiesFromResources));\n+                                              User userFromMember = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                                              for (Facility facilityElement : facilitiesFromResources) {\n+                                               attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userFromMember, attrDef.getName());\n+                                               listOfRichAttributes.add(new RichAttribute(facilityElement, userFromMember, attribute));\n+                                              }\n+                                             } else if (group != null) {\n+                                                     List<Member> members = getPerunBl().getGroupsManagerBl().getGroupMembers(sess, group);\n+                                                     List<User> users = new ArrayList<User>();\n+                                                     for (Member memberElement : members) {\n+                                                      if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                       users.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                                                      }\n+                                                     }\n+                                                     List<Resource> resources = getPerunBl().getResourcesManagerBl().getAssignedResources(sess, group);\n+                                                     List<Facility> facilities = new ArrayList<Facility>();\n+                                                     for (Resource resourceElement : resources) {\n+                                                      facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                                     }\n+                                                     users = new ArrayList<User>(new HashSet<User>(users));\n+                                                     for (User userElement : users) {\n+                                                      List<Facility> facilitiesFromUser = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n+                                                      facilities.retainAll(facilitiesFromUser);\n+                                                      facilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n+                                                      for (Facility facilityElement : facilities) {\n+                                                       attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                                                       listOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n+                                                      }\n+                                                     }\n+                                                    } else if (member != null) {\n+                                                     if (!getPerunBl().getMembersManagerBl().haveStatus(sess, member, Status.INVALID)) {\n+                                                      user = getPerunBl().getUsersManagerBl().getUserByMember(sess, member);\n+                                                      List<Resource> memberResources = getPerunBl().getResourcesManagerBl().getAllowedResources(sess, member);\n+                                                      List<Facility> facilities = new ArrayList<Facility>();\n+                                                      for (Resource resourceElement : memberResources) {\n+                                                       facilities.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                                      }\n+                                                      facilities = new ArrayList<Facility>(new HashSet<Facility>(facilities));\n+                                                      for (Facility facilityElement : facilities) {\n+                                                       if (getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user).contains(facilityElement)) {\n+                                                        attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n+                                                        listOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n+                                                       }\n+                                                      }\n+                                                     }\n+                                                    } else if (resource != null) {\n+                                                            facility = getPerunBl().getResourcesManagerBl().getFacility(sess, resource);\n+                                                            List<User> usersFromResource = getPerunBl().getResourcesManagerBl().getAllowedUsers(sess, resource);\n+                                                            for (User userElement : usersFromResource) {\n+                                                             attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                                                             listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                                                            }\n+                                                           } else if (user != null) {\n+                                                            List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, user);\n+                                                            for (Facility facilityElement : facilities) {\n+                                                             attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, user, attrDef.getName());\n+                                                             listOfRichAttributes.add(new RichAttribute(facilityElement, user, attribute));\n+                                                            }\n+                                                           } else if (host != null) {\n+                                                                   facility = getPerunBl().getFacilitiesManagerBl().getFacilityForHost(sess, host);\n+                                                                   List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                                                                   for (User userElement : users) {\n+                                                                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                                                                    listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                                                                   }\n+                                                                  } else if (facility != null) {\n+                                                                   List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facility);\n+                                                                   for (User userElement : users) {\n+                                                                    attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, userElement, attrDef.getName());\n+                                                                    listOfRichAttributes.add(new RichAttribute(facility, userElement, attribute));\n+                                                                   }\n+                                                                  } else if (vo != null) {\n+                                                                          List<Member> members = getPerunBl().getMembersManagerBl().getMembers(sess, vo);\n+                                                                          List<User> users = new ArrayList<User>();\n+                                                                          for (Member memberElement : members) {\n+                                                                           if (!getPerunBl().getMembersManagerBl().haveStatus(sess, memberElement, Status.INVALID)) {\n+                                                                            users.add(getPerunBl().getUsersManagerBl().getUserByMember(sess, memberElement));\n+                                                                           }\n+                                                                          }\n+                                                                          List<Resource> resourcesFromVo = getPerunBl().getResourcesManagerBl().getResources(sess, vo);\n+                                                                          List<Facility> facilitiesFromVo = new ArrayList<Facility>();\n+                                                                          for (Resource resourceElement : resourcesFromVo) {\n+                                                                           facilitiesFromVo.add(getPerunBl().getResourcesManagerBl().getFacility(sess, resourceElement));\n+                                                                          }\n+                                                                          users = new ArrayList<User>(new HashSet<User>(users));\n+                                                                          for (User userElement : users) {\n+                                                                           List<Facility> facilitiesFromUserElement = getPerunBl().getFacilitiesManagerBl().getAllowedFacilities(sess, userElement);\n+                                                                           facilitiesFromUserElement.retainAll(facilitiesFromVo);\n+                                                                           facilitiesFromUserElement = new ArrayList<Facility>(new HashSet<Facility>(facilitiesFromUserElement));\n+                                                                           for (Facility facilityElement : facilitiesFromUserElement) {\n+                                                                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                                                                            listOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n+                                                                           }\n+                                                                          }\n+                                                                         } else if (key != null) {\n+                                                                          List<Facility> facilities = getPerunBl().getFacilitiesManagerBl().getFacilities(sess);\n+                                                                          for (Facility facilityElement : facilities) {\n+                                                                           List<User> users = getPerunBl().getFacilitiesManagerBl().getAllowedUsers(sess, facilityElement);\n+                                                                           for (User userElement : users) {\n+                                                                            attribute = getPerunBl().getAttributesManagerBl().getAttribute(sess, facilityElement, userElement, attrDef.getName());\n+                                                                            listOfRichAttributes.add(new RichAttribute(facilityElement, userElement, attribute));\n+                                                                           }\n+                                                                          }\n+                                                                         }\n+                                     } else {\n+                                      throw new InternalErrorException(\"There is unrecognized namespace in attribute \" + attrDef);\n+                                     }\n+\n+  return listOfRichAttributes;\n+ }\n+\n+ /**\n+  * Checks if the attributes represent empty values. If so, converts them into null.\n+  *\n+  * @param attributes attributes to be checked if are null\n+  */\n+\n+ public void convertEmptyAttrValueToNull(List<Attribute> attributes) throws ConsistencyErrorException {\n+\n+  for (Attribute attribute : attributes) {\n+   convertEmptyAttrValueToNull(attribute);\n+  }\n+ }\n+\n+ /**\n+  * Checks if the attribute represents empty value. If so, converts it into null.\n+  *\n+  * @param attribute attribute to be checked if is null\n+  */\n+\n+ public void convertEmptyAttrValueToNull(Attribute attribute) throws ConsistencyErrorException {\n+  if (attribute.getValue() == null) {\n+   return;\n+  }\n+  if (attribute.getValue() instanceof Integer) {\n+   return;\n+  }\n+  if (attribute.getValue() instanceof String) {\n+   if (((String) attribute.getValue()).matches(\"\\\\s*\")) {\n+    attribute.setValue(null);\n+   }\n+  } else if (attribute.getValue() instanceof Boolean) {\n+   if (attribute.getValue().equals(Boolean.FALSE)) {\n+    attribute.setValue(null);\n+   }\n+  } else if (attribute.getValue() instanceof ArrayList) {\n+          if (((ArrayList) attribute.getValue()).isEmpty()) {\n+           attribute.setValue(null);\n+          }\n+         } else if (attribute.getValue() instanceof LinkedHashMap) {\n+          if (((LinkedHashMap) attribute.getValue()).isEmpty()) {\n+           attribute.setValue(null);\n+          }\n+         } else {\n+          throw new ConsistencyErrorException(\"Invalid attribute value type: \" + attribute.getType() + \" class: \" + attribute.getValue().getClass().getName());\n+         }\n+ }\n+\n+ /**\n+  * Gets the getAttributesManagerImpl().\n+  *\n+  * @return The getAttributesManagerImpl().\n+  */\n+\n+ public AttributesManagerImplApi getAttributesManagerImpl() {\n+  return this.attributesManagerImpl;\n+ }\n+\n+ /**\n+  * Gets the perunBl.\n+  *\n+  * @return The perunBl.\n+  */\n+\n+ public PerunBl getPerunBl() {\n+  return this.perunBl;\n+ }\n+\n+ public void setPerunBl(PerunBl perunBl) {\n+  this.perunBl = perunBl;\n+ }\n+\n+\n+ private List<Attribute> attributesFromDefinitions(List<? extends AttributeDefinition> attributesDefinition) {\n+  List<Attribute> attributes = new ArrayList<Attribute>(attributesDefinition.size());\n+  for (AttributeDefinition attributeDefinition : attributesDefinition) {\n+   attributes.add(new Attribute(attributeDefinition));\n+  }\n+\n+  return attributes;\n+ }\n+\n+ protected void initialize() throws InternalErrorException {\n+  log.debug(\"AttributesManagerBlImpl initialize started.\");\n+\n+  //Get PerunSession\n+  String attributesManagerInitializator = \"attributesManagerBlImplInitializator\";\n+  PerunPrincipal pp = new PerunPrincipal(attributesManagerInitializator,\n+ExtSourcesManager.EXTSOURCE_NAME_INTERNAL,\n+ExtSourcesManager.EXTSOURCE_INTERNAL);\n+  PerunSession sess = perunBl.getPerunSession(pp, new PerunClient());\n+\n+  //Prepare all attribute definition from system perun\n+  Set<AttributeDefinition> allAttributesDef = new HashSet<AttributeDefinition>();\n+  allAttributesDef.addAll(this.getAttributesDefinition(sess));\n+\n+  //Basic state of all maps (record for every existing attributeDefinitions)\n+  for (AttributeDefinition ad : allAttributesDef) {\n+   dependencies.put(ad, new HashSet<AttributeDefinition>());\n+   strongDependencies.put(ad, new HashSet<AttributeDefinition>());\n+   inverseDependencies.put(ad, new HashSet<AttributeDefinition>());\n+   inverseStrongDependencies.put(ad, new HashSet<AttributeDefinition>());\n+   allDependencies.put(ad, new HashSet<AttributeDefinition>());\n+  }\n+  log.debug(\"Dependencies and StrongDependencies filling started.\");\n+\n+  //Fill dep and strongDep maps\n+  for (AttributeDefinition ad : allAttributesDef) {\n+   AttributesModuleImplApi module = null;\n+   List<String> depList = new ArrayList<String>();\n+   List<String> strongDepList = new ArrayList<String>();\n+   Set<AttributeDefinition> depSet = new HashSet<AttributeDefinition>();\n+   Set<AttributeDefinition> strongDepSet = new HashSet<AttributeDefinition>();\n+\n+   //Return null to object if module not exist\n+   Object attributeModule = getAttributesManagerImpl().getAttributesModule(sess, ad);\n+\n+   //If there is any existing module\n+   if (attributeModule != null) {\n+    module = (AttributesModuleImplApi) attributeModule;\n+    depList = module.getDependencies();\n+    strongDepList = module.getStrongDependencies();\n+    //Fill Set of dependencies\n+    for (String s : depList) {\n+     if (!s.endsWith(\"*\")) {\n+      try {\n+       AttributeDefinition attrDef = getAttributeDefinition(sess, s);\n+       depSet.add(attrDef);\n+      } catch (AttributeNotExistsException ex) {\n+       log.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+      }\n+      //If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n+     } else {\n+      List<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length()-2));\n+      for (String variant : allVariantOfDependence) {\n+       try {\n+        AttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n+        depSet.add(attrDef);\n+       } catch (AttributeNotExistsException ex) {\n+        log.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+       }\n+      }\n+     }\n+    }\n+    //Fil Set of strongDependencies\n+\n+    for (String s : strongDepList) {\n+     if (!s.endsWith(\"*\")) {\n+      try {\n+       AttributeDefinition attrDef = getAttributeDefinition(sess, s);\n+       strongDepSet.add(attrDef);\n+      } catch (AttributeNotExistsException ex) {\n+       log.error(\"For attribute name \" + s + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+      }\n+      //If there is something like AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\" we need to replace * by all possibilities\n+     } else {\n+      List<String> allVariantOfDependence = getAllSimilarAttributeNames(sess, s.substring(0, s.length()-2));\n+      for (String variant : allVariantOfDependence) {\n+       try {\n+        AttributeDefinition attrDef = getAttributeDefinition(sess, variant);\n+        strongDepSet.add(attrDef);\n+       } catch (AttributeNotExistsException ex) {\n+        log.error(\"For attribute name \" + variant + \"can't be found attributeDefinition at Inicialization in AttributesManagerBlImpl.\");\n+       }\n+      }\n+     }\n+    }\n+   }\n+   dependencies.put(ad, depSet);\n+   strongDependencies.put(ad, strongDepSet);\n+  }\n+  log.debug(\"Dependencies and StrongDependencies was filled successfully.\");\n+  log.debug(\"InverseDependencies and InverseStrongDependencies filling started.\");\n+\n+  //First create inversion map for simple dependencies\n+  Set<AttributeDefinition> depSet = dependencies.keySet();\n+  for (AttributeDefinition key : depSet) {\n+   Set<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n+   keySet = dependencies.get(key);\n+   for (AttributeDefinition keySetItem : keySet) {\n+    Set<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n+    changeSet = inverseDependencies.get(keySetItem);\n+    changeSet.add(key);\n+    //inverseDependencies.put(keySetItem, changeSet);\n+   }\n+  }\n+\n+  //Second create inversion map for strong dependencies\n+  depSet = strongDependencies.keySet();\n+  for (AttributeDefinition key : depSet) {\n+   Set<AttributeDefinition> keySet = new HashSet<AttributeDefinition>();\n+   keySet = strongDependencies.get(key);\n+   for (AttributeDefinition keySetItem : keySet) {\n+    Set<AttributeDefinition> changeSet = new HashSet<AttributeDefinition>();\n+    changeSet = inverseStrongDependencies.get(keySetItem);\n+    changeSet.add(key);\n+    //inverseDependencies.put(keySetItem, changeSet);\n+   }\n+  }\n+  log.debug(\"InverseDependencies and InverseStrongDependencies was filled successfully.\");\n+  log.debug(\"Cycle test of InverseStrongDependencies started.\");\n+  //Test StrDepInveMap on cycles\n+  if (isMapOfAttributesDefCyclic(inverseStrongDependencies)) {\n+   log.error(\"There is cycle in inverseStrongDependencies so map of All attribute will be not created!\");\n+  } else {\n+   log.debug(\"Cycle test of InverseStrongDependencies was successfull.\");\n+   log.debug(\"Filling map of allDependencies started.\");\n+   for (AttributeDefinition key : allDependencies.keySet()) {\n+    List<AttributeDefinition> stackingAttributes = new ArrayList<AttributeDefinition>();\n+    Set<AttributeDefinition> dependenciesOfAttribute = new HashSet<AttributeDefinition>();\n+    dependenciesOfAttribute.addAll(inverseStrongDependencies.get(key));\n+    dependenciesOfAttribute.addAll(inverseDependencies.get(key));\n+    stackingAttributes.addAll(inverseStrongDependencies.get(key));\n+    while (!stackingAttributes.isEmpty()) {\n+     AttributeDefinition firstAttr = stackingAttributes.get(0);\n+     stackingAttributes.remove(firstAttr);\n+     dependenciesOfAttribute.addAll(inverseStrongDependencies.get(firstAttr));\n+     dependenciesOfAttribute.addAll(inverseDependencies.get(firstAttr));\n+     stackingAttributes.addAll(inverseStrongDependencies.get(firstAttr));\n+    }\n+    allDependencies.put(key, dependenciesOfAttribute);\n+   }\n+   log.debug(\"Map of allDependencies was filled successfully.\");\n+  }\n+\n+  //DEBUG creating file with all dependencies of all attributes (180+- on devel)\n+  /*String pathToFile = \"./AllDependencies.log\";\n+   File f = new File(pathToFile);\n+   try {\n+   f.createNewFile();\n+   PrintWriter writer;\n+   writer = new PrintWriter(new FileWriter(f, true));\n+   int i=1;\n+   for(AttributeDefinition ad: allDependencies.keySet()) {\n+   writer.println(i + \") \" + ad.toString());\n+   for(AttributeDefinition a: allDependencies.get(ad)) {\n+   writer.println(\" ---> \" + a);\n+   }\n+   i++;\n+   }\n+   writer.close();\n+   } catch (IOException ex) {\n+   log.error(\"Error at saving AllDependencies file.\");\n+   }*/\n+  //DEBUG end\n+  log.debug(\"AttributesManagerBlImpl initialize ended.\");\n+ }\n+\n+ /**\n+  * This method try to find cycle between strongDependencies of Attributes modules.\n+  * If exist at least 1 cycle, return true.\n+  * If there is no cycle, return false.\n+  *\n+  * @param map\n+  * @return true if cycle exist, false if cycle not exist\n+  */\n+\n+\n+ private static boolean isMapOfAttributesDefCyclic(Map<AttributeDefinition, Set<AttributeDefinition>> map) {\n+  Set<AttributeDefinition> processed = new HashSet<AttributeDefinition>();\n+  Set<AttributeDefinition> unprocessed = new HashSet<AttributeDefinition>();\n+  List<AttributeDefinition> stack = new ArrayList<AttributeDefinition>();\n+  for (AttributeDefinition attributeDef : map.keySet()) {\n+   stack.add(attributeDef);\n+   while (!stack.isEmpty()) {\n+    AttributeDefinition firstInStack = stack.get(0);\n+    if (map.get(firstInStack).contains(attributeDef)) {\n+     log.error(\"Cycle exist for \" + attributeDef);\n+     return true;\n+    }\n+    processed.add(firstInStack);\n+    unprocessed.addAll(map.get(firstInStack));\n+    unprocessed.removeAll(processed);\n+    stack.remove(firstInStack);\n+    for (AttributeDefinition unprocessedAttr : unprocessed) {\n+     if (!stack.contains(unprocessedAttr)) stack.add(unprocessedAttr);\n+    }\n+    unprocessed.clear();\n+   }\n+  }\n+\n+  return false;\n+ }\n+\n+ public List<Attribute> setWritableTrue(PerunSession sess, List<Attribute> attributes) throws InternalErrorException {\n+  List<Attribute> emptyList = new ArrayList<Attribute>();\n+  if (attributes == null)\n+   return emptyList;\n+  for (Attribute a : attributes) {\n+   if (a != null) a.setWritable(true);\n+  }\n+\n+  return attributes;\n+ }\n+\n+ @Override\n+ public List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException {\n+  List<AttributeRights> listOfAr = getAttributesManagerImpl().getAttributeRights(sess, attributeId);\n+\n+  //Do not return VoObsever rights by this method\n+  if (listOfAr != null) {\n+   Iterator<AttributeRights> iterator = listOfAr.iterator();\n+   while (iterator.hasNext()) {\n+    AttributeRights ar = iterator.next();\n+    if (ar.getRole().equals(Role.VOOBSERVER)) iterator.remove();\n+   }\n+  }\n+\n+  return listOfAr;\n+ }\n+\n+ @Override\n+ public void setAttributeRights(PerunSession sess, List<AttributeRights> rights) throws InternalErrorException {\n+\n+  for (AttributeRights right : rights) {\n+   getAttributesManagerImpl().setAttributeRight(sess, right);\n+   getPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n+\n+   //If these rights are for VoAdmin, do the same for VoObserver but only for READ privilegies\n+   if (right.getRole().equals(Role.VOADMIN)) {\n+    List<ActionType> onlyReadActionType = new ArrayList<ActionType>();\n+    if (right.getRights().contains(ActionType.READ)) onlyReadActionType.add(ActionType.READ);\n+    right.setRights(onlyReadActionType);\n+    right.setRole(Role.VOOBSERVER);\n+    //Rights are now set for VoObserver with read privilegies on the same attribute like VoAdmin\n+    getAttributesManagerImpl().setAttributeRight(sess, right);\n+    getPerunBl().getAuditer().log(sess, \"Attribute right set : {}\", right);\n+   }\n+  }\n+ }\n+\n+ public UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException {\n+  return getAttributesManagerImpl().getUserVirtualAttributeModule(sess, attribute);\n+ }\n+\n+ /**\n+  * Check if member is assigned on resource. If not, throw WrongAttributeAssignment Exception\n+  *\n+  * @param sess\n+  * @param member\n+  * @param resource\n+  * @throws WrongAttributeAssignmentException\n+  * @throws InternalErrorException\n+  * @throws MemberNotExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ private void checkMemberIsFromTheSameVoLikeResource(PerunSession sess, Member member, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n+  Utils.notNull(sess, \"sess\");\n+  Utils.notNull(member, \"member\");\n+  Utils.notNull(resource, \"resource\");\n+  if (member.getVoId() != resource.getVoId()) throw new WrongAttributeAssignmentException(\"Member is not from the same vo like Resource: \" + member + \" \" + resource);\n+ }\n+\n+ /**\n+  * Check if group is assigned on resource. If not, throw WrongAttributeAssignment Exception\n+  *\n+  * @param sess\n+  * @param group\n+  * @param resource\n+  * @throws WrongAttributeAssignmentException\n+  * @throws InternalErrorException\n+  * @throws GroupNotExistsException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ private void checkGroupIsFromTheSameVoLikeResource(PerunSession sess, Group group, Resource resource) throws WrongAttributeAssignmentException, InternalErrorException {\n+  Utils.notNull(sess, \"sess\");\n+  Utils.notNull(group, \"group\");\n+  Utils.notNull(resource, \"resource\");\n+  if (group.getVoId() != resource.getVoId()) throw new WrongAttributeAssignmentException(\"Group is not from the same vo like Resource: \" + group + \" \" + resource);\n+ }\n+\n+ public Map<AttributeDefinition, Set<AttributeDefinition>> getAllDependencies() {\n+  return allDependencies;\n+ }\n+\n+ /**\n+  * Get Map of members with list of member-resource attributes in values.\n+  *\n+  * This method calls 'getRequiredAttributes(session, service, resource, List members)' for\n+  * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n+  *\n+  * Example: if there are 25000 records in list of members, this method call it by 3 separate\n+  * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n+  * calls getRequiredAttributes just once without any changes\n+  *\n+  * Reason: SQL error in Oracle for too much records in one SQL query\n+  *\n+  * @param sess perunSession\n+  * @param service service to get required attributes for\n+  * @param resource resource to get required attributes for\n+  * @param members members to get required attributes for\n+  * @return map of members in keys with list of their member-resource attributes in value\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ private HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException {\n+  if (members.size() <= MAX_SIZE_OF_BULK_IN_SQL)\n+   return getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members);\n+  HashMap<Member, List<Attribute>> memberResourceAttrs = new HashMap<>();\n+  int from = 0;\n+  int to = MAX_SIZE_OF_BULK_IN_SQL;\n+  do {\n+   memberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, to)));\n+   from += MAX_SIZE_OF_BULK_IN_SQL;\n+   to += MAX_SIZE_OF_BULK_IN_SQL;\n+  } while (members.size() > to);\n+  memberResourceAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, resource, members.subList(from, members.size())));\n+  return memberResourceAttrs;\n+ }\n+\n+ /**\n+  * Get Map of members with list of member attributes in values.\n+  *\n+  * This method calls 'getRequiredAttributes(session, resource, service, List members)' for\n+  * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of members.\n+  *\n+  * Example: if there are 25000 records in list of members, this method call it by 3 separate\n+  * queries instead of 1, if less or equal to 10000 records are in list of members, than this method\n+  * calls getRequiredAttributes just once without any changes\n+  *\n+  * Reason: SQL error in Oracle for too much records in one SQL query\n+  *\n+  * @param sess perunSession\n+  * @param resource resource to get required attributes for\n+  * @param service service to get required attributes for\n+  * @param members members to get required attributes for\n+  * @return map of members in keys with list of their member attributes in value\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ private HashMap<Member, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException {\n+  if (members.size() <= MAX_SIZE_OF_BULK_IN_SQL)\n+   return getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members);\n+  HashMap<Member, List<Attribute>> memberAttrs = new HashMap<>();\n+  int from = 0;\n+  int to = MAX_SIZE_OF_BULK_IN_SQL;\n+  do {\n+   memberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, to)));\n+   from += MAX_SIZE_OF_BULK_IN_SQL;\n+   to += MAX_SIZE_OF_BULK_IN_SQL;\n+  } while (members.size() > to);\n+  memberAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, resource, service, members.subList(from, members.size())));\n+  return memberAttrs;\n+ }\n+\n+ /**\n+  * Get Map of users with list of user-facility attributes in values.\n+  *\n+  * This method calls 'getRequiredAttributes(session, service, facility, List users)' for\n+  * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n+  *\n+  * Example: if there are 25000 records in list of users, this method call it by 3 separate\n+  * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n+  * calls getRequiredAttributes just once without any changes\n+  *\n+  * Reason: SQL error in Oracle for too much records in one SQL query\n+  *\n+  * @param sess perunSession\n+  * @param service service to get required attributes for\n+  * @param facility facility to get required attributes for\n+  * @param users users to get required attributes for\n+  * @return map of users in keys with list of their user-facility attributes in value\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ private HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException {\n+  if (users.size() <= MAX_SIZE_OF_BULK_IN_SQL)\n+   return getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users);\n+  HashMap<User, List<Attribute>> userFacAttrs = new HashMap<>();\n+  int from = 0;\n+  int to = MAX_SIZE_OF_BULK_IN_SQL;\n+  do {\n+   userFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, to)));\n+   from += MAX_SIZE_OF_BULK_IN_SQL;\n+   to += MAX_SIZE_OF_BULK_IN_SQL;\n+  } while (users.size() > to);\n+  userFacAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, facility, users.subList(from, users.size())));\n+  return userFacAttrs;\n+ }\n+\n+ /**\n+  * Get Map of users with list of user attributes in values.\n+  *\n+  * This method calls 'getRequiredAttributes(session, service, List users)' for\n+  * every MAX_SIZE_OF_BULL_IN_SQL records (default 10000 records) in list of users.\n+  *\n+  * Example: if there are 25000 records in list of users, this method call it by 3 separate\n+  * queries instead of 1, if less or equal to 10000 records are in list of users, than this method\n+  * calls getRequiredAttributes just once without any changes\n+  *\n+  * Reason: SQL error in Oracle for too much records in one SQL query\n+  *\n+  * @param sess perunSession\n+  * @param service service to get required attributes for\n+  * @param users users to get required attributes for\n+  * @return map of users in keys with list of their user attributes in value\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ private HashMap<User, List<Attribute>> getRequiredAttributesForBulk(PerunSession sess, Service service, List<User> users) throws InternalErrorException {\n+  if (users.size() <= MAX_SIZE_OF_BULK_IN_SQL)\n+   return getAttributesManagerImpl().getRequiredAttributes(sess, service, users);\n+  HashMap<User, List<Attribute>> userAttrs = new HashMap<>();\n+  int from = 0;\n+  int to = MAX_SIZE_OF_BULK_IN_SQL;\n+  do {\n+   userAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, to)));\n+   from += MAX_SIZE_OF_BULK_IN_SQL;\n+   to += MAX_SIZE_OF_BULK_IN_SQL;\n+  } while (users.size() > to);\n+  userAttrs.putAll(getAttributesManagerImpl().getRequiredAttributes(sess, service, users.subList(from, users.size())));\n+  return userAttrs;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 6683
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/406/AttributesManagerBlImpl.java\nindex 75877d21e81..bc6767e460f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/406/AttributesManagerBlImpl.java\n@@ -4553,7 +4553,7 @@ public class AttributesManagerBlImpl implements AttributesManagerBl {\n \t}\n \n \tpublic Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\t\t WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+\t\t\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n \t\treturn this.mergeAttributeValue(sess, attribute, user);\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/406/AttributesManagerBlImpl.java\nindex 75877d21e81..73225134b55 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/406/AttributesManagerBlImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/406/AttributesManagerBlImpl.java\n@@ -4553,7 +4553,7 @@ public class AttributesManagerBlImpl implements AttributesManagerBl {\n \t}\n \n \tpublic Attribute mergeAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException,\n-\t\t\t\t WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+\tWrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n \t\treturn this.mergeAttributeValue(sess, attribute, user);\n \t}\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}