{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3116",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3116/QuantizedProjection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3116/QuantizedProjection.java\nindex cc73c24d18b..70da10b04af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3116/QuantizedProjection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3116/QuantizedProjection.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import static java.lang.Math.round;\n@@ -27,41 +28,41 @@ import static java.lang.Math.round;\n  */\n public class QuantizedProjection\n {\n-    private final long max;\n-    private final long projectedMax;\n+  private final long max;\n+  private final long projectedMax;\n+\n+  private double absoluteWay;\n+  private long step;\n \n-    private double absoluteWay;\n-    private long step;\n+  public QuantizedProjection(long max, long projectedMax)\n+  {\n+    this.max = max;\n+    this.projectedMax = projectedMax;\n+  }\n \n-    public QuantizedProjection( long max, long projectedMax )\n+  /**\n+   * @param step a part of the max, not the projection.\n+   * @return {@code true} if the total so far including {@code step} is equal to or less than the max allowed,\n+   * otherwise {@code false} -- meaning that we stepped beyond max.\n+   */\n+  public boolean next(long step)\n+  {\n+    double absoluteStep = (double) step / (double) max;\n+    if (absoluteWay + absoluteStep > 1f)\n     {\n-        this.max = max;\n-        this.projectedMax = projectedMax;\n+      return false;\n     }\n \n-    /**\n-     * @param step a part of the max, not the projection.\n-     * @return {@code true} if the total so far including {@code step} is equal to or less than the max allowed,\n-     * otherwise {@code false} -- meaning that we stepped beyond max.\n-     */\n-    public boolean next( long step )\n-    {\n-        double absoluteStep = (double)step / (double)max;\n-        if ( absoluteWay + absoluteStep > 1f )\n-        {\n-            return false;\n-        }\n+    long prevProjection = round(absoluteWay * projectedMax);\n+    absoluteWay += absoluteStep;\n+    long projection = round(absoluteWay * projectedMax);\n+    this.step = projection - prevProjection;\n \n-        long prevProjection = round( absoluteWay * projectedMax );\n-        absoluteWay += absoluteStep;\n-        long projection = round( absoluteWay * projectedMax );\n-        this.step = projection - prevProjection;\n+    return true;\n+  }\n \n-        return true;\n-    }\n-\n-    public long step()\n-    {\n-        return step;\n-    }\n+  public long step()\n+  {\n+    return step;\n+  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "40",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3116/QuantizedProjection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3116/QuantizedProjection.java\nindex cc73c24d18b..07de91b570e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3116/QuantizedProjection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3116/QuantizedProjection.java\n@@ -47,7 +47,7 @@ public class QuantizedProjection\n     public boolean next( long step )\n     {\n         double absoluteStep = (double)step / (double)max;\n-        if ( absoluteWay + absoluteStep > 1f )\n+        if ( absoluteWay + absoluteStep> 1f )\n         {\n             return false;\n         }\n@@ -64,4 +64,4 @@ public class QuantizedProjection\n     {\n         return step;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}