{
    "project_name": "codefollower-H2-Research",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "139",
                "column": "10",
                "severity": "warning",
                "message": "'else' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "            databaseToUpper = settings.databaseToUpper;\n            databaseToLower = settings.databaseToLower;\n        }else if (isMySQL || isPostgreSQL) {\n            databaseToUpper = false;\n            databaseToLower = true;\n        } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/4/DbContents.java\nindex ed1a9fa4bac..6ceaa5a5622 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/4/DbContents.java\n@@ -136,7 +136,7 @@ public class DbContents {\n             JdbcConnection.Settings settings = ((JdbcConnection) conn).getSettings();\n             databaseToUpper = settings.databaseToUpper;\n             databaseToLower = settings.databaseToLower;\n-        }else if (isMySQL || isPostgreSQL) {\n+        } else if (isMySQL || isPostgreSQL) {\n             databaseToUpper = false;\n             databaseToLower = true;\n         } else {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/4/DbContents.java\nindex ed1a9fa4bac..c71bd54ab47 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/4/DbContents.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.bnf.context;\n \n import java.sql.Connection;\n@@ -22,254 +23,254 @@ import org.h2.util.Utils;\n  */\n public class DbContents {\n \n-    private DbSchema[] schemas;\n-    private DbSchema defaultSchema;\n-    private boolean isOracle;\n-    private boolean isH2;\n-    private boolean isPostgreSQL;\n-    private boolean isDerby;\n-    private boolean isSQLite;\n-    private boolean isMySQL;\n-    private boolean isFirebird;\n-    private boolean isMSSQLServer;\n-    private boolean isDB2;\n+  private DbSchema[] schemas;\n+  private DbSchema defaultSchema;\n+  private boolean isOracle;\n+  private boolean isH2;\n+  private boolean isPostgreSQL;\n+  private boolean isDerby;\n+  private boolean isSQLite;\n+  private boolean isMySQL;\n+  private boolean isFirebird;\n+  private boolean isMSSQLServer;\n+  private boolean isDB2;\n \n-    private boolean databaseToUpper, databaseToLower;\n+  private boolean databaseToUpper, databaseToLower;\n \n-    /**\n-     * @return The default schema.\n-     */\n-    public DbSchema getDefaultSchema() {\n-        return defaultSchema;\n-    }\n+  /**\n+   * @return The default schema.\n+   */\n+  public DbSchema getDefaultSchema() {\n+    return defaultSchema;\n+  }\n \n-    /**\n-     * @return True if this is an Apache Derby database.\n-     */\n-    public boolean isDerby() {\n-        return isDerby;\n-    }\n+  /**\n+   * @return True if this is an Apache Derby database.\n+   */\n+  public boolean isDerby() {\n+    return isDerby;\n+  }\n \n-    /**\n-     * @return True if this is a Firebird database.\n-     */\n-    public boolean isFirebird() {\n-        return isFirebird;\n-    }\n+  /**\n+   * @return True if this is a Firebird database.\n+   */\n+  public boolean isFirebird() {\n+    return isFirebird;\n+  }\n \n-    /**\n-     * @return True if this is a H2 database.\n-     */\n-    public boolean isH2() {\n-        return isH2;\n-    }\n+  /**\n+   * @return True if this is a H2 database.\n+   */\n+  public boolean isH2() {\n+    return isH2;\n+  }\n \n-    /**\n-     * @return True if this is a MS SQL Server database.\n-     */\n-    public boolean isMSSQLServer() {\n-        return isMSSQLServer;\n-    }\n+  /**\n+   * @return True if this is a MS SQL Server database.\n+   */\n+  public boolean isMSSQLServer() {\n+    return isMSSQLServer;\n+  }\n \n-    /**\n-     * @return True if this is a MySQL database.\n-     */\n-    public boolean isMySQL() {\n-        return isMySQL;\n-    }\n+  /**\n+   * @return True if this is a MySQL database.\n+   */\n+  public boolean isMySQL() {\n+    return isMySQL;\n+  }\n \n-    /**\n-     * @return True if this is an Oracle database.\n-     */\n-    public boolean isOracle() {\n-        return isOracle;\n-    }\n+  /**\n+   * @return True if this is an Oracle database.\n+   */\n+  public boolean isOracle() {\n+    return isOracle;\n+  }\n \n-    /**\n-     * @return True if this is a PostgreSQL database.\n-     */\n-    public boolean isPostgreSQL() {\n-        return isPostgreSQL;\n-    }\n+  /**\n+   * @return True if this is a PostgreSQL database.\n+   */\n+  public boolean isPostgreSQL() {\n+    return isPostgreSQL;\n+  }\n \n-    /**\n-     * @return True if this is an SQLite database.\n-     */\n-    public boolean isSQLite() {\n-        return isSQLite;\n-    }\n+  /**\n+   * @return True if this is an SQLite database.\n+   */\n+  public boolean isSQLite() {\n+    return isSQLite;\n+  }\n \n-    /**\n-     * @return True if this is an IBM DB2 database.\n-     */\n-    public boolean isDB2() {\n-        return isDB2;\n-    }\n+  /**\n+   * @return True if this is an IBM DB2 database.\n+   */\n+  public boolean isDB2() {\n+    return isDB2;\n+  }\n \n-    /**\n-     * @return The list of schemas.\n-     */\n-    public DbSchema[] getSchemas() {\n-        return schemas;\n-    }\n+  /**\n+   * @return The list of schemas.\n+   */\n+  public DbSchema[] getSchemas() {\n+    return schemas;\n+  }\n \n-    /**\n-     * Read the contents of this database from the database meta data.\n-     *\n-     * @param url the database URL\n-     * @param conn the connection\n-     */\n-    public synchronized void readContents(String url, Connection conn)\n-            throws SQLException {\n-        isH2 = url.startsWith(\"jdbc:h2:\");\n-        isDB2 = url.startsWith(\"jdbc:db2:\");\n-        isSQLite = url.startsWith(\"jdbc:sqlite:\");\n-        isOracle = url.startsWith(\"jdbc:oracle:\");\n-        // the Vertica engine is based on PostgreSQL\n-        isPostgreSQL = url.startsWith(\"jdbc:postgresql:\") || url.startsWith(\"jdbc:vertica:\");\n-        // isHSQLDB = url.startsWith(\"jdbc:hsqldb:\");\n-        isMySQL = url.startsWith(\"jdbc:mysql:\");\n-        isDerby = url.startsWith(\"jdbc:derby:\");\n-        isFirebird = url.startsWith(\"jdbc:firebirdsql:\");\n-        isMSSQLServer = url.startsWith(\"jdbc:sqlserver:\");\n-        if (isH2) {\n-            JdbcConnection.Settings settings = ((JdbcConnection) conn).getSettings();\n-            databaseToUpper = settings.databaseToUpper;\n-            databaseToLower = settings.databaseToLower;\n-        }else if (isMySQL || isPostgreSQL) {\n-            databaseToUpper = false;\n-            databaseToLower = true;\n-        } else {\n-            databaseToUpper = true;\n-            databaseToLower = false;\n-        }\n-        DatabaseMetaData meta = conn.getMetaData();\n-        String defaultSchemaName = getDefaultSchemaName(meta);\n-        String[] schemaNames = getSchemaNames(meta);\n-        schemas = new DbSchema[schemaNames.length];\n-        for (int i = 0; i < schemaNames.length; i++) {\n-            String schemaName = schemaNames[i];\n-            boolean isDefault = defaultSchemaName == null ||\n-                    defaultSchemaName.equals(schemaName);\n-            DbSchema schema = new DbSchema(this, schemaName, isDefault);\n-            if (isDefault) {\n-                defaultSchema = schema;\n-            }\n-            schemas[i] = schema;\n-            String[] tableTypes = { \"TABLE\", \"SYSTEM TABLE\", \"VIEW\",\n-                    \"SYSTEM VIEW\", \"TABLE LINK\", \"SYNONYM\", \"EXTERNAL\" };\n-            schema.readTables(meta, tableTypes);\n-            if (!isPostgreSQL && !isDB2) {\n-                schema.readProcedures(meta);\n-            }\n+  /**\n+   * Read the contents of this database from the database meta data.\n+   *\n+   * @param url  the database URL\n+   * @param conn the connection\n+   */\n+  public synchronized void readContents(String url, Connection conn)\n+      throws SQLException {\n+    isH2 = url.startsWith(\"jdbc:h2:\");\n+    isDB2 = url.startsWith(\"jdbc:db2:\");\n+    isSQLite = url.startsWith(\"jdbc:sqlite:\");\n+    isOracle = url.startsWith(\"jdbc:oracle:\");\n+    // the Vertica engine is based on PostgreSQL\n+    isPostgreSQL = url.startsWith(\"jdbc:postgresql:\") || url.startsWith(\"jdbc:vertica:\");\n+    // isHSQLDB = url.startsWith(\"jdbc:hsqldb:\");\n+    isMySQL = url.startsWith(\"jdbc:mysql:\");\n+    isDerby = url.startsWith(\"jdbc:derby:\");\n+    isFirebird = url.startsWith(\"jdbc:firebirdsql:\");\n+    isMSSQLServer = url.startsWith(\"jdbc:sqlserver:\");\n+    if (isH2) {\n+      JdbcConnection.Settings settings = ((JdbcConnection) conn).getSettings();\n+      databaseToUpper = settings.databaseToUpper;\n+      databaseToLower = settings.databaseToLower;\n+    } else if (isMySQL || isPostgreSQL) {\n+      databaseToUpper = false;\n+      databaseToLower = true;\n+    } else {\n+      databaseToUpper = true;\n+      databaseToLower = false;\n+    }\n+    DatabaseMetaData meta = conn.getMetaData();\n+    String defaultSchemaName = getDefaultSchemaName(meta);\n+    String[] schemaNames = getSchemaNames(meta);\n+    schemas = new DbSchema[schemaNames.length];\n+    for (int i = 0; i < schemaNames.length; i++) {\n+      String schemaName = schemaNames[i];\n+      boolean isDefault = defaultSchemaName == null ||\n+          defaultSchemaName.equals(schemaName);\n+      DbSchema schema = new DbSchema(this, schemaName, isDefault);\n+      if (isDefault) {\n+        defaultSchema = schema;\n+      }\n+      schemas[i] = schema;\n+      String[] tableTypes = {\"TABLE\", \"SYSTEM TABLE\", \"VIEW\",\n+          \"SYSTEM VIEW\", \"TABLE LINK\", \"SYNONYM\", \"EXTERNAL\"};\n+      schema.readTables(meta, tableTypes);\n+      if (!isPostgreSQL && !isDB2) {\n+        schema.readProcedures(meta);\n+      }\n+    }\n+    if (defaultSchema == null) {\n+      String best = null;\n+      for (DbSchema schema : schemas) {\n+        if (\"dbo\".equals(schema.name)) {\n+          // MS SQL Server\n+          defaultSchema = schema;\n+          break;\n         }\n-        if (defaultSchema == null) {\n-            String best = null;\n-            for (DbSchema schema : schemas) {\n-                if (\"dbo\".equals(schema.name)) {\n-                    // MS SQL Server\n-                    defaultSchema = schema;\n-                    break;\n-                }\n-                if (defaultSchema == null ||\n-                        best == null ||\n-                        schema.name.length() < best.length()) {\n-                    best = schema.name;\n-                    defaultSchema = schema;\n-                }\n-            }\n+        if (defaultSchema == null ||\n+            best == null ||\n+            schema.name.length() < best.length()) {\n+          best = schema.name;\n+          defaultSchema = schema;\n         }\n+      }\n     }\n+  }\n \n-    private String[] getSchemaNames(DatabaseMetaData meta) throws SQLException {\n-        if (isMySQL || isSQLite) {\n-            return new String[] { \"\" };\n-        } else if (isFirebird) {\n-            return new String[] { null };\n-        }\n-        ResultSet rs = meta.getSchemas();\n-        ArrayList<String> schemaList = Utils.newSmallArrayList();\n-        while (rs.next()) {\n-            String schema = rs.getString(\"TABLE_SCHEM\");\n-            String[] ignoreNames = null;\n-            if (isOracle) {\n-                ignoreNames = new String[] { \"CTXSYS\", \"DIP\", \"DBSNMP\",\n-                        \"DMSYS\", \"EXFSYS\", \"FLOWS_020100\", \"FLOWS_FILES\",\n-                        \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OLAPSYS\", \"ORDSYS\",\n-                        \"ORDPLUGINS\", \"OUTLN\", \"SI_INFORMTN_SCHEMA\", \"SYS\",\n-                        \"SYSMAN\", \"SYSTEM\", \"TSMSYS\", \"WMSYS\", \"XDB\" };\n-            } else if (isMSSQLServer) {\n-                ignoreNames = new String[] { \"sys\", \"db_accessadmin\",\n-                        \"db_backupoperator\", \"db_datareader\", \"db_datawriter\",\n-                        \"db_ddladmin\", \"db_denydatareader\",\n-                        \"db_denydatawriter\", \"db_owner\", \"db_securityadmin\" };\n-            } else if (isDB2) {\n-                ignoreNames = new String[] { \"NULLID\", \"SYSFUN\",\n-                        \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\",\n-                        // not empty, but not sure what they contain\n-                        \"SYSCAT\",  \"SYSIBM\", \"SYSIBMADM\",\n-                        \"SYSSTAT\", \"SYSTOOLS\",\n-                };\n+  private String[] getSchemaNames(DatabaseMetaData meta) throws SQLException {\n+    if (isMySQL || isSQLite) {\n+      return new String[] {\"\"};\n+    } else if (isFirebird) {\n+      return new String[] {null};\n+    }\n+    ResultSet rs = meta.getSchemas();\n+    ArrayList<String> schemaList = Utils.newSmallArrayList();\n+    while (rs.next()) {\n+      String schema = rs.getString(\"TABLE_SCHEM\");\n+      String[] ignoreNames = null;\n+      if (isOracle) {\n+        ignoreNames = new String[] {\"CTXSYS\", \"DIP\", \"DBSNMP\",\n+            \"DMSYS\", \"EXFSYS\", \"FLOWS_020100\", \"FLOWS_FILES\",\n+            \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OLAPSYS\", \"ORDSYS\",\n+            \"ORDPLUGINS\", \"OUTLN\", \"SI_INFORMTN_SCHEMA\", \"SYS\",\n+            \"SYSMAN\", \"SYSTEM\", \"TSMSYS\", \"WMSYS\", \"XDB\"};\n+      } else if (isMSSQLServer) {\n+        ignoreNames = new String[] {\"sys\", \"db_accessadmin\",\n+            \"db_backupoperator\", \"db_datareader\", \"db_datawriter\",\n+            \"db_ddladmin\", \"db_denydatareader\",\n+            \"db_denydatawriter\", \"db_owner\", \"db_securityadmin\"};\n+      } else if (isDB2) {\n+        ignoreNames = new String[] {\"NULLID\", \"SYSFUN\",\n+            \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\",\n+            // not empty, but not sure what they contain\n+            \"SYSCAT\", \"SYSIBM\", \"SYSIBMADM\",\n+            \"SYSSTAT\", \"SYSTOOLS\",\n+        };\n \n-            }\n-            if (ignoreNames != null) {\n-                for (String ignore : ignoreNames) {\n-                    if (ignore.equals(schema)) {\n-                        schema = null;\n-                        break;\n-                    }\n-                }\n-            }\n-            if (schema == null) {\n-                continue;\n-            }\n-            schemaList.add(schema);\n+      }\n+      if (ignoreNames != null) {\n+        for (String ignore : ignoreNames) {\n+          if (ignore.equals(schema)) {\n+            schema = null;\n+            break;\n+          }\n         }\n-        rs.close();\n-        return schemaList.toArray(new String[0]);\n+      }\n+      if (schema == null) {\n+        continue;\n+      }\n+      schemaList.add(schema);\n     }\n+    rs.close();\n+    return schemaList.toArray(new String[0]);\n+  }\n \n-    private String getDefaultSchemaName(DatabaseMetaData meta) {\n-        String defaultSchemaName = \"\";\n-        try {\n-            if (isOracle) {\n-                return meta.getUserName();\n-            } else if (isPostgreSQL) {\n-                return \"public\";\n-            } else if (isMySQL) {\n-                return \"\";\n-            } else if (isDerby) {\n-                return StringUtils.toUpperEnglish(meta.getUserName());\n-            } else if (isFirebird) {\n-                return null;\n-            }\n-            ResultSet rs = meta.getSchemas();\n-            int index = rs.findColumn(\"IS_DEFAULT\");\n-            while (rs.next()) {\n-                if (rs.getBoolean(index)) {\n-                    defaultSchemaName = rs.getString(\"TABLE_SCHEM\");\n-                }\n-            }\n-        } catch (SQLException e) {\n-            // IS_DEFAULT not found\n+  private String getDefaultSchemaName(DatabaseMetaData meta) {\n+    String defaultSchemaName = \"\";\n+    try {\n+      if (isOracle) {\n+        return meta.getUserName();\n+      } else if (isPostgreSQL) {\n+        return \"public\";\n+      } else if (isMySQL) {\n+        return \"\";\n+      } else if (isDerby) {\n+        return StringUtils.toUpperEnglish(meta.getUserName());\n+      } else if (isFirebird) {\n+        return null;\n+      }\n+      ResultSet rs = meta.getSchemas();\n+      int index = rs.findColumn(\"IS_DEFAULT\");\n+      while (rs.next()) {\n+        if (rs.getBoolean(index)) {\n+          defaultSchemaName = rs.getString(\"TABLE_SCHEM\");\n         }\n-        return defaultSchemaName;\n+      }\n+    } catch (SQLException e) {\n+      // IS_DEFAULT not found\n     }\n+    return defaultSchemaName;\n+  }\n \n-    /**\n-     * Add double quotes around an identifier if required.\n-     *\n-     * @param identifier the identifier\n-     * @return the quoted identifier\n-     */\n-    public String quoteIdentifier(String identifier) {\n-        if (identifier == null) {\n-            return null;\n-        }\n-        if (ParserUtil.isSimpleIdentifier(identifier, databaseToUpper, databaseToLower)) {\n-            return identifier;\n-        }\n-        return StringUtils.quoteIdentifier(identifier);\n+  /**\n+   * Add double quotes around an identifier if required.\n+   *\n+   * @param identifier the identifier\n+   * @return the quoted identifier\n+   */\n+  public String quoteIdentifier(String identifier) {\n+    if (identifier == null) {\n+      return null;\n+    }\n+    if (ParserUtil.isSimpleIdentifier(identifier, databaseToUpper, databaseToLower)) {\n+      return identifier;\n     }\n+    return StringUtils.quoteIdentifier(identifier);\n+  }\n \n }\n",
            "diff_size": 247
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/4/DbContents.java\nindex ed1a9fa4bac..33fe8033a0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/4/DbContents.java\n@@ -136,7 +136,7 @@ public class DbContents {\n             JdbcConnection.Settings settings = ((JdbcConnection) conn).getSettings();\n             databaseToUpper = settings.databaseToUpper;\n             databaseToLower = settings.databaseToLower;\n-        }else if (isMySQL || isPostgreSQL) {\n+        } else if (isMySQL || isPostgreSQL) {\n             databaseToUpper = false;\n             databaseToLower = true;\n         } else {\n@@ -272,4 +272,4 @@ public class DbContents {\n         return StringUtils.quoteIdentifier(identifier);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "243",
                    "column": "27",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/4/DbContents.java\nindex ed1a9fa4bac..3bb26e2e888 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/4/DbContents.java\n@@ -10,7 +10,6 @@ import java.sql.DatabaseMetaData;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.ArrayList;\n-\n import org.h2.jdbc.JdbcConnection;\n import org.h2.util.ParserUtil;\n import org.h2.util.StringUtils;\n@@ -20,6 +19,8 @@ import org.h2.util.Utils;\n  * Keeps meta data information about a database.\n  * This class is used by the H2 Console.\n  */\n+\n+\n public class DbContents {\n \n     private DbSchema[] schemas;\n@@ -33,12 +34,13 @@ public class DbContents {\n     private boolean isFirebird;\n     private boolean isMSSQLServer;\n     private boolean isDB2;\n-\n     private boolean databaseToUpper, databaseToLower;\n \n     /**\n      * @return The default schema.\n      */\n+\n+\n     public DbSchema getDefaultSchema() {\n         return defaultSchema;\n     }\n@@ -46,6 +48,8 @@ public class DbContents {\n     /**\n      * @return True if this is an Apache Derby database.\n      */\n+\n+\n     public boolean isDerby() {\n         return isDerby;\n     }\n@@ -53,6 +57,8 @@ public class DbContents {\n     /**\n      * @return True if this is a Firebird database.\n      */\n+\n+\n     public boolean isFirebird() {\n         return isFirebird;\n     }\n@@ -60,6 +66,8 @@ public class DbContents {\n     /**\n      * @return True if this is a H2 database.\n      */\n+\n+\n     public boolean isH2() {\n         return isH2;\n     }\n@@ -67,6 +75,8 @@ public class DbContents {\n     /**\n      * @return True if this is a MS SQL Server database.\n      */\n+\n+\n     public boolean isMSSQLServer() {\n         return isMSSQLServer;\n     }\n@@ -74,6 +84,8 @@ public class DbContents {\n     /**\n      * @return True if this is a MySQL database.\n      */\n+\n+\n     public boolean isMySQL() {\n         return isMySQL;\n     }\n@@ -81,6 +93,8 @@ public class DbContents {\n     /**\n      * @return True if this is an Oracle database.\n      */\n+\n+\n     public boolean isOracle() {\n         return isOracle;\n     }\n@@ -88,6 +102,8 @@ public class DbContents {\n     /**\n      * @return True if this is a PostgreSQL database.\n      */\n+\n+\n     public boolean isPostgreSQL() {\n         return isPostgreSQL;\n     }\n@@ -95,6 +111,8 @@ public class DbContents {\n     /**\n      * @return True if this is an SQLite database.\n      */\n+\n+\n     public boolean isSQLite() {\n         return isSQLite;\n     }\n@@ -102,6 +120,8 @@ public class DbContents {\n     /**\n      * @return True if this is an IBM DB2 database.\n      */\n+\n+\n     public boolean isDB2() {\n         return isDB2;\n     }\n@@ -109,6 +129,8 @@ public class DbContents {\n     /**\n      * @return The list of schemas.\n      */\n+\n+\n     public DbSchema[] getSchemas() {\n         return schemas;\n     }\n@@ -119,8 +141,9 @@ public class DbContents {\n      * @param url the database URL\n      * @param conn the connection\n      */\n-    public synchronized void readContents(String url, Connection conn)\n-            throws SQLException {\n+\n+\n+    public synchronized void readContents(String url, Connection conn) throws SQLException {\n         isH2 = url.startsWith(\"jdbc:h2:\");\n         isDB2 = url.startsWith(\"jdbc:db2:\");\n         isSQLite = url.startsWith(\"jdbc:sqlite:\");\n@@ -136,10 +159,10 @@ public class DbContents {\n             JdbcConnection.Settings settings = ((JdbcConnection) conn).getSettings();\n             databaseToUpper = settings.databaseToUpper;\n             databaseToLower = settings.databaseToLower;\n-        }else if (isMySQL || isPostgreSQL) {\n+        } else if (isMySQL || isPostgreSQL) {\n             databaseToUpper = false;\n             databaseToLower = true;\n-        } else {\n+                                                                                           } else {\n             databaseToUpper = true;\n             databaseToLower = false;\n         }\n@@ -149,15 +172,13 @@ public class DbContents {\n         schemas = new DbSchema[schemaNames.length];\n         for (int i = 0; i < schemaNames.length; i++) {\n             String schemaName = schemaNames[i];\n-            boolean isDefault = defaultSchemaName == null ||\n-                    defaultSchemaName.equals(schemaName);\n+            boolean isDefault = defaultSchemaName == null || defaultSchemaName.equals(schemaName);\n             DbSchema schema = new DbSchema(this, schemaName, isDefault);\n             if (isDefault) {\n                 defaultSchema = schema;\n             }\n             schemas[i] = schema;\n-            String[] tableTypes = { \"TABLE\", \"SYSTEM TABLE\", \"VIEW\",\n-                    \"SYSTEM VIEW\", \"TABLE LINK\", \"SYNONYM\", \"EXTERNAL\" };\n+            String[] tableTypes = {\"TABLE\", \"SYSTEM TABLE\", \"VIEW\", \"SYSTEM VIEW\", \"TABLE LINK\", \"SYNONYM\", \"EXTERNAL\" };\n             schema.readTables(meta, tableTypes);\n             if (!isPostgreSQL && !isDB2) {\n                 schema.readProcedures(meta);\n@@ -171,9 +192,7 @@ public class DbContents {\n                     defaultSchema = schema;\n                     break;\n                 }\n-                if (defaultSchema == null ||\n-                        best == null ||\n-                        schema.name.length() < best.length()) {\n+                if (defaultSchema == null || best == null || schema.name.length() < best.length()) {\n                     best = schema.name;\n                     defaultSchema = schema;\n                 }\n@@ -183,7 +202,7 @@ public class DbContents {\n \n     private String[] getSchemaNames(DatabaseMetaData meta) throws SQLException {\n         if (isMySQL || isSQLite) {\n-            return new String[] { \"\" };\n+            return new String[] {\"\"};\n         } else if (isFirebird) {\n             return new String[] { null };\n         }\n@@ -193,25 +212,37 @@ public class DbContents {\n             String schema = rs.getString(\"TABLE_SCHEM\");\n             String[] ignoreNames = null;\n             if (isOracle) {\n-                ignoreNames = new String[] { \"CTXSYS\", \"DIP\", \"DBSNMP\",\n-                        \"DMSYS\", \"EXFSYS\", \"FLOWS_020100\", \"FLOWS_FILES\",\n-                        \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OLAPSYS\", \"ORDSYS\",\n-                        \"ORDPLUGINS\", \"OUTLN\", \"SI_INFORMTN_SCHEMA\", \"SYS\",\n-                        \"SYSMAN\", \"SYSTEM\", \"TSMSYS\", \"WMSYS\", \"XDB\" };\n+                ignoreNames = new String[] {\"CTXSYS\", \"DIP\", \"DBSNMP\", \"DMSYS\", \"EXFSYS\", \"FLOWS_020100\", \"FLOWS_FILES\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OLAPSYS\", \"ORDSYS\", \"ORDPLUGINS\", \"OUTLN\", \"SI_INFORMTN_SCHEMA\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TSMSYS\", \"WMSYS\", \"XDB\"};\n             } else if (isMSSQLServer) {\n-                ignoreNames = new String[] { \"sys\", \"db_accessadmin\",\n-                        \"db_backupoperator\", \"db_datareader\", \"db_datawriter\",\n-                        \"db_ddladmin\", \"db_denydatareader\",\n-                        \"db_denydatawriter\", \"db_owner\", \"db_securityadmin\" };\n-            } else if (isDB2) {\n-                ignoreNames = new String[] { \"NULLID\", \"SYSFUN\",\n-                        \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\",\n+                ignoreNames = new String[] {\n+                    \"sys\",\n+                    \"db_accessadmin\",\n+                    \"db_backupoperator\",\n+                    \"db_datareader\",\n+                    \"db_datawriter\",\n+                    \"db_ddladmin\",\n+                    \"db_denydatareader\",\n+                    \"db_denydatawriter\",\n+                    \"db_owner\",\n+                    \"db_securityadmin\"\n+        };\n+                          } else if (isDB2) {\n+                       ignoreNames = new String[] {\n+                           \"NULLID\",\n+                           \"SYSFUN\",\n+                           \"SYSIBMINTERNAL\",\n+                           \"SYSIBMTS\",\n+                           \"SYSPROC\",\n+                           \"SYSPUBLIC\",\n                         // not empty, but not sure what they contain\n-                        \"SYSCAT\",  \"SYSIBM\", \"SYSIBMADM\",\n-                        \"SYSSTAT\", \"SYSTOOLS\",\n-                };\n-\n-            }\n+                           \"SYSCAT\",\n+                           \"SYSIBM\",\n+                           \"SYSIBMADM\",\n+                           \"SYSSTAT\",\n+                           \"SYSTOOLS\"\n+                          ,\n+                       };\n+                   }\n             if (ignoreNames != null) {\n                 for (String ignore : ignoreNames) {\n                     if (ignore.equals(schema)) {\n@@ -239,10 +270,10 @@ public class DbContents {\n             } else if (isMySQL) {\n                 return \"\";\n             } else if (isDerby) {\n-                return StringUtils.toUpperEnglish(meta.getUserName());\n+                       return StringUtils.toUpperEnglish(meta.getUserName());\n             } else if (isFirebird) {\n-                return null;\n-            }\n+                       return null;\n+                   }\n             ResultSet rs = meta.getSchemas();\n             int index = rs.findColumn(\"IS_DEFAULT\");\n             while (rs.next()) {\n@@ -252,6 +283,7 @@ public class DbContents {\n             }\n         } catch (SQLException e) {\n             // IS_DEFAULT not found\n+\n         }\n         return defaultSchemaName;\n     }\n@@ -262,6 +294,8 @@ public class DbContents {\n      * @param identifier the identifier\n      * @return the quoted identifier\n      */\n+\n+\n     public String quoteIdentifier(String identifier) {\n         if (identifier == null) {\n             return null;\n@@ -272,4 +306,4 @@ public class DbContents {\n         return StringUtils.quoteIdentifier(identifier);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 79
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/4/DbContents.java\nindex ed1a9fa4bac..6ceaa5a5622 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/4/DbContents.java\n@@ -136,7 +136,7 @@ public class DbContents {\n             JdbcConnection.Settings settings = ((JdbcConnection) conn).getSettings();\n             databaseToUpper = settings.databaseToUpper;\n             databaseToLower = settings.databaseToLower;\n-        }else if (isMySQL || isPostgreSQL) {\n+        } else if (isMySQL || isPostgreSQL) {\n             databaseToUpper = false;\n             databaseToLower = true;\n         } else {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/4/DbContents.java\nindex ed1a9fa4bac..6ceaa5a5622 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/4/DbContents.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/4/DbContents.java\n@@ -136,7 +136,7 @@ public class DbContents {\n             JdbcConnection.Settings settings = ((JdbcConnection) conn).getSettings();\n             databaseToUpper = settings.databaseToUpper;\n             databaseToLower = settings.databaseToLower;\n-        }else if (isMySQL || isPostgreSQL) {\n+        } else if (isMySQL || isPostgreSQL) {\n             databaseToUpper = false;\n             databaseToLower = true;\n         } else {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}