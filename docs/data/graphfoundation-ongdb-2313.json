{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2313",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "160",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "165",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "201",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "300",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "340",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "399",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "407",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "511",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "543",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "577",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "651",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "660",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "668",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "692",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "698",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "715",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "738",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "792",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "806",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "818",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "820",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "828",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "835",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "868",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "868",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2313/Iterables.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2313/Iterables.java\nindex 09826f71ea5..abcd3b42978 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2313/Iterables.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2313/Iterables.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers.collection;\n \n import java.lang.reflect.Array;\n@@ -47,844 +48,837 @@ import static org.neo4j.helpers.collection.Iterators.asResourceIterator;\n \n public final class Iterables\n {\n-    private Iterables()\n-    {\n-        throw new AssertionError( \"no instance\" );\n-    }\n+  private Iterables()\n+  {\n+    throw new AssertionError(\"no instance\");\n+  }\n \n-    public static <T> Iterable<T> empty()\n-    {\n-        return Collections.emptyList();\n-    }\n+  public static <T> Iterable<T> empty()\n+  {\n+    return Collections.emptyList();\n+  }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T> Iterable<T> emptyResourceIterable()\n-    {\n-        return (Iterable<T>) EmptyResourceIterable.EMPTY_RESOURCE_ITERABLE;\n-    }\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> Iterable<T> emptyResourceIterable()\n+  {\n+    return (Iterable<T>) EmptyResourceIterable.EMPTY_RESOURCE_ITERABLE;\n+  }\n \n-    public static <T> Iterable<T> limit( final int limitItems, final Iterable<T> iterable )\n+  public static <T> Iterable<T> limit(final int limitItems, final Iterable<T> iterable)\n+  {\n+    return () ->\n     {\n-        return () ->\n-        {\n-            final Iterator<T> iterator = iterable.iterator();\n+      final Iterator<T> iterator = iterable.iterator();\n \n-            return new Iterator<T>()\n-            {\n-                int count;\n-\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    return count < limitItems && iterator.hasNext();\n-                }\n-\n-                @Override\n-                public T next()\n-                {\n-                    count++;\n-                    return iterator.next();\n-                }\n-\n-                @Override\n-                public void remove()\n-                {\n-                    iterator.remove();\n-                }\n-            };\n-        };\n-    }\n+      return new Iterator<T>()\n+      {\n+        int count;\n \n-    public static <T> Function<Iterable<T>, Iterable<T>> limit( final int limitItems )\n-    {\n-        return ts -> limit( limitItems, ts );\n-    }\n-\n-    public static <T> Iterable<T> unique( final Iterable<T> iterable )\n-    {\n-        return () ->\n-        {\n-            final Iterator<T> iterator = iterable.iterator();\n-\n-            return new Iterator<T>()\n-            {\n-                Set<T> items = new HashSet<>();\n-                T nextItem;\n-\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    while ( iterator.hasNext() )\n-                    {\n-                        nextItem = iterator.next();\n-                        if ( items.add( nextItem ) )\n-                        {\n-                            return true;\n-                        }\n-                    }\n-\n-                    return false;\n-                }\n-\n-                @Override\n-                public T next()\n-                {\n-                    if ( nextItem == null && !hasNext() )\n-                    {\n-                        throw new NoSuchElementException();\n-                    }\n-\n-                    return nextItem;\n-                }\n-\n-                @Override\n-                public void remove()\n-                {\n-                }\n-            };\n-        };\n-    }\n-\n-    public static <T, C extends Collection<T>> C addAll( C collection, Iterable<? extends T> iterable )\n-    {\n-        Iterator<? extends T> iterator = iterable.iterator();\n-        try\n+        @Override\n+        public boolean hasNext()\n         {\n-            while ( iterator.hasNext() )\n-            {\n-                collection.add( iterator.next() );\n-            }\n+          return count < limitItems && iterator.hasNext();\n         }\n-        finally\n+\n+        @Override\n+        public T next()\n         {\n-            if ( iterator instanceof AutoCloseable )\n-            {\n-                try\n-                {\n-                    ((AutoCloseable) iterator).close();\n-                }\n-                catch ( Exception e )\n-                {\n-                    // Ignore\n-                }\n-            }\n+          count++;\n+          return iterator.next();\n         }\n \n-        return collection;\n-    }\n-\n-    public static <X> Iterable<X> filter( Predicate<? super X> specification, Iterable<X> i )\n-    {\n-        return new FilterIterable<>( i, specification );\n-    }\n-\n-    public static <X> Iterable<X> skip( final int skip, final Iterable<X> iterable )\n-    {\n-        return () ->\n+        @Override\n+        public void remove()\n         {\n-            Iterator<X> iterator = iterable.iterator();\n-\n-            for ( int i = 0; i < skip; i++ )\n-            {\n-                if ( iterator.hasNext() )\n-                {\n-                    iterator.next();\n-                }\n-                else\n-                {\n-                    return Collections.emptyIterator();\n-                }\n-            }\n-\n-            return iterator;\n-        };\n-    }\n-\n-    public static <X> Iterable<X> reverse( Iterable<X> iterable )\n-    {\n-        List<X> list = asList( iterable );\n-        Collections.reverse( list );\n-        return list;\n-    }\n-\n-    @SafeVarargs\n-    public static <X, I extends Iterable<? extends X>> Iterable<X> flatten( I... multiIterator )\n-    {\n-        return new FlattenIterable<>( Arrays.asList(multiIterator) );\n-    }\n-\n-    public static <X, S extends Iterable<? extends X>, I extends Iterable<S>> Iterable<X> flattenIterable(\n-            I multiIterator )\n-    {\n-        return new FlattenIterable<>( multiIterator );\n-    }\n-\n-    public static <FROM, TO> Iterable<TO> map( Function<? super FROM, ? extends TO> function, Iterable<FROM> from )\n-    {\n-        return new MapIterable<>( from, function );\n-    }\n-\n-    public static <FROM, TO> Iterable<TO> flatMap( Function<? super FROM, ? extends Iterable<TO>> function, Iterable<FROM> from )\n-    {\n-        return new CombiningIterable<>( map(function, from) );\n-    }\n-\n-    @SafeVarargs\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T, C extends T> Iterable<T> iterable( C... items )\n-    {\n-        return (Iterable<T>) Arrays.asList( items );\n-    }\n+          iterator.remove();\n+        }\n+      };\n+    };\n+  }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T, C> Iterable<T> cast( Iterable<C> iterable )\n-    {\n-        return (Iterable<T>) iterable;\n-    }\n+  public static <T> Function<Iterable<T>, Iterable<T>> limit(final int limitItems)\n+  {\n+    return ts -> limit(limitItems, ts);\n+  }\n \n-    @SafeVarargs\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T> Iterable<T> concat( Iterable<? extends T>... iterables )\n+  public static <T> Iterable<T> unique(final Iterable<T> iterable)\n+  {\n+    return () ->\n     {\n-        return concat( Arrays.asList( (Iterable<T>[]) iterables ) );\n-    }\n+      final Iterator<T> iterator = iterable.iterator();\n \n-    public static <T> Iterable<T> concat( final Iterable<Iterable<T>> iterables )\n-    {\n-        return new CombiningIterable<>( iterables );\n-    }\n+      return new Iterator<T>()\n+      {\n+        Set<T> items = new HashSet<>();\n+        T nextItem;\n \n-    public static <T, C extends T> Iterable<T> prepend( final C item, final Iterable<T> iterable )\n-    {\n-        return () -> new Iterator<T>()\n+        @Override\n+        public boolean hasNext()\n         {\n-            T first = item;\n-            Iterator<T> iterator;\n-\n-            @Override\n-            public boolean hasNext()\n+          while (iterator.hasNext())\n+          {\n+            nextItem = iterator.next();\n+            if (items.add(nextItem))\n             {\n-                if ( first != null )\n-                {\n-                    return true;\n-                }\n-                if ( iterator == null )\n-                {\n-                    iterator = iterable.iterator();\n-                }\n-\n-                return iterator.hasNext();\n+              return true;\n             }\n+          }\n \n-            @Override\n-            public T next()\n-            {\n-                if ( first != null )\n-                {\n-                    try\n-                    {\n-                        return first;\n-                    }\n-                    finally\n-                    {\n-                        first = null;\n-                    }\n-                }\n-                return iterator.next();\n-            }\n-\n-            @Override\n-            public void remove()\n-            {\n-            }\n-        };\n-    }\n-\n-    public static <T, C extends T> Iterable<T> append( final C item, final Iterable<T> iterable )\n-    {\n-        return () ->\n-        {\n-            final Iterator<T> iterator = iterable.iterator();\n-\n-            return new Iterator<T>()\n-            {\n-                T last = item;\n-\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    return iterator.hasNext() || last != null;\n-                }\n-\n-                @Override\n-                public T next()\n-                {\n-                    if ( iterator.hasNext() )\n-                    {\n-                        return iterator.next();\n-                    }\n-                    try\n-                    {\n-                        return last;\n-                    }\n-                    finally\n-                    {\n-                        last = null;\n-                    }\n-                }\n-\n-                @Override\n-                public void remove()\n-                {\n-                }\n-            };\n-        };\n-    }\n-\n-    public static <T> Iterable<T> cache( Iterable<T> iterable )\n-    {\n-        return new CacheIterable<>( iterable );\n-    }\n-\n-    public static Object[] asArray( Iterable<Object> iterable )\n-    {\n-        return asArray( Object.class, iterable );\n-    }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    public static <T> T[] asArray( Class<T> componentType, Iterable<T> iterable )\n-    {\n-        if ( iterable == null )\n-        {\n-            return null;\n+          return false;\n         }\n \n-        List<T> list = asList( iterable );\n-        return list.toArray( (T[]) Array.newInstance( componentType, list.size() ) );\n-    }\n-\n-    public static <T> ResourceIterable<T> asResourceIterable( final Iterable<T> iterable )\n-    {\n-        if ( iterable instanceof ResourceIterable<?> )\n+        @Override\n+        public T next()\n         {\n-            return (ResourceIterable<T>) iterable;\n+          if (nextItem == null && !hasNext())\n+          {\n+            throw new NoSuchElementException();\n+          }\n+\n+          return nextItem;\n         }\n-        return () -> asResourceIterator( iterable.iterator() );\n-    }\n \n-    public static String toString( Iterable<?> values, String separator )\n-    {\n-        Iterator<?> it = values.iterator();\n-        StringBuilder sb = new StringBuilder();\n-        while ( it.hasNext() )\n+        @Override\n+        public void remove()\n         {\n-            sb.append( it.next().toString() );\n-            if ( it.hasNext() )\n-            {\n-                sb.append( separator );\n-            }\n         }\n-        return sb.toString();\n-    }\n-\n-    /**\n-     * Returns the given iterable's first element or {@code null} if no\n-     * element found.\n-     *\n-     * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n-     * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n-     * has been retrieved, or failed to be retrieved.\n-     *\n-     * @param <T> the type of elements in {@code iterable}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @return the first element in the {@code iterable}, or {@code null} if no\n-     * element found.\n-     */\n-    public static <T> T firstOrNull( Iterable<T> iterable )\n-    {\n-        Iterator<T> iterator = iterable.iterator();\n+      };\n+    };\n+  }\n+\n+  public static <T, C extends Collection<T>> C addAll(C collection, Iterable<? extends T> iterable)\n+  {\n+    Iterator<? extends T> iterator = iterable.iterator();\n+    try\n+    {\n+      while (iterator.hasNext())\n+      {\n+        collection.add(iterator.next());\n+      }\n+    } finally\n+    {\n+      if (iterator instanceof AutoCloseable)\n+      {\n         try\n         {\n-            return Iterators.firstOrNull( iterator );\n-        }\n-        finally\n+          ((AutoCloseable) iterator).close();\n+        } catch (Exception e)\n         {\n-            if ( iterator instanceof Resource )\n-            {\n-                ((Resource) iterator).close();\n-            }\n+          // Ignore\n         }\n+      }\n     }\n \n-    /**\n-     * Returns the given iterable's first element. If no element is found a\n-     * {@link NoSuchElementException} is thrown.\n-     *\n-     * @param <T> the type of elements in {@code iterable}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @return the first element in the {@code iterable}.\n-     * @throws NoSuchElementException if no element found.\n-     */\n-    public static <T> T first( Iterable<T> iterable )\n-    {\n-        return Iterators.first( iterable.iterator() );\n-    }\n-\n-    /**\n-     * Returns the given iterable's last element or {@code null} if no\n-     * element found.\n-     *\n-     * @param <T> the type of elements in {@code iterable}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @return the last element in the {@code iterable}, or {@code null} if no\n-     * element found.\n-     */\n-    public static <T> T lastOrNull( Iterable<T> iterable )\n-    {\n-        return Iterators.lastOrNull( iterable.iterator() );\n-    }\n-\n-    /**\n-     * Returns the given iterable's last element. If no element is found a\n-     * {@link NoSuchElementException} is thrown.\n-     *\n-     * @param <T> the type of elements in {@code iterable}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @return the last element in the {@code iterable}.\n-     * @throws NoSuchElementException if no element found.\n-     */\n-    public static <T> T last( Iterable<T> iterable )\n-    {\n-        return Iterators.last( iterable.iterator() );\n-    }\n-\n-    /**\n-     * Returns the given iterable's single element or {@code null} if no\n-     * element found. If there is more than one element in the iterable a\n-     * {@link NoSuchElementException} will be thrown.\n-     *\n-     * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n-     * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n-     * has been retrieved, or failed to be retrieved.\n-     *\n-     * @param <T> the type of elements in {@code iterable}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @return the single element in {@code iterable}, or {@code null} if no\n-     * element found.\n-     * @throws NoSuchElementException if more than one element was found.\n-     */\n-    public static <T> T singleOrNull( Iterable<T> iterable )\n-    {\n-        return Iterators.singleOrNull( iterable.iterator() );\n-    }\n-\n-    /**\n-     * Returns the given iterable's single element. If there are no elements\n-     * or more than one element in the iterable a {@link NoSuchElementException}\n-     * will be thrown.\n-     *\n-     * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n-     * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n-     * has been retrieved, or failed to be retrieved.\n-     *\n-     * @param <T> the type of elements in {@code iterable}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @return the single element in the {@code iterable}.\n-     * @throws NoSuchElementException if there isn't exactly one element.\n-     */\n-    public static <T> T single( Iterable<T> iterable )\n-    {\n-        return Iterators.single( iterable.iterator() );\n-    }\n+    return collection;\n+  }\n \n-    /**\n-     * Returns the given iterable's single element or {@code itemIfNone} if no\n-     * element found. If there is more than one element in the iterable a\n-     * {@link NoSuchElementException} will be thrown.\n-     *\n-     * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n-     * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n-     * has been retrieved, or failed to be retrieved.\n-     *\n-     * @param <T> the type of elements in {@code iterable}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @param itemIfNone item to use if none is found\n-     * @return the single element in {@code iterable}, or {@code null} if no\n-     * element found.\n-     * @throws NoSuchElementException if more than one element was found.\n-     */\n-    public static <T> T single( Iterable<T> iterable, T itemIfNone )\n-    {\n-        return Iterators.single( iterable.iterator(), itemIfNone );\n-    }\n+  public static <X> Iterable<X> filter(Predicate<? super X> specification, Iterable<X> i)\n+  {\n+    return new FilterIterable<>(i, specification);\n+  }\n \n-    /**\n-     * Returns the iterator's n:th item from the end of the iteration.\n-     * If the iterator has got less than n-1 items in it\n-     * {@link NoSuchElementException} is thrown.\n-     *\n-     * @param <T> the type of elements in {@code iterator}.\n-     * @param iterable the {@link Iterable} to get elements from.\n-     * @param n the n:th item from the end to get.\n-     * @return the iterator's n:th item from the end of the iteration.\n-     * @throws NoSuchElementException if the iterator contains less than n-1 items.\n-     */\n-    public static <T> T fromEnd( Iterable<T> iterable, int n )\n+  public static <X> Iterable<X> skip(final int skip, final Iterable<X> iterable)\n+  {\n+    return () ->\n     {\n-        return Iterators.fromEnd( iterable.iterator(), n );\n-    }\n+      Iterator<X> iterator = iterable.iterator();\n \n-    /**\n-     * Adds all the items in {@code iterator} to {@code collection}.\n-     * @param <C> the type of {@link Collection} to add to items to.\n-     * @param <T> the type of items in the collection and iterator.\n-     * @param iterable the {@link Iterator} to grab the items from.\n-     * @param collection the {@link Collection} to add the items to.\n-     * @return the {@code collection} which was passed in, now filled\n-     * with the items from {@code iterator}.\n-     */\n-    public static <C extends Collection<T>,T> C addToCollection( Iterable<T> iterable,\n-            C collection )\n-    {\n-        return Iterators.addToCollection( iterable.iterator(), collection );\n-    }\n-\n-    /**\n-     * Counts the number of items in the {@code iterator} by looping\n-     * through it.\n-     * @param <T> the type of items in the iterator.\n-     * @param iterable the {@link Iterable} to count items in.\n-     * @return the number of items found in {@code iterable}.\n-     */\n-    public static <T> long count( Iterable<T> iterable )\n-    {\n-        return count( iterable, Predicates.alwaysTrue() );\n-    }\n-\n-    /**\n-     * Counts the number of filtered items in the {@code iterable} by looping through it.\n-     *\n-     * @param <T> the type of items in the iterator.\n-     * @param iterable the {@link Iterable} to count items in.\n-     * @param filter the filter to test items against\n-     * @return the number of found in {@code iterable}.\n-     */\n-    public static <T> long count( Iterable<T> iterable, Predicate<T> filter )\n-    {\n-        Iterator<T> iterator = iterable.iterator();\n-        try\n+      for (int i = 0; i < skip; i++)\n+      {\n+        if (iterator.hasNext())\n         {\n-            return Iterators.count( iterator, filter );\n+          iterator.next();\n+        } else\n+        {\n+          return Collections.emptyIterator();\n         }\n-        finally\n+      }\n+\n+      return iterator;\n+    };\n+  }\n+\n+  public static <X> Iterable<X> reverse(Iterable<X> iterable)\n+  {\n+    List<X> list = asList(iterable);\n+    Collections.reverse(list);\n+    return list;\n+  }\n+\n+  @SafeVarargs\n+  public static <X, I extends Iterable<? extends X>> Iterable<X> flatten(I... multiIterator)\n+  {\n+    return new FlattenIterable<>(Arrays.asList(multiIterator));\n+  }\n+\n+  public static <X, S extends Iterable<? extends X>, I extends Iterable<S>> Iterable<X> flattenIterable(\n+      I multiIterator)\n+  {\n+    return new FlattenIterable<>(multiIterator);\n+  }\n+\n+  public static <FROM, TO> Iterable<TO> map(Function<? super FROM, ? extends TO> function, Iterable<FROM> from)\n+  {\n+    return new MapIterable<>(from, function);\n+  }\n+\n+  public static <FROM, TO> Iterable<TO> flatMap(Function<? super FROM, ? extends Iterable<TO>> function, Iterable<FROM> from)\n+  {\n+    return new CombiningIterable<>(map(function, from));\n+  }\n+\n+  @SafeVarargs\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T, C extends T> Iterable<T> iterable(C... items)\n+  {\n+    return (Iterable<T>) Arrays.asList(items);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T, C> Iterable<T> cast(Iterable<C> iterable)\n+  {\n+    return (Iterable<T>) iterable;\n+  }\n+\n+  @SafeVarargs\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> Iterable<T> concat(Iterable<? extends T>... iterables)\n+  {\n+    return concat(Arrays.asList((Iterable<T>[]) iterables));\n+  }\n+\n+  public static <T> Iterable<T> concat(final Iterable<Iterable<T>> iterables)\n+  {\n+    return new CombiningIterable<>(iterables);\n+  }\n+\n+  public static <T, C extends T> Iterable<T> prepend(final C item, final Iterable<T> iterable)\n+  {\n+    return () -> new Iterator<T>()\n+    {\n+      T first = item;\n+      Iterator<T> iterator;\n+\n+      @Override\n+      public boolean hasNext()\n+      {\n+        if (first != null)\n         {\n-            if ( iterator instanceof ResourceIterator )\n-            {\n-                ((ResourceIterator<?>) iterator).close();\n-            }\n+          return true;\n         }\n-    }\n-\n-    /**\n-     * Creates a collection from an iterable.\n-     *\n-     * @param iterable The iterable to create the collection from.\n-     * @param <T> The generic type of both the iterable and the collection.\n-     * @return a collection containing all items from the iterable.\n-     */\n-    public static <T> Collection<T> asCollection( Iterable<T> iterable )\n-    {\n-        return addToCollection( iterable, new ArrayList<>() );\n-    }\n-\n-    public static <T> List<T> asList( Iterable<T> iterator )\n-    {\n-        return addToCollection( iterator, new ArrayList<>() );\n-    }\n-\n-    public static <T, U> Map<T, U> asMap( Iterable<Pair<T, U>> pairs )\n-    {\n-        Map<T, U> map = new HashMap<>();\n-        for ( Pair<T,U> pair : pairs )\n+        if (iterator == null)\n         {\n-            map.put( pair.first(), pair.other() );\n+          iterator = iterable.iterator();\n         }\n-        return map;\n-    }\n \n-    /**\n-     * Creates a {@link Set} from an {@link Iterable}.\n-     *\n-     * @param iterable The items to create the set from.\n-     * @param <T> The generic type of items.\n-     * @return a set containing all items from the {@link Iterable}.\n-     */\n-    public static <T> Set<T> asSet( Iterable<T> iterable )\n-    {\n-        return addToCollection( iterable, new HashSet<>() );\n-    }\n+        return iterator.hasNext();\n+      }\n \n-    /**\n-     * Creates a {@link Set} from an {@link Iterable}.\n-     *\n-     * @param iterable The items to create the set from.\n-     * @param <T> The generic type of items.\n-     * @return a set containing all items from the {@link Iterable}.\n-     */\n-    public static <T> Set<T> asUniqueSet( Iterable<T> iterable )\n-    {\n-        return Iterators.addToCollectionUnique( iterable, new HashSet<>() );\n-    }\n-\n-    public static Iterable<Long> asIterable( final long... array )\n-    {\n-        return () -> Iterators.asIterator( array );\n-    }\n+      @Override\n+      public T next()\n+      {\n+        if (first != null)\n+        {\n+          try\n+          {\n+            return first;\n+          } finally\n+          {\n+            first = null;\n+          }\n+        }\n+        return iterator.next();\n+      }\n \n-    public static Iterable<Integer> asIterable( final int... array )\n-    {\n-        return () -> Iterators.asIterator( array );\n-    }\n+      @Override\n+      public void remove()\n+      {\n+      }\n+    };\n+  }\n \n-    @SafeVarargs\n-    public static <T> Iterable<T> asIterable( final T... array )\n+  public static <T, C extends T> Iterable<T> append(final C item, final Iterable<T> iterable)\n+  {\n+    return () ->\n     {\n-        return () -> Iterators.iterator( array );\n-    }\n+      final Iterator<T> iterator = iterable.iterator();\n \n-    public static <T> ResourceIterable<T> resourceIterable( final Iterable<T> iterable )\n-    {\n-        return () -> Iterators.resourceIterator( iterable.iterator(), Resource.EMPTY );\n-    }\n+      return new Iterator<T>()\n+      {\n+        T last = item;\n \n-    private static class FlattenIterable<T, I extends Iterable<? extends T>> implements Iterable<T>\n-    {\n-        private final Iterable<I> iterable;\n-\n-        FlattenIterable( Iterable<I> iterable )\n+        @Override\n+        public boolean hasNext()\n         {\n-            this.iterable = iterable;\n+          return iterator.hasNext() || last != null;\n         }\n \n         @Override\n-        public Iterator<T> iterator()\n+        public T next()\n         {\n-            return new FlattenIterator<>( iterable.iterator() );\n+          if (iterator.hasNext())\n+          {\n+            return iterator.next();\n+          }\n+          try\n+          {\n+            return last;\n+          } finally\n+          {\n+            last = null;\n+          }\n         }\n \n-        static class FlattenIterator<T, I extends Iterable<? extends T>>\n-                implements Iterator<T>\n+        @Override\n+        public void remove()\n         {\n-            private final Iterator<I> iterator;\n-            private Iterator<? extends T> currentIterator;\n-\n-            FlattenIterator( Iterator<I> iterator )\n-            {\n-                this.iterator = iterator;\n-                currentIterator = null;\n-            }\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                if ( currentIterator == null )\n-                {\n-                    if ( iterator.hasNext() )\n-                    {\n-                        I next = iterator.next();\n-                        currentIterator = next.iterator();\n-                    }\n-                    else\n-                    {\n-                        return false;\n-                    }\n-                }\n-\n-                while ( !currentIterator.hasNext() && iterator.hasNext() )\n-                {\n-                    currentIterator = iterator.next().iterator();\n-                }\n-\n-                return currentIterator.hasNext();\n-            }\n-\n-            @Override\n-            public T next()\n-            {\n-                return currentIterator.next();\n-            }\n-\n-            @Override\n-            public void remove()\n-            {\n-                if ( currentIterator == null )\n-                {\n-                    throw new IllegalStateException();\n-                }\n-\n-                currentIterator.remove();\n-            }\n         }\n-    }\n-\n-    private static class CacheIterable<T> implements Iterable<T>\n-    {\n-        private final Iterable<T> iterable;\n-        private Iterable<T> cache;\n-\n-        private CacheIterable( Iterable<T> iterable )\n+      };\n+    };\n+  }\n+\n+  public static <T> Iterable<T> cache(Iterable<T> iterable)\n+  {\n+    return new CacheIterable<>(iterable);\n+  }\n+\n+  public static Object[] asArray(Iterable<Object> iterable)\n+  {\n+    return asArray(Object.class, iterable);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public static <T> T[] asArray(Class<T> componentType, Iterable<T> iterable)\n+  {\n+    if (iterable == null)\n+    {\n+      return null;\n+    }\n+\n+    List<T> list = asList(iterable);\n+    return list.toArray((T[]) Array.newInstance(componentType, list.size()));\n+  }\n+\n+  public static <T> ResourceIterable<T> asResourceIterable(final Iterable<T> iterable)\n+  {\n+    if (iterable instanceof ResourceIterable<?>)\n+    {\n+      return (ResourceIterable<T>) iterable;\n+    }\n+    return () -> asResourceIterator(iterable.iterator());\n+  }\n+\n+  public static String toString(Iterable<?> values, String separator)\n+  {\n+    Iterator<?> it = values.iterator();\n+    StringBuilder sb = new StringBuilder();\n+    while (it.hasNext())\n+    {\n+      sb.append(it.next().toString());\n+      if (it.hasNext())\n+      {\n+        sb.append(separator);\n+      }\n+    }\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * Returns the given iterable's first element or {@code null} if no\n+   * element found.\n+   * <p>\n+   * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n+   * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n+   * has been retrieved, or failed to be retrieved.\n+   *\n+   * @param <T>      the type of elements in {@code iterable}.\n+   * @param iterable the {@link Iterable} to get elements from.\n+   * @return the first element in the {@code iterable}, or {@code null} if no\n+   * element found.\n+   */\n+  public static <T> T firstOrNull(Iterable<T> iterable)\n+  {\n+    Iterator<T> iterator = iterable.iterator();\n+    try\n+    {\n+      return Iterators.firstOrNull(iterator);\n+    } finally\n+    {\n+      if (iterator instanceof Resource)\n+      {\n+        ((Resource) iterator).close();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Returns the given iterable's first element. If no element is found a\n+   * {@link NoSuchElementException} is thrown.\n+   *\n+   * @param <T>      the type of elements in {@code iterable}.\n+   * @param iterable the {@link Iterable} to get elements from.\n+   * @return the first element in the {@code iterable}.\n+   * @throws NoSuchElementException if no element found.\n+   */\n+  public static <T> T first(Iterable<T> iterable)\n+  {\n+    return Iterators.first(iterable.iterator());\n+  }\n+\n+  /**\n+   * Returns the given iterable's last element or {@code null} if no\n+   * element found.\n+   *\n+   * @param <T>      the type of elements in {@code iterable}.\n+   * @param iterable the {@link Iterable} to get elements from.\n+   * @return the last element in the {@code iterable}, or {@code null} if no\n+   * element found.\n+   */\n+  public static <T> T lastOrNull(Iterable<T> iterable)\n+  {\n+    return Iterators.lastOrNull(iterable.iterator());\n+  }\n+\n+  /**\n+   * Returns the given iterable's last element. If no element is found a\n+   * {@link NoSuchElementException} is thrown.\n+   *\n+   * @param <T>      the type of elements in {@code iterable}.\n+   * @param iterable the {@link Iterable} to get elements from.\n+   * @return the last element in the {@code iterable}.\n+   * @throws NoSuchElementException if no element found.\n+   */\n+  public static <T> T last(Iterable<T> iterable)\n+  {\n+    return Iterators.last(iterable.iterator());\n+  }\n+\n+  /**\n+   * Returns the given iterable's single element or {@code null} if no\n+   * element found. If there is more than one element in the iterable a\n+   * {@link NoSuchElementException} will be thrown.\n+   * <p>\n+   * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n+   * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n+   * has been retrieved, or failed to be retrieved.\n+   *\n+   * @param <T>      the type of elements in {@code iterable}.\n+   * @param iterable the {@link Iterable} to get elements from.\n+   * @return the single element in {@code iterable}, or {@code null} if no\n+   * element found.\n+   * @throws NoSuchElementException if more than one element was found.\n+   */\n+  public static <T> T singleOrNull(Iterable<T> iterable)\n+  {\n+    return Iterators.singleOrNull(iterable.iterator());\n+  }\n+\n+  /**\n+   * Returns the given iterable's single element. If there are no elements\n+   * or more than one element in the iterable a {@link NoSuchElementException}\n+   * will be thrown.\n+   * <p>\n+   * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n+   * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n+   * has been retrieved, or failed to be retrieved.\n+   *\n+   * @param <T>      the type of elements in {@code iterable}.\n+   * @param iterable the {@link Iterable} to get elements from.\n+   * @return the single element in the {@code iterable}.\n+   * @throws NoSuchElementException if there isn't exactly one element.\n+   */\n+  public static <T> T single(Iterable<T> iterable)\n+  {\n+    return Iterators.single(iterable.iterator());\n+  }\n+\n+  /**\n+   * Returns the given iterable's single element or {@code itemIfNone} if no\n+   * element found. If there is more than one element in the iterable a\n+   * {@link NoSuchElementException} will be thrown.\n+   * <p>\n+   * If the {@link Iterable#iterator() iterator} created by the {@code iterable} implements {@link Resource}\n+   * it will be {@link Resource#close() closed} in a {@code finally} block after the single item\n+   * has been retrieved, or failed to be retrieved.\n+   *\n+   * @param <T>        the type of elements in {@code iterable}.\n+   * @param iterable   the {@link Iterable} to get elements from.\n+   * @param itemIfNone item to use if none is found\n+   * @return the single element in {@code iterable}, or {@code null} if no\n+   * element found.\n+   * @throws NoSuchElementException if more than one element was found.\n+   */\n+  public static <T> T single(Iterable<T> iterable, T itemIfNone)\n+  {\n+    return Iterators.single(iterable.iterator(), itemIfNone);\n+  }\n+\n+  /**\n+   * Returns the iterator's n:th item from the end of the iteration.\n+   * If the iterator has got less than n-1 items in it\n+   * {@link NoSuchElementException} is thrown.\n+   *\n+   * @param <T>      the type of elements in {@code iterator}.\n+   * @param iterable the {@link Iterable} to get elements from.\n+   * @param n        the n:th item from the end to get.\n+   * @return the iterator's n:th item from the end of the iteration.\n+   * @throws NoSuchElementException if the iterator contains less than n-1 items.\n+   */\n+  public static <T> T fromEnd(Iterable<T> iterable, int n)\n+  {\n+    return Iterators.fromEnd(iterable.iterator(), n);\n+  }\n+\n+  /**\n+   * Adds all the items in {@code iterator} to {@code collection}.\n+   *\n+   * @param <C>        the type of {@link Collection} to add to items to.\n+   * @param <T>        the type of items in the collection and iterator.\n+   * @param iterable   the {@link Iterator} to grab the items from.\n+   * @param collection the {@link Collection} to add the items to.\n+   * @return the {@code collection} which was passed in, now filled\n+   * with the items from {@code iterator}.\n+   */\n+  public static <C extends Collection<T>, T> C addToCollection(Iterable<T> iterable,\n+                                                               C collection)\n+  {\n+    return Iterators.addToCollection(iterable.iterator(), collection);\n+  }\n+\n+  /**\n+   * Counts the number of items in the {@code iterator} by looping\n+   * through it.\n+   *\n+   * @param <T>      the type of items in the iterator.\n+   * @param iterable the {@link Iterable} to count items in.\n+   * @return the number of items found in {@code iterable}.\n+   */\n+  public static <T> long count(Iterable<T> iterable)\n+  {\n+    return count(iterable, Predicates.alwaysTrue());\n+  }\n+\n+  /**\n+   * Counts the number of filtered items in the {@code iterable} by looping through it.\n+   *\n+   * @param <T>      the type of items in the iterator.\n+   * @param iterable the {@link Iterable} to count items in.\n+   * @param filter   the filter to test items against\n+   * @return the number of found in {@code iterable}.\n+   */\n+  public static <T> long count(Iterable<T> iterable, Predicate<T> filter)\n+  {\n+    Iterator<T> iterator = iterable.iterator();\n+    try\n+    {\n+      return Iterators.count(iterator, filter);\n+    } finally\n+    {\n+      if (iterator instanceof ResourceIterator)\n+      {\n+        ((ResourceIterator<?>) iterator).close();\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Creates a collection from an iterable.\n+   *\n+   * @param iterable The iterable to create the collection from.\n+   * @param <T>      The generic type of both the iterable and the collection.\n+   * @return a collection containing all items from the iterable.\n+   */\n+  public static <T> Collection<T> asCollection(Iterable<T> iterable)\n+  {\n+    return addToCollection(iterable, new ArrayList<>());\n+  }\n+\n+  public static <T> List<T> asList(Iterable<T> iterator)\n+  {\n+    return addToCollection(iterator, new ArrayList<>());\n+  }\n+\n+  public static <T, U> Map<T, U> asMap(Iterable<Pair<T, U>> pairs)\n+  {\n+    Map<T, U> map = new HashMap<>();\n+    for (Pair<T, U> pair : pairs)\n+    {\n+      map.put(pair.first(), pair.other());\n+    }\n+    return map;\n+  }\n+\n+  /**\n+   * Creates a {@link Set} from an {@link Iterable}.\n+   *\n+   * @param iterable The items to create the set from.\n+   * @param <T>      The generic type of items.\n+   * @return a set containing all items from the {@link Iterable}.\n+   */\n+  public static <T> Set<T> asSet(Iterable<T> iterable)\n+  {\n+    return addToCollection(iterable, new HashSet<>());\n+  }\n+\n+  /**\n+   * Creates a {@link Set} from an {@link Iterable}.\n+   *\n+   * @param iterable The items to create the set from.\n+   * @param <T>      The generic type of items.\n+   * @return a set containing all items from the {@link Iterable}.\n+   */\n+  public static <T> Set<T> asUniqueSet(Iterable<T> iterable)\n+  {\n+    return Iterators.addToCollectionUnique(iterable, new HashSet<>());\n+  }\n+\n+  public static Iterable<Long> asIterable(final long... array)\n+  {\n+    return () -> Iterators.asIterator(array);\n+  }\n+\n+  public static Iterable<Integer> asIterable(final int... array)\n+  {\n+    return () -> Iterators.asIterator(array);\n+  }\n+\n+  @SafeVarargs\n+  public static <T> Iterable<T> asIterable(final T... array)\n+  {\n+    return () -> Iterators.iterator(array);\n+  }\n+\n+  public static <T> ResourceIterable<T> resourceIterable(final Iterable<T> iterable)\n+  {\n+    return () -> Iterators.resourceIterator(iterable.iterator(), Resource.EMPTY);\n+  }\n+\n+  private static class FlattenIterable<T, I extends Iterable<? extends T>> implements Iterable<T>\n+  {\n+    private final Iterable<I> iterable;\n+\n+    FlattenIterable(Iterable<I> iterable)\n+    {\n+      this.iterable = iterable;\n+    }\n+\n+    @Override\n+    public Iterator<T> iterator()\n+    {\n+      return new FlattenIterator<>(iterable.iterator());\n+    }\n+\n+    static class FlattenIterator<T, I extends Iterable<? extends T>>\n+        implements Iterator<T>\n+    {\n+      private final Iterator<I> iterator;\n+      private Iterator<? extends T> currentIterator;\n+\n+      FlattenIterator(Iterator<I> iterator)\n+      {\n+        this.iterator = iterator;\n+        currentIterator = null;\n+      }\n+\n+      @Override\n+      public boolean hasNext()\n+      {\n+        if (currentIterator == null)\n         {\n-            this.iterable = iterable;\n+          if (iterator.hasNext())\n+          {\n+            I next = iterator.next();\n+            currentIterator = next.iterator();\n+          } else\n+          {\n+            return false;\n+          }\n         }\n \n-        @Override\n-        public Iterator<T> iterator()\n+        while (!currentIterator.hasNext() && iterator.hasNext())\n         {\n-            if ( cache != null )\n-            {\n-                return cache.iterator();\n-            }\n-\n-            final Iterator<T> source = iterable.iterator();\n-\n-            return new Iterator<T>()\n-            {\n-                List<T> iteratorCache = new ArrayList<>();\n-\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    boolean hasNext = source.hasNext();\n-                    if ( !hasNext )\n-                    {\n-                        cache = iteratorCache;\n-                    }\n-                    return hasNext;\n-                }\n-\n-                @Override\n-                public T next()\n-                {\n-                    T next = source.next();\n-                    iteratorCache.add( next );\n-                    return next;\n-                }\n-\n-                @Override\n-                public void remove()\n-                {\n-\n-                }\n-            };\n+          currentIterator = iterator.next().iterator();\n         }\n-    }\n \n-    /**\n-     * Returns the index of the first occurrence of the specified element\n-     * in this iterable, or -1 if this iterable does not contain the element.\n-     * More formally, returns the lowest index {@code i} such that\n-     * {@code (o==null ? get(i)==null : o.equals(get(i)))},\n-     * or -1 if there is no such index.\n-     *\n-     * @param itemToFind element to find\n-     * @param iterable iterable to look for the element in\n-     * @param <T> the type of the elements\n-     * @return the index of the first occurrence of the specified element\n-     *         (or {@code null} if that was specified) or {@code -1}\n-     */\n-    public static <T> int indexOf( T itemToFind, Iterable<T> iterable )\n-    {\n-        if ( itemToFind == null )\n-        {\n-            int index = 0;\n-            for ( T item : iterable )\n-            {\n-                if ( item == null )\n-                {\n-                    return index;\n-                }\n-                index++;\n-            }\n-        }\n-        else\n-        {\n-            int index = 0;\n-            for ( T item : iterable )\n-            {\n-                if ( itemToFind.equals( item ) )\n-                {\n-                    return index;\n-                }\n-                index++;\n-            }\n-        }\n-        return -1;\n-    }\n+        return currentIterator.hasNext();\n+      }\n \n-    public static <T> Iterable<T> option( final T item )\n-    {\n-        if ( item == null )\n+      @Override\n+      public T next()\n+      {\n+        return currentIterator.next();\n+      }\n+\n+      @Override\n+      public void remove()\n+      {\n+        if (currentIterator == null)\n         {\n-            return Collections.emptyList();\n+          throw new IllegalStateException();\n         }\n \n-        return () -> Iterators.iterator( item );\n+        currentIterator.remove();\n+      }\n     }\n+  }\n \n-    public static <T, S extends Comparable<? super S>> Iterable<T> sort( Iterable<T> iterable, final Function<T, S> compareFunction )\n-    {\n-        List<T> list = asList( iterable );\n-        list.sort( Comparator.comparing( compareFunction ) );\n-        return list;\n-    }\n+  private static class CacheIterable<T> implements Iterable<T>\n+  {\n+    private final Iterable<T> iterable;\n+    private Iterable<T> cache;\n \n-    public static String join( String joinString, Iterable<?> iter )\n+    private CacheIterable(Iterable<T> iterable)\n     {\n-        return Iterators.join( joinString, iter.iterator() );\n+      this.iterable = iterable;\n     }\n \n-    /**\n-     * Create a stream from the given iterable.\n-     * <p>\n-     * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterable implements\n-     * {@link Resource}.\n-     *\n-     * @param iterable the iterable to convert to stream\n-     * @param <T> the type of elements in the given iterable\n-     * @return stream over the iterable elements\n-     * @throws NullPointerException when the given iterable is {@code null}\n-     */\n-    public static <T> Stream<T> stream( Iterable<T> iterable )\n+    @Override\n+    public Iterator<T> iterator()\n     {\n-        return stream( iterable, 0 );\n-    }\n+      if (cache != null)\n+      {\n+        return cache.iterator();\n+      }\n \n-    /**\n-     * Create a stream from the given iterable with given characteristics.\n-     * <p>\n-     * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterable implements\n-     * {@link Resource}.\n-     *\n-     * @param iterable the iterable to convert to stream\n-     * @param characteristics the logical OR of characteristics for the underlying {@link Spliterator}\n-     * @param <T> the type of elements in the given iterable\n-     * @return stream over the iterable elements\n-     * @throws NullPointerException when the given iterable is {@code null}\n-     */\n-    public static <T> Stream<T> stream( Iterable<T> iterable, int characteristics )\n-    {\n-        Objects.requireNonNull( iterable );\n-        return Iterators.stream( iterable.iterator(), characteristics );\n-    }\n+      final Iterator<T> source = iterable.iterator();\n \n-    private static class EmptyResourceIterable<T> implements ResourceIterable<T>\n-    {\n-        private static final ResourceIterable<Object> EMPTY_RESOURCE_ITERABLE = new EmptyResourceIterable<>();\n+      return new Iterator<T>()\n+      {\n+        List<T> iteratorCache = new ArrayList<>();\n \n         @Override\n-        public ResourceIterator<T> iterator()\n+        public boolean hasNext()\n         {\n-            return Iterators.emptyResourceIterator();\n+          boolean hasNext = source.hasNext();\n+          if (!hasNext)\n+          {\n+            cache = iteratorCache;\n+          }\n+          return hasNext;\n         }\n-    }\n+\n+        @Override\n+        public T next()\n+        {\n+          T next = source.next();\n+          iteratorCache.add(next);\n+          return next;\n+        }\n+\n+        @Override\n+        public void remove()\n+        {\n+\n+        }\n+      };\n+    }\n+  }\n+\n+  /**\n+   * Returns the index of the first occurrence of the specified element\n+   * in this iterable, or -1 if this iterable does not contain the element.\n+   * More formally, returns the lowest index {@code i} such that\n+   * {@code (o==null ? get(i)==null : o.equals(get(i)))},\n+   * or -1 if there is no such index.\n+   *\n+   * @param itemToFind element to find\n+   * @param iterable   iterable to look for the element in\n+   * @param <T>        the type of the elements\n+   * @return the index of the first occurrence of the specified element\n+   * (or {@code null} if that was specified) or {@code -1}\n+   */\n+  public static <T> int indexOf(T itemToFind, Iterable<T> iterable)\n+  {\n+    if (itemToFind == null)\n+    {\n+      int index = 0;\n+      for (T item : iterable)\n+      {\n+        if (item == null)\n+        {\n+          return index;\n+        }\n+        index++;\n+      }\n+    } else\n+    {\n+      int index = 0;\n+      for (T item : iterable)\n+      {\n+        if (itemToFind.equals(item))\n+        {\n+          return index;\n+        }\n+        index++;\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  public static <T> Iterable<T> option(final T item)\n+  {\n+    if (item == null)\n+    {\n+      return Collections.emptyList();\n+    }\n+\n+    return () -> Iterators.iterator(item);\n+  }\n+\n+  public static <T, S extends Comparable<? super S>> Iterable<T> sort(Iterable<T> iterable, final Function<T, S> compareFunction)\n+  {\n+    List<T> list = asList(iterable);\n+    list.sort(Comparator.comparing(compareFunction));\n+    return list;\n+  }\n+\n+  public static String join(String joinString, Iterable<?> iter)\n+  {\n+    return Iterators.join(joinString, iter.iterator());\n+  }\n+\n+  /**\n+   * Create a stream from the given iterable.\n+   * <p>\n+   * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterable implements\n+   * {@link Resource}.\n+   *\n+   * @param iterable the iterable to convert to stream\n+   * @param <T>      the type of elements in the given iterable\n+   * @return stream over the iterable elements\n+   * @throws NullPointerException when the given iterable is {@code null}\n+   */\n+  public static <T> Stream<T> stream(Iterable<T> iterable)\n+  {\n+    return stream(iterable, 0);\n+  }\n+\n+  /**\n+   * Create a stream from the given iterable with given characteristics.\n+   * <p>\n+   * <b>Note:</b> returned stream needs to be closed via {@link Stream#close()} if the given iterable implements\n+   * {@link Resource}.\n+   *\n+   * @param iterable        the iterable to convert to stream\n+   * @param characteristics the logical OR of characteristics for the underlying {@link Spliterator}\n+   * @param <T>             the type of elements in the given iterable\n+   * @return stream over the iterable elements\n+   * @throws NullPointerException when the given iterable is {@code null}\n+   */\n+  public static <T> Stream<T> stream(Iterable<T> iterable, int characteristics)\n+  {\n+    Objects.requireNonNull(iterable);\n+    return Iterators.stream(iterable.iterator(), characteristics);\n+  }\n+\n+  private static class EmptyResourceIterable<T> implements ResourceIterable<T>\n+  {\n+    private static final ResourceIterable<Object> EMPTY_RESOURCE_ITERABLE = new EmptyResourceIterable<>();\n+\n+    @Override\n+    public ResourceIterator<T> iterator()\n+    {\n+      return Iterators.emptyResourceIterator();\n+    }\n+  }\n }\n",
            "diff_size": 1345
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2313/Iterables.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2313/Iterables.java\nindex 09826f71ea5..727e4e67eff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2313/Iterables.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2313/Iterables.java\n@@ -68,8 +68,7 @@ public final class Iterables\n         return () ->\n         {\n             final Iterator<T> iterator = iterable.iterator();\n-\n-            return new Iterator<T>()\n+return new Iterator<T>()\n             {\n                 int count;\n \n@@ -105,8 +104,7 @@ public final class Iterables\n         return () ->\n         {\n             final Iterator<T> iterator = iterable.iterator();\n-\n-            return new Iterator<T>()\n+return new Iterator<T>()\n             {\n                 Set<T> items = new HashSet<>();\n                 T nextItem;\n@@ -183,8 +181,7 @@ public final class Iterables\n         return () ->\n         {\n             Iterator<X> iterator = iterable.iterator();\n-\n-            for ( int i = 0; i < skip; i++ )\n+for ( int i = 0; i < skip; i++ )\n             {\n                 if ( iterator.hasNext() )\n                 {\n@@ -213,20 +210,19 @@ public final class Iterables\n         return new FlattenIterable<>( Arrays.asList(multiIterator) );\n     }\n \n-    public static <X, S extends Iterable<? extends X>, I extends Iterable<S>> Iterable<X> flattenIterable(\n-            I multiIterator )\n+    public static <X, S extends Iterable<? extends X>, I extends Iterable<S>> Iterable<X> flattenIterable( I multiIterator )\n     {\n         return new FlattenIterable<>( multiIterator );\n     }\n \n-    public static <FROM, TO> Iterable<TO> map( Function<? super FROM, ? extends TO> function, Iterable<FROM> from )\n+    public static <FROM,TO> Iterable<TO> map( Function<? super FROM, ? extends TO> function, Iterable<FROM> from )\n     {\n         return new MapIterable<>( from, function );\n     }\n \n-    public static <FROM, TO> Iterable<TO> flatMap( Function<? super FROM, ? extends Iterable<TO>> function, Iterable<FROM> from )\n+    public static <FROM,TO> Iterable<TO> flatMap( Function<? super FROM, ? extends Iterable<TO>> function, Iterable<FROM> from )\n     {\n-        return new CombiningIterable<>( map(function, from) );\n+        return new CombiningIterable<>( map( function, from) );\n     }\n \n     @SafeVarargs\n@@ -237,7 +233,7 @@ public final class Iterables\n     }\n \n     @SuppressWarnings( \"unchecked\" )\n-    public static <T, C> Iterable<T> cast( Iterable<C> iterable )\n+    public static <T,C> Iterable<T> cast( Iterable<C> iterable )\n     {\n         return (Iterable<T>) iterable;\n     }\n@@ -268,7 +264,8 @@ public final class Iterables\n                 {\n                     return true;\n                 }\n-                if ( iterator == null )\n+\n+if ( iterator == null )\n                 {\n                     iterator = iterable.iterator();\n                 }\n@@ -305,8 +302,7 @@ public final class Iterables\n         return () ->\n         {\n             final Iterator<T> iterator = iterable.iterator();\n-\n-            return new Iterator<T>()\n+return new Iterator<T>()\n             {\n                 T last = item;\n \n@@ -323,7 +319,8 @@ public final class Iterables\n                     {\n                         return iterator.next();\n                     }\n-                    try\n+\n+try\n                     {\n                         return last;\n                     }\n@@ -602,14 +599,15 @@ public final class Iterables\n         return addToCollection( iterator, new ArrayList<>() );\n     }\n \n-    public static <T, U> Map<T, U> asMap( Iterable<Pair<T, U>> pairs )\n+    public static <T,U> Map<T,U> asMap( Iterable<Pair<T, U>> pairs )\n     {\n-        Map<T, U> map = new HashMap<>();\n+        Map<T,U> map = new HashMap<>();\n         for ( Pair<T,U> pair : pairs )\n         {\n             map.put( pair.first(), pair.other() );\n         }\n-        return map;\n+\n+return map;\n     }\n \n     /**\n@@ -672,8 +670,7 @@ public final class Iterables\n             return new FlattenIterator<>( iterable.iterator() );\n         }\n \n-        static class FlattenIterator<T, I extends Iterable<? extends T>>\n-                implements Iterator<T>\n+        static class FlattenIterator<T, I extends Iterable<? extends T>> implements Iterator<T>\n         {\n             private final Iterator<I> iterator;\n             private Iterator<? extends T> currentIterator;\n@@ -746,8 +743,7 @@ public final class Iterables\n             }\n \n             final Iterator<T> source = iterable.iterator();\n-\n-            return new Iterator<T>()\n+return new Iterator<T>()\n             {\n                 List<T> iteratorCache = new ArrayList<>();\n \n@@ -759,7 +755,8 @@ public final class Iterables\n                     {\n                         cache = iteratorCache;\n                     }\n-                    return hasNext;\n+\n+return hasNext;\n                 }\n \n                 @Override\n@@ -773,8 +770,7 @@ public final class Iterables\n                 @Override\n                 public void remove()\n                 {\n-\n-                }\n+}\n             };\n         }\n     }\n@@ -831,7 +827,7 @@ public final class Iterables\n         return () -> Iterators.iterator( item );\n     }\n \n-    public static <T, S extends Comparable<? super S>> Iterable<T> sort( Iterable<T> iterable, final Function<T, S> compareFunction )\n+    public static <T, S extends Comparable<? super S>> Iterable<T> sort( Iterable<T> iterable, final Function<T,S> compareFunction )\n     {\n         List<T> list = asList( iterable );\n         list.sort( Comparator.comparing( compareFunction ) );\n@@ -887,4 +883,4 @@ public final class Iterables\n             return Iterators.emptyResourceIterator();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}