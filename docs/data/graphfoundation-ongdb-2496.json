{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2496",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2496/ProcessUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2496/ProcessUtil.java\nindex bc3c3b08b10..21c9ed9d984 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2496/ProcessUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2496/ProcessUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.proc;\n \n import java.io.File;\n@@ -32,55 +33,57 @@ import java.util.List;\n  */\n public class ProcessUtil\n {\n-    private ProcessUtil()\n-    {\n-    }\n+  private ProcessUtil()\n+  {\n+  }\n \n-    /**\n-     * Get the path to the {@code java} executable that is running this Java program.\n-     * <p>\n-     * This is useful for starting other Java programs using the same exact version of Java.\n-     * <p>\n-     * This value is computed from the {@code java.home} system property.\n-     *\n-     * @return The path to the {@code java} executable that launched this Java process.\n-     */\n-    public static Path getJavaExecutable()\n-    {\n-        String javaHome = System.getProperty( \"java.home\" );\n-        return Paths.get( javaHome, \"bin\", \"java\" );\n-    }\n+  /**\n+   * Get the path to the {@code java} executable that is running this Java program.\n+   * <p>\n+   * This is useful for starting other Java programs using the same exact version of Java.\n+   * <p>\n+   * This value is computed from the {@code java.home} system property.\n+   *\n+   * @return The path to the {@code java} executable that launched this Java process.\n+   */\n+  public static Path getJavaExecutable()\n+  {\n+    String javaHome = System.getProperty(\"java.home\");\n+    return Paths.get(javaHome, \"bin\", \"java\");\n+  }\n \n-    /**\n-     * Get the list of command line arguments that were passed to the Java runtime, as opposed to the Java program.\n-     *\n-     * @see RuntimeMXBean#getInputArguments()\n-     * @return The list of arguments, as Strings, that were given to the Java runtime.\n-     */\n-    public static List<String> getJavaExecutableArguments()\n-    {\n-        RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\n-        return runtimeMxBean.getInputArguments();\n-    }\n+  /**\n+   * Get the list of command line arguments that were passed to the Java runtime, as opposed to the Java program.\n+   *\n+   * @return The list of arguments, as Strings, that were given to the Java runtime.\n+   * @see RuntimeMXBean#getInputArguments()\n+   */\n+  public static List<String> getJavaExecutableArguments()\n+  {\n+    RuntimeMXBean runtimeMxBean = ManagementFactory.getRuntimeMXBean();\n+    return runtimeMxBean.getInputArguments();\n+  }\n \n-    /**\n-     * Get the current classpath as a list of file names.\n-     * @return The list of file names that makes the classpath.\n-     */\n-    public static List<String> getClassPathList()\n-    {\n-        return Arrays.asList( getClassPath().split( File.pathSeparator ) );\n-    }\n+  /**\n+   * Get the current classpath as a list of file names.\n+   *\n+   * @return The list of file names that makes the classpath.\n+   */\n+  public static List<String> getClassPathList()\n+  {\n+    return Arrays.asList(getClassPath().split(File.pathSeparator));\n+  }\n \n-    /**\n-     * Get the classpath as a single string of all the classpath file entries, separated by the path separator.\n-     *\n-     * This is based on the {@code java.class.path} system property.\n-     * @see File#pathSeparator\n-     * @return The current classpath.\n-     */\n-    public static String getClassPath()\n-    {\n-        return System.getProperty( \"java.class.path\" );\n-    }\n+  /**\n+   * Get the classpath as a single string of all the classpath file entries, separated by the path separator.\n+   * <p>\n+   * This is based on the {@code java.class.path} system property.\n+   *\n+   * @return The current classpath.\n+   * @see File#pathSeparator\n+   */\n+  public static String getClassPath()\n+  {\n+    return System.getProperty(\"java.class.path\");\n+  }\n }\n",
            "diff_size": 50
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2496/ProcessUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2496/ProcessUtil.java\nindex bc3c3b08b10..af95aeb4b3d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2496/ProcessUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2496/ProcessUtil.java\n@@ -83,4 +83,4 @@ public class ProcessUtil\n     {\n         return System.getProperty( \"java.class.path\" );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}