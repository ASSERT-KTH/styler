{
    "project_name": "neo4j-neo4j",
    "error_id": "192",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/192/BaseRecordFormats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/192/BaseRecordFormats.java\nindex 873a531f111..08249679a10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/192/BaseRecordFormats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/192/BaseRecordFormats.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import java.util.Set;\n@@ -42,8 +43,8 @@ public abstract class BaseRecordFormats implements RecordFormats\n     private final String storeVersion;\n     private final String introductionVersion;\n \n-    protected BaseRecordFormats( String storeVersion, String introductionVersion, int generation,\n-            Capability... capabilities )\n+    protected BaseRecordFormats(String storeVersion, String introductionVersion, int generation,\n+                                Capability... capabilities)\n     {\n         this.storeVersion = storeVersion;\n         this.generation = generation;\n@@ -70,22 +71,22 @@ public abstract class BaseRecordFormats implements RecordFormats\n     }\n \n     @Override\n-    public boolean equals( Object obj )\n+    public boolean equals(Object obj)\n     {\n-        if ( !(obj instanceof RecordFormats) )\n+        if (!(obj instanceof RecordFormats))\n         {\n             return false;\n         }\n \n         RecordFormats other = (RecordFormats) obj;\n-        return  node().equals( other.node() ) &&\n-                relationship().equals( other.relationship() ) &&\n-                relationshipGroup().equals( other.relationshipGroup() ) &&\n-                property().equals( other.property() ) &&\n-                labelToken().equals( other.labelToken() ) &&\n-                relationshipTypeToken().equals( other.relationshipTypeToken() ) &&\n-                propertyKeyToken().equals( other.propertyKeyToken() ) &&\n-                dynamic().equals( other.dynamic() );\n+        return node().equals(other.node()) &&\n+          relationship().equals(other.relationship()) &&\n+          relationshipGroup().equals(other.relationshipGroup()) &&\n+          property().equals(other.property()) &&\n+          labelToken().equals(other.labelToken()) &&\n+          relationshipTypeToken().equals(other.relationshipTypeToken()) &&\n+          propertyKeyToken().equals(other.propertyKeyToken()) &&\n+          dynamic().equals(other.dynamic());\n     }\n \n     @Override\n@@ -122,28 +123,28 @@ public abstract class BaseRecordFormats implements RecordFormats\n     }\n \n     @Override\n-    public boolean hasCapability( Capability capability )\n+    public boolean hasCapability(Capability capability)\n     {\n-        return contains( capabilities(), capability );\n+        return contains(capabilities(), capability);\n     }\n \n-    public static boolean hasCompatibleCapabilities( RecordFormats one, RecordFormats other, CapabilityType type )\n+    public static boolean hasCompatibleCapabilities(RecordFormats one, RecordFormats other, CapabilityType type)\n     {\n-        Set<Capability> myFormatCapabilities = Stream.of( one.capabilities() )\n-                .filter( capability -> capability.isType( type ) ).collect( toSet() );\n-        Set<Capability> otherFormatCapabilities = Stream.of( other.capabilities() )\n-                .filter( capability -> capability.isType( type ) ).collect( toSet() );\n+        Set<Capability> myFormatCapabilities = Stream.of(one.capabilities())\n+          .filter(capability -> capability.isType(type)).collect(toSet());\n+        Set<Capability> otherFormatCapabilities = Stream.of(other.capabilities())\n+          .filter(capability -> capability.isType(type)).collect(toSet());\n \n-        if ( myFormatCapabilities.equals( otherFormatCapabilities ) )\n+        if (myFormatCapabilities.equals(otherFormatCapabilities))\n         {\n             // If they have the same capabilities then of course they are compatible\n             return true;\n         }\n \n-        boolean capabilitiesNotRemoved = otherFormatCapabilities.containsAll( myFormatCapabilities );\n+        boolean capabilitiesNotRemoved = otherFormatCapabilities.containsAll(myFormatCapabilities);\n \n-        otherFormatCapabilities.removeAll( myFormatCapabilities );\n-        boolean allAddedAreAdditive = otherFormatCapabilities.stream().allMatch( Capability::isAdditive );\n+        otherFormatCapabilities.removeAll(myFormatCapabilities);\n+        boolean allAddedAreAdditive = otherFormatCapabilities.stream().allMatch(Capability::isAdditive);\n \n         // Even if capabilities of the two aren't the same then there's a special case where if the additional\n         // capabilities of the other format are all additive then they are also compatible because no data\n@@ -152,9 +153,9 @@ public abstract class BaseRecordFormats implements RecordFormats\n     }\n \n     @Override\n-    public boolean hasCompatibleCapabilities( RecordFormats other, CapabilityType type )\n+    public boolean hasCompatibleCapabilities(RecordFormats other, CapabilityType type)\n     {\n-        return hasCompatibleCapabilities( this, other, type );\n+        return hasCompatibleCapabilities(this, other, type);\n     }\n \n     @Override\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/192/BaseRecordFormats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/192/BaseRecordFormats.java\nindex 873a531f111..50bf2bcd196 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/192/BaseRecordFormats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/192/BaseRecordFormats.java\n@@ -78,7 +78,7 @@ public abstract class BaseRecordFormats implements RecordFormats\n         }\n \n         RecordFormats other = (RecordFormats) obj;\n-        return  node().equals( other.node() ) &&\n+        return node().equals( other.node() ) &&\n                 relationship().equals( other.relationship() ) &&\n                 relationshipGroup().equals( other.relationshipGroup() ) &&\n                 property().equals( other.property() ) &&\n@@ -162,4 +162,4 @@ public abstract class BaseRecordFormats implements RecordFormats\n     {\n         return new NoRecordFormat<>();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}