{
    "project_name": "CESNET-perun",
    "error_id": "71",
    "information": {
        "errors": [
            {
                "line": "753",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n\t */\t\n\tAttribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n\n\t/**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/71/AttributesManagerImplApi.java\nindex 8e686a7c0dd..70d5c496112 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/71/AttributesManagerImplApi.java\n@@ -750,7 +750,7 @@ public interface AttributesManagerImplApi {\n \t *\n \t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n \t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\t\n+\t */\n \tAttribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n \n \t/**\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/71/AttributesManagerImplApi.java\nindex 8e686a7c0dd..b1955f12170 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/71/AttributesManagerImplApi.java\n@@ -40,2003 +40,2006 @@ import cz.metacentrum.perun.core.implApi.modules.attributes.UserVirtualAttribute\n  */\n public interface AttributesManagerImplApi {\n \n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility facility to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the host.\n-\t *\n-\t * @param sess perun session\n-\t * @param host to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Host host) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo vo to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @param member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @param member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty, non-virtual</b> attributes associated with the member in the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param group group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes (empty and virtual too) associated with the member in the group which have name in list attrNames.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param group group to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the group starts with name startPartOfName.\n-\t * Get only nonvirtual attributes with NotNull value.\n-\t *\n-\t * PRIVILEGE: Get only those attributes the principal has access to.\n-\t *\n-\t * @param sess perun session\n-\t * @param group to get the attributes from\n-\t * @param startPartOfName attribute name start with this part\n-\t * @return list of attributes which name start with startPartOfName\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the resource starts with name startPartOfName.\n-\t * Get only nonvirtual attributes with notNull value.\n-\t *\n-\t * PRIVILEGE: Get only those attributes the principal has access to.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @param startPartOfName attribute name start with this part\n-\t * @return list of attributes which name start with startPartOfName\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the vo which have name in list attrNames (empty and virtual too).\n-\t *\n-\t * @param sess perun session\n-\t * @param vo to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the member which have name in list attrNames (empty and virtual too).\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the group which have name in list attrNames (empty too).\n-\t *\n-\t * @param sess perun session\n-\t * @param group to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raises in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with any user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @return list of attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all entiteless attributes with subject equaled String key\n-\t *\n-\t * @param sess\n-\t * @param key\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all entityless attributes with attributeName\n-\t * @param sess perun session\n-\t * @param attrName\n-\t * @return attribute\n-\t * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws  InternalErrorException;\n-\n-\t/**\n-\t * Return value of entityless attribute by attr_id and key (subject).\n-\t * Value is in the format from DB.\n-\t * IMPORTANT: return only values in String (special format for Map or List)!\n-\t *\n-\t * If value is null, return null.\n-\t * If attribute with subject=key not exists, create new one with null value and return null.\n-\t *\n-\t * @param sess\n-\t * @param attrId\n-\t * @param key\n-\t * @return attr_value in string\n-\t *\n-\t * @throws InternalErrorException if runtime error exception has been thrown\n-\t * @throws AttributeNotExistsException throw exception if attribute with value not exists in DB\n-\t */\n-\tString getEntitylessAttrValueForUpdate(PerunSession sess, int attrId, String key) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Returns list of Keys which fits the attributeDefinition.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all attributes with not-null value which fits the attributeDefinition. Can't process core or virtual attributes.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition\n-\t * @return list of attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility to get the attributes from\n-\t * @param user to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the member in the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the user which have name in list attrNames (empty and virtual too).\n-\t *\n-\t * @param sess perun session\n-\t * @param user to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the UserExtSource.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n-\n-\tList<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException;\n-\n-\tList<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the UserExtSource.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the user on the all facilities.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichAttribute<User, Facility>> getAllUserFacilityRichAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get particular attribute for the facility.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param facility to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the vo.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param vo to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the group.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param group to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the resource.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param resource to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member on this resource.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param resource to get attribute from\n-\t * @param member to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member in this group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get attribute from\n-\t * @param group to get attribute from\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param member to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user on this facility.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\n-\t/**\n-\t * Get particular entityless attribute\n-\t * @param sess perun session\n-\t * @param key key to get attribute for\n-\t * @param attributeName\n-\t * @return attribute\n-\t * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException  if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the User External Source.\n-\t *\n-\t * @param sess\n-\t * @param ues\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get attributes definition (attribute without defined value).\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get attributes definition (attribute without defined value).\n-\t *\n-\t * @return List of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Get attributes definition (attribute without defined value) with specified namespace.\n-\t *\n-\t * @param namespace get only attributes with this namespace\n-\t * @return List of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException;\n-\n-\t/**\n-\t * Get attibute definition (attribute without defined value).\n-\t *\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the facility.\n-\t *\n-\t * @param id attribute id\n-\t * @param facility to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the vo.\n-\t *\n-\t * @param id attribute id\n-\t * @param vo to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the resource.\n-\t *\n-\t * @param id attribute id\n-\t * @param resource to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member on this resource.\n-\t *\n-\t * @param id attribute id\n-\t * @param resource to get attribute from\n-\t * @param member to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member in this group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get attribute from\n-\t * @param group to get attribute from\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user on this facility.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user external source.\n-\t *\n-\t * @param sess\n-\t * @param ues\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\t\n-\tAttribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Store the particular attribute associated with the given perun bean. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n-\t *\n-\t * @param sess perun session\n-\t * @param object object of setting the attribute, must be one of perunBean or string\n-\t * @param attribute attribute to set\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeAssignmentException if the namespace of the attribute does not match the perunBean\n-\t */\n-\tboolean setAttribute(PerunSession sess, Object object, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Store the particular attribute associated with the bean1 and bean2. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n-\t *\n-\t * @param sess perun session\n-\t * @param bean1 first perun bean\n-\t * @param bean2 second perun bean\n-\t * @param attribute attribute to set\n-\t *\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean setAttribute(PerunSession sess, PerunBean bean1, PerunBean bean2, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Insert attribute value in DB.\n-\t *\n-\t * @param sess perun session\n-\t * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n-\t * @param attribute that will be stored in the DB\n-\t * @param tableName in the database in which the attribute will be inserted\n-\t * @param columnNames of the database table in which the attribute will be written\n-\t * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic boolean insertAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n-\n-\t/**\n-\t * Update attribute value in DB.\n-\t *\n-\t * @param sess perun session\n-\t * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n-\t * @param attribute that will be stored in the DB\n-\t * @param tableName in the database for updating\n-\t * @param columnNames of the database table in which the attribute will be written\n-\t * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic boolean updateAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n-\n-\t/**\n-\t * Set entityless attribute with null value (for key and attribute). Shouldn't be called from upper layer !!!\n-\t *\n-\t * @param sess\n-\t * @param key key for storing entityless attribute\n-\t * @param attribute attribute to set\n-\t *\n-\t * @return true if insert is ok\n-\t *\n-\t * @throws InternalErrorException if runtimeException is thrown\n-\t */\n-\tboolean setAttributeWithNullValue(final PerunSession sess, final String key, final Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the facility and user combination.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the resource and group combination.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @param group\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the member and group combination.\n-\t *\n-\t * @param sess perun session\n-\t * @param member member to set on\n-\t * @param group group to set on\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the user external source.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Creates an attribute, the attribute is stored into the appropriate DB table according to the namespace.\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute to create\n-\t *\n-\t * @return attribute with set id\n-\t *\n-\t * @throws AttributeExistsException if attribute already exists\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeExistsException;\n-\n-\t/**\n-\t * Deletes the attribute. Definition and all values.\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute to delete\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Delete all authz for the attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute the attribute\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorExceptions\n-\t */\n-\tvoid deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Get attributes definions required by all services assigned on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @return attributes definions required by all services assigned on the resource.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get facility attributes which are required by services. Services are known from the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param facility you get attributes for this facility\n-\t * @return list of facility attributes which are required by services which are assigned to resource\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get resource attributes which are required by services.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @param serviceIds\n-\t * @return list of resource attributes which are required by services which are selceted\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, List<Integer> serviceIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Get resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param resource resource for which you want to get the attributes\n-\t * @return list of resource attributes which are required by services which are assigned to resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param member you get attributes for this member\n-\t * @return list of member attributes which are required by services which are assigned to resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param resource you get attributes for this resource and the member\n-\t * @param member you get attributes for this member and the resource\n-\t * @return list of member-resource attributes which are required by services which are assigned to another resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user-facility attributes which are required by services. Services are known from the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param facility facility from which the services are taken\n-\t * @param user you get attributes for this user\n-\t * @return list of member-resource attributes which are required by services which are assigned to another resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user attributes which are required by services. Services are known from the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom\n-\t * @param user you get attributes for this user\n-\t * @return list of user attributes which are required by services which are assigned to resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException;\n-\t/**\n-\t * Get all attributes which are required by service.\n-\t * Required attribues are requisite for Service to run.\n-\t *\n-\t * @param sess sess\n-\t * @param service service from which the attributes will be listed\n-\t *\n-\t * @return All attributes which are required by service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException;\n-\n-\t/**\n-\t *  Get facility attributes which are required by all services which are connected to this facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility you get attributes for this facility\n-\t * @return list of facility attributes which are required by all services which are connected to this facility.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get facility attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility you get attributes for this facility\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of facility attributes which are required by the service\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get vo attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo you get attributes for this vo\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of vo attributes which are required by the service\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get resource attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource for which you want to get the attributes\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of resource attributes which are required by the service\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-resource attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource you get attributes for this resource and the member\n-\t * @param member you get attributes for this member and the resource\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-resource attributes which are required by service for each member in list of members.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param resource you get attributes for this resource and the members\n-\t * @param members you get attributes for this list of members and the resource\n-\t * @return map of member and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member attributes which are required by service for each member in list of members.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param resource resource only to get allowed members\n-\t * @param members you get attributes for this list of members\n-\t * @return map of member and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user-facility attributes which are required by the service for each user in list of users.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param facility you get attributes for this facility and user\n-\t * @param users you get attributes for this user and facility\n-\t * @return map of userID and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user attributes which are required by the service for each user in list of users.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param users you get attributes for this user and facility\n-\t * @return map of userID and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-group attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param member you get attributes for this member and the group\n-\t * @param group you get attributes for this group in which member is associated\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-group attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param group you get attributes for this group and the member\n-\t * @param member you get attributes for this member and the group\n-\t * @return list of member-group attributes which are required by services which are assigned to another resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service you'll get\n-\t * @param member\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user-facility attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service you'll get\n-\t * @param facility\n-\t * @param user\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service you'll get\n-\t * @param user\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException;\n-\t/**\n-\t * This method try to fill a value of the resource attribute. Value may be copied from some facility attribute.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource, attribute of which you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the member-resource attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource  attribute of this resource (and member) and you want to fill\n-\t * @param member attribute of this member (and resource) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method tries to fill value of the member-group attribute. This value is automatically generated, but not all attributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param member attribute of this member (and group) you want to fill\n-\t * @param group attribute of this group you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be overwritten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the user-facility attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility  attribute of this facility (and user) and you want to fill\n-\t * @param user attribute of this user (and facility) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the user attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param user attribute of this user (and facility) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the member attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param member attribute of this member (and facility) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException;\n-\n-\tAttribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException;\n-\n-\tAttribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException;\n-\n-\tAttribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the user external source attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues attribute of this user external source you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which may have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess perun session\n-\t * @param key\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param host\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param member\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param group\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param ues\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this facility attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility facility for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this vo attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo vo for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this group attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param group group for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this resource attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this member-resource attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource for which (and for specified member) you want to check validity of attribute\n-\t * @param member member for which (and for specified resource) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this member-group attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param group group for which (and for specified member) you want to check validity of attribute\n-\t * @param member member for which (and for specified group) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this user-facility attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param facility facility for which (and for specified user) you want to check validity of attribute\n-\t * @param user user for which (and for specified facility) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this user attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param user user for which (and for specified facility) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this member attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param member member for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\tvoid checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException;\n-\n-\tvoid checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this entityless attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param key key for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this user external source attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param ues user external source for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Unset particular attribute for the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility remove attribute from this facility\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular entityless attribute with subject equals key.\n-\t *\n-\t * @param sess perun session\n-\t * @param key subject of entityless attribute\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility remove attributes from this facility\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove all non-virtual group-resource attribute on selected resource\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove all non-virtual member-resource attributes assigned to resource\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular attribute for the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo remove attribute from this vo\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo remove attributes from this vo\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular attribute for the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attribute from this group\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attributes from this group\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException;\n-\n-\n-\t/**\n-\t * Unset particular attribute for the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource remove attribute from this resource\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource remove attributes from this resource\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular member-resorce attribute for the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource remove attributes for this resource\n-\t * @param member remove attribute from this member\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (member-resource) attributes for the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param member remove attributes from this member\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular attribute for the member in the group. Core attributes can't be removed this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attributes for this group\n-\t * @param member remove attribute from this member\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the member in the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attributes for this group\n-\t * @param member remove attributes from this member\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular member attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param member\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all member attributes for the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular user-facility attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (user-facility) <b>non-virtual</b> attributes for the user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (user-facility) <b>non-virtual</b> attributes for any user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (user-facility) <b>non-virtual</b> attributes for the user and <b>all facilities</b>\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular user-facility virtual attribute value.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeVirtualAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular resource virtual attribute value.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param attribute\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean removeVirtualAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Unset particular group-resource virtual attribute value.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @param attribute\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean removeVirtualAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Unset particular user attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all user attributes for the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular host attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param host\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException;\n-\t/**\n-\t * Unset all user attributes for the host.\n-\t *\n-\t * @param sess perun session\n-\t * @param host\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular group_resource attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource\n-\t * @param group group\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all group_resource attributes\n-\t *\n-\t * @param sess perun session\n-\t * @param resource Resource\n-\t * @param group Group\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular user external source attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param ues\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all UserExtSource attributes for the user external source.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if attribute exists in underlaying data source.\n-\t *\n-\t * @param sess perun session\n-\t * @param attribute attribute to check\n-\t * @return true if attribute exists in underlaying data source, false othewise\n-\t *\n-\t * @throws InternalErrorException if unexpected error occured\n-\t */\n-\tboolean attributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if attribute exists in underlaying data source.\n-\t *\n-\t * @param sess perun session\n-\t * @param attribute attribute to check\n-\t * @throws InternalErrorException if unexpected error occured\n-\t * @throws AttributeNotExistsException if attribute doesn';t exists\n-\t */\n-\tvoid checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Check if actionType exists in underlaying data source.\n-\t *\n-\t * @param sess perun session\n-\t * @param actionType actionType to check\n-\t * @throws InternalErrorException if unexpected error occured\n-\t * @throws ActionTypeNotExistsException if attriobute doesn't exists\n-\t */\n-\tvoid checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException;\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility facility to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the member.\n+     *\n+     * @param sess perun session\n+     * @param member to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the vo.\n+     *\n+     * @param sess perun session\n+     * @param vo to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the group.\n+     *\n+     * @param sess perun session\n+     * @param group to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the host.\n+     *\n+     * @param sess perun session\n+     * @param host to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Host host) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the vo.\n+     *\n+     * @param sess perun session\n+     * @param vo vo to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the group.\n+     *\n+     * @param sess perun session\n+     * @param group group to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource resource to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the member on the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource to get the attributes from\n+     * @param member to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the member on the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource to get the attributes from\n+     * @param member to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty, non-virtual</b> attributes associated with the member in the group.\n+     *\n+     * @param sess perun session\n+     * @param member to get the attributes from\n+     * @param group group to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get all attributes (empty and virtual too) associated with the member in the group which have name in list attrNames.\n+     *\n+     * @param sess perun session\n+     * @param member to get the attributes from\n+     * @param group group to get the attributes from\n+     * @param attrNames list of attributes' names\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the member.\n+     *\n+     * @param sess perun session\n+     * @param member member to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the group starts with name startPartOfName.\n+     * Get only nonvirtual attributes with NotNull value.\n+     *\n+     * PRIVILEGE: Get only those attributes the principal has access to.\n+     *\n+     * @param sess perun session\n+     * @param group to get the attributes from\n+     * @param startPartOfName attribute name start with this part\n+     * @return list of attributes which name start with startPartOfName\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the resource starts with name startPartOfName.\n+     * Get only nonvirtual attributes with notNull value.\n+     *\n+     * PRIVILEGE: Get only those attributes the principal has access to.\n+     *\n+     * @param sess perun session\n+     * @param resource to get the attributes from\n+     * @param startPartOfName attribute name start with this part\n+     * @return list of attributes which name start with startPartOfName\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException;\n+\n+    /**\n+     * Get all attributes associated with the vo which have name in list attrNames (empty and virtual too).\n+     *\n+     * @param sess perun session\n+     * @param vo to get the attributes from\n+     * @param attrNames list of attributes' names\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException;\n+\n+    /**\n+     * Get all attributes associated with the member which have name in list attrNames (empty and virtual too).\n+     *\n+     * @param sess perun session\n+     * @param member to get the attributes from\n+     * @param attrNames list of attributes' names\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException;\n+\n+    /**\n+     * Get all attributes associated with the group which have name in list attrNames (empty too).\n+     *\n+     * @param sess perun session\n+     * @param group to get the attributes from\n+     * @param attrNames list of attributes' names\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raises in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the user on the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @param user\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with any user on the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @return list of attributes\n+     * @throws InternalErrorException\n+     */\n+    List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Get all entiteless attributes with subject equaled String key\n+     *\n+     * @param sess\n+     * @param key\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException;\n+\n+    /**\n+     * Get all entityless attributes with attributeName\n+     * @param sess perun session\n+     * @param attrName\n+     * @return attribute\n+     * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws InternalErrorException;\n+\n+    /**\n+     * Return value of entityless attribute by attr_id and key (subject).\n+     * Value is in the format from DB.\n+     * IMPORTANT: return only values in String (special format for Map or List)!\n+     *\n+     * If value is null, return null.\n+     * If attribute with subject=key not exists, create new one with null value and return null.\n+     *\n+     * @param sess\n+     * @param attrId\n+     * @param key\n+     * @return attr_value in string\n+     *\n+     * @throws InternalErrorException if runtime error exception has been thrown\n+     * @throws AttributeNotExistsException throw exception if attribute with value not exists in DB\n+     */\n+    String getEntitylessAttrValueForUpdate(PerunSession sess, int attrId, String key) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Returns list of Keys which fits the attributeDefinition.\n+     *\n+     * @param sess\n+     * @param attributeDefinition\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Returns all attributes with not-null value which fits the attributeDefinition. Can't process core or virtual attributes.\n+     *\n+     * @param sess\n+     * @param attributeDefinition\n+     * @return list of attributes\n+     * @throws InternalErrorException\n+     */\n+    List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the user on the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility to get the attributes from\n+     * @param user to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the member in the group.\n+     *\n+     * @param sess perun session\n+     * @param member to get the attributes from\n+     * @param group to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the user.\n+     *\n+     * @param sess perun session\n+     * @param user\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all attributes associated with the user which have name in list attrNames (empty and virtual too).\n+     *\n+     * @param sess perun session\n+     * @param user to get the attributes from\n+     * @param attrNames list of attributes' names\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the user.\n+     *\n+     * @param sess perun session\n+     * @param user to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all virtual attributes associated with the UserExtSource.\n+     *\n+     * @param sess perun session\n+     * @param ues to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getVirtualAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n+\n+    List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException;\n+\n+    List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the UserExtSource.\n+     *\n+     * @param sess perun session\n+     * @param ues to get the attributes from\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n+\n+    /**\n+     * Get all <b>non-empty</b> attributes associated with the user on the all facilities.\n+     *\n+     * @param sess perun session\n+     * @param user\n+     * @return list of attributes\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<RichAttribute<User, Facility>> getAllUserFacilityRichAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get particular attribute for the facility.\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @param facility to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the vo.\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @param vo to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the group.\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @param group to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the resource.\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @param resource to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the member on this resource.\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @param resource to get attribute from\n+     * @param member to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the member in this group.\n+     *\n+     * @param sess perun session\n+     * @param member to get attribute from\n+     * @param group to get attribute from\n+     * @param attributeName attribute name defined in the particular manager\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the member.\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @param member to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the user on this facility.\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the user.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param attributeName attribute name defined in the particular manager\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+\n+    /**\n+     * Get particular entityless attribute\n+     * @param sess perun session\n+     * @param key key to get attribute for\n+     * @param attributeName\n+     * @return attribute\n+     * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException  if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the User External Source.\n+     *\n+     * @param sess\n+     * @param ues\n+     * @param attributeName attribute name defined in the particular manager\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get attributes definition (attribute without defined value).\n+     *\n+     * @param attributeName attribute name defined in the particular manager\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get attributes definition (attribute without defined value).\n+     *\n+     * @return List of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Get attributes definition (attribute without defined value) with specified namespace.\n+     *\n+     * @param namespace get only attributes with this namespace\n+     * @return List of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException;\n+\n+    /**\n+     * Get attibute definition (attribute without defined value).\n+     *\n+     * @param id attribute id\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the facility.\n+     *\n+     * @param id attribute id\n+     * @param facility to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the vo.\n+     *\n+     * @param id attribute id\n+     * @param vo to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the resource.\n+     *\n+     * @param id attribute id\n+     * @param resource to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the member on this resource.\n+     *\n+     * @param id attribute id\n+     * @param resource to get attribute from\n+     * @param member to get attribute from\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the member in this group.\n+     *\n+     * @param sess perun session\n+     * @param member to get attribute from\n+     * @param group to get attribute from\n+     * @param id attribute id\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the member.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param id attribute id\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the user on this facility.\n+     *\n+     * @param sess\n+     * @param facility\n+     * @param user\n+     * @param id attribute id\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the user.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param id attribute id\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Get particular attribute for the user external source.\n+     *\n+     * @param sess\n+     * @param ues\n+     * @param id attribute id\n+     * @return attribute\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+     */\n+    Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Store the particular attribute associated with the given perun bean. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n+     *\n+     * @param sess perun session\n+     * @param object object of setting the attribute, must be one of perunBean or string\n+     * @param attribute attribute to set\n+     * @return true if new value differs from old value (i.e. values changed)\n+     *         false otherwise (value do not change)\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeAssignmentException if the namespace of the attribute does not match the perunBean\n+     */\n+    boolean setAttribute(PerunSession sess, Object object, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n+\n+    /**\n+     * Store the particular attribute associated with the bean1 and bean2. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n+     *\n+     * @param sess perun session\n+     * @param bean1 first perun bean\n+     * @param bean2 second perun bean\n+     * @param attribute attribute to set\n+     *\n+     * @return true if new value differs from old value (i.e. values changed)\n+     *         false otherwise (value do not change)\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean setAttribute(PerunSession sess, PerunBean bean1, PerunBean bean2, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n+\n+    /**\n+     * Insert attribute value in DB.\n+     *\n+     * @param sess perun session\n+     * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n+     * @param attribute that will be stored in the DB\n+     * @param tableName in the database in which the attribute will be inserted\n+     * @param columnNames of the database table in which the attribute will be written\n+     * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n+     * @return true if new value differs from old value (i.e. values changed)\n+     *         false otherwise (value do not change)\n+     * @throws InternalErrorException\n+     */\n+    public boolean insertAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n+\n+    /**\n+     * Update attribute value in DB.\n+     *\n+     * @param sess perun session\n+     * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n+     * @param attribute that will be stored in the DB\n+     * @param tableName in the database for updating\n+     * @param columnNames of the database table in which the attribute will be written\n+     * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n+     * @return true if new value differs from old value (i.e. values changed)\n+     *         false otherwise (value do not change)\n+     * @throws InternalErrorException\n+     */\n+    public boolean updateAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n+\n+    /**\n+     * Set entityless attribute with null value (for key and attribute). Shouldn't be called from upper layer !!!\n+     *\n+     * @param sess\n+     * @param key key for storing entityless attribute\n+     * @param attribute attribute to set\n+     *\n+     * @return true if insert is ok\n+     *\n+     * @throws InternalErrorException if runtimeException is thrown\n+     */\n+    boolean setAttributeWithNullValue(final PerunSession sess, final String key, final Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the facility and user combination.\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @param user\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the resource and group combination.\n+     *\n+     * @param sess perun session\n+     * @param resource\n+     * @param group\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the member and group combination.\n+     *\n+     * @param sess perun session\n+     * @param member member to set on\n+     * @param group group to set on\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the member.\n+     *\n+     * @param sess perun session\n+     * @param member\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the user.\n+     *\n+     * @param sess perun session\n+     * @param user\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Store the particular virtual attribute associated with the user external source.\n+     *\n+     * @param sess perun session\n+     * @param ues\n+     * @param attribute attribute to set\n+     * @return true if attribute was really changed\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ModuleNotExistsException\n+     * @throws WrongModuleTypeException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean setVirtualAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Creates an attribute, the attribute is stored into the appropriate DB table according to the namespace.\n+     *\n+     * @param sess\n+     * @param attribute attribute to create\n+     *\n+     * @return attribute with set id\n+     *\n+     * @throws AttributeExistsException if attribute already exists\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeExistsException;\n+\n+    /**\n+     * Deletes the attribute. Definition and all values.\n+     *\n+     * @param sess\n+     * @param attribute attribute to delete\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Delete all authz for the attribute.\n+     *\n+     * @param sess\n+     * @param attribute the attribute\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorExceptions\n+     */\n+    void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Get attributes definions required by all services assigned on the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource\n+     * @return attributes definions required by all services assigned on the resource.\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Get facility attributes which are required by services. Services are known from the resource.\n+     *\n+     * @param sess perun session\n+     * @param resourceToGetServicesFrom resource from which the services are taken\n+     * @param facility you get attributes for this facility\n+     * @return list of facility attributes which are required by services which are assigned to resource\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Get resource attributes which are required by services.\n+     *\n+     * @param sess perun session\n+     * @param resource\n+     * @param serviceIds\n+     * @return list of resource attributes which are required by services which are selceted\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, List<Integer> serviceIds) throws InternalErrorException;\n+\n+    /**\n+     * Get resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+     *\n+     * @param sess perun session\n+     * @param resourceToGetServicesFrom resource from which the services are taken\n+     * @param resource resource for which you want to get the attributes\n+     * @return list of resource attributes which are required by services which are assigned to resource.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Get member attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+     *\n+     * @param sess perun session\n+     * @param resourceToGetServicesFrom resource from which the services are taken\n+     * @param member you get attributes for this member\n+     * @return list of member attributes which are required by services which are assigned to resource.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get member-resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+     *\n+     * @param sess perun session\n+     * @param resourceToGetServicesFrom resource from which the services are taken\n+     * @param resource you get attributes for this resource and the member\n+     * @param member you get attributes for this member and the resource\n+     * @return list of member-resource attributes which are required by services which are assigned to another resource.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get user-facility attributes which are required by services. Services are known from the resource.\n+     *\n+     * @param sess perun session\n+     * @param resourceToGetServicesFrom resource from which the services are taken\n+     * @param facility facility from which the services are taken\n+     * @param user you get attributes for this user\n+     * @return list of member-resource attributes which are required by services which are assigned to another resource.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException;\n+\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get user attributes which are required by services. Services are known from the resource.\n+     *\n+     * @param sess perun session\n+     * @param resourceToGetServicesFrom\n+     * @param user you get attributes for this user\n+     * @return list of user attributes which are required by services which are assigned to resource.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException;\n+\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException;\n+\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get all attributes which are required by service.\n+     * Required attribues are requisite for Service to run.\n+     *\n+     * @param sess sess\n+     * @param service service from which the attributes will be listed\n+     *\n+     * @return All attributes which are required by service.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException;\n+\n+    /**\n+     *  Get facility attributes which are required by all services which are connected to this facility.\n+     *\n+     * @param sess perun session\n+     * @param facility you get attributes for this facility\n+     * @return list of facility attributes which are required by all services which are connected to this facility.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Get facility attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param facility you get attributes for this facility\n+     * @param service attribute required by this service you'll get\n+     * @return list of facility attributes which are required by the service\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Get vo attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param vo you get attributes for this vo\n+     * @param service attribute required by this service you'll get\n+     * @return list of vo attributes which are required by the service\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get resource attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param resource resource for which you want to get the attributes\n+     * @param service attribute required by this service you'll get\n+     * @return list of resource attributes which are required by the service\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Get member-resource attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param resource you get attributes for this resource and the member\n+     * @param member you get attributes for this member and the resource\n+     * @param service attribute required by this service you'll get\n+     * @return list of attributes which are required by the service.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get member-resource attributes which are required by service for each member in list of members.\n+     *\n+     * @param sess perun session\n+     * @param service attribute required by this service\n+     * @param resource you get attributes for this resource and the members\n+     * @param members you get attributes for this list of members and the resource\n+     * @return map of member and his list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException;\n+\n+    /**\n+     * Get member attributes which are required by service for each member in list of members.\n+     *\n+     * @param sess perun session\n+     * @param service attribute required by this service\n+     * @param resource resource only to get allowed members\n+     * @param members you get attributes for this list of members\n+     * @return map of member and his list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException;\n+\n+    /**\n+     * Get user-facility attributes which are required by the service for each user in list of users.\n+     *\n+     * @param sess perun session\n+     * @param service attribute required by this service\n+     * @param facility you get attributes for this facility and user\n+     * @param users you get attributes for this user and facility\n+     * @return map of userID and his list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException;\n+\n+    /**\n+     * Get user attributes which are required by the service for each user in list of users.\n+     *\n+     * @param sess perun session\n+     * @param service attribute required by this service\n+     * @param users you get attributes for this user and facility\n+     * @return map of userID and his list of attributes\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException;\n+\n+    /**\n+     * Get member-group attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param member you get attributes for this member and the group\n+     * @param group you get attributes for this group in which member is associated\n+     * @param service attribute required by this service you'll get\n+     * @return list of attributes which are required by the service.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get member-group attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+     *\n+     * @param sess perun session\n+     * @param resourceToGetServicesFrom resource from which the services are taken\n+     * @param group you get attributes for this group and the member\n+     * @param member you get attributes for this member and the group\n+     * @return list of member-group attributes which are required by services which are assigned to another resource.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Get member attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param service attribute required by this service you'll get\n+     * @param member\n+     * @return list of attributes which are required by the service.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get user-facility attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param service attribute required by this service you'll get\n+     * @param facility\n+     * @param user\n+     * @return list of attributes which are required by the service.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get user attributes which are required by the service.\n+     *\n+     * @param sess perun session\n+     * @param service attribute required by this service you'll get\n+     * @param user\n+     * @return list of attributes which are required by the service.\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException;\n+\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException;\n+\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException;\n+\n+    List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException;\n+\n+    /**\n+     * This method try to fill a value of the resource attribute. Value may be copied from some facility attribute.\n+     *\n+     * @param sess perun session\n+     * @param resource resource, attribute of which you want to fill\n+     * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+     * @return attribute which MAY have filled value\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * This method try to fill value of the member-resource attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+     *\n+     * @param sess perun session\n+     * @param resource  attribute of this resource (and member) and you want to fill\n+     * @param member attribute of this member (and resource) and you want to fill\n+     * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+     * @return attribute which MAY have filled value\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    Attribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * This method tries to fill value of the member-group attribute. This value is automatically generated, but not all attributes can be filled this way.\n+     *\n+     * @param sess perun session\n+     * @param member attribute of this member (and group) you want to fill\n+     * @param group attribute of this group you want to fill\n+     * @param attribute attribute to fill. If attributes already have set value, this value won't be overwritten. This means the attribute value must be empty otherwise this method won't fill it.\n+     * @return attribute which MAY have filled value\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * This method try to fill value of the user-facility attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+     *\n+     * @param sess perun session\n+     * @param facility  attribute of this facility (and user) and you want to fill\n+     * @param user attribute of this user (and facility) and you want to fill\n+     * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+     * @return attribute which MAY have filled value\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * This method try to fill value of the user attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+     *\n+     * @param sess perun session\n+     * @param user attribute of this user (and facility) and you want to fill\n+     * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+     * @return attribute which MAY have filled value\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * This method try to fill value of the member attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+     *\n+     * @param sess perun session\n+     * @param member attribute of this member (and facility) and you want to fill\n+     * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+     * @return attribute which MAY have filled value\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException;\n+\n+    Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException;\n+\n+    Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException;\n+\n+    Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * This method try to fill value of the user external source attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+     *\n+     * @param sess perun session\n+     * @param ues attribute of this user external source you want to fill\n+     * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+     * @return attribute which may have filled value\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess perun session\n+     * @param key\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param host\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param user\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param member\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param group\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param member\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param member\n+     * @param group\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param facility\n+     * @param user\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * If you need to do some further work with other modules, this method do that\n+     *\n+     * @param sess\n+     * @param ues\n+     * @param attribute\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    void changedAttributeHook(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this facility attribute is valid.\n+     *\n+     * @param sess perun session\n+     * @param facility facility for which you want to check validity of attribute\n+     * @param attribute attribute to check\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this vo attribute is valid.\n+     *\n+     * @param sess perun session\n+     * @param vo vo for which you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this group attribute is valid.\n+     *\n+     * @param sess perun session\n+     * @param group group for which you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this resource attribute is valid.\n+     *\n+     * @param sess perun session\n+     * @param resource resource for which you want to check validity of attribute\n+     * @param attribute attribute to check\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this member-resource attribute is valid.\n+     *\n+     *\n+     * @param sess perun session\n+     * @param resource resource for which (and for specified member) you want to check validity of attribute\n+     * @param member member for which (and for specified resource) you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this member-group attribute is valid.\n+     *\n+     * @param sess perun session\n+     * @param group group for which (and for specified member) you want to check validity of attribute\n+     * @param member member for which (and for specified group) you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this user-facility attribute is valid.\n+     *\n+     *\n+     * @param sess perun session\n+     * @param facility facility for which (and for specified user) you want to check validity of attribute\n+     * @param user user for which (and for specified facility) you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    /**\n+     * Check if value of this user attribute is valid.\n+     *\n+     *\n+     * @param sess perun session\n+     * @param user user for which (and for specified facility) you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    /**\n+     * Check if value of this member attribute is valid.\n+     *\n+     *\n+     * @param sess perun session\n+     * @param member member for which you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException;\n+\n+    void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Check if value of this entityless attribute is valid.\n+     *\n+     *\n+     * @param sess perun session\n+     * @param key key for which you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    /**\n+     * Check if value of this user external source attribute is valid.\n+     *\n+     *\n+     * @param sess perun session\n+     * @param ues user external source for which you want to check validity of attribute\n+     * @param attribute attribute to check\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    /**\n+     * Unset particular attribute for the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility remove attribute from this facility\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular entityless attribute with subject equals key.\n+     *\n+     * @param sess perun session\n+     * @param key subject of entityless attribute\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all attributes for the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility remove attributes from this facility\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Remove all non-virtual group-resource attribute on selected resource\n+     *\n+     * @param sess\n+     * @param resource\n+     * @throws InternalErrorException\n+     */\n+    void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Remove all non-virtual member-resource attributes assigned to resource\n+     *\n+     * @param sess\n+     * @param resource\n+     * @throws InternalErrorException\n+     */\n+    void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular attribute for the vo.\n+     *\n+     * @param sess perun session\n+     * @param vo remove attribute from this vo\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all attributes for the vo.\n+     *\n+     * @param sess perun session\n+     * @param vo remove attributes from this vo\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular attribute for the group.\n+     *\n+     * @param sess perun session\n+     * @param group remove attribute from this group\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all attributes for the group.\n+     *\n+     * @param sess perun session\n+     * @param group remove attributes from this group\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException;\n+\n+\n+    /**\n+     * Unset particular attribute for the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource remove attribute from this resource\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all attributes for the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource remove attributes from this resource\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular member-resorce attribute for the member on the resource.\n+     *\n+     * @param sess perun session\n+     * @param resource remove attributes for this resource\n+     * @param member remove attribute from this member\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all (member-resource) attributes for the member on the resource.\n+     *\n+     * @param sess perun session\n+     * @param member remove attributes from this member\n+     *\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular attribute for the member in the group. Core attributes can't be removed this way.\n+     *\n+     * @param sess perun session\n+     * @param group remove attributes for this group\n+     * @param member remove attribute from this member\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all attributes for the member in the group.\n+     *\n+     * @param sess perun session\n+     * @param group remove attributes for this group\n+     * @param member remove attributes from this member\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular member attribute\n+     *\n+     * @param sess perun session\n+     * @param member\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all member attributes for the member.\n+     *\n+     * @param sess perun session\n+     * @param member\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular user-facility attribute\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @param user\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all (user-facility) <b>non-virtual</b> attributes for the user on the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @param user\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+    /**\n+     * Unset all (user-facility) <b>non-virtual</b> attributes for any user on the facility.\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Unset all (user-facility) <b>non-virtual</b> attributes for the user and <b>all facilities</b>\n+     *\n+     * @param sess perun session\n+     * @param user\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular user-facility virtual attribute value.\n+     *\n+     * @param sess perun session\n+     * @param facility\n+     * @param user\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeVirtualAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular resource virtual attribute value.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param attribute\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean removeVirtualAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Unset particular group-resource virtual attribute value.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param group\n+     * @param attribute\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    boolean removeVirtualAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+    /**\n+     * Unset particular user attribute\n+     *\n+     * @param sess perun session\n+     * @param user\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all user attributes for the user.\n+     *\n+     * @param sess perun session\n+     * @param user\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular host attribute\n+     *\n+     * @param sess perun session\n+     * @param host\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all user attributes for the host.\n+     *\n+     * @param sess perun session\n+     * @param host\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular group_resource attribute\n+     *\n+     * @param sess perun session\n+     * @param resource resource\n+     * @param group group\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all group_resource attributes\n+     *\n+     * @param sess perun session\n+     * @param resource Resource\n+     * @param group Group\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n+\n+    /**\n+     * Unset particular user external source attribute\n+     *\n+     * @param sess perun session\n+     * @param ues\n+     * @param attribute attribute to remove\n+     * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    boolean removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Unset all UserExtSource attributes for the user external source.\n+     *\n+     * @param sess perun session\n+     * @param ues\n+     * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     */\n+    void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n+\n+    /**\n+     * Check if attribute exists in underlaying data source.\n+     *\n+     * @param sess perun session\n+     * @param attribute attribute to check\n+     * @return true if attribute exists in underlaying data source, false othewise\n+     *\n+     * @throws InternalErrorException if unexpected error occured\n+     */\n+    boolean attributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Check if attribute exists in underlaying data source.\n+     *\n+     * @param sess perun session\n+     * @param attribute attribute to check\n+     * @throws InternalErrorException if unexpected error occured\n+     * @throws AttributeNotExistsException if attribute doesn';t exists\n+     */\n+    void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException;\n+\n+    /**\n+     * Check if actionType exists in underlaying data source.\n+     *\n+     * @param sess perun session\n+     * @param actionType actionType to check\n+     * @throws InternalErrorException if unexpected error occured\n+     * @throws ActionTypeNotExistsException if attriobute doesn't exists\n+     */\n+    void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException;\n \n \t/*\n \t * @see cz.metacentrum.perun.core.implApi.AttributesManagerImplApi#checkAttributeExists(PerunSession, AttributeDefinition)\n@@ -2045,10 +2048,10 @@ public interface AttributesManagerImplApi {\n \t void checkAttributeExists(PerunSession sess, AttributeDefinition attribute, String expectedNamespace) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n \t */\n \n-\t/**\n-\t * Batch version of checkAttributeExists\n-\t */\n-\tvoid checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException;\n+    /**\n+     * Batch version of checkAttributeExists\n+     */\n+    void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException;\n \n \t/*\n \t * @see cz.metacentrum.perun.core.implApi.AttributesManagerImplApi#checkAttributesExists(PerunSession, List)\n@@ -2057,247 +2060,247 @@ public interface AttributesManagerImplApi {\n \t void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes, String expectedNamespace) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n \t */\n \n-\t/**\n-\t * Determine if attribute is core attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is core attribute\n-\t */\n-\tboolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is defined (def) attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is defined attribute\n-\t *         false otherwise\n-\t */\n-\tboolean isDefAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is optional (opt) attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is optional attribute\n-\t *         false otherwise\n-\t */\n-\tboolean isOptAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is core-managed attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is core-managed\n-\t */\n-\tboolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is virtual attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is virtual\n-\t */\n-\tboolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is from specified namespace.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @param namespace\n-\t * @return true if the attribute is from specified namespace false otherwise\n-\t */\n-\tboolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace);\n-\n-\t/**\n-\t * Determine if attribute is large (can contain value over 4kb).\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if the attribute is large\n-\t */\n-\tboolean isLargeAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is from specified namespace.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @param namespace\n-\t *\n-\t * @throws WrongAttributeAssignmentException if the attribute isn't from specified namespace\n-\t */\n-\tvoid checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Determine if attributes are from specified namespace.\n-\t *\n-\t * @param sess\n-\t * @param attributes\n-\t * @param namespace\n-\t *\n-\t * @throws WrongAttributeAssignmentException if any of the attribute isn't from specified namespace\n-\t */\n-\tvoid checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all values for specified resource attribute. Atibute can't be core or virt.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition attribute definition, namespace resource\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Object> getAllResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all values for specified group-resource attribute. Atibute can't be core or virt.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition attribute definition, namespace group-resource\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Object> getAllGroupResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all values for specified group attribute. Atibute can't be core or virt.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition attribute definition, namespace group\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Object> getAllGroupValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if this attribute is currently required on this facility. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByFacility(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-        /**\n-\t * Check if this attribute is currently required on this vo. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByVo(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if this attribute is currently required on this group. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByGroup(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if this attribute is currently required on this resource. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByResource(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * This method get all similar attr_names which start with partOfAttributeName\n-\t *\n-\t * @param sess\n-\t * @param startingPartOfAttributeName is something like: urn:perun:user_facility:attribute-def:def:login-namespace:\n-\t * @return list of similar attribute names like: urn:perun:user_facility:attribute-def:def:login-namespace:cesnet etc.\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException;\n-\n-\t/**\n-\t * Get the attributeModule for the attribute\n-\t *\n-\t * @param attribute get the attribute module for this attribute\n-\t * @see cz.metacentrum.perun.core.impl.AttributesManagerImpl#getAttributesModule(PerunSession,String)\n-\t */\n-\tObject getAttributesModule(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Creates attributes during initialization. Shouldn't be called from upper layers !!!\n-\t *\n-\t * @param attribute Attribute to create\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid createAttributeExistsForInitialize(AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Updates AttributeDefinition.\n-\t *\n-\t * @param perunSession\n-\t * @param attributeDefinition\n-\t * @return returns updated attributeDefinition\n-\t * @throws InternalErrorException\n-\t */\n-\tAttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets attribute rights of an attribute with id given as a parameter.\n-\t * If the attribute has no rights for a role, it returns empty list. That means the returned list has always 4 items\n-\t * for each of the roles VOADMIN, FACILITYADMIN, GROUPADMIN, SELF.\n-\t * Info: not return rights for role VoObserver (could be same like read rights for VoAdmin)\n-\t *\n-\t * @param sess perun session\n-\t * @param attributeId id of the attribute\n-\t * @return all rights of the attribute\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException;\n-\n-\t/**\n-\t * Sets attribute right given as a parameter.\n-\t * The method sets the rights for attribute and role exactly as it is given in the list of action types. That means it can\n-\t * remove a right, if the right is missing in the list.\n-\t * Info: If there is role VoAdmin in the list, use it for setting also VoObserver rights (only for read) automatic\n-\t *\n-\t * @param sess perun session\n-\t * @param right attribute right\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid setAttributeRight(PerunSession sess, AttributeRights right) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user virtual attribute module by the attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute for which you get the module\n-\t * @return instance of user attribute module\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongModuleTypeException\n-\t * @throws ModuleNotExistsException\n-\t */\n-\tpublic UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException;\n+    /**\n+     * Determine if attribute is core attribute.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return true if attribute is core attribute\n+     */\n+    boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+    /**\n+     * Determine if attribute is defined (def) attribute.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return true if attribute is defined attribute\n+     *         false otherwise\n+     */\n+    boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+    /**\n+     * Determine if attribute is optional (opt) attribute.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return true if attribute is optional attribute\n+     *         false otherwise\n+     */\n+    boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+    /**\n+     * Determine if attribute is core-managed attribute.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return true if attribute is core-managed\n+     */\n+    boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+    /**\n+     * Determine if attribute is virtual attribute.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return true if attribute is virtual\n+     */\n+    boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+    /**\n+     * Determine if attribute is from specified namespace.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @param namespace\n+     * @return true if the attribute is from specified namespace false otherwise\n+     */\n+    boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace);\n+\n+    /**\n+     * Determine if attribute is large (can contain value over 4kb).\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return true if the attribute is large\n+     */\n+    boolean isLargeAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+    /**\n+     * Determine if attribute is from specified namespace.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @param namespace\n+     *\n+     * @throws WrongAttributeAssignmentException if the attribute isn't from specified namespace\n+     */\n+    void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException;\n+\n+    /**\n+     * Determine if attributes are from specified namespace.\n+     *\n+     * @param sess\n+     * @param attributes\n+     * @param namespace\n+     *\n+     * @throws WrongAttributeAssignmentException if any of the attribute isn't from specified namespace\n+     */\n+    void checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException;\n+\n+    /**\n+     * Get all values for specified resource attribute. Atibute can't be core or virt.\n+     *\n+     * @param sess\n+     * @param attributeDefinition attribute definition, namespace resource\n+     * @return\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<Object> getAllResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Get all values for specified group-resource attribute. Atibute can't be core or virt.\n+     *\n+     * @param sess\n+     * @param attributeDefinition attribute definition, namespace group-resource\n+     * @return\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<Object> getAllGroupResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Get all values for specified group attribute. Atibute can't be core or virt.\n+     *\n+     * @param sess\n+     * @param attributeDefinition attribute definition, namespace group\n+     * @return\n+     *\n+     * @throws InternalErrorException\n+     */\n+    List<Object> getAllGroupValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Check if this attribute is currently required on this facility. Attribute can be from any namespace.\n+     *\n+     * @param sess\n+     * @param facility\n+     * @param attributeDefinition\n+     * @return\n+     *\n+     * @throws InternalErrorException\n+     */\n+    boolean isAttributeRequiredByFacility(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Check if this attribute is currently required on this vo. Attribute can be from any namespace.\n+     *\n+     * @param sess\n+     * @param vo\n+     * @param attributeDefinition\n+     * @return\n+     *\n+     * @throws InternalErrorException\n+     */\n+    boolean isAttributeRequiredByVo(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Check if this attribute is currently required on this group. Attribute can be from any namespace.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param attributeDefinition\n+     * @return\n+     *\n+     * @throws InternalErrorException\n+     */\n+    boolean isAttributeRequiredByGroup(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Check if this attribute is currently required on this resource. Attribute can be from any namespace.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param attributeDefinition\n+     * @return\n+     *\n+     * @throws InternalErrorException\n+     */\n+    boolean isAttributeRequiredByResource(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * This method get all similar attr_names which start with partOfAttributeName\n+     *\n+     * @param sess\n+     * @param startingPartOfAttributeName is something like: urn:perun:user_facility:attribute-def:def:login-namespace:\n+     * @return list of similar attribute names like: urn:perun:user_facility:attribute-def:def:login-namespace:cesnet etc.\n+     * @throws InternalErrorException\n+     * @throws AttributeNotExistsException\n+     */\n+    List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException;\n+\n+    /**\n+     * Get the attributeModule for the attribute\n+     *\n+     * @param attribute get the attribute module for this attribute\n+     * @see cz.metacentrum.perun.core.impl.AttributesManagerImpl#getAttributesModule(PerunSession, String)\n+     */\n+    Object getAttributesModule(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Creates attributes during initialization. Shouldn't be called from upper layers !!!\n+     *\n+     * @param attribute Attribute to create\n+     * @throws InternalErrorException\n+     */\n+    void createAttributeExistsForInitialize(AttributeDefinition attribute) throws InternalErrorException;\n+\n+    /**\n+     * Updates AttributeDefinition.\n+     *\n+     * @param perunSession\n+     * @param attributeDefinition\n+     * @return returns updated attributeDefinition\n+     * @throws InternalErrorException\n+     */\n+    AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+    /**\n+     * Gets attribute rights of an attribute with id given as a parameter.\n+     * If the attribute has no rights for a role, it returns empty list. That means the returned list has always 4 items\n+     * for each of the roles VOADMIN, FACILITYADMIN, GROUPADMIN, SELF.\n+     * Info: not return rights for role VoObserver (could be same like read rights for VoAdmin)\n+     *\n+     * @param sess perun session\n+     * @param attributeId id of the attribute\n+     * @return all rights of the attribute\n+     * @throws InternalErrorException\n+     */\n+    List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException;\n+\n+    /**\n+     * Sets attribute right given as a parameter.\n+     * The method sets the rights for attribute and role exactly as it is given in the list of action types. That means it can\n+     * remove a right, if the right is missing in the list.\n+     * Info: If there is role VoAdmin in the list, use it for setting also VoObserver rights (only for read) automatic\n+     *\n+     * @param sess perun session\n+     * @param right attribute right\n+     * @throws InternalErrorException\n+     */\n+    void setAttributeRight(PerunSession sess, AttributeRights right) throws InternalErrorException;\n+\n+    /**\n+     * Get user virtual attribute module by the attribute.\n+     *\n+     * @param sess\n+     * @param attribute attribute for which you get the module\n+     * @return instance of user attribute module\n+     *\n+     * @throws InternalErrorException\n+     * @throws WrongModuleTypeException\n+     * @throws ModuleNotExistsException\n+     */\n+    public UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException;\n }\n",
            "diff_size": 2247
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/71/AttributesManagerImplApi.java\nindex 8e686a7c0dd..2f639663e34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/71/AttributesManagerImplApi.java\n@@ -4,10 +4,8 @@\n package cz.metacentrum.perun.core.implApi;\n \n import cz.metacentrum.perun.core.api.ActionType;\n-\n import java.util.HashMap;\n import java.util.List;\n-\n import cz.metacentrum.perun.core.api.Attribute;\n import cz.metacentrum.perun.core.api.AttributeDefinition;\n import cz.metacentrum.perun.core.api.AttributeRights;\n@@ -38,2266 +36,2666 @@ import cz.metacentrum.perun.core.implApi.modules.attributes.UserVirtualAttribute\n  * @author Michal Prochazka <michalp@ics.muni.cz>\n  * @author Slavek Licehammer <glory@ics.muni.cz>\n  */\n+\n+\n public interface AttributesManagerImplApi {\n \n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility facility to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the host.\n-\t *\n-\t * @param sess perun session\n-\t * @param host to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Host host) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo vo to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @param member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @param member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty, non-virtual</b> attributes associated with the member in the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param group group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes (empty and virtual too) associated with the member in the group which have name in list attrNames.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param group group to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member member to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the group starts with name startPartOfName.\n-\t * Get only nonvirtual attributes with NotNull value.\n-\t *\n-\t * PRIVILEGE: Get only those attributes the principal has access to.\n-\t *\n-\t * @param sess perun session\n-\t * @param group to get the attributes from\n-\t * @param startPartOfName attribute name start with this part\n-\t * @return list of attributes which name start with startPartOfName\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the resource starts with name startPartOfName.\n-\t * Get only nonvirtual attributes with notNull value.\n-\t *\n-\t * PRIVILEGE: Get only those attributes the principal has access to.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource to get the attributes from\n-\t * @param startPartOfName attribute name start with this part\n-\t * @return list of attributes which name start with startPartOfName\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the vo which have name in list attrNames (empty and virtual too).\n-\t *\n-\t * @param sess perun session\n-\t * @param vo to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the member which have name in list attrNames (empty and virtual too).\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the group which have name in list attrNames (empty too).\n-\t *\n-\t * @param sess perun session\n-\t * @param group to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raises in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with any user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @return list of attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all entiteless attributes with subject equaled String key\n-\t *\n-\t * @param sess\n-\t * @param key\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all entityless attributes with attributeName\n-\t * @param sess perun session\n-\t * @param attrName\n-\t * @return attribute\n-\t * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws  InternalErrorException;\n-\n-\t/**\n-\t * Return value of entityless attribute by attr_id and key (subject).\n-\t * Value is in the format from DB.\n-\t * IMPORTANT: return only values in String (special format for Map or List)!\n-\t *\n-\t * If value is null, return null.\n-\t * If attribute with subject=key not exists, create new one with null value and return null.\n-\t *\n-\t * @param sess\n-\t * @param attrId\n-\t * @param key\n-\t * @return attr_value in string\n-\t *\n-\t * @throws InternalErrorException if runtime error exception has been thrown\n-\t * @throws AttributeNotExistsException throw exception if attribute with value not exists in DB\n-\t */\n-\tString getEntitylessAttrValueForUpdate(PerunSession sess, int attrId, String key) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Returns list of Keys which fits the attributeDefinition.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition\n-\t * @return\n-\t * @throws InternalErrorException\n-\t */\n-\tList<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all attributes with not-null value which fits the attributeDefinition. Can't process core or virtual attributes.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition\n-\t * @return list of attributes\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility to get the attributes from\n-\t * @param user to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the member in the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get the attributes from\n-\t * @param group to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all attributes associated with the user which have name in list attrNames (empty and virtual too).\n-\t *\n-\t * @param sess perun session\n-\t * @param user to get the attributes from\n-\t * @param attrNames list of attributes' names\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all virtual attributes associated with the UserExtSource.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getVirtualAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n-\n-\tList<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException;\n-\n-\tList<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the UserExtSource.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues to get the attributes from\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all <b>non-empty</b> attributes associated with the user on the all facilities.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @return list of attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichAttribute<User, Facility>> getAllUserFacilityRichAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get particular attribute for the facility.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param facility to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the vo.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param vo to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the group.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param group to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the resource.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param resource to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member on this resource.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param resource to get attribute from\n-\t * @param member to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member in this group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get attribute from\n-\t * @param group to get attribute from\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @param member to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user on this facility.\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\n-\t/**\n-\t * Get particular entityless attribute\n-\t * @param sess perun session\n-\t * @param key key to get attribute for\n-\t * @param attributeName\n-\t * @return attribute\n-\t * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException  if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the User External Source.\n-\t *\n-\t * @param sess\n-\t * @param ues\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get attributes definition (attribute without defined value).\n-\t *\n-\t * @param attributeName attribute name defined in the particular manager\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get attributes definition (attribute without defined value).\n-\t *\n-\t * @return List of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Get attributes definition (attribute without defined value) with specified namespace.\n-\t *\n-\t * @param namespace get only attributes with this namespace\n-\t * @return List of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException;\n-\n-\t/**\n-\t * Get attibute definition (attribute without defined value).\n-\t *\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the facility.\n-\t *\n-\t * @param id attribute id\n-\t * @param facility to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the vo.\n-\t *\n-\t * @param id attribute id\n-\t * @param vo to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the resource.\n-\t *\n-\t * @param id attribute id\n-\t * @param resource to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member on this resource.\n-\t *\n-\t * @param id attribute id\n-\t * @param resource to get attribute from\n-\t * @param member to get attribute from\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member in this group.\n-\t *\n-\t * @param sess perun session\n-\t * @param member to get attribute from\n-\t * @param group to get attribute from\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the member.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user on this facility.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\n-\tAttribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\tAttribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Get particular attribute for the user external source.\n-\t *\n-\t * @param sess\n-\t * @param ues\n-\t * @param id attribute id\n-\t * @return attribute\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\t\n-\tAttribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Store the particular attribute associated with the given perun bean. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n-\t *\n-\t * @param sess perun session\n-\t * @param object object of setting the attribute, must be one of perunBean or string\n-\t * @param attribute attribute to set\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeAssignmentException if the namespace of the attribute does not match the perunBean\n-\t */\n-\tboolean setAttribute(PerunSession sess, Object object, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Store the particular attribute associated with the bean1 and bean2. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n-\t *\n-\t * @param sess perun session\n-\t * @param bean1 first perun bean\n-\t * @param bean2 second perun bean\n-\t * @param attribute attribute to set\n-\t *\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean setAttribute(PerunSession sess, PerunBean bean1, PerunBean bean2, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Insert attribute value in DB.\n-\t *\n-\t * @param sess perun session\n-\t * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n-\t * @param attribute that will be stored in the DB\n-\t * @param tableName in the database in which the attribute will be inserted\n-\t * @param columnNames of the database table in which the attribute will be written\n-\t * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic boolean insertAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n-\n-\t/**\n-\t * Update attribute value in DB.\n-\t *\n-\t * @param sess perun session\n-\t * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n-\t * @param attribute that will be stored in the DB\n-\t * @param tableName in the database for updating\n-\t * @param columnNames of the database table in which the attribute will be written\n-\t * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n-\t * @return true if new value differs from old value (i.e. values changed)\n-\t *         false otherwise (value do not change)\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic boolean updateAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n-\n-\t/**\n-\t * Set entityless attribute with null value (for key and attribute). Shouldn't be called from upper layer !!!\n-\t *\n-\t * @param sess\n-\t * @param key key for storing entityless attribute\n-\t * @param attribute attribute to set\n-\t *\n-\t * @return true if insert is ok\n-\t *\n-\t * @throws InternalErrorException if runtimeException is thrown\n-\t */\n-\tboolean setAttributeWithNullValue(final PerunSession sess, final String key, final Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the facility and user combination.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the resource and group combination.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @param group\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the member and group combination.\n-\t *\n-\t * @param sess perun session\n-\t * @param member member to set on\n-\t * @param group group to set on\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Store the particular virtual attribute associated with the user external source.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues\n-\t * @param attribute attribute to set\n-\t * @return true if attribute was really changed\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ModuleNotExistsException\n-\t * @throws WrongModuleTypeException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean setVirtualAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Creates an attribute, the attribute is stored into the appropriate DB table according to the namespace.\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute to create\n-\t *\n-\t * @return attribute with set id\n-\t *\n-\t * @throws AttributeExistsException if attribute already exists\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeExistsException;\n-\n-\t/**\n-\t * Deletes the attribute. Definition and all values.\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute to delete\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Delete all authz for the attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute the attribute\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorExceptions\n-\t */\n-\tvoid deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Get attributes definions required by all services assigned on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @return attributes definions required by all services assigned on the resource.\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get facility attributes which are required by services. Services are known from the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param facility you get attributes for this facility\n-\t * @return list of facility attributes which are required by services which are assigned to resource\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get resource attributes which are required by services.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource\n-\t * @param serviceIds\n-\t * @return list of resource attributes which are required by services which are selceted\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, List<Integer> serviceIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Get resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param resource resource for which you want to get the attributes\n-\t * @return list of resource attributes which are required by services which are assigned to resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param member you get attributes for this member\n-\t * @return list of member attributes which are required by services which are assigned to resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param resource you get attributes for this resource and the member\n-\t * @param member you get attributes for this member and the resource\n-\t * @return list of member-resource attributes which are required by services which are assigned to another resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user-facility attributes which are required by services. Services are known from the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param facility facility from which the services are taken\n-\t * @param user you get attributes for this user\n-\t * @return list of member-resource attributes which are required by services which are assigned to another resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user attributes which are required by services. Services are known from the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom\n-\t * @param user you get attributes for this user\n-\t * @return list of user attributes which are required by services which are assigned to resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException;\n-\t/**\n-\t * Get all attributes which are required by service.\n-\t * Required attribues are requisite for Service to run.\n-\t *\n-\t * @param sess sess\n-\t * @param service service from which the attributes will be listed\n-\t *\n-\t * @return All attributes which are required by service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException;\n-\n-\t/**\n-\t *  Get facility attributes which are required by all services which are connected to this facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility you get attributes for this facility\n-\t * @return list of facility attributes which are required by all services which are connected to this facility.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get facility attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility you get attributes for this facility\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of facility attributes which are required by the service\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get vo attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo you get attributes for this vo\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of vo attributes which are required by the service\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get resource attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource for which you want to get the attributes\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of resource attributes which are required by the service\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-resource attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource you get attributes for this resource and the member\n-\t * @param member you get attributes for this member and the resource\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-resource attributes which are required by service for each member in list of members.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param resource you get attributes for this resource and the members\n-\t * @param members you get attributes for this list of members and the resource\n-\t * @return map of member and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member attributes which are required by service for each member in list of members.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param resource resource only to get allowed members\n-\t * @param members you get attributes for this list of members\n-\t * @return map of member and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user-facility attributes which are required by the service for each user in list of users.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param facility you get attributes for this facility and user\n-\t * @param users you get attributes for this user and facility\n-\t * @return map of userID and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user attributes which are required by the service for each user in list of users.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service\n-\t * @param users you get attributes for this user and facility\n-\t * @return map of userID and his list of attributes\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tHashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-group attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param member you get attributes for this member and the group\n-\t * @param group you get attributes for this group in which member is associated\n-\t * @param service attribute required by this service you'll get\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member-group attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n-\t *\n-\t * @param sess perun session\n-\t * @param resourceToGetServicesFrom resource from which the services are taken\n-\t * @param group you get attributes for this group and the member\n-\t * @param member you get attributes for this member and the group\n-\t * @return list of member-group attributes which are required by services which are assigned to another resource.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Get member attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service you'll get\n-\t * @param member\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user-facility attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service you'll get\n-\t * @param facility\n-\t * @param user\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user attributes which are required by the service.\n-\t *\n-\t * @param sess perun session\n-\t * @param service attribute required by this service you'll get\n-\t * @param user\n-\t * @return list of attributes which are required by the service.\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException;\n-\n-\tList<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException;\n-\t/**\n-\t * This method try to fill a value of the resource attribute. Value may be copied from some facility attribute.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource, attribute of which you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the member-resource attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource  attribute of this resource (and member) and you want to fill\n-\t * @param member attribute of this member (and resource) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method tries to fill value of the member-group attribute. This value is automatically generated, but not all attributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param member attribute of this member (and group) you want to fill\n-\t * @param group attribute of this group you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be overwritten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the user-facility attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility  attribute of this facility (and user) and you want to fill\n-\t * @param user attribute of this user (and facility) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the user attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param user attribute of this user (and facility) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the member attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param member attribute of this member (and facility) and you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which MAY have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException;\n-\n-\tAttribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException;\n-\n-\tAttribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException;\n-\n-\tAttribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * This method try to fill value of the user external source attribute. This value is automatically generated, but not all atrributes can be filled this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues attribute of this user external source you want to fill\n-\t * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n-\t * @return attribute which may have filled value\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tAttribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess perun session\n-\t * @param key\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param host\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param member\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param group\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * If you need to do some further work with other modules, this method do that\n-\t *\n-\t * @param sess\n-\t * @param ues\n-\t * @param attribute\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tvoid changedAttributeHook(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this facility attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility facility for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this vo attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo vo for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this group attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param group group for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this resource attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this member-resource attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource for which (and for specified member) you want to check validity of attribute\n-\t * @param member member for which (and for specified resource) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this member-group attribute is valid.\n-\t *\n-\t * @param sess perun session\n-\t * @param group group for which (and for specified member) you want to check validity of attribute\n-\t * @param member member for which (and for specified group) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this user-facility attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param facility facility for which (and for specified user) you want to check validity of attribute\n-\t * @param user user for which (and for specified facility) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this user attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param user user for which (and for specified facility) you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this member attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param member member for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\tvoid checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException;\n-\n-\tvoid checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this entityless attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param key key for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Check if value of this user external source attribute is valid.\n-\t *\n-\t *\n-\t * @param sess perun session\n-\t * @param ues user external source for which you want to check validity of attribute\n-\t * @param attribute attribute to check\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Unset particular attribute for the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility remove attribute from this facility\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular entityless attribute with subject equals key.\n-\t *\n-\t * @param sess perun session\n-\t * @param key subject of entityless attribute\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility remove attributes from this facility\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove all non-virtual group-resource attribute on selected resource\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove all non-virtual member-resource attributes assigned to resource\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular attribute for the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo remove attribute from this vo\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the vo.\n-\t *\n-\t * @param sess perun session\n-\t * @param vo remove attributes from this vo\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular attribute for the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attribute from this group\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attributes from this group\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException;\n-\n-\n-\t/**\n-\t * Unset particular attribute for the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource remove attribute from this resource\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource remove attributes from this resource\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular member-resorce attribute for the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param resource remove attributes for this resource\n-\t * @param member remove attribute from this member\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (member-resource) attributes for the member on the resource.\n-\t *\n-\t * @param sess perun session\n-\t * @param member remove attributes from this member\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular attribute for the member in the group. Core attributes can't be removed this way.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attributes for this group\n-\t * @param member remove attribute from this member\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all attributes for the member in the group.\n-\t *\n-\t * @param sess perun session\n-\t * @param group remove attributes for this group\n-\t * @param member remove attributes from this member\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular member attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param member\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all member attributes for the member.\n-\t *\n-\t * @param sess perun session\n-\t * @param member\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular user-facility attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (user-facility) <b>non-virtual</b> attributes for the user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (user-facility) <b>non-virtual</b> attributes for any user on the facility.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all (user-facility) <b>non-virtual</b> attributes for the user and <b>all facilities</b>\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular user-facility virtual attribute value.\n-\t *\n-\t * @param sess perun session\n-\t * @param facility\n-\t * @param user\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeVirtualAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular resource virtual attribute value.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param attribute\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean removeVirtualAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Unset particular group-resource virtual attribute value.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @param attribute\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tboolean removeVirtualAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n-\n-\t/**\n-\t * Unset particular user attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all user attributes for the user.\n-\t *\n-\t * @param sess perun session\n-\t * @param user\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular host attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param host\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException;\n-\t/**\n-\t * Unset all user attributes for the host.\n-\t *\n-\t * @param sess perun session\n-\t * @param host\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular group_resource attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param resource resource\n-\t * @param group group\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all group_resource attributes\n-\t *\n-\t * @param sess perun session\n-\t * @param resource Resource\n-\t * @param group Group\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset particular user external source attribute\n-\t *\n-\t * @param sess perun session\n-\t * @param ues\n-\t * @param attribute attribute to remove\n-\t * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tboolean removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Unset all UserExtSource attributes for the user external source.\n-\t *\n-\t * @param sess perun session\n-\t * @param ues\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t */\n-\tvoid removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if attribute exists in underlaying data source.\n-\t *\n-\t * @param sess perun session\n-\t * @param attribute attribute to check\n-\t * @return true if attribute exists in underlaying data source, false othewise\n-\t *\n-\t * @throws InternalErrorException if unexpected error occured\n-\t */\n-\tboolean attributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if attribute exists in underlaying data source.\n-\t *\n-\t * @param sess perun session\n-\t * @param attribute attribute to check\n-\t * @throws InternalErrorException if unexpected error occured\n-\t * @throws AttributeNotExistsException if attribute doesn';t exists\n-\t */\n-\tvoid checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/**\n-\t * Check if actionType exists in underlaying data source.\n-\t *\n-\t * @param sess perun session\n-\t * @param actionType actionType to check\n-\t * @throws InternalErrorException if unexpected error occured\n-\t * @throws ActionTypeNotExistsException if attriobute doesn't exists\n-\t */\n-\tvoid checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException;\n-\n-\t/*\n-\t * @see cz.metacentrum.perun.core.implApi.AttributesManagerImplApi#checkAttributeExists(PerunSession, AttributeDefinition)\n-\t * @param expectedNamespace expected namespace\n-\t * @throws WrongAttributeAssignmentException if attribute's namespace is to equal to expected namespace\n-\t void checkAttributeExists(PerunSession sess, AttributeDefinition attribute, String expectedNamespace) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n-\t */\n-\n-\t/**\n-\t * Batch version of checkAttributeExists\n-\t */\n-\tvoid checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException;\n-\n-\t/*\n-\t * @see cz.metacentrum.perun.core.implApi.AttributesManagerImplApi#checkAttributesExists(PerunSession, List)\n-\t * @param expectedNamespace expected namespace\n-\t * @throws WrongAttributeAssignmentException if any attribute's namespace is to equal to expected namespace\n-\t void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes, String expectedNamespace) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n-\t */\n-\n-\t/**\n-\t * Determine if attribute is core attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is core attribute\n-\t */\n-\tboolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is defined (def) attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is defined attribute\n-\t *         false otherwise\n-\t */\n-\tboolean isDefAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is optional (opt) attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is optional attribute\n-\t *         false otherwise\n-\t */\n-\tboolean isOptAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is core-managed attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is core-managed\n-\t */\n-\tboolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is virtual attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if attribute is virtual\n-\t */\n-\tboolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is from specified namespace.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @param namespace\n-\t * @return true if the attribute is from specified namespace false otherwise\n-\t */\n-\tboolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace);\n-\n-\t/**\n-\t * Determine if attribute is large (can contain value over 4kb).\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return true if the attribute is large\n-\t */\n-\tboolean isLargeAttribute(PerunSession sess, AttributeDefinition attribute);\n-\n-\t/**\n-\t * Determine if attribute is from specified namespace.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @param namespace\n-\t *\n-\t * @throws WrongAttributeAssignmentException if the attribute isn't from specified namespace\n-\t */\n-\tvoid checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Determine if attributes are from specified namespace.\n-\t *\n-\t * @param sess\n-\t * @param attributes\n-\t * @param namespace\n-\t *\n-\t * @throws WrongAttributeAssignmentException if any of the attribute isn't from specified namespace\n-\t */\n-\tvoid checkNamespace(PerunSession sess, List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all values for specified resource attribute. Atibute can't be core or virt.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition attribute definition, namespace resource\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Object> getAllResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all values for specified group-resource attribute. Atibute can't be core or virt.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition attribute definition, namespace group-resource\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Object> getAllGroupResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all values for specified group attribute. Atibute can't be core or virt.\n-\t *\n-\t * @param sess\n-\t * @param attributeDefinition attribute definition, namespace group\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Object> getAllGroupValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if this attribute is currently required on this facility. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByFacility(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility facility to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the member.\n+  *\n+  * @param sess perun session\n+  * @param member to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the vo.\n+  *\n+  * @param sess perun session\n+  * @param vo to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the group.\n+  *\n+  * @param sess perun session\n+  * @param group to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the host.\n+  *\n+  * @param sess perun session\n+  * @param host to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Host host) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the vo.\n+  *\n+  * @param sess perun session\n+  * @param vo vo to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the group.\n+  *\n+  * @param sess perun session\n+  * @param group group to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource resource to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the member on the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource to get the attributes from\n+  * @param member to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the member on the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource to get the attributes from\n+  * @param member to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty, non-virtual</b> attributes associated with the member in the group.\n+  *\n+  * @param sess perun session\n+  * @param member to get the attributes from\n+  * @param group group to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get all attributes (empty and virtual too) associated with the member in the group which have name in list attrNames.\n+  *\n+  * @param sess perun session\n+  * @param member to get the attributes from\n+  * @param group group to get the attributes from\n+  * @param attrNames list of attributes' names\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Member member, Group group, List<String> attrNames) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the member.\n+  *\n+  * @param sess perun session\n+  * @param member member to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the group starts with name startPartOfName.\n+  * Get only nonvirtual attributes with NotNull value.\n+  *\n+  * PRIVILEGE: Get only those attributes the principal has access to.\n+  *\n+  * @param sess perun session\n+  * @param group to get the attributes from\n+  * @param startPartOfName attribute name start with this part\n+  * @return list of attributes which name start with startPartOfName\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Group group, String startPartOfName) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the resource starts with name startPartOfName.\n+  * Get only nonvirtual attributes with notNull value.\n+  *\n+  * PRIVILEGE: Get only those attributes the principal has access to.\n+  *\n+  * @param sess perun session\n+  * @param resource to get the attributes from\n+  * @param startPartOfName attribute name start with this part\n+  * @return list of attributes which name start with startPartOfName\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAllAttributesStartWithNameWithoutNullValue(PerunSession sess, Resource resource, String startPartOfName) throws InternalErrorException;\n+\n+ /**\n+  * Get all attributes associated with the vo which have name in list attrNames (empty and virtual too).\n+  *\n+  * @param sess perun session\n+  * @param vo to get the attributes from\n+  * @param attrNames list of attributes' names\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Vo vo, List<String> attrNames) throws InternalErrorException;\n+\n+ /**\n+  * Get all attributes associated with the member which have name in list attrNames (empty and virtual too).\n+  *\n+  * @param sess perun session\n+  * @param member to get the attributes from\n+  * @param attrNames list of attributes' names\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Member member, List<String> attrNames) throws InternalErrorException;\n+\n+ /**\n+  * Get all attributes associated with the group which have name in list attrNames (empty too).\n+  *\n+  * @param sess perun session\n+  * @param group to get the attributes from\n+  * @param attrNames list of attributes' names\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raises in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Group group, List<String> attrNames) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the user on the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @param user\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with any user on the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @return list of attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Get all entiteless attributes with subject equaled String key\n+  *\n+  * @param sess\n+  * @param key\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, String key) throws InternalErrorException;\n+\n+ /**\n+  * Get all entityless attributes with attributeName\n+  * @param sess perun session\n+  * @param attrName\n+  * @return attribute\n+  * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getEntitylessAttributes(PerunSession sess, String attrName) throws InternalErrorException;\n+\n+ /**\n+  * Return value of entityless attribute by attr_id and key (subject).\n+  * Value is in the format from DB.\n+  * IMPORTANT: return only values in String (special format for Map or List)!\n+  *\n+  * If value is null, return null.\n+  * If attribute with subject=key not exists, create new one with null value and return null.\n+  *\n+  * @param sess\n+  * @param attrId\n+  * @param key\n+  * @return attr_value in string\n+  *\n+  * @throws InternalErrorException if runtime error exception has been thrown\n+  * @throws AttributeNotExistsException throw exception if attribute with value not exists in DB\n+  */\n+\n+\n+ String getEntitylessAttrValueForUpdate(PerunSession sess, int attrId, String key) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Returns list of Keys which fits the attributeDefinition.\n+  *\n+  * @param sess\n+  * @param attributeDefinition\n+  * @return\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<String> getEntitylessKeys(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Returns all attributes with not-null value which fits the attributeDefinition. Can't process core or virtual attributes.\n+  *\n+  * @param sess\n+  * @param attributeDefinition\n+  * @return list of attributes\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the user on the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility to get the attributes from\n+  * @param user to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the member in the group.\n+  *\n+  * @param sess perun session\n+  * @param member to get the attributes from\n+  * @param group to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the user.\n+  *\n+  * @param sess perun session\n+  * @param user\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all attributes associated with the user which have name in list attrNames (empty and virtual too).\n+  *\n+  * @param sess perun session\n+  * @param user to get the attributes from\n+  * @param attrNames list of attributes' names\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, User user, List<String> attrNames) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the user.\n+  *\n+  * @param sess perun session\n+  * @param user to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all virtual attributes associated with the UserExtSource.\n+  *\n+  * @param sess perun session\n+  * @param ues to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getVirtualAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Host host) throws InternalErrorException;\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the UserExtSource.\n+  *\n+  * @param sess perun session\n+  * @param ues to get the attributes from\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n+\n+ /**\n+  * Get all <b>non-empty</b> attributes associated with the user on the all facilities.\n+  *\n+  * @param sess perun session\n+  * @param user\n+  * @return list of attributes\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichAttribute<User, Facility>> getAllUserFacilityRichAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get particular attribute for the facility.\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @param facility to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Facility facility, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the vo.\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @param vo to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Vo vo, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the group.\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @param group to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the resource.\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @param resource to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Resource resource, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the member on this resource.\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @param resource to get attribute from\n+  * @param member to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Resource resource, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the member in this group.\n+  *\n+  * @param sess perun session\n+  * @param member to get attribute from\n+  * @param group to get attribute from\n+  * @param attributeName attribute name defined in the particular manager\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Member member, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the member.\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @param member to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Member member, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the user on this facility.\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, Facility facility, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the user.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param attributeName attribute name defined in the particular manager\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, User user, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+\n+ Attribute getAttribute(PerunSession sess, Host host, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+\n+ Attribute getAttribute(PerunSession sess, Resource resource, Group group, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+\n+ /**\n+  * Get particular entityless attribute\n+  * @param sess perun session\n+  * @param key key to get attribute for\n+  * @param attributeName\n+  * @return attribute\n+  * @throws InternalErrorException  if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException  if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, String key, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the User External Source.\n+  *\n+  * @param sess\n+  * @param ues\n+  * @param attributeName attribute name defined in the particular manager\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttribute(PerunSession sess, UserExtSource ues, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get attributes definition (attribute without defined value).\n+  *\n+  * @param attributeName attribute name defined in the particular manager\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ AttributeDefinition getAttributeDefinition(PerunSession sess, String attributeName) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get attributes definition (attribute without defined value).\n+  *\n+  * @return List of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<AttributeDefinition> getAttributesDefinition(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Get attributes definition (attribute without defined value) with specified namespace.\n+  *\n+  * @param namespace get only attributes with this namespace\n+  * @return List of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<AttributeDefinition> getAttributesDefinitionByNamespace(PerunSession sess, String namespace) throws InternalErrorException;\n+\n+ /**\n+  * Get attibute definition (attribute without defined value).\n+  *\n+  * @param id attribute id\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ AttributeDefinition getAttributeDefinitionById(PerunSession sess, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the facility.\n+  *\n+  * @param id attribute id\n+  * @param facility to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Facility facility, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the vo.\n+  *\n+  * @param id attribute id\n+  * @param vo to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Vo vo, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the resource.\n+  *\n+  * @param id attribute id\n+  * @param resource to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Resource resource, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the member on this resource.\n+  *\n+  * @param id attribute id\n+  * @param resource to get attribute from\n+  * @param member to get attribute from\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Resource resource, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the member in this group.\n+  *\n+  * @param sess perun session\n+  * @param member to get attribute from\n+  * @param group to get attribute from\n+  * @param id attribute id\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Member member, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the member.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param id attribute id\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Member member, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the user on this facility.\n+  *\n+  * @param sess\n+  * @param facility\n+  * @param user\n+  * @param id attribute id\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Facility facility, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the user.\n+  *\n+  * @param sess\n+  * @param user\n+  * @param id attribute id\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, User user, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Host host, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Resource resource, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+\n+ Attribute getAttributeById(PerunSession sess, Group group, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Get particular attribute for the user external source.\n+  *\n+  * @param sess\n+  * @param ues\n+  * @param id attribute id\n+  * @return attribute\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n+  */\n+\n+\n+ Attribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Store the particular attribute associated with the given perun bean. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n+  *\n+  * @param sess perun session\n+  * @param object object of setting the attribute, must be one of perunBean or string\n+  * @param attribute attribute to set\n+  * @return true if new value differs from old value (i.e. values changed)\n+  *         false otherwise (value do not change)\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeAssignmentException if the namespace of the attribute does not match the perunBean\n+  */\n+\n+\n+ boolean setAttribute(PerunSession sess, Object object, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n+\n+ /**\n+  * Store the particular attribute associated with the bean1 and bean2. If an attribute is core attribute then the attribute isn't stored (It's skkiped whithout any notification).\n+  *\n+  * @param sess perun session\n+  * @param bean1 first perun bean\n+  * @param bean2 second perun bean\n+  * @param attribute attribute to set\n+  *\n+  * @return true if new value differs from old value (i.e. values changed)\n+  *         false otherwise (value do not change)\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean setAttribute(PerunSession sess, PerunBean bean1, PerunBean bean2, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n+\n+ /**\n+  * Insert attribute value in DB.\n+  *\n+  * @param sess perun session\n+  * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n+  * @param attribute that will be stored in the DB\n+  * @param tableName in the database in which the attribute will be inserted\n+  * @param columnNames of the database table in which the attribute will be written\n+  * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n+  * @return true if new value differs from old value (i.e. values changed)\n+  *         false otherwise (value do not change)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ public boolean insertAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n+\n+ /**\n+  * Update attribute value in DB.\n+  *\n+  * @param sess perun session\n+  * @param valueColName column, where the data will be stored, usually one of value or attr_value or attr_value_text\n+  * @param attribute that will be stored in the DB\n+  * @param tableName in the database for updating\n+  * @param columnNames of the database table in which the attribute will be written\n+  * @param columnValues of the objects, for which the attribute will be written, corresponding to the columnNames\n+  * @return true if new value differs from old value (i.e. values changed)\n+  *         false otherwise (value do not change)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ public boolean updateAttribute(PerunSession sess, String valueColName, Attribute attribute, String tableName, List<String> columnNames, List<Object> columnValues) throws InternalErrorException;\n+\n+ /**\n+  * Set entityless attribute with null value (for key and attribute). Shouldn't be called from upper layer !!!\n+  *\n+  * @param sess\n+  * @param key key for storing entityless attribute\n+  * @param attribute attribute to set\n+  *\n+  * @return true if insert is ok\n+  *\n+  * @throws InternalErrorException if runtimeException is thrown\n+  */\n+\n+\n+ boolean setAttributeWithNullValue(final PerunSession sess, final String key, final Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the facility and user combination.\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @param user\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the resource and group combination.\n+  *\n+  * @param sess perun session\n+  * @param resource\n+  * @param group\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the member and group combination.\n+  *\n+  * @param sess perun session\n+  * @param member member to set on\n+  * @param group group to set on\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the member.\n+  *\n+  * @param sess perun session\n+  * @param member\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the user.\n+  *\n+  * @param sess perun session\n+  * @param user\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Store the particular virtual attribute associated with the user external source.\n+  *\n+  * @param sess perun session\n+  * @param ues\n+  * @param attribute attribute to set\n+  * @return true if attribute was really changed\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ModuleNotExistsException\n+  * @throws WrongModuleTypeException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean setVirtualAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongModuleTypeException, ModuleNotExistsException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Creates an attribute, the attribute is stored into the appropriate DB table according to the namespace.\n+  *\n+  * @param sess\n+  * @param attribute attribute to create\n+  *\n+  * @return attribute with set id\n+  *\n+  * @throws AttributeExistsException if attribute already exists\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ AttributeDefinition createAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeExistsException;\n+\n+ /**\n+  * Deletes the attribute. Definition and all values.\n+  *\n+  * @param sess\n+  * @param attribute attribute to delete\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void deleteAttribute(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Delete all authz for the attribute.\n+  *\n+  * @param sess\n+  * @param attribute the attribute\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorExceptions\n+  */\n+\n+\n+ void deleteAllAttributeAuthz(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Get attributes definions required by all services assigned on the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource\n+  * @return attributes definions required by all services assigned on the resource.\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<AttributeDefinition> getResourceRequiredAttributesDefinition(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Get facility attributes which are required by services. Services are known from the resource.\n+  *\n+  * @param sess perun session\n+  * @param resourceToGetServicesFrom resource from which the services are taken\n+  * @param facility you get attributes for this facility\n+  * @return list of facility attributes which are required by services which are assigned to resource\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Get resource attributes which are required by services.\n+  *\n+  * @param sess perun session\n+  * @param resource\n+  * @param serviceIds\n+  * @return list of resource attributes which are required by services which are selceted\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resource, List<Integer> serviceIds) throws InternalErrorException;\n+\n+ /**\n+  * Get resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+  *\n+  * @param sess perun session\n+  * @param resourceToGetServicesFrom resource from which the services are taken\n+  * @param resource resource for which you want to get the attributes\n+  * @return list of resource attributes which are required by services which are assigned to resource.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Get member attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+  *\n+  * @param sess perun session\n+  * @param resourceToGetServicesFrom resource from which the services are taken\n+  * @param member you get attributes for this member\n+  * @return list of member attributes which are required by services which are assigned to resource.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get member-resource attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+  *\n+  * @param sess perun session\n+  * @param resourceToGetServicesFrom resource from which the services are taken\n+  * @param resource you get attributes for this resource and the member\n+  * @param member you get attributes for this member and the resource\n+  * @return list of member-resource attributes which are required by services which are assigned to another resource.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get user-facility attributes which are required by services. Services are known from the resource.\n+  *\n+  * @param sess perun session\n+  * @param resourceToGetServicesFrom resource from which the services are taken\n+  * @param facility facility from which the services are taken\n+  * @param user you get attributes for this user\n+  * @return list of member-resource attributes which are required by services which are assigned to another resource.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Facility facility, User user) throws InternalErrorException;\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Resource resource, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get user attributes which are required by services. Services are known from the resource.\n+  *\n+  * @param sess perun session\n+  * @param resourceToGetServicesFrom\n+  * @param user you get attributes for this user\n+  * @return list of user attributes which are required by services which are assigned to resource.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, User user) throws InternalErrorException;\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Host host) throws InternalErrorException;\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Resource resourceToGetServicesFrom, Group group) throws InternalErrorException;\n+ /**\n+  * Get all attributes which are required by service.\n+  * Required attribues are requisite for Service to run.\n+  *\n+  * @param sess sess\n+  * @param service service from which the attributes will be listed\n+  *\n+  * @return All attributes which are required by service.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<AttributeDefinition> getRequiredAttributesDefinition(PerunSession sess, Service service) throws InternalErrorException;\n+\n+ /**\n+  *  Get facility attributes which are required by all services which are connected to this facility.\n+  *\n+  * @param sess perun session\n+  * @param facility you get attributes for this facility\n+  * @return list of facility attributes which are required by all services which are connected to this facility.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Get facility attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param facility you get attributes for this facility\n+  * @param service attribute required by this service you'll get\n+  * @return list of facility attributes which are required by the service\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Get vo attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param vo you get attributes for this vo\n+  * @param service attribute required by this service you'll get\n+  * @return list of vo attributes which are required by the service\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get resource attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param resource resource for which you want to get the attributes\n+  * @param service attribute required by this service you'll get\n+  * @return list of resource attributes which are required by the service\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Get member-resource attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param resource you get attributes for this resource and the member\n+  * @param member you get attributes for this member and the resource\n+  * @param service attribute required by this service you'll get\n+  * @return list of attributes which are required by the service.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get member-resource attributes which are required by service for each member in list of members.\n+  *\n+  * @param sess perun session\n+  * @param service attribute required by this service\n+  * @param resource you get attributes for this resource and the members\n+  * @param members you get attributes for this list of members and the resource\n+  * @return map of member and his list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Resource resource, List<Member> members) throws InternalErrorException;\n+\n+ /**\n+  * Get member attributes which are required by service for each member in list of members.\n+  *\n+  * @param sess perun session\n+  * @param service attribute required by this service\n+  * @param resource resource only to get allowed members\n+  * @param members you get attributes for this list of members\n+  * @return map of member and his list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ HashMap<Member, List<Attribute>> getRequiredAttributes(PerunSession sess, Resource resource, Service service, List<Member> members) throws InternalErrorException;\n+\n+ /**\n+  * Get user-facility attributes which are required by the service for each user in list of users.\n+  *\n+  * @param sess perun session\n+  * @param service attribute required by this service\n+  * @param facility you get attributes for this facility and user\n+  * @param users you get attributes for this user and facility\n+  * @return map of userID and his list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, Facility facility, List<User> users) throws InternalErrorException;\n+\n+ /**\n+  * Get user attributes which are required by the service for each user in list of users.\n+  *\n+  * @param sess perun session\n+  * @param service attribute required by this service\n+  * @param users you get attributes for this user and facility\n+  * @return map of userID and his list of attributes\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ HashMap<User, List<Attribute>> getRequiredAttributes(PerunSession sess, Service service, List<User> users) throws InternalErrorException;\n+\n+ /**\n+  * Get member-group attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param member you get attributes for this member and the group\n+  * @param group you get attributes for this group in which member is associated\n+  * @param service attribute required by this service you'll get\n+  * @return list of attributes which are required by the service.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get member-group attributes which are required by services. Services are known from the resourceToGetServicesFrom.\n+  *\n+  * @param sess perun session\n+  * @param resourceToGetServicesFrom resource from which the services are taken\n+  * @param group you get attributes for this group and the member\n+  * @param member you get attributes for this member and the group\n+  * @return list of member-group attributes which are required by services which are assigned to another resource.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess,\n+                                       Resource resourceToGetServicesFrom,\n+                                       Member member, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Get member attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param service attribute required by this service you'll get\n+  * @param member\n+  * @return list of attributes which are required by the service.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get user-facility attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param service attribute required by this service you'll get\n+  * @param facility\n+  * @param user\n+  * @return list of attributes which are required by the service.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Facility facility, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get user attributes which are required by the service.\n+  *\n+  * @param sess perun session\n+  * @param service attribute required by this service you'll get\n+  * @param user\n+  * @return list of attributes which are required by the service.\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, User user) throws InternalErrorException;\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Resource resource, Group group) throws InternalErrorException;\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Host host) throws InternalErrorException;\n+\n+\n+ List<Attribute> getRequiredAttributes(PerunSession sess, Service service, Group group) throws InternalErrorException;\n+ /**\n+  * This method try to fill a value of the resource attribute. Value may be copied from some facility attribute.\n+  *\n+  * @param sess perun session\n+  * @param resource resource, attribute of which you want to fill\n+  * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+  * @return attribute which MAY have filled value\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * This method try to fill value of the member-resource attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+  *\n+  * @param sess perun session\n+  * @param resource  attribute of this resource (and member) and you want to fill\n+  * @param member attribute of this member (and resource) and you want to fill\n+  * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+  * @return attribute which MAY have filled value\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * This method tries to fill value of the member-group attribute. This value is automatically generated, but not all attributes can be filled this way.\n+  *\n+  * @param sess perun session\n+  * @param member attribute of this member (and group) you want to fill\n+  * @param group attribute of this group you want to fill\n+  * @param attribute attribute to fill. If attributes already have set value, this value won't be overwritten. This means the attribute value must be empty otherwise this method won't fill it.\n+  * @return attribute which MAY have filled value\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * This method try to fill value of the user-facility attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+  *\n+  * @param sess perun session\n+  * @param facility  attribute of this facility (and user) and you want to fill\n+  * @param user attribute of this user (and facility) and you want to fill\n+  * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+  * @return attribute which MAY have filled value\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * This method try to fill value of the user attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+  *\n+  * @param sess perun session\n+  * @param user attribute of this user (and facility) and you want to fill\n+  * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+  * @return attribute which MAY have filled value\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ Attribute fillAttribute(PerunSession sess, User user, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * This method try to fill value of the member attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+  *\n+  * @param sess perun session\n+  * @param member attribute of this member (and facility) and you want to fill\n+  * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+  * @return attribute which MAY have filled value\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException;\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException;\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException;\n+\n+\n+ Attribute fillAttribute(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * This method try to fill value of the user external source attribute. This value is automatically generated, but not all atrributes can be filled this way.\n+  *\n+  * @param sess perun session\n+  * @param ues attribute of this user external source you want to fill\n+  * @param attribute attribute to fill. If attributes already have set value, this value won't be owerwriten. This means the attribute value must be empty otherwise this method won't fill it.\n+  * @return attribute which may have filled value\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ Attribute fillAttribute(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess perun session\n+  * @param key\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param host\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param user\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param member\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param group\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param member\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param member\n+  * @param group\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param facility\n+  * @param user\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * If you need to do some further work with other modules, this method do that\n+  *\n+  * @param sess\n+  * @param ues\n+  * @param attribute\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ void changedAttributeHook(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this facility attribute is valid.\n+  *\n+  * @param sess perun session\n+  * @param facility facility for which you want to check validity of attribute\n+  * @param attribute attribute to check\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Facility facility, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this vo attribute is valid.\n+  *\n+  * @param sess perun session\n+  * @param vo vo for which you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Vo vo, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this group attribute is valid.\n+  *\n+  * @param sess perun session\n+  * @param group group for which you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this resource attribute is valid.\n+  *\n+  * @param sess perun session\n+  * @param resource resource for which you want to check validity of attribute\n+  * @param attribute attribute to check\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Resource resource, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this member-resource attribute is valid.\n+  *\n+  *\n+  * @param sess perun session\n+  * @param resource resource for which (and for specified member) you want to check validity of attribute\n+  * @param member member for which (and for specified resource) you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Resource resource, Member member, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this member-group attribute is valid.\n+  *\n+  * @param sess perun session\n+  * @param group group for which (and for specified member) you want to check validity of attribute\n+  * @param member member for which (and for specified group) you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Member member, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this user-facility attribute is valid.\n+  *\n+  *\n+  * @param sess perun session\n+  * @param facility facility for which (and for specified user) you want to check validity of attribute\n+  * @param user user for which (and for specified facility) you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Facility facility, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+ /**\n+  * Check if value of this user attribute is valid.\n+  *\n+  *\n+  * @param sess perun session\n+  * @param user user for which (and for specified facility) you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, User user, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+ /**\n+  * Check if value of this member attribute is valid.\n+  *\n+  *\n+  * @param sess perun session\n+  * @param member member for which you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, Member member, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+\n+ void checkAttributeValue(PerunSession sess, Host host, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongAttributeAssignmentException;\n+\n+\n+ void checkAttributeValue(PerunSession sess, Resource resource, Group group, Attribute attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Check if value of this entityless attribute is valid.\n+  *\n+  *\n+  * @param sess perun session\n+  * @param key key for which you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, String key, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+ /**\n+  * Check if value of this user external source attribute is valid.\n+  *\n+  *\n+  * @param sess perun session\n+  * @param ues user external source for which you want to check validity of attribute\n+  * @param attribute attribute to check\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws WrongAttributeValueException if the attribute value is wrong/illegal\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void checkAttributeValue(PerunSession sess, UserExtSource ues, Attribute attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+ /**\n+  * Unset particular attribute for the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility remove attribute from this facility\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Facility facility, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular entityless attribute with subject equals key.\n+  *\n+  * @param sess perun session\n+  * @param key subject of entityless attribute\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, String key, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all attributes for the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility remove attributes from this facility\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Remove all non-virtual group-resource attribute on selected resource\n+  *\n+  * @param sess\n+  * @param resource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllGroupResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Remove all non-virtual member-resource attributes assigned to resource\n+  *\n+  * @param sess\n+  * @param resource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllMemberResourceAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular attribute for the vo.\n+  *\n+  * @param sess perun session\n+  * @param vo remove attribute from this vo\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Vo vo, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all attributes for the vo.\n+  *\n+  * @param sess perun session\n+  * @param vo remove attributes from this vo\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular attribute for the group.\n+  *\n+  * @param sess perun session\n+  * @param group remove attribute from this group\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Group group, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all attributes for the group.\n+  *\n+  * @param sess perun session\n+  * @param group remove attributes from this group\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Group group) throws InternalErrorException;\n+\n+\n+ /**\n+  * Unset particular attribute for the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource remove attribute from this resource\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all attributes for the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource remove attributes from this resource\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular member-resorce attribute for the member on the resource.\n+  *\n+  * @param sess perun session\n+  * @param resource remove attributes for this resource\n+  * @param member remove attribute from this member\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Resource resource, Member member, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all (member-resource) attributes for the member on the resource.\n+  *\n+  * @param sess perun session\n+  * @param member remove attributes from this member\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Resource resource, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular attribute for the member in the group. Core attributes can't be removed this way.\n+  *\n+  * @param sess perun session\n+  * @param group remove attributes for this group\n+  * @param member remove attribute from this member\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Member member, Group group, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all attributes for the member in the group.\n+  *\n+  * @param sess perun session\n+  * @param group remove attributes for this group\n+  * @param member remove attributes from this member\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Member member, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular member attribute\n+  *\n+  * @param sess perun session\n+  * @param member\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Member member, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all member attributes for the member.\n+  *\n+  * @param sess perun session\n+  * @param member\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular user-facility attribute\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @param user\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all (user-facility) <b>non-virtual</b> attributes for the user on the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @param user\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+ /**\n+  * Unset all (user-facility) <b>non-virtual</b> attributes for any user on the facility.\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllUserFacilityAttributesForAnyUser(PerunSession sess, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Unset all (user-facility) <b>non-virtual</b> attributes for the user and <b>all facilities</b>\n+  *\n+  * @param sess perun session\n+  * @param user\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllUserFacilityAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular user-facility virtual attribute value.\n+  *\n+  * @param sess perun session\n+  * @param facility\n+  * @param user\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeVirtualAttribute(PerunSession sess, Facility facility, User user, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular resource virtual attribute value.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param attribute\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean removeVirtualAttribute(PerunSession sess, Resource resource, AttributeDefinition attribute) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Unset particular group-resource virtual attribute value.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param group\n+  * @param attribute\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ boolean removeVirtualAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException, WrongReferenceAttributeValueException, WrongAttributeValueException;\n+\n+ /**\n+  * Unset particular user attribute\n+  *\n+  * @param sess perun session\n+  * @param user\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, User user, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all user attributes for the user.\n+  *\n+  * @param sess perun session\n+  * @param user\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular host attribute\n+  *\n+  * @param sess perun session\n+  * @param host\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Host host, AttributeDefinition attribute) throws InternalErrorException;\n+ /**\n+  * Unset all user attributes for the host.\n+  *\n+  * @param sess perun session\n+  * @param host\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Host host) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular group_resource attribute\n+  *\n+  * @param sess perun session\n+  * @param resource resource\n+  * @param group group\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, Resource resource, Group group, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all group_resource attributes\n+  *\n+  * @param sess perun session\n+  * @param resource Resource\n+  * @param group Group\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, Resource resource, Group group) throws InternalErrorException;\n+\n+ /**\n+  * Unset particular user external source attribute\n+  *\n+  * @param sess perun session\n+  * @param ues\n+  * @param attribute attribute to remove\n+  * @return {@code true} if attribute was changed (deleted) or {@code false} if attribute was not present in a first place\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ boolean removeAttribute(PerunSession sess, UserExtSource ues, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Unset all UserExtSource attributes for the user external source.\n+  *\n+  * @param sess perun session\n+  * @param ues\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  */\n+\n+\n+ void removeAllAttributes(PerunSession sess, UserExtSource ues) throws InternalErrorException;\n+\n+ /**\n+  * Check if attribute exists in underlaying data source.\n+  *\n+  * @param sess perun session\n+  * @param attribute attribute to check\n+  * @return true if attribute exists in underlaying data source, false othewise\n+  *\n+  * @throws InternalErrorException if unexpected error occured\n+  */\n+\n+\n+ boolean attributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Check if attribute exists in underlaying data source.\n+  *\n+  * @param sess perun session\n+  * @param attribute attribute to check\n+  * @throws InternalErrorException if unexpected error occured\n+  * @throws AttributeNotExistsException if attribute doesn';t exists\n+  */\n+\n+\n+ void checkAttributeExists(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /**\n+  * Check if actionType exists in underlaying data source.\n+  *\n+  * @param sess perun session\n+  * @param actionType actionType to check\n+  * @throws InternalErrorException if unexpected error occured\n+  * @throws ActionTypeNotExistsException if attriobute doesn't exists\n+  */\n+\n+\n+ void checkActionTypeExists(PerunSession sess, ActionType actionType) throws InternalErrorException, ActionTypeNotExistsException;\n+\n+ /*\n+  * @see cz.metacentrum.perun.core.implApi.AttributesManagerImplApi#checkAttributeExists(PerunSession, AttributeDefinition)\n+  * @param expectedNamespace expected namespace\n+  * @throws WrongAttributeAssignmentException if attribute's namespace is to equal to expected namespace\n+  void checkAttributeExists(PerunSession sess, AttributeDefinition attribute, String expectedNamespace) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n+  */\n+\n+ /**\n+  * Batch version of checkAttributeExists\n+  */\n+\n+\n+ void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes) throws InternalErrorException, AttributeNotExistsException;\n+\n+ /*\n+  * @see cz.metacentrum.perun.core.implApi.AttributesManagerImplApi#checkAttributesExists(PerunSession, List)\n+  * @param expectedNamespace expected namespace\n+  * @throws WrongAttributeAssignmentException if any attribute's namespace is to equal to expected namespace\n+  void checkAttributesExists(PerunSession sess, List<? extends AttributeDefinition> attributes, String expectedNamespace) throws InternalErrorException, AttributeNotExistsException, WrongAttributeAssignmentException;\n+  */\n+\n+ /**\n+  * Determine if attribute is core attribute.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return true if attribute is core attribute\n+  */\n+\n+\n+ boolean isCoreAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+ /**\n+  * Determine if attribute is defined (def) attribute.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return true if attribute is defined attribute\n+  *         false otherwise\n+  */\n+\n+\n+ boolean isDefAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+ /**\n+  * Determine if attribute is optional (opt) attribute.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return true if attribute is optional attribute\n+  *         false otherwise\n+  */\n+\n+\n+ boolean isOptAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+ /**\n+  * Determine if attribute is core-managed attribute.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return true if attribute is core-managed\n+  */\n+\n+\n+ boolean isCoreManagedAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+ /**\n+  * Determine if attribute is virtual attribute.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return true if attribute is virtual\n+  */\n+\n+\n+ boolean isVirtAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+ /**\n+  * Determine if attribute is from specified namespace.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @param namespace\n+  * @return true if the attribute is from specified namespace false otherwise\n+  */\n+\n+\n+ boolean isFromNamespace(PerunSession sess, AttributeDefinition attribute, String namespace);\n+\n+ /**\n+  * Determine if attribute is large (can contain value over 4kb).\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return true if the attribute is large\n+  */\n+\n+\n+ boolean isLargeAttribute(PerunSession sess, AttributeDefinition attribute);\n+\n+ /**\n+  * Determine if attribute is from specified namespace.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @param namespace\n+  *\n+  * @throws WrongAttributeAssignmentException if the attribute isn't from specified namespace\n+  */\n+\n+\n+ void checkNamespace(PerunSession sess, AttributeDefinition attribute, String namespace) throws WrongAttributeAssignmentException;\n+\n+ /**\n+  * Determine if attributes are from specified namespace.\n+  *\n+  * @param sess\n+  * @param attributes\n+  * @param namespace\n+  *\n+  * @throws WrongAttributeAssignmentException if any of the attribute isn't from specified namespace\n+  */\n+\n+\n+ void checkNamespace(PerunSession sess,\n+                     List<? extends AttributeDefinition> attributes, String namespace) throws WrongAttributeAssignmentException;\n+\n+ /**\n+  * Get all values for specified resource attribute. Atibute can't be core or virt.\n+  *\n+  * @param sess\n+  * @param attributeDefinition attribute definition, namespace resource\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Object> getAllResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Get all values for specified group-resource attribute. Atibute can't be core or virt.\n+  *\n+  * @param sess\n+  * @param attributeDefinition attribute definition, namespace group-resource\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Object> getAllGroupResourceValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Get all values for specified group attribute. Atibute can't be core or virt.\n+  *\n+  * @param sess\n+  * @param attributeDefinition attribute definition, namespace group\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Object> getAllGroupValues(PerunSession sess, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Check if this attribute is currently required on this facility. Attribute can be from any namespace.\n+  *\n+  * @param sess\n+  * @param facility\n+  * @param attributeDefinition\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isAttributeRequiredByFacility(PerunSession sess, Facility facility, AttributeDefinition attributeDefinition) throws InternalErrorException;\n \n         /**\n-\t * Check if this attribute is currently required on this vo. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param vo\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByVo(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if this attribute is currently required on this group. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param group\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByGroup(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if this attribute is currently required on this resource. Attribute can be from any namespace.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param attributeDefinition\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isAttributeRequiredByResource(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * This method get all similar attr_names which start with partOfAttributeName\n-\t *\n-\t * @param sess\n-\t * @param startingPartOfAttributeName is something like: urn:perun:user_facility:attribute-def:def:login-namespace:\n-\t * @return list of similar attribute names like: urn:perun:user_facility:attribute-def:def:login-namespace:cesnet etc.\n-\t * @throws InternalErrorException\n-\t * @throws AttributeNotExistsException\n-\t */\n-\tList<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException;\n-\n-\t/**\n-\t * Get the attributeModule for the attribute\n-\t *\n-\t * @param attribute get the attribute module for this attribute\n-\t * @see cz.metacentrum.perun.core.impl.AttributesManagerImpl#getAttributesModule(PerunSession,String)\n-\t */\n-\tObject getAttributesModule(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Creates attributes during initialization. Shouldn't be called from upper layers !!!\n-\t *\n-\t * @param attribute Attribute to create\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid createAttributeExistsForInitialize(AttributeDefinition attribute) throws InternalErrorException;\n-\n-\t/**\n-\t * Updates AttributeDefinition.\n-\t *\n-\t * @param perunSession\n-\t * @param attributeDefinition\n-\t * @return returns updated attributeDefinition\n-\t * @throws InternalErrorException\n-\t */\n-\tAttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets attribute rights of an attribute with id given as a parameter.\n-\t * If the attribute has no rights for a role, it returns empty list. That means the returned list has always 4 items\n-\t * for each of the roles VOADMIN, FACILITYADMIN, GROUPADMIN, SELF.\n-\t * Info: not return rights for role VoObserver (could be same like read rights for VoAdmin)\n-\t *\n-\t * @param sess perun session\n-\t * @param attributeId id of the attribute\n-\t * @return all rights of the attribute\n-\t * @throws InternalErrorException\n-\t */\n-\tList<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException;\n-\n-\t/**\n-\t * Sets attribute right given as a parameter.\n-\t * The method sets the rights for attribute and role exactly as it is given in the list of action types. That means it can\n-\t * remove a right, if the right is missing in the list.\n-\t * Info: If there is role VoAdmin in the list, use it for setting also VoObserver rights (only for read) automatic\n-\t *\n-\t * @param sess perun session\n-\t * @param right attribute right\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid setAttributeRight(PerunSession sess, AttributeRights right) throws InternalErrorException;\n-\n-\t/**\n-\t * Get user virtual attribute module by the attribute.\n-\t *\n-\t * @param sess\n-\t * @param attribute attribute for which you get the module\n-\t * @return instance of user attribute module\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongModuleTypeException\n-\t * @throws ModuleNotExistsException\n-\t */\n-\tpublic UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException;\n-}\n+  * Check if this attribute is currently required on this vo. Attribute can be from any namespace.\n+  *\n+  * @param sess\n+  * @param vo\n+  * @param attributeDefinition\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isAttributeRequiredByVo(PerunSession sess, Vo vo, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Check if this attribute is currently required on this group. Attribute can be from any namespace.\n+  *\n+  * @param sess\n+  * @param group\n+  * @param attributeDefinition\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isAttributeRequiredByGroup(PerunSession sess, Group group, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Check if this attribute is currently required on this resource. Attribute can be from any namespace.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param attributeDefinition\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isAttributeRequiredByResource(PerunSession sess, Resource resource, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * This method get all similar attr_names which start with partOfAttributeName\n+  *\n+  * @param sess\n+  * @param startingPartOfAttributeName is something like: urn:perun:user_facility:attribute-def:def:login-namespace:\n+  * @return list of similar attribute names like: urn:perun:user_facility:attribute-def:def:login-namespace:cesnet etc.\n+  * @throws InternalErrorException\n+  * @throws AttributeNotExistsException\n+  */\n+\n+\n+ List<String> getAllSimilarAttributeNames(PerunSession sess, String startingPartOfAttributeName) throws InternalErrorException;\n+\n+ /**\n+  * Get the attributeModule for the attribute\n+  *\n+  * @param attribute get the attribute module for this attribute\n+  * @see cz.metacentrum.perun.core.impl.AttributesManagerImpl#getAttributesModule(PerunSession,String)\n+  */\n+\n+\n+ Object getAttributesModule(PerunSession sess, AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Creates attributes during initialization. Shouldn't be called from upper layers !!!\n+  *\n+  * @param attribute Attribute to create\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void createAttributeExistsForInitialize(AttributeDefinition attribute) throws InternalErrorException;\n+\n+ /**\n+  * Updates AttributeDefinition.\n+  *\n+  * @param perunSession\n+  * @param attributeDefinition\n+  * @return returns updated attributeDefinition\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ AttributeDefinition updateAttributeDefinition(PerunSession perunSession, AttributeDefinition attributeDefinition) throws InternalErrorException;\n+\n+ /**\n+  * Gets attribute rights of an attribute with id given as a parameter.\n+  * If the attribute has no rights for a role, it returns empty list. That means the returned list has always 4 items\n+  * for each of the roles VOADMIN, FACILITYADMIN, GROUPADMIN, SELF.\n+  * Info: not return rights for role VoObserver (could be same like read rights for VoAdmin)\n+  *\n+  * @param sess perun session\n+  * @param attributeId id of the attribute\n+  * @return all rights of the attribute\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<AttributeRights> getAttributeRights(PerunSession sess, int attributeId) throws InternalErrorException;\n+\n+ /**\n+  * Sets attribute right given as a parameter.\n+  * The method sets the rights for attribute and role exactly as it is given in the list of action types. That means it can\n+  * remove a right, if the right is missing in the list.\n+  * Info: If there is role VoAdmin in the list, use it for setting also VoObserver rights (only for read) automatic\n+  *\n+  * @param sess perun session\n+  * @param right attribute right\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void setAttributeRight(PerunSession sess, AttributeRights right) throws InternalErrorException;\n+\n+ /**\n+  * Get user virtual attribute module by the attribute.\n+  *\n+  * @param sess\n+  * @param attribute attribute for which you get the module\n+  * @return instance of user attribute module\n+  *\n+  * @throws InternalErrorException\n+  * @throws WrongModuleTypeException\n+  * @throws ModuleNotExistsException\n+  */\n+\n+\n+ public UserVirtualAttributesModuleImplApi getUserVirtualAttributeModule(PerunSession sess, AttributeDefinition attribute) throws ModuleNotExistsException, WrongModuleTypeException, InternalErrorException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 2661
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/71/AttributesManagerImplApi.java\nindex 8e686a7c0dd..70d5c496112 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/71/AttributesManagerImplApi.java\n@@ -750,7 +750,7 @@ public interface AttributesManagerImplApi {\n \t *\n \t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n \t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\t\n+\t */\n \tAttribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n \n \t/**\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/71/AttributesManagerImplApi.java\nindex 8e686a7c0dd..70d5c496112 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/71/AttributesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/71/AttributesManagerImplApi.java\n@@ -750,7 +750,7 @@ public interface AttributesManagerImplApi {\n \t *\n \t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n \t * @throws AttributeNotExistsException if the attribute doesn't exists in the underlaying data source\n-\t */\t\n+\t */\n \tAttribute getAttributeById(PerunSession sess, UserExtSource ues, int id) throws InternalErrorException, AttributeNotExistsException;\n \n \t/**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}