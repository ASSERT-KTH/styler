{
    "project_name": "neo4j-neo4j",
    "error_id": "1372",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "141",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1372/AbstractCypherAdapterStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1372/AbstractCypherAdapterStream.java\nindex 4395e9a0f6a..88540d5c267 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1372/AbstractCypherAdapterStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1372/AbstractCypherAdapterStream.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.runtime;\n \n import java.time.Clock;\n@@ -50,10 +51,10 @@ public abstract class AbstractCypherAdapterStream implements BoltResult\n     private static final String PROFILE = \"profile\";\n     private static final String PLAN = \"plan\";\n     private static final String NOTIFICATIONS = \"notifications\";\n-    private static final TextValue READ_ONLY = Values.utf8Value( new byte[]{'r'} );\n-    private static final TextValue READ_WRITE = Values.utf8Value( new byte[]{'r', 'w'} );\n-    private static final TextValue WRITE = Values.utf8Value( new byte[]{'w'} );\n-    private static final TextValue SCHEMA_WRITE = Values.utf8Value( new byte[]{'s'} );\n+    private static final TextValue READ_ONLY = Values.utf8Value(new byte[] {'r'});\n+    private static final TextValue READ_WRITE = Values.utf8Value(new byte[] {'r', 'w'});\n+    private static final TextValue WRITE = Values.utf8Value(new byte[] {'w'});\n+    private static final TextValue SCHEMA_WRITE = Values.utf8Value(new byte[] {'s'});\n \n     private final QueryExecution queryExecution;\n     private final String[] fieldNames;\n@@ -62,8 +63,8 @@ public abstract class AbstractCypherAdapterStream implements BoltResult\n \n     private static final Long STREAM_UNLIMITED_BATCH_SIZE = Long.MAX_VALUE;\n \n-    public AbstractCypherAdapterStream( QueryExecution queryExecution,\n-            BoltAdapterSubscriber querySubscriber, Clock clock )\n+    public AbstractCypherAdapterStream(QueryExecution queryExecution,\n+                                       BoltAdapterSubscriber querySubscriber, Clock clock)\n     {\n         this.queryExecution = queryExecution;\n         this.fieldNames = queryExecution.fieldNames();\n@@ -84,187 +85,184 @@ public abstract class AbstractCypherAdapterStream implements BoltResult\n     }\n \n     @Override\n-    public boolean handleRecords( RecordConsumer recordConsumer, long size ) throws Throwable\n+    public boolean handleRecords(RecordConsumer recordConsumer, long size) throws Throwable\n     {\n         long start = clock.millis();\n-        this.querySubscriber.setRecordConsumer( recordConsumer );\n+        this.querySubscriber.setRecordConsumer(recordConsumer);\n \n         boolean hasMore = true;\n-        if ( size == STREAM_LIMIT_UNLIMITED )\n+        if (size == STREAM_LIMIT_UNLIMITED)\n         {\n-            while ( hasMore )\n+            while (hasMore)\n             {\n                 // Continuously pull until the whole stream is done\n-                queryExecution.request( STREAM_UNLIMITED_BATCH_SIZE );\n+                queryExecution.request(STREAM_UNLIMITED_BATCH_SIZE);\n                 hasMore = queryExecution.await();\n             }\n-        }\n-        else\n+        } else\n         {\n-            queryExecution.request( size );\n+            queryExecution.request(size);\n             hasMore = queryExecution.await();\n         }\n \n         querySubscriber.assertSucceeded();\n-        if ( !hasMore )\n+        if (!hasMore)\n         {\n-            addRecordStreamingTime( clock.millis() - start, recordConsumer );\n-            addDatabaseName( recordConsumer );\n-            addMetadata( querySubscriber.queryStatistics(), recordConsumer );\n+            addRecordStreamingTime(clock.millis() - start, recordConsumer);\n+            addDatabaseName(recordConsumer);\n+            addMetadata(querySubscriber.queryStatistics(), recordConsumer);\n         }\n         return hasMore;\n     }\n \n     @Override\n-    public boolean discardRecords( DiscardingRecordConsumer consumer, long size ) throws Throwable\n+    public boolean discardRecords(DiscardingRecordConsumer consumer, long size) throws Throwable\n     {\n-        Preconditions.checkArgument( size == STREAM_LIMIT_UNLIMITED,\n-                                     \"Currently it is only supported to discard ALL records, but it was requested to discard \" + size );\n+        Preconditions.checkArgument(size == STREAM_LIMIT_UNLIMITED,\n+          \"Currently it is only supported to discard ALL records, but it was requested to discard \" + size);\n \n-        if ( queryExecution.executionType().queryType() == QueryExecutionType.QueryType.READ_ONLY )\n+        if (queryExecution.executionType().queryType() == QueryExecutionType.QueryType.READ_ONLY)\n         {\n             long start = clock.millis();\n             queryExecution.cancel();\n             queryExecution.await();\n-            addRecordStreamingTime( clock.millis() - start, consumer );\n+            addRecordStreamingTime(clock.millis() - start, consumer);\n             // The subscriber didn't get statistics since the query did not finish execution, but\n             // for read queries we know that empty statistics are correct.\n-            addMetadata( QueryStatistics.EMPTY, consumer );\n+            addMetadata(QueryStatistics.EMPTY, consumer);\n             return false;\n-        }\n-        else\n+        } else\n         {\n             // For READ-WRITE or WRITE queries, we need to continue execution but do not need to send records any longer\n-            return handleRecords( consumer, size );\n+            return handleRecords(consumer, size);\n         }\n     }\n \n-    protected abstract void addDatabaseName( RecordConsumer recordConsumer );\n+    protected abstract void addDatabaseName(RecordConsumer recordConsumer);\n \n-    protected abstract void addRecordStreamingTime( long time, RecordConsumer recordConsumer );\n+    protected abstract void addRecordStreamingTime(long time, RecordConsumer recordConsumer);\n \n-    private void addMetadata( QueryStatistics statistics, RecordConsumer recordConsumer )\n+    private void addMetadata(QueryStatistics statistics, RecordConsumer recordConsumer)\n     {\n         QueryExecutionType qt = queryExecution.executionType();\n-        recordConsumer.addMetadata( TYPE, queryTypeCode( qt.queryType() ) );\n+        recordConsumer.addMetadata(TYPE, queryTypeCode(qt.queryType()));\n \n-        addQueryStatistics( statistics, recordConsumer );\n+        addQueryStatistics(statistics, recordConsumer);\n \n-        if ( qt.requestedExecutionPlanDescription() )\n+        if (qt.requestedExecutionPlanDescription())\n         {\n             ExecutionPlanDescription rootPlanTreeNode = queryExecution.executionPlanDescription();\n             String metadataFieldName = rootPlanTreeNode.hasProfilerStatistics() ? PROFILE : PLAN;\n-            recordConsumer.addMetadata( metadataFieldName, ExecutionPlanConverter.convert( rootPlanTreeNode ) );\n+            recordConsumer.addMetadata(metadataFieldName, ExecutionPlanConverter.convert(rootPlanTreeNode));\n         }\n \n         Iterable<Notification> notifications = queryExecution.getNotifications();\n-        if ( notifications.iterator().hasNext() )\n+        if (notifications.iterator().hasNext())\n         {\n-            recordConsumer.addMetadata( NOTIFICATIONS, convertNotifications( notifications ) );\n+            recordConsumer.addMetadata(NOTIFICATIONS, convertNotifications(notifications));\n         }\n     }\n \n-    private void addQueryStatistics( QueryStatistics statistics, RecordConsumer recordConsumer )\n+    private void addQueryStatistics(QueryStatistics statistics, RecordConsumer recordConsumer)\n     {\n-        if ( statistics.containsUpdates() )\n+        if (statistics.containsUpdates())\n         {\n-            MapValue stats = queryStats( statistics );\n-            recordConsumer.addMetadata( STATS, stats );\n-        }\n-        else if ( statistics.containsSystemUpdates() )\n+            MapValue stats = queryStats(statistics);\n+            recordConsumer.addMetadata(STATS, stats);\n+        } else if (statistics.containsSystemUpdates())\n         {\n-            MapValue stats = systemQueryStats( statistics );\n-            recordConsumer.addMetadata( STATS, stats );\n+            MapValue stats = systemQueryStats(statistics);\n+            recordConsumer.addMetadata(STATS, stats);\n         }\n     }\n \n     @Override\n     public String toString()\n     {\n-        return \"CypherAdapterStream{\" + \"delegate=\" + queryExecution + \", fieldNames=\" + Arrays.toString( fieldNames ) +\n-               '}';\n+        return \"CypherAdapterStream{\" + \"delegate=\" + queryExecution + \", fieldNames=\" + Arrays.toString(fieldNames) +\n+          '}';\n     }\n \n-    private MapValue queryStats( QueryStatistics queryStatistics )\n+    private MapValue queryStats(QueryStatistics queryStatistics)\n     {\n         MapValueBuilder builder = new MapValueBuilder();\n-        addIfNonZero( builder, \"nodes-created\", queryStatistics.getNodesCreated() );\n-        addIfNonZero( builder, \"nodes-deleted\", queryStatistics.getNodesDeleted() );\n-        addIfNonZero( builder, \"relationships-created\", queryStatistics.getRelationshipsCreated() );\n-        addIfNonZero( builder, \"relationships-deleted\", queryStatistics.getRelationshipsDeleted() );\n-        addIfNonZero( builder, \"properties-set\", queryStatistics.getPropertiesSet() );\n-        addIfNonZero( builder, \"labels-added\", queryStatistics.getLabelsAdded() );\n-        addIfNonZero( builder, \"labels-removed\", queryStatistics.getLabelsRemoved() );\n-        addIfNonZero( builder, \"indexes-added\", queryStatistics.getIndexesAdded() );\n-        addIfNonZero( builder, \"indexes-removed\", queryStatistics.getIndexesRemoved() );\n-        addIfNonZero( builder, \"constraints-added\", queryStatistics.getConstraintsAdded() );\n-        addIfNonZero( builder, \"constraints-removed\", queryStatistics.getConstraintsRemoved() );\n+        addIfNonZero(builder, \"nodes-created\", queryStatistics.getNodesCreated());\n+        addIfNonZero(builder, \"nodes-deleted\", queryStatistics.getNodesDeleted());\n+        addIfNonZero(builder, \"relationships-created\", queryStatistics.getRelationshipsCreated());\n+        addIfNonZero(builder, \"relationships-deleted\", queryStatistics.getRelationshipsDeleted());\n+        addIfNonZero(builder, \"properties-set\", queryStatistics.getPropertiesSet());\n+        addIfNonZero(builder, \"labels-added\", queryStatistics.getLabelsAdded());\n+        addIfNonZero(builder, \"labels-removed\", queryStatistics.getLabelsRemoved());\n+        addIfNonZero(builder, \"indexes-added\", queryStatistics.getIndexesAdded());\n+        addIfNonZero(builder, \"indexes-removed\", queryStatistics.getIndexesRemoved());\n+        addIfNonZero(builder, \"constraints-added\", queryStatistics.getConstraintsAdded());\n+        addIfNonZero(builder, \"constraints-removed\", queryStatistics.getConstraintsRemoved());\n         return builder.build();\n     }\n \n-    private MapValue systemQueryStats( QueryStatistics queryStatistics )\n+    private MapValue systemQueryStats(QueryStatistics queryStatistics)\n     {\n         MapValueBuilder builder = new MapValueBuilder();\n-        addIfNonZero( builder, \"system-updates\", queryStatistics.getSystemUpdates() );\n+        addIfNonZero(builder, \"system-updates\", queryStatistics.getSystemUpdates());\n         return builder.build();\n     }\n \n-    private void addIfNonZero( MapValueBuilder builder, String name, int count )\n+    private void addIfNonZero(MapValueBuilder builder, String name, int count)\n     {\n-        if ( count > 0 )\n+        if (count > 0)\n         {\n-            builder.add( name, intValue( count ) );\n+            builder.add(name, intValue(count));\n         }\n     }\n \n-    private TextValue queryTypeCode( QueryExecutionType.QueryType queryType )\n+    private TextValue queryTypeCode(QueryExecutionType.QueryType queryType)\n     {\n-        switch ( queryType )\n+        switch (queryType)\n         {\n-        case READ_ONLY:\n-            return READ_ONLY;\n+            case READ_ONLY:\n+                return READ_ONLY;\n \n-        case READ_WRITE:\n-            return READ_WRITE;\n+            case READ_WRITE:\n+                return READ_WRITE;\n \n-        case WRITE:\n-            return WRITE;\n+            case WRITE:\n+                return WRITE;\n \n-        case SCHEMA_WRITE:\n-        case DBMS://TODO: Dear reviewer, what about this\n-            return SCHEMA_WRITE;\n+            case SCHEMA_WRITE:\n+            case DBMS://TODO: Dear reviewer, what about this\n+                return SCHEMA_WRITE;\n \n-        default:\n-            throw new IllegalStateException( format( \"%s is not a known query type\", queryType ) );\n+            default:\n+                throw new IllegalStateException(format(\"%s is not a known query type\", queryType));\n         }\n     }\n \n-    private static AnyValue convertNotifications( Iterable<Notification> notifications )\n+    private static AnyValue convertNotifications(Iterable<Notification> notifications)\n     {\n         ListValueBuilder listValueBuilder = ListValueBuilder.newListBuilder();\n-        for ( Notification notification : notifications )\n+        for (Notification notification : notifications)\n         {\n             InputPosition pos = notification.getPosition(); // position is optional\n-            boolean includePosition = !pos.equals( InputPosition.empty );\n+            boolean includePosition = !pos.equals(InputPosition.empty);\n             int size = includePosition ? 5 : 4;\n-            MapValueBuilder builder = new MapValueBuilder( size );\n+            MapValueBuilder builder = new MapValueBuilder(size);\n \n-            builder.add( \"code\", utf8Value( notification.getCode() ) );\n-            builder.add( \"title\", utf8Value( notification.getTitle() ) );\n-            builder.add( \"description\", utf8Value( notification.getDescription() ) );\n-            builder.add( \"severity\", utf8Value( notification.getSeverity().toString() ) );\n+            builder.add(\"code\", utf8Value(notification.getCode()));\n+            builder.add(\"title\", utf8Value(notification.getTitle()));\n+            builder.add(\"description\", utf8Value(notification.getDescription()));\n+            builder.add(\"severity\", utf8Value(notification.getSeverity().toString()));\n \n-            if ( includePosition )\n+            if (includePosition)\n             {\n                 // only add the position if it is not empty\n-                builder.add( \"position\", VirtualValues.map( new String[]{\"offset\", \"line\", \"column\"},\n-                        new AnyValue[]{\n-                                intValue( pos.getOffset() ),\n-                                intValue( pos.getLine() ),\n-                                intValue( pos.getColumn() )} ) );\n+                builder.add(\"position\", VirtualValues.map(new String[] {\"offset\", \"line\", \"column\"},\n+                  new AnyValue[] {\n+                    intValue(pos.getOffset()),\n+                    intValue(pos.getLine()),\n+                    intValue(pos.getColumn())}));\n             }\n \n-            listValueBuilder.add( builder.build() );\n+            listValueBuilder.add(builder.build());\n         }\n         return listValueBuilder.build();\n     }\n",
            "diff_size": 92
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}