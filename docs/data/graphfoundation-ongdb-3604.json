{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3604",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3604/IndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3604/IndexPopulator.java\nindex 1f233dfc000..643dfd7ec05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3604/IndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3604/IndexPopulator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.index;\n \n import java.io.IOException;\n@@ -34,163 +35,163 @@ import org.neo4j.storageengine.api.schema.IndexSample;\n  */\n public interface IndexPopulator\n {\n-    /**\n-     * Remove all data in the index and paves the way for populating an index.\n-     *\n-     * @throws IOException on I/O error.\n-     */\n-    void create() throws IOException;\n-\n-    /**\n-     * Closes and deletes this index.\n-     *\n-     * @throws IOException on I/O error.\n-     */\n-    void drop() throws IOException;\n-\n-    /**\n-     * Called when initially populating an index over existing data. Guaranteed to be\n-     * called by the same thread every time. All data coming in here is guaranteed to not\n-     * have been added to this index previously, so no checks needs to be performed before applying it.\n-     * Implementations may verify constraints at this time, or defer them until the first verification\n-     * of {@link #verifyDeferredConstraints(PropertyAccessor)}.\n-     *\n-     * @param updates batch of node property updates that needs to be inserted. Node ids will be retrieved using\n-     * {@link IndexEntryUpdate#getEntityId()} method and property values will be retrieved using\n-     * {@link IndexEntryUpdate#values()} method.\n-     * @throws IndexEntryConflictException if this is a uniqueness index and any of the updates are detected\n-     * to violate that constraint. Implementations may choose to not detect in this call, but instead do one efficient\n-     * pass over the index in {@link #verifyDeferredConstraints(PropertyAccessor)}.\n-     * @throws IOException on I/O error.\n-     */\n-    void add( Collection<? extends IndexEntryUpdate<?>> updates )\n-            throws IndexEntryConflictException, IOException;\n-\n-    /**\n-     * Verifies that each value in this index is unique.\n-     * This method is called after the index has been fully populated and is guaranteed to not have\n-     * concurrent changes while executing.\n-     *\n-     * @param propertyAccessor {@link PropertyAccessor} for accessing properties from database storage\n-     * in the event of conflicting values.\n-     * @throws IndexEntryConflictException for first detected uniqueness conflict, if any.\n-     * @throws IOException on error reading from source files.\n-     */\n-    void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException;\n-\n-    /**\n-     * Return an updater for applying a set of changes to this index, generally this will be a set of changes from a\n-     * transaction.\n-     *\n-     * Index population goes through the existing data in the graph and feeds relevant data to this populator.\n-     * Simultaneously as population progresses there might be incoming updates\n-     * from committing transactions, which needs to be applied as well. This populator will only receive updates\n-     * for nodes that it already has seen. Updates coming in here must be applied idempotently as the same data\n-     * may have been {@link #add(Collection) added previously}.\n-     * Updates can come in two different {@link IndexEntryUpdate#updateMode()} modes}.\n-     * <ol>\n-     *   <li>{@link UpdateMode#ADDED} means that there's an added property to a node already seen by this\n-     *   populator and so needs to be added. Note that this addition needs to be applied idempotently.\n-     *   <li>{@link UpdateMode#CHANGED} means that there's a change to a property for a node already seen by\n-     *   this populator and that this new change needs to be applied. Note that this change needs to be\n-     *   applied idempotently.</li>\n-     *   <li>{@link UpdateMode#REMOVED} means that a property already seen by this populator or even the node itself\n-     *   has been removed and need to be removed from this index as well. Note that this removal needs to be\n-     *   applied idempotently.</li>\n-     * </ol>\n-     *\n-     * @param accessor accesses property data if implementation needs to be able look up property values while populating.\n-     * @return an {@link IndexUpdater} which will funnel changes that happen concurrently with index population\n-     * into the population and incorporating them as part of the index population.\n-     */\n-    IndexUpdater newPopulatingUpdater( PropertyAccessor accessor );\n-\n-    /**\n-     * Close this populator and releases any resources related to it.\n-     * If {@code populationCompletedSuccessfully} is {@code true} then it must mark this index\n-     * as {@link InternalIndexState#ONLINE} so that future invocations of its parent\n-     * {@link IndexProvider#getInitialState(long, SchemaIndexDescriptor)} also returns {@link InternalIndexState#ONLINE}.\n-     *\n-     * @param populationCompletedSuccessfully {@code true} if the index population was successful, where the index should\n-     * be marked as {@link InternalIndexState#ONLINE}, otherwise {@code false} where index should be marked as\n-     * {@link InternalIndexState#FAILED} and the failure, previously handed to this populator using {@link #markAsFailed(String)}\n-     * should be stored and made available for later requests from {@link IndexProvider#getPopulationFailure(long, SchemaIndexDescriptor)}.\n-     * @throws IOException on I/O error.\n-     */\n-    void close( boolean populationCompletedSuccessfully ) throws IOException;\n-\n-    /**\n-     * Called then a population failed. The failure string should be stored for future retrieval by\n-     * {@link IndexProvider#getPopulationFailure(long, SchemaIndexDescriptor)}. Called before {@link #close(boolean)}\n-     * if there was a failure during population.\n-     *\n-     * @param failure the description of the failure.\n-     * @throws IOException if marking failed.\n-     */\n-    void markAsFailed( String failure ) throws IOException;\n-\n-    /**\n-     * Add the given {@link IndexEntryUpdate update} to the sampler for this index.\n-     *\n-     * @param update update to include in sample\n-     */\n-    void includeSample( IndexEntryUpdate<?> update );\n-\n-    /**\n-     * @return {@link IndexSample} from samples collected by {@link #includeSample(IndexEntryUpdate)} calls.\n-     */\n-    IndexSample sampleResult();\n-\n-    IndexPopulator EMPTY = new Adapter();\n-\n-    class Adapter implements IndexPopulator\n+  /**\n+   * Remove all data in the index and paves the way for populating an index.\n+   *\n+   * @throws IOException on I/O error.\n+   */\n+  void create() throws IOException;\n+\n+  /**\n+   * Closes and deletes this index.\n+   *\n+   * @throws IOException on I/O error.\n+   */\n+  void drop() throws IOException;\n+\n+  /**\n+   * Called when initially populating an index over existing data. Guaranteed to be\n+   * called by the same thread every time. All data coming in here is guaranteed to not\n+   * have been added to this index previously, so no checks needs to be performed before applying it.\n+   * Implementations may verify constraints at this time, or defer them until the first verification\n+   * of {@link #verifyDeferredConstraints(PropertyAccessor)}.\n+   *\n+   * @param updates batch of node property updates that needs to be inserted. Node ids will be retrieved using\n+   *                {@link IndexEntryUpdate#getEntityId()} method and property values will be retrieved using\n+   *                {@link IndexEntryUpdate#values()} method.\n+   * @throws IndexEntryConflictException if this is a uniqueness index and any of the updates are detected\n+   *                                     to violate that constraint. Implementations may choose to not detect in this call, but instead do one efficient\n+   *                                     pass over the index in {@link #verifyDeferredConstraints(PropertyAccessor)}.\n+   * @throws IOException                 on I/O error.\n+   */\n+  void add(Collection<? extends IndexEntryUpdate<?>> updates)\n+      throws IndexEntryConflictException, IOException;\n+\n+  /**\n+   * Verifies that each value in this index is unique.\n+   * This method is called after the index has been fully populated and is guaranteed to not have\n+   * concurrent changes while executing.\n+   *\n+   * @param propertyAccessor {@link PropertyAccessor} for accessing properties from database storage\n+   *                         in the event of conflicting values.\n+   * @throws IndexEntryConflictException for first detected uniqueness conflict, if any.\n+   * @throws IOException                 on error reading from source files.\n+   */\n+  void verifyDeferredConstraints(PropertyAccessor propertyAccessor) throws IndexEntryConflictException, IOException;\n+\n+  /**\n+   * Return an updater for applying a set of changes to this index, generally this will be a set of changes from a\n+   * transaction.\n+   * <p>\n+   * Index population goes through the existing data in the graph and feeds relevant data to this populator.\n+   * Simultaneously as population progresses there might be incoming updates\n+   * from committing transactions, which needs to be applied as well. This populator will only receive updates\n+   * for nodes that it already has seen. Updates coming in here must be applied idempotently as the same data\n+   * may have been {@link #add(Collection) added previously}.\n+   * Updates can come in two different {@link IndexEntryUpdate#updateMode()} modes}.\n+   * <ol>\n+   *   <li>{@link UpdateMode#ADDED} means that there's an added property to a node already seen by this\n+   *   populator and so needs to be added. Note that this addition needs to be applied idempotently.\n+   *   <li>{@link UpdateMode#CHANGED} means that there's a change to a property for a node already seen by\n+   *   this populator and that this new change needs to be applied. Note that this change needs to be\n+   *   applied idempotently.</li>\n+   *   <li>{@link UpdateMode#REMOVED} means that a property already seen by this populator or even the node itself\n+   *   has been removed and need to be removed from this index as well. Note that this removal needs to be\n+   *   applied idempotently.</li>\n+   * </ol>\n+   *\n+   * @param accessor accesses property data if implementation needs to be able look up property values while populating.\n+   * @return an {@link IndexUpdater} which will funnel changes that happen concurrently with index population\n+   * into the population and incorporating them as part of the index population.\n+   */\n+  IndexUpdater newPopulatingUpdater(PropertyAccessor accessor);\n+\n+  /**\n+   * Close this populator and releases any resources related to it.\n+   * If {@code populationCompletedSuccessfully} is {@code true} then it must mark this index\n+   * as {@link InternalIndexState#ONLINE} so that future invocations of its parent\n+   * {@link IndexProvider#getInitialState(long, SchemaIndexDescriptor)} also returns {@link InternalIndexState#ONLINE}.\n+   *\n+   * @param populationCompletedSuccessfully {@code true} if the index population was successful, where the index should\n+   *                                        be marked as {@link InternalIndexState#ONLINE}, otherwise {@code false} where index should be marked as\n+   *                                        {@link InternalIndexState#FAILED} and the failure, previously handed to this populator using {@link #markAsFailed(String)}\n+   *                                        should be stored and made available for later requests from {@link IndexProvider#getPopulationFailure(long, SchemaIndexDescriptor)}.\n+   * @throws IOException on I/O error.\n+   */\n+  void close(boolean populationCompletedSuccessfully) throws IOException;\n+\n+  /**\n+   * Called then a population failed. The failure string should be stored for future retrieval by\n+   * {@link IndexProvider#getPopulationFailure(long, SchemaIndexDescriptor)}. Called before {@link #close(boolean)}\n+   * if there was a failure during population.\n+   *\n+   * @param failure the description of the failure.\n+   * @throws IOException if marking failed.\n+   */\n+  void markAsFailed(String failure) throws IOException;\n+\n+  /**\n+   * Add the given {@link IndexEntryUpdate update} to the sampler for this index.\n+   *\n+   * @param update update to include in sample\n+   */\n+  void includeSample(IndexEntryUpdate<?> update);\n+\n+  /**\n+   * @return {@link IndexSample} from samples collected by {@link #includeSample(IndexEntryUpdate)} calls.\n+   */\n+  IndexSample sampleResult();\n+\n+  IndexPopulator EMPTY = new Adapter();\n+\n+  class Adapter implements IndexPopulator\n+  {\n+    @Override\n+    public void create() throws IOException\n+    {\n+    }\n+\n+    @Override\n+    public void drop()\n+    {\n+    }\n+\n+    @Override\n+    public void add(Collection<? extends IndexEntryUpdate<?>> updates)\n+    {\n+    }\n+\n+    @Override\n+    public IndexUpdater newPopulatingUpdater(PropertyAccessor accessor)\n+    {\n+      return SwallowingIndexUpdater.INSTANCE;\n+    }\n+\n+    @Override\n+    public void close(boolean populationCompletedSuccessfully) throws IOException\n+    {\n+    }\n+\n+    @Override\n+    public void markAsFailed(String failure)\n+    {\n+    }\n+\n+    @Override\n+    public void includeSample(IndexEntryUpdate<?> update)\n+    {\n+    }\n+\n+    @Override\n+    public IndexSample sampleResult()\n+    {\n+      return new IndexSample();\n+    }\n+\n+    @Override\n+    public void verifyDeferredConstraints(PropertyAccessor propertyAccessor)\n+        throws IndexEntryConflictException, IOException\n     {\n-        @Override\n-        public void create() throws IOException\n-        {\n-        }\n-\n-        @Override\n-        public void drop()\n-        {\n-        }\n-\n-        @Override\n-        public void add( Collection<? extends IndexEntryUpdate<?>> updates )\n-        {\n-        }\n-\n-        @Override\n-        public IndexUpdater newPopulatingUpdater( PropertyAccessor accessor )\n-        {\n-            return SwallowingIndexUpdater.INSTANCE;\n-        }\n-\n-        @Override\n-        public void close( boolean populationCompletedSuccessfully ) throws IOException\n-        {\n-        }\n-\n-        @Override\n-        public void markAsFailed( String failure )\n-        {\n-        }\n-\n-        @Override\n-        public void includeSample( IndexEntryUpdate<?> update )\n-        {\n-        }\n-\n-        @Override\n-        public IndexSample sampleResult()\n-        {\n-            return new IndexSample();\n-        }\n-\n-        @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-                throws IndexEntryConflictException, IOException\n-        {\n-        }\n     }\n+  }\n }\n",
            "diff_size": 205
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3604/IndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3604/IndexPopulator.java\nindex 1f233dfc000..a13905e1c68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3604/IndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3604/IndexPopulator.java\n@@ -63,10 +63,9 @@ public interface IndexPopulator\n      * pass over the index in {@link #verifyDeferredConstraints(PropertyAccessor)}.\n      * @throws IOException on I/O error.\n      */\n-    void add( Collection<? extends IndexEntryUpdate<?>> updates )\n-            throws IndexEntryConflictException, IOException;\n+    void add( Collection<? extends IndexEntryUpdate<?>> updates ) throws IndexEntryConflictException, IOException;\n \n-    /**\n+/**\n      * Verifies that each value in this index is unique.\n      * This method is called after the index has been fully populated and is guaranteed to not have\n      * concurrent changes while executing.\n@@ -140,8 +139,7 @@ public interface IndexPopulator\n      * @return {@link IndexSample} from samples collected by {@link #includeSample(IndexEntryUpdate)} calls.\n      */\n     IndexSample sampleResult();\n-\n-    IndexPopulator EMPTY = new Adapter();\n+IndexPopulator EMPTY = new Adapter();\n \n     class Adapter implements IndexPopulator\n     {\n@@ -188,9 +186,8 @@ public interface IndexPopulator\n         }\n \n         @Override\n-        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-                throws IndexEntryConflictException, IOException\n-        {\n+        public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n+{\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}