{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3165",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3165/IndexTxStateUpdater.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3165/IndexTxStateUpdater.java\nindex 5387086d2d3..75c7948438f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3165/IndexTxStateUpdater.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3165/IndexTxStateUpdater.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import org.apache.commons.lang3.ArrayUtils;\n@@ -41,188 +42,187 @@ import static org.neo4j.values.storable.Values.NO_VALUE;\n  */\n public class IndexTxStateUpdater\n {\n-    private final StoreReadLayer storeReadLayer;\n-    private final Read read;\n-    private final IndexingService indexingService;\n-\n-    // We can use the StoreReadLayer directly instead of the SchemaReadOps, because we know that in transactions\n-    // where this class is needed we will never have index changes.\n-    public IndexTxStateUpdater( StoreReadLayer storeReadLayer, Read read, IndexingService indexingService )\n-    {\n-        this.storeReadLayer = storeReadLayer;\n-        this.read = read;\n-        this.indexingService = indexingService;\n-    }\n-\n-    // LABEL CHANGES\n-\n-    public enum LabelChangeType\n+  private final StoreReadLayer storeReadLayer;\n+  private final Read read;\n+  private final IndexingService indexingService;\n+\n+  // We can use the StoreReadLayer directly instead of the SchemaReadOps, because we know that in transactions\n+  // where this class is needed we will never have index changes.\n+  public IndexTxStateUpdater(StoreReadLayer storeReadLayer, Read read, IndexingService indexingService)\n+  {\n+    this.storeReadLayer = storeReadLayer;\n+    this.read = read;\n+    this.indexingService = indexingService;\n+  }\n+\n+  // LABEL CHANGES\n+\n+  public enum LabelChangeType\n+  {\n+    ADDED_LABEL,\n+    REMOVED_LABEL\n+  }\n+\n+  /**\n+   * A label has been changed, figure out what updates are needed to tx state.\n+   *\n+   * @param labelId        The id of the changed label\n+   * @param node           cursor to the node where the change was applied\n+   * @param propertyCursor cursor to the properties of node\n+   * @param changeType     The type of change event\n+   */\n+  void onLabelChange(int labelId, NodeCursor node, PropertyCursor propertyCursor, LabelChangeType changeType)\n+  {\n+    assert noSchemaChangedInTx();\n+\n+    // Find properties of the changed node\n+    PrimitiveIntSet nodePropertyIds = Primitive.intSet();\n+    node.properties(propertyCursor);\n+    while (propertyCursor.next())\n     {\n-        ADDED_LABEL,\n-        REMOVED_LABEL\n+      nodePropertyIds.add(propertyCursor.propertyKey());\n     }\n \n-    /**\n-     * A label has been changed, figure out what updates are needed to tx state.\n-     *\n-     * @param labelId The id of the changed label\n-     * @param node cursor to the node where the change was applied\n-     * @param propertyCursor cursor to the properties of node\n-     * @param changeType The type of change event\n-     */\n-    void onLabelChange( int labelId, NodeCursor node, PropertyCursor propertyCursor, LabelChangeType changeType )\n+    // Check all indexes of the changed label\n+    Iterator<SchemaIndexDescriptor> indexes = storeReadLayer.indexesGetForLabel(labelId);\n+    while (indexes.hasNext())\n     {\n-        assert noSchemaChangedInTx();\n-\n-        // Find properties of the changed node\n-        PrimitiveIntSet nodePropertyIds = Primitive.intSet();\n-        node.properties( propertyCursor );\n-        while ( propertyCursor.next() )\n+      SchemaIndexDescriptor index = indexes.next();\n+      int[] indexPropertyIds = index.schema().getPropertyIds();\n+      if (nodeHasIndexProperties(nodePropertyIds, indexPropertyIds))\n+      {\n+        Value[] values = getValueTuple(node, propertyCursor, indexPropertyIds);\n+        switch (changeType)\n         {\n-            nodePropertyIds.add( propertyCursor.propertyKey() );\n+          case ADDED_LABEL:\n+            indexingService.validateBeforeCommit(index.schema(), values);\n+            read.txState().indexDoUpdateEntry(index.schema(), node.nodeReference(), null, ValueTuple.of(values));\n+            break;\n+          case REMOVED_LABEL:\n+            read.txState().indexDoUpdateEntry(index.schema(), node.nodeReference(), ValueTuple.of(values), null);\n+            break;\n+          default:\n+            throw new IllegalStateException(changeType + \" is not a supported event\");\n         }\n-\n-        // Check all indexes of the changed label\n-        Iterator<SchemaIndexDescriptor> indexes = storeReadLayer.indexesGetForLabel( labelId );\n-        while ( indexes.hasNext() )\n+      }\n+    }\n+  }\n+\n+  private boolean noSchemaChangedInTx()\n+  {\n+    return !(read.txState().hasChanges() && !read.txState().hasDataChanges());\n+  }\n+\n+  //PROPERTY CHANGES\n+\n+  void onPropertyAdd(NodeCursor node, PropertyCursor propertyCursor, int propertyKeyId, Value value)\n+  {\n+    assert noSchemaChangedInTx();\n+    Iterator<SchemaIndexDescriptor> indexes =\n+        storeReadLayer.indexesGetRelatedToProperty(propertyKeyId);\n+    NodeSchemaMatcher.onMatchingSchema(indexes, node, propertyCursor, propertyKeyId,\n+        (index, propertyKeyIds) ->\n+        {\n+          Value[] values = getValueTuple(node, propertyCursor, propertyKeyId, value, index.schema().getPropertyIds());\n+          indexingService.validateBeforeCommit(index.schema(), values);\n+          read.txState().indexDoUpdateEntry(index.schema(), node.nodeReference(), null, ValueTuple.of(values));\n+        });\n+  }\n+\n+  void onPropertyRemove(NodeCursor node, PropertyCursor propertyCursor, int propertyKeyId, Value value)\n+  {\n+    assert noSchemaChangedInTx();\n+    Iterator<SchemaIndexDescriptor> indexes =\n+        storeReadLayer.indexesGetRelatedToProperty(propertyKeyId);\n+    NodeSchemaMatcher.onMatchingSchema(indexes, node, propertyCursor, propertyKeyId,\n+        (index, propertyKeyIds) ->\n+        {\n+          Value[] values = getValueTuple(node, propertyCursor, propertyKeyId, value, index.schema().getPropertyIds());\n+          read.txState().indexDoUpdateEntry(index.schema(), node.nodeReference(), ValueTuple.of(values), null);\n+        });\n+  }\n+\n+  void onPropertyChange(NodeCursor node, PropertyCursor propertyCursor, int propertyKeyId,\n+                        Value beforeValue, Value afterValue)\n+  {\n+    assert noSchemaChangedInTx();\n+    Iterator<SchemaIndexDescriptor> indexes = storeReadLayer.indexesGetRelatedToProperty(propertyKeyId);\n+    NodeSchemaMatcher.onMatchingSchema(indexes, node, propertyCursor, propertyKeyId,\n+        (index, propertyKeyIds) ->\n         {\n-            SchemaIndexDescriptor index = indexes.next();\n-            int[] indexPropertyIds = index.schema().getPropertyIds();\n-            if ( nodeHasIndexProperties( nodePropertyIds, indexPropertyIds ) )\n+          int[] indexPropertyIds = index.schema().getPropertyIds();\n+\n+          Value[] valuesBefore = new Value[indexPropertyIds.length];\n+          Value[] valuesAfter = new Value[indexPropertyIds.length];\n+          for (int i = 0; i < indexPropertyIds.length; i++)\n+          {\n+            int indexPropertyId = indexPropertyIds[i];\n+            if (indexPropertyId == propertyKeyId)\n             {\n-                Value[] values = getValueTuple( node, propertyCursor, indexPropertyIds );\n-                switch ( changeType )\n+              valuesBefore[i] = beforeValue;\n+              valuesAfter[i] = afterValue;\n+            } else\n+            {\n+              node.properties(propertyCursor);\n+              Value value = NO_VALUE;\n+              while (propertyCursor.next())\n+              {\n+                if (propertyCursor.propertyKey() == indexPropertyId)\n                 {\n-                case ADDED_LABEL:\n-                    indexingService.validateBeforeCommit( index.schema(), values );\n-                    read.txState().indexDoUpdateEntry( index.schema(), node.nodeReference(), null, ValueTuple.of( values ) );\n-                    break;\n-                case REMOVED_LABEL:\n-                    read.txState().indexDoUpdateEntry( index.schema(), node.nodeReference(), ValueTuple.of( values ), null );\n-                    break;\n-                default:\n-                    throw new IllegalStateException( changeType + \" is not a supported event\" );\n+                  value = propertyCursor.propertyValue();\n                 }\n+              }\n+              valuesBefore[i] = value;\n+              valuesAfter[i] = value;\n             }\n-        }\n-    }\n-\n-    private boolean noSchemaChangedInTx()\n-    {\n-        return !(read.txState().hasChanges() && !read.txState().hasDataChanges());\n-    }\n-\n-    //PROPERTY CHANGES\n-\n-    void onPropertyAdd( NodeCursor node, PropertyCursor propertyCursor, int propertyKeyId, Value value )\n-    {\n-        assert noSchemaChangedInTx();\n-        Iterator<SchemaIndexDescriptor> indexes =\n-                storeReadLayer.indexesGetRelatedToProperty( propertyKeyId );\n-        NodeSchemaMatcher.onMatchingSchema( indexes, node, propertyCursor, propertyKeyId,\n-                ( index, propertyKeyIds ) ->\n-                {\n-                    Value[] values = getValueTuple( node, propertyCursor, propertyKeyId, value, index.schema().getPropertyIds() );\n-                    indexingService.validateBeforeCommit( index.schema(), values );\n-                    read.txState().indexDoUpdateEntry( index.schema(), node.nodeReference(), null, ValueTuple.of( values ) );\n-                } );\n-    }\n-\n-    void onPropertyRemove( NodeCursor node, PropertyCursor propertyCursor, int propertyKeyId, Value value )\n-    {\n-        assert noSchemaChangedInTx();\n-        Iterator<SchemaIndexDescriptor> indexes =\n-                storeReadLayer.indexesGetRelatedToProperty( propertyKeyId );\n-        NodeSchemaMatcher.onMatchingSchema( indexes, node, propertyCursor, propertyKeyId,\n-                ( index, propertyKeyIds ) ->\n-                {\n-                    Value[] values = getValueTuple( node, propertyCursor, propertyKeyId, value, index.schema().getPropertyIds() );\n-                    read.txState().indexDoUpdateEntry( index.schema(), node.nodeReference(), ValueTuple.of( values ), null );\n-                } );\n-    }\n-\n-    void onPropertyChange( NodeCursor node, PropertyCursor propertyCursor, int propertyKeyId,\n-            Value beforeValue, Value afterValue )\n+          }\n+          indexingService.validateBeforeCommit(index.schema(), valuesAfter);\n+          read.txState().indexDoUpdateEntry(index.schema(), node.nodeReference(),\n+              ValueTuple.of(valuesBefore), ValueTuple.of(valuesAfter));\n+        });\n+  }\n+\n+  private Value[] getValueTuple(NodeCursor node, PropertyCursor propertyCursor, int[] indexPropertyIds)\n+  {\n+    return getValueTuple(node, propertyCursor, NO_SUCH_PROPERTY_KEY, NO_VALUE, indexPropertyIds);\n+  }\n+\n+  private Value[] getValueTuple(NodeCursor node, PropertyCursor propertyCursor,\n+                                int changedPropertyKeyId, Value changedValue, int[] indexPropertyIds)\n+  {\n+    Value[] values = new Value[indexPropertyIds.length];\n+    node.properties(propertyCursor);\n+    while (propertyCursor.next())\n     {\n-        assert noSchemaChangedInTx();\n-        Iterator<SchemaIndexDescriptor> indexes = storeReadLayer.indexesGetRelatedToProperty( propertyKeyId );\n-        NodeSchemaMatcher.onMatchingSchema( indexes, node, propertyCursor, propertyKeyId,\n-                ( index, propertyKeyIds ) ->\n-                {\n-                    int[] indexPropertyIds = index.schema().getPropertyIds();\n-\n-                    Value[] valuesBefore = new Value[indexPropertyIds.length];\n-                    Value[] valuesAfter = new Value[indexPropertyIds.length];\n-                    for ( int i = 0; i < indexPropertyIds.length; i++ )\n-                    {\n-                        int indexPropertyId = indexPropertyIds[i];\n-                        if ( indexPropertyId == propertyKeyId )\n-                        {\n-                            valuesBefore[i] = beforeValue;\n-                            valuesAfter[i] = afterValue;\n-                        }\n-                        else\n-                        {\n-                            node.properties( propertyCursor );\n-                            Value value = NO_VALUE;\n-                            while ( propertyCursor.next() )\n-                            {\n-                                if ( propertyCursor.propertyKey() == indexPropertyId )\n-                                {\n-                                    value = propertyCursor.propertyValue();\n-                                }\n-                            }\n-                            valuesBefore[i] = value;\n-                            valuesAfter[i] = value;\n-                        }\n-                    }\n-                    indexingService.validateBeforeCommit( index.schema(), valuesAfter );\n-                    read.txState().indexDoUpdateEntry( index.schema(), node.nodeReference(),\n-                            ValueTuple.of( valuesBefore ), ValueTuple.of( valuesAfter ) );\n-                } );\n+      int k = ArrayUtils.indexOf(indexPropertyIds, propertyCursor.propertyKey());\n+      if (k >= 0)\n+      {\n+        values[k] = indexPropertyIds[k] == changedPropertyKeyId\n+            ? changedValue : propertyCursor.propertyValue();\n+      }\n     }\n \n-    private Value[] getValueTuple( NodeCursor node, PropertyCursor propertyCursor, int[] indexPropertyIds )\n+    if (changedPropertyKeyId != NO_SUCH_PROPERTY_KEY)\n     {\n-        return getValueTuple( node, propertyCursor, NO_SUCH_PROPERTY_KEY, NO_VALUE, indexPropertyIds );\n+      int k = ArrayUtils.indexOf(indexPropertyIds, changedPropertyKeyId);\n+      if (k >= 0)\n+      {\n+        values[k] = changedValue;\n+      }\n     }\n \n-    private Value[] getValueTuple( NodeCursor node, PropertyCursor propertyCursor,\n-            int changedPropertyKeyId, Value changedValue, int[] indexPropertyIds )\n-    {\n-        Value[] values = new Value[indexPropertyIds.length];\n-        node.properties( propertyCursor );\n-        while ( propertyCursor.next() )\n-        {\n-            int k = ArrayUtils.indexOf( indexPropertyIds, propertyCursor.propertyKey() );\n-            if ( k >= 0 )\n-            {\n-                values[k] = indexPropertyIds[k] == changedPropertyKeyId\n-                            ? changedValue : propertyCursor.propertyValue();\n-            }\n-        }\n-\n-        if ( changedPropertyKeyId != NO_SUCH_PROPERTY_KEY )\n-        {\n-            int k = ArrayUtils.indexOf( indexPropertyIds, changedPropertyKeyId );\n-            if ( k >= 0 )\n-            {\n-                values[k] = changedValue;\n-            }\n-        }\n+    return values;\n+  }\n \n-        return values;\n-    }\n-\n-    private static boolean nodeHasIndexProperties( PrimitiveIntSet nodeProperties, int[] indexPropertyIds )\n+  private static boolean nodeHasIndexProperties(PrimitiveIntSet nodeProperties, int[] indexPropertyIds)\n+  {\n+    for (int indexPropertyId : indexPropertyIds)\n     {\n-        for ( int indexPropertyId : indexPropertyIds )\n-        {\n-            if ( !nodeProperties.contains( indexPropertyId ) )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      if (!nodeProperties.contains(indexPropertyId))\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 256
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}