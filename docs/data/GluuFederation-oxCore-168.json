{
    "project_name": "GluuFederation-oxCore",
    "error_id": "168",
    "information": {
        "errors": [
            {
                "line": "33",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class LookupService implements Serializable {\n\n\tprivate static final long serialVersionUID = -3707238475653913313L;\n\n\t@Inject\n\tprivate PersistenceEntryManager persistenceEntryManager;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/168/LookupService.java\nindex e80ffe09c70..2c5d9588636 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/168/LookupService.java\n@@ -30,7 +30,7 @@ import org.gluu.util.OxConstants;\n @Named\n public class LookupService implements Serializable {\n \n-\tprivate static final long serialVersionUID = -3707238475653913313L;\n+    private static final long serialVersionUID = -3707238475653913313L;\n \n \t@Inject\n \tprivate PersistenceEntryManager persistenceEntryManager;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/168/LookupService.java\nindex e80ffe09c70..bdea4098f77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/168/LookupService.java\n@@ -30,136 +30,132 @@ import org.gluu.util.OxConstants;\n @Named\n public class LookupService implements Serializable {\n \n-\tprivate static final long serialVersionUID = -3707238475653913313L;\n-\n-\t@Inject\n-\tprivate PersistenceEntryManager persistenceEntryManager;\n-\n-\t@Inject\n-\tprivate CacheService cacheService;\n-\n-\t/**\n-\t * Returns DisplayNameEntry based on display name\n-\t *\n-\t * @param dn\n-\t *            display name\n-\t * @return DisplayNameEntry object\n-\t */\n-\tpublic DisplayNameEntry getDisplayNameEntry(String dn) throws Exception {\n-\t\tString key = \"l_\" + dn;\n-\t\tDisplayNameEntry entry = (DisplayNameEntry) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n-\t\tif (entry == null) {\n-\t\t\tentry = persistenceEntryManager.find(dn, DisplayNameEntry.class, null);\n-\n-\t\t\tcacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entry);\n-\t\t}\n-\n-\t\treturn entry;\n-\t}\n-\n-\t/**\n-\t * Returns list of DisplayNameEntry objects\n-\t *\n-\t * @param baseDn\n-\t *            base DN\n-\t * @param dns\n-\t *            list of display names to find\n-\t * @return list of DisplayNameEntry objects\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<DisplayNameEntry> getDisplayNameEntries(String baseDn, List<String> dns) {\n-\t\tList<String> inums = getInumsFromDns(dns);\n-\t\tif (inums.size() == 0) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tString key = getCompoundKey(inums);\n-\t\tList<DisplayNameEntry> entries = (List<DisplayNameEntry>) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n-\t\tif (entries == null) {\n-\t\t\tFilter searchFilter = buildInumFilter(inums);\n-\t\t\tentries = persistenceEntryManager.findEntries(baseDn, DisplayNameEntry.class, searchFilter);\n-\t\t\tcacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entries);\n-\t\t}\n-\t\treturn entries;\n-\t}\n-\n-\tpublic Filter buildInumFilter(List<String> inums) {\n-\t\tList<Filter> inumFilters = new ArrayList<Filter>(inums.size());\n-\t\tfor (String inum : inums) {\n-\t\t\tinumFilters.add(Filter.createEqualityFilter(OxConstants.INUM, inum).multiValued(false));\n-\t\t}\n-\t\treturn Filter.createORFilter(inumFilters);\n-\t}\n-\n-\tpublic List<String> getInumsFromDns(List<String> dns) {\n-\t\tList<String> inums = new ArrayList<String>();\n-\n-\t\tif (dns == null) {\n-\t\t\treturn inums;\n-\t\t}\n-\n-\t\tfor (String dn : dns) {\n-\t\t\tString inum = getInumFromDn(dn);\n-\t\t\tif (inum != null) {\n-\t\t\t\tinums.add(inum);\n-\t\t\t}\n-\t\t}\n-\n-\t\tCollections.sort(inums);\n-\n-\t\treturn inums;\n-\t}\n-\n-\tprivate String getCompoundKey(List<String> inums) {\n-\t\tStringBuilder compoundKey = new StringBuilder();\n-\t\tfor (String inum : inums) {\n-\t\t\tif (compoundKey.length() > 0) {\n-\t\t\t\tcompoundKey.append(\"_\");\n-\t\t\t} else {\n-\t\t\t\tcompoundKey.append(\"l_\");\n-\t\t\t}\n-\t\t\tcompoundKey.append(inum);\n-\t\t}\n-\n-\t\treturn compoundKey.toString();\n-\t}\n-\n-\tpublic List<DisplayNameEntry> getDisplayNameEntriesByEntries(String baseDn, List<? extends Entry> entries)\n-\t\t\tthrows Exception {\n-\t\tif (entries == null) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tList<String> dns = new ArrayList<String>(entries.size());\n-\t\tfor (Entry entry : entries) {\n-\t\t\tdns.add(entry.getDn());\n-\t\t}\n-\n-\t\treturn getDisplayNameEntries(baseDn, dns);\n-\t}\n-\n-\t/**\n-\t * Get inum from DN\n-\t *\n-\t * @param dn\n-\t *            DN\n-\t * @return Inum\n-\t */\n-\tpublic String getInumFromDn(String dn) {\n-\t\tif (dn == null) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tif (!dn.startsWith(\"inum=\")) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tint idx = dn.indexOf(\",\", 5);\n-\t\tif (idx == -1) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\treturn dn.substring(5, idx);\n-\t}\n+    private static final long serialVersionUID = -3707238475653913313L;\n+\n+    @Inject\n+    private PersistenceEntryManager persistenceEntryManager;\n+\n+    @Inject\n+    private CacheService cacheService;\n+\n+    /**\n+     * Returns DisplayNameEntry based on display name\n+     *\n+     * @param dn display name\n+     * @return DisplayNameEntry object\n+     */\n+    public DisplayNameEntry getDisplayNameEntry(String dn) throws Exception {\n+        String key = \"l_\" + dn;\n+        DisplayNameEntry entry = (DisplayNameEntry) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n+        if (entry == null) {\n+            entry = persistenceEntryManager.find(dn, DisplayNameEntry.class, null);\n+\n+            cacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entry);\n+        }\n+\n+        return entry;\n+    }\n+\n+    /**\n+     * Returns list of DisplayNameEntry objects\n+     *\n+     * @param baseDn base DN\n+     * @param dns    list of display names to find\n+     * @return list of DisplayNameEntry objects\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public List<DisplayNameEntry> getDisplayNameEntries(String baseDn, List<String> dns) {\n+        List<String> inums = getInumsFromDns(dns);\n+        if (inums.size() == 0) {\n+            return null;\n+        }\n+\n+        String key = getCompoundKey(inums);\n+        List<DisplayNameEntry> entries = (List<DisplayNameEntry>) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n+        if (entries == null) {\n+            Filter searchFilter = buildInumFilter(inums);\n+            entries = persistenceEntryManager.findEntries(baseDn, DisplayNameEntry.class, searchFilter);\n+            cacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entries);\n+        }\n+        return entries;\n+    }\n+\n+    public Filter buildInumFilter(List<String> inums) {\n+        List<Filter> inumFilters = new ArrayList<Filter>(inums.size());\n+        for (String inum : inums) {\n+            inumFilters.add(Filter.createEqualityFilter(OxConstants.INUM, inum).multiValued(false));\n+        }\n+        return Filter.createORFilter(inumFilters);\n+    }\n+\n+    public List<String> getInumsFromDns(List<String> dns) {\n+        List<String> inums = new ArrayList<String>();\n+\n+        if (dns == null) {\n+            return inums;\n+        }\n+\n+        for (String dn : dns) {\n+            String inum = getInumFromDn(dn);\n+            if (inum != null) {\n+                inums.add(inum);\n+            }\n+        }\n+\n+        Collections.sort(inums);\n+\n+        return inums;\n+    }\n+\n+    private String getCompoundKey(List<String> inums) {\n+        StringBuilder compoundKey = new StringBuilder();\n+        for (String inum : inums) {\n+            if (compoundKey.length() > 0) {\n+                compoundKey.append(\"_\");\n+            } else {\n+                compoundKey.append(\"l_\");\n+            }\n+            compoundKey.append(inum);\n+        }\n+\n+        return compoundKey.toString();\n+    }\n+\n+    public List<DisplayNameEntry> getDisplayNameEntriesByEntries(String baseDn, List<? extends Entry> entries)\n+        throws Exception {\n+        if (entries == null) {\n+            return null;\n+        }\n+\n+        List<String> dns = new ArrayList<String>(entries.size());\n+        for (Entry entry : entries) {\n+            dns.add(entry.getDn());\n+        }\n+\n+        return getDisplayNameEntries(baseDn, dns);\n+    }\n+\n+    /**\n+     * Get inum from DN\n+     *\n+     * @param dn DN\n+     * @return Inum\n+     */\n+    public String getInumFromDn(String dn) {\n+        if (dn == null) {\n+            return null;\n+        }\n+\n+        if (!dn.startsWith(\"inum=\")) {\n+            return null;\n+        }\n+\n+        int idx = dn.indexOf(\",\", 5);\n+        if (idx == -1) {\n+            return null;\n+        }\n+\n+        return dn.substring(5, idx);\n+    }\n \n }\n",
            "diff_size": 131
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/168/LookupService.java\nindex e80ffe09c70..44e6937ab9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/168/LookupService.java\n@@ -30,7 +30,7 @@ import org.gluu.util.OxConstants;\n @Named\n public class LookupService implements Serializable {\n \n-\tprivate static final long serialVersionUID = -3707238475653913313L;\n+    private static final long serialVersionUID = -3707238475653913313L;\n \n \t@Inject\n \tprivate PersistenceEntryManager persistenceEntryManager;\n@@ -46,16 +46,16 @@ public class LookupService implements Serializable {\n \t * @return DisplayNameEntry object\n \t */\n \tpublic DisplayNameEntry getDisplayNameEntry(String dn) throws Exception {\n-\t\tString key = \"l_\" + dn;\n+    String key = \"l_\" + dn;\n \t\tDisplayNameEntry entry = (DisplayNameEntry) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n \t\tif (entry == null) {\n-\t\t\tentry = persistenceEntryManager.find(dn, DisplayNameEntry.class, null);\n+    entry = persistenceEntryManager.find(dn, DisplayNameEntry.class, null);\n \n \t\t\tcacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entry);\n-\t\t}\n+    }\n \n \t\treturn entry;\n-\t}\n+    }\n \n \t/**\n \t * Returns list of DisplayNameEntry objects\n@@ -68,75 +68,74 @@ public class LookupService implements Serializable {\n \t */\n \t@SuppressWarnings(\"unchecked\")\n \tpublic List<DisplayNameEntry> getDisplayNameEntries(String baseDn, List<String> dns) {\n-\t\tList<String> inums = getInumsFromDns(dns);\n+    List<String> inums = getInumsFromDns(dns);\n \t\tif (inums.size() == 0) {\n-\t\t\treturn null;\n-\t\t}\n+    return null;\n+    }\n \n \t\tString key = getCompoundKey(inums);\n \t\tList<DisplayNameEntry> entries = (List<DisplayNameEntry>) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n \t\tif (entries == null) {\n-\t\t\tFilter searchFilter = buildInumFilter(inums);\n+    Filter searchFilter = buildInumFilter(inums);\n \t\t\tentries = persistenceEntryManager.findEntries(baseDn, DisplayNameEntry.class, searchFilter);\n \t\t\tcacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entries);\n-\t\t}\n+    }\n \t\treturn entries;\n-\t}\n+    }\n \n \tpublic Filter buildInumFilter(List<String> inums) {\n-\t\tList<Filter> inumFilters = new ArrayList<Filter>(inums.size());\n+    List<Filter> inumFilters = new ArrayList<Filter>(inums.size());\n \t\tfor (String inum : inums) {\n-\t\t\tinumFilters.add(Filter.createEqualityFilter(OxConstants.INUM, inum).multiValued(false));\n-\t\t}\n+    inumFilters.add(Filter.createEqualityFilter(OxConstants.INUM, inum).multiValued(false));\n+    }\n \t\treturn Filter.createORFilter(inumFilters);\n-\t}\n+    }\n \n \tpublic List<String> getInumsFromDns(List<String> dns) {\n-\t\tList<String> inums = new ArrayList<String>();\n+    List<String> inums = new ArrayList<String>();\n \n \t\tif (dns == null) {\n-\t\t\treturn inums;\n-\t\t}\n+    return inums;\n+    }\n \n \t\tfor (String dn : dns) {\n-\t\t\tString inum = getInumFromDn(dn);\n+    String inum = getInumFromDn(dn);\n \t\t\tif (inum != null) {\n-\t\t\t\tinums.add(inum);\n-\t\t\t}\n-\t\t}\n+    inums.add(inum);\n+    }\n+    }\n \n \t\tCollections.sort(inums);\n \n \t\treturn inums;\n-\t}\n+    }\n \n \tprivate String getCompoundKey(List<String> inums) {\n-\t\tStringBuilder compoundKey = new StringBuilder();\n+    StringBuilder compoundKey = new StringBuilder();\n \t\tfor (String inum : inums) {\n-\t\t\tif (compoundKey.length() > 0) {\n-\t\t\t\tcompoundKey.append(\"_\");\n-\t\t\t} else {\n-\t\t\t\tcompoundKey.append(\"l_\");\n-\t\t\t}\n+    if (compoundKey.length() > 0) {\n+    compoundKey.append(\"_\");\n+    } else {\n+    compoundKey.append(\"l_\");\n+    }\n \t\t\tcompoundKey.append(inum);\n-\t\t}\n+    }\n \n \t\treturn compoundKey.toString();\n-\t}\n+    }\n \n-\tpublic List<DisplayNameEntry> getDisplayNameEntriesByEntries(String baseDn, List<? extends Entry> entries)\n-\t\t\tthrows Exception {\n-\t\tif (entries == null) {\n-\t\t\treturn null;\n-\t\t}\n+\tpublic List<DisplayNameEntry> getDisplayNameEntriesByEntries(String baseDn, List<? extends Entry> entries) throws Exception {\n+    if (entries == null) {\n+    return null;\n+    }\n \n \t\tList<String> dns = new ArrayList<String>(entries.size());\n \t\tfor (Entry entry : entries) {\n-\t\t\tdns.add(entry.getDn());\n-\t\t}\n+    dns.add(entry.getDn());\n+    }\n \n \t\treturn getDisplayNameEntries(baseDn, dns);\n-\t}\n+    }\n \n \t/**\n \t * Get inum from DN\n@@ -146,20 +145,20 @@ public class LookupService implements Serializable {\n \t * @return Inum\n \t */\n \tpublic String getInumFromDn(String dn) {\n-\t\tif (dn == null) {\n-\t\t\treturn null;\n-\t\t}\n+    if (dn == null) {\n+    return null;\n+    }\n \n \t\tif (!dn.startsWith(\"inum=\")) {\n-\t\t\treturn null;\n-\t\t}\n+    return null;\n+    }\n \n \t\tint idx = dn.indexOf(\",\", 5);\n \t\tif (idx == -1) {\n-\t\t\treturn null;\n-\t\t}\n+    return null;\n+    }\n \n \t\treturn dn.substring(5, idx);\n-\t}\n+    }\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/168/LookupService.java\nindex e80ffe09c70..c9c6ea7a29f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/168/LookupService.java\n@@ -10,11 +10,9 @@ import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-\n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import org.gluu.model.DisplayNameEntry;\n import org.gluu.persist.PersistenceEntryManager;\n import org.gluu.persist.model.base.Entry;\n@@ -26,140 +24,144 @@ import org.gluu.util.OxConstants;\n  *\n  * @author Yuriy Movchan Date: 08/11/2010\n  */\n+\n+\n @ApplicationScoped\n @Named\n public class LookupService implements Serializable {\n \n-\tprivate static final long serialVersionUID = -3707238475653913313L;\n-\n-\t@Inject\n-\tprivate PersistenceEntryManager persistenceEntryManager;\n-\n-\t@Inject\n-\tprivate CacheService cacheService;\n-\n-\t/**\n-\t * Returns DisplayNameEntry based on display name\n-\t *\n-\t * @param dn\n-\t *            display name\n-\t * @return DisplayNameEntry object\n-\t */\n-\tpublic DisplayNameEntry getDisplayNameEntry(String dn) throws Exception {\n-\t\tString key = \"l_\" + dn;\n-\t\tDisplayNameEntry entry = (DisplayNameEntry) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n-\t\tif (entry == null) {\n-\t\t\tentry = persistenceEntryManager.find(dn, DisplayNameEntry.class, null);\n-\n-\t\t\tcacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entry);\n-\t\t}\n-\n-\t\treturn entry;\n-\t}\n-\n-\t/**\n-\t * Returns list of DisplayNameEntry objects\n-\t *\n-\t * @param baseDn\n-\t *            base DN\n-\t * @param dns\n-\t *            list of display names to find\n-\t * @return list of DisplayNameEntry objects\n-\t */\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<DisplayNameEntry> getDisplayNameEntries(String baseDn, List<String> dns) {\n-\t\tList<String> inums = getInumsFromDns(dns);\n-\t\tif (inums.size() == 0) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tString key = getCompoundKey(inums);\n-\t\tList<DisplayNameEntry> entries = (List<DisplayNameEntry>) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n-\t\tif (entries == null) {\n-\t\t\tFilter searchFilter = buildInumFilter(inums);\n-\t\t\tentries = persistenceEntryManager.findEntries(baseDn, DisplayNameEntry.class, searchFilter);\n-\t\t\tcacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entries);\n-\t\t}\n-\t\treturn entries;\n-\t}\n-\n-\tpublic Filter buildInumFilter(List<String> inums) {\n-\t\tList<Filter> inumFilters = new ArrayList<Filter>(inums.size());\n-\t\tfor (String inum : inums) {\n-\t\t\tinumFilters.add(Filter.createEqualityFilter(OxConstants.INUM, inum).multiValued(false));\n-\t\t}\n-\t\treturn Filter.createORFilter(inumFilters);\n-\t}\n-\n-\tpublic List<String> getInumsFromDns(List<String> dns) {\n-\t\tList<String> inums = new ArrayList<String>();\n-\n-\t\tif (dns == null) {\n-\t\t\treturn inums;\n-\t\t}\n-\n-\t\tfor (String dn : dns) {\n-\t\t\tString inum = getInumFromDn(dn);\n-\t\t\tif (inum != null) {\n-\t\t\t\tinums.add(inum);\n-\t\t\t}\n-\t\t}\n-\n-\t\tCollections.sort(inums);\n-\n-\t\treturn inums;\n-\t}\n-\n-\tprivate String getCompoundKey(List<String> inums) {\n-\t\tStringBuilder compoundKey = new StringBuilder();\n-\t\tfor (String inum : inums) {\n-\t\t\tif (compoundKey.length() > 0) {\n-\t\t\t\tcompoundKey.append(\"_\");\n-\t\t\t} else {\n-\t\t\t\tcompoundKey.append(\"l_\");\n-\t\t\t}\n-\t\t\tcompoundKey.append(inum);\n-\t\t}\n-\n-\t\treturn compoundKey.toString();\n-\t}\n-\n-\tpublic List<DisplayNameEntry> getDisplayNameEntriesByEntries(String baseDn, List<? extends Entry> entries)\n-\t\t\tthrows Exception {\n-\t\tif (entries == null) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tList<String> dns = new ArrayList<String>(entries.size());\n-\t\tfor (Entry entry : entries) {\n-\t\t\tdns.add(entry.getDn());\n-\t\t}\n-\n-\t\treturn getDisplayNameEntries(baseDn, dns);\n-\t}\n-\n-\t/**\n-\t * Get inum from DN\n-\t *\n-\t * @param dn\n-\t *            DN\n-\t * @return Inum\n-\t */\n-\tpublic String getInumFromDn(String dn) {\n-\t\tif (dn == null) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tif (!dn.startsWith(\"inum=\")) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tint idx = dn.indexOf(\",\", 5);\n-\t\tif (idx == -1) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\treturn dn.substring(5, idx);\n-\t}\n-\n-}\n+    private static final long serialVersionUID = -3707238475653913313L;\n+\n+    @Inject\n+    private PersistenceEntryManager persistenceEntryManager;\n+\n+    @Inject\n+    private CacheService cacheService;\n+\n+    /**\n+     * Returns DisplayNameEntry based on display name\n+     *\n+     * @param dn\n+     *            display name\n+     * @return DisplayNameEntry object\n+     */\n+\n+    public DisplayNameEntry getDisplayNameEntry(String dn) throws Exception {\n+        String key = \"l_\" + dn;\n+        DisplayNameEntry entry = (DisplayNameEntry) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n+        if (entry == null) {\n+            entry = persistenceEntryManager.find(dn, DisplayNameEntry.class, null);\n+            cacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entry);\n+        }\n+\n+        return entry;\n+    }\n+\n+    /**\n+     * Returns list of DisplayNameEntry objects\n+     *\n+     * @param baseDn\n+     *            base DN\n+     * @param dns\n+     *            list of display names to find\n+     * @return list of DisplayNameEntry objects\n+     */\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public List<DisplayNameEntry> getDisplayNameEntries(String baseDn, List<String> dns) {\n+        List<String> inums = getInumsFromDns(dns);\n+        if (inums.size() == 0) {\n+            return null;\n+        }\n+\n+        String key = getCompoundKey(inums);\n+        List<DisplayNameEntry> entries = (List<DisplayNameEntry>) cacheService.get(OxConstants.CACHE_LOOKUP_NAME, key);\n+        if (entries == null) {\n+            Filter searchFilter = buildInumFilter(inums);\n+            entries = persistenceEntryManager.findEntries(baseDn, DisplayNameEntry.class, searchFilter);\n+            cacheService.put(OxConstants.CACHE_LOOKUP_NAME, key, entries);\n+        }\n+\n+        return entries;\n+    }\n+\n+    public Filter buildInumFilter(List<String> inums) {\n+        List<Filter> inumFilters = new ArrayList<Filter>(inums.size());\n+        for (String inum : inums) {\n+            inumFilters.add(Filter.createEqualityFilter(OxConstants.INUM, inum).multiValued(false));\n+        }\n+\n+        return Filter.createORFilter(inumFilters);\n+    }\n+\n+    public List<String> getInumsFromDns(List<String> dns) {\n+        List<String> inums = new ArrayList<String>();\n+        if (dns == null) {\n+            return inums;\n+        }\n+\n+        for (String dn : dns) {\n+            String inum = getInumFromDn(dn);\n+            if (inum != null) {\n+                inums.add(inum);\n+            }\n+        }\n+\n+        Collections.sort(inums);\n+        return inums;\n+    }\n+\n+    private String getCompoundKey(List<String> inums) {\n+        StringBuilder compoundKey = new StringBuilder();\n+        for (String inum : inums) {\n+            if (compoundKey.length() > 0) {\n+                compoundKey.append(\"_\");\n+            } else {\n+                compoundKey.append(\"l_\");\n+            }\n+\n+            compoundKey.append(inum);\n+        }\n+\n+        return compoundKey.toString();\n+    }\n+\n+    public List<DisplayNameEntry> getDisplayNameEntriesByEntries(String baseDn, List<? extends Entry> entries) throws Exception {\n+        if (entries == null) {\n+            return null;\n+        }\n+\n+        List<String> dns = new ArrayList<String>(entries.size());\n+        for (Entry entry : entries) {\n+            dns.add(entry.getDn());\n+        }\n+\n+        return getDisplayNameEntries(baseDn, dns);\n+    }\n+\n+    /**\n+     * Get inum from DN\n+     *\n+     * @param dn\n+     *            DN\n+     * @return Inum\n+     */\n+\n+    public String getInumFromDn(String dn) {\n+        if (dn == null) {\n+            return null;\n+        }\n+\n+        if (!dn.startsWith(\"inum=\")) {\n+            return null;\n+        }\n+\n+        int idx = dn.indexOf(\",\", 5);\n+        if (idx == -1) {\n+            return null;\n+        }\n+\n+        return dn.substring(5, idx);\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 139
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/168/LookupService.java\nindex e80ffe09c70..2c5d9588636 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/168/LookupService.java\n@@ -30,7 +30,7 @@ import org.gluu.util.OxConstants;\n @Named\n public class LookupService implements Serializable {\n \n-\tprivate static final long serialVersionUID = -3707238475653913313L;\n+    private static final long serialVersionUID = -3707238475653913313L;\n \n \t@Inject\n \tprivate PersistenceEntryManager persistenceEntryManager;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/168/LookupService.java\nindex e80ffe09c70..2c5d9588636 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/168/LookupService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/168/LookupService.java\n@@ -30,7 +30,7 @@ import org.gluu.util.OxConstants;\n @Named\n public class LookupService implements Serializable {\n \n-\tprivate static final long serialVersionUID = -3707238475653913313L;\n+    private static final long serialVersionUID = -3707238475653913313L;\n \n \t@Inject\n \tprivate PersistenceEntryManager persistenceEntryManager;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}