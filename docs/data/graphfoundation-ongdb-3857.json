{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3857",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3857/ThrottlingBeanSnapshotProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3857/ThrottlingBeanSnapshotProxy.java\nindex 6f80418a855..790c465eeb3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3857/ThrottlingBeanSnapshotProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3857/ThrottlingBeanSnapshotProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.jmx.impl;\n \n import java.lang.reflect.InvocationHandler;\n@@ -38,68 +39,68 @@ import static org.neo4j.util.Preconditions.requirePositive;\n  */\n class ThrottlingBeanSnapshotProxy implements InvocationHandler\n {\n-    private final Set<Method> getters;\n-    private final Object target;\n-    private final Clock clock;\n-    private final Object lock = new Object();\n-    private final long updateInterval;\n-    private long lastUpdateTime;\n-    private Map<Method, ?> lastSnapshot;\n+  private final Set<Method> getters;\n+  private final Object target;\n+  private final Clock clock;\n+  private final Object lock = new Object();\n+  private final long updateInterval;\n+  private long lastUpdateTime;\n+  private Map<Method, ?> lastSnapshot;\n+\n+  private <T> ThrottlingBeanSnapshotProxy(Class<T> iface, T target, long updateInterval, Clock clock)\n+  {\n+    this.getters = stream(iface.getDeclaredMethods())\n+        .filter(m -> m.getReturnType() != Void.TYPE)\n+        .filter(m -> m.getParameterCount() == 0)\n+        .collect(toSet());\n+    this.target = target;\n+    this.updateInterval = updateInterval;\n+    this.clock = clock;\n+  }\n \n-    private <T> ThrottlingBeanSnapshotProxy( Class<T> iface, T target, long updateInterval, Clock clock )\n+  @Override\n+  public Object invoke(Object proxy, Method method, Object[] args) throws IllegalAccessException, InvocationTargetException\n+  {\n+    if (!getters.contains(method))\n     {\n-        this.getters = stream( iface.getDeclaredMethods() )\n-                .filter( m -> m.getReturnType() != Void.TYPE )\n-                .filter( m -> m.getParameterCount() == 0 )\n-                .collect( toSet() );\n-        this.target = target;\n-        this.updateInterval = updateInterval;\n-        this.clock = clock;\n+      return method.invoke(target, args);\n     }\n-\n-    @Override\n-    public Object invoke( Object proxy, Method method, Object[] args ) throws IllegalAccessException, InvocationTargetException\n+    synchronized (lock)\n     {\n-        if ( !getters.contains( method ) )\n-        {\n-            return method.invoke( target, args );\n-        }\n-        synchronized ( lock )\n-        {\n-            final long now = clock.millis();\n-            final long age = now - lastUpdateTime;\n-            if ( lastSnapshot == null || age >= updateInterval )\n-            {\n-                lastUpdateTime = now;\n-                lastSnapshot = takeSnapshot();\n-            }\n-            return lastSnapshot.get( method );\n-        }\n+      final long now = clock.millis();\n+      final long age = now - lastUpdateTime;\n+      if (lastSnapshot == null || age >= updateInterval)\n+      {\n+        lastUpdateTime = now;\n+        lastSnapshot = takeSnapshot();\n+      }\n+      return lastSnapshot.get(method);\n     }\n+  }\n \n-    private Map<Method, ?> takeSnapshot() throws InvocationTargetException, IllegalAccessException\n+  private Map<Method, ?> takeSnapshot() throws InvocationTargetException, IllegalAccessException\n+  {\n+    final Map<Method, Object> snapshot = new HashMap<>();\n+    for (Method getter : getters)\n     {\n-        final Map<Method, Object> snapshot = new HashMap<>();\n-        for ( Method getter : getters )\n-        {\n-            final Object value = getter.invoke( target );\n-            snapshot.put( getter, value );\n-        }\n-        return snapshot;\n+      final Object value = getter.invoke(target);\n+      snapshot.put(getter, value);\n     }\n+    return snapshot;\n+  }\n \n-    static <I, T extends I> I newThrottlingBeanSnapshotProxy( Class<I> iface, T target, long updateInterval, Clock clock )\n+  static <I, T extends I> I newThrottlingBeanSnapshotProxy(Class<I> iface, T target, long updateInterval, Clock clock)\n+  {\n+    if (updateInterval == 0)\n+    {\n+      return target;\n+    }\n+    if (!iface.isInterface())\n     {\n-        if ( updateInterval == 0 )\n-        {\n-            return target;\n-        }\n-        if ( !iface.isInterface() )\n-        {\n-            throw new IllegalArgumentException( iface + \" is not an interface\" );\n-        }\n-        requirePositive( updateInterval );\n-        final ThrottlingBeanSnapshotProxy proxy = new ThrottlingBeanSnapshotProxy( iface, target, updateInterval, clock );\n-        return iface.cast( newProxyInstance( iface.getClassLoader(), new Class[] {iface}, proxy ) );\n+      throw new IllegalArgumentException(iface + \" is not an interface\");\n     }\n+    requirePositive(updateInterval);\n+    final ThrottlingBeanSnapshotProxy proxy = new ThrottlingBeanSnapshotProxy(iface, target, updateInterval, clock);\n+    return iface.cast(newProxyInstance(iface.getClassLoader(), new Class[] {iface}, proxy));\n+  }\n }\n",
            "diff_size": 84
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3857/ThrottlingBeanSnapshotProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3857/ThrottlingBeanSnapshotProxy.java\nindex 6f80418a855..f02d55f590f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3857/ThrottlingBeanSnapshotProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3857/ThrottlingBeanSnapshotProxy.java\n@@ -48,11 +48,8 @@ class ThrottlingBeanSnapshotProxy implements InvocationHandler\n \n     private <T> ThrottlingBeanSnapshotProxy( Class<T> iface, T target, long updateInterval, Clock clock )\n     {\n-        this.getters = stream( iface.getDeclaredMethods() )\n-                .filter( m -> m.getReturnType() != Void.TYPE )\n-                .filter( m -> m.getParameterCount() == 0 )\n-                .collect( toSet() );\n-        this.target = target;\n+        this.getters = stream( iface.getDeclaredMethods() ).filter( m -> m.getReturnType() != Void.TYPE ).filter( m -> m.getParameterCount() == 0 ).collect( toSet() );\n+this.target = target;\n         this.updateInterval = updateInterval;\n         this.clock = clock;\n     }\n@@ -73,19 +70,21 @@ class ThrottlingBeanSnapshotProxy implements InvocationHandler\n                 lastUpdateTime = now;\n                 lastSnapshot = takeSnapshot();\n             }\n-            return lastSnapshot.get( method );\n+\n+return lastSnapshot.get( method );\n         }\n     }\n \n     private Map<Method, ?> takeSnapshot() throws InvocationTargetException, IllegalAccessException\n     {\n-        final Map<Method, Object> snapshot = new HashMap<>();\n+        final Map<Method,Object> snapshot = new HashMap<>();\n         for ( Method getter : getters )\n         {\n             final Object value = getter.invoke( target );\n             snapshot.put( getter, value );\n         }\n-        return snapshot;\n+\n+return snapshot;\n     }\n \n     static <I, T extends I> I newThrottlingBeanSnapshotProxy( Class<I> iface, T target, long updateInterval, Clock clock )\n@@ -94,12 +93,14 @@ class ThrottlingBeanSnapshotProxy implements InvocationHandler\n         {\n             return target;\n         }\n-        if ( !iface.isInterface() )\n+\n+if ( !iface.isInterface() )\n         {\n             throw new IllegalArgumentException( iface + \" is not an interface\" );\n         }\n-        requirePositive( updateInterval );\n+\n+requirePositive( updateInterval );\n         final ThrottlingBeanSnapshotProxy proxy = new ThrottlingBeanSnapshotProxy( iface, target, updateInterval, clock );\n-        return iface.cast( newProxyInstance( iface.getClassLoader(), new Class[] {iface}, proxy ) );\n+        return iface.cast( newProxyInstance( iface.getClassLoader(), new Class[]{iface}, proxy ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}