{
    "project_name": "zanata-zanata-platform",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "96",
                "column": "43",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "     */\n    public void sendAnonymous() {\n        String ipAddress = getClientIp(); // client ip address\n        subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n        try {\n            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/34/ContactAdminAction.java\nindex 6fa8a5fee12..a9af796729e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/34/ContactAdminAction.java\n@@ -93,8 +93,9 @@ public class ContactAdminAction implements Serializable {\n      * Send email to admin by anonymous user.\n      */\n     public void sendAnonymous() {\n-        String ipAddress = getClientIp(); // client ip address\n-        subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n+        String ipAddress = getClientIp();\n+            // client ip address\n+         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n             VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n                     ipAddress, subject, message);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "97",
                    "column": "39",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/34/ContactAdminAction.java\nindex 6fa8a5fee12..48b38c8b3f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/34/ContactAdminAction.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.action;\n \n import java.io.Serializable;\n@@ -53,87 +54,87 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n @Model\n @Transactional\n public class ContactAdminAction implements Serializable {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n-    private static final long serialVersionUID = -5891506955608084664L;\n+  private static final org.slf4j.Logger log =\n+    org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n+  private static final long serialVersionUID = -5891506955608084664L;\n \n-    @Inject\n-    @Authenticated\n-    private HAccount authenticatedAccount;\n-    @Inject\n-    private EmailService emailServiceImpl;\n-    @Inject\n-    private Messages msgs;\n-    @Inject\n-    private FacesMessages facesMessages;\n-    @Size(max = 300)\n-    private String message;\n-    private String subject;\n+  @Inject\n+  @Authenticated\n+  private HAccount authenticatedAccount;\n+  @Inject\n+  private EmailService emailServiceImpl;\n+  @Inject\n+  private Messages msgs;\n+  @Inject\n+  private FacesMessages facesMessages;\n+  @Size(max = 300)\n+  private String message;\n+  private String subject;\n \n-    /**\n-     * Send email to admin by registered user.\n-     */\n-    @CheckLoggedIn\n-    public void send() {\n-        String fromName = authenticatedAccount.getPerson().getName();\n-        String fromLoginName = authenticatedAccount.getUsername();\n-        String replyEmail = authenticatedAccount.getPerson().getEmail();\n-        subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n-        try {\n-            VelocityEmailStrategy strategy = new ContactAdminEmailStrategy(\n-                    fromLoginName, fromName, replyEmail, subject, message);\n-            facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n-        } catch (Exception e) {\n-            sendEmailFailedNotification(e, fromLoginName);\n-        }\n+  /**\n+   * Send email to admin by registered user.\n+   */\n+  @CheckLoggedIn\n+  public void send() {\n+    String fromName = authenticatedAccount.getPerson().getName();\n+    String fromLoginName = authenticatedAccount.getUsername();\n+    String replyEmail = authenticatedAccount.getPerson().getEmail();\n+    subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n+    try {\n+      VelocityEmailStrategy strategy = new ContactAdminEmailStrategy(\n+        fromLoginName, fromName, replyEmail, subject, message);\n+      facesMessages\n+        .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+    } catch (Exception e) {\n+      sendEmailFailedNotification(e, fromLoginName);\n     }\n+  }\n \n-    /**\n-     * Send email to admin by anonymous user.\n-     */\n-    public void sendAnonymous() {\n-        String ipAddress = getClientIp(); // client ip address\n-        subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n-        try {\n-            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n-                    ipAddress, subject, message);\n-            facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n-        } catch (Exception e) {\n-            sendEmailFailedNotification(e, ipAddress);\n-        }\n+  /**\n+   * Send email to admin by anonymous user.\n+   */\n+  public void sendAnonymous() {\n+    String ipAddress = getClientIp(); // client ip address\n+    subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n+    try {\n+      VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n+        ipAddress, subject, message);\n+      facesMessages\n+        .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+    } catch (Exception e) {\n+      sendEmailFailedNotification(e, ipAddress);\n     }\n+  }\n \n-    @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n-    private void sendEmailFailedNotification(Exception e, String fromName) {\n-        StringBuilder sb = new StringBuilder()\n-                .append(\"Failed to send email with subject \\'\").append(subject)\n-                .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n-                .append(fromName).append(\"\\'\");\n-        log.error(sb.toString(), e);\n-        facesMessages.addGlobal(sb.toString());\n-    }\n+  @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n+  private void sendEmailFailedNotification(Exception e, String fromName) {\n+    StringBuilder sb = new StringBuilder()\n+      .append(\"Failed to send email with subject \\'\").append(subject)\n+      .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n+      .append(fromName).append(\"\\'\");\n+    log.error(sb.toString(), e);\n+    facesMessages.addGlobal(sb.toString());\n+  }\n \n-    private String getClientIp() {\n-        HttpServletRequest request = (HttpServletRequest) FacesContext\n-                .getCurrentInstance().getExternalContext().getRequest();\n-        return HttpUtil.getClientIp(request);\n-    }\n+  private String getClientIp() {\n+    HttpServletRequest request = (HttpServletRequest) FacesContext\n+      .getCurrentInstance().getExternalContext().getRequest();\n+    return HttpUtil.getClientIp(request);\n+  }\n \n-    public String getMessage() {\n-        return this.message;\n-    }\n+  public String getMessage() {\n+    return this.message;\n+  }\n \n-    public void setMessage(final String message) {\n-        this.message = message;\n-    }\n+  public void setMessage(final String message) {\n+    this.message = message;\n+  }\n \n-    public String getSubject() {\n-        return this.subject;\n-    }\n+  public String getSubject() {\n+    return this.subject;\n+  }\n \n-    public void setSubject(final String subject) {\n-        this.subject = subject;\n-    }\n+  public void setSubject(final String subject) {\n+    this.subject = subject;\n+  }\n }\n",
            "diff_size": 75
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/34/ContactAdminAction.java\nindex 6fa8a5fee12..65288f45489 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/34/ContactAdminAction.java\n@@ -93,7 +93,8 @@ public class ContactAdminAction implements Serializable {\n      * Send email to admin by anonymous user.\n      */\n     public void sendAnonymous() {\n-        String ipAddress = getClientIp(); // client ip address\n+        String ipAddress = getClientIp();\n+// client ip address\n         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n             VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n@@ -136,4 +137,4 @@ public class ContactAdminAction implements Serializable {\n     public void setSubject(final String subject) {\n         this.subject = subject;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "94",
                    "column": "43",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/34/ContactAdminAction.java\nindex 6fa8a5fee12..b09327bd309 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/34/ContactAdminAction.java\n@@ -39,7 +39,6 @@ import org.zanata.util.HttpUtil;\n import javax.faces.context.FacesContext;\n import javax.servlet.http.HttpServletRequest;\n import javax.validation.constraints.Size;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n \n /**\n@@ -48,15 +47,15 @@ import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n  *\n  * @author Alex Eng <a href=\"mailto:aeng@redhat.com\">aeng@redhat.com</a>\n  */\n+\n+\n @Named(\"contactAdminAction\")\n @ViewScoped\n @Model\n @Transactional\n public class ContactAdminAction implements Serializable {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ContactAdminAction.class);\n     private static final long serialVersionUID = -5891506955608084664L;\n-\n     @Inject\n     @Authenticated\n     private HAccount authenticatedAccount;\n@@ -80,10 +79,8 @@ public class ContactAdminAction implements Serializable {\n         String replyEmail = authenticatedAccount.getPerson().getEmail();\n         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n-            VelocityEmailStrategy strategy = new ContactAdminEmailStrategy(\n-                    fromLoginName, fromName, replyEmail, subject, message);\n-            facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+            VelocityEmailStrategy strategy = new ContactAdminEmailStrategy(fromLoginName, fromName, replyEmail, subject, message);\n+            facesMessages.addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n         } catch (Exception e) {\n             sendEmailFailedNotification(e, fromLoginName);\n         }\n@@ -92,32 +89,27 @@ public class ContactAdminAction implements Serializable {\n     /**\n      * Send email to admin by anonymous user.\n      */\n+\n     public void sendAnonymous() {\n         String ipAddress = getClientIp(); // client ip address\n         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n-            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n-                    ipAddress, subject, message);\n-            facesMessages\n-                    .addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n+            VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(ipAddress, subject, message);\n+            facesMessages.addGlobal(emailServiceImpl.sendToAdmins(strategy, null));\n         } catch (Exception e) {\n             sendEmailFailedNotification(e, ipAddress);\n         }\n     }\n \n-    @SuppressFBWarnings({\"SLF4J_FORMAT_SHOULD_BE_CONST\"})\n+    @SuppressFBWarnings({ \"SLF4J_FORMAT_SHOULD_BE_CONST\" })\n     private void sendEmailFailedNotification(Exception e, String fromName) {\n-        StringBuilder sb = new StringBuilder()\n-                .append(\"Failed to send email with subject \\'\").append(subject)\n-                .append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\")\n-                .append(fromName).append(\"\\'\");\n+        StringBuilder sb = new StringBuilder().append(\"Failed to send email with subject \\'\").append(subject).append(\"\\' , message \\'\").append(message).append(\"\\', from \\'\").append(fromName).append(\"\\'\");\n         log.error(sb.toString(), e);\n         facesMessages.addGlobal(sb.toString());\n     }\n \n     private String getClientIp() {\n-        HttpServletRequest request = (HttpServletRequest) FacesContext\n-                .getCurrentInstance().getExternalContext().getRequest();\n+        HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\n         return HttpUtil.getClientIp(request);\n     }\n \n@@ -136,4 +128,4 @@ public class ContactAdminAction implements Serializable {\n     public void setSubject(final String subject) {\n         this.subject = subject;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "96",
                    "column": "43",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/34/ContactAdminAction.java\nindex 6fa8a5fee12..a9af796729e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/34/ContactAdminAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/34/ContactAdminAction.java\n@@ -93,8 +93,9 @@ public class ContactAdminAction implements Serializable {\n      * Send email to admin by anonymous user.\n      */\n     public void sendAnonymous() {\n-        String ipAddress = getClientIp(); // client ip address\n-        subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n+        String ipAddress = getClientIp();\n+            // client ip address\n+         subject = msgs.get(\"jsf.message.admin.inquiry.subject\");\n         try {\n             VelocityEmailStrategy strategy = new ContactAdminAnonymousEmailStrategy(\n                     ipAddress, subject, message);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff",
        "styler_random"
    ]
}