{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3036",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "70",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "134",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3036/MethodTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3036/MethodTemplate.java\nindex 4d6d3eb593a..10001840deb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3036/MethodTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3036/MethodTemplate.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen;\n \n import java.lang.reflect.Modifier;\n@@ -32,219 +33,216 @@ import static org.neo4j.codegen.TypeReference.typeReference;\n \n public class MethodTemplate\n {\n-    public static Builder method( Class<?> returnType, String name, Parameter... parameters )\n-    {\n-        return method( typeReference( returnType ), name, parameters );\n-    }\n-\n-    public static Builder method( final TypeReference returnType, final String name, Parameter... parameters )\n-    {\n-        try\n-        {\n-            return new Builder( parameters )\n-            {\n-                @Override\n-                public MethodTemplate build()\n-                {\n-                    return buildMethod( this, returnType, name );\n-                }\n-\n-                @Override\n-                MethodDeclaration.Builder declaration()\n-                {\n-                    return MethodDeclaration.method( returnType, name, parameters );\n-                }\n-            };\n-        }\n-        catch ( IllegalArgumentException | NullPointerException e )\n-        {\n-            throw new IllegalArgumentException( \"Invalid signature for \" + name + \": \" + e.getMessage(), e );\n-        }\n-    }\n-\n-    public static ConstructorBuilder constructor( Parameter... parameters )\n-    {\n-        try\n-        {\n-            return new ConstructorBuilder( parameters );\n-        }\n-        catch ( IllegalArgumentException | NullPointerException e )\n-        {\n-            throw new IllegalArgumentException( \"Invalid constructor signature: \" + e.getMessage(), e );\n-        }\n-    }\n-\n-    public static class ConstructorBuilder extends Builder\n+  public static Builder method(Class<?> returnType, String name, Parameter... parameters)\n+  {\n+    return method(typeReference(returnType), name, parameters);\n+  }\n+\n+  public static Builder method(final TypeReference returnType, final String name, Parameter... parameters)\n+  {\n+    try\n     {\n-        ConstructorBuilder( Parameter[] parameters )\n-        {\n-            super( parameters );\n-        }\n-\n-        public Builder invokeSuper()\n-        {\n-            return expression(\n-                    ExpressionTemplate.invokeSuperConstructor( new ExpressionTemplate[]{}, TypeReference.NO_TYPES ) );\n-        }\n-\n-        public Builder invokeSuper( ExpressionTemplate[] parameters, Class<?>[] parameterTypes )\n-        {\n-            TypeReference[] references = new TypeReference[parameterTypes.length];\n-            for ( int i = 0; i < parameterTypes.length; i++ )\n-            {\n-                references[i] = typeReference( parameterTypes[i] );\n-            }\n-\n-            return invokeSuper( parameters, references );\n-        }\n-\n-        public Builder invokeSuper( ExpressionTemplate[] parameters, TypeReference[] parameterTypes )\n-        {\n-            return expression( ExpressionTemplate.invokeSuperConstructor( parameters, parameterTypes ) );\n-        }\n-\n+      return new Builder(parameters)\n+      {\n         @Override\n         public MethodTemplate build()\n         {\n-            return buildConstructor( this );\n+          return buildMethod(this, returnType, name);\n         }\n \n         @Override\n         MethodDeclaration.Builder declaration()\n         {\n-            return MethodDeclaration.constructor( parameters );\n+          return MethodDeclaration.method(returnType, name, parameters);\n         }\n+      };\n+    } catch (IllegalArgumentException | NullPointerException e)\n+    {\n+      throw new IllegalArgumentException(\"Invalid signature for \" + name + \": \" + e.getMessage(), e);\n     }\n+  }\n \n-    public abstract static class Builder\n+  public static ConstructorBuilder constructor(Parameter... parameters)\n+  {\n+    try\n     {\n-        final Parameter[] parameters;\n-        private final Map<String,TypeReference> locals = new HashMap<>();\n-        private final List<Statement> statements = new ArrayList<>();\n-        private int modifiers = Modifier.PUBLIC;\n-\n-        Builder( Parameter[] parameters )\n-        {\n-            if ( parameters == null || parameters.length == 0 )\n-            {\n-                this.parameters = NO_PARAMETERS;\n-            }\n-            else\n-            {\n-                this.parameters = parameters.clone();\n-            }\n-            for ( int i = 0; i < this.parameters.length; i++ )\n-            {\n-                Parameter parameter = requireNonNull( this.parameters[i], \"Parameter \" + i );\n-                if ( null != locals.put( parameter.name(), parameter.type() ) )\n-                {\n-                    throw new IllegalArgumentException( \"Duplicate parameters named \\\"\" + parameter.name() + \"\\\".\" );\n-                }\n-            }\n-        }\n-\n-        public abstract MethodTemplate build();\n+      return new ConstructorBuilder(parameters);\n+    } catch (IllegalArgumentException | NullPointerException e)\n+    {\n+      throw new IllegalArgumentException(\"Invalid constructor signature: \" + e.getMessage(), e);\n+    }\n+  }\n \n-        public Builder expression( ExpressionTemplate expression )\n-        {\n-            statements.add( Statement.expression( expression ) );\n-            return this;\n-        }\n+  public static class ConstructorBuilder extends Builder\n+  {\n+    ConstructorBuilder(Parameter[] parameters)\n+    {\n+      super(parameters);\n+    }\n \n-        public Builder put( ExpressionTemplate target, Class<?> fieldType, String fieldName,\n-                ExpressionTemplate expression )\n-        {\n-            return put( target, typeReference( fieldType ), fieldName, expression );\n-        }\n+    public Builder invokeSuper()\n+    {\n+      return expression(\n+          ExpressionTemplate.invokeSuperConstructor(new ExpressionTemplate[] {}, TypeReference.NO_TYPES));\n+    }\n \n-        public Builder put( ExpressionTemplate target, TypeReference fieldType, String fieldName,\n-                ExpressionTemplate expression )\n-        {\n-            statements.add( Statement.put( target, Lookup.field( fieldType, fieldName ), expression ) );\n-            return this;\n-        }\n+    public Builder invokeSuper(ExpressionTemplate[] parameters, Class<?>[] parameterTypes)\n+    {\n+      TypeReference[] references = new TypeReference[parameterTypes.length];\n+      for (int i = 0; i < parameterTypes.length; i++)\n+      {\n+        references[i] = typeReference(parameterTypes[i]);\n+      }\n \n-        public Builder modiferes( int modifiers )\n-        {\n-            this.modifiers = modifiers;\n-            return this;\n-        }\n+      return invokeSuper(parameters, references);\n+    }\n \n-        public Builder returns( ExpressionTemplate value )\n-        {\n-            statements.add( Statement.returns( value ) );\n-            return this;\n-        }\n+    public Builder invokeSuper(ExpressionTemplate[] parameters, TypeReference[] parameterTypes)\n+    {\n+      return expression(ExpressionTemplate.invokeSuperConstructor(parameters, parameterTypes));\n+    }\n \n-        abstract MethodDeclaration.Builder declaration();\n+    @Override\n+    public MethodTemplate build()\n+    {\n+      return buildConstructor(this);\n     }\n \n-    public TypeReference returnType()\n+    @Override\n+    MethodDeclaration.Builder declaration()\n     {\n-        return returnType;\n+      return MethodDeclaration.constructor(parameters);\n     }\n+  }\n \n-    public String name()\n+  public abstract static class Builder\n+  {\n+    final Parameter[] parameters;\n+    private final Map<String, TypeReference> locals = new HashMap<>();\n+    private final List<Statement> statements = new ArrayList<>();\n+    private int modifiers = Modifier.PUBLIC;\n+\n+    Builder(Parameter[] parameters)\n     {\n-        return name;\n+      if (parameters == null || parameters.length == 0)\n+      {\n+        this.parameters = NO_PARAMETERS;\n+      } else\n+      {\n+        this.parameters = parameters.clone();\n+      }\n+      for (int i = 0; i < this.parameters.length; i++)\n+      {\n+        Parameter parameter = requireNonNull(this.parameters[i], \"Parameter \" + i);\n+        if (null != locals.put(parameter.name(), parameter.type()))\n+        {\n+          throw new IllegalArgumentException(\"Duplicate parameters named \\\"\" + parameter.name() + \"\\\".\");\n+        }\n+      }\n     }\n \n-    public int modifiers()\n+    public abstract MethodTemplate build();\n+\n+    public Builder expression(ExpressionTemplate expression)\n     {\n-        return modifiers;\n+      statements.add(Statement.expression(expression));\n+      return this;\n     }\n \n-    public TypeReference[] parameterTypes()\n+    public Builder put(ExpressionTemplate target, Class<?> fieldType, String fieldName,\n+                       ExpressionTemplate expression)\n     {\n-        if ( parameters.length == 0 )\n-        {\n-            return NO_TYPES;\n-        }\n-        TypeReference[] result = new TypeReference[parameters.length];\n-        for ( int i = 0; i < result.length; i++ )\n-        {\n-            result[i] = parameters[i].type();\n-        }\n-        return result;\n+      return put(target, typeReference(fieldType), fieldName, expression);\n     }\n \n-    MethodDeclaration declaration( ClassHandle handle )\n+    public Builder put(ExpressionTemplate target, TypeReference fieldType, String fieldName,\n+                       ExpressionTemplate expression)\n     {\n-        return declaration.build( handle );\n+      statements.add(Statement.put(target, Lookup.field(fieldType, fieldName), expression));\n+      return this;\n     }\n \n-    void generate( CodeBlock generator )\n+    public Builder modiferes(int modifiers)\n     {\n-        for ( Statement statement : statements )\n-        {\n-            statement.generate( generator );\n-        }\n+      this.modifiers = modifiers;\n+      return this;\n     }\n \n-    private static MethodTemplate buildMethod( Builder builder, TypeReference returnType, String name )\n+    public Builder returns(ExpressionTemplate value)\n     {\n-        return new MethodTemplate( builder, returnType, name );\n+      statements.add(Statement.returns(value));\n+      return this;\n     }\n \n-    private static MethodTemplate buildConstructor( Builder builder )\n+    abstract MethodDeclaration.Builder declaration();\n+  }\n+\n+  public TypeReference returnType()\n+  {\n+    return returnType;\n+  }\n+\n+  public String name()\n+  {\n+    return name;\n+  }\n+\n+  public int modifiers()\n+  {\n+    return modifiers;\n+  }\n+\n+  public TypeReference[] parameterTypes()\n+  {\n+    if (parameters.length == 0)\n+    {\n+      return NO_TYPES;\n+    }\n+    TypeReference[] result = new TypeReference[parameters.length];\n+    for (int i = 0; i < result.length; i++)\n     {\n-        return new MethodTemplate( builder, TypeReference.VOID, \"<init>\" );\n+      result[i] = parameters[i].type();\n     }\n+    return result;\n+  }\n \n-    private final MethodDeclaration.Builder declaration;\n-    private final Parameter[] parameters;\n-    private final Statement[] statements;\n-    private final TypeReference returnType;\n-    private final String name;\n-    private final int modifiers;\n+  MethodDeclaration declaration(ClassHandle handle)\n+  {\n+    return declaration.build(handle);\n+  }\n \n-    private MethodTemplate( Builder builder, TypeReference returnType, String name )\n+  void generate(CodeBlock generator)\n+  {\n+    for (Statement statement : statements)\n     {\n-        this.returnType = returnType;\n-        this.name = name;\n-        this.declaration = builder.declaration();\n-        this.parameters = builder.parameters;\n-        this.statements = builder.statements.toArray( new Statement[builder.statements.size()] );\n-        this.modifiers = builder.modifiers;\n+      statement.generate(generator);\n     }\n+  }\n+\n+  private static MethodTemplate buildMethod(Builder builder, TypeReference returnType, String name)\n+  {\n+    return new MethodTemplate(builder, returnType, name);\n+  }\n+\n+  private static MethodTemplate buildConstructor(Builder builder)\n+  {\n+    return new MethodTemplate(builder, TypeReference.VOID, \"<init>\");\n+  }\n+\n+  private final MethodDeclaration.Builder declaration;\n+  private final Parameter[] parameters;\n+  private final Statement[] statements;\n+  private final TypeReference returnType;\n+  private final String name;\n+  private final int modifiers;\n+\n+  private MethodTemplate(Builder builder, TypeReference returnType, String name)\n+  {\n+    this.returnType = returnType;\n+    this.name = name;\n+    this.declaration = builder.declaration();\n+    this.parameters = builder.parameters;\n+    this.statements = builder.statements.toArray(new Statement[builder.statements.size()]);\n+    this.modifiers = builder.modifiers;\n+  }\n }\n",
            "diff_size": 267
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3036/MethodTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3036/MethodTemplate.java\nindex 4d6d3eb593a..3ac6f3060fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3036/MethodTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3036/MethodTemplate.java\n@@ -83,8 +83,7 @@ public class MethodTemplate\n \n         public Builder invokeSuper()\n         {\n-            return expression(\n-                    ExpressionTemplate.invokeSuperConstructor( new ExpressionTemplate[]{}, TypeReference.NO_TYPES ) );\n+            return expression( ExpressionTemplate.invokeSuperConstructor( new ExpressionTemplate[]{}, TypeReference.NO_TYPES ) );\n         }\n \n         public Builder invokeSuper( ExpressionTemplate[] parameters, Class<?>[] parameterTypes )\n@@ -200,12 +199,14 @@ public class MethodTemplate\n         {\n             return NO_TYPES;\n         }\n-        TypeReference[] result = new TypeReference[parameters.length];\n+\n+TypeReference[] result = new TypeReference[parameters.length];\n         for ( int i = 0; i < result.length; i++ )\n         {\n             result[i] = parameters[i].type();\n         }\n-        return result;\n+\n+return result;\n     }\n \n     MethodDeclaration declaration( ClassHandle handle )\n@@ -247,4 +248,4 @@ public class MethodTemplate\n         this.statements = builder.statements.toArray( new Statement[builder.statements.size()] );\n         this.modifiers = builder.modifiers;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "62",
                    "column": "80",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "127",
                    "column": "36",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "220",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "220",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3036/MethodTemplate.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3036/MethodTemplate.java\nindex 4d6d3eb593a..bc9dbf1df66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3036/MethodTemplate.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3036/MethodTemplate.java\n@@ -24,10 +24,12 @@ import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import static java.util.Objects.requireNonNull;\n+\n import static org.neo4j.codegen.Parameter.NO_PARAMETERS;\n+\n import static org.neo4j.codegen.TypeReference.NO_TYPES;\n+\n import static org.neo4j.codegen.TypeReference.typeReference;\n \n public class MethodTemplate\n@@ -42,23 +44,22 @@ public class MethodTemplate\n         try\n         {\n             return new Builder( parameters )\n-            {\n-                @Override\n-                public MethodTemplate build()\n-                {\n-                    return buildMethod( this, returnType, name );\n-                }\n+{\n+    @Override\n+    public MethodTemplate build()\n+    {\n+        return buildMethod( this, returnType, name );\n+    }\n \n-                @Override\n-                MethodDeclaration.Builder declaration()\n-                {\n-                    return MethodDeclaration.method( returnType, name, parameters );\n-                }\n-            };\n+    @Override MethodDeclaration.Builder declaration()\n+    {\n+        return MethodDeclaration.method( returnType, name, parameters );\n+    }\n+};\n         }\n         catch ( IllegalArgumentException | NullPointerException e )\n         {\n-            throw new IllegalArgumentException( \"Invalid signature for \" + name + \": \" + e.getMessage(), e );\n+            throw new IllegalArgumentException( \"Invalid signature for \" + name+ \": \" + e.getMessage(), e );\n         }\n     }\n \n@@ -83,8 +84,7 @@ public class MethodTemplate\n \n         public Builder invokeSuper()\n         {\n-            return expression(\n-                    ExpressionTemplate.invokeSuperConstructor( new ExpressionTemplate[]{}, TypeReference.NO_TYPES ) );\n+            return expression( ExpressionTemplate.invokeSuperConstructor( new ExpressionTemplate[]{}, TypeReference.NO_TYPES ) );\n         }\n \n         public Builder invokeSuper( ExpressionTemplate[] parameters, Class<?>[] parameterTypes )\n@@ -92,7 +92,7 @@ public class MethodTemplate\n             TypeReference[] references = new TypeReference[parameterTypes.length];\n             for ( int i = 0; i < parameterTypes.length; i++ )\n             {\n-                references[i] = typeReference( parameterTypes[i] );\n+                references[i] = typeReference( parameterTypes[ i] );\n             }\n \n             return invokeSuper( parameters, references );\n@@ -109,8 +109,7 @@ public class MethodTemplate\n             return buildConstructor( this );\n         }\n \n-        @Override\n-        MethodDeclaration.Builder declaration()\n+        @Override MethodDeclaration.Builder declaration()\n         {\n             return MethodDeclaration.constructor( parameters );\n         }\n@@ -125,7 +124,7 @@ public class MethodTemplate\n \n         Builder( Parameter[] parameters )\n         {\n-            if ( parameters == null || parameters.length == 0 )\n+            if ( parameters == null|| parameters.length == 0 )\n             {\n                 this.parameters = NO_PARAMETERS;\n             }\n@@ -133,9 +132,10 @@ public class MethodTemplate\n             {\n                 this.parameters = parameters.clone();\n             }\n+\n             for ( int i = 0; i < this.parameters.length; i++ )\n             {\n-                Parameter parameter = requireNonNull( this.parameters[i], \"Parameter \" + i );\n+                Parameter parameter = requireNonNull( this.parameters[ i], \"Parameter \" + i );\n                 if ( null != locals.put( parameter.name(), parameter.type() ) )\n                 {\n                     throw new IllegalArgumentException( \"Duplicate parameters named \\\"\" + parameter.name() + \"\\\".\" );\n@@ -143,7 +143,8 @@ public class MethodTemplate\n             }\n         }\n \n-        public abstract MethodTemplate build();\n+        public abstract MethodTemplate build()\n+        ;\n \n         public Builder expression( ExpressionTemplate expression )\n         {\n@@ -151,14 +152,12 @@ public class MethodTemplate\n             return this;\n         }\n \n-        public Builder put( ExpressionTemplate target, Class<?> fieldType, String fieldName,\n-                ExpressionTemplate expression )\n+        public Builder put( ExpressionTemplate target, Class<?> fieldType, String fieldName, ExpressionTemplate expression )\n         {\n             return put( target, typeReference( fieldType ), fieldName, expression );\n         }\n \n-        public Builder put( ExpressionTemplate target, TypeReference fieldType, String fieldName,\n-                ExpressionTemplate expression )\n+        public Builder put( ExpressionTemplate target, TypeReference fieldType, String fieldName, ExpressionTemplate expression )\n         {\n             statements.add( Statement.put( target, Lookup.field( fieldType, fieldName ), expression ) );\n             return this;\n@@ -176,7 +175,8 @@ public class MethodTemplate\n             return this;\n         }\n \n-        abstract MethodDeclaration.Builder declaration();\n+        abstract MethodDeclaration.Builder declaration()\n+        ;\n     }\n \n     public TypeReference returnType()\n@@ -200,11 +200,13 @@ public class MethodTemplate\n         {\n             return NO_TYPES;\n         }\n+\n         TypeReference[] result = new TypeReference[parameters.length];\n         for ( int i = 0; i < result.length; i++ )\n         {\n-            result[i] = parameters[i].type();\n+            result[i] = parameters[ i].type();\n         }\n+\n         return result;\n     }\n \n@@ -215,7 +217,7 @@ public class MethodTemplate\n \n     void generate( CodeBlock generator )\n     {\n-        for ( Statement statement : statements )\n+        for( Statement statement : statements)\n         {\n             statement.generate( generator );\n         }\n@@ -247,4 +249,4 @@ public class MethodTemplate\n         this.statements = builder.statements.toArray( new Statement[builder.statements.size()] );\n         this.modifiers = builder.modifiers;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}