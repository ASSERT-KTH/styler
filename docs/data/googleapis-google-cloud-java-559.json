{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "559",
    "information": {
        "errors": [
            {
                "line": "451",
                "severity": "warning",
                "message": "'method def modifier' has incorrect indentation level 4, expected level should be 2.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "  }\n\n    @Test\n  public void testCopy() throws Exception {\n    Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n    Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/559/CloudStorageFileSystemProviderTest.java\nindex 6411a96a0a2..adf8270a1c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/559/CloudStorageFileSystemProviderTest.java\n@@ -448,7 +448,7 @@ public class CloudStorageFileSystemProviderTest {\n     }\n   }\n \n-    @Test\n+  @Test\n   public void testCopy() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/559/CloudStorageFileSystemProviderTest.java\nindex 6411a96a0a2..ee91c9d8693 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/559/CloudStorageFileSystemProviderTest.java\n@@ -86,7 +86,8 @@ public class CloudStorageFileSystemProviderTest {\n \n   private static final String SINGULARITY = \"A string\";\n \n-  @Rule public final ExpectedException thrown = ExpectedException.none();\n+  @Rule\n+  public final ExpectedException thrown = ExpectedException.none();\n \n   @Before\n   public void before() {\n@@ -329,8 +330,9 @@ public class CloudStorageFileSystemProviderTest {\n   @Test\n   public void testWrite_absoluteObjectName_disableStrip_slashGetsPreserved() throws Exception {\n     try (CloudStorageFileSystem fs =\n-            forBucket(\n-                \"greenbean\", CloudStorageConfiguration.builder().stripPrefixSlash(false).build())) {\n+             forBucket(\n+                 \"greenbean\",\n+                 CloudStorageConfiguration.builder().stripPrefixSlash(false).build())) {\n       Path path = fs.getPath(\"/adipose/yep\");\n       Files.write(path, FILE_CONTENTS, UTF_8);\n       assertThat(Files.readAllLines(path, UTF_8)).isEqualTo(FILE_CONTENTS);\n@@ -390,7 +392,7 @@ public class CloudStorageFileSystemProviderTest {\n   }\n \n   @Test\n-  public void testExists_trailingSlash_disablePseudoDirectories() throws Exception  {\n+  public void testExists_trailingSlash_disablePseudoDirectories() throws Exception {\n     try (CloudStorageFileSystem fs = forBucket(\"military\", usePseudoDirectories(false))) {\n       assertThat(Files.exists(fs.getPath(\"fashion/\"))).isFalse();\n     }\n@@ -448,7 +450,7 @@ public class CloudStorageFileSystemProviderTest {\n     }\n   }\n \n-    @Test\n+  @Test\n   public void testCopy() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n@@ -549,7 +551,7 @@ public class CloudStorageFileSystemProviderTest {\n   }\n \n   @Test\n-  public void testIsDirectory_trailingSlash_pseudoDirectoriesDisabled_false() throws Exception  {\n+  public void testIsDirectory_trailingSlash_pseudoDirectoriesDisabled_false() throws Exception {\n     try (CloudStorageFileSystem fs = forBucket(\"doodle\", usePseudoDirectories(false))) {\n       assertThat(Files.isDirectory(fs.getPath(\"fundir/\"))).isFalse();\n     }\n@@ -650,7 +652,7 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testNewFileSystem() throws Exception {\n-    Map<String,String> env = new HashMap<>();\n+    Map<String, String> env = new HashMap<>();\n     FileSystems.newFileSystem(URI.create(\"gs://bucket/path/to/file\"), env);\n   }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 767).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "316",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "433",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/559/CloudStorageFileSystemProviderTest.java\nindex 6411a96a0a2..fc052785152 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/559/CloudStorageFileSystemProviderTest.java\n@@ -65,26 +65,9 @@ public class CloudStorageFileSystemProviderTest {\n \n   private static final List<String> FILE_CONTENTS =\n       ImmutableList.of(\n-          \"Fanatics have their dreams, wherewith they weave\",\n-          \"A paradise for a sect; the savage too\",\n-          \"From forth the loftiest fashion of his sleep\",\n-          \"Guesses at Heaven; pity these have not\",\n-          \"Trac'd upon vellum or wild Indian leaf\",\n-          \"The shadows of melodious utterance.\",\n-          \"But bare of laurel they live, dream, and die;\",\n-          \"For Poesy alone can tell her dreams,\",\n-          \"With the fine spell of words alone can save\",\n-          \"Imagination from the sable charm\",\n-          \"And dumb enchantment. Who alive can say,\",\n-          \"'Thou art no Poet may'st not tell thy dreams?'\",\n-          \"Since every man whose soul is not a clod\",\n-          \"Hath visions, and would speak, if he had loved\",\n-          \"And been well nurtured in his mother tongue.\",\n-          \"Whether the dream now purpos'd to rehearse\",\n-          \"Be poet's or fanatic's will be known\",\n+          \"Fanatics have their dreams, wherewith they weave\", \"A paradise for a sect; the savage too\", \"From forth the loftiest fashion of his sleep\", \"Guesses at Heaven; pity these have not\", \"Trac'd upon vellum or wild Indian leaf\", \"The shadows of melodious utterance.\", \"But bare of laurel they live, dream, and die;\", \"For Poesy alone can tell her dreams,\", \"With the fine spell of words alone can save\", \"Imagination from the sable charm\", \"And dumb enchantment. Who alive can say,\", \"'Thou art no Poet may'st not tell thy dreams?'\", \"Since every man whose soul is not a clod\", \"Hath visions, and would speak, if he had loved\", \"And been well nurtured in his mother tongue.\", \"Whether the dream now purpos'd to rehearse\", \"Be poet's or fanatic's will be known\",\n           \"When this warm scribe my hand is in the grave.\");\n-\n-  private static final String SINGULARITY = \"A string\";\n+    private static final String SINGULARITY = \"A string\";\n \n   @Rule public final ExpectedException thrown = ExpectedException.none();\n \n@@ -328,10 +311,9 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testWrite_absoluteObjectName_disableStrip_slashGetsPreserved() throws Exception {\n-    try (CloudStorageFileSystem fs =\n-            forBucket(\n+    try (CloudStorageFileSystem fs = forBucket(\n                 \"greenbean\", CloudStorageConfiguration.builder().stripPrefixSlash(false).build())) {\n-      Path path = fs.getPath(\"/adipose/yep\");\n+  Path path = fs.getPath(\"/adipose/yep\");\n       Files.write(path, FILE_CONTENTS, UTF_8);\n       assertThat(Files.readAllLines(path, UTF_8)).isEqualTo(FILE_CONTENTS);\n       assertThat(Files.exists(path)).isTrue();\n@@ -390,7 +372,7 @@ public class CloudStorageFileSystemProviderTest {\n   }\n \n   @Test\n-  public void testExists_trailingSlash_disablePseudoDirectories() throws Exception  {\n+  public void testExists_trailingSlash_disablePseudoDirectories() throws Exception {\n     try (CloudStorageFileSystem fs = forBucket(\"military\", usePseudoDirectories(false))) {\n       assertThat(Files.exists(fs.getPath(\"fashion/\"))).isFalse();\n     }\n@@ -448,8 +430,8 @@ public class CloudStorageFileSystemProviderTest {\n     }\n   }\n \n-    @Test\n-  public void testCopy() throws Exception {\n+@Test\n+public void testCopy() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n     Files.write(source, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8));\n@@ -549,7 +531,7 @@ public class CloudStorageFileSystemProviderTest {\n   }\n \n   @Test\n-  public void testIsDirectory_trailingSlash_pseudoDirectoriesDisabled_false() throws Exception  {\n+  public void testIsDirectory_trailingSlash_pseudoDirectoriesDisabled_false() throws Exception {\n     try (CloudStorageFileSystem fs = forBucket(\"doodle\", usePseudoDirectories(false))) {\n       assertThat(Files.isDirectory(fs.getPath(\"fundir/\"))).isFalse();\n     }\n@@ -559,8 +541,7 @@ public class CloudStorageFileSystemProviderTest {\n   public void testCopy_withCopyAttributes_preservesAttributes() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n-    Files.write(\n-        source,\n+    Files.write(source,\n         \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n         CloudStorageOptions.withMimeType(\"text/lolcat\"),\n         CloudStorageOptions.withCacheControl(\"public; max-age=666\"),\n@@ -583,8 +564,7 @@ public class CloudStorageFileSystemProviderTest {\n   public void testCopy_withoutOptions_doesntPreservesAttributes() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n-    Files.write(\n-        source,\n+    Files.write(source,\n         \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n         CloudStorageOptions.withMimeType(\"text/lolcat\"),\n         CloudStorageOptions.withCacheControl(\"public; max-age=666\"),\n@@ -605,8 +585,7 @@ public class CloudStorageFileSystemProviderTest {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target1 = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n     Path target2 = Paths.get(URI.create(\"gs://greenbean/round\"));\n-    Files.write(\n-        source,\n+    Files.write(source,\n         \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n         CloudStorageOptions.withMimeType(\"text/lolcat\"),\n         CloudStorageOptions.withCacheControl(\"public; max-age=666\"));\n@@ -650,7 +629,7 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testNewFileSystem() throws Exception {\n-    Map<String,String> env = new HashMap<>();\n+    Map<String, String> env = new HashMap<>();\n     FileSystems.newFileSystem(URI.create(\"gs://bucket/path/to/file\"), env);\n   }\n \n@@ -661,7 +640,9 @@ public class CloudStorageFileSystemProviderTest {\n     Path path1 = Paths.get(URI.create(\"gs://bucket/with/a%20space\"));\n     CloudStorageFileSystemProvider provider =\n         (CloudStorageFileSystemProvider) path1.getFileSystem().provider();\n-    // Traditional way 2: use UrlEscapers.urlFragmentEscaper().escape\n+\n+\n+// Traditional way 2: use UrlEscapers.urlFragmentEscaper().escape\n     // to escape the string for you.\n     // (Not tested because UrlEscapers isn't the unit under test).\n \n@@ -684,4 +665,4 @@ public class CloudStorageFileSystemProviderTest {\n   private static CloudStorageConfiguration usePseudoDirectories(boolean value) {\n     return CloudStorageConfiguration.builder().usePseudoDirectories(value).build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 877).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "464",
                    "severity": "warning",
                    "message": "'Paths' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "561",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 338).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "563",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "576",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "578",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "591",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "594",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "639",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/559/CloudStorageFileSystemProviderTest.java\nindex 6411a96a0a2..baef3097332 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/559/CloudStorageFileSystemProviderTest.java\n@@ -29,14 +29,12 @@ import static java.nio.file.StandardOpenOption.WRITE;\n \n import com.google.common.collect.ImmutableList;\n import com.google.common.testing.NullPointerTester;\n-\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n import org.junit.runners.JUnit4;\n-\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.net.URI;\n@@ -60,33 +58,16 @@ import java.util.Map;\n /**\n  * Unit tests for {@link CloudStorageFileSystemProvider}.\n  */\n+\n+\n @RunWith(JUnit4.class)\n public class CloudStorageFileSystemProviderTest {\n \n-  private static final List<String> FILE_CONTENTS =\n-      ImmutableList.of(\n-          \"Fanatics have their dreams, wherewith they weave\",\n-          \"A paradise for a sect; the savage too\",\n-          \"From forth the loftiest fashion of his sleep\",\n-          \"Guesses at Heaven; pity these have not\",\n-          \"Trac'd upon vellum or wild Indian leaf\",\n-          \"The shadows of melodious utterance.\",\n-          \"But bare of laurel they live, dream, and die;\",\n-          \"For Poesy alone can tell her dreams,\",\n-          \"With the fine spell of words alone can save\",\n-          \"Imagination from the sable charm\",\n-          \"And dumb enchantment. Who alive can say,\",\n-          \"'Thou art no Poet may'st not tell thy dreams?'\",\n-          \"Since every man whose soul is not a clod\",\n-          \"Hath visions, and would speak, if he had loved\",\n-          \"And been well nurtured in his mother tongue.\",\n-          \"Whether the dream now purpos'd to rehearse\",\n-          \"Be poet's or fanatic's will be known\",\n-          \"When this warm scribe my hand is in the grave.\");\n-\n+  private static final List<String> FILE_CONTENTS = ImmutableList.of(\"Fanatics have their dreams, wherewith they weave\", \"A paradise for a sect; the savage too\", \"From forth the loftiest fashion of his sleep\", \"Guesses at Heaven; pity these have not\", \"Trac'd upon vellum or wild Indian leaf\", \"The shadows of melodious utterance.\", \"But bare of laurel they live, dream, and die;\", \"For Poesy alone can tell her dreams,\", \"With the fine spell of words alone can save\", \"Imagination from the sable charm\", \"And dumb enchantment. Who alive can say,\", \"'Thou art no Poet may'st not tell thy dreams?'\", \"Since every man whose soul is not a clod\", \"Hath visions, and would speak, if he had loved\", \"And been well nurtured in his mother tongue.\", \"Whether the dream now purpos'd to rehearse\", \"Be poet's or fanatic's will be known\", \"When this warm scribe my hand is in the grave.\");\n   private static final String SINGULARITY = \"A string\";\n \n-  @Rule public final ExpectedException thrown = ExpectedException.none();\n+  @Rule\n+  public final ExpectedException thrown = ExpectedException.none();\n \n   @Before\n   public void before() {\n@@ -107,7 +88,8 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testSize_trailingSlash_disablePseudoDirectories() throws Exception {\n-    try (CloudStorageFileSystem fs = forBucket(\"doodle\", usePseudoDirectories(false))) {\n+    try (CloudStorageFileSystem fs =\n+      forBucket(\"doodle\", usePseudoDirectories(false))) {\n       Path path = fs.getPath(\"wat/\");\n       byte[] rapture = SINGULARITY.getBytes(UTF_8);\n       Files.write(path, rapture);\n@@ -133,7 +115,8 @@ public class CloudStorageFileSystemProviderTest {\n     Path path = Paths.get(URI.create(\"gs://bucket/wat\"));\n     byte[] data = SINGULARITY.getBytes(UTF_8);\n     Files.write(path, data);\n-    try (ReadableByteChannel input = Files.newByteChannel(path)) {\n+    try (ReadableByteChannel input =\n+      Files.newByteChannel(path)) {\n       ByteBuffer buffer = ByteBuffer.allocate(data.length);\n       assertThat(input.read(buffer)).isEqualTo(data.length);\n       assertThat(new String(buffer.array(), UTF_8)).isEqualTo(SINGULARITY);\n@@ -146,7 +129,8 @@ public class CloudStorageFileSystemProviderTest {\n   public void testNewByteChannelRead_seeking() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://lol/cat\"));\n     Files.write(path, \"helloworld\".getBytes(UTF_8));\n-    try (SeekableByteChannel input = Files.newByteChannel(path)) {\n+    try (SeekableByteChannel input =\n+      Files.newByteChannel(path)) {\n       ByteBuffer buffer = ByteBuffer.allocate(5);\n       input.position(5);\n       assertThat(input.position()).isEqualTo(5);\n@@ -167,7 +151,8 @@ public class CloudStorageFileSystemProviderTest {\n   public void testNewByteChannelRead_seekBeyondSize_reportsEofOnNextRead() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://lol/cat\"));\n     Files.write(path, \"hellocat\".getBytes(UTF_8));\n-    try (SeekableByteChannel input = Files.newByteChannel(path)) {\n+    try (SeekableByteChannel input =\n+      Files.newByteChannel(path)) {\n       ByteBuffer buffer = ByteBuffer.allocate(5);\n       input.position(10);\n       assertThat(input.read(buffer)).isEqualTo(-1);\n@@ -194,7 +179,8 @@ public class CloudStorageFileSystemProviderTest {\n   @Test\n   public void testNewByteChannelWrite() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://bucket/tests\"));\n-    try (SeekableByteChannel output = Files.newByteChannel(path, WRITE)) {\n+    try (SeekableByteChannel output =\n+      Files.newByteChannel(path, WRITE)) {\n       assertThat(output.position()).isEqualTo(0);\n       assertThat(output.size()).isEqualTo(0);\n       ByteBuffer buffer = ByteBuffer.wrap(\"filec\".getBytes(UTF_8));\n@@ -213,7 +199,8 @@ public class CloudStorageFileSystemProviderTest {\n   public void testNewInputStream() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://bucket/wat\"));\n     Files.write(path, SINGULARITY.getBytes(UTF_8));\n-    try (InputStream input = Files.newInputStream(path)) {\n+    try (InputStream input =\n+      Files.newInputStream(path)) {\n       byte[] data = new byte[SINGULARITY.getBytes(UTF_8).length];\n       input.read(data);\n       assertThat(new String(data, UTF_8)).isEqualTo(SINGULARITY);\n@@ -224,7 +211,8 @@ public class CloudStorageFileSystemProviderTest {\n   public void testNewInputStream_trailingSlash() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://bucket/wat/\"));\n     thrown.expect(CloudStoragePseudoDirectoryException.class);\n-    try (InputStream input = Files.newInputStream(path)) {\n+    try (InputStream input =\n+      Files.newInputStream(path)) {\n       input.read();\n     }\n   }\n@@ -233,7 +221,8 @@ public class CloudStorageFileSystemProviderTest {\n   public void testNewInputStream_notFound() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://cry/wednesday\"));\n     thrown.expect(NoSuchFileException.class);\n-    try (InputStream input = Files.newInputStream(path)) {\n+    try (InputStream input =\n+      Files.newInputStream(path)) {\n       input.read();\n     }\n   }\n@@ -242,7 +231,8 @@ public class CloudStorageFileSystemProviderTest {\n   public void testNewOutputStream() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://bucket/wat\"));\n     Files.write(path, SINGULARITY.getBytes(UTF_8));\n-    try (OutputStream output = Files.newOutputStream(path)) {\n+    try (OutputStream output =\n+      Files.newOutputStream(path)) {\n       output.write(SINGULARITY.getBytes(UTF_8));\n     }\n     assertThat(new String(Files.readAllBytes(path), UTF_8)).isEqualTo(SINGULARITY);\n@@ -253,7 +243,8 @@ public class CloudStorageFileSystemProviderTest {\n     Path path = Paths.get(URI.create(\"gs://bucket/wat\"));\n     Files.write(path, SINGULARITY.getBytes(UTF_8));\n     Files.write(path, \"hello\".getBytes(UTF_8));\n-    try (OutputStream output = Files.newOutputStream(path)) {\n+    try (OutputStream output =\n+      Files.newOutputStream(path)) {\n       output.write(SINGULARITY.getBytes(UTF_8));\n     }\n     assertThat(new String(Files.readAllBytes(path), UTF_8)).isEqualTo(SINGULARITY);\n@@ -264,7 +255,8 @@ public class CloudStorageFileSystemProviderTest {\n     Path path = Paths.get(URI.create(\"gs://bucket/wat\"));\n     Files.write(path, SINGULARITY.getBytes(UTF_8));\n     Files.write(path, \"hello\".getBytes(UTF_8));\n-    try (OutputStream output = Files.newOutputStream(path, TRUNCATE_EXISTING)) {\n+    try (OutputStream output =\n+      Files.newOutputStream(path, TRUNCATE_EXISTING)) {\n       output.write(SINGULARITY.getBytes(UTF_8));\n     }\n     assertThat(new String(Files.readAllBytes(path), UTF_8)).isEqualTo(SINGULARITY);\n@@ -300,7 +292,8 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testWrite_objectNameWithExtraSlashes_canBeNormalized() throws Exception {\n-    try (CloudStorageFileSystem fs = forBucket(\"greenbean\", permitEmptyPathComponents(false))) {\n+    try (CloudStorageFileSystem fs =\n+      forBucket(\"greenbean\", permitEmptyPathComponents(false))) {\n       Path path = fs.getPath(\"adipose//yep\").normalize();\n       Files.write(path, FILE_CONTENTS, UTF_8);\n       assertThat(Files.readAllLines(path, UTF_8)).isEqualTo(FILE_CONTENTS);\n@@ -310,7 +303,8 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testWrite_objectNameWithExtraSlashes_permitEmptyPathComponents() throws Exception {\n-    try (CloudStorageFileSystem fs = forBucket(\"greenbean\", permitEmptyPathComponents(true))) {\n+    try (CloudStorageFileSystem fs =\n+      forBucket(\"greenbean\", permitEmptyPathComponents(true))) {\n       Path path = fs.getPath(\"adipose//yep\");\n       Files.write(path, FILE_CONTENTS, UTF_8);\n       assertThat(Files.readAllLines(path, UTF_8)).isEqualTo(FILE_CONTENTS);\n@@ -329,8 +323,7 @@ public class CloudStorageFileSystemProviderTest {\n   @Test\n   public void testWrite_absoluteObjectName_disableStrip_slashGetsPreserved() throws Exception {\n     try (CloudStorageFileSystem fs =\n-            forBucket(\n-                \"greenbean\", CloudStorageConfiguration.builder().stripPrefixSlash(false).build())) {\n+      forBucket(\"greenbean\", CloudStorageConfiguration.builder().stripPrefixSlash(false).build())) {\n       Path path = fs.getPath(\"/adipose/yep\");\n       Files.write(path, FILE_CONTENTS, UTF_8);\n       assertThat(Files.readAllLines(path, UTF_8)).isEqualTo(FILE_CONTENTS);\n@@ -348,7 +341,8 @@ public class CloudStorageFileSystemProviderTest {\n   @Test\n   public void testWriteOnClose() throws Exception {\n     Path path = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n-    try (SeekableByteChannel chan = Files.newByteChannel(path, WRITE)) {\n+    try (SeekableByteChannel chan =\n+      Files.newByteChannel(path, WRITE)) {\n       // writing lots of contents to defeat channel-internal buffering.\n       for (int i = 0; i < 9999; i++) {\n         for (String s : FILE_CONTENTS) {\n@@ -362,6 +356,7 @@ public class CloudStorageFileSystemProviderTest {\n         assertThat(false).isTrue();\n       } catch (NoSuchFileException nsf) {\n         // that's what we wanted, we're good.\n+\n       }\n     }\n     // channel now closed, the file should be there and with the new contents.\n@@ -390,8 +385,9 @@ public class CloudStorageFileSystemProviderTest {\n   }\n \n   @Test\n-  public void testExists_trailingSlash_disablePseudoDirectories() throws Exception  {\n-    try (CloudStorageFileSystem fs = forBucket(\"military\", usePseudoDirectories(false))) {\n+  public void testExists_trailingSlash_disablePseudoDirectories() throws Exception {\n+    try (CloudStorageFileSystem fs =\n+      forBucket(\"military\", usePseudoDirectories(false))) {\n       assertThat(Files.exists(fs.getPath(\"fashion/\"))).isFalse();\n     }\n   }\n@@ -417,7 +413,8 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testDelete_trailingSlash_disablePseudoDirectories() throws Exception {\n-    try (CloudStorageFileSystem fs = forBucket(\"pumpkin\", usePseudoDirectories(false))) {\n+    try (CloudStorageFileSystem fs =\n+      forBucket(\"pumpkin\", usePseudoDirectories(false))) {\n       Path path = fs.getPath(\"wat/\");\n       Files.write(path, FILE_CONTENTS, UTF_8);\n       assertThat(Files.exists(path));\n@@ -442,13 +439,14 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testDeleteIfExists_trailingSlash_disablePseudoDirectories() throws Exception {\n-    try (CloudStorageFileSystem fs = forBucket(\"doodle\", usePseudoDirectories(false))) {\n+    try (CloudStorageFileSystem fs =\n+      forBucket(\"doodle\", usePseudoDirectories(false))) {\n       // Doesn't exist, no error\n       Files.deleteIfExists(Paths.get(URI.create(\"gs://love/passion/\")));\n     }\n   }\n \n-    @Test\n+  @Test\n   public void testCopy() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n@@ -462,9 +460,8 @@ public class CloudStorageFileSystemProviderTest {\n   @Test\n   public void testCopy_sourceMissing_throwsNoSuchFileException() throws Exception {\n     thrown.expect(NoSuchFileException.class);\n-    Files.copy(\n-        Paths.get(URI.create(\"gs://military/fashion.show\")),\n-        Paths.get(URI.create(\"gs://greenbean/adipose\")));\n+    Files.copy(Paths.get(URI.create(\"gs://military/fashion.show\")),\n+      Paths.get(URI.create(\"gs://greenbean/adipose\")));\n   }\n \n   @Test\n@@ -531,7 +528,8 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testIsDirectory() throws Exception {\n-    try (FileSystem fs = FileSystems.getFileSystem(URI.create(\"gs://doodle\"))) {\n+    try (FileSystem fs =\n+      FileSystems.getFileSystem(URI.create(\"gs://doodle\"))) {\n       assertThat(Files.isDirectory(fs.getPath(\"\"))).isTrue();\n       assertThat(Files.isDirectory(fs.getPath(\"/\"))).isTrue();\n       assertThat(Files.isDirectory(fs.getPath(\".\"))).isTrue();\n@@ -549,8 +547,9 @@ public class CloudStorageFileSystemProviderTest {\n   }\n \n   @Test\n-  public void testIsDirectory_trailingSlash_pseudoDirectoriesDisabled_false() throws Exception  {\n-    try (CloudStorageFileSystem fs = forBucket(\"doodle\", usePseudoDirectories(false))) {\n+  public void testIsDirectory_trailingSlash_pseudoDirectoriesDisabled_false() throws Exception {\n+    try (CloudStorageFileSystem fs =\n+      forBucket(\"doodle\", usePseudoDirectories(false))) {\n       assertThat(Files.isDirectory(fs.getPath(\"fundir/\"))).isFalse();\n     }\n   }\n@@ -559,18 +558,9 @@ public class CloudStorageFileSystemProviderTest {\n   public void testCopy_withCopyAttributes_preservesAttributes() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n-    Files.write(\n-        source,\n-        \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n-        CloudStorageOptions.withMimeType(\"text/lolcat\"),\n-        CloudStorageOptions.withCacheControl(\"public; max-age=666\"),\n-        CloudStorageOptions.withContentEncoding(\"foobar\"),\n-        CloudStorageOptions.withContentDisposition(\"my-content-disposition\"),\n-        CloudStorageOptions.withUserMetadata(\"answer\", \"42\"));\n+    Files.write(source, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withMimeType(\"text/lolcat\"), CloudStorageOptions.withCacheControl(\"public; max-age=666\"), CloudStorageOptions.withContentEncoding(\"foobar\"), CloudStorageOptions.withContentDisposition(\"my-content-disposition\"), CloudStorageOptions.withUserMetadata(\"answer\", \"42\"));\n     Files.copy(source, target, COPY_ATTRIBUTES);\n-\n-    CloudStorageFileAttributes attributes =\n-        Files.readAttributes(target, CloudStorageFileAttributes.class);\n+    CloudStorageFileAttributes attributes = Files.readAttributes(target, CloudStorageFileAttributes.class);\n     assertThat(attributes.mimeType()).hasValue(\"text/lolcat\");\n     assertThat(attributes.cacheControl()).hasValue(\"public; max-age=666\");\n     assertThat(attributes.contentEncoding()).hasValue(\"foobar\");\n@@ -583,16 +573,9 @@ public class CloudStorageFileSystemProviderTest {\n   public void testCopy_withoutOptions_doesntPreservesAttributes() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n-    Files.write(\n-        source,\n-        \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n-        CloudStorageOptions.withMimeType(\"text/lolcat\"),\n-        CloudStorageOptions.withCacheControl(\"public; max-age=666\"),\n-        CloudStorageOptions.withUserMetadata(\"answer\", \"42\"));\n+    Files.write(source, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withMimeType(\"text/lolcat\"), CloudStorageOptions.withCacheControl(\"public; max-age=666\"), CloudStorageOptions.withUserMetadata(\"answer\", \"42\"));\n     Files.copy(source, target);\n-\n-    CloudStorageFileAttributes attributes =\n-        Files.readAttributes(target, CloudStorageFileAttributes.class);\n+    CloudStorageFileAttributes attributes = Files.readAttributes(target, CloudStorageFileAttributes.class);\n     String mimeType = attributes.mimeType().orNull();\n     String cacheControl = attributes.cacheControl().orNull();\n     assertThat(mimeType).isNotEqualTo(\"text/lolcat\");\n@@ -605,19 +588,12 @@ public class CloudStorageFileSystemProviderTest {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target1 = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n     Path target2 = Paths.get(URI.create(\"gs://greenbean/round\"));\n-    Files.write(\n-        source,\n-        \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8),\n-        CloudStorageOptions.withMimeType(\"text/lolcat\"),\n-        CloudStorageOptions.withCacheControl(\"public; max-age=666\"));\n+    Files.write(source, \"(\u273f\u25d5 \u203f\u25d5 )\u30ce\".getBytes(UTF_8), CloudStorageOptions.withMimeType(\"text/lolcat\"), CloudStorageOptions.withCacheControl(\"public; max-age=666\"));\n     Files.copy(source, target1, COPY_ATTRIBUTES);\n     Files.copy(source, target2, COPY_ATTRIBUTES, CloudStorageOptions.withMimeType(\"text/palfun\"));\n-\n-    CloudStorageFileAttributes attributes =\n-        Files.readAttributes(target1, CloudStorageFileAttributes.class);\n+    CloudStorageFileAttributes attributes = Files.readAttributes(target1, CloudStorageFileAttributes.class);\n     assertThat(attributes.mimeType()).hasValue(\"text/lolcat\");\n     assertThat(attributes.cacheControl()).hasValue(\"public; max-age=666\");\n-\n     attributes = Files.readAttributes(target2, CloudStorageFileAttributes.class);\n     assertThat(attributes.mimeType()).hasValue(\"text/palfun\");\n     assertThat(attributes.cacheControl()).hasValue(\"public; max-age=666\");\n@@ -625,7 +601,8 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testNullness() throws Exception {\n-    try (FileSystem fs = FileSystems.getFileSystem(URI.create(\"gs://blood\"))) {\n+    try (FileSystem fs =\n+      FileSystems.getFileSystem(URI.create(\"gs://blood\"))) {\n       NullPointerTester tester = new NullPointerTester();\n       tester.ignore(CloudStorageFileSystemProvider.class.getMethod(\"equals\", Object.class));\n       tester.setDefault(URI.class, URI.create(\"gs://blood\"));\n@@ -650,7 +627,7 @@ public class CloudStorageFileSystemProviderTest {\n \n   @Test\n   public void testNewFileSystem() throws Exception {\n-    Map<String,String> env = new HashMap<>();\n+    Map<String, String> env = new HashMap<>();\n     FileSystems.newFileSystem(URI.create(\"gs://bucket/path/to/file\"), env);\n   }\n \n@@ -659,8 +636,7 @@ public class CloudStorageFileSystemProviderTest {\n     // User should be able to create paths to files whose name contains a space.\n     // Traditional way 1: manually escape the spaces\n     Path path1 = Paths.get(URI.create(\"gs://bucket/with/a%20space\"));\n-    CloudStorageFileSystemProvider provider =\n-        (CloudStorageFileSystemProvider) path1.getFileSystem().provider();\n+    CloudStorageFileSystemProvider provider = (CloudStorageFileSystemProvider) path1.getFileSystem().provider();\n     // Traditional way 2: use UrlEscapers.urlFragmentEscaper().escape\n     // to escape the string for you.\n     // (Not tested because UrlEscapers isn't the unit under test).\n@@ -684,4 +660,4 @@ public class CloudStorageFileSystemProviderTest {\n   private static CloudStorageConfiguration usePseudoDirectories(boolean value) {\n     return CloudStorageConfiguration.builder().usePseudoDirectories(value).build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 109
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/559/CloudStorageFileSystemProviderTest.java\nindex 6411a96a0a2..adf8270a1c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/559/CloudStorageFileSystemProviderTest.java\n@@ -448,7 +448,7 @@ public class CloudStorageFileSystemProviderTest {\n     }\n   }\n \n-    @Test\n+  @Test\n   public void testCopy() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/559/CloudStorageFileSystemProviderTest.java\nindex 6411a96a0a2..adf8270a1c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/559/CloudStorageFileSystemProviderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/559/CloudStorageFileSystemProviderTest.java\n@@ -448,7 +448,7 @@ public class CloudStorageFileSystemProviderTest {\n     }\n   }\n \n-    @Test\n+  @Test\n   public void testCopy() throws Exception {\n     Path source = Paths.get(URI.create(\"gs://military/fashion.show\"));\n     Path target = Paths.get(URI.create(\"gs://greenbean/adipose\"));\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}