{
    "project_name": "opencb-opencga",
    "error_id": "388",
    "information": {
        "errors": [
            {
                "line": "43",
                "column": "127",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n    public static final String ID = \"individual-qc\";\n    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" +\n            \" mendelian errors (UDP)\";\n\n    public  static final String INFERRED_SEX_STEP = \"inferred-sex\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "44",
                    "column": "14",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/388/IndividualQcAnalysis.java\nindex c144c0730a2..1ab1761dd86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/388/IndividualQcAnalysis.java\n@@ -40,8 +40,8 @@ import java.util.List;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" +\n-            \" mendelian errors (UDP)\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \"\n+            +\" mendelian errors (UDP)\";\n \n     public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "43",
                    "column": "125",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/388/IndividualQcAnalysis.java\nindex c144c0730a2..633f3a33002 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/388/IndividualQcAnalysis.java\n@@ -39,192 +39,192 @@ import java.util.List;\n @Tool(id = IndividualQcAnalysis.ID, resource = Enums.Resource.SAMPLE, description = IndividualQcAnalysis.DESCRIPTION)\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n-    public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" +\n-            \" mendelian errors (UDP)\";\n+  public static final String ID = \"individual-qc\";\n+  public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" +\n+      \" mendelian errors (UDP)\";\n \n-    public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n-    public  static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n+  public static final String INFERRED_SEX_STEP = \"inferred-sex\";\n+  public static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n \n-    private String studyId;\n-    private String individualId;\n-    private String sampleId;\n-    private String inferredSexMethod;\n+  private String studyId;\n+  private String individualId;\n+  private String sampleId;\n+  private String inferredSexMethod;\n \n-    // Internal members\n-    private Individual individual;\n-    private Sample sample;\n-    private Family family;\n+  // Internal members\n+  private Individual individual;\n+  private Sample sample;\n+  private Family family;\n \n-    public IndividualQcAnalysis() {\n-    }\n-\n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n-        setUpStorageEngineExecutor(studyId);\n-\n-        if (StringUtils.isEmpty(studyId)) {\n-            throw new ToolException(\"Missing study ID.\");\n-        }\n-\n-        try {\n-            studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Sanity check\n-        if (StringUtils.isEmpty(individualId)) {\n-            throw new ToolException(\"Missing individual ID.\");\n-        }\n-\n-        // Get individual\n-        individual = IndividualQcUtils.getIndividualById(studyId, individualId, catalogManager, token);\n-\n-        // Get samples of that individual, but only germline samples\n-        sample = null;\n-        List<Sample> samples = IndividualQcUtils.getValidSamplesByIndividualId(studyId, individualId, catalogManager, token);\n-        List<Sample> germlineSamples = new ArrayList<>();\n-        for (Sample individualSample : samples) {\n-            if (!individualSample.isSomatic()) {\n-                germlineSamples.add(individualSample);\n-            }\n-        }\n-\n-        if (CollectionUtils.isEmpty(germlineSamples)) {\n-            throw new ToolException(\"Germline sample not found for individual '\" +  individualId + \"'\");\n-        }\n-\n-        if (germlineSamples.size() > 1) {\n-            if (StringUtils.isNotEmpty(sampleId)) {\n-                for (Sample germlineSample : germlineSamples) {\n-                    if (sampleId.equals(germlineSample.getId())) {\n-                        sample = germlineSample;\n-                        break;\n-                    }\n-                }\n-                if (sample == null) {\n-                    throw new ToolException(\"The provided sample '\" + sampleId + \"' not found in the individual '\" + individualId + \"'\");\n-                }\n-            } else {\n-                // If multiple germline samples, we take the first one\n-                sample = germlineSamples.get(0);\n-            }\n-        } else {\n-            sample = germlineSamples.get(0);\n-        }\n+  public IndividualQcAnalysis() {\n+  }\n \n-        // Get family (for mendelian error)\n-        family = IndividualQcUtils.getFamilyByIndividualId(studyId, individualId, catalogManager, token);\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n+    setUpStorageEngineExecutor(studyId);\n \n-        if (StringUtils.isEmpty(inferredSexMethod)) {\n-            inferredSexMethod = IndividualQcAnalysisExecutor.COVERAGE_RATIO_INFERRED_SEX_METHOD;\n-        }\n+    if (StringUtils.isEmpty(studyId)) {\n+      throw new ToolException(\"Missing study ID.\");\n     }\n \n-    @Override\n-    protected List<String> getSteps() {\n-        return Arrays.asList(INFERRED_SEX_STEP, MENDELIAN_ERRORS_STEP);\n+    try {\n+      studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n     }\n \n-    @Override\n-    protected void run() throws ToolException {\n-\n-        // Get individual quality control metrics to update\n-        IndividualQualityControl qualityControl = individual.getQualityControl();\n-        if (qualityControl == null) {\n-            qualityControl = new IndividualQualityControl().setSampleId(sample.getId());\n-        } else if (!qualityControl.getSampleId().equals(sample.getId())) {\n-            throw new ToolException(\"Individual quality control was computed previously for the sample '\" + qualityControl.getSampleId()\n-                    + \"'\");\n-        }\n-\n-        IndividualQcAnalysisExecutor executor = getToolExecutor(IndividualQcAnalysisExecutor.class);\n-\n-        executor.setStudyId(studyId)\n-                .setIndividual(individual)\n-                .setSample(sample)\n-                .setFamily(family)\n-                .setInferredSexMethod(inferredSexMethod)\n-                .setQualityControl(qualityControl);\n-\n-        step(INFERRED_SEX_STEP, () -> executor.setQcType(IndividualQcAnalysisExecutor.QcType.INFERRED_SEX).execute());\n-        step(MENDELIAN_ERRORS_STEP, () -> executor.setQcType(IndividualQcAnalysisExecutor.QcType.MENDELIAN_ERRORS).execute());\n-\n-        // Finally, update individual quality control\n-        try {\n-            qualityControl = executor.getQualityControl();\n-            if (qualityControl != null) {\n-                IndividualUpdateParams individualUpdateParams = new IndividualUpdateParams().setQualityControl(qualityControl);\n-                catalogManager.getIndividualManager().update(getStudyId(), individualId, individualUpdateParams,\n-                        new QueryOptions(Constants.INCREMENT_VERSION, true), token);\n-            }\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n+    // Sanity check\n+    if (StringUtils.isEmpty(individualId)) {\n+      throw new ToolException(\"Missing individual ID.\");\n     }\n \n-    public String getStudyId() {\n-        return studyId;\n-    }\n-\n-    public IndividualQcAnalysis setStudyId(String studyId) {\n-        this.studyId = studyId;\n-        return this;\n-    }\n+    // Get individual\n+    individual = IndividualQcUtils.getIndividualById(studyId, individualId, catalogManager, token);\n \n-    public String getIndividualId() {\n-        return individualId;\n+    // Get samples of that individual, but only germline samples\n+    sample = null;\n+    List<Sample> samples = IndividualQcUtils.getValidSamplesByIndividualId(studyId, individualId, catalogManager, token);\n+    List<Sample> germlineSamples = new ArrayList<>();\n+    for (Sample individualSample : samples) {\n+      if (!individualSample.isSomatic()) {\n+        germlineSamples.add(individualSample);\n+      }\n     }\n \n-    public IndividualQcAnalysis setIndividualId(String individualId) {\n-        this.individualId = individualId;\n-        return this;\n+    if (CollectionUtils.isEmpty(germlineSamples)) {\n+      throw new ToolException(\"Germline sample not found for individual '\" + individualId + \"'\");\n     }\n \n-    public String getSampleId() {\n-        return sampleId;\n-    }\n-\n-    public IndividualQcAnalysis setSampleId(String sampleId) {\n-        this.sampleId = sampleId;\n-        return this;\n-    }\n-\n-    public String getInferredSexMethod() {\n-        return inferredSexMethod;\n-    }\n-\n-    public IndividualQcAnalysis setInferredSexMethod(String inferredSexMethod) {\n-        this.inferredSexMethod = inferredSexMethod;\n-        return this;\n-    }\n-\n-    public Individual getIndividual() {\n-        return individual;\n-    }\n-\n-    public IndividualQcAnalysis setIndividual(Individual individual) {\n-        this.individual = individual;\n-        return this;\n-    }\n-\n-    public Sample getSample() {\n-        return sample;\n-    }\n-\n-    public IndividualQcAnalysis setSample(Sample sample) {\n-        this.sample = sample;\n-        return this;\n-    }\n-\n-    public Family getFamily() {\n-        return family;\n-    }\n-\n-    public IndividualQcAnalysis setFamily(Family family) {\n-        this.family = family;\n-        return this;\n-    }\n+    if (germlineSamples.size() > 1) {\n+      if (StringUtils.isNotEmpty(sampleId)) {\n+        for (Sample germlineSample : germlineSamples) {\n+          if (sampleId.equals(germlineSample.getId())) {\n+            sample = germlineSample;\n+            break;\n+          }\n+        }\n+        if (sample == null) {\n+          throw new ToolException(\"The provided sample '\" + sampleId + \"' not found in the individual '\" + individualId + \"'\");\n+        }\n+      } else {\n+        // If multiple germline samples, we take the first one\n+        sample = germlineSamples.get(0);\n+      }\n+    } else {\n+      sample = germlineSamples.get(0);\n+    }\n+\n+    // Get family (for mendelian error)\n+    family = IndividualQcUtils.getFamilyByIndividualId(studyId, individualId, catalogManager, token);\n+\n+    if (StringUtils.isEmpty(inferredSexMethod)) {\n+      inferredSexMethod = IndividualQcAnalysisExecutor.COVERAGE_RATIO_INFERRED_SEX_METHOD;\n+    }\n+  }\n+\n+  @Override\n+  protected List<String> getSteps() {\n+    return Arrays.asList(INFERRED_SEX_STEP, MENDELIAN_ERRORS_STEP);\n+  }\n+\n+  @Override\n+  protected void run() throws ToolException {\n+\n+    // Get individual quality control metrics to update\n+    IndividualQualityControl qualityControl = individual.getQualityControl();\n+    if (qualityControl == null) {\n+      qualityControl = new IndividualQualityControl().setSampleId(sample.getId());\n+    } else if (!qualityControl.getSampleId().equals(sample.getId())) {\n+      throw new ToolException(\"Individual quality control was computed previously for the sample '\" + qualityControl.getSampleId()\n+          + \"'\");\n+    }\n+\n+    IndividualQcAnalysisExecutor executor = getToolExecutor(IndividualQcAnalysisExecutor.class);\n+\n+    executor.setStudyId(studyId)\n+        .setIndividual(individual)\n+        .setSample(sample)\n+        .setFamily(family)\n+        .setInferredSexMethod(inferredSexMethod)\n+        .setQualityControl(qualityControl);\n+\n+    step(INFERRED_SEX_STEP, () -> executor.setQcType(IndividualQcAnalysisExecutor.QcType.INFERRED_SEX).execute());\n+    step(MENDELIAN_ERRORS_STEP, () -> executor.setQcType(IndividualQcAnalysisExecutor.QcType.MENDELIAN_ERRORS).execute());\n+\n+    // Finally, update individual quality control\n+    try {\n+      qualityControl = executor.getQualityControl();\n+      if (qualityControl != null) {\n+        IndividualUpdateParams individualUpdateParams = new IndividualUpdateParams().setQualityControl(qualityControl);\n+        catalogManager.getIndividualManager().update(getStudyId(), individualId, individualUpdateParams,\n+            new QueryOptions(Constants.INCREMENT_VERSION, true), token);\n+      }\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n+    }\n+  }\n+\n+  public String getStudyId() {\n+    return studyId;\n+  }\n+\n+  public IndividualQcAnalysis setStudyId(String studyId) {\n+    this.studyId = studyId;\n+    return this;\n+  }\n+\n+  public String getIndividualId() {\n+    return individualId;\n+  }\n+\n+  public IndividualQcAnalysis setIndividualId(String individualId) {\n+    this.individualId = individualId;\n+    return this;\n+  }\n+\n+  public String getSampleId() {\n+    return sampleId;\n+  }\n+\n+  public IndividualQcAnalysis setSampleId(String sampleId) {\n+    this.sampleId = sampleId;\n+    return this;\n+  }\n+\n+  public String getInferredSexMethod() {\n+    return inferredSexMethod;\n+  }\n+\n+  public IndividualQcAnalysis setInferredSexMethod(String inferredSexMethod) {\n+    this.inferredSexMethod = inferredSexMethod;\n+    return this;\n+  }\n+\n+  public Individual getIndividual() {\n+    return individual;\n+  }\n+\n+  public IndividualQcAnalysis setIndividual(Individual individual) {\n+    this.individual = individual;\n+    return this;\n+  }\n+\n+  public Sample getSample() {\n+    return sample;\n+  }\n+\n+  public IndividualQcAnalysis setSample(Sample sample) {\n+    this.sample = sample;\n+    return this;\n+  }\n+\n+  public Family getFamily() {\n+    return family;\n+  }\n+\n+  public IndividualQcAnalysis setFamily(Family family) {\n+    this.family = family;\n+    return this;\n+  }\n }\n",
            "diff_size": 267
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/388/IndividualQcAnalysis.java\nindex c144c0730a2..f5e0758ea4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/388/IndividualQcAnalysis.java\n@@ -40,10 +40,8 @@ import java.util.List;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" +\n-            \" mendelian errors (UDP)\";\n-\n-    public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" + \" mendelian errors (UDP)\";\n+public static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n \n     private String studyId;\n@@ -93,7 +91,7 @@ public class IndividualQcAnalysis extends OpenCgaTool {\n         }\n \n         if (CollectionUtils.isEmpty(germlineSamples)) {\n-            throw new ToolException(\"Germline sample not found for individual '\" +  individualId + \"'\");\n+            throw new ToolException(\"Germline sample not found for individual '\" + individualId + \"'\");\n         }\n \n         if (germlineSamples.size() > 1) {\n@@ -227,4 +225,4 @@ public class IndividualQcAnalysis extends OpenCgaTool {\n         this.family = family;\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "44",
                    "column": "14",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/388/IndividualQcAnalysis.java\nindex c144c0730a2..1ab1761dd86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/388/IndividualQcAnalysis.java\n@@ -40,8 +40,8 @@ import java.util.List;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" +\n-            \" mendelian errors (UDP)\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \"\n+            +\" mendelian errors (UDP)\";\n \n     public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/388/IndividualQcAnalysis.java\nindex c144c0730a2..97e817066af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/388/IndividualQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/388/IndividualQcAnalysis.java\n@@ -40,8 +40,7 @@ import java.util.List;\n public class IndividualQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"individual-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" +\n-            \" mendelian errors (UDP)\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given individual. It includes inferred sex and \" + \" mendelian errors (UDP)\";\n \n     public  static final String INFERRED_SEX_STEP = \"inferred-sex\";\n     public  static final String MENDELIAN_ERRORS_STEP = \"mendelian-errors\";\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}