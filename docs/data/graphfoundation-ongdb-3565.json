{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3565",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3565/PropertyDeleter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3565/PropertyDeleter.java\nindex 87bc2680cb1..a64de46a0bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3565/PropertyDeleter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3565/PropertyDeleter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import org.neo4j.kernel.impl.store.record.DynamicRecord;\n@@ -28,170 +29,169 @@ import org.neo4j.kernel.impl.transaction.state.RecordAccess.RecordProxy;\n \n public class PropertyDeleter\n {\n-    private final PropertyTraverser traverser;\n+  private final PropertyTraverser traverser;\n \n-    public PropertyDeleter( PropertyTraverser traverser )\n-    {\n-        this.traverser = traverser;\n-    }\n+  public PropertyDeleter(PropertyTraverser traverser)\n+  {\n+    this.traverser = traverser;\n+  }\n \n-    public void deletePropertyChain( PrimitiveRecord primitive,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+  public void deletePropertyChain(PrimitiveRecord primitive,\n+                                  RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n+  {\n+    long nextProp = primitive.getNextProp();\n+    while (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n     {\n-        long nextProp = primitive.getNextProp();\n-        while ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            RecordProxy<PropertyRecord, PrimitiveRecord> propertyChange =\n-                    propertyRecords.getOrLoad( nextProp, primitive );\n+      RecordProxy<PropertyRecord, PrimitiveRecord> propertyChange =\n+          propertyRecords.getOrLoad(nextProp, primitive);\n \n-            // TODO forChanging/forReading piggy-backing\n-            PropertyRecord propRecord = propertyChange.forChangingData();\n-            deletePropertyRecordIncludingValueRecords( propRecord );\n-            nextProp = propRecord.getNextProp();\n-            propRecord.setChanged( primitive );\n-        }\n-        primitive.setNextProp( Record.NO_NEXT_PROPERTY.intValue() );\n+      // TODO forChanging/forReading piggy-backing\n+      PropertyRecord propRecord = propertyChange.forChangingData();\n+      deletePropertyRecordIncludingValueRecords(propRecord);\n+      nextProp = propRecord.getNextProp();\n+      propRecord.setChanged(primitive);\n     }\n+    primitive.setNextProp(Record.NO_NEXT_PROPERTY.intValue());\n+  }\n \n-    public static void deletePropertyRecordIncludingValueRecords( PropertyRecord record )\n+  public static void deletePropertyRecordIncludingValueRecords(PropertyRecord record)\n+  {\n+    for (PropertyBlock block : record)\n     {\n-        for ( PropertyBlock block : record )\n-        {\n-            for ( DynamicRecord valueRecord : block.getValueRecords() )\n-            {\n-                assert valueRecord.inUse();\n-                valueRecord.setInUse( false );\n-                record.addDeletedRecord( valueRecord );\n-            }\n-        }\n-        record.clearPropertyBlocks();\n-        record.setInUse( false );\n+      for (DynamicRecord valueRecord : block.getValueRecords())\n+      {\n+        assert valueRecord.inUse();\n+        valueRecord.setInUse(false);\n+        record.addDeletedRecord(valueRecord);\n+      }\n     }\n+    record.clearPropertyBlocks();\n+    record.setInUse(false);\n+  }\n \n-    /**\n-     * Removes property with given {@code propertyKey} from property chain owner by the primitive found in\n-     * {@code primitiveProxy} if it exists.\n-     *\n-     * @param primitiveProxy access to the primitive record pointing to the start of the property chain.\n-     * @param propertyKey the property key token id to look for and remove.\n-     * @param propertyRecords access to records.\n-     * @return {@code true} if the property was found and removed, otherwise {@code false}.\n-     */\n-    public <P extends PrimitiveRecord> boolean removePropertyIfExists( RecordProxy<P,Void> primitiveProxy,\n-            int propertyKey, RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords )\n+  /**\n+   * Removes property with given {@code propertyKey} from property chain owner by the primitive found in\n+   * {@code primitiveProxy} if it exists.\n+   *\n+   * @param primitiveProxy  access to the primitive record pointing to the start of the property chain.\n+   * @param propertyKey     the property key token id to look for and remove.\n+   * @param propertyRecords access to records.\n+   * @return {@code true} if the property was found and removed, otherwise {@code false}.\n+   */\n+  public <P extends PrimitiveRecord> boolean removePropertyIfExists(RecordProxy<P, Void> primitiveProxy,\n+                                                                    int propertyKey, RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n+  {\n+    PrimitiveRecord primitive = primitiveProxy.forReadingData();\n+    long propertyId = // propertyData.getId();\n+        traverser.findPropertyRecordContaining(primitive, propertyKey, propertyRecords, false);\n+    if (!Record.NO_NEXT_PROPERTY.is(propertyId))\n     {\n-        PrimitiveRecord primitive = primitiveProxy.forReadingData();\n-        long propertyId = // propertyData.getId();\n-                traverser.findPropertyRecordContaining( primitive, propertyKey, propertyRecords, false );\n-        if ( !Record.NO_NEXT_PROPERTY.is( propertyId ) )\n-        {\n-            removeProperty( primitiveProxy, propertyKey, propertyRecords, primitive, propertyId );\n-            return true;\n-        }\n-        return false;\n+      removeProperty(primitiveProxy, propertyKey, propertyRecords, primitive, propertyId);\n+      return true;\n     }\n+    return false;\n+  }\n \n-    /**\n-     * Removes property with given {@code propertyKey} from property chain owner by the primitive found in\n-     * {@code primitiveProxy}.\n-     *\n-     * @param primitiveProxy access to the primitive record pointing to the start of the property chain.\n-     * @param propertyKey the property key token id to look for and remove.\n-     * @param propertyRecords access to records.\n-     * @throws IllegalStateException if property key was not found in the property chain.\n-     */\n-    public <P extends PrimitiveRecord> void removeProperty( RecordProxy<P,Void> primitiveProxy, int propertyKey,\n-            RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords )\n+  /**\n+   * Removes property with given {@code propertyKey} from property chain owner by the primitive found in\n+   * {@code primitiveProxy}.\n+   *\n+   * @param primitiveProxy  access to the primitive record pointing to the start of the property chain.\n+   * @param propertyKey     the property key token id to look for and remove.\n+   * @param propertyRecords access to records.\n+   * @throws IllegalStateException if property key was not found in the property chain.\n+   */\n+  public <P extends PrimitiveRecord> void removeProperty(RecordProxy<P, Void> primitiveProxy, int propertyKey,\n+                                                         RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n+  {\n+    PrimitiveRecord primitive = primitiveProxy.forReadingData();\n+    long propertyId = // propertyData.getId();\n+        traverser.findPropertyRecordContaining(primitive, propertyKey, propertyRecords, true);\n+    removeProperty(primitiveProxy, propertyKey, propertyRecords, primitive, propertyId);\n+  }\n+\n+  private <P extends PrimitiveRecord> void removeProperty(RecordProxy<P, Void> primitiveProxy, int propertyKey,\n+                                                          RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords, PrimitiveRecord primitive,\n+                                                          long propertyId)\n+  {\n+    RecordProxy<PropertyRecord, PrimitiveRecord> recordChange =\n+        propertyRecords.getOrLoad(propertyId, primitive);\n+    PropertyRecord propRecord = recordChange.forChangingData();\n+    if (!propRecord.inUse())\n     {\n-        PrimitiveRecord primitive = primitiveProxy.forReadingData();\n-        long propertyId = // propertyData.getId();\n-                traverser.findPropertyRecordContaining( primitive, propertyKey, propertyRecords, true );\n-        removeProperty( primitiveProxy, propertyKey, propertyRecords, primitive, propertyId );\n+      throw new IllegalStateException(\"Unable to delete property[\" +\n+          propertyId + \"] since it is already deleted.\");\n     }\n \n-    private <P extends PrimitiveRecord> void removeProperty( RecordProxy<P,Void> primitiveProxy, int propertyKey,\n-            RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords, PrimitiveRecord primitive,\n-            long propertyId )\n+    PropertyBlock block = propRecord.removePropertyBlock(propertyKey);\n+    if (block == null)\n     {\n-        RecordProxy<PropertyRecord, PrimitiveRecord> recordChange =\n-                propertyRecords.getOrLoad( propertyId, primitive );\n-        PropertyRecord propRecord = recordChange.forChangingData();\n-        if ( !propRecord.inUse() )\n-        {\n-            throw new IllegalStateException( \"Unable to delete property[\" +\n-                    propertyId + \"] since it is already deleted.\" );\n-        }\n-\n-        PropertyBlock block = propRecord.removePropertyBlock( propertyKey );\n-        if ( block == null )\n-        {\n-            throw new IllegalStateException( \"Property with index[\"\n-                                             + propertyKey\n-                                             + \"] is not present in property[\"\n-                                             + propertyId + \"]\" );\n-        }\n+      throw new IllegalStateException(\"Property with index[\"\n+          + propertyKey\n+          + \"] is not present in property[\"\n+          + propertyId + \"]\");\n+    }\n \n-        for ( DynamicRecord valueRecord : block.getValueRecords() )\n-        {\n-            assert valueRecord.inUse();\n-            valueRecord.setInUse( false, block.getType().intValue() );\n-            propRecord.addDeletedRecord( valueRecord );\n-        }\n-        if ( propRecord.size() > 0 )\n-        {\n-            /*\n-             * There are remaining blocks in the record. We do not unlink yet.\n-             */\n-            propRecord.setChanged( primitive );\n-            assert traverser.assertPropertyChain( primitive, propertyRecords );\n-        }\n-        else\n-        {\n-            unlinkPropertyRecord( propRecord, propertyRecords, primitiveProxy );\n-        }\n+    for (DynamicRecord valueRecord : block.getValueRecords())\n+    {\n+      assert valueRecord.inUse();\n+      valueRecord.setInUse(false, block.getType().intValue());\n+      propRecord.addDeletedRecord(valueRecord);\n     }\n+    if (propRecord.size() > 0)\n+    {\n+      /*\n+       * There are remaining blocks in the record. We do not unlink yet.\n+       */\n+      propRecord.setChanged(primitive);\n+      assert traverser.assertPropertyChain(primitive, propertyRecords);\n+    } else\n+    {\n+      unlinkPropertyRecord(propRecord, propertyRecords, primitiveProxy);\n+    }\n+  }\n \n-    private <P extends PrimitiveRecord> void unlinkPropertyRecord( PropertyRecord propRecord,\n-            RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords,\n-            RecordProxy<P, Void> primitiveRecordChange )\n+  private <P extends PrimitiveRecord> void unlinkPropertyRecord(PropertyRecord propRecord,\n+                                                                RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n+                                                                RecordProxy<P, Void> primitiveRecordChange)\n+  {\n+    P primitive = primitiveRecordChange.forReadingLinkage();\n+    assert traverser.assertPropertyChain(primitive, propertyRecords);\n+    assert propRecord.size() == 0;\n+    long prevProp = propRecord.getPrevProp();\n+    long nextProp = propRecord.getNextProp();\n+    if (primitive.getNextProp() == propRecord.getId())\n+    {\n+      assert propRecord.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : propRecord\n+          + \" for \"\n+          + primitive;\n+      primitiveRecordChange.forChangingLinkage().setNextProp(nextProp);\n+    }\n+    if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue())\n+    {\n+      PropertyRecord prevPropRecord = propertyRecords.getOrLoad(prevProp, primitive).forChangingLinkage();\n+      assert prevPropRecord.inUse() : prevPropRecord + \"->\" + propRecord\n+          + \" for \" + primitive;\n+      prevPropRecord.setNextProp(nextProp);\n+      prevPropRecord.setChanged(primitive);\n+    }\n+    if (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n     {\n-        P primitive = primitiveRecordChange.forReadingLinkage();\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n-        assert propRecord.size() == 0;\n-        long prevProp = propRecord.getPrevProp();\n-        long nextProp = propRecord.getNextProp();\n-        if ( primitive.getNextProp() == propRecord.getId() )\n-        {\n-            assert propRecord.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : propRecord\n-                    + \" for \"\n-                    + primitive;\n-            primitiveRecordChange.forChangingLinkage().setNextProp( nextProp );\n-        }\n-        if ( prevProp != Record.NO_PREVIOUS_PROPERTY.intValue() )\n-        {\n-            PropertyRecord prevPropRecord = propertyRecords.getOrLoad( prevProp, primitive ).forChangingLinkage();\n-            assert prevPropRecord.inUse() : prevPropRecord + \"->\" + propRecord\n-            + \" for \" + primitive;\n-            prevPropRecord.setNextProp( nextProp );\n-            prevPropRecord.setChanged( primitive );\n-        }\n-        if ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            PropertyRecord nextPropRecord = propertyRecords.getOrLoad( nextProp, primitive ).forChangingLinkage();\n-            assert nextPropRecord.inUse() : propRecord + \"->\" + nextPropRecord\n-            + \" for \" + primitive;\n-            nextPropRecord.setPrevProp( prevProp );\n-            nextPropRecord.setChanged( primitive );\n-        }\n-        propRecord.setInUse( false );\n-        /*\n-         *  The following two are not needed - the above line does all the work (PropertyStore\n-         *  does not write out the prev/next for !inUse records). It is nice to set this\n-         *  however to check for consistency when assertPropertyChain().\n-         */\n-        propRecord.setPrevProp( Record.NO_PREVIOUS_PROPERTY.intValue() );\n-        propRecord.setNextProp( Record.NO_NEXT_PROPERTY.intValue() );\n-        propRecord.setChanged( primitive );\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n+      PropertyRecord nextPropRecord = propertyRecords.getOrLoad(nextProp, primitive).forChangingLinkage();\n+      assert nextPropRecord.inUse() : propRecord + \"->\" + nextPropRecord\n+          + \" for \" + primitive;\n+      nextPropRecord.setPrevProp(prevProp);\n+      nextPropRecord.setChanged(primitive);\n     }\n+    propRecord.setInUse(false);\n+    /*\n+     *  The following two are not needed - the above line does all the work (PropertyStore\n+     *  does not write out the prev/next for !inUse records). It is nice to set this\n+     *  however to check for consistency when assertPropertyChain().\n+     */\n+    propRecord.setPrevProp(Record.NO_PREVIOUS_PROPERTY.intValue());\n+    propRecord.setNextProp(Record.NO_NEXT_PROPERTY.intValue());\n+    propRecord.setChanged(primitive);\n+    assert traverser.assertPropertyChain(primitive, propertyRecords);\n+  }\n }\n",
            "diff_size": 223
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}