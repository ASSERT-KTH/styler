{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4268",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4268/ValueEncoding.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4268/ValueEncoding.java\nindex 1f1b7f497fc..91021cebf89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4268/ValueEncoding.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4268/ValueEncoding.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema;\n \n import org.apache.lucene.document.DoubleField;\n@@ -41,267 +42,267 @@ import static org.apache.lucene.document.Field.Store.NO;\n  */\n public enum ValueEncoding\n {\n-    Number\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"number\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isNumberValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return new DoubleField( name, Values.coerceToDouble(value), NO );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setDoubleValue( Values.coerceToDouble(value) );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    Double doubleValue = Values.coerceToDouble(value);\n-                    return new ConstantScoreQuery( NumericRangeQuery\n-                            .newDoubleRange( key( propertyNumber ), doubleValue, doubleValue, true, true ) );\n-                }\n-            },\n-    Array\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"array\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isArrayValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, ArrayEncoder.encode( value ) );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( ArrayEncoder.encode( value ) );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), ArrayEncoder.encode( value ) ) ) );\n-                }\n-            },\n-    Bool\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"bool\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isBooleanValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, value.prettyPrint() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( value.prettyPrint() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n-                }\n-            },\n-    Spatial\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"spatial\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isGeometryValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    PointValue pointVal = (PointValue) value;\n-                    return stringField( name, pointVal.toIndexableString() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    PointValue pointVal = (PointValue) value;\n-                    field.setStringValue( pointVal.toIndexableString() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    PointValue pointVal = (PointValue) value;\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), pointVal.toIndexableString() ) ) );\n-                }\n-            },\n-    Temporal\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"temporal\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isTemporalValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, value.prettyPrint() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( value.prettyPrint() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n-                }\n-            },\n-    String\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"string\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    // Any other type can be safely serialised as a string\n-                    return true;\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, value.asObject().toString() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( value.asObject().toString() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.asObject().toString() ) ) );\n-                }\n-            };\n-\n-    private static final ValueEncoding[] AllEncodings = values();\n-\n-    public  abstract String key();\n-\n-    String key( int propertyNumber )\n-    {\n-        if ( propertyNumber == 0 )\n+  Number\n+      {\n+        @Override\n+        public String key()\n         {\n-            return key();\n+          return \"number\";\n         }\n-        return propertyNumber + key();\n-    }\n \n-    static int fieldPropertyNumber( String fieldName )\n-    {\n-        int index = 0;\n-        for ( int i = 0; i < fieldName.length() && Character.isDigit( fieldName.charAt( i ) ); i++ )\n+        @Override\n+        boolean canEncode(Value value)\n         {\n-            index++;\n+          return Values.isNumberValue(value);\n         }\n-        return index == 0 ? 0 : Integer.parseInt( fieldName.substring( 0, index ) );\n-    }\n \n-    abstract boolean canEncode( Value value );\n+        @Override\n+        Field encodeField(String name, Value value)\n+        {\n+          return new DoubleField(name, Values.coerceToDouble(value), NO);\n+        }\n \n-    abstract Field encodeField( String name, Value value );\n+        @Override\n+        void setFieldValue(Value value, Field field)\n+        {\n+          field.setDoubleValue(Values.coerceToDouble(value));\n+        }\n \n-    abstract void setFieldValue( Value value, Field field );\n+        @Override\n+        Query encodeQuery(Value value, int propertyNumber)\n+        {\n+          Double doubleValue = Values.coerceToDouble(value);\n+          return new ConstantScoreQuery(NumericRangeQuery\n+              .newDoubleRange(key(propertyNumber), doubleValue, doubleValue, true, true));\n+        }\n+      },\n+  Array\n+      {\n+        @Override\n+        public String key()\n+        {\n+          return \"array\";\n+        }\n \n-    abstract Query encodeQuery( Value value, int propertyNumber );\n+        @Override\n+        boolean canEncode(Value value)\n+        {\n+          return Values.isArrayValue(value);\n+        }\n \n-    public static ValueEncoding forKey( String key )\n-    {\n-        for ( ValueEncoding encoding : AllEncodings )\n+        @Override\n+        Field encodeField(String name, Value value)\n         {\n-            if ( key.endsWith( encoding.key( ) ) )\n-            {\n-                return encoding;\n-            }\n+          return stringField(name, ArrayEncoder.encode(value));\n         }\n-        throw new IllegalArgumentException( \"Unknown key: \" + key );\n-    }\n \n-    public static ValueEncoding forValue( Value value )\n-    {\n-        for ( ValueEncoding encoding : AllEncodings )\n+        @Override\n+        void setFieldValue(Value value, Field field)\n+        {\n+          field.setStringValue(ArrayEncoder.encode(value));\n+        }\n+\n+        @Override\n+        Query encodeQuery(Value value, int propertyNumber)\n+        {\n+          return new ConstantScoreQuery(\n+              new TermQuery(new Term(key(propertyNumber), ArrayEncoder.encode(value))));\n+        }\n+      },\n+  Bool\n+      {\n+        @Override\n+        public String key()\n+        {\n+          return \"bool\";\n+        }\n+\n+        @Override\n+        boolean canEncode(Value value)\n+        {\n+          return Values.isBooleanValue(value);\n+        }\n+\n+        @Override\n+        Field encodeField(String name, Value value)\n+        {\n+          return stringField(name, value.prettyPrint());\n+        }\n+\n+        @Override\n+        void setFieldValue(Value value, Field field)\n+        {\n+          field.setStringValue(value.prettyPrint());\n+        }\n+\n+        @Override\n+        Query encodeQuery(Value value, int propertyNumber)\n+        {\n+          return new ConstantScoreQuery(\n+              new TermQuery(new Term(key(propertyNumber), value.prettyPrint())));\n+        }\n+      },\n+  Spatial\n+      {\n+        @Override\n+        public String key()\n+        {\n+          return \"spatial\";\n+        }\n+\n+        @Override\n+        boolean canEncode(Value value)\n+        {\n+          return Values.isGeometryValue(value);\n+        }\n+\n+        @Override\n+        Field encodeField(String name, Value value)\n+        {\n+          PointValue pointVal = (PointValue) value;\n+          return stringField(name, pointVal.toIndexableString());\n+        }\n+\n+        @Override\n+        void setFieldValue(Value value, Field field)\n         {\n-            if ( encoding.canEncode( value ) )\n-            {\n-                return encoding;\n-            }\n+          PointValue pointVal = (PointValue) value;\n+          field.setStringValue(pointVal.toIndexableString());\n         }\n-        throw new IllegalStateException( \"Unable to encode the value \" + value );\n+\n+        @Override\n+        Query encodeQuery(Value value, int propertyNumber)\n+        {\n+          PointValue pointVal = (PointValue) value;\n+          return new ConstantScoreQuery(\n+              new TermQuery(new Term(key(propertyNumber), pointVal.toIndexableString())));\n+        }\n+      },\n+  Temporal\n+      {\n+        @Override\n+        public String key()\n+        {\n+          return \"temporal\";\n+        }\n+\n+        @Override\n+        boolean canEncode(Value value)\n+        {\n+          return Values.isTemporalValue(value);\n+        }\n+\n+        @Override\n+        Field encodeField(String name, Value value)\n+        {\n+          return stringField(name, value.prettyPrint());\n+        }\n+\n+        @Override\n+        void setFieldValue(Value value, Field field)\n+        {\n+          field.setStringValue(value.prettyPrint());\n+        }\n+\n+        @Override\n+        Query encodeQuery(Value value, int propertyNumber)\n+        {\n+          return new ConstantScoreQuery(\n+              new TermQuery(new Term(key(propertyNumber), value.prettyPrint())));\n+        }\n+      },\n+  String\n+      {\n+        @Override\n+        public String key()\n+        {\n+          return \"string\";\n+        }\n+\n+        @Override\n+        boolean canEncode(Value value)\n+        {\n+          // Any other type can be safely serialised as a string\n+          return true;\n+        }\n+\n+        @Override\n+        Field encodeField(String name, Value value)\n+        {\n+          return stringField(name, value.asObject().toString());\n+        }\n+\n+        @Override\n+        void setFieldValue(Value value, Field field)\n+        {\n+          field.setStringValue(value.asObject().toString());\n+        }\n+\n+        @Override\n+        Query encodeQuery(Value value, int propertyNumber)\n+        {\n+          return new ConstantScoreQuery(\n+              new TermQuery(new Term(key(propertyNumber), value.asObject().toString())));\n+        }\n+      };\n+\n+  private static final ValueEncoding[] AllEncodings = values();\n+\n+  public abstract String key();\n+\n+  String key(int propertyNumber)\n+  {\n+    if (propertyNumber == 0)\n+    {\n+      return key();\n     }\n+    return propertyNumber + key();\n+  }\n \n-    private static Field stringField( String identifier, String value )\n+  static int fieldPropertyNumber(String fieldName)\n+  {\n+    int index = 0;\n+    for (int i = 0; i < fieldName.length() && Character.isDigit(fieldName.charAt(i)); i++)\n     {\n-        return new StringField( identifier, value, NO );\n+      index++;\n     }\n+    return index == 0 ? 0 : Integer.parseInt(fieldName.substring(0, index));\n+  }\n+\n+  abstract boolean canEncode(Value value);\n+\n+  abstract Field encodeField(String name, Value value);\n+\n+  abstract void setFieldValue(Value value, Field field);\n+\n+  abstract Query encodeQuery(Value value, int propertyNumber);\n+\n+  public static ValueEncoding forKey(String key)\n+  {\n+    for (ValueEncoding encoding : AllEncodings)\n+    {\n+      if (key.endsWith(encoding.key()))\n+      {\n+        return encoding;\n+      }\n+    }\n+    throw new IllegalArgumentException(\"Unknown key: \" + key);\n+  }\n+\n+  public static ValueEncoding forValue(Value value)\n+  {\n+    for (ValueEncoding encoding : AllEncodings)\n+    {\n+      if (encoding.canEncode(value))\n+      {\n+        return encoding;\n+      }\n+    }\n+    throw new IllegalStateException(\"Unable to encode the value \" + value);\n+  }\n+\n+  private static Field stringField(String identifier, String value)\n+  {\n+    return new StringField(identifier, value, NO);\n+  }\n }\n",
            "diff_size": 466
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4268/ValueEncoding.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4268/ValueEncoding.java\nindex 1f1b7f497fc..2f59d842d42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4268/ValueEncoding.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4268/ValueEncoding.java\n@@ -42,7 +42,7 @@ import static org.apache.lucene.document.Field.Store.NO;\n public enum ValueEncoding\n {\n     Number\n-            {\n+{\n                 @Override\n                 public String key()\n                 {\n@@ -71,12 +71,10 @@ public enum ValueEncoding\n                 Query encodeQuery( Value value, int propertyNumber )\n                 {\n                     Double doubleValue = Values.coerceToDouble(value);\n-                    return new ConstantScoreQuery( NumericRangeQuery\n-                            .newDoubleRange( key( propertyNumber ), doubleValue, doubleValue, true, true ) );\n-                }\n-            },\n-    Array\n-            {\n+                    return new ConstantScoreQuery( NumericRangeQuery.newDoubleRange( key( propertyNumber ), doubleValue, doubleValue, true, true ) );\n+    }\n+            }, Array\n+{\n                 @Override\n                 public String key()\n                 {\n@@ -104,12 +102,10 @@ public enum ValueEncoding\n                 @Override\n                 Query encodeQuery( Value value, int propertyNumber )\n                 {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), ArrayEncoder.encode( value ) ) ) );\n-                }\n-            },\n-    Bool\n-            {\n+                    return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), ArrayEncoder.encode( value ) ) ) );\n+    }\n+            }, Bool\n+{\n                 @Override\n                 public String key()\n                 {\n@@ -137,12 +133,10 @@ public enum ValueEncoding\n                 @Override\n                 Query encodeQuery( Value value, int propertyNumber )\n                 {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n-                }\n-            },\n-    Spatial\n-            {\n+                    return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n+    }\n+            }, Spatial\n+{\n                 @Override\n                 public String key()\n                 {\n@@ -173,12 +167,10 @@ public enum ValueEncoding\n                 Query encodeQuery( Value value, int propertyNumber )\n                 {\n                     PointValue pointVal = (PointValue) value;\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), pointVal.toIndexableString() ) ) );\n-                }\n-            },\n-    Temporal\n-            {\n+                    return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), pointVal.toIndexableString() ) ) );\n+    }\n+            }, Temporal\n+{\n                 @Override\n                 public String key()\n                 {\n@@ -206,12 +198,10 @@ public enum ValueEncoding\n                 @Override\n                 Query encodeQuery( Value value, int propertyNumber )\n                 {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n-                }\n-            },\n-    String\n-            {\n+                    return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n+    }\n+            }, String\n+{\n                 @Override\n                 public String key()\n                 {\n@@ -240,14 +230,13 @@ public enum ValueEncoding\n                 @Override\n                 Query encodeQuery( Value value, int propertyNumber )\n                 {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.asObject().toString() ) ) );\n-                }\n+                    return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), value.asObject().toString() ) ) );\n+    }\n             };\n \n-    private static final ValueEncoding[] AllEncodings = values();\n+private static final ValueEncoding[] AllEncodings = values();\n \n-    public  abstract String key();\n+    public abstract String key();\n \n     String key( int propertyNumber )\n     {\n@@ -255,7 +244,8 @@ public enum ValueEncoding\n         {\n             return key();\n         }\n-        return propertyNumber + key();\n+\n+return propertyNumber + key();\n     }\n \n     static int fieldPropertyNumber( String fieldName )\n@@ -265,7 +255,8 @@ public enum ValueEncoding\n         {\n             index++;\n         }\n-        return index == 0 ? 0 : Integer.parseInt( fieldName.substring( 0, index ) );\n+\n+return index == 0 ? 0 : Integer.parseInt( fieldName.substring( 0, index ) );\n     }\n \n     abstract boolean canEncode( Value value );\n@@ -280,7 +271,7 @@ public enum ValueEncoding\n     {\n         for ( ValueEncoding encoding : AllEncodings )\n         {\n-            if ( key.endsWith( encoding.key( ) ) )\n+            if ( key.endsWith( encoding.key() ) )\n             {\n                 return encoding;\n             }\n@@ -304,4 +295,4 @@ public enum ValueEncoding\n     {\n         return new StringField( identifier, value, NO );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "236",
                    "column": "50",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "258",
                    "column": "11",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "258",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "11",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "271",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4268/ValueEncoding.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4268/ValueEncoding.java\nindex 1f1b7f497fc..804b34f4289 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4268/ValueEncoding.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4268/ValueEncoding.java\n@@ -27,281 +27,261 @@ import org.apache.lucene.search.ConstantScoreQuery;\n import org.apache.lucene.search.NumericRangeQuery;\n import org.apache.lucene.search.Query;\n import org.apache.lucene.search.TermQuery;\n-\n import org.neo4j.kernel.api.index.ArrayEncoder;\n import org.neo4j.values.storable.PointValue;\n import org.neo4j.values.storable.Value;\n import org.neo4j.values.storable.Values;\n-\n import static org.apache.lucene.document.Field.Store.NO;\n \n /**\n  * Enumeration representing all possible property types with corresponding encodings and query structures for Lucene\n  * schema indexes.\n  */\n+\n public enum ValueEncoding\n-{\n-    Number\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"number\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isNumberValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return new DoubleField( name, Values.coerceToDouble(value), NO );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setDoubleValue( Values.coerceToDouble(value) );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    Double doubleValue = Values.coerceToDouble(value);\n-                    return new ConstantScoreQuery( NumericRangeQuery\n-                            .newDoubleRange( key( propertyNumber ), doubleValue, doubleValue, true, true ) );\n-                }\n-            },\n-    Array\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"array\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isArrayValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, ArrayEncoder.encode( value ) );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( ArrayEncoder.encode( value ) );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), ArrayEncoder.encode( value ) ) ) );\n-                }\n-            },\n-    Bool\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"bool\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isBooleanValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, value.prettyPrint() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( value.prettyPrint() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n-                }\n-            },\n-    Spatial\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"spatial\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isGeometryValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    PointValue pointVal = (PointValue) value;\n-                    return stringField( name, pointVal.toIndexableString() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    PointValue pointVal = (PointValue) value;\n-                    field.setStringValue( pointVal.toIndexableString() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    PointValue pointVal = (PointValue) value;\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), pointVal.toIndexableString() ) ) );\n-                }\n-            },\n-    Temporal\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"temporal\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    return Values.isTemporalValue( value );\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, value.prettyPrint() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( value.prettyPrint() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n-                }\n-            },\n-    String\n-            {\n-                @Override\n-                public String key()\n-                {\n-                    return \"string\";\n-                }\n-\n-                @Override\n-                boolean canEncode( Value value )\n-                {\n-                    // Any other type can be safely serialised as a string\n-                    return true;\n-                }\n-\n-                @Override\n-                Field encodeField( String name, Value value )\n-                {\n-                    return stringField( name, value.asObject().toString() );\n-                }\n-\n-                @Override\n-                void setFieldValue( Value value, Field field )\n-                {\n-                    field.setStringValue( value.asObject().toString() );\n-                }\n-\n-                @Override\n-                Query encodeQuery( Value value, int propertyNumber )\n-                {\n-                    return new ConstantScoreQuery(\n-                            new TermQuery( new Term( key( propertyNumber ), value.asObject().toString() ) ) );\n-                }\n-            };\n-\n-    private static final ValueEncoding[] AllEncodings = values();\n-\n-    public  abstract String key();\n-\n-    String key( int propertyNumber )\n-    {\n-        if ( propertyNumber == 0 )\n-        {\n-            return key();\n-        }\n-        return propertyNumber + key();\n-    }\n-\n-    static int fieldPropertyNumber( String fieldName )\n-    {\n-        int index = 0;\n-        for ( int i = 0; i < fieldName.length() && Character.isDigit( fieldName.charAt( i ) ); i++ )\n+{ Number\n+  {\n+      @Override\n+      public String key()\n+      {\n+          return \"number\";\n+      }\n+\n+      @Override\n+      boolean canEncode( Value value )\n+      {\n+          return Values.isNumberValue( value );\n+      }\n+\n+      @Override Field encodeField( String name, Value value )\n+      {\n+          return new DoubleField( name, Values.coerceToDouble( value ), NO );\n+      }\n+\n+      @Override void setFieldValue( Value value, Field field )\n+      {\n+          field.setDoubleValue( Values.coerceToDouble( value ) );\n+      }\n+\n+      @Override Query encodeQuery( Value value, int propertyNumber )\n+      {\n+          Double doubleValue = Values.coerceToDouble( value );\n+          return new ConstantScoreQuery( NumericRangeQuery.newDoubleRange( key( propertyNumber ), doubleValue, doubleValue, true, true ) );\n+      }\n+  }, Array\n+     {\n+         @Override\n+         public String key()\n+         {\n+             return \"array\";\n+         }\n+\n+         @Override\n+         boolean canEncode( Value value )\n+         {\n+             return Values.isArrayValue( value );\n+         }\n+\n+         @Override Field encodeField( String name, Value value )\n+         {\n+             return stringField( name, ArrayEncoder.encode( value ) );\n+         }\n+\n+         @Override void setFieldValue( Value value, Field field )\n+         {\n+             field.setStringValue( ArrayEncoder.encode( value ) );\n+         }\n+\n+         @Override Query encodeQuery( Value value, int propertyNumber )\n+         {\n+             return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), ArrayEncoder.encode( value ) ) ) );\n+         }\n+     }, Bool\n         {\n-            index++;\n-        }\n-        return index == 0 ? 0 : Integer.parseInt( fieldName.substring( 0, index ) );\n-    }\n-\n-    abstract boolean canEncode( Value value );\n-\n-    abstract Field encodeField( String name, Value value );\n+            @Override\n+            public String key()\n+            {\n+                return \"bool\";\n+            }\n \n-    abstract void setFieldValue( Value value, Field field );\n+            @Override\n+            boolean canEncode( Value value )\n+            {\n+                return Values.isBooleanValue( value );\n+            }\n \n-    abstract Query encodeQuery( Value value, int propertyNumber );\n+            @Override Field encodeField( String name, Value value )\n+            {\n+                return stringField( name, value.prettyPrint() );\n+            }\n \n-    public static ValueEncoding forKey( String key )\n-    {\n-        for ( ValueEncoding encoding : AllEncodings )\n-        {\n-            if ( key.endsWith( encoding.key( ) ) )\n+            @Override void setFieldValue( Value value, Field field )\n             {\n-                return encoding;\n+                field.setStringValue( value.prettyPrint() );\n             }\n-        }\n-        throw new IllegalArgumentException( \"Unknown key: \" + key );\n-    }\n \n-    public static ValueEncoding forValue( Value value )\n-    {\n-        for ( ValueEncoding encoding : AllEncodings )\n-        {\n-            if ( encoding.canEncode( value ) )\n+            @Override Query encodeQuery( Value value, int propertyNumber )\n             {\n-                return encoding;\n+                return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n             }\n-        }\n-        throw new IllegalStateException( \"Unable to encode the value \" + value );\n-    }\n-\n-    private static Field stringField( String identifier, String value )\n-    {\n-        return new StringField( identifier, value, NO );\n-    }\n-}\n+        }, Spatial\n+           {\n+               @Override\n+               public String key()\n+               {\n+                   return \"spatial\";\n+               }\n+\n+               @Override\n+               boolean canEncode( Value value )\n+               {\n+                   return Values.isGeometryValue( value );\n+               }\n+\n+               @Override Field encodeField( String name, Value value )\n+               {\n+                   PointValue pointVal = (PointValue) value;\n+                   return stringField( name, pointVal.toIndexableString() );\n+               }\n+\n+               @Override void setFieldValue( Value value, Field field )\n+               {\n+                   PointValue pointVal = (PointValue) value;\n+                   field.setStringValue( pointVal.toIndexableString() );\n+               }\n+\n+               @Override Query encodeQuery( Value value, int propertyNumber )\n+               {\n+                   PointValue pointVal = (PointValue) value;\n+                   return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), pointVal.toIndexableString() ) ) );\n+               }\n+           }, Temporal\n+              {\n+                  @Override\n+                  public String key()\n+                  {\n+                      return \"temporal\";\n+                  }\n+\n+                  @Override\n+                  boolean canEncode( Value value )\n+                  {\n+                      return Values.isTemporalValue( value );\n+                  }\n+\n+                  @Override Field encodeField( String name, Value value )\n+                  {\n+                      return stringField( name, value.prettyPrint() );\n+                  }\n+\n+                  @Override void setFieldValue( Value value, Field field )\n+                  {\n+                      field.setStringValue( value.prettyPrint() );\n+                  }\n+\n+                  @Override Query encodeQuery( Value value, int propertyNumber )\n+                  {\n+                      return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), value.prettyPrint() ) ) );\n+                  }\n+              }, String\n+                 {\n+                     @Override\n+                     public String key()\n+                     {\n+                         return \"string\";\n+                     }\n+\n+                     @Override\n+                     boolean canEncode( Value value )\n+                     {\n+                    // Any other type can be safely serialised as a string\n+                         return true;\n+                     }\n+\n+                     @Override Field encodeField( String name, Value value )\n+                     {\n+                         return stringField( name, value.asObject().toString() );\n+                     }\n+\n+                     @Override void setFieldValue( Value value, Field field )\n+                     {\n+                         field.setStringValue( value.asObject().toString() );\n+                     }\n+\n+                     @Override Query encodeQuery( Value value, int propertyNumber )\n+                     {\n+                         return new ConstantScoreQuery( new TermQuery( new Term( key( propertyNumber ), value.asObject().toString() ) ) );\n+                     }\n+                 }\n+\n+  ;\n+      private static final ValueEncoding[] AllEncodings = values();\n+\n+      public abstract String key()\n+      ;\n+\n+      String key( int propertyNumber )\n+      {\n+          if ( propertyNumber == 0 )\n+          {\n+              return key();\n+          }\n+\n+          return propertyNumber + key();\n+      }\n+\n+      static int fieldPropertyNumber( String fieldName )\n+      {\n+          int index = 0;\n+          for ( int i = 0; i < fieldName.length()&& Character.isDigit( fieldName.charAt( i ) ); i++ )\n+          {\n+              index++;\n+          }\n+\n+          return index == 0 ? 0 : Integer.parseInt( fieldName.substring( 0, index ) );\n+      }\n+\n+      abstract boolean canEncode( Value value )\n+      ;\n+\n+      abstract Field encodeField( String name, Value value )\n+      ;\n+\n+      abstract void setFieldValue( Value value, Field field )\n+      ;\n+\n+      abstract Query encodeQuery( Value value, int propertyNumber )\n+      ;\n+\n+      public static ValueEncoding forKey( String key )\n+      {\n+          for( ValueEncoding encoding : AllEncodings)\n+          {\n+              if ( key.endsWith( encoding.key() ) )\n+              {\n+                  return encoding;\n+              }\n+          }\n+\n+          throw new IllegalArgumentException( \"Unknown key: \" + key );\n+      }\n+\n+      public static ValueEncoding forValue( Value value )\n+      {\n+          for( ValueEncoding encoding : AllEncodings)\n+          {\n+              if ( encoding.canEncode( value ) )\n+              {\n+                  return encoding;\n+              }\n+          }\n+\n+          throw new IllegalStateException( \"Unable to encode the value \" + value );\n+      }\n+\n+      private static Field stringField( String identifier, String value )\n+      {\n+          return new StringField( identifier, value, NO );\n+      }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 418
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}