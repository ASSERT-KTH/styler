{
    "project_name": "neo4j-neo4j",
    "error_id": "1324",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1324/RelationshipLinkbackStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1324/RelationshipLinkbackStep.java\nindex 4bf3990303f..425158d28ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1324/RelationshipLinkbackStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1324/RelationshipLinkbackStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import java.util.function.Predicate;\n@@ -35,54 +36,54 @@ import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n  */\n public class RelationshipLinkbackStep extends RelationshipLinkStep\n {\n-    public RelationshipLinkbackStep( StageControl control, Configuration config,\n-            NodeRelationshipCache cache, Predicate<RelationshipRecord> filter, int nodeTypes,\n-            StatsProvider... additionalStatsProvider )\n+    public RelationshipLinkbackStep(StageControl control, Configuration config,\n+                                    NodeRelationshipCache cache, Predicate<RelationshipRecord> filter, int nodeTypes,\n+                                    StatsProvider... additionalStatsProvider)\n     {\n-        super( control, config, cache, filter, nodeTypes, false, additionalStatsProvider );\n+        super(control, config, cache, filter, nodeTypes, false, additionalStatsProvider);\n     }\n \n     @Override\n-    protected void linkStart( RelationshipRecord record )\n+    protected void linkStart(RelationshipRecord record)\n     {\n         int typeId = record.getType();\n-        long firstPrevRel = cache.getAndPutRelationship( record.getFirstNode(),\n-                typeId, Direction.OUTGOING, record.getId(), false );\n-        if ( firstPrevRel == IdMapper.ID_NOT_FOUND )\n+        long firstPrevRel = cache.getAndPutRelationship(record.getFirstNode(),\n+          typeId, Direction.OUTGOING, record.getId(), false);\n+        if (firstPrevRel == IdMapper.ID_NOT_FOUND)\n         {   // First one\n-            record.setFirstInFirstChain( true );\n-            firstPrevRel = cache.getCount( record.getFirstNode(), typeId, Direction.OUTGOING );\n+            record.setFirstInFirstChain(true);\n+            firstPrevRel = cache.getCount(record.getFirstNode(), typeId, Direction.OUTGOING);\n         }\n-        record.setFirstPrevRel( firstPrevRel );\n+        record.setFirstPrevRel(firstPrevRel);\n     }\n \n     @Override\n-    protected void linkEnd( RelationshipRecord record )\n+    protected void linkEnd(RelationshipRecord record)\n     {\n         int typeId = record.getType();\n-        long secondPrevRel = cache.getAndPutRelationship( record.getSecondNode(),\n-                typeId, Direction.INCOMING, record.getId(), false );\n-        if ( secondPrevRel == IdMapper.ID_NOT_FOUND )\n+        long secondPrevRel = cache.getAndPutRelationship(record.getSecondNode(),\n+          typeId, Direction.INCOMING, record.getId(), false);\n+        if (secondPrevRel == IdMapper.ID_NOT_FOUND)\n         {   // First one\n-            record.setFirstInSecondChain( true );\n-            secondPrevRel = cache.getCount( record.getSecondNode(), typeId, Direction.INCOMING );\n+            record.setFirstInSecondChain(true);\n+            secondPrevRel = cache.getCount(record.getSecondNode(), typeId, Direction.INCOMING);\n         }\n-        record.setSecondPrevRel( secondPrevRel );\n+        record.setSecondPrevRel(secondPrevRel);\n     }\n \n     @Override\n-    protected void linkLoop( RelationshipRecord record )\n+    protected void linkLoop(RelationshipRecord record)\n     {\n         int typeId = record.getType();\n-        long prevRel = cache.getAndPutRelationship( record.getFirstNode(),\n-                typeId, Direction.BOTH, record.getId(), false );\n-        if ( prevRel == IdMapper.ID_NOT_FOUND )\n+        long prevRel = cache.getAndPutRelationship(record.getFirstNode(),\n+          typeId, Direction.BOTH, record.getId(), false);\n+        if (prevRel == IdMapper.ID_NOT_FOUND)\n         {   // First one\n-            record.setFirstInFirstChain( true );\n-            record.setFirstInSecondChain( true );\n-            prevRel = cache.getCount( record.getFirstNode(), typeId, Direction.BOTH );\n+            record.setFirstInFirstChain(true);\n+            record.setFirstInSecondChain(true);\n+            prevRel = cache.getCount(record.getFirstNode(), typeId, Direction.BOTH);\n         }\n-        record.setFirstPrevRel( prevRel );\n-        record.setSecondPrevRel( prevRel );\n+        record.setFirstPrevRel(prevRel);\n+        record.setSecondPrevRel(prevRel);\n     }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}