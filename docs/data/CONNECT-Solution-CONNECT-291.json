{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "291",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.mpi.adapter.component;\n\nimport gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\nimport gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201306;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/291/PatientChecker.java\nindex a9bfcde657f..372587f36a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/291/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/291/PatientChecker.java\nindex a9bfcde657f..951acbe011e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/291/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n@@ -41,105 +42,103 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author Jon Hoppesch\n  */\n public class PatientChecker implements AdapterComponentMpiChecker {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(PatientChecker.class);\n-\n-    /**\n-     * Find matching patients from mpi.\n-     *\n-     * @param query request\n-     * @return response\n-     */\n-    @Override\n-    public PRPAIN201306UV02 findPatient(PRPAIN201305UV02 query) {\n-        LOG.trace(\"Entering PatientChecker.FindPatient method...\");\n-        PRPAIN201306UV02 result;\n-\n-        PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n-\n-        Patients filteredPatients = new Patients();\n-\n-        if (queryParams == null) {\n-            LOG.error(\"no query parameters were supplied\");\n-        } else {\n-            Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-            LOG.info(\"perform patient lookup in mpi\");\n-\n-            LOG.info(\"source patient check 1 [\" + sourcePatient.toString() + \"]\");\n-            Patients searchResults = MpiDataAccess.lookupPatients(sourcePatient);\n-            if (searchResults != null) {\n-                LOG.debug(\"searchResults.size(): \" + searchResults.size());\n-            } else {\n-                LOG.debug(\"No matching patient found\");\n-            }\n-\n-            List<String> dupOrgIds = new ArrayList<>();\n-            for (Patient patient : searchResults) {\n-                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n-                        && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n-\n-                    for (Patient tempPatient : filteredPatients) {\n-                        if ((tempPatient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(patient\n-                                .getIdentifiers().get(0).getOrganizationId())) {\n-                            dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n-                        }\n-                    }\n-                    filteredPatients.add(patient);\n-                }\n+  private static final Logger LOG = LoggerFactory.getLogger(PatientChecker.class);\n+\n+  /**\n+   * Find matching patients from mpi.\n+   *\n+   * @param query request\n+   * @return response\n+   */\n+  @Override\n+  public PRPAIN201306UV02 findPatient(PRPAIN201305UV02 query) {\n+    LOG.trace(\"Entering PatientChecker.FindPatient method...\");\n+    PRPAIN201306UV02 result;\n+\n+    PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n+\n+    Patients filteredPatients = new Patients();\n+\n+    if (queryParams == null) {\n+      LOG.error(\"no query parameters were supplied\");\n+    } else {\n+      Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n+      LOG.info(\"perform patient lookup in mpi\");\n+\n+      LOG.info(\"source patient check 1 [\" + sourcePatient.toString() + \"]\");\n+      Patients searchResults = MpiDataAccess.lookupPatients(sourcePatient);\n+      if (searchResults != null) {\n+        LOG.debug(\"searchResults.size(): \" + searchResults.size());\n+      } else {\n+        LOG.debug(\"No matching patient found\");\n+      }\n+\n+      List<String> dupOrgIds = new ArrayList<>();\n+      for (Patient patient : searchResults) {\n+        if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n+            && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n+\n+          for (Patient tempPatient : filteredPatients) {\n+            if ((tempPatient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(patient\n+                .getIdentifiers().get(0).getOrganizationId())) {\n+              dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n             }\n-\n-            if ((dupOrgIds != null) && (dupOrgIds.size() > 0)) {\n-                HashSet hashSet = new HashSet(dupOrgIds);\n-                dupOrgIds = new ArrayList(hashSet);\n-                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n-                        + dupOrgIds.size());\n-            }\n-\n-            for (Patient patient : searchResults) {\n-                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n-                        && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n-\n-                    for (String str : dupOrgIds) {\n-                        if ((patient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(str)) {\n-                            filteredPatients.remove(patient);\n-                        }\n-                    }\n-                }\n+          }\n+          filteredPatients.add(patient);\n+        }\n+      }\n+\n+      if ((dupOrgIds != null) && (dupOrgIds.size() > 0)) {\n+        HashSet hashSet = new HashSet(dupOrgIds);\n+        dupOrgIds = new ArrayList(hashSet);\n+        LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n+            + dupOrgIds.size());\n+      }\n+\n+      for (Patient patient : searchResults) {\n+        if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n+            && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n+\n+          for (String str : dupOrgIds) {\n+            if ((patient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(str)) {\n+              filteredPatients.remove(patient);\n             }\n-\n-            LOG.debug(\"After duplicates removed - filteredPatients.size(): \" + filteredPatients.size());\n+          }\n         }\n+      }\n \n-        result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n-\n-        LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n-        return result;\n+      LOG.debug(\"After duplicates removed - filteredPatients.size(): \" + filteredPatients.size());\n     }\n \n-    /**\n-     *\n-     * @param query the PRPAIN201305UV02\n-     * @return true - minimum params found; false - not found\n-     */\n-    @Override\n-    public boolean isNhinRequiredParamsFound(PRPAIN201305UV02 query) {\n-        boolean result = false;\n-\n-        PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n-        Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-\n-        if (sourcePatient != null && sourcePatient.getNames() != null && sourcePatient.getNames().size() > 0\n-                && sourcePatient.getNames().get(0) != null\n-                && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n-                && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n-                && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n-            result = true;\n-        }\n-\n-        return result;\n+    result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n+\n+    LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n+    return result;\n+  }\n+\n+  /**\n+   * @param query the PRPAIN201305UV02\n+   * @return true - minimum params found; false - not found\n+   */\n+  @Override\n+  public boolean isNhinRequiredParamsFound(PRPAIN201305UV02 query) {\n+    boolean result = false;\n+\n+    PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n+    Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n+\n+    if (sourcePatient != null && sourcePatient.getNames() != null && sourcePatient.getNames().size() > 0\n+        && sourcePatient.getNames().get(0) != null\n+        && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n+        && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n+        && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n+      result = true;\n     }\n+\n+    return result;\n+  }\n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 394).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/291/PatientChecker.java\nindex a9bfcde657f..23f5fccef5c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/291/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n@@ -62,8 +63,7 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n \n         Patients filteredPatients = new Patients();\n-\n-        if (queryParams == null) {\n+if (queryParams == null) {\n             LOG.error(\"no query parameters were supplied\");\n         } else {\n             Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n@@ -79,31 +79,24 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n \n             List<String> dupOrgIds = new ArrayList<>();\n             for (Patient patient : searchResults) {\n-                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n-                        && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n-\n-                    for (Patient tempPatient : filteredPatients) {\n-                        if ((tempPatient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(patient\n-                                .getIdentifiers().get(0).getOrganizationId())) {\n+                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0) && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n+    for (Patient tempPatient : filteredPatients) {\n+                        if ((tempPatient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(patient.getIdentifiers().get(0).getOrganizationId())) {\n                             dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n                         }\n                     }\n                     filteredPatients.add(patient);\n                 }\n             }\n-\n-            if ((dupOrgIds != null) && (dupOrgIds.size() > 0)) {\n+if ((dupOrgIds != null) && (dupOrgIds.size() > 0)) {\n                 HashSet hashSet = new HashSet(dupOrgIds);\n                 dupOrgIds = new ArrayList(hashSet);\n-                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n-                        + dupOrgIds.size());\n-            }\n+                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \" + dupOrgIds.size());\n+    }\n \n             for (Patient patient : searchResults) {\n-                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n-                        && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n-\n-                    for (String str : dupOrgIds) {\n+                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0) && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n+    for (String str : dupOrgIds) {\n                         if ((patient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(str)) {\n                             filteredPatients.remove(patient);\n                         }\n@@ -117,7 +110,8 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n         result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n \n         LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -131,15 +125,10 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n \n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n         Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-\n-        if (sourcePatient != null && sourcePatient.getNames() != null && sourcePatient.getNames().size() > 0\n-                && sourcePatient.getNames().get(0) != null\n-                && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n-                && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n-                && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n+if (sourcePatient != null && sourcePatient.getNames() != null && sourcePatient.getNames().size() > 0 && sourcePatient.getNames().get(0) != null && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName()) && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName()) && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n             result = true;\n         }\n \n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "67",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "77",
                    "column": "15",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "79",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "column": "55",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "87",
                    "column": "90",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "87",
                    "column": "94",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "column": "57",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "column": "55",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "90",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "94",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 396).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "column": "70",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "104",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "150",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "225",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "299",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "353",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/291/PatientChecker.java\nindex a9bfcde657f..b43fde1ac42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/291/PatientChecker.java\n@@ -44,6 +44,8 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Jon Hoppesch\n  */\n+\n+\n public class PatientChecker implements AdapterComponentMpiChecker {\n \n     private static final Logger LOG = LoggerFactory.getLogger(PatientChecker.class);\n@@ -54,55 +56,50 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n      * @param query request\n      * @return response\n      */\n+\n+\n     @Override\n     public PRPAIN201306UV02 findPatient(PRPAIN201305UV02 query) {\n         LOG.trace(\"Entering PatientChecker.FindPatient method...\");\n         PRPAIN201306UV02 result;\n-\n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n-\n         Patients filteredPatients = new Patients();\n-\n-        if (queryParams == null) {\n+        if(queryParams == null) {\n             LOG.error(\"no query parameters were supplied\");\n-        } else {\n+        }\n+\n+\n+else {\n             Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n             LOG.info(\"perform patient lookup in mpi\");\n-\n             LOG.info(\"source patient check 1 [\" + sourcePatient.toString() + \"]\");\n             Patients searchResults = MpiDataAccess.lookupPatients(sourcePatient);\n-            if (searchResults != null) {\n+            if(searchResults != null) {\n                 LOG.debug(\"searchResults.size(): \" + searchResults.size());\n-            } else {\n-                LOG.debug(\"No matching patient found\");\n             }\n \n+\n+else {\n+                LOG.debug(\"No matching patient found\");\n+            }\n             List<String> dupOrgIds = new ArrayList<>();\n             for (Patient patient : searchResults) {\n-                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n-                        && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n-\n+                if ((patient.getIdentifiers() != null)&& (patient.getIdentifiers().size()> 0)&& (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n                     for (Patient tempPatient : filteredPatients) {\n-                        if ((tempPatient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(patient\n-                                .getIdentifiers().get(0).getOrganizationId())) {\n+                        if ((tempPatient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(patient.getIdentifiers().get(0).getOrganizationId())) {\n                             dupOrgIds.add(patient.getIdentifiers().get(0).getOrganizationId());\n                         }\n                     }\n                     filteredPatients.add(patient);\n                 }\n             }\n-\n-            if ((dupOrgIds != null) && (dupOrgIds.size() > 0)) {\n+            if ((dupOrgIds != null) && (dupOrgIds.size()> 0)) {\n                 HashSet hashSet = new HashSet(dupOrgIds);\n                 dupOrgIds = new ArrayList(hashSet);\n-                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \"\n-                        + dupOrgIds.size());\n+                LOG.debug(\"More than one matching patient found in some organizations. dupOrgIds.size(): \" + dupOrgIds.size());\n             }\n-\n             for (Patient patient : searchResults) {\n-                if ((patient.getIdentifiers() != null) && (patient.getIdentifiers().size() > 0)\n-                        && (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n-\n+                if ((patient.getIdentifiers() != null)&& (patient.getIdentifiers().size()> 0)&& (patient.getIdentifiers().get(0).getOrganizationId() != null)) {\n                     for (String str : dupOrgIds) {\n                         if ((patient.getIdentifiers().get(0).getOrganizationId()).equalsIgnoreCase(str)) {\n                             filteredPatients.remove(patient);\n@@ -110,12 +107,9 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n                     }\n                 }\n             }\n-\n             LOG.debug(\"After duplicates removed - filteredPatients.size(): \" + filteredPatients.size());\n         }\n-\n         result = HL7Parser201306.buildMessageFromMpiPatient(filteredPatients, query);\n-\n         LOG.trace(\"Exiting PatientChecker.FindPatient method...\");\n         return result;\n     }\n@@ -125,21 +119,17 @@ public class PatientChecker implements AdapterComponentMpiChecker {\n      * @param query the PRPAIN201305UV02\n      * @return true - minimum params found; false - not found\n      */\n+\n+\n     @Override\n     public boolean isNhinRequiredParamsFound(PRPAIN201305UV02 query) {\n         boolean result = false;\n-\n         PRPAMT201306UV02ParameterList queryParams = HL7Parser201305.extractHL7QueryParamsFromMessage(query);\n         Patient sourcePatient = HL7Parser201305.extractMpiPatientFromQueryParams(queryParams);\n-\n-        if (sourcePatient != null && sourcePatient.getNames() != null && sourcePatient.getNames().size() > 0\n-                && sourcePatient.getNames().get(0) != null\n-                && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())\n-                && NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())\n-                && NullChecker.isNotNullish(sourcePatient.getGender()) && sourcePatient.getDateOfBirth() != null) {\n+        if (sourcePatient != null && sourcePatient.getNames() != null&& sourcePatient.getNames().size()> 0 && sourcePatient.getNames().get(0) != null&& NullChecker.isNotNullish(sourcePatient.getNames().get(0).getFirstName())&& NullChecker.isNotNullish(sourcePatient.getNames().get(0).getLastName())&& NullChecker.isNotNullish(sourcePatient.getGender())&& sourcePatient.getDateOfBirth() != null) {\n             result = true;\n         }\n-\n         return result;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/291/PatientChecker.java\nindex a9bfcde657f..2bb16b264b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/291/PatientChecker.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n-\n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201306;\n import gov.hhs.fha.nhinc.mpilib.Patient;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/291/PatientChecker.java\nindex a9bfcde657f..372587f36a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/291/PatientChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/291/PatientChecker.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.component;\n \n import gov.hhs.fha.nhinc.mpi.adapter.component.hl7parsers.HL7Parser201305;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}