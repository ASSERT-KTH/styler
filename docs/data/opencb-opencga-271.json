{
    "project_name": "opencb-opencga",
    "error_id": "271",
    "information": {
        "errors": [
            {
                "line": "104",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 147).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * This method attempts to load storage configuration from OpenCGA installation folder, if not exists then loads JAR storage-configuration.yml.\n     *\n     * @throws IOException If any IO problem occurs\n     */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/271/OpenCgaAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/271/OpenCgaAnalysis.java\nindex 453da2bb95a..8f84d0fabbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/271/OpenCgaAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/271/OpenCgaAnalysis.java\n@@ -46,104 +46,105 @@ import java.util.List;\n \n public abstract class OpenCgaAnalysis extends OskarAnalysis {\n \n-    protected CatalogManager catalogManager;\n-    protected Configuration configuration;\n-    protected StorageConfiguration storageConfiguration;\n-    protected VariantStorageManager variantStorageManager;\n+  protected CatalogManager catalogManager;\n+  protected Configuration configuration;\n+  protected StorageConfiguration storageConfiguration;\n+  protected VariantStorageManager variantStorageManager;\n \n-    protected String opencgaHome;\n-    protected String studyId;\n-    protected String sessionId;\n+  protected String opencgaHome;\n+  protected String studyId;\n+  protected String sessionId;\n \n-    protected Logger logger;\n+  protected Logger logger;\n \n-    public OpenCgaAnalysis(String studyId, String opencgaHome, String sessionId) {\n-        this.studyId = studyId;\n-        this.opencgaHome = opencgaHome;\n-        this.sessionId = sessionId;\n+  public OpenCgaAnalysis(String studyId, String opencgaHome, String sessionId) {\n+    this.studyId = studyId;\n+    this.opencgaHome = opencgaHome;\n+    this.sessionId = sessionId;\n \n //        init();\n-    }\n+  }\n \n //    public abstract AnalysisResult<T> execute() throws Exception;\n \n-    void init() {\n-        logger = LoggerFactory.getLogger(this.getClass().toString());\n+  void init() {\n+    logger = LoggerFactory.getLogger(this.getClass().toString());\n \n-        try {\n-            loadConfiguration();\n-            loadStorageConfiguration();\n+    try {\n+      loadConfiguration();\n+      loadStorageConfiguration();\n \n-            this.catalogManager = new CatalogManager(configuration);\n-            this.variantStorageManager = new VariantStorageManager(catalogManager, StorageEngineFactory.get(storageConfiguration));\n-        } catch (IOException | CatalogException e) {\n-            e.printStackTrace();\n-        }\n+      this.catalogManager = new CatalogManager(configuration);\n+      this.variantStorageManager = new VariantStorageManager(catalogManager, StorageEngineFactory.get(storageConfiguration));\n+    } catch (IOException | CatalogException e) {\n+      e.printStackTrace();\n     }\n-    /**\n-     * This method attempts to load general configuration from OpenCGA installation folder, if not exists then loads JAR configuration.yml.\n-     *\n-     * @throws IOException If any IO problem occurs\n-     */\n-    public void loadConfiguration() throws IOException {\n-        FileUtils.checkDirectory(Paths.get(this.opencgaHome));\n-\n-        // We load configuration file either from app home folder or from the JAR\n-        Path path = Paths.get(this.opencgaHome).resolve(\"conf\").resolve(\"configuration.yml\");\n-        if (Files.exists(path)) {\n-            logger.debug(\"Loading configuration from '{}'\", path.toAbsolutePath());\n-            this.configuration = Configuration.load(new FileInputStream(path.toFile()));\n-        } else {\n-            logger.debug(\"Loading configuration from JAR file\");\n-            this.configuration = Configuration\n-                    .load(Configuration.class.getClassLoader().getResourceAsStream(\"configuration.yml\"));\n-        }\n+  }\n+\n+  /**\n+   * This method attempts to load general configuration from OpenCGA installation folder, if not exists then loads JAR configuration.yml.\n+   *\n+   * @throws IOException If any IO problem occurs\n+   */\n+  public void loadConfiguration() throws IOException {\n+    FileUtils.checkDirectory(Paths.get(this.opencgaHome));\n+\n+    // We load configuration file either from app home folder or from the JAR\n+    Path path = Paths.get(this.opencgaHome).resolve(\"conf\").resolve(\"configuration.yml\");\n+    if (Files.exists(path)) {\n+      logger.debug(\"Loading configuration from '{}'\", path.toAbsolutePath());\n+      this.configuration = Configuration.load(new FileInputStream(path.toFile()));\n+    } else {\n+      logger.debug(\"Loading configuration from JAR file\");\n+      this.configuration = Configuration\n+          .load(Configuration.class.getClassLoader().getResourceAsStream(\"configuration.yml\"));\n     }\n-\n-    /**\n-     * This method attempts to load storage configuration from OpenCGA installation folder, if not exists then loads JAR storage-configuration.yml.\n-     *\n-     * @throws IOException If any IO problem occurs\n-     */\n-    public void loadStorageConfiguration() throws IOException {\n-        FileUtils.checkDirectory(Paths.get(this.opencgaHome));\n-\n-        // We load configuration file either from app home folder or from the JAR\n-        Path path = Paths.get(this.opencgaHome).resolve(\"conf\").resolve(\"storage-configuration.yml\");\n-        if (Files.exists(path)) {\n-            logger.debug(\"Loading storage configuration from '{}'\", path.toAbsolutePath());\n-            this.storageConfiguration = StorageConfiguration.load(new FileInputStream(path.toFile()));\n-        } else {\n-            logger.debug(\"Loading storage configuration from JAR file\");\n-            this.storageConfiguration = StorageConfiguration\n-                    .load(StorageConfiguration.class.getClassLoader().getResourceAsStream(\"storage-configuration.yml\"));\n-        }\n+  }\n+\n+  /**\n+   * This method attempts to load storage configuration from OpenCGA installation folder, if not exists then loads JAR storage-configuration.yml.\n+   *\n+   * @throws IOException If any IO problem occurs\n+   */\n+  public void loadStorageConfiguration() throws IOException {\n+    FileUtils.checkDirectory(Paths.get(this.opencgaHome));\n+\n+    // We load configuration file either from app home folder or from the JAR\n+    Path path = Paths.get(this.opencgaHome).resolve(\"conf\").resolve(\"storage-configuration.yml\");\n+    if (Files.exists(path)) {\n+      logger.debug(\"Loading storage configuration from '{}'\", path.toAbsolutePath());\n+      this.storageConfiguration = StorageConfiguration.load(new FileInputStream(path.toFile()));\n+    } else {\n+      logger.debug(\"Loading storage configuration from JAR file\");\n+      this.storageConfiguration = StorageConfiguration\n+          .load(StorageConfiguration.class.getClassLoader().getResourceAsStream(\"storage-configuration.yml\"));\n     }\n+  }\n \n-    protected Analyst getAnalyst(String token) throws AnalysisException {\n-        try {\n-            String userId = catalogManager.getUserManager().getUserId(token);\n-            QueryResult<User> userQueryResult = catalogManager.getUserManager().get(userId, new QueryOptions(QueryOptions.INCLUDE,\n-                    Arrays.asList(UserDBAdaptor.QueryParams.EMAIL.key(), UserDBAdaptor.QueryParams.ORGANIZATION.key())), token);\n+  protected Analyst getAnalyst(String token) throws AnalysisException {\n+    try {\n+      String userId = catalogManager.getUserManager().getUserId(token);\n+      QueryResult<User> userQueryResult = catalogManager.getUserManager().get(userId, new QueryOptions(QueryOptions.INCLUDE,\n+          Arrays.asList(UserDBAdaptor.QueryParams.EMAIL.key(), UserDBAdaptor.QueryParams.ORGANIZATION.key())), token);\n \n-            return new Analyst(userId, userQueryResult.first().getEmail(), userQueryResult.first().getOrganization());\n-        } catch (CatalogException e) {\n-            throw new AnalysisException(e.getMessage(), e);\n-        }\n+      return new Analyst(userId, userQueryResult.first().getEmail(), userQueryResult.first().getOrganization());\n+    } catch (CatalogException e) {\n+      throw new AnalysisException(e.getMessage(), e);\n     }\n+  }\n+\n+  protected List<String> getGeneIdsFromDiseasePanels(List<DiseasePanel> diseasePanels) {\n+    List<String> geneIds = new ArrayList<>();\n \n-    protected List<String> getGeneIdsFromDiseasePanels(List<DiseasePanel> diseasePanels) {\n-        List<String> geneIds = new ArrayList<>();\n-\n-        if (CollectionUtils.isNotEmpty(diseasePanels)) {\n-            for (DiseasePanel diseasePanel : diseasePanels) {\n-                if (diseasePanel != null && CollectionUtils.isNotEmpty(diseasePanel.getGenes())) {\n-                    for (DiseasePanel.GenePanel gene : diseasePanel.getGenes()) {\n-                        geneIds.add(gene.getId());\n-                    }\n-                }\n-            }\n+    if (CollectionUtils.isNotEmpty(diseasePanels)) {\n+      for (DiseasePanel diseasePanel : diseasePanels) {\n+        if (diseasePanel != null && CollectionUtils.isNotEmpty(diseasePanel.getGenes())) {\n+          for (DiseasePanel.GenePanel gene : diseasePanel.getGenes()) {\n+            geneIds.add(gene.getId());\n+          }\n         }\n-        return geneIds;\n+      }\n     }\n+    return geneIds;\n+  }\n }\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/271/OpenCgaAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/271/OpenCgaAnalysis.java\nindex 453da2bb95a..53507b8086d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/271/OpenCgaAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/271/OpenCgaAnalysis.java\n@@ -146,4 +146,4 @@ public abstract class OpenCgaAnalysis extends OskarAnalysis {\n         }\n         return geneIds;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}