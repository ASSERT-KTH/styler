{
    "project_name": "h2database-h2database",
    "error_id": "36",
    "information": {
        "errors": [
            {
                "line": "2019",
                "column": "70",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n        debugCodeCall(\"supportsMixedCaseIdentifiers\");\n        SessionInterface.StaticSettings settings = conn.getStaticSettings();\n        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/36/JdbcDatabaseMetaData.java\nindex d78d4a53cc3..5bfd79b6c5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/36/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/36/JdbcDatabaseMetaData.java\nindex d78d4a53cc3..379f9499b93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/36/JdbcDatabaseMetaData.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.sql.Connection;\n@@ -132,17 +133,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SQL (String) the create table statement or NULL for systems tables.</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param types null or a list of table types\n+     *                         (uppercase for unquoted names)\n+     * @param types            null or a list of table types\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n+    public ResultSet getTables(String catalog, String schemaPattern,\n+                               String tableNamePattern, String[] types)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n@@ -150,7 +152,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n                         quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n                         \", \" + quoteArray(types) + \");\");\n             }\n-            return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n+            return getResultSet(\n+                    meta.getTables(catalog, schemaPattern, tableNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -188,27 +192,30 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>IS_GENERATEDCOLUMN (String) \"NO\" or \"YES\"</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern,\n+                                String tableNamePattern,\n+                                String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(\n+                    meta.getColumns(catalog, schemaPattern, tableNamePattern,\n+                            columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -239,17 +246,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>FILTER_CONDITION (String) filter condition (always empty)</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param unique only unique indexes\n+     * @param catalog     null or the catalog name\n+     * @param schema      null (to get all objects) or a schema name\n+     *                    (uppercase for unquoted names)\n+     * @param table       table name (must be specified)\n+     * @param unique      only unique indexes\n      * @param approximate if true, return fast, but approximate CARDINALITY\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n+    public ResultSet getIndexInfo(String catalog, String schema, String table,\n+                                  boolean unique, boolean approximate)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n@@ -257,7 +265,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n                         quote(schema) + \", \" + quote(table) + \", \" +\n                         unique + \", \" + approximate + \");\");\n             }\n-            return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n+            return getResultSet(\n+                    meta.getIndexInfo(catalog, schema, table, unique,\n+                            approximate));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -277,20 +287,21 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     *                (uppercase for unquoted names)\n+     * @param table   table name (must be specified)\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getPrimaryKeys(String catalog, String schema, String table)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -370,7 +381,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Checks if NULL is sorted high (bigger than anything that is not null).\n      *\n      * @return false by default; true if the system property h2.sortNullsHigh is\n-     *         set to true\n+     * set to true\n      */\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n@@ -386,7 +397,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Checks if NULL is sorted low (smaller than anything that is not null).\n      *\n      * @return true by default; false if the system property h2.sortNullsHigh is\n-     *         set to true\n+     * set to true\n      */\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n@@ -452,24 +463,26 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+                                   String procedureNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n+            return getResultSet(meta.getProcedures(catalog, schemaPattern,\n+                    procedureNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -509,28 +522,31 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n-     * @param columnNamePattern the procedure name pattern\n+     * @param columnNamePattern    the procedure name pattern\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n+                                         String procedureNamePattern,\n+                                         String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+                    meta.getProcedureColumns(catalog, schemaPattern,\n+                            procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -616,27 +632,29 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table a table name (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schema            null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param table             a table name (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n+    public ResultSet getColumnPrivileges(String catalog, String schema,\n+                                         String table, String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n+            return getResultSet(meta.getColumnPrivileges(catalog, schema, table,\n+                    columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -658,26 +676,28 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n+                                        String tableNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -699,27 +719,31 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>PSEUDO_COLUMN (short) (always bestRowNotPseudo)</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param scope ignored\n+     * @param catalog  null (to get all objects) or the catalog name\n+     * @param schema   null (to get all objects) or a schema name\n+     *                 (uppercase for unquoted names)\n+     * @param table    table name (must be specified)\n+     * @param scope    ignored\n      * @param nullable ignored\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n+    public ResultSet getBestRowIdentifier(String catalog, String schema,\n+                                          String table, int scope,\n+                                          boolean nullable)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \", \"\n+                        + scope + \", \" + nullable + \");\");\n             }\n-            return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n+            return getResultSet(\n+                    meta.getBestRowIdentifier(catalog, schema, table, scope,\n+                            nullable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -742,19 +766,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     * @param table   table name (must be specified)\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getVersionColumns(String catalog, String schema,\n+                                       String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -788,19 +813,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema the schema name of the foreign table\n-     * @param table the name of the foreign table\n+     * @param schema  the schema name of the foreign table\n+     * @param table   the name of the foreign table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getImportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -834,19 +860,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema the schema name of the primary table\n-     * @param table the name of the primary table\n+     * @param schema  the schema name of the primary table\n+     * @param table   the name of the primary table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getExportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schema) + \", \"\n+                        + quote(table) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -881,31 +908,38 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param primaryCatalog null or the catalog name\n-     * @param primarySchema the schema name of the primary table\n-     *          (optional)\n-     * @param primaryTable the name of the primary table (must be specified)\n+     * @param primarySchema  the schema name of the primary table\n+     *                       (optional)\n+     * @param primaryTable   the name of the primary table (must be specified)\n      * @param foreignCatalog null or the catalog name\n-     * @param foreignSchema the schema name of the foreign table\n-     *          (optional)\n-     * @param foreignTable the name of the foreign table (must be specified)\n+     * @param foreignSchema  the schema name of the foreign table\n+     *                       (optional)\n+     * @param foreignTable   the name of the foreign table (must be specified)\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog,\n+                                       String primarySchema,\n+                                       String primaryTable,\n+                                       String foreignCatalog,\n+                                       String foreignSchema,\n+                                       String foreignTable)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                        + quote(primaryCatalog) + \", \"\n+                        + quote(primarySchema) + \", \"\n+                        + quote(primaryTable) + \", \"\n+                        + quote(foreignCatalog) + \", \"\n+                        + quote(foreignSchema) + \", \"\n+                        + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(\n+                    meta.getCrossReference(primaryCatalog, primarySchema,\n+                            primaryTable, foreignCatalog,\n+                            foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -925,25 +959,28 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>BASE_TYPE (short) base type - see also java.sql.Types</li>\n      * </ol>\n      *\n-     * @param catalog ignored\n-     * @param schemaPattern ignored\n+     * @param catalog         ignored\n+     * @param schemaPattern   ignored\n      * @param typeNamePattern ignored\n-     * @param types ignored\n+     * @param types           ignored\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+                             String typeNamePattern, int[] types)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quoteIntArray(types) + \");\");\n             }\n-            return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n+            return getResultSet(\n+                    meta.getUDTs(catalog, schemaPattern, typeNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1102,7 +1139,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * patterns.\n      *\n      * @return the default escape character (always '\\', independent on the\n-     *         mode)\n+     * mode)\n      */\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n@@ -1128,6 +1165,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n \n     /**\n      * Returns whether alter table with add column is supported.\n+     *\n      * @return true\n      */\n     @Override\n@@ -1184,13 +1222,13 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether CONVERT is supported for one datatype to another.\n      *\n      * @param fromType the source SQL type\n-     * @param toType the target SQL type\n+     * @param toType   the target SQL type\n      * @return true\n      */\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \" + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1780,17 +1818,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true\n      */\n     @Override\n-    public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n+    public boolean supportsTransactionIsolationLevel(int level)\n+            throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n         switch (level) {\n-        case Connection.TRANSACTION_READ_UNCOMMITTED:\n-        case Connection.TRANSACTION_READ_COMMITTED:\n-        case Connection.TRANSACTION_REPEATABLE_READ:\n-        case Constants.TRANSACTION_SNAPSHOT:\n-        case Connection.TRANSACTION_SERIALIZABLE:\n-            return true;\n-        default:\n-            return false;\n+            case Connection.TRANSACTION_READ_UNCOMMITTED:\n+            case Connection.TRANSACTION_READ_COMMITTED:\n+            case Connection.TRANSACTION_REPEATABLE_READ:\n+            case Constants.TRANSACTION_SNAPSHOT:\n+            case Connection.TRANSACTION_SERIALIZABLE:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -1856,14 +1895,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether a specific result set concurrency is supported.\n      * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n      *\n-     * @param type the result set type\n+     * @param type        the result set type\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \" +\n+                    concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -2016,10 +2056,11 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                !settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2056,7 +2097,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2375,15 +2417,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n+    public ResultSet getSuperTypes(String catalog, String schemaPattern,\n+                                   String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n+            return getResultSet(meta.getSuperTypes(catalog, schemaPattern,\n+                    typeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2399,24 +2443,26 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * <li>SUPERTABLE_NAME (String) the name of the super table</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name pattern\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return an empty result set\n      */\n     @Override\n     public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+                                    String tableNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getSuperTables(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2426,17 +2472,21 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern,\n+                                   String typeNamePattern,\n+                                   String attributeNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quote(attributeNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n+            return getResultSet(\n+                    meta.getAttributes(catalog, schemaPattern, typeNamePattern,\n+                            attributeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2446,7 +2496,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Does this database supports a result set holdability.\n      *\n      * @param holdability ResultSet.HOLD_CURSORS_OVER_COMMIT or\n-     *            CLOSE_CURSORS_AT_COMMIT\n+     *                    CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n     @Override\n@@ -2578,8 +2628,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * </ol>\n      *\n      * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n@@ -2629,12 +2679,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()),\n+                    ValueInteger.get(Integer.MAX_VALUE),\n+                    ValueVarchar.EMPTY, ValueVarchar.EMPTY,\n+                    ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                    \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2674,18 +2727,20 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      */\n     @Override\n     public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n+                                        String functionNamePattern,\n+                                        String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+                    meta.getFunctionColumns(catalog, schemaPattern,\n+                            functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2696,15 +2751,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      */\n     @Override\n     public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+                                  String functionNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n+            return getResultSet(meta.getFunctions(catalog, schemaPattern,\n+                    functionNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2724,26 +2781,29 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      */\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern,\n+                                      String tableNamePattern,\n+                                      String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern,\n+                    tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2758,7 +2818,8 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn, null, null, result,\n+                getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n }\n",
            "diff_size": 259
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/36/JdbcDatabaseMetaData.java\nindex d78d4a53cc3..4f49bcbf2b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/36/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2761,4 +2761,4 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/36/JdbcDatabaseMetaData.java\nindex d78d4a53cc3..4f8cf19467e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/36/JdbcDatabaseMetaData.java\n@@ -12,7 +12,6 @@ import java.sql.RowIdLifetime;\n import java.sql.SQLException;\n import java.util.Map.Entry;\n import java.util.Properties;\n-\n import org.h2.engine.Constants;\n import org.h2.engine.SessionInterface;\n import org.h2.jdbc.meta.DatabaseMeta;\n@@ -28,11 +27,11 @@ import org.h2.value.ValueVarchar;\n /**\n  * Represents the meta data for a database.\n  */\n-public class JdbcDatabaseMetaData extends TraceObject implements\n-        DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n \n-    private final JdbcConnection conn;\n \n+public class JdbcDatabaseMetaData extends TraceObject implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+\n+    private final JdbcConnection conn;\n     private final DatabaseMeta meta;\n \n     JdbcDatabaseMetaData(JdbcConnection conn, Trace trace, int id) {\n@@ -46,6 +45,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version number\n      */\n+\n     @Override\n     public int getDriverMajorVersion() {\n         debugCodeCall(\"getDriverMajorVersion\");\n@@ -57,6 +57,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version number\n      */\n+\n     @Override\n     public int getDriverMinorVersion() {\n         debugCodeCall(\"getDriverMinorVersion\");\n@@ -68,6 +69,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product name (\"H2\")\n      */\n+\n     @Override\n     public String getDatabaseProductName() {\n         debugCodeCall(\"getDatabaseProductName\");\n@@ -81,6 +83,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the product version\n      */\n+\n     @Override\n     public String getDatabaseProductVersion() throws SQLException {\n         try {\n@@ -96,6 +99,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the driver name (\"H2 JDBC Driver\")\n      */\n+\n     @Override\n     public String getDriverName() {\n         debugCodeCall(\"getDriverName\");\n@@ -108,6 +112,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the version number\n      */\n+\n     @Override\n     public String getDriverVersion() {\n         debugCodeCall(\"getDriverVersion\");\n@@ -141,14 +146,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n-            throws SQLException {\n+    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTables(\" + quote(catalog) + \", \" +\n-                        quote(schemaPattern) + \", \" + quote(tableNamePattern) +\n-                        \", \" + quoteArray(types) + \");\");\n+                debugCode(\"getTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quoteArray(types) + \");\");\n             }\n             return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n         } catch (Exception e) {\n@@ -198,15 +204,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -248,14 +254,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n-            throws SQLException {\n+    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" +\n-                        quote(schema) + \", \" + quote(table) + \", \" +\n-                        unique + \", \" + approximate + \");\");\n+                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + unique + \", \"\n+                + approximate + \");\");\n             }\n             return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n         } catch (Exception e) {\n@@ -283,14 +291,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPrimaryKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getPrimaryKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -303,6 +311,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allProceduresAreCallable() {\n         debugCodeCall(\"allProceduresAreCallable\");\n@@ -314,6 +323,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean allTablesAreSelectable() {\n         debugCodeCall(\"allTablesAreSelectable\");\n@@ -325,6 +335,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the url\n      */\n+\n     @Override\n     public String getURL() throws SQLException {\n         try {\n@@ -341,6 +352,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the user name\n      */\n+\n     @Override\n     public String getUserName() throws SQLException {\n         try {\n@@ -356,6 +368,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return if read only optimization is switched on\n      */\n+\n     @Override\n     public boolean isReadOnly() throws SQLException {\n         try {\n@@ -372,6 +385,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return false by default; true if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedHigh() throws SQLException {\n         try {\n@@ -388,6 +402,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true by default; false if the system property h2.sortNullsHigh is\n      *         set to true\n      */\n+\n     @Override\n     public boolean nullsAreSortedLow() throws SQLException {\n         try {\n@@ -404,6 +419,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtStart() {\n         debugCodeCall(\"nullsAreSortedAtStart\");\n@@ -415,6 +431,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean nullsAreSortedAtEnd() {\n         debugCodeCall(\"nullsAreSortedAtEnd\");\n@@ -426,6 +443,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the connection\n      */\n+\n     @Override\n     public Connection getConnection() {\n         debugCodeCall(\"getConnection\");\n@@ -459,15 +477,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+    public ResultSet getProcedures(String catalog, String schemaPattern, String procedureNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\");\");\n+                debugCode(\"getProcedures(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \");\");\n             }\n             return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n         } catch (Exception e) {\n@@ -517,20 +534,18 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedureColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getProcedureColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(procedureNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             checkClosed();\n-            return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+            return getResultSet(meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -548,6 +563,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getSchemas() throws SQLException {\n         try {\n@@ -569,6 +585,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the catalog list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getCatalogs() throws SQLException {\n         try {\n@@ -589,6 +606,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the table types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTableTypes() throws SQLException {\n         try {\n@@ -625,16 +643,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumnPrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getColumnPrivileges(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n         } catch (Exception e) {\n@@ -666,15 +683,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n-            throws SQLException {\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTablePrivileges(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getTablePrivileges(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             checkClosed();\n             return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n@@ -708,16 +724,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n-            throws SQLException {\n+    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getBestRowIdentifier(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\", \"\n-                        +scope+\", \"+nullable+\");\");\n+                debugCode(\"getBestRowIdentifier(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \", \"\n+                + scope + \", \"\n+                + nullable + \");\");\n             }\n             return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n         } catch (Exception e) {\n@@ -747,14 +763,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getVersionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getVersionColumns(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -793,14 +809,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getImportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getImportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -839,14 +855,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getExportedKeys(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schema)+\", \"\n-                        +quote(table)+\");\");\n+                debugCode(\"getExportedKeys(\" + quote(catalog) + \", \"\n+                + quote(schema) + \", \"\n+                + quote(table) + \");\");\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -891,21 +907,19 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable, String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getCrossReference(\"\n-                        +quote(primaryCatalog)+\", \"\n-                        +quote(primarySchema)+\", \"\n-                        +quote(primaryTable)+\", \"\n-                        +quote(foreignCatalog)+\", \"\n-                        +quote(foreignSchema)+\", \"\n-                        +quote(foreignTable)+\");\");\n+                debugCode(\"getCrossReference(\" + quote(primaryCatalog) + \", \"\n+                + quote(primarySchema) + \", \"\n+                + quote(primaryTable) + \", \"\n+                + quote(foreignCatalog) + \", \"\n+                + quote(foreignSchema) + \", \"\n+                + quote(foreignTable) + \");\");\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog, foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -932,16 +946,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+    public ResultSet getUDTs(String catalog, String schemaPattern, String typeNamePattern, int[] types) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+\");\");\n+                debugCode(\"getUDTs(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quoteIntArray(types) + \");\");\n             }\n             return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n         } catch (Exception e) {\n@@ -978,6 +991,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the list of data types\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n     public ResultSet getTypeInfo() throws SQLException {\n         try {\n@@ -993,6 +1007,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean usesLocalFiles() {\n         debugCodeCall(\"usesLocalFiles\");\n@@ -1004,6 +1019,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean usesLocalFilePerTable() {\n         debugCodeCall(\"usesLocalFilePerTable\");\n@@ -1015,6 +1031,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a double quote\n      */\n+\n     @Override\n     public String getIdentifierQuoteString() {\n         debugCodeCall(\"getIdentifierQuoteString\");\n@@ -1027,6 +1044,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return a list of additional the keywords\n      */\n+\n     @Override\n     public String getSQLKeywords() throws SQLException {\n         try {\n@@ -1042,6 +1060,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getNumericFunctions() throws SQLException {\n         try {\n@@ -1057,6 +1076,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getStringFunctions() throws SQLException {\n         try {\n@@ -1072,6 +1092,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getSystemFunctions() throws SQLException {\n         try {\n@@ -1087,6 +1108,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the list\n      */\n+\n     @Override\n     public String getTimeDateFunctions() throws SQLException {\n         try {\n@@ -1104,6 +1126,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the default escape character (always '\\', independent on the\n      *         mode)\n      */\n+\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n         try {\n@@ -1120,6 +1143,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return an empty String (\"\")\n      */\n+\n     @Override\n     public String getExtraNameCharacters() {\n         debugCodeCall(\"getExtraNameCharacters\");\n@@ -1130,6 +1154,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * Returns whether alter table with add column is supported.\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithAddColumn() {\n         debugCodeCall(\"supportsAlterTableWithAddColumn\");\n@@ -1141,6 +1166,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsAlterTableWithDropColumn() {\n         debugCodeCall(\"supportsAlterTableWithDropColumn\");\n@@ -1152,6 +1178,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsColumnAliasing() {\n         debugCodeCall(\"supportsColumnAliasing\");\n@@ -1163,6 +1190,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean nullPlusNonNullIsNull() {\n         debugCodeCall(\"nullPlusNonNullIsNull\");\n@@ -1174,6 +1202,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert() {\n         debugCodeCall(\"supportsConvert\");\n@@ -1187,10 +1216,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param toType the target SQL type\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsConvert(int fromType, int toType) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsConvert(\"+fromType+\", \"+fromType+\");\");\n+            debugCode(\"supportsConvert(\" + fromType + \", \"\n+            + fromType + \");\");\n         }\n         return true;\n     }\n@@ -1200,6 +1231,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTableCorrelationNames() {\n         debugCodeCall(\"supportsTableCorrelationNames\");\n@@ -1212,6 +1244,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDifferentTableCorrelationNames() {\n         debugCodeCall(\"supportsDifferentTableCorrelationNames\");\n@@ -1223,6 +1256,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsExpressionsInOrderBy() {\n         debugCodeCall(\"supportsExpressionsInOrderBy\");\n@@ -1235,6 +1269,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOrderByUnrelated() {\n         debugCodeCall(\"supportsOrderByUnrelated\");\n@@ -1246,6 +1281,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupBy() {\n         debugCodeCall(\"supportsGroupBy\");\n@@ -1258,6 +1294,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByUnrelated() {\n         debugCodeCall(\"supportsGroupByUnrelated\");\n@@ -1271,6 +1308,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGroupByBeyondSelect() {\n         debugCodeCall(\"supportsGroupByBeyondSelect\");\n@@ -1282,6 +1320,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLikeEscapeClause() {\n         debugCodeCall(\"supportsLikeEscapeClause\");\n@@ -1293,6 +1332,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsMultipleResultSets() {\n         debugCodeCall(\"supportsMultipleResultSets\");\n@@ -1305,6 +1345,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleTransactions() {\n         debugCodeCall(\"supportsMultipleTransactions\");\n@@ -1316,6 +1357,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsNonNullableColumns() {\n         debugCodeCall(\"supportsNonNullableColumns\");\n@@ -1327,6 +1369,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMinimumSQLGrammar() {\n         debugCodeCall(\"supportsMinimumSQLGrammar\");\n@@ -1338,6 +1381,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCoreSQLGrammar() {\n         debugCodeCall(\"supportsCoreSQLGrammar\");\n@@ -1349,6 +1393,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsExtendedSQLGrammar() {\n         debugCodeCall(\"supportsExtendedSQLGrammar\");\n@@ -1360,6 +1405,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsANSI92EntryLevelSQL() {\n         debugCodeCall(\"supportsANSI92EntryLevelSQL\");\n@@ -1371,6 +1417,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92IntermediateSQL() {\n         debugCodeCall(\"supportsANSI92IntermediateSQL\");\n@@ -1382,6 +1429,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsANSI92FullSQL() {\n         debugCodeCall(\"supportsANSI92FullSQL\");\n@@ -1393,6 +1441,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsIntegrityEnhancementFacility() {\n         debugCodeCall(\"supportsIntegrityEnhancementFacility\");\n@@ -1404,6 +1453,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOuterJoins() {\n         debugCodeCall(\"supportsOuterJoins\");\n@@ -1415,6 +1465,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsFullOuterJoins() {\n         debugCodeCall(\"supportsFullOuterJoins\");\n@@ -1426,6 +1477,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsLimitedOuterJoins() {\n         debugCodeCall(\"supportsLimitedOuterJoins\");\n@@ -1437,6 +1489,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"schema\"\n      */\n+\n     @Override\n     public String getSchemaTerm() {\n         debugCodeCall(\"getSchemaTerm\");\n@@ -1448,6 +1501,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"procedure\"\n      */\n+\n     @Override\n     public String getProcedureTerm() {\n         debugCodeCall(\"getProcedureTerm\");\n@@ -1459,6 +1513,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \"catalog\"\n      */\n+\n     @Override\n     public String getCatalogTerm() {\n         debugCodeCall(\"getCatalogTerm\");\n@@ -1470,6 +1525,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean isCatalogAtStart() {\n         debugCodeCall(\"isCatalogAtStart\");\n@@ -1481,6 +1537,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return \".\"\n      */\n+\n     @Override\n     public String getCatalogSeparator() {\n         debugCodeCall(\"getCatalogSeparator\");\n@@ -1492,6 +1549,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInDataManipulation() {\n         debugCodeCall(\"supportsSchemasInDataManipulation\");\n@@ -1503,6 +1561,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInProcedureCalls() {\n         debugCodeCall(\"supportsSchemasInProcedureCalls\");\n@@ -1514,6 +1573,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInTableDefinitions() {\n         debugCodeCall(\"supportsSchemasInTableDefinitions\");\n@@ -1525,6 +1585,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInIndexDefinitions() {\n         debugCodeCall(\"supportsSchemasInIndexDefinitions\");\n@@ -1536,6 +1597,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSchemasInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsSchemasInPrivilegeDefinitions\");\n@@ -1547,6 +1609,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInDataManipulation() {\n         debugCodeCall(\"supportsCatalogsInDataManipulation\");\n@@ -1558,6 +1621,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsCatalogsInProcedureCalls() {\n         debugCodeCall(\"supportsCatalogsInProcedureCalls\");\n@@ -1569,6 +1633,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInTableDefinitions() {\n         debugCodeCall(\"supportsCatalogsInTableDefinitions\");\n@@ -1580,6 +1645,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInIndexDefinitions() {\n         debugCodeCall(\"supportsCatalogsInIndexDefinitions\");\n@@ -1591,6 +1657,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCatalogsInPrivilegeDefinitions() {\n         debugCodeCall(\"supportsCatalogsInPrivilegeDefinitions\");\n@@ -1602,6 +1669,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedDelete() {\n         debugCodeCall(\"supportsPositionedDelete\");\n@@ -1613,6 +1681,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsPositionedUpdate() {\n         debugCodeCall(\"supportsPositionedUpdate\");\n@@ -1624,6 +1693,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSelectForUpdate() {\n         debugCodeCall(\"supportsSelectForUpdate\");\n@@ -1635,6 +1705,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStoredProcedures() {\n         debugCodeCall(\"supportsStoredProcedures\");\n@@ -1646,6 +1717,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInComparisons() {\n         debugCodeCall(\"supportsSubqueriesInComparisons\");\n@@ -1657,6 +1729,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInExists() {\n         debugCodeCall(\"supportsSubqueriesInExists\");\n@@ -1668,6 +1741,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInIns() {\n         debugCodeCall(\"supportsSubqueriesInIns\");\n@@ -1679,6 +1753,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSubqueriesInQuantifieds() {\n         debugCodeCall(\"supportsSubqueriesInQuantifieds\");\n@@ -1690,6 +1765,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsCorrelatedSubqueries() {\n         debugCodeCall(\"supportsCorrelatedSubqueries\");\n@@ -1701,6 +1777,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnion() {\n         debugCodeCall(\"supportsUnion\");\n@@ -1712,6 +1789,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsUnionAll() {\n         debugCodeCall(\"supportsUnionAll\");\n@@ -1723,6 +1801,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossCommit() {\n         debugCodeCall(\"supportsOpenCursorsAcrossCommit\");\n@@ -1734,6 +1813,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsOpenCursorsAcrossRollback() {\n         debugCodeCall(\"supportsOpenCursorsAcrossRollback\");\n@@ -1745,6 +1825,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossCommit() {\n         debugCodeCall(\"supportsOpenStatementsAcrossCommit\");\n@@ -1756,6 +1837,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsOpenStatementsAcrossRollback() {\n         debugCodeCall(\"supportsOpenStatementsAcrossRollback\");\n@@ -1767,6 +1849,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactions() {\n         debugCodeCall(\"supportsTransactions\");\n@@ -1779,6 +1862,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param level the transaction isolation level (Connection.TRANSACTION_*)\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n@@ -1800,6 +1884,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsDataDefinitionAndDataManipulationTransactions() {\n         debugCodeCall(\"supportsDataDefinitionAndDataManipulationTransactions\");\n@@ -1811,6 +1896,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsDataManipulationTransactionsOnly() {\n         debugCodeCall(\"supportsDataManipulationTransactionsOnly\");\n@@ -1822,6 +1908,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean dataDefinitionCausesTransactionCommit() {\n         debugCodeCall(\"dataDefinitionCausesTransactionCommit\");\n@@ -1833,6 +1920,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean dataDefinitionIgnoredInTransactions() {\n         debugCodeCall(\"dataDefinitionIgnoredInTransactions\");\n@@ -1846,6 +1934,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true for all types except ResultSet.TYPE_FORWARD_ONLY\n      */\n+\n     @Override\n     public boolean supportsResultSetType(int type) {\n         debugCodeCall(\"supportsResultSetType\", type);\n@@ -1860,10 +1949,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n+\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\"+type+\", \"+concurrency+\");\");\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \"\n+            + concurrency + \");\");\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -1874,6 +1965,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return true\n      */\n+\n     @Override\n     public boolean ownUpdatesAreVisible(int type) {\n         debugCodeCall(\"ownUpdatesAreVisible\", type);\n@@ -1886,6 +1978,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownDeletesAreVisible(int type) {\n         debugCodeCall(\"ownDeletesAreVisible\", type);\n@@ -1898,6 +1991,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean ownInsertsAreVisible(int type) {\n         debugCodeCall(\"ownInsertsAreVisible\", type);\n@@ -1910,6 +2004,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersUpdatesAreVisible(int type) {\n         debugCodeCall(\"othersUpdatesAreVisible\", type);\n@@ -1922,6 +2017,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersDeletesAreVisible(int type) {\n         debugCodeCall(\"othersDeletesAreVisible\", type);\n@@ -1934,6 +2030,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean othersInsertsAreVisible(int type) {\n         debugCodeCall(\"othersInsertsAreVisible\", type);\n@@ -1946,6 +2043,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean updatesAreDetected(int type) {\n         debugCodeCall(\"updatesAreDetected\", type);\n@@ -1958,6 +2056,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean deletesAreDetected(int type) {\n         debugCodeCall(\"deletesAreDetected\", type);\n@@ -1970,6 +2069,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param type the result set type\n      * @return false\n      */\n+\n     @Override\n     public boolean insertsAreDetected(int type) {\n         debugCodeCall(\"insertsAreDetected\", type);\n@@ -1981,6 +2081,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsBatchUpdates() {\n         debugCodeCall(\"supportsBatchUpdates\");\n@@ -1992,6 +2093,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean doesMaxRowSizeIncludeBlobs() {\n         debugCodeCall(\"doesMaxRowSizeIncludeBlobs\");\n@@ -2003,6 +2105,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return Connection.TRANSACTION_READ_COMMITTED\n      */\n+\n     @Override\n     public int getDefaultTransactionIsolation() {\n         debugCodeCall(\"getDefaultTransactionIsolation\");\n@@ -2015,8 +2118,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n@@ -2028,6 +2132,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesUpperCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseIdentifiers\");\n@@ -2040,6 +2145,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesLowerCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseIdentifiers\");\n@@ -2052,6 +2158,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n@@ -2065,6 +2172,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean supportsMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseQuotedIdentifiers\");\n@@ -2077,6 +2185,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesUpperCaseQuotedIdentifiers\");\n@@ -2089,6 +2198,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean storesLowerCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesLowerCaseQuotedIdentifiers\");\n@@ -2101,6 +2211,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true is so, false otherwise\n      */\n+\n     @Override\n     public boolean storesMixedCaseQuotedIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseQuotedIdentifiers\");\n@@ -2112,6 +2223,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxBinaryLiteralLength() {\n         debugCodeCall(\"getMaxBinaryLiteralLength\");\n@@ -2123,6 +2235,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCharLiteralLength() {\n         debugCodeCall(\"getMaxCharLiteralLength\");\n@@ -2134,6 +2247,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnNameLength() {\n         debugCodeCall(\"getMaxColumnNameLength\");\n@@ -2145,6 +2259,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInGroupBy() {\n         debugCodeCall(\"getMaxColumnsInGroupBy\");\n@@ -2156,6 +2271,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInIndex() {\n         debugCodeCall(\"getMaxColumnsInIndex\");\n@@ -2167,6 +2283,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInOrderBy() {\n         debugCodeCall(\"getMaxColumnsInOrderBy\");\n@@ -2178,6 +2295,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInSelect() {\n         debugCodeCall(\"getMaxColumnsInSelect\");\n@@ -2189,6 +2307,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxColumnsInTable() {\n         debugCodeCall(\"getMaxColumnsInTable\");\n@@ -2200,6 +2319,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxConnections() {\n         debugCodeCall(\"getMaxConnections\");\n@@ -2211,6 +2331,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCursorNameLength() {\n         debugCodeCall(\"getMaxCursorNameLength\");\n@@ -2222,6 +2343,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxIndexLength() {\n         debugCodeCall(\"getMaxIndexLength\");\n@@ -2233,6 +2355,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxSchemaNameLength() {\n         debugCodeCall(\"getMaxSchemaNameLength\");\n@@ -2244,6 +2367,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxProcedureNameLength() {\n         debugCodeCall(\"getMaxProcedureNameLength\");\n@@ -2255,6 +2379,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxCatalogNameLength() {\n         debugCodeCall(\"getMaxCatalogNameLength\");\n@@ -2266,6 +2391,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxRowSize() {\n         debugCodeCall(\"getMaxRowSize\");\n@@ -2277,6 +2403,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatementLength() {\n         debugCodeCall(\"getMaxStatementLength\");\n@@ -2288,6 +2415,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxStatements() {\n         debugCodeCall(\"getMaxStatements\");\n@@ -2299,6 +2427,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTableNameLength() {\n         debugCodeCall(\"getMaxTableNameLength\");\n@@ -2310,6 +2439,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxTablesInSelect() {\n         debugCodeCall(\"getMaxTablesInSelect\");\n@@ -2321,6 +2451,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return 0 for limit is unknown\n      */\n+\n     @Override\n     public int getMaxUserNameLength() {\n         debugCodeCall(\"getMaxUserNameLength\");\n@@ -2332,6 +2463,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsSavepoints() {\n         debugCodeCall(\"supportsSavepoints\");\n@@ -2343,6 +2475,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsNamedParameters() {\n         debugCodeCall(\"supportsNamedParameters\");\n@@ -2354,6 +2487,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsMultipleOpenResults() {\n         debugCodeCall(\"supportsMultipleOpenResults\");\n@@ -2365,6 +2499,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsGetGeneratedKeys() {\n         debugCodeCall(\"supportsGetGeneratedKeys\");\n@@ -2374,14 +2509,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n     public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTypes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\");\");\n+                debugCode(\"getSuperTypes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n         } catch (Exception e) {\n@@ -2406,15 +2541,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            (uppercase for unquoted names)\n      * @return an empty result set\n      */\n+\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern,\n-            String tableNamePattern) throws SQLException {\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTables(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\");\");\n+                debugCode(\"getSuperTables(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \");\");\n             }\n             return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n         } catch (Exception e) {\n@@ -2425,16 +2559,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported]\n      */\n+\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern, String attributeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getAttributes(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quote(attributeNamePattern)+\");\");\n+                debugCode(\"getAttributes(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(typeNamePattern) + \", \"\n+                + quote(attributeNamePattern) + \");\");\n             }\n             return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n         } catch (Exception e) {\n@@ -2449,6 +2582,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *            CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public boolean supportsResultSetHoldability(int holdability) {\n         debugCodeCall(\"supportsResultSetHoldability\", holdability);\n@@ -2460,6 +2594,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n+\n     @Override\n     public int getResultSetHoldability() {\n         debugCodeCall(\"getResultSetHoldability\");\n@@ -2471,6 +2606,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version\n      */\n+\n     @Override\n     public int getDatabaseMajorVersion() throws SQLException {\n         try {\n@@ -2486,6 +2622,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version\n      */\n+\n     @Override\n     public int getDatabaseMinorVersion() throws SQLException {\n         try {\n@@ -2501,6 +2638,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the major version (4)\n      */\n+\n     @Override\n     public int getJDBCMajorVersion() {\n         debugCodeCall(\"getJDBCMajorVersion\");\n@@ -2512,6 +2650,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return the minor version (2)\n      */\n+\n     @Override\n     public int getJDBCMinorVersion() {\n         debugCodeCall(\"getJDBCMinorVersion\");\n@@ -2523,6 +2662,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return {@link DatabaseMetaData#sqlStateSQL}\n      */\n+\n     @Override\n     public int getSQLStateType() {\n         debugCodeCall(\"getSQLStateType\");\n@@ -2534,6 +2674,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean locatorsUpdateCopy() {\n         debugCodeCall(\"locatorsUpdateCopy\");\n@@ -2545,6 +2686,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean supportsStatementPooling() {\n         debugCodeCall(\"supportsStatementPooling\");\n@@ -2562,6 +2704,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return ROWID_UNSUPPORTED\n      */\n+\n     @Override\n     public RowIdLifetime getRowIdLifetime() {\n         debugCodeCall(\"getRowIdLifetime\");\n@@ -2583,9 +2726,9 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n+\n     @Override\n-    public ResultSet getSchemas(String catalogPattern, String schemaPattern)\n-            throws SQLException {\n+    public ResultSet getSchemas(String catalogPattern, String schemaPattern) throws SQLException {\n         try {\n             debugCodeCall(\"getSchemas(String,String)\");\n             return getResultSet(meta.getSchemas(catalogPattern, schemaPattern));\n@@ -2600,6 +2743,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean supportsStoredFunctionsUsingCallSyntax() {\n         debugCodeCall(\"supportsStoredFunctionsUsingCallSyntax\");\n@@ -2612,6 +2756,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return false\n      */\n+\n     @Override\n     public boolean autoCommitFailureClosesAllResultSets() {\n         debugCodeCall(\"autoCommitFailureClosesAllResultSets\");\n@@ -2629,12 +2774,12 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE), ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n         if (isDebugEnabled()) {\n-            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+            debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                                         \"getClientInfoProperties()\");\n         }\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n@@ -2645,6 +2790,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return this\n      */\n+\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public <T> T unwrap(Class<T> iface) throws SQLException {\n@@ -2664,6 +2810,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param iface the class\n      * @return whether or not the interface is assignable from this class\n      */\n+\n     @Override\n     public boolean isWrapperFor(Class<?> iface) throws SQLException {\n         return iface != null && iface.isAssignableFrom(getClass());\n@@ -2672,20 +2819,17 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of function columns.\n      */\n+\n     @Override\n-    public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n-            String functionNamePattern, String columnNamePattern)\n-            throws SQLException {\n+    public ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctionColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getFunctionColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n-            return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+            return getResultSet(meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2694,15 +2838,14 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * [Not supported] Gets the list of functions.\n      */\n+\n     @Override\n-    public ResultSet getFunctions(String catalog, String schemaPattern,\n-            String functionNamePattern) throws SQLException {\n+    public ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctions(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(functionNamePattern)+\");\");\n+                debugCode(\"getFunctions(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(functionNamePattern) + \");\");\n             }\n             return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n         } catch (Exception e) {\n@@ -2716,6 +2859,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      *\n      * @return true\n      */\n+\n     @Override\n     public boolean generatedKeyAlwaysReturned() {\n         return true;\n@@ -2732,16 +2876,15 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @param columnNamePattern null (to get all objects) or a column name\n      *            (uppercase for unquoted names)\n      */\n+\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern, String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPseudoColumns(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+\");\");\n+                debugCode(\"getPseudoColumns(\" + quote(catalog) + \", \"\n+                + quote(schemaPattern) + \", \"\n+                + quote(tableNamePattern) + \", \"\n+                + quote(columnNamePattern) + \");\");\n             }\n             return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n@@ -2752,13 +2895,16 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n     /**\n      * INTERNAL\n      */\n+\n     @Override\n     public String toString() {\n         return getTraceObjectName() + \": \" + conn;\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn,\n+               null,\n+               null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 326
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/36/JdbcDatabaseMetaData.java\nindex d78d4a53cc3..5bfd79b6c5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/36/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/36/JdbcDatabaseMetaData.java\nindex d78d4a53cc3..5bfd79b6c5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/36/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/36/JdbcDatabaseMetaData.java\n@@ -2016,7 +2016,7 @@ public class JdbcDatabaseMetaData extends TraceObject implements\n      * @return true is so, false otherwise\n      */\n     @Override\n-    public boolean supportsMixedCaseIdentifiers() throws SQLException{\n+    public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         SessionInterface.StaticSettings settings = conn.getStaticSettings();\n         return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}