{
    "project_name": "opencb-opencga",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "34",
                "column": "42",
                "severity": "error",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "    public DataResult<KnockoutByIndividual> readKnockoutByIndividualFromJob(String study, String jobId, int limit, int skip,\n            Predicate<KnockoutByIndividual> filter, String token) throws IOException, CatalogException {\n        return readKnockoutObjectFromJob( study, jobId, limit, skip, filter, token,\n                KnockoutAnalysis.KNOCKOUT_INDIVIDUALS_JSON, KnockoutByIndividual.class);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/11/KnockoutAnalysisResultReader.java\nindex 137692824dd..53ee7c2b701 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/11/KnockoutAnalysisResultReader.java\n@@ -31,7 +31,7 @@ public class KnockoutAnalysisResultReader {\n \n     public DataResult<KnockoutByIndividual> readKnockoutByIndividualFromJob(String study, String jobId, int limit, int skip,\n             Predicate<KnockoutByIndividual> filter, String token) throws IOException, CatalogException {\n-        return readKnockoutObjectFromJob( study, jobId, limit, skip, filter, token,\n+        return readKnockoutObjectFromJob(study, jobId, limit, skip, filter, token,\n                 KnockoutAnalysis.KNOCKOUT_INDIVIDUALS_JSON, KnockoutByIndividual.class);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/11/KnockoutAnalysisResultReader.java\nindex 137692824dd..e1c3bc4beb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/11/KnockoutAnalysisResultReader.java\n@@ -23,73 +23,75 @@ import java.util.function.Predicate;\n \n public class KnockoutAnalysisResultReader {\n \n-    private final CatalogManager catalogManager;\n+  private final CatalogManager catalogManager;\n \n-    public KnockoutAnalysisResultReader(CatalogManager catalogManager) {\n-        this.catalogManager = catalogManager;\n-    }\n+  public KnockoutAnalysisResultReader(CatalogManager catalogManager) {\n+    this.catalogManager = catalogManager;\n+  }\n \n-    public DataResult<KnockoutByIndividual> readKnockoutByIndividualFromJob(String study, String jobId, int limit, int skip,\n-            Predicate<KnockoutByIndividual> filter, String token) throws IOException, CatalogException {\n-        return readKnockoutObjectFromJob( study, jobId, limit, skip, filter, token,\n-                KnockoutAnalysis.KNOCKOUT_INDIVIDUALS_JSON, KnockoutByIndividual.class);\n-    }\n+  public DataResult<KnockoutByIndividual> readKnockoutByIndividualFromJob(String study, String jobId, int limit, int skip,\n+                                                                          Predicate<KnockoutByIndividual> filter, String token)\n+      throws IOException, CatalogException {\n+    return readKnockoutObjectFromJob(study, jobId, limit, skip, filter, token,\n+        KnockoutAnalysis.KNOCKOUT_INDIVIDUALS_JSON, KnockoutByIndividual.class);\n+  }\n \n-    public DataResult<KnockoutByGene> readKnockoutByGeneFromJob(String study, String jobId, int limit, int skip,\n-            Predicate<KnockoutByGene> filter, String token) throws IOException, CatalogException {\n-        return readKnockoutObjectFromJob(study, jobId, limit, skip, filter, token,\n-                KnockoutAnalysis.KNOCKOUT_GENES_JSON, KnockoutByGene.class);\n-    }\n+  public DataResult<KnockoutByGene> readKnockoutByGeneFromJob(String study, String jobId, int limit, int skip,\n+                                                              Predicate<KnockoutByGene> filter, String token)\n+      throws IOException, CatalogException {\n+    return readKnockoutObjectFromJob(study, jobId, limit, skip, filter, token,\n+        KnockoutAnalysis.KNOCKOUT_GENES_JSON, KnockoutByGene.class);\n+  }\n \n-    private <T> DataResult<T> readKnockoutObjectFromJob(String study, String jobId, int limit, int skip, Predicate<T> filter, String token,\n-                                                               String fileName, Class<T> c)\n-            throws IOException, CatalogException {\n-        StopWatch started = StopWatch.createStarted();\n-        Job job = catalogManager.getJobManager().get(study, jobId, new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\n-                JobDBAdaptor.QueryParams.ID.key(),\n-                JobDBAdaptor.QueryParams.UUID.key(),\n-                JobDBAdaptor.QueryParams.OUTPUT.key(),\n-                JobDBAdaptor.QueryParams.TOOL.key(),\n-                JobDBAdaptor.QueryParams.INTERNAL_STATUS.key())), token).first();\n+  private <T> DataResult<T> readKnockoutObjectFromJob(String study, String jobId, int limit, int skip, Predicate<T> filter, String token,\n+                                                      String fileName, Class<T> c)\n+      throws IOException, CatalogException {\n+    StopWatch started = StopWatch.createStarted();\n+    Job job = catalogManager.getJobManager().get(study, jobId, new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\n+        JobDBAdaptor.QueryParams.ID.key(),\n+        JobDBAdaptor.QueryParams.UUID.key(),\n+        JobDBAdaptor.QueryParams.OUTPUT.key(),\n+        JobDBAdaptor.QueryParams.TOOL.key(),\n+        JobDBAdaptor.QueryParams.INTERNAL_STATUS.key())), token).first();\n \n-        if (!job.getTool().getId().equals(KnockoutAnalysis.ID)) {\n-            throw new IllegalArgumentException(\"Input job '\" + job.getId() + \"' was not produced by Knockout Analysis Tool\");\n-        }\n-        if (!job.getInternal().getStatus().getName().equals(Enums.ExecutionStatus.DONE)) {\n-            throw new IllegalArgumentException(\"Unable to query by job with status '\" + job.getInternal().getStatus().getName() + \"'\");\n-        }\n-        for (org.opencb.opencga.core.models.file.File file : job.getOutput()) {\n-            if (file.getName().equals(fileName)) {\n-                return readKnockoutObjectFromFile(study, file.getId(), filter, limit, skip, c, token)\n-                        .setTime(((int) started.getTime(TimeUnit.MILLISECONDS)));\n-            }\n-        }\n-        throw new IllegalArgumentException(\"File '\" + fileName + \"' not found in job '\" + job.getId() + \"'\");\n+    if (!job.getTool().getId().equals(KnockoutAnalysis.ID)) {\n+      throw new IllegalArgumentException(\"Input job '\" + job.getId() + \"' was not produced by Knockout Analysis Tool\");\n+    }\n+    if (!job.getInternal().getStatus().getName().equals(Enums.ExecutionStatus.DONE)) {\n+      throw new IllegalArgumentException(\"Unable to query by job with status '\" + job.getInternal().getStatus().getName() + \"'\");\n     }\n+    for (org.opencb.opencga.core.models.file.File file : job.getOutput()) {\n+      if (file.getName().equals(fileName)) {\n+        return readKnockoutObjectFromFile(study, file.getId(), filter, limit, skip, c, token)\n+            .setTime(((int) started.getTime(TimeUnit.MILLISECONDS)));\n+      }\n+    }\n+    throw new IllegalArgumentException(\"File '\" + fileName + \"' not found in job '\" + job.getId() + \"'\");\n+  }\n \n-    private <T> DataResult<T> readKnockoutObjectFromFile(String study, String fileId, Predicate<T> filter,\n-                                                                int limit, int skip, Class<T> c, String token)\n-            throws IOException, CatalogException {\n-        StopWatch started = StopWatch.createStarted();\n-        if (limit < 0) {\n-            limit = Integer.MAX_VALUE;\n-        }\n-        if (skip < 0) {\n-            skip = 0;\n-        }\n-        ObjectReader reader = JacksonUtils.getDefaultObjectMapper().reader().forType(c);\n-        try (InputStream is = catalogManager.getFileManager().download(study, fileId, token);\n-             MappingIterator<T> iterator = reader.readValues(is)) {\n-            Iterator<T> filtered = Iterators.filter(iterator, filter::test);\n-            int numMatches = Iterators.advance(filtered, skip);\n-            List<T> values = new ArrayList<>(Math.min(limit, 1000));\n-            for (int i = 0; i < limit && filtered.hasNext(); i++) {\n-                values.add(filtered.next());\n-                numMatches++;\n-            }\n-            numMatches += Iterators.size(filtered);\n-            return new DataResult<>(((int) started.getTime(TimeUnit.MILLISECONDS)), Collections.emptyList(), values.size(), values,\n-                    numMatches);\n-        }\n+  private <T> DataResult<T> readKnockoutObjectFromFile(String study, String fileId, Predicate<T> filter,\n+                                                       int limit, int skip, Class<T> c, String token)\n+      throws IOException, CatalogException {\n+    StopWatch started = StopWatch.createStarted();\n+    if (limit < 0) {\n+      limit = Integer.MAX_VALUE;\n+    }\n+    if (skip < 0) {\n+      skip = 0;\n+    }\n+    ObjectReader reader = JacksonUtils.getDefaultObjectMapper().reader().forType(c);\n+    try (InputStream is = catalogManager.getFileManager().download(study, fileId, token);\n+         MappingIterator<T> iterator = reader.readValues(is)) {\n+      Iterator<T> filtered = Iterators.filter(iterator, filter::test);\n+      int numMatches = Iterators.advance(filtered, skip);\n+      List<T> values = new ArrayList<>(Math.min(limit, 1000));\n+      for (int i = 0; i < limit && filtered.hasNext(); i++) {\n+        values.add(filtered.next());\n+        numMatches++;\n+      }\n+      numMatches += Iterators.size(filtered);\n+      return new DataResult<>(((int) started.getTime(TimeUnit.MILLISECONDS)), Collections.emptyList(), values.size(), values,\n+          numMatches);\n     }\n+  }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/11/KnockoutAnalysisResultReader.java\nindex 137692824dd..74da58fe081 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/11/KnockoutAnalysisResultReader.java\n@@ -31,7 +31,7 @@ public class KnockoutAnalysisResultReader {\n \n     public DataResult<KnockoutByIndividual> readKnockoutByIndividualFromJob(String study, String jobId, int limit, int skip,\n             Predicate<KnockoutByIndividual> filter, String token) throws IOException, CatalogException {\n-        return readKnockoutObjectFromJob( study, jobId, limit, skip, filter, token,\n+        return readKnockoutObjectFromJob(study, jobId, limit, skip, filter, token,\n                 KnockoutAnalysis.KNOCKOUT_INDIVIDUALS_JSON, KnockoutByIndividual.class);\n     }\n \n@@ -42,8 +42,7 @@ public class KnockoutAnalysisResultReader {\n     }\n \n     private <T> DataResult<T> readKnockoutObjectFromJob(String study, String jobId, int limit, int skip, Predicate<T> filter, String token,\n-                                                               String fileName, Class<T> c)\n-            throws IOException, CatalogException {\n+                                                               String fileName, Class<T> c) throws IOException, CatalogException {\n         StopWatch started = StopWatch.createStarted();\n         Job job = catalogManager.getJobManager().get(study, jobId, new QueryOptions(QueryOptions.INCLUDE, Arrays.asList(\n                 JobDBAdaptor.QueryParams.ID.key(),\n@@ -67,9 +66,7 @@ public class KnockoutAnalysisResultReader {\n         throw new IllegalArgumentException(\"File '\" + fileName + \"' not found in job '\" + job.getId() + \"'\");\n     }\n \n-    private <T> DataResult<T> readKnockoutObjectFromFile(String study, String fileId, Predicate<T> filter,\n-                                                                int limit, int skip, Class<T> c, String token)\n-            throws IOException, CatalogException {\n+    private <T> DataResult<T> readKnockoutObjectFromFile(String study, String fileId, Predicate<T> filter, int limit, int skip, Class<T> c, String token) throws IOException, CatalogException {\n         StopWatch started = StopWatch.createStarted();\n         if (limit < 0) {\n             limit = Integer.MAX_VALUE;\n@@ -92,4 +89,4 @@ public class KnockoutAnalysisResultReader {\n                     numMatches);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/11/KnockoutAnalysisResultReader.java\nindex 137692824dd..53ee7c2b701 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/11/KnockoutAnalysisResultReader.java\n@@ -31,7 +31,7 @@ public class KnockoutAnalysisResultReader {\n \n     public DataResult<KnockoutByIndividual> readKnockoutByIndividualFromJob(String study, String jobId, int limit, int skip,\n             Predicate<KnockoutByIndividual> filter, String token) throws IOException, CatalogException {\n-        return readKnockoutObjectFromJob( study, jobId, limit, skip, filter, token,\n+        return readKnockoutObjectFromJob(study, jobId, limit, skip, filter, token,\n                 KnockoutAnalysis.KNOCKOUT_INDIVIDUALS_JSON, KnockoutByIndividual.class);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/11/KnockoutAnalysisResultReader.java\nindex 137692824dd..53ee7c2b701 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/11/KnockoutAnalysisResultReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/11/KnockoutAnalysisResultReader.java\n@@ -31,7 +31,7 @@ public class KnockoutAnalysisResultReader {\n \n     public DataResult<KnockoutByIndividual> readKnockoutByIndividualFromJob(String study, String jobId, int limit, int skip,\n             Predicate<KnockoutByIndividual> filter, String token) throws IOException, CatalogException {\n-        return readKnockoutObjectFromJob( study, jobId, limit, skip, filter, token,\n+        return readKnockoutObjectFromJob(study, jobId, limit, skip, filter, token,\n                 KnockoutAnalysis.KNOCKOUT_INDIVIDUALS_JSON, KnockoutByIndividual.class);\n     }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}