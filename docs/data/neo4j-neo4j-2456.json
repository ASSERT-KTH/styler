{
    "project_name": "neo4j-neo4j",
    "error_id": "2456",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2456/SchemaDescriptorPredicates.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2456/SchemaDescriptorPredicates.java\nindex 0ea96537504..10c0840d4de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2456/SchemaDescriptorPredicates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2456/SchemaDescriptorPredicates.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.schema;\n \n import java.util.function.Predicate;\n@@ -32,57 +33,57 @@ public class SchemaDescriptorPredicates\n     {\n     }\n \n-    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasLabel( int labelId )\n+    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasLabel(int labelId)\n     {\n         return supplier ->\n         {\n             SchemaDescriptor schema = supplier.schema();\n-            return schema.entityType() == EntityType.NODE && contains( schema.getEntityTokenIds(), labelId );\n+            return schema.entityType() == EntityType.NODE && contains(schema.getEntityTokenIds(), labelId);\n         };\n     }\n \n-    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasEntityToken( long[] entityTokens, EntityType entityType )\n+    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasEntityToken(long[] entityTokens, EntityType entityType)\n     {\n         return supplier ->\n         {\n             SchemaDescriptor schema = supplier.schema();\n-            return schema.entityType() == entityType && LongStream.of( entityTokens )\n-                    .anyMatch( entityToken -> contains( schema.getEntityTokenIds(), (int) entityToken ) );\n+            return schema.entityType() == entityType && LongStream.of(entityTokens)\n+              .anyMatch(entityToken -> contains(schema.getEntityTokenIds(), (int) entityToken));\n         };\n     }\n \n-    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasRelType( int relTypeId )\n+    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasRelType(int relTypeId)\n     {\n         return supplier ->\n         {\n             SchemaDescriptor schema = supplier.schema();\n-            return schema.entityType() == EntityType.RELATIONSHIP && contains( schema.getEntityTokenIds(), relTypeId );\n+            return schema.entityType() == EntityType.RELATIONSHIP && contains(schema.getEntityTokenIds(), relTypeId);\n         };\n     }\n \n-    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasProperty( int propertyId )\n+    public static <T extends SchemaDescriptorSupplier> Predicate<T> hasProperty(int propertyId)\n     {\n-        return supplier -> hasProperty( supplier, propertyId );\n+        return supplier -> hasProperty(supplier, propertyId);\n     }\n \n-    public static boolean hasLabel( SchemaDescriptorSupplier supplier, int labelId )\n+    public static boolean hasLabel(SchemaDescriptorSupplier supplier, int labelId)\n     {\n         SchemaDescriptor schema = supplier.schema();\n-        return schema.entityType() == EntityType.NODE && contains( schema.getEntityTokenIds(), labelId );\n+        return schema.entityType() == EntityType.NODE && contains(schema.getEntityTokenIds(), labelId);\n     }\n \n-    public static boolean hasRelType( SchemaDescriptorSupplier supplier, int relTypeId )\n+    public static boolean hasRelType(SchemaDescriptorSupplier supplier, int relTypeId)\n     {\n         SchemaDescriptor schema = supplier.schema();\n-        return schema.entityType() == EntityType.RELATIONSHIP && contains( schema.getEntityTokenIds(), relTypeId );\n+        return schema.entityType() == EntityType.RELATIONSHIP && contains(schema.getEntityTokenIds(), relTypeId);\n     }\n \n-    public static boolean hasProperty( SchemaDescriptorSupplier supplier, int propertyId )\n+    public static boolean hasProperty(SchemaDescriptorSupplier supplier, int propertyId)\n     {\n         int[] schemaProperties = supplier.schema().getPropertyIds();\n-        for ( int schemaProp : schemaProperties )\n+        for (int schemaProp : schemaProperties)\n         {\n-            if ( schemaProp == propertyId )\n+            if (schemaProp == propertyId)\n             {\n                 return true;\n             }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}