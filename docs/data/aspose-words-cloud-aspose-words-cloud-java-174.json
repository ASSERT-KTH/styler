{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "174",
    "information": {
        "errors": [
            {
                "line": "310",
                "column": "27",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n        return new UpdateStyleOnlineResponse(\n            (StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n            apiClient.parseDocument(multipart.getBodyPart(1))\n        );\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/174/UpdateStyleOnlineRequest.java\nindex f1002eb3502..a36ea486845 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/174/UpdateStyleOnlineRequest.java\n@@ -307,7 +307,7 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n     public UpdateStyleOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new UpdateStyleOnlineResponse(\n-            (StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n+            (StyleResponse) apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/174/UpdateStyleOnlineRequest.java\nindex f1002eb3502..332ec07f933 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/174/UpdateStyleOnlineRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -258,11 +260,13 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n         Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n \n         Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n+        if (getDocument() != null) {\n             localVarFormParams.put(\"Document\", getDocument());\n+        }\n \n-        if (getStyleUpdate() != null)\n+        if (getStyleUpdate() != null) {\n             localVarFormParams.put(\"StyleUpdate\", getStyleUpdate());\n+        }\n \n         final String[] localVarAccepts = {\n             \"application/xml\", \"application/json\"\n@@ -282,8 +286,8 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -307,7 +311,7 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n     public UpdateStyleOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new UpdateStyleOnlineResponse(\n-            (StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n+            (StyleResponse) apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "305",
                    "column": "60",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/174/UpdateStyleOnlineRequest.java\nindex f1002eb3502..67cfd339656 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/174/UpdateStyleOnlineRequest.java\n@@ -214,10 +214,9 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n      */\n     public void setRevisionDateTime(String value) {\n         this.revisionDateTime = value;\n-    }\n-\n+  }\n \n-    /*\n+/*\n      * Creates the http request based on this request model.\n      *\n      * @param apiClient ApiClient instance\n@@ -258,13 +257,10 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n         Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n \n         Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n-            localVarFormParams.put(\"Document\", getDocument());\n-\n-        if (getStyleUpdate() != null)\n-            localVarFormParams.put(\"StyleUpdate\", getStyleUpdate());\n+        if (getDocument() != null) localVarFormParams.put(\"Document\", getDocument());\n+if (getStyleUpdate() != null) localVarFormParams.put(\"StyleUpdate\", getStyleUpdate());\n \n-        final String[] localVarAccepts = {\n+final String[] localVarAccepts = {\n             \"application/xml\", \"application/json\"\n         };\n         final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n@@ -306,9 +302,7 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n      */\n     public UpdateStyleOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n-        return new UpdateStyleOnlineResponse(\n-            (StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n-            apiClient.parseDocument(multipart.getBodyPart(1))\n-        );\n+        return new UpdateStyleOnlineResponse((StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n+            apiClient.parseDocument(multipart.getBodyPart(1)));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/174/UpdateStyleOnlineRequest.java\nindex f1002eb3502..a7d7768e3ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/174/UpdateStyleOnlineRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,46 +39,63 @@ import java.util.*;\n /*\n  * Request model for updateStyleOnline operation.\n  */\n+\n+\n public class UpdateStyleOnlineRequest implements RequestIfc {\n     /*\n      * The document.\n      */\n-    private byte[] document;\n+\n+  private byte[] document;\n \n     /*\n      * The name of the style.\n      */\n-    private String styleName;\n+\n+\n+  private String styleName;\n \n     /*\n      * Style properties to update.\n      */\n-    private StyleUpdate styleUpdate;\n+\n+\n+  private StyleUpdate styleUpdate;\n \n     /*\n      * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    private String loadEncoding;\n+\n+\n+  private String loadEncoding;\n \n     /*\n      * Password for opening an encrypted document.\n      */\n-    private String password;\n+\n+\n+  private String password;\n \n     /*\n      * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    private String destFileName;\n+\n+\n+  private String destFileName;\n \n     /*\n      * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    private String revisionAuthor;\n+\n+\n+  private String revisionAuthor;\n \n     /*\n      * The date and time to use for revisions.\n      */\n-    private String revisionDateTime;\n+\n+\n+  private String revisionDateTime;\n \n     /*\n      * Initializes a new instance of the UpdateStyleOnlineRequest class.\n@@ -93,128 +109,147 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n      * @param String revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      * @param String revisionDateTime The date and time to use for revisions.\n      */\n-    public UpdateStyleOnlineRequest(byte[] document, String styleName, StyleUpdate styleUpdate, String loadEncoding, String password, String destFileName, String revisionAuthor, String revisionDateTime) {\n-        this.document = document;\n-        this.styleName = styleName;\n-        this.styleUpdate = styleUpdate;\n-        this.loadEncoding = loadEncoding;\n-        this.password = password;\n-        this.destFileName = destFileName;\n-        this.revisionAuthor = revisionAuthor;\n-        this.revisionDateTime = revisionDateTime;\n-    }\n+\n+\n+  public UpdateStyleOnlineRequest(byte[] document,  String styleName,  StyleUpdate styleUpdate,  String loadEncoding,  String password,  String destFileName,  String revisionAuthor,  String revisionDateTime) {\n+    this.document = document;\n+    this.styleName = styleName;\n+    this.styleUpdate = styleUpdate;\n+    this.loadEncoding = loadEncoding;\n+    this.password = password;\n+    this.destFileName = destFileName;\n+    this.revisionAuthor = revisionAuthor;\n+    this.revisionDateTime = revisionDateTime;\n+  }\n \n     /*\n      * Gets The document.\n      */\n-    public byte[] getDocument() {\n-        return this.document;\n-    }\n+\n+\n+  public byte[] getDocument() {\n+    return this.document;\n+  }\n \n     /*\n      * Sets The document.\n      */\n-    public void setDocument(byte[] value) {\n-        this.document = value;\n-    }\n+\n+  public void setDocument(byte[] value) {\n+    this.document = value;\n+  }\n \n     /*\n      * Gets The name of the style.\n      */\n-    public String getStyleName() {\n-        return this.styleName;\n-    }\n+\n+  public String getStyleName() {\n+    return this.styleName;\n+  }\n \n     /*\n      * Sets The name of the style.\n      */\n-    public void setStyleName(String value) {\n-        this.styleName = value;\n-    }\n+\n+  public void setStyleName(String value) {\n+    this.styleName = value;\n+  }\n \n     /*\n      * Gets Style properties to update.\n      */\n-    public StyleUpdate getStyleUpdate() {\n-        return this.styleUpdate;\n-    }\n+\n+  public StyleUpdate getStyleUpdate() {\n+    return this.styleUpdate;\n+  }\n \n     /*\n      * Sets Style properties to update.\n      */\n-    public void setStyleUpdate(StyleUpdate value) {\n-        this.styleUpdate = value;\n-    }\n+\n+  public void setStyleUpdate(StyleUpdate value) {\n+    this.styleUpdate = value;\n+  }\n \n     /*\n      * Gets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public String getLoadEncoding() {\n-        return this.loadEncoding;\n-    }\n+\n+  public String getLoadEncoding() {\n+    return this.loadEncoding;\n+  }\n \n     /*\n      * Sets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public void setLoadEncoding(String value) {\n-        this.loadEncoding = value;\n-    }\n+\n+  public void setLoadEncoding(String value) {\n+    this.loadEncoding = value;\n+  }\n \n     /*\n      * Gets Password for opening an encrypted document.\n      */\n-    public String getPassword() {\n-        return this.password;\n-    }\n+\n+  public String getPassword() {\n+    return this.password;\n+  }\n \n     /*\n      * Sets Password for opening an encrypted document.\n      */\n-    public void setPassword(String value) {\n-        this.password = value;\n-    }\n+\n+  public void setPassword(String value) {\n+    this.password = value;\n+  }\n \n     /*\n      * Gets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public String getDestFileName() {\n-        return this.destFileName;\n-    }\n+\n+  public String getDestFileName() {\n+    return this.destFileName;\n+  }\n \n     /*\n      * Sets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public void setDestFileName(String value) {\n-        this.destFileName = value;\n-    }\n+\n+  public void setDestFileName(String value) {\n+    this.destFileName = value;\n+  }\n \n     /*\n      * Gets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public String getRevisionAuthor() {\n-        return this.revisionAuthor;\n-    }\n+\n+  public String getRevisionAuthor() {\n+    return this.revisionAuthor;\n+  }\n \n     /*\n      * Sets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public void setRevisionAuthor(String value) {\n-        this.revisionAuthor = value;\n-    }\n+\n+  public void setRevisionAuthor(String value) {\n+    this.revisionAuthor = value;\n+  }\n \n     /*\n      * Gets The date and time to use for revisions.\n      */\n-    public String getRevisionDateTime() {\n-        return this.revisionDateTime;\n-    }\n+\n+  public String getRevisionDateTime() {\n+    return this.revisionDateTime;\n+  }\n \n     /*\n      * Sets The date and time to use for revisions.\n      */\n-    public void setRevisionDateTime(String value) {\n-        this.revisionDateTime = value;\n-    }\n+\n+  public void setRevisionDateTime(String value) {\n+    this.revisionDateTime = value;\n+  }\n \n \n     /*\n@@ -224,79 +259,76 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Document' is set\n-        if (getDocument() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling updateStyleOnline\");\n-        }\n+    if (getDocument() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Document' when calling updateStyleOnline\");\n+    }\n \n         // verify the required parameter 'StyleName' is set\n-        if (getStyleName() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'StyleName' when calling updateStyleOnline\");\n-        }\n+    if (getStyleName() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'StyleName' when calling updateStyleOnline\");\n+    }\n \n         // verify the required parameter 'StyleUpdate' is set\n-        if (getStyleUpdate() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'StyleUpdate' when calling updateStyleOnline\");\n-        }\n+    if (getStyleUpdate() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'StyleUpdate' when calling updateStyleOnline\");\n+    }\n \n-        Object localVarPostBody = null;\n+    Object localVarPostBody = null;\n \n         // create path and map variables\n-        String localVarPath = \"/words/online/put/styles/{styleName}/update\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"styleName\", getStyleName());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-        if (getDocument() != null)\n-            localVarFormParams.put(\"Document\", getDocument());\n-\n-        if (getStyleUpdate() != null)\n-            localVarFormParams.put(\"StyleUpdate\", getStyleUpdate());\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"multipart/form-data\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/online/put/styles/{styleName}/update\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"styleName\", getStyleName());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    if (getDocument() != null) localVarFormParams.put(\"Document\", getDocument());\n+\n+    if (getStyleUpdate() != null) localVarFormParams.put(\"StyleUpdate\", getStyleUpdate());\n+\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"multipart/form-data\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return UpdateStyleOnlineResponse.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return UpdateStyleOnlineResponse.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -304,11 +336,9 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public UpdateStyleOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n-        return new UpdateStyleOnlineResponse(\n-            (StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n-            apiClient.parseDocument(multipart.getBodyPart(1))\n-        );\n-    }\n-}\n+\n+  public UpdateStyleOnlineResponse deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n+    return new UpdateStyleOnlineResponse((StyleResponse) apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class), apiClient.parseDocument(multipart.getBodyPart(1)));\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 175
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/174/UpdateStyleOnlineRequest.java\nindex f1002eb3502..a36ea486845 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/174/UpdateStyleOnlineRequest.java\n@@ -307,7 +307,7 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n     public UpdateStyleOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new UpdateStyleOnlineResponse(\n-            (StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n+            (StyleResponse) apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/174/UpdateStyleOnlineRequest.java\nindex f1002eb3502..a36ea486845 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/174/UpdateStyleOnlineRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/174/UpdateStyleOnlineRequest.java\n@@ -307,7 +307,7 @@ public class UpdateStyleOnlineRequest implements RequestIfc {\n     public UpdateStyleOnlineResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         MimeMultipart multipart = apiClient.getMultipartFromResponse(response);\n         return new UpdateStyleOnlineResponse(\n-            (StyleResponse)apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n+            (StyleResponse) apiClient.parseModel(multipart.getBodyPart(0), StyleResponse.class),\n             apiClient.parseDocument(multipart.getBodyPart(1))\n         );\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}