{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2265",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2265/FulltextProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2265/FulltextProvider.java\nindex 5c16f91c9ba..0d75d345683 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2265/FulltextProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2265/FulltextProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.fulltext;\n \n import java.io.IOException;\n@@ -29,108 +30,108 @@ import org.neo4j.kernel.impl.transaction.state.NeoStoreFileListing;\n \n public interface FulltextProvider extends AutoCloseable\n {\n-    FulltextProvider NULL_PROVIDER = new FulltextProvider()\n+  FulltextProvider NULL_PROVIDER = new FulltextProvider()\n+  {\n+    @Override\n+    public void registerTransactionEventHandler()\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public void awaitPopulation()\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public void openIndex(String identifier, FulltextIndexType type)\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public void createIndex(String identifier, FulltextIndexType type, List<String> properties)\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public ReadOnlyFulltext getReader(String identifier, FulltextIndexType type)\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public Set<String> getProperties(String identifier, FulltextIndexType type)\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public InternalIndexState getState(String identifier, FulltextIndexType type)\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public void changeIndexedProperties(String identifier, FulltextIndexType type, List<String> propertyKeys)\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public void registerFileListing(NeoStoreFileListing fileListing)\n+    {\n+      throw noProvider();\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+      throw noProvider();\n+    }\n+\n+    private RuntimeException noProvider()\n     {\n-        @Override\n-        public void registerTransactionEventHandler()\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public void awaitPopulation()\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public void openIndex( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public void createIndex( String identifier, FulltextIndexType type, List<String> properties )\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public ReadOnlyFulltext getReader( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public Set<String> getProperties( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public InternalIndexState getState( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys )\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public void registerFileListing( NeoStoreFileListing fileListing )\n-        {\n-            throw noProvider();\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            throw noProvider();\n-        }\n-\n-        private RuntimeException noProvider()\n-        {\n-            return new UnsupportedOperationException(\n-                    \"There is no fulltext provider for this database. Make sure that the feature you are tyring to use is enabled\" );\n-        }\n-    };\n-    String LUCENE_FULLTEXT_ADDON_PREFIX = \"__lucene__fulltext__addon__\";\n-    String FIELD_ENTITY_ID = LUCENE_FULLTEXT_ADDON_PREFIX + \"internal__id__\";\n-\n-    void registerTransactionEventHandler();\n-\n-    /**\n-     * Wait for the asynchronous background population, if one is on-going, to complete.\n-     * <p>\n-     * Such population, where the entire store is scanned for data to write to the index, will be started if the index\n-     * needs to recover after an unclean shut-down, or a configuration change.\n-     *\n-     * @throws RuntimeException If it was not possible to wait for the population to finish, for some reason.\n-     */\n-    void awaitPopulation();\n-\n-    void openIndex( String identifier, FulltextIndexType type ) throws IOException;\n-\n-    void createIndex( String identifier, FulltextIndexType type, List<String> properties ) throws IOException;\n-\n-    /**\n-     * Returns a reader for the specified index.\n-     *\n-     * @param identifier Identifier for the index.\n-     * @param type Type of the index.\n-     * @return A {@link ReadOnlyFulltext} for the index, or null if no such index is found.\n-     * @throws IOException\n-     */\n-    ReadOnlyFulltext getReader( String identifier, FulltextIndexType type ) throws IOException;\n-\n-    Set<String> getProperties( String identifier, FulltextIndexType type );\n-\n-    InternalIndexState getState( String identifier, FulltextIndexType type );\n-\n-    void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys ) throws IOException, InvalidArgumentsException;\n-\n-    void registerFileListing( NeoStoreFileListing fileListing );\n+      return new UnsupportedOperationException(\n+          \"There is no fulltext provider for this database. Make sure that the feature you are tyring to use is enabled\");\n+    }\n+  };\n+  String LUCENE_FULLTEXT_ADDON_PREFIX = \"__lucene__fulltext__addon__\";\n+  String FIELD_ENTITY_ID = LUCENE_FULLTEXT_ADDON_PREFIX + \"internal__id__\";\n+\n+  void registerTransactionEventHandler();\n+\n+  /**\n+   * Wait for the asynchronous background population, if one is on-going, to complete.\n+   * <p>\n+   * Such population, where the entire store is scanned for data to write to the index, will be started if the index\n+   * needs to recover after an unclean shut-down, or a configuration change.\n+   *\n+   * @throws RuntimeException If it was not possible to wait for the population to finish, for some reason.\n+   */\n+  void awaitPopulation();\n+\n+  void openIndex(String identifier, FulltextIndexType type) throws IOException;\n+\n+  void createIndex(String identifier, FulltextIndexType type, List<String> properties) throws IOException;\n+\n+  /**\n+   * Returns a reader for the specified index.\n+   *\n+   * @param identifier Identifier for the index.\n+   * @param type       Type of the index.\n+   * @return A {@link ReadOnlyFulltext} for the index, or null if no such index is found.\n+   * @throws IOException\n+   */\n+  ReadOnlyFulltext getReader(String identifier, FulltextIndexType type) throws IOException;\n+\n+  Set<String> getProperties(String identifier, FulltextIndexType type);\n+\n+  InternalIndexState getState(String identifier, FulltextIndexType type);\n+\n+  void changeIndexedProperties(String identifier, FulltextIndexType type, List<String> propertyKeys) throws IOException, InvalidArgumentsException;\n+\n+  void registerFileListing(NeoStoreFileListing fileListing);\n }\n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2265/FulltextProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2265/FulltextProvider.java\nindex 5c16f91c9ba..e83b33a6976 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2265/FulltextProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2265/FulltextProvider.java\n@@ -93,9 +93,8 @@ public interface FulltextProvider extends AutoCloseable\n \n         private RuntimeException noProvider()\n         {\n-            return new UnsupportedOperationException(\n-                    \"There is no fulltext provider for this database. Make sure that the feature you are tyring to use is enabled\" );\n-        }\n+            return new UnsupportedOperationException( \"There is no fulltext provider for this database. Make sure that the feature you are tyring to use is enabled\" );\n+    }\n     };\n     String LUCENE_FULLTEXT_ADDON_PREFIX = \"__lucene__fulltext__addon__\";\n     String FIELD_ENTITY_ID = LUCENE_FULLTEXT_ADDON_PREFIX + \"internal__id__\";\n@@ -127,10 +126,9 @@ public interface FulltextProvider extends AutoCloseable\n     ReadOnlyFulltext getReader( String identifier, FulltextIndexType type ) throws IOException;\n \n     Set<String> getProperties( String identifier, FulltextIndexType type );\n-\n-    InternalIndexState getState( String identifier, FulltextIndexType type );\n+InternalIndexState getState( String identifier, FulltextIndexType type );\n \n     void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys ) throws IOException, InvalidArgumentsException;\n \n     void registerFileListing( NeoStoreFileListing fileListing );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "column": "74",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 520).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "column": "520",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "126",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "126",
                    "column": "156",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2265/FulltextProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2265/FulltextProvider.java\nindex 5c16f91c9ba..2a12002a7ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2265/FulltextProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2265/FulltextProvider.java\n@@ -22,7 +22,6 @@ package org.neo4j.kernel.api.impl.fulltext;\n import java.io.IOException;\n import java.util.List;\n import java.util.Set;\n-\n import org.neo4j.internal.kernel.api.InternalIndexState;\n import org.neo4j.kernel.api.exceptions.InvalidArgumentsException;\n import org.neo4j.kernel.impl.transaction.state.NeoStoreFileListing;\n@@ -30,77 +29,77 @@ import org.neo4j.kernel.impl.transaction.state.NeoStoreFileListing;\n public interface FulltextProvider extends AutoCloseable\n {\n     FulltextProvider NULL_PROVIDER = new FulltextProvider()\n+{\n+    @Override\n+    public void registerTransactionEventHandler()\n     {\n-        @Override\n-        public void registerTransactionEventHandler()\n-        {\n-            throw noProvider();\n-        }\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public void awaitPopulation()\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public void awaitPopulation()\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public void openIndex( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public void openIndex( String identifier, FulltextIndexType type )\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public void createIndex( String identifier, FulltextIndexType type, List<String> properties )\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public void createIndex( String identifier, FulltextIndexType type, List<String> properties )\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public ReadOnlyFulltext getReader( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public ReadOnlyFulltext getReader( String identifier, FulltextIndexType type )\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public Set<String> getProperties( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public Set<String> getProperties( String identifier, FulltextIndexType type )\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public InternalIndexState getState( String identifier, FulltextIndexType type )\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public InternalIndexState getState( String identifier, FulltextIndexType type )\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys )\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys )\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public void registerFileListing( NeoStoreFileListing fileListing )\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public void registerFileListing( NeoStoreFileListing fileListing )\n+    {\n+        throw noProvider();\n+    }\n \n-        @Override\n-        public void close()\n-        {\n-            throw noProvider();\n-        }\n+    @Override\n+    public void close()\n+    {\n+        throw noProvider();\n+    }\n \n-        private RuntimeException noProvider()\n-        {\n-            return new UnsupportedOperationException(\n-                    \"There is no fulltext provider for this database. Make sure that the feature you are tyring to use is enabled\" );\n-        }\n-    };\n-    String LUCENE_FULLTEXT_ADDON_PREFIX = \"__lucene__fulltext__addon__\";\n-    String FIELD_ENTITY_ID = LUCENE_FULLTEXT_ADDON_PREFIX + \"internal__id__\";\n+    private RuntimeException noProvider()\n+    {\n+        return new UnsupportedOperationException( \"There is no fulltext provider for this database. Make sure that the feature you are tyring to use is enabled\" );\n+    }\n+}\n \n-    void registerTransactionEventHandler();\n+    ; String LUCENE_FULLTEXT_ADDON_PREFIX = \"__lucene__fulltext__addon__\";\n+    String FIELD_ENTITY_ID = LUCENE_FULLTEXT_ADDON_PREFIX + \"internal__id__\";\n+    void registerTransactionEventHandler()\n+    ;\n \n     /**\n      * Wait for the asynchronous background population, if one is on-going, to complete.\n@@ -109,12 +108,9 @@ public interface FulltextProvider extends AutoCloseable\n      * needs to recover after an unclean shut-down, or a configuration change.\n      *\n      * @throws RuntimeException If it was not possible to wait for the population to finish, for some reason.\n-     */\n-    void awaitPopulation();\n-\n-    void openIndex( String identifier, FulltextIndexType type ) throws IOException;\n-\n-    void createIndex( String identifier, FulltextIndexType type, List<String> properties ) throws IOException;\n+     */ void awaitPopulation()\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                      ; void openIndex( String identifier, FulltextIndexType type ) throws IOException ;\n+    void createIndex( String identifier, FulltextIndexType type, List<String> properties ) throws IOException ;\n \n     /**\n      * Returns a reader for the specified index.\n@@ -124,13 +120,9 @@ public interface FulltextProvider extends AutoCloseable\n      * @return A {@link ReadOnlyFulltext} for the index, or null if no such index is found.\n      * @throws IOException\n      */\n-    ReadOnlyFulltext getReader( String identifier, FulltextIndexType type ) throws IOException;\n-\n-    Set<String> getProperties( String identifier, FulltextIndexType type );\n-\n-    InternalIndexState getState( String identifier, FulltextIndexType type );\n-\n-    void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys ) throws IOException, InvalidArgumentsException;\n-\n-    void registerFileListing( NeoStoreFileListing fileListing );\n-}\n+    ReadOnlyFulltext getReader( String identifier, FulltextIndexType type ) throws IOException ;\n+    Set<String> getProperties( String identifier, FulltextIndexType type )\n+    ; InternalIndexState getState( String identifier, FulltextIndexType type )\n+      ; void changeIndexedProperties( String identifier, FulltextIndexType type, List<String> propertyKeys ) throws IOException, InvalidArgumentsException ;\n+    void registerFileListing( NeoStoreFileListing fileListing )\n+    ; }\n\\ No newline at end of file\n",
            "diff_size": 82
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}