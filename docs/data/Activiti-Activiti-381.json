{
    "project_name": "Activiti-Activiti",
    "error_id": "381",
    "information": {
        "errors": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.bpmn.behavior;\n\nimport java.util.Collection;\nimport java.util.HashMap;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/381/EventSubProcessMessageStartEventActivityBehavior.java\nindex 79190195b73..b5b265d4a45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/381/EventSubProcessMessageStartEventActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.Collection;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/381/EventSubProcessMessageStartEventActivityBehavior.java\nindex 79190195b73..1263b8b2752 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/381/EventSubProcessMessageStartEventActivityBehavior.java\n@@ -41,81 +41,79 @@ import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntit\n \n /**\n  * Implementation of the BPMN 2.0 event subprocess message start event.\n- *\n-\n  */\n public class EventSubProcessMessageStartEventActivityBehavior extends AbstractBpmnActivityBehavior {\n \n-  private static final long serialVersionUID = 1L;\n+    private static final long serialVersionUID = 1L;\n \n-  protected final MessageEventDefinition messageEventDefinition;\n-  protected final MessageExecutionContext messageExecutionContext;\n+    protected final MessageEventDefinition messageEventDefinition;\n+    protected final MessageExecutionContext messageExecutionContext;\n \n-  public EventSubProcessMessageStartEventActivityBehavior(MessageEventDefinition messageEventDefinition,\n-                                                          MessageExecutionContext messageExecutionContext) {\n-    this.messageEventDefinition = messageEventDefinition;\n-    this.messageExecutionContext = messageExecutionContext;\n-  }\n+    public EventSubProcessMessageStartEventActivityBehavior(MessageEventDefinition messageEventDefinition,\n+                                                            MessageExecutionContext messageExecutionContext) {\n+        this.messageEventDefinition = messageEventDefinition;\n+        this.messageExecutionContext = messageExecutionContext;\n+    }\n \n-  public void execute(DelegateExecution execution) {\n-    StartEvent startEvent = (StartEvent) execution.getCurrentFlowElement();\n-    EventSubProcess eventSubProcess = (EventSubProcess) startEvent.getSubProcess();\n+    public void execute(DelegateExecution execution) {\n+        StartEvent startEvent = (StartEvent) execution.getCurrentFlowElement();\n+        EventSubProcess eventSubProcess = (EventSubProcess) startEvent.getSubProcess();\n \n-    execution.setScope(true);\n+        execution.setScope(true);\n \n-    // initialize the template-defined data objects as variables\n-    Map<String, Object> dataObjectVars = processDataObjects(eventSubProcess.getDataObjects());\n-    if (dataObjectVars != null) {\n-      execution.setVariablesLocal(dataObjectVars);\n-    }\n-  }\n-\n-  @Override\n-  public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n-    CommandContext commandContext = Context.getCommandContext();\n-    ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n-    ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-\n-    StartEvent startEvent = (StartEvent) execution.getCurrentFlowElement();\n-    if (startEvent.isInterrupting()) {\n-      List<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(executionEntity.getParentId());\n-      for (ExecutionEntity childExecution : childExecutions) {\n-        if (!childExecution.getId().equals(executionEntity.getId())) {\n-          executionEntityManager.cancelExecutionAndRelatedData(childExecution,\n-              DeleteReason.EVENT_SUBPROCESS_INTERRUPTING + \"(\" + startEvent.getId() + \")\");\n+        // initialize the template-defined data objects as variables\n+        Map<String, Object> dataObjectVars = processDataObjects(eventSubProcess.getDataObjects());\n+        if (dataObjectVars != null) {\n+            execution.setVariablesLocal(dataObjectVars);\n         }\n-      }\n     }\n \n-    // Should we use triggerName and triggerData, because message name expression can change?\n-    String messageName = messageExecutionContext.getMessageName(execution);\n+    @Override\n+    public void trigger(DelegateExecution execution, String triggerName, Object triggerData) {\n+        CommandContext commandContext = Context.getCommandContext();\n+        ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n+        ExecutionEntity executionEntity = (ExecutionEntity) execution;\n+\n+        StartEvent startEvent = (StartEvent) execution.getCurrentFlowElement();\n+        if (startEvent.isInterrupting()) {\n+            List<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(executionEntity.getParentId());\n+            for (ExecutionEntity childExecution : childExecutions) {\n+                if (!childExecution.getId().equals(executionEntity.getId())) {\n+                    executionEntityManager.cancelExecutionAndRelatedData(childExecution,\n+                            DeleteReason.EVENT_SUBPROCESS_INTERRUPTING + \"(\" + startEvent.getId() + \")\");\n+                }\n+            }\n+        }\n+\n+        // Should we use triggerName and triggerData, because message name expression can change?\n+        String messageName = messageExecutionContext.getMessageName(execution);\n \n-    EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n-    List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n-    for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n-      if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageName)) {\n+        EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n+        List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n+        for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n+            if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageName)) {\n \n-        eventSubscriptionEntityManager.delete(eventSubscription);\n-      }\n-    }\n+                eventSubscriptionEntityManager.delete(eventSubscription);\n+            }\n+        }\n \n-    executionEntity.setCurrentFlowElement((SubProcess) executionEntity.getCurrentFlowElement().getParentContainer());\n-    executionEntity.setScope(true);\n+        executionEntity.setCurrentFlowElement((SubProcess) executionEntity.getCurrentFlowElement().getParentContainer());\n+        executionEntity.setScope(true);\n \n-    ExecutionEntity outgoingFlowExecution = executionEntityManager.createChildExecution(executionEntity);\n-    outgoingFlowExecution.setCurrentFlowElement(startEvent);\n+        ExecutionEntity outgoingFlowExecution = executionEntityManager.createChildExecution(executionEntity);\n+        outgoingFlowExecution.setCurrentFlowElement(startEvent);\n \n-    leave(outgoingFlowExecution);\n-  }\n+        leave(outgoingFlowExecution);\n+    }\n \n-  protected Map<String, Object> processDataObjects(Collection<ValuedDataObject> dataObjects) {\n-    Map<String, Object> variablesMap = new HashMap<>();\n-    // convert data objects to process variables\n-    if (dataObjects != null) {\n-      for (ValuedDataObject dataObject : dataObjects) {\n-        variablesMap.put(dataObject.getName(), dataObject.getValue());\n-      }\n+    protected Map<String, Object> processDataObjects(Collection<ValuedDataObject> dataObjects) {\n+        Map<String, Object> variablesMap = new HashMap<>();\n+        // convert data objects to process variables\n+        if (dataObjects != null) {\n+            for (ValuedDataObject dataObject : dataObjects) {\n+                variablesMap.put(dataObject.getName(), dataObject.getValue());\n+            }\n+        }\n+        return variablesMap;\n     }\n-    return variablesMap;\n-  }\n }\n",
            "diff_size": 78
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/381/EventSubProcessMessageStartEventActivityBehavior.java\nindex 79190195b73..d6cfabaf5ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/381/EventSubProcessMessageStartEventActivityBehavior.java\n@@ -21,7 +21,6 @@ import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.activiti.bpmn.model.EventSubProcess;\n import org.activiti.bpmn.model.MessageEventDefinition;\n import org.activiti.bpmn.model.StartEvent;\n@@ -44,15 +43,15 @@ import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntit\n  *\n \n  */\n+\n+\n public class EventSubProcessMessageStartEventActivityBehavior extends AbstractBpmnActivityBehavior {\n \n   private static final long serialVersionUID = 1L;\n-\n   protected final MessageEventDefinition messageEventDefinition;\n   protected final MessageExecutionContext messageExecutionContext;\n \n-  public EventSubProcessMessageStartEventActivityBehavior(MessageEventDefinition messageEventDefinition,\n-                                                          MessageExecutionContext messageExecutionContext) {\n+  public EventSubProcessMessageStartEventActivityBehavior(MessageEventDefinition messageEventDefinition, MessageExecutionContext messageExecutionContext) {\n     this.messageEventDefinition = messageEventDefinition;\n     this.messageExecutionContext = messageExecutionContext;\n   }\n@@ -60,10 +59,10 @@ public class EventSubProcessMessageStartEventActivityBehavior extends AbstractBp\n   public void execute(DelegateExecution execution) {\n     StartEvent startEvent = (StartEvent) execution.getCurrentFlowElement();\n     EventSubProcess eventSubProcess = (EventSubProcess) startEvent.getSubProcess();\n-\n     execution.setScope(true);\n \n     // initialize the template-defined data objects as variables\n+\n     Map<String, Object> dataObjectVars = processDataObjects(eventSubProcess.getDataObjects());\n     if (dataObjectVars != null) {\n       execution.setVariablesLocal(dataObjectVars);\n@@ -75,36 +74,31 @@ public class EventSubProcessMessageStartEventActivityBehavior extends AbstractBp\n     CommandContext commandContext = Context.getCommandContext();\n     ExecutionEntityManager executionEntityManager = commandContext.getExecutionEntityManager();\n     ExecutionEntity executionEntity = (ExecutionEntity) execution;\n-\n     StartEvent startEvent = (StartEvent) execution.getCurrentFlowElement();\n     if (startEvent.isInterrupting()) {\n       List<ExecutionEntity> childExecutions = executionEntityManager.findChildExecutionsByParentExecutionId(executionEntity.getParentId());\n       for (ExecutionEntity childExecution : childExecutions) {\n         if (!childExecution.getId().equals(executionEntity.getId())) {\n-          executionEntityManager.cancelExecutionAndRelatedData(childExecution,\n-              DeleteReason.EVENT_SUBPROCESS_INTERRUPTING + \"(\" + startEvent.getId() + \")\");\n+          executionEntityManager.cancelExecutionAndRelatedData(childExecution, DeleteReason.EVENT_SUBPROCESS_INTERRUPTING + \"(\" + startEvent.getId() + \")\");\n         }\n       }\n     }\n \n     // Should we use triggerName and triggerData, because message name expression can change?\n-    String messageName = messageExecutionContext.getMessageName(execution);\n \n+    String messageName = messageExecutionContext.getMessageName(execution);\n     EventSubscriptionEntityManager eventSubscriptionEntityManager = Context.getCommandContext().getEventSubscriptionEntityManager();\n     List<EventSubscriptionEntity> eventSubscriptions = executionEntity.getEventSubscriptions();\n     for (EventSubscriptionEntity eventSubscription : eventSubscriptions) {\n       if (eventSubscription instanceof MessageEventSubscriptionEntity && eventSubscription.getEventName().equals(messageName)) {\n-\n         eventSubscriptionEntityManager.delete(eventSubscription);\n       }\n     }\n-\n     executionEntity.setCurrentFlowElement((SubProcess) executionEntity.getCurrentFlowElement().getParentContainer());\n     executionEntity.setScope(true);\n \n     ExecutionEntity outgoingFlowExecution = executionEntityManager.createChildExecution(executionEntity);\n     outgoingFlowExecution.setCurrentFlowElement(startEvent);\n-\n     leave(outgoingFlowExecution);\n   }\n \n@@ -112,10 +106,12 @@ public class EventSubProcessMessageStartEventActivityBehavior extends AbstractBp\n     Map<String, Object> variablesMap = new HashMap<>();\n     // convert data objects to process variables\n     if (dataObjects != null) {\n-      for (ValuedDataObject dataObject : dataObjects) {\n-        variablesMap.put(dataObject.getName(), dataObject.getValue());\n-      }\n+        for (ValuedDataObject dataObject : dataObjects) {\n+            variablesMap.put(dataObject.getName(),\n+                             dataObject.getValue());\n+        }\n     }\n     return variablesMap;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/381/EventSubProcessMessageStartEventActivityBehavior.java\nindex 79190195b73..b5b265d4a45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/381/EventSubProcessMessageStartEventActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.Collection;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/381/EventSubProcessMessageStartEventActivityBehavior.java\nindex 79190195b73..b5b265d4a45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/381/EventSubProcessMessageStartEventActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/381/EventSubProcessMessageStartEventActivityBehavior.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.bpmn.behavior;\n \n import java.util.Collection;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}