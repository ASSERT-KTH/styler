{
    "project_name": "neo4j-neo4j",
    "error_id": "607",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "148",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/607/PageCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/607/PageCache.java\nindex ba43769542e..17f7a8dc8fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/607/PageCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/607/PageCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -56,15 +57,15 @@ public interface PageCache extends AutoCloseable\n      * of varying size in the stores. This should be consolidated to use a standard page size for the\n      * whole cache, with records aligning on those page boundaries.\n      *\n-     * @param path The file to map.\n+     * @param path     The file to map.\n      * @param pageSize The file page size to use for this mapping. If the file is already mapped with a different page\n-     * size, an exception will be thrown.\n+     *                 size, an exception will be thrown.\n      * @throws java.nio.file.NoSuchFileException if the given file does not exist.\n-     * @throws IOException if the file could otherwise not be mapped. Causes include the file being locked.\n+     * @throws IOException                       if the file could otherwise not be mapped. Causes include the file being locked.\n      */\n-    default PagedFile map( Path path, int pageSize ) throws IOException\n+    default PagedFile map(Path path, int pageSize) throws IOException\n     {\n-        return map( path, versionContextSupplier(), pageSize, immutable.empty() );\n+        return map(path, versionContextSupplier(), pageSize, immutable.empty());\n     }\n \n     /**\n@@ -74,23 +75,23 @@ public interface PageCache extends AutoCloseable\n      * of varying size in the stores. This should be consolidated to use a standard page size for the\n      * whole cache, with records aligning on those page boundaries.\n      *\n-     * @param path The file to map.\n-     * @param pageSize The file page size to use for this mapping. If the file is already mapped with a different page\n-     * size, an exception will be thrown.\n+     * @param path        The file to map.\n+     * @param pageSize    The file page size to use for this mapping. If the file is already mapped with a different page\n+     *                    size, an exception will be thrown.\n      * @param openOptions The set of open options to use for mapping this file.\n-     * The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n-     * The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n-     * the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n-     * been mapped.\n-     * The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n-     * All other options are either silently ignored, or will cause an exception to be thrown.\n+     *                    The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n+     *                    The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n+     *                    the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n+     *                    been mapped.\n+     *                    The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n+     *                    All other options are either silently ignored, or will cause an exception to be thrown.\n      * @throws java.nio.file.NoSuchFileException if the given file does not exist, and the\n-     * {@link StandardOpenOption#CREATE} option was not specified.\n-     * @throws IOException if the file could otherwise not be mapped. Causes include the file being locked.\n+     *                                           {@link StandardOpenOption#CREATE} option was not specified.\n+     * @throws IOException                       if the file could otherwise not be mapped. Causes include the file being locked.\n      */\n-    default PagedFile map( Path path, int pageSize, ImmutableSet<OpenOption> openOptions ) throws IOException\n+    default PagedFile map(Path path, int pageSize, ImmutableSet<OpenOption> openOptions) throws IOException\n     {\n-        return map( path, versionContextSupplier(), pageSize, openOptions );\n+        return map(path, versionContextSupplier(), pageSize, openOptions);\n     }\n \n     /**\n@@ -100,24 +101,24 @@ public interface PageCache extends AutoCloseable\n      * of varying size in the stores. This should be consolidated to use a standard page size for the\n      * whole cache, with records aligning on those page boundaries.\n      *\n-     * @param path The file to map.\n+     * @param path                   The file to map.\n      * @param versionContextSupplier supplier of thread local (transaction local) version context that will provide\n-     * @param pageSize The file page size to use for this mapping. If the file is already mapped with a different page\n-     * size, an exception will be thrown.\n-     * @param openOptions The set of open options to use for mapping this file.\n-     * The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n-     * The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n-     * the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n-     * been mapped.\n-     * The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n-     * All other options are either silently ignored, or will cause an exception to be thrown.\n+     * @param pageSize               The file page size to use for this mapping. If the file is already mapped with a different page\n+     *                               size, an exception will be thrown.\n+     * @param openOptions            The set of open options to use for mapping this file.\n+     *                               The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n+     *                               The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n+     *                               the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n+     *                               been mapped.\n+     *                               The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n+     *                               All other options are either silently ignored, or will cause an exception to be thrown.\n      * @throws java.nio.file.NoSuchFileException if the given file does not exist, and the\n-     * {@link StandardOpenOption#CREATE} option was not specified.\n-     * @throws IOException if the file could otherwise not be mapped. Causes include the file being locked.\n+     *                                           {@link StandardOpenOption#CREATE} option was not specified.\n+     * @throws IOException                       if the file could otherwise not be mapped. Causes include the file being locked.\n      */\n-    default PagedFile map( Path path, VersionContextSupplier versionContextSupplier, int pageSize, ImmutableSet<OpenOption> openOptions ) throws IOException\n+    default PagedFile map(Path path, VersionContextSupplier versionContextSupplier, int pageSize, ImmutableSet<OpenOption> openOptions) throws IOException\n     {\n-        return map( path, versionContextSupplier, pageSize, openOptions, null );\n+        return map(path, versionContextSupplier, pageSize, openOptions, null);\n     }\n \n     /**\n@@ -127,25 +128,25 @@ public interface PageCache extends AutoCloseable\n      * of varying size in the stores. This should be consolidated to use a standard page size for the\n      * whole cache, with records aligning on those page boundaries.\n      *\n-     * @param path The file to map.\n+     * @param path                   The file to map.\n      * @param versionContextSupplier supplier of thread local (transaction local) version context that will provide\n-     * @param pageSize The file page size to use for this mapping. If the file is already mapped with a different page\n-     * size, an exception will be thrown.\n-     * @param openOptions The set of open options to use for mapping this file.\n-     * The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n-     * The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n-     * the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n-     * been mapped.\n-     * The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n-     * All other options are either silently ignored, or will cause an exception to be thrown.\n-     * @param databaseName an optional name of the database the mapped file belongs to. This option associates the mapped file with a database.\n-     * This information is currently used only for monitoring purposes.\n+     * @param pageSize               The file page size to use for this mapping. If the file is already mapped with a different page\n+     *                               size, an exception will be thrown.\n+     * @param openOptions            The set of open options to use for mapping this file.\n+     *                               The {@link StandardOpenOption#READ} and {@link StandardOpenOption#WRITE} options always implicitly specified.\n+     *                               The {@link StandardOpenOption#CREATE} open option will create the given file if it does not already exist, and\n+     *                               the {@link StandardOpenOption#TRUNCATE_EXISTING} will truncate any existing file <em>iff</em> it has not already\n+     *                               been mapped.\n+     *                               The {@link StandardOpenOption#DELETE_ON_CLOSE} will cause the file to be deleted after the last unmapping.\n+     *                               All other options are either silently ignored, or will cause an exception to be thrown.\n+     * @param databaseName           an optional name of the database the mapped file belongs to. This option associates the mapped file with a database.\n+     *                               This information is currently used only for monitoring purposes.\n      * @throws java.nio.file.NoSuchFileException if the given file does not exist, and the\n-     * {@link StandardOpenOption#CREATE} option was not specified.\n-     * @throws IOException if the file could otherwise not be mapped. Causes include the file being locked.\n+     *                                           {@link StandardOpenOption#CREATE} option was not specified.\n+     * @throws IOException                       if the file could otherwise not be mapped. Causes include the file being locked.\n      */\n-    PagedFile map( Path path, VersionContextSupplier versionContextSupplier, int pageSize, ImmutableSet<OpenOption> openOptions, String databaseName )\n-            throws IOException;\n+    PagedFile map(Path path, VersionContextSupplier versionContextSupplier, int pageSize, ImmutableSet<OpenOption> openOptions, String databaseName)\n+      throws IOException;\n \n     /**\n      * Ask for an already mapped paged file, backed by this page cache.\n@@ -163,7 +164,7 @@ public interface PageCache extends AutoCloseable\n      * empty {@link Optional} if no mapping exist.\n      * @throws IOException if page cache has been closed or page eviction problems occur.\n      */\n-    Optional<PagedFile> getExistingMapping( Path path ) throws IOException;\n+    Optional<PagedFile> getExistingMapping(Path path) throws IOException;\n \n     /**\n      * List a snapshot of the current file mappings.\n@@ -188,9 +189,9 @@ public interface PageCache extends AutoCloseable\n      * Flush all dirty pages, but limit the rate of IO as advised by the given IOPSLimiter.\n      *\n      * @param limiter The {@link IOLimiter} that determines if pauses or sleeps should be injected into the flushing\n-     * process to keep the IO rate down.\n+     *                process to keep the IO rate down.\n      */\n-    void flushAndForce( IOLimiter limiter ) throws IOException;\n+    void flushAndForce(IOLimiter limiter) throws IOException;\n \n     /**\n      * Close the page cache to prevent any future mapping of files.\n@@ -198,9 +199,9 @@ public interface PageCache extends AutoCloseable\n      * {@link PageSwapperFactory#close() close} method.\n      *\n      * @throws IllegalStateException if not all files have been unmapped, with {@link PagedFile#close()}, prior to\n-     * closing the page cache. In this case, the page cache <em>WILL NOT</em> be considered to be successfully closed.\n-     * @throws RuntimeException if the {@link PageSwapperFactory#close()} method throws. In this case the page cache\n-     * <em>WILL BE</em> considered to have been closed successfully.\n+     *                               closing the page cache. In this case, the page cache <em>WILL NOT</em> be considered to be successfully closed.\n+     * @throws RuntimeException      if the {@link PageSwapperFactory#close()} method throws. In this case the page cache\n+     *                               <em>WILL BE</em> considered to have been closed successfully.\n      */\n     @Override\n     void close();\n@@ -218,12 +219,14 @@ public interface PageCache extends AutoCloseable\n     /**\n      * Default supplier of thread local (transaction local) version context for current page cache instance that will be used\n      * on page file mapping.\n+     *\n      * @return page cache specific version context supplier.\n      */\n     VersionContextSupplier versionContextSupplier();\n \n     /**\n      * Factory for file local buffers that are used on page cache mapped files\n+     *\n      * @return temporary flush buffer factory\n      */\n     IOBufferFactory getBufferFactory();\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}