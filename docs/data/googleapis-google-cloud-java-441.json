{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "441",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 108).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class SerializationTest extends BaseSerializationTest {\n\n  private static final Compute COMPUTE = ComputeOptions.newBuilder().setProjectId(\"p\").build().getService();\n  private static final Long CREATION_TIMESTAMP = 1453293540000L;\n  private static final String DESCRIPTION = \"description\";\n  private static final String VALID_DISK_SIZE = \"10GB-10TB\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/441/SerializationTest.java\nindex 28fdc44c548..743f1bde09a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/441/SerializationTest.java\n@@ -32,7 +32,8 @@ import java.util.List;\n \n public class SerializationTest extends BaseSerializationTest {\n \n-  private static final Compute COMPUTE = ComputeOptions.newBuilder().setProjectId(\"p\").build().getService();\n+  private static final Compute COMPUTE =\n+      ComputeOptions.newBuilder().setProjectId(\"p\").build().getService();\n   private static final Long CREATION_TIMESTAMP = 1453293540000L;\n   private static final String DESCRIPTION = \"description\";\n   private static final String VALID_DISK_SIZE = \"10GB-10TB\";\n@@ -271,7 +272,7 @@ public class SerializationTest extends BaseSerializationTest {\n         .setProjectId(\"p2\")\n         .setRetrySettings(ServiceOptions.getDefaultRetrySettings())\n         .build();\n-    return new Serializable[]{DISK_TYPE_ID, DISK_TYPE, MACHINE_TYPE_ID, MACHINE_TYPE, REGION_ID,\n+    return new Serializable[] {DISK_TYPE_ID, DISK_TYPE, MACHINE_TYPE_ID, MACHINE_TYPE, REGION_ID,\n         REGION, ZONE_ID, ZONE, LICENSE_ID, LICENSE, DEPRECATION_STATUS, GLOBAL_OPERATION_ID,\n         REGION_OPERATION_ID, ZONE_OPERATION_ID, GLOBAL_OPERATION, REGION_OPERATION, ZONE_OPERATION,\n         INSTANCE_ID, REGION_FORWARDING_RULE_ID, GLOBAL_FORWARDING_RULE_ID, GLOBAL_ADDRESS_ID,\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 4, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "'Compute' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "264",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/441/SerializationTest.java\nindex 28fdc44c548..22b02b9e771 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/441/SerializationTest.java\n@@ -182,7 +182,7 @@ public class SerializationTest extends BaseSerializationTest {\n   private static final Instance INSTANCE =\n       new Instance.Builder(COMPUTE, INSTANCE_ID, MACHINE_TYPE_ID, ATTACHED_DISK, NETWORK_INTERFACE)\n           .build();\n-  private static final Compute.DiskTypeOption DISK_TYPE_OPTION =\n+    private static final Compute.DiskTypeOption DISK_TYPE_OPTION =\n       Compute.DiskTypeOption.fields();\n   private static final Compute.DiskTypeFilter DISK_TYPE_FILTER =\n       Compute.DiskTypeFilter.equals(Compute.DiskTypeField.SELF_LINK, \"selfLink\");\n@@ -261,7 +261,7 @@ public class SerializationTest extends BaseSerializationTest {\n   private static final Compute.InstanceAggregatedListOption INSTANCE_AGGREGATED_LIST_OPTION =\n       Compute.InstanceAggregatedListOption.filter(INSTANCE_FILTER);\n \n-  @Override\n+@Override\n   protected Serializable[] serializableObjects() {\n     ComputeOptions options = ComputeOptions.newBuilder()\n         .setProjectId(\"p1\")\n@@ -301,4 +301,4 @@ public class SerializationTest extends BaseSerializationTest {\n   protected Restorable<?>[] restorableObjects() {\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 384).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 1,944).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/441/SerializationTest.java\nindex 28fdc44c548..b0f067bff20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/441/SerializationTest.java\n@@ -26,10 +26,10 @@ import com.google.cloud.compute.deprecated.AttachedDisk.ScratchDiskConfiguration\n import com.google.cloud.compute.deprecated.NetworkInterface.AccessConfig;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n-\n import java.io.Serializable;\n import java.util.List;\n \n+\n public class SerializationTest extends BaseSerializationTest {\n \n   private static final Compute COMPUTE = ComputeOptions.newBuilder().setProjectId(\"p\").build().getService();\n@@ -38,267 +38,133 @@ public class SerializationTest extends BaseSerializationTest {\n   private static final String VALID_DISK_SIZE = \"10GB-10TB\";\n   private static final Long DEFAULT_DISK_SIZE_GB = 10L;\n   private static final DiskTypeId DISK_TYPE_ID = DiskTypeId.of(\"project\", \"zone\", \"diskType\");\n-  private static final DiskType DISK_TYPE = DiskType.newBuilder()\n-      .setDiskTypeId(DISK_TYPE_ID)\n-      .setCreationTimestamp(CREATION_TIMESTAMP)\n-      .setDescription(DESCRIPTION)\n-      .setValidDiskSize(VALID_DISK_SIZE)\n-      .setDefaultDiskSizeGb(DEFAULT_DISK_SIZE_GB)\n-      .build();\n+  private static final DiskType DISK_TYPE = DiskType.newBuilder().setDiskTypeId(DISK_TYPE_ID).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setValidDiskSize(VALID_DISK_SIZE).setDefaultDiskSizeGb(DEFAULT_DISK_SIZE_GB).build();\n   private static final MachineTypeId MACHINE_TYPE_ID = MachineTypeId.of(\"project\", \"zone\", \"type\");\n   private static final Integer GUEST_CPUS = 1;\n   private static final Integer MEMORY_MB = 2;\n   private static final List<Integer> SCRATCH_DISKS = ImmutableList.of(3);\n   private static final Integer MAXIMUM_PERSISTENT_DISKS = 4;\n   private static final Long MAXIMUM_PERSISTENT_DISKS_SIZE_GB = 5L;\n-  private static final MachineType MACHINE_TYPE = MachineType.newBuilder()\n-      .setMachineTypeId(MACHINE_TYPE_ID)\n-      .setCreationTimestamp(CREATION_TIMESTAMP)\n-      .setDescription(DESCRIPTION)\n-      .setCpus(GUEST_CPUS)\n-      .setMemoryMb(MEMORY_MB)\n-      .setScratchDisksSizeGb(SCRATCH_DISKS)\n-      .setMaximumPersistentDisks(MAXIMUM_PERSISTENT_DISKS)\n-      .setMaximumPersistentDisksSizeGb(MAXIMUM_PERSISTENT_DISKS_SIZE_GB)\n-      .build();\n+  private static final MachineType MACHINE_TYPE = MachineType.newBuilder().setMachineTypeId(MACHINE_TYPE_ID).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setCpus(GUEST_CPUS).setMemoryMb(MEMORY_MB).setScratchDisksSizeGb(SCRATCH_DISKS).setMaximumPersistentDisks(MAXIMUM_PERSISTENT_DISKS).setMaximumPersistentDisksSizeGb(MAXIMUM_PERSISTENT_DISKS_SIZE_GB).build();\n   private static final RegionId REGION_ID = RegionId.of(\"project\", \"region\");\n   private static final Region.Status REGION_STATUS = Region.Status.DOWN;\n   private static final ZoneId ZONE_ID1 = ZoneId.of(\"project\", \"zone1\");\n   private static final ZoneId ZONE_ID2 = ZoneId.of(\"project\", \"zone2\");\n   private static final List<ZoneId> ZONES = ImmutableList.of(ZONE_ID1, ZONE_ID2);\n-  private static final Region.Quota QUOTA1 =\n-      new Region.Quota(\"METRIC1\", 2, 1);\n-  private static final Region.Quota QUOTA2 =\n-      new Region.Quota(\"METRIC2\", 4, 3);\n+  private static final Region.Quota QUOTA1 = new Region.Quota(\"METRIC1\", 2, 1);\n+  private static final Region.Quota QUOTA2 = new Region.Quota(\"METRIC2\", 4, 3);\n   private static final List<Region.Quota> QUOTAS = ImmutableList.of(QUOTA1, QUOTA2);\n-  private static final Region REGION = Region.builder()\n-      .setRegionId(REGION_ID)\n-      .setCreationTimestamp(CREATION_TIMESTAMP)\n-      .setDescription(DESCRIPTION)\n-      .setStatus(REGION_STATUS)\n-      .setZones(ZONES)\n-      .setQuotas(QUOTAS)\n-      .build();\n+  private static final Region REGION = Region.builder().setRegionId(REGION_ID).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setStatus(REGION_STATUS).setZones(ZONES).setQuotas(QUOTAS).build();\n   private static final ZoneId ZONE_ID = ZoneId.of(\"project\", \"zone\");\n   private static final Zone.Status ZONE_STATUS = Zone.Status.DOWN;\n-  private static final Zone ZONE = Zone.builder()\n-      .setZoneId(ZONE_ID)\n-      .setCreationTimestamp(CREATION_TIMESTAMP)\n-      .setDescription(DESCRIPTION)\n-      .setStatus(ZONE_STATUS)\n-      .setRegion(REGION_ID)\n-      .build();\n-  private static final DeprecationStatus<MachineTypeId> DEPRECATION_STATUS =\n-      DeprecationStatus.of(DeprecationStatus.Status.DELETED, MACHINE_TYPE_ID);\n+  private static final Zone ZONE = Zone.builder().setZoneId(ZONE_ID).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setStatus(ZONE_STATUS).setRegion(REGION_ID).build();\n+  private static final DeprecationStatus<MachineTypeId> DEPRECATION_STATUS = DeprecationStatus.of(DeprecationStatus.Status.DELETED, MACHINE_TYPE_ID);\n   private static final LicenseId LICENSE_ID = LicenseId.of(\"project\", \"license\");\n   private static final Boolean CHARGES_USE_FEE = true;\n   private static final License LICENSE = new License(LICENSE_ID, CHARGES_USE_FEE);\n-  private static final GlobalOperationId GLOBAL_OPERATION_ID =\n-      GlobalOperationId.of(\"project\", \"op\");\n-  private static final ZoneOperationId ZONE_OPERATION_ID =\n-      ZoneOperationId.of(\"project\", \"zone\", \"op\");\n-  private static final RegionOperationId REGION_OPERATION_ID =\n-      RegionOperationId.of(\"project\", \"region\", \"op\");\n-  private static final Operation GLOBAL_OPERATION =\n-      new Operation.Builder(COMPUTE).setOperationId(GLOBAL_OPERATION_ID).build();\n-  private static final Operation ZONE_OPERATION =\n-      new Operation.Builder(COMPUTE).setOperationId(ZONE_OPERATION_ID).build();\n-  private static final Operation REGION_OPERATION =\n-      new Operation.Builder(COMPUTE).setOperationId(REGION_OPERATION_ID).build();\n+  private static final GlobalOperationId GLOBAL_OPERATION_ID = GlobalOperationId.of(\"project\", \"op\");\n+  private static final ZoneOperationId ZONE_OPERATION_ID = ZoneOperationId.of(\"project\", \"zone\", \"op\");\n+  private static final RegionOperationId REGION_OPERATION_ID = RegionOperationId.of(\"project\", \"region\", \"op\");\n+  private static final Operation GLOBAL_OPERATION = new Operation.Builder(COMPUTE).setOperationId(GLOBAL_OPERATION_ID).build();\n+  private static final Operation ZONE_OPERATION = new Operation.Builder(COMPUTE).setOperationId(ZONE_OPERATION_ID).build();\n+  private static final Operation REGION_OPERATION = new Operation.Builder(COMPUTE).setOperationId(REGION_OPERATION_ID).build();\n   private static final InstanceId INSTANCE_ID = InstanceId.of(\"project\", \"zone\", \"instance\");\n-  private static final GlobalForwardingRuleId GLOBAL_FORWARDING_RULE_ID =\n-      GlobalForwardingRuleId.of(\"project\", \"rule\");\n-  private static final RegionForwardingRuleId REGION_FORWARDING_RULE_ID =\n-      RegionForwardingRuleId.of(\"project\", \"region\", \"rule\");\n+  private static final GlobalForwardingRuleId GLOBAL_FORWARDING_RULE_ID = GlobalForwardingRuleId.of(\"project\", \"rule\");\n+  private static final RegionForwardingRuleId REGION_FORWARDING_RULE_ID = RegionForwardingRuleId.of(\"project\", \"region\", \"rule\");\n   private static final GlobalAddressId GLOBAL_ADDRESS_ID = GlobalAddressId.of(\"project\", \"address\");\n-  private static final RegionAddressId REGION_ADDRESS_ID =\n-      RegionAddressId.of(\"project\", \"region\", \"address\");\n-  private static final AddressInfo.InstanceUsage INSTANCE_USAGE =\n-      new AddressInfo.InstanceUsage(INSTANCE_ID);\n-  private static final AddressInfo.GlobalForwardingUsage GLOBAL_FORWARDING_USAGE =\n-      new AddressInfo.GlobalForwardingUsage(ImmutableList.of(GLOBAL_FORWARDING_RULE_ID));\n-  private static final AddressInfo.RegionForwardingUsage REGION_FORWARDING_USAGE =\n-      new AddressInfo.RegionForwardingUsage(ImmutableList.of(REGION_FORWARDING_RULE_ID));\n-  private static final AddressInfo ADDRESS_INFO = AddressInfo.newBuilder(REGION_ADDRESS_ID)\n-      .setCreationTimestamp(CREATION_TIMESTAMP)\n-      .setDescription(DESCRIPTION)\n-      .setUsage(INSTANCE_USAGE)\n-      .build();\n+  private static final RegionAddressId REGION_ADDRESS_ID = RegionAddressId.of(\"project\", \"region\", \"address\");\n+  private static final AddressInfo.InstanceUsage INSTANCE_USAGE = new AddressInfo.InstanceUsage(INSTANCE_ID);\n+  private static final AddressInfo.GlobalForwardingUsage GLOBAL_FORWARDING_USAGE = new AddressInfo.GlobalForwardingUsage(ImmutableList.of(GLOBAL_FORWARDING_RULE_ID));\n+  private static final AddressInfo.RegionForwardingUsage REGION_FORWARDING_USAGE = new AddressInfo.RegionForwardingUsage(ImmutableList.of(REGION_FORWARDING_RULE_ID));\n+  private static final AddressInfo ADDRESS_INFO = AddressInfo.newBuilder(REGION_ADDRESS_ID).setCreationTimestamp(CREATION_TIMESTAMP).setDescription(DESCRIPTION).setUsage(INSTANCE_USAGE).build();\n   private static final Address ADDRESS = new Address.Builder(COMPUTE, REGION_ADDRESS_ID).build();\n   private static final DiskId DISK_ID = DiskId.of(\"project\", \"zone\", \"disk\");\n   private static final SnapshotId SNAPSHOT_ID = SnapshotId.of(\"project\", \"snapshot\");\n   private static final SnapshotInfo SNAPSHOT_INFO = SnapshotInfo.of(SNAPSHOT_ID, DISK_ID);\n-  private static final Snapshot SNAPSHOT =\n-      new Snapshot.Builder(COMPUTE, SNAPSHOT_ID, DISK_ID).build();\n+  private static final Snapshot SNAPSHOT = new Snapshot.Builder(COMPUTE, SNAPSHOT_ID, DISK_ID).build();\n   private static final ImageId IMAGE_ID = ImageId.of(\"project\", \"image\");\n-  private static final DiskImageConfiguration DISK_IMAGE_CONFIGURATION =\n-      DiskImageConfiguration.of(DISK_ID);\n-  private static final StorageImageConfiguration STORAGE_IMAGE_CONFIGURATION =\n-      StorageImageConfiguration.of(\"gs:/bucket/file\");\n+  private static final DiskImageConfiguration DISK_IMAGE_CONFIGURATION = DiskImageConfiguration.of(DISK_ID);\n+  private static final StorageImageConfiguration STORAGE_IMAGE_CONFIGURATION = StorageImageConfiguration.of(\"gs:/bucket/file\");\n   private static final ImageInfo IMAGE_INFO = ImageInfo.of(IMAGE_ID, DISK_IMAGE_CONFIGURATION);\n-  private static final Image IMAGE =\n-      new Image.Builder(COMPUTE, IMAGE_ID, DISK_IMAGE_CONFIGURATION).build();\n-  private static final StandardDiskConfiguration STANDARD_DISK_CONFIGURATION =\n-      StandardDiskConfiguration.of(DISK_TYPE_ID);\n-  private static final ImageDiskConfiguration IMAGE_DISK_CONFIGURATION =\n-      ImageDiskConfiguration.of(IMAGE_ID);\n-  private static final SnapshotDiskConfiguration SNAPSHOT_DISK_CONFIGURATION =\n-      SnapshotDiskConfiguration.of(SNAPSHOT_ID);\n+  private static final Image IMAGE = new Image.Builder(COMPUTE, IMAGE_ID, DISK_IMAGE_CONFIGURATION).build();\n+  private static final StandardDiskConfiguration STANDARD_DISK_CONFIGURATION = StandardDiskConfiguration.of(DISK_TYPE_ID);\n+  private static final ImageDiskConfiguration IMAGE_DISK_CONFIGURATION = ImageDiskConfiguration.of(IMAGE_ID);\n+  private static final SnapshotDiskConfiguration SNAPSHOT_DISK_CONFIGURATION = SnapshotDiskConfiguration.of(SNAPSHOT_ID);\n   private static final DiskInfo DISK_INFO = DiskInfo.of(DISK_ID, STANDARD_DISK_CONFIGURATION);\n-  private static final Disk DISK =\n-      new Disk.Builder(COMPUTE, DISK_ID, STANDARD_DISK_CONFIGURATION).build();\n-  private static final SubnetworkId SUBNETWORK_ID =\n-      SubnetworkId.of(\"project\", \"region\", \"subnetwork\");\n+  private static final Disk DISK = new Disk.Builder(COMPUTE, DISK_ID, STANDARD_DISK_CONFIGURATION).build();\n+  private static final SubnetworkId SUBNETWORK_ID = SubnetworkId.of(\"project\", \"region\", \"subnetwork\");\n   private static final NetworkId NETWORK_ID = NetworkId.of(\"project\", \"network\");\n-  private static final SubnetworkInfo SUBNETWORK_INFO =\n-      SubnetworkInfo.of(SUBNETWORK_ID, NETWORK_ID, \"192.168.0.0/16\");\n-  private static final Subnetwork SUBNETWORK =\n-      new Subnetwork.Builder(COMPUTE, SUBNETWORK_ID, NETWORK_ID, \"192.168.0.0/16\").build();\n-  private static final StandardNetworkConfiguration STANDARD_NETWORK_CONFIGURATION =\n-      StandardNetworkConfiguration.of(\"192.168.0.0/16\");\n-  private static final SubnetNetworkConfiguration SUBNET_NETWORK_CONFIGURATION =\n-      SubnetNetworkConfiguration.of(false);\n-  private static final NetworkInfo NETWORK_INFO =\n-      NetworkInfo.of(NETWORK_ID, STANDARD_NETWORK_CONFIGURATION);\n-  private static final Network NETWORK =\n-      new Network.Builder(COMPUTE, NETWORK_ID, STANDARD_NETWORK_CONFIGURATION).build();\n+  private static final SubnetworkInfo SUBNETWORK_INFO = SubnetworkInfo.of(SUBNETWORK_ID, NETWORK_ID, \"192.168.0.0/16\");\n+  private static final Subnetwork SUBNETWORK = new Subnetwork.Builder(COMPUTE, SUBNETWORK_ID, NETWORK_ID, \"192.168.0.0/16\").build();\n+  private static final StandardNetworkConfiguration STANDARD_NETWORK_CONFIGURATION = StandardNetworkConfiguration.of(\"192.168.0.0/16\");\n+  private static final SubnetNetworkConfiguration SUBNET_NETWORK_CONFIGURATION = SubnetNetworkConfiguration.of(false);\n+  private static final NetworkInfo NETWORK_INFO = NetworkInfo.of(NETWORK_ID, STANDARD_NETWORK_CONFIGURATION);\n+  private static final Network NETWORK = new Network.Builder(COMPUTE, NETWORK_ID, STANDARD_NETWORK_CONFIGURATION).build();\n   private static final AccessConfig ACCESS_CONFIG = AccessConfig.of(\"192.168.1.1\");\n-  private static final NetworkInterface NETWORK_INTERFACE = NetworkInterface.newBuilder(NETWORK_ID)\n-      .setAccessConfigurations(ACCESS_CONFIG)\n-      .build();\n-  private static final CreateDiskConfiguration CREATE_DISK_CONFIGURATION =\n-      CreateDiskConfiguration.of(IMAGE_ID);\n-  private static final PersistentDiskConfiguration PERSISTENT_DISK_CONFIGURATION =\n-      PersistentDiskConfiguration.of(DISK_ID);\n-  private static final ScratchDiskConfiguration SCRATCH_DISK_CONFIGURATION =\n-      ScratchDiskConfiguration.of(DISK_TYPE_ID);\n+  private static final NetworkInterface NETWORK_INTERFACE = NetworkInterface.newBuilder(NETWORK_ID).setAccessConfigurations(ACCESS_CONFIG).build();\n+  private static final CreateDiskConfiguration CREATE_DISK_CONFIGURATION = CreateDiskConfiguration.of(IMAGE_ID);\n+  private static final PersistentDiskConfiguration PERSISTENT_DISK_CONFIGURATION = PersistentDiskConfiguration.of(DISK_ID);\n+  private static final ScratchDiskConfiguration SCRATCH_DISK_CONFIGURATION = ScratchDiskConfiguration.of(DISK_TYPE_ID);\n   private static final AttachedDisk ATTACHED_DISK = AttachedDisk.of(CREATE_DISK_CONFIGURATION);\n   private static final Tags TAGS = Tags.of(\"tag1\", \"tag2\");\n   private static final Metadata METADATA = Metadata.of(ImmutableMap.of(\"key1\", \"val1\"));\n   private static final ServiceAccount SERVICE_ACCOUNT = ServiceAccount.of(\"email\");\n   private static final SchedulingOptions SCHEDULING_OPTIONS = SchedulingOptions.preemptible();\n-  private static final InstanceInfo INSTANCE_INFO =\n-      InstanceInfo.of(INSTANCE_ID, MACHINE_TYPE_ID, ATTACHED_DISK, NETWORK_INTERFACE);\n-  private static final Instance INSTANCE =\n-      new Instance.Builder(COMPUTE, INSTANCE_ID, MACHINE_TYPE_ID, ATTACHED_DISK, NETWORK_INTERFACE)\n-          .build();\n-  private static final Compute.DiskTypeOption DISK_TYPE_OPTION =\n-      Compute.DiskTypeOption.fields();\n-  private static final Compute.DiskTypeFilter DISK_TYPE_FILTER =\n-      Compute.DiskTypeFilter.equals(Compute.DiskTypeField.SELF_LINK, \"selfLink\");\n-  private static final Compute.DiskTypeListOption DISK_TYPE_LIST_OPTION =\n-      Compute.DiskTypeListOption.filter(DISK_TYPE_FILTER);\n-  private static final Compute.DiskTypeAggregatedListOption DISK_TYPE_AGGREGATED_LIST_OPTION =\n-      Compute.DiskTypeAggregatedListOption.filter(DISK_TYPE_FILTER);\n-  private static final Compute.MachineTypeOption MACHINE_TYPE_OPTION =\n-      Compute.MachineTypeOption.fields();\n-  private static final Compute.MachineTypeFilter MACHINE_TYPE_FILTER =\n-      Compute.MachineTypeFilter.equals(Compute.MachineTypeField.SELF_LINK, \"selfLink\");\n-  private static final Compute.MachineTypeListOption MACHINE_TYPE_LIST_OPTION =\n-      Compute.MachineTypeListOption.filter(MACHINE_TYPE_FILTER);\n-  private static final Compute.MachineTypeAggregatedListOption MACHINE_TYPE_AGGREGATED_LIST_OPTION =\n-      Compute.MachineTypeAggregatedListOption.filter(MACHINE_TYPE_FILTER);\n+  private static final InstanceInfo INSTANCE_INFO = InstanceInfo.of(INSTANCE_ID, MACHINE_TYPE_ID, ATTACHED_DISK, NETWORK_INTERFACE);\n+  private static final Instance INSTANCE = new Instance.Builder(COMPUTE, INSTANCE_ID, MACHINE_TYPE_ID, ATTACHED_DISK, NETWORK_INTERFACE).build();\n+  private static final Compute.DiskTypeOption DISK_TYPE_OPTION = Compute.DiskTypeOption.fields();\n+  private static final Compute.DiskTypeFilter DISK_TYPE_FILTER = Compute.DiskTypeFilter.equals(Compute.DiskTypeField.SELF_LINK, \"selfLink\");\n+  private static final Compute.DiskTypeListOption DISK_TYPE_LIST_OPTION = Compute.DiskTypeListOption.filter(DISK_TYPE_FILTER);\n+  private static final Compute.DiskTypeAggregatedListOption DISK_TYPE_AGGREGATED_LIST_OPTION = Compute.DiskTypeAggregatedListOption.filter(DISK_TYPE_FILTER);\n+  private static final Compute.MachineTypeOption MACHINE_TYPE_OPTION = Compute.MachineTypeOption.fields();\n+  private static final Compute.MachineTypeFilter MACHINE_TYPE_FILTER = Compute.MachineTypeFilter.equals(Compute.MachineTypeField.SELF_LINK, \"selfLink\");\n+  private static final Compute.MachineTypeListOption MACHINE_TYPE_LIST_OPTION = Compute.MachineTypeListOption.filter(MACHINE_TYPE_FILTER);\n+  private static final Compute.MachineTypeAggregatedListOption MACHINE_TYPE_AGGREGATED_LIST_OPTION = Compute.MachineTypeAggregatedListOption.filter(MACHINE_TYPE_FILTER);\n   private static final Compute.RegionOption REGION_OPTION = Compute.RegionOption.fields();\n-  private static final Compute.RegionFilter REGION_FILTER =\n-      Compute.RegionFilter.equals(Compute.RegionField.SELF_LINK, \"selfLink\");\n-  private static final Compute.RegionListOption REGION_LIST_OPTION =\n-      Compute.RegionListOption.filter(REGION_FILTER);\n+  private static final Compute.RegionFilter REGION_FILTER = Compute.RegionFilter.equals(Compute.RegionField.SELF_LINK, \"selfLink\");\n+  private static final Compute.RegionListOption REGION_LIST_OPTION = Compute.RegionListOption.filter(REGION_FILTER);\n   private static final Compute.ZoneOption ZONE_OPTION = Compute.ZoneOption.fields();\n-  private static final Compute.ZoneFilter ZONE_FILTER =\n-      Compute.ZoneFilter.equals(Compute.ZoneField.SELF_LINK, \"selfLink\");\n-  private static final Compute.ZoneListOption ZONE_LIST_OPTION =\n-      Compute.ZoneListOption.filter(ZONE_FILTER);\n+  private static final Compute.ZoneFilter ZONE_FILTER = Compute.ZoneFilter.equals(Compute.ZoneField.SELF_LINK, \"selfLink\");\n+  private static final Compute.ZoneListOption ZONE_LIST_OPTION = Compute.ZoneListOption.filter(ZONE_FILTER);\n   private static final Compute.LicenseOption LICENSE_OPTION = Compute.LicenseOption.fields();\n   private static final Compute.OperationOption OPERATION_OPTION = Compute.OperationOption.fields();\n-  private static final Compute.OperationFilter OPERATION_FILTER =\n-      Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n-  private static final Compute.OperationListOption OPERATION_LIST_OPTION =\n-      Compute.OperationListOption.filter(OPERATION_FILTER);\n+  private static final Compute.OperationFilter OPERATION_FILTER = Compute.OperationFilter.equals(Compute.OperationField.SELF_LINK, \"selfLink\");\n+  private static final Compute.OperationListOption OPERATION_LIST_OPTION = Compute.OperationListOption.filter(OPERATION_FILTER);\n   private static final Compute.AddressOption ADDRESS_OPTION = Compute.AddressOption.fields();\n-  private static final Compute.AddressFilter ADDRESS_FILTER =\n-      Compute.AddressFilter.equals(Compute.AddressField.SELF_LINK, \"selfLink\");\n-  private static final Compute.AddressListOption ADDRESS_LIST_OPTION =\n-      Compute.AddressListOption.filter(ADDRESS_FILTER);\n-  private static final Compute.AddressAggregatedListOption ADDRESS_AGGREGATED_LIST_OPTION =\n-      Compute.AddressAggregatedListOption.filter(ADDRESS_FILTER);\n+  private static final Compute.AddressFilter ADDRESS_FILTER = Compute.AddressFilter.equals(Compute.AddressField.SELF_LINK, \"selfLink\");\n+  private static final Compute.AddressListOption ADDRESS_LIST_OPTION = Compute.AddressListOption.filter(ADDRESS_FILTER);\n+  private static final Compute.AddressAggregatedListOption ADDRESS_AGGREGATED_LIST_OPTION = Compute.AddressAggregatedListOption.filter(ADDRESS_FILTER);\n   private static final Compute.SnapshotOption SNAPSHOT_OPTION = Compute.SnapshotOption.fields();\n-  private static final Compute.SnapshotFilter SNAPSHOT_FILTER =\n-      Compute.SnapshotFilter.equals(Compute.SnapshotField.SELF_LINK, \"selfLink\");\n-  private static final Compute.SnapshotListOption SNAPSHOT_LIST_OPTION =\n-      Compute.SnapshotListOption.filter(SNAPSHOT_FILTER);\n+  private static final Compute.SnapshotFilter SNAPSHOT_FILTER = Compute.SnapshotFilter.equals(Compute.SnapshotField.SELF_LINK, \"selfLink\");\n+  private static final Compute.SnapshotListOption SNAPSHOT_LIST_OPTION = Compute.SnapshotListOption.filter(SNAPSHOT_FILTER);\n   private static final Compute.ImageOption IMAGE_OPTION = Compute.ImageOption.fields();\n-  private static final Compute.ImageFilter IMAGE_FILTER =\n-      Compute.ImageFilter.equals(Compute.ImageField.SELF_LINK, \"selfLink\");\n-  private static final Compute.ImageListOption IMAGE_LIST_OPTION =\n-      Compute.ImageListOption.filter(IMAGE_FILTER);\n+  private static final Compute.ImageFilter IMAGE_FILTER = Compute.ImageFilter.equals(Compute.ImageField.SELF_LINK, \"selfLink\");\n+  private static final Compute.ImageListOption IMAGE_LIST_OPTION = Compute.ImageListOption.filter(IMAGE_FILTER);\n   private static final Compute.DiskOption DISK_OPTION = Compute.DiskOption.fields();\n-  private static final Compute.DiskFilter DISK_FILTER =\n-      Compute.DiskFilter.equals(Compute.DiskField.SELF_LINK, \"selfLink\");\n-  private static final Compute.DiskListOption DISK_LIST_OPTION =\n-      Compute.DiskListOption.filter(DISK_FILTER);\n-  private static final Compute.DiskAggregatedListOption DISK_AGGREGATED_LIST_OPTION =\n-      Compute.DiskAggregatedListOption.filter(DISK_FILTER);\n-  private static final Compute.SubnetworkOption SUBNETWORK_OPTION =\n-      Compute.SubnetworkOption.fields();\n-  private static final Compute.SubnetworkFilter SUBNETWORK_FILTER =\n-      Compute.SubnetworkFilter.equals(Compute.SubnetworkField.SELF_LINK, \"selfLink\");\n-  private static final Compute.SubnetworkListOption SUBNETWORK_LIST_OPTION =\n-      Compute.SubnetworkListOption.filter(SUBNETWORK_FILTER);\n-  private static final Compute.SubnetworkAggregatedListOption SUBNETWORK_AGGREGATED_LIST_OPTION =\n-      Compute.SubnetworkAggregatedListOption.filter(SUBNETWORK_FILTER);\n-  private static final Compute.NetworkOption NETWORK_OPTION =\n-      Compute.NetworkOption.fields();\n-  private static final Compute.NetworkFilter NETWORK_FILTER =\n-      Compute.NetworkFilter.equals(Compute.NetworkField.SELF_LINK, \"selfLink\");\n-  private static final Compute.NetworkListOption NETWORK_LIST_OPTION =\n-      Compute.NetworkListOption.filter(NETWORK_FILTER);\n-  private static final Compute.InstanceOption INSTANCE_OPTION =\n-      Compute.InstanceOption.fields();\n-  private static final Compute.InstanceFilter INSTANCE_FILTER =\n-      Compute.InstanceFilter.equals(Compute.InstanceField.SELF_LINK, \"selfLink\");\n-  private static final Compute.InstanceListOption INSTANCE_LIST_OPTION =\n-      Compute.InstanceListOption.filter(INSTANCE_FILTER);\n-  private static final Compute.InstanceAggregatedListOption INSTANCE_AGGREGATED_LIST_OPTION =\n-      Compute.InstanceAggregatedListOption.filter(INSTANCE_FILTER);\n+  private static final Compute.DiskFilter DISK_FILTER = Compute.DiskFilter.equals(Compute.DiskField.SELF_LINK, \"selfLink\");\n+  private static final Compute.DiskListOption DISK_LIST_OPTION = Compute.DiskListOption.filter(DISK_FILTER);\n+  private static final Compute.DiskAggregatedListOption DISK_AGGREGATED_LIST_OPTION = Compute.DiskAggregatedListOption.filter(DISK_FILTER);\n+  private static final Compute.SubnetworkOption SUBNETWORK_OPTION = Compute.SubnetworkOption.fields();\n+  private static final Compute.SubnetworkFilter SUBNETWORK_FILTER = Compute.SubnetworkFilter.equals(Compute.SubnetworkField.SELF_LINK, \"selfLink\");\n+  private static final Compute.SubnetworkListOption SUBNETWORK_LIST_OPTION = Compute.SubnetworkListOption.filter(SUBNETWORK_FILTER);\n+  private static final Compute.SubnetworkAggregatedListOption SUBNETWORK_AGGREGATED_LIST_OPTION = Compute.SubnetworkAggregatedListOption.filter(SUBNETWORK_FILTER);\n+  private static final Compute.NetworkOption NETWORK_OPTION = Compute.NetworkOption.fields();\n+  private static final Compute.NetworkFilter NETWORK_FILTER = Compute.NetworkFilter.equals(Compute.NetworkField.SELF_LINK, \"selfLink\");\n+  private static final Compute.NetworkListOption NETWORK_LIST_OPTION = Compute.NetworkListOption.filter(NETWORK_FILTER);\n+  private static final Compute.InstanceOption INSTANCE_OPTION = Compute.InstanceOption.fields();\n+  private static final Compute.InstanceFilter INSTANCE_FILTER = Compute.InstanceFilter.equals(Compute.InstanceField.SELF_LINK, \"selfLink\");\n+  private static final Compute.InstanceListOption INSTANCE_LIST_OPTION = Compute.InstanceListOption.filter(INSTANCE_FILTER);\n+  private static final Compute.InstanceAggregatedListOption INSTANCE_AGGREGATED_LIST_OPTION = Compute.InstanceAggregatedListOption.filter(INSTANCE_FILTER);\n \n   @Override\n   protected Serializable[] serializableObjects() {\n-    ComputeOptions options = ComputeOptions.newBuilder()\n-        .setProjectId(\"p1\")\n-        .setCredentials(NoCredentials.getInstance())\n-        .build();\n-    ComputeOptions otherOptions = options.toBuilder()\n-        .setProjectId(\"p2\")\n-        .setRetrySettings(ServiceOptions.getDefaultRetrySettings())\n-        .build();\n-    return new Serializable[]{DISK_TYPE_ID, DISK_TYPE, MACHINE_TYPE_ID, MACHINE_TYPE, REGION_ID,\n-        REGION, ZONE_ID, ZONE, LICENSE_ID, LICENSE, DEPRECATION_STATUS, GLOBAL_OPERATION_ID,\n-        REGION_OPERATION_ID, ZONE_OPERATION_ID, GLOBAL_OPERATION, REGION_OPERATION, ZONE_OPERATION,\n-        INSTANCE_ID, REGION_FORWARDING_RULE_ID, GLOBAL_FORWARDING_RULE_ID, GLOBAL_ADDRESS_ID,\n-        REGION_ADDRESS_ID, INSTANCE_USAGE, GLOBAL_FORWARDING_USAGE, REGION_FORWARDING_USAGE,\n-        ADDRESS_INFO, ADDRESS, DISK_ID, SNAPSHOT_ID, SNAPSHOT_INFO, SNAPSHOT, IMAGE_ID,\n-        DISK_IMAGE_CONFIGURATION, STORAGE_IMAGE_CONFIGURATION, IMAGE_INFO, IMAGE,\n-        STANDARD_DISK_CONFIGURATION, IMAGE_DISK_CONFIGURATION, SNAPSHOT_DISK_CONFIGURATION,\n-        DISK_INFO, DISK, SUBNETWORK_ID, NETWORK_ID, SUBNETWORK_INFO, SUBNETWORK,\n-        STANDARD_NETWORK_CONFIGURATION, SUBNET_NETWORK_CONFIGURATION, NETWORK_INFO, NETWORK,\n-        ACCESS_CONFIG, NETWORK_INTERFACE, CREATE_DISK_CONFIGURATION, PERSISTENT_DISK_CONFIGURATION,\n-        SCRATCH_DISK_CONFIGURATION, ATTACHED_DISK, TAGS, METADATA, SERVICE_ACCOUNT,\n-        SCHEDULING_OPTIONS, INSTANCE_INFO, INSTANCE, DISK_TYPE_OPTION, DISK_TYPE_FILTER,\n-        DISK_TYPE_LIST_OPTION, DISK_TYPE_AGGREGATED_LIST_OPTION, MACHINE_TYPE_OPTION,\n-        MACHINE_TYPE_FILTER, MACHINE_TYPE_LIST_OPTION, MACHINE_TYPE_AGGREGATED_LIST_OPTION,\n-        REGION_OPTION, REGION_FILTER, REGION_LIST_OPTION, ZONE_OPTION, ZONE_FILTER,\n-        ZONE_LIST_OPTION, LICENSE_OPTION, OPERATION_OPTION, OPERATION_FILTER, OPERATION_LIST_OPTION,\n-        ADDRESS_OPTION, ADDRESS_FILTER, ADDRESS_LIST_OPTION, ADDRESS_AGGREGATED_LIST_OPTION,\n-        SNAPSHOT_OPTION, SNAPSHOT_FILTER, SNAPSHOT_LIST_OPTION, IMAGE_OPTION, IMAGE_FILTER,\n-        IMAGE_LIST_OPTION, DISK_OPTION, DISK_FILTER, DISK_LIST_OPTION, DISK_AGGREGATED_LIST_OPTION,\n-        SUBNETWORK_OPTION, SUBNETWORK_FILTER, SUBNETWORK_LIST_OPTION,\n-        SUBNETWORK_AGGREGATED_LIST_OPTION, NETWORK_OPTION, NETWORK_FILTER, NETWORK_LIST_OPTION,\n-        INSTANCE_OPTION, INSTANCE_FILTER, INSTANCE_LIST_OPTION, INSTANCE_AGGREGATED_LIST_OPTION,\n-        options, otherOptions};\n+    ComputeOptions options = ComputeOptions.newBuilder().setProjectId(\"p1\").setCredentials(NoCredentials.getInstance()).build();\n+    ComputeOptions otherOptions = options.toBuilder().setProjectId(\"p2\").setRetrySettings(ServiceOptions.getDefaultRetrySettings()).build();\n+    return new Serializable[]{DISK_TYPE_ID, DISK_TYPE, MACHINE_TYPE_ID, MACHINE_TYPE, REGION_ID, REGION, ZONE_ID, ZONE, LICENSE_ID, LICENSE, DEPRECATION_STATUS, GLOBAL_OPERATION_ID, REGION_OPERATION_ID, ZONE_OPERATION_ID, GLOBAL_OPERATION, REGION_OPERATION, ZONE_OPERATION, INSTANCE_ID, REGION_FORWARDING_RULE_ID, GLOBAL_FORWARDING_RULE_ID, GLOBAL_ADDRESS_ID, REGION_ADDRESS_ID, INSTANCE_USAGE, GLOBAL_FORWARDING_USAGE, REGION_FORWARDING_USAGE, ADDRESS_INFO, ADDRESS, DISK_ID, SNAPSHOT_ID, SNAPSHOT_INFO, SNAPSHOT, IMAGE_ID, DISK_IMAGE_CONFIGURATION, STORAGE_IMAGE_CONFIGURATION, IMAGE_INFO, IMAGE, STANDARD_DISK_CONFIGURATION, IMAGE_DISK_CONFIGURATION, SNAPSHOT_DISK_CONFIGURATION, DISK_INFO, DISK, SUBNETWORK_ID, NETWORK_ID, SUBNETWORK_INFO, SUBNETWORK, STANDARD_NETWORK_CONFIGURATION, SUBNET_NETWORK_CONFIGURATION, NETWORK_INFO, NETWORK, ACCESS_CONFIG, NETWORK_INTERFACE, CREATE_DISK_CONFIGURATION, PERSISTENT_DISK_CONFIGURATION, SCRATCH_DISK_CONFIGURATION, ATTACHED_DISK, TAGS, METADATA, SERVICE_ACCOUNT, SCHEDULING_OPTIONS, INSTANCE_INFO, INSTANCE, DISK_TYPE_OPTION, DISK_TYPE_FILTER, DISK_TYPE_LIST_OPTION, DISK_TYPE_AGGREGATED_LIST_OPTION, MACHINE_TYPE_OPTION, MACHINE_TYPE_FILTER, MACHINE_TYPE_LIST_OPTION, MACHINE_TYPE_AGGREGATED_LIST_OPTION, REGION_OPTION, REGION_FILTER, REGION_LIST_OPTION, ZONE_OPTION, ZONE_FILTER, ZONE_LIST_OPTION, LICENSE_OPTION, OPERATION_OPTION, OPERATION_FILTER, OPERATION_LIST_OPTION, ADDRESS_OPTION, ADDRESS_FILTER, ADDRESS_LIST_OPTION, ADDRESS_AGGREGATED_LIST_OPTION, SNAPSHOT_OPTION, SNAPSHOT_FILTER, SNAPSHOT_LIST_OPTION, IMAGE_OPTION, IMAGE_FILTER, IMAGE_LIST_OPTION, DISK_OPTION, DISK_FILTER, DISK_LIST_OPTION, DISK_AGGREGATED_LIST_OPTION, SUBNETWORK_OPTION, SUBNETWORK_FILTER, SUBNETWORK_LIST_OPTION, SUBNETWORK_AGGREGATED_LIST_OPTION, NETWORK_OPTION, NETWORK_FILTER, NETWORK_LIST_OPTION, INSTANCE_OPTION, INSTANCE_FILTER, INSTANCE_LIST_OPTION, INSTANCE_AGGREGATED_LIST_OPTION, options, otherOptions};\n   }\n \n   @Override\n   protected Restorable<?>[] restorableObjects() {\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 216
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "37",
                    "column": "64",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/441/SerializationTest.java\nindex 28fdc44c548..7dcdc254a05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/441/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/441/SerializationTest.java\n@@ -32,8 +32,9 @@ import java.util.List;\n \n public class SerializationTest extends BaseSerializationTest {\n \n-  private static final Compute COMPUTE = ComputeOptions.newBuilder().setProjectId(\"p\").build().getService();\n-  private static final Long CREATION_TIMESTAMP = 1453293540000L;\n+  private static final Compute COMPUTE = ComputeOptions.newBuilder().setProjectId(\"p\"\n+      ).build().getService()\n+; private static final Long CREATION_TIMESTAMP = 1453293540000L;\n   private static final String DESCRIPTION = \"description\";\n   private static final String VALID_DISK_SIZE = \"10GB-10TB\";\n   private static final Long DEFAULT_DISK_SIZE_GB = 10L;\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}