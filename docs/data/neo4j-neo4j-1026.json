{
    "project_name": "neo4j-neo4j",
    "error_id": "1026",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "100",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1026/DefaultBoltConnectionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1026/DefaultBoltConnectionFactory.java\nindex b22c507bb40..9a9d177154f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1026/DefaultBoltConnectionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1026/DefaultBoltConnectionFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.runtime;\n \n import java.time.Clock;\n@@ -45,38 +46,38 @@ public class DefaultBoltConnectionFactory implements BoltConnectionFactory\n     private final Config config;\n     private final BoltConnectionMetricsMonitor metricsMonitor;\n \n-    public DefaultBoltConnectionFactory( BoltSchedulerProvider schedulerProvider, Config config, LogService logService,\n-            Clock clock, Monitors monitors )\n+    public DefaultBoltConnectionFactory(BoltSchedulerProvider schedulerProvider, Config config, LogService logService,\n+                                        Clock clock, Monitors monitors)\n     {\n         this.schedulerProvider = schedulerProvider;\n         this.config = config;\n         this.logService = logService;\n         this.clock = clock;\n-        this.metricsMonitor = monitors.newMonitor( BoltConnectionMetricsMonitor.class );\n+        this.metricsMonitor = monitors.newMonitor(BoltConnectionMetricsMonitor.class);\n     }\n \n     @Override\n-    public BoltConnection newConnection( BoltChannel channel, BoltStateMachine stateMachine,\n-            BoltResponseMessageWriter messageWriter )\n+    public BoltConnection newConnection(BoltChannel channel, BoltStateMachine stateMachine,\n+                                        BoltResponseMessageWriter messageWriter)\n     {\n-        requireNonNull( channel );\n-        requireNonNull( stateMachine );\n+        requireNonNull(channel);\n+        requireNonNull(stateMachine);\n \n-        BoltScheduler scheduler = schedulerProvider.get( channel );\n-        BoltConnectionReadLimiter readLimiter = createReadLimiter( config, logService );\n-        BoltConnectionQueueMonitor connectionQueueMonitor = new BoltConnectionQueueMonitorAggregate( scheduler, readLimiter );\n+        BoltScheduler scheduler = schedulerProvider.get(channel);\n+        BoltConnectionReadLimiter readLimiter = createReadLimiter(config, logService);\n+        BoltConnectionQueueMonitor connectionQueueMonitor = new BoltConnectionQueueMonitorAggregate(scheduler, readLimiter);\n \n-        BoltConnection connection = new DefaultBoltConnection( channel, messageWriter, stateMachine, logService, scheduler,\n-                connectionQueueMonitor, DEFAULT_MAX_BATCH_SIZE, metricsMonitor, clock );\n+        BoltConnection connection = new DefaultBoltConnection(channel, messageWriter, stateMachine, logService, scheduler,\n+          connectionQueueMonitor, DEFAULT_MAX_BATCH_SIZE, metricsMonitor, clock);\n         connection.start();\n \n         return connection;\n     }\n \n-    private static BoltConnectionReadLimiter createReadLimiter( Config config, LogService logService )\n+    private static BoltConnectionReadLimiter createReadLimiter(Config config, LogService logService)\n     {\n-        int lowWatermark = config.get( GraphDatabaseInternalSettings.bolt_inbound_message_throttle_low_water_mark );\n-        int highWatermark = config.get( GraphDatabaseInternalSettings.bolt_inbound_message_throttle_high_water_mark );\n-        return new BoltConnectionReadLimiter( logService, lowWatermark, highWatermark );\n+        int lowWatermark = config.get(GraphDatabaseInternalSettings.bolt_inbound_message_throttle_low_water_mark);\n+        int highWatermark = config.get(GraphDatabaseInternalSettings.bolt_inbound_message_throttle_high_water_mark);\n+        return new BoltConnectionReadLimiter(logService, lowWatermark, highWatermark);\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}