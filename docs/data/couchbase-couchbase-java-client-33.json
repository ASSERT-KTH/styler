{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "33",
    "information": {
        "errors": [
            {
                "line": "46",
                "column": "105",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "            }\n        } else {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n                \"JsonStringDocument id \" + id + \", could not decode.\");\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/33/JsonStringTranscoder.java\nindex 9cde3788426..47757d89ff8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/33/JsonStringTranscoder.java\n@@ -43,8 +43,8 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \"\n+            + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n \n         return newDocument(id, expiry, decoded, cas);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "47",
                    "column": "105",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/33/JsonStringTranscoder.java\nindex 9cde3788426..060bd10fa05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/33/JsonStringTranscoder.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -34,7 +35,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n \n     @Override\n     protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                          ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -65,7 +66,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n \n     @Override\n     public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+                                          MutationToken mutationToken) {\n         return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/33/JsonStringTranscoder.java\nindex 9cde3788426..d3876cfe559 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/33/JsonStringTranscoder.java\n@@ -33,8 +33,7 @@ import com.couchbase.client.java.error.TranscodingException;\n public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n \n     @Override\n-    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -43,8 +42,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n \n         return newDocument(id, expiry, decoded, cas);\n@@ -54,8 +52,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     protected Tuple2<ByteBuf, Integer> doEncode(JsonStringDocument document) throws Exception {\n         return Tuple.create(\n             TranscoderUtils.encodeStringAsUtf8(\"\\\"\" + document.content() + \"\\\"\"),\n-            TranscoderUtils.JSON_COMPAT_FLAGS\n-        );\n+            TranscoderUtils.JSON_COMPAT_FLAGS);\n     }\n \n     @Override\n@@ -64,8 +61,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     }\n \n     @Override\n-    public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public JsonStringDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -73,4 +69,4 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     public Class<JsonStringDocument> documentType() {\n         return JsonStringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/33/JsonStringTranscoder.java\nindex 9cde3788426..8305b1fdb1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/33/JsonStringTranscoder.java\n@@ -30,11 +30,11 @@ import com.couchbase.client.java.error.TranscodingException;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n \n+\n+public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n     @Override\n-    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -43,10 +43,8 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n-\n         return newDocument(id, expiry, decoded, cas);\n     }\n \n@@ -64,8 +62,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     }\n \n     @Override\n-    public JsonStringDocument newDocument(String id, int expiry, String content, long cas,\n-        MutationToken mutationToken) {\n+    public JsonStringDocument newDocument(String id, int expiry, String content, long cas, MutationToken mutationToken) {\n         return JsonStringDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -73,4 +70,4 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     public Class<JsonStringDocument> documentType() {\n         return JsonStringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "46",
                    "column": "105",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/33/JsonStringTranscoder.java\nindex 9cde3788426..47757d89ff8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/33/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/33/JsonStringTranscoder.java\n@@ -43,8 +43,8 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \"\n+            + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n \n         return newDocument(id, expiry, decoded, cas);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}