{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2346",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2346/Man.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2346/Man.java\nindex 00cb6b239c9..e3b291e61ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2346/Man.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2346/Man.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.apps;\n \n import java.rmi.RemoteException;\n@@ -43,170 +44,167 @@ import static org.neo4j.helpers.Args.splitLongLine;\n /**\n  * Prints a short manual for an {@link App}.\n  */\n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Man extends AbstractApp\n {\n-    public static final int CONSOLE_WIDTH = 80;\n+  public static final int CONSOLE_WIDTH = 80;\n \n-    private static Collection<String> availableCommands;\n+  private static Collection<String> availableCommands;\n \n-    public Man()\n-    {\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE,\n-                \"Display the commands in a vertical list\" ) );\n-    }\n+  public Man()\n+  {\n+    addOptionDefinition(\"l\", new OptionDefinition(OptionValueType.NONE,\n+        \"Display the commands in a vertical list\"));\n+  }\n \n-    @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-        Output out ) throws Exception\n+  @Override\n+  public Continuation execute(AppCommandParser parser, Session session,\n+                              Output out) throws Exception\n+  {\n+    if (parser.arguments().size() == 0)\n     {\n-        if ( parser.arguments().size() == 0 )\n-        {\n-            boolean list = parser.options().containsKey( \"l\" );\n-            printHelpString( out, getServer(), list );\n-            return Continuation.INPUT_COMPLETE;\n-        }\n-\n-        App app = this.getApp( parser );\n-        out.println( \"\" );\n-        for ( String line : splitLongLine( fixDesciption( app.getDescription() ),\n-                CONSOLE_WIDTH ) )\n-        {\n-            out.println( line );\n-        }\n-        println( out, \"\" );\n-        boolean hasOptions = false;\n-        for ( String option : app.getAvailableOptions() )\n-        {\n-            hasOptions = true;\n-            String description = fixDesciption( app.getDescription( option ) );\n-            String[] descriptionLines = splitLongLine( description, CONSOLE_WIDTH );\n-            for ( int i = 0; i < descriptionLines.length; i++ )\n-            {\n-                String line = \"\";\n-                if ( i == 0 )\n-                {\n-                    String optionPrefix = option.length() > 1 ? \"--\" : \"-\";\n-                    line = optionPrefix + option;\n-                }\n-                line += \"\\t \";\n-                line += descriptionLines[ i ];\n-                println( out, line );\n-            }\n-        }\n-        if ( hasOptions )\n-        {\n-            println( out, \"\" );\n-        }\n-        return Continuation.INPUT_COMPLETE;\n+      boolean list = parser.options().containsKey(\"l\");\n+      printHelpString(out, getServer(), list);\n+      return Continuation.INPUT_COMPLETE;\n     }\n \n-    private static String getShortUsageString()\n+    App app = this.getApp(parser);\n+    out.println(\"\");\n+    for (String line : splitLongLine(fixDesciption(app.getDescription()),\n+        CONSOLE_WIDTH))\n     {\n-        return \"man <command>\";\n+      out.println(line);\n     }\n-\n-    private String fixDesciption( String description )\n+    println(out, \"\");\n+    boolean hasOptions = false;\n+    for (String option : app.getAvailableOptions())\n     {\n-        if ( description == null )\n-        {\n-            description = \"\";\n-        }\n-        else if ( !description.endsWith( \".\" ) )\n+      hasOptions = true;\n+      String description = fixDesciption(app.getDescription(option));\n+      String[] descriptionLines = splitLongLine(description, CONSOLE_WIDTH);\n+      for (int i = 0; i < descriptionLines.length; i++)\n+      {\n+        String line = \"\";\n+        if (i == 0)\n         {\n-            description = description + \".\";\n+          String optionPrefix = option.length() > 1 ? \"--\" : \"-\";\n+          line = optionPrefix + option;\n         }\n-        return description;\n+        line += \"\\t \";\n+        line += descriptionLines[i];\n+        println(out, line);\n+      }\n     }\n-\n-    private void println( Output out, String string ) throws RemoteException\n+    if (hasOptions)\n     {\n-        out.println( \"  \" + string );\n+      println(out, \"\");\n     }\n+    return Continuation.INPUT_COMPLETE;\n+  }\n \n-    private App getApp( AppCommandParser parser ) throws Exception\n+  private static String getShortUsageString()\n+  {\n+    return \"man <command>\";\n+  }\n+\n+  private String fixDesciption(String description)\n+  {\n+    if (description == null)\n     {\n-        String appName = parser.arguments().get( 0 ).toLowerCase();\n-        App app = this.getServer().findApp( appName );\n-        if ( app == null )\n-        {\n-            throw new ShellException( \"No manual entry for '\" + appName +\n-                \"'\" );\n-        }\n-        return app;\n+      description = \"\";\n+    } else if (!description.endsWith(\".\"))\n+    {\n+      description = description + \".\";\n     }\n-\n-    @Override\n-    public String getDescription()\n+    return description;\n+  }\n+\n+  private void println(Output out, String string) throws RemoteException\n+  {\n+    out.println(\"  \" + string);\n+  }\n+\n+  private App getApp(AppCommandParser parser) throws Exception\n+  {\n+    String appName = parser.arguments().get(0).toLowerCase();\n+    App app = this.getServer().findApp(appName);\n+    if (app == null)\n     {\n-        return \"Display a manual for a command or a general help message.\\n\" +\n-            \"Usage: \" + getShortUsageString();\n+      throw new ShellException(\"No manual entry for '\" + appName +\n+          \"'\");\n     }\n-\n-    /**\n-     * Utility method for getting a short help string for a server. Basically it\n-     * contains an introductory message and also lists all available apps for\n-     * the server.\n-     *\n-     * @param out the output\n-     * @param server the server to ask for\n-     * @param list if {@code true}, a list of the commands is printed\n-     * @throws RemoteException in case of remoting errors\n-     */\n-    public static void printHelpString( Output out, ShellServer server, boolean list )\n-            throws RemoteException\n+    return app;\n+  }\n+\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Display a manual for a command or a general help message.\\n\" +\n+        \"Usage: \" + getShortUsageString();\n+  }\n+\n+  /**\n+   * Utility method for getting a short help string for a server. Basically it\n+   * contains an introductory message and also lists all available apps for\n+   * the server.\n+   *\n+   * @param out    the output\n+   * @param server the server to ask for\n+   * @param list   if {@code true}, a list of the commands is printed\n+   * @throws RemoteException in case of remoting errors\n+   */\n+  public static void printHelpString(Output out, ShellServer server, boolean list)\n+      throws RemoteException\n+  {\n+    String header = \"Available commands:\";\n+    if (list)\n     {\n-        String header = \"Available commands:\";\n-        if ( list )\n-        {\n-            out.println( header );\n-            out.println();\n-            for ( String command : server.getAllAvailableCommands() )\n-            {\n-                out.println( \"   \" + command );\n-            }\n-            out.println();\n-        }\n-        else\n-        {\n-            out.println( header + \" \" + availableCommandsAsString( server ) );\n-        }\n-        out.println( \"Use \" + getShortUsageString() + \" for info about each command.\" );\n-        out.println( \"Please note that neo4j-shell is deprecated and to be replaced by cypher-shell.\" );\n+      out.println(header);\n+      out.println();\n+      for (String command : server.getAllAvailableCommands())\n+      {\n+        out.println(\"   \" + command);\n+      }\n+      out.println();\n+    } else\n+    {\n+      out.println(header + \" \" + availableCommandsAsString(server));\n     }\n-\n-    /**\n-     * Lists apps available at the server.\n-     *\n-     * @param server\n-     *            the {@link ShellServer}.\n-     * @return a list of available commands a client can execute, whre the\n-     *         server is an {@link AppShellServer}.\n-     */\n-    public static synchronized Collection<String> getAvailableCommands(\n-        ShellServer server )\n+    out.println(\"Use \" + getShortUsageString() + \" for info about each command.\");\n+    out.println(\"Please note that neo4j-shell is deprecated and to be replaced by cypher-shell.\");\n+  }\n+\n+  /**\n+   * Lists apps available at the server.\n+   *\n+   * @param server the {@link ShellServer}.\n+   * @return a list of available commands a client can execute, whre the\n+   * server is an {@link AppShellServer}.\n+   */\n+  public static synchronized Collection<String> getAvailableCommands(\n+      ShellServer server)\n+  {\n+    if (availableCommands == null)\n     {\n-        if ( availableCommands == null )\n-        {\n-            Collection<String> list = new ArrayList<>();\n-            // TODO Shouldn't trust the server to be an AbstractAppServer\n-            list.addAll( Arrays.asList( ((AbstractAppServer) server).getAllAvailableCommands() ) );\n-            availableCommands = list;\n-        }\n-        return availableCommands;\n+      Collection<String> list = new ArrayList<>();\n+      // TODO Shouldn't trust the server to be an AbstractAppServer\n+      list.addAll(Arrays.asList(((AbstractAppServer) server).getAllAvailableCommands()));\n+      availableCommands = list;\n     }\n+    return availableCommands;\n+  }\n \n-    private static synchronized String availableCommandsAsString( ShellServer server )\n+  private static synchronized String availableCommandsAsString(ShellServer server)\n+  {\n+    StringBuilder commands = new StringBuilder();\n+    for (String command : getAvailableCommands(server))\n     {\n-        StringBuilder commands = new StringBuilder();\n-        for ( String command : getAvailableCommands( server ) )\n-        {\n-            if ( commands.length() > 0 )\n-            {\n-                commands.append( \" \" );\n-            }\n-            commands.append( command );\n-        }\n-        return commands.toString();\n+      if (commands.length() > 0)\n+      {\n+        commands.append(\" \");\n+      }\n+      commands.append(command);\n     }\n+    return commands.toString();\n+  }\n }\n",
            "diff_size": 193
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2346/Man.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2346/Man.java\nindex 00cb6b239c9..b977e6741b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2346/Man.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2346/Man.java\n@@ -52,14 +52,12 @@ public class Man extends AbstractApp\n \n     public Man()\n     {\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE,\n-                \"Display the commands in a vertical list\" ) );\n+        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE, \"Display the commands in a vertical list\" ) );\n     }\n \n     @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-        Output out ) throws Exception\n-    {\n+    public Continuation execute( AppCommandParser parser, Session session, Output out ) throws Exception\n+{\n         if ( parser.arguments().size() == 0 )\n         {\n             boolean list = parser.options().containsKey( \"l\" );\n@@ -69,12 +67,12 @@ public class Man extends AbstractApp\n \n         App app = this.getApp( parser );\n         out.println( \"\" );\n-        for ( String line : splitLongLine( fixDesciption( app.getDescription() ),\n-                CONSOLE_WIDTH ) )\n+        for ( String line : splitLongLine( fixDesciption( app.getDescription() ), CONSOLE_WIDTH ) )\n         {\n             out.println( line );\n         }\n-        println( out, \"\" );\n+\n+println( out, \"\" );\n         boolean hasOptions = false;\n         for ( String option : app.getAvailableOptions() )\n         {\n@@ -89,7 +87,8 @@ public class Man extends AbstractApp\n                     String optionPrefix = option.length() > 1 ? \"--\" : \"-\";\n                     line = optionPrefix + option;\n                 }\n-                line += \"\\t \";\n+\n+line += \"\\t \";\n                 line += descriptionLines[ i ];\n                 println( out, line );\n             }\n@@ -98,7 +97,8 @@ public class Man extends AbstractApp\n         {\n             println( out, \"\" );\n         }\n-        return Continuation.INPUT_COMPLETE;\n+\n+return Continuation.INPUT_COMPLETE;\n     }\n \n     private static String getShortUsageString()\n@@ -116,7 +116,8 @@ public class Man extends AbstractApp\n         {\n             description = description + \".\";\n         }\n-        return description;\n+\n+return description;\n     }\n \n     private void println( Output out, String string ) throws RemoteException\n@@ -130,18 +131,16 @@ public class Man extends AbstractApp\n         App app = this.getServer().findApp( appName );\n         if ( app == null )\n         {\n-            throw new ShellException( \"No manual entry for '\" + appName +\n-                \"'\" );\n-        }\n+            throw new ShellException( \"No manual entry for '\" + appName + \"'\" );\n+    }\n         return app;\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Display a manual for a command or a general help message.\\n\" +\n-            \"Usage: \" + getShortUsageString();\n-    }\n+        return \"Display a manual for a command or a general help message.\\n\" + \"Usage: \" + getShortUsageString();\n+            }\n \n     /**\n      * Utility method for getting a short help string for a server. Basically it\n@@ -153,9 +152,8 @@ public class Man extends AbstractApp\n      * @param list if {@code true}, a list of the commands is printed\n      * @throws RemoteException in case of remoting errors\n      */\n-    public static void printHelpString( Output out, ShellServer server, boolean list )\n-            throws RemoteException\n-    {\n+    public static void printHelpString( Output out, ShellServer server, boolean list ) throws RemoteException\n+{\n         String header = \"Available commands:\";\n         if ( list )\n         {\n@@ -183,9 +181,8 @@ public class Man extends AbstractApp\n      * @return a list of available commands a client can execute, whre the\n      *         server is an {@link AppShellServer}.\n      */\n-    public static synchronized Collection<String> getAvailableCommands(\n-        ShellServer server )\n-    {\n+    public static synchronized Collection<String> getAvailableCommands( ShellServer server )\n+{\n         if ( availableCommands == null )\n         {\n             Collection<String> list = new ArrayList<>();\n@@ -193,7 +190,8 @@ public class Man extends AbstractApp\n             list.addAll( Arrays.asList( ((AbstractAppServer) server).getAllAvailableCommands() ) );\n             availableCommands = list;\n         }\n-        return availableCommands;\n+\n+return availableCommands;\n     }\n \n     private static synchronized String availableCommandsAsString( ShellServer server )\n@@ -207,6 +205,7 @@ public class Man extends AbstractApp\n             }\n             commands.append( command );\n         }\n-        return commands.toString();\n+\n+return commands.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}