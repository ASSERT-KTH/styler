{
    "project_name": "CESNET-perun",
    "error_id": "428",
    "information": {
        "errors": [
            {
                "line": "457",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t}\n\n\tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n\t\t\t\t\t\t\t\t\t\t\t\t CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n\n\t\tright.setSelfRights(read.getValue(), write.getValue(), readPublic.getValue(), writePublic.getValue(),",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/428/EntitylessAttributesDetailTabItem.java\nindex 6c18ecf9200..6880b161742 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/428/EntitylessAttributesDetailTabItem.java\n@@ -455,7 +455,7 @@ public class EntitylessAttributesDetailTabItem implements TabItem {\n \t}\n \n \tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n-\t\t\t\t\t\t\t\t\t\t\t\t CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n+\t\t\tCheckBox readVo, CheckBox writeVo, AttributeRights right) {\n \n \t\tright.setSelfRights(read.getValue(), write.getValue(), readPublic.getValue(), writePublic.getValue(),\n \t\t\treadVo.getValue(), writeVo.getValue());\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/428/EntitylessAttributesDetailTabItem.java\nindex 6c18ecf9200..4593be48062 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/428/EntitylessAttributesDetailTabItem.java\n@@ -37,497 +37,501 @@ import java.util.Objects;\n \n public class EntitylessAttributesDetailTabItem implements TabItem {\n \n-\t/**\n-\t * Perun web session\n-\t */\n-\tprivate PerunWebSession session = PerunWebSession.getInstance();\n-\n-\t/**\n-\t * Content widget - should be simple panel\n-\t */\n-\tprivate SimplePanel contentWidget = new SimplePanel();\n-\n-\t/**\n-\t * Title widget\n-\t */\n-\tprivate Label titleWidget = new Label(\"Attribute\");\n-\n-\tprivate AttributeDefinition def;\n-\tprivate ArrayList<AttributeRights> rights = new ArrayList<>();\n-\n-\tprivate final CheckBox selfRead = new CheckBox();\n-\tprivate final CheckBox selfWrite = new CheckBox();\n-\tprivate final CheckBox selfReadVo = new CheckBox();\n-\tprivate final CheckBox selfReadPublic = new CheckBox();\n-\tprivate final CheckBox selfWriteVo = new CheckBox();\n-\tprivate final CheckBox selfWritePublic = new CheckBox();\n-\tprivate final CheckBox voRead = new CheckBox();\n-\tprivate final CheckBox voWrite = new CheckBox();\n-\tprivate final CheckBox groupRead = new CheckBox();\n-\tprivate final CheckBox groupWrite = new CheckBox();\n-\tprivate final CheckBox facilityRead = new CheckBox();\n-\tprivate final CheckBox facilityWrite = new CheckBox();\n-\n-\tprivate final CheckBox unique = new CheckBox();\n-\n-\n-\t/**\n-\t * Creates a tab instance\n-\t */\n-\tpublic EntitylessAttributesDetailTabItem(AttributeDefinition def) {\n-\t\tthis.def = def;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isPrepared() {\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isRefreshParentOnClose() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void onClose() {\n-\n-\t}\n-\n-\t@Override\n-\tpublic Widget draw() {\n-\n-\t\ttitleWidget.setText(def.getName());\n-\t\tfinal TabItem tab = this;\n-\n-\t\t// create main panel for content\n-\t\tfinal FlexTable mainPage = new FlexTable();\n-\t\tmainPage.setWidth(\"100%\");\n-\n-\t\tfinal ExtendedTextBox description = new ExtendedTextBox();\n-\t\tdescription.setWidth(\"100%\");\n-\t\tdescription.getTextBox().setText(def.getDescription());\n-\t\tfinal ExtendedTextBox.TextBoxValidator validator = () -> {\n-\t\t\tif (description.getTextBox().getText().trim().isEmpty()) {\n-\t\t\t\tdescription.setError(\"Description can't be empty.\");\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tdescription.setOk();\n-\t\t\treturn true;\n-\t\t};\n-\n-\t\tfinal ExtendedTextBox displayName = new ExtendedTextBox();\n-\t\tdisplayName.setWidth(\"100%\");\n-\t\tdisplayName.getTextBox().setText(def.getDisplayName());\n-\t\tfinal ExtendedTextBox.TextBoxValidator validatorName = () -> {\n-\t\t\tif (displayName.getTextBox().getText().trim().isEmpty()) {\n-\t\t\t\tdisplayName.setError(\"Display name can't be empty.\");\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tdisplayName.setOk();\n-\t\t\treturn true;\n-\t\t};\n-\n-\t\tdescription.setValidator(validator);\n-\t\tdisplayName.setValidator(validatorName);\n-\n-\n-\t\t//unique.setEnabled(false);\n-\t\tunique.setValue(def.isUnique());\n-\n-\t\tif (Arrays.asList(\"core\", \"virt\").contains(def.getDefinition()) || def.getEntity().equals(\"entityless\")) {\n-\n-\t\t\tunique.setEnabled(false);\n-\n-\t\t} else {\n-\n-\t\t\tunique.addValueChangeHandler(valueChangeEvent -> {\n-\n-\t\t\t\tif (valueChangeEvent.getValue()) {\n-\t\t\t\t\tUiElements.generateAlert(\"Change confirmation\",\n-\t\t\t\t\t\t\"Changing attribute to UNIQUE might take a lot of time if there is large number of entities with set values. Perun will check uniqueness during the process. If values are not unique, conversion will be stopped.<p style=\\\"color:red;\\\">We strongly recommend to refresh whole browser window after conversion is DONE to prevent errors when modyfying attributes from GUI.\",\n-\t\t\t\t\t\tclickEvent -> {\n-\t\t\t\t\t\t\tConvertAttributeToUnique convert = new ConvertAttributeToUnique(new JsonCallbackEvents() {\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\t\t\t\t\t\tunique.setValue(true);\n-\t\t\t\t\t\t\t\t\tunique.setEnabled(false);\n-\t\t\t\t\t\t\t\t\tdef.setUnique(true);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\t\t\t\t\t\tunique.setValue(false);\n-\t\t\t\t\t\t\t\t\tunique.setEnabled(true);\n-\t\t\t\t\t\t\t\t\tdef.setUnique(false);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onLoadingStart() {\n-\t\t\t\t\t\t\t\t\tunique.setEnabled(false);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t\tconvert.convertAttributeDefinitionToUnique(def.getId());\n-\t\t\t\t\t\t}, clickEvent -> {\n-\t\t\t\t\t\t\t// action canceled\n-\t\t\t\t\t\t\tunique.setValue(false);\n-\t\t\t\t\t\t});\n-\t\t\t\t} else {\n-\t\t\t\t\tUiElements.generateInfo(\"Change not allowed\", \"Once converted to UNIQUE, attributes can't be converted back to non-unique.\");\n-\t\t\t\t\tunique.setValue(true);\n-\t\t\t\t}\n-\n-\t\t\t});\n-\n-\n-\t\t}\n-\n-\t\tFlexTable attributeDetailTable = new FlexTable();\n-\t\tattributeDetailTable.setStyleName(\"inputFormFlexTable\");\n-\n-\n-\t\tfinal CustomButton updateButton = TabMenu.getPredefinedButton(ButtonType.SAVE, \"Save attribute details\");\n-\t\tupdateButton.addClickHandler(event -> {\n-\n-\t\t\tfinal ArrayList<AttributeRights> list = new ArrayList<>();\n-\t\t\tfor (AttributeRights r : rights) {\n-\t\t\t\tif (r.getRole().equalsIgnoreCase(\"SELF\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r));\n-\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(voRead, voWrite, r));\n-\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(groupRead, groupWrite, r));\n-\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(facilityRead, facilityWrite, r));\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif ((!Objects.equals(def.getDescription(), description.getTextBox().getText().trim()) || !Objects.equals(def.getDisplayName(), displayName.getTextBox().getText().trim()))) {\n-\n-\t\t\t\tif (!validator.validateTextBox() || !validatorName.validateTextBox()) return;\n-\n-\t\t\t\tdef.setDescription(description.getTextBox().getText().trim());\n-\t\t\t\tdef.setDisplayName(displayName.getTextBox().getText().trim());\n-\n-\t\t\t\tUpdateAttribute request = new UpdateAttribute(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\n-\t\t\t\t\t\t// after update - update rights\n-\t\t\t\t\t\tSetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n-\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\tpublic void onLoadingStart() {\n-\t\t\t\t\t\t\t\tenableDisableWidgets(false);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}));\n-\t\t\t\t\t\trequest.setAttributeRights(list);\n-\n-\t\t\t\t\t}\n-\t\t\t\t}));\n-\t\t\t\trequest.updateAttribute(def);\n-\t\t\t} else {\n-\n-\t\t\t\t// after update - update rights\n-\t\t\t\tSetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onLoadingStart() {\n-\t\t\t\t\t\tenableDisableWidgets(false);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t}\n-\t\t\t\t}));\n-\t\t\t\trequest.setAttributeRights(list);\n-\n-\t\t\t}\n-\t\t});\n-\n-\t\tattributeDetailTable.setHTML(0, 0, \"Display name:\");\n-\t\tattributeDetailTable.setWidget(0, 1, displayName);\n-\t\tattributeDetailTable.setHTML(1, 0, \"Description:\");\n-\t\tattributeDetailTable.setWidget(1, 1, description);\n-\t\tattributeDetailTable.setHTML(2, 0, \"Unique:\");\n-\t\tattributeDetailTable.setWidget(2, 1, unique);\n-\t\tfor (int i = 0; i < attributeDetailTable.getRowCount(); i++) {\n-\t\t\tattributeDetailTable.getFlexCellFormatter().setStyleName(i, 0, \"itemName\");\n-\t\t}\n-\n-\t\tfinal FlexTable rightsTable = new FlexTable();\n-\t\trightsTable.setStyleName(\"inputFormFlexTable\");\n-\n-\t\trightsTable.setHTML(0, 1, \"<strong>SELF</strong>\");\n-\t\trightsTable.setHTML(0, 2, \"<strong>SELF_PUBLIC</strong>\");\n-\t\trightsTable.setHTML(0, 3, \"<strong>SELF_VO</strong>\");\n-\t\trightsTable.setHTML(0, 4, \"<strong>VO</strong>\");\n-\t\trightsTable.setHTML(0, 5, \"<strong>GROUP</strong>\");\n-\t\trightsTable.setHTML(0, 6, \"<strong>FACILITY</strong>\");\n-\n-\t\trightsTable.setHTML(1, 0, \"<strong>READ</strong>\");\n-\t\trightsTable.setHTML(2, 0, \"<strong>WRITE</strong>\");\n-\n-\t\trightsTable.setWidget(1, 1, selfRead);\n-\t\trightsTable.setWidget(2, 1, selfWrite);\n-\t\trightsTable.setWidget(1, 2, selfReadPublic);\n-\t\trightsTable.setWidget(2, 2, selfWritePublic);\n-\t\trightsTable.setWidget(1, 3, selfReadVo);\n-\t\trightsTable.setWidget(2, 3, selfWriteVo);\n-\t\trightsTable.setWidget(1, 4, voRead);\n-\t\trightsTable.setWidget(2, 4, voWrite);\n-\t\trightsTable.setWidget(1, 5, groupRead);\n-\t\trightsTable.setWidget(2, 5, groupWrite);\n-\t\trightsTable.setWidget(1, 6, facilityRead);\n-\t\trightsTable.setWidget(2, 6, facilityWrite);\n-\n-\t\trightsTable.addStyleName(\"centeredTable\");\n-\n-\t\tTabMenu menu = new TabMenu();\n-\t\tmenu.addWidget(UiElements.getRefreshButton(this));\n-\t\tmenu.addWidget(updateButton);\n-\n-\t\tmenu.addWidget(TabMenu.getPredefinedButton(ButtonType.CLOSE, \"\", event ->\n-\t\t\tsession.getTabManager().closeTab(tab, isRefreshParentOnClose())));\n-\n-\t\tCustomButton showKeys = new CustomButton();\n-\t\tshowKeys.setText(\"show keys\");\n-\t\tshowKeys.addClickHandler(clickEvent -> session.getTabManager().addTab(new EntitylessAttributeEditKeyTabItem(def)));\n-\t\tmenu.addWidget(showKeys);\n-\n-\t\tGetAttributeRights rightsCall = new GetAttributeRights(def.getId(), new JsonCallbackEvents() {\n-\t\t\t@Override\n-\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\trights = JsonUtils.jsoAsList(jso);\n-\t\t\t\tfor (AttributeRights r : rights) {\n-\t\t\t\t\tif (r.getRole().equalsIgnoreCase(\"SELF\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r);\n-\t\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(voRead, voWrite, r);\n-\t\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(groupRead, groupWrite, r);\n-\t\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(facilityRead, facilityWrite, r);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\trightsTable.setVisible(true);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\trightsTable.setVisible(false);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onLoadingStart() {\n-\t\t\t\tenableDisableWidgets(false);\n-\t\t\t\trightsTable.setVisible(false);\n-\t\t\t}\n-\t\t});\n-\t\trightsCall.retrieveData();\n-\n-\t\t// create new instance for jsonCall\n-\t\tfinal GetServicesByAttrDefinition services = new GetServicesByAttrDefinition(def.getId());\n-\t\tservices.setCheckable(false);\n-\n-\t\tCellTable<Service> attrDefTable = services.getTable((index, object, value) ->\n-\t\t\tsession.getTabManager().addTab(new ServiceDetailTabItem(object)));\n-\t\tattrDefTable.setStyleName(\"perun-table\");\n-\t\tScrollPanel scrollTable = new ScrollPanel(attrDefTable);\n-\t\tscrollTable.addStyleName(\"perun-tableScrollPanel\");\n-\t\tsession.getUiElements().resizePerunTable(scrollTable, 350, this);\n-\n-\t\t// set content to page\n-\n-\t\tmainPage.setWidget(0, 0, menu);\n-\t\tmainPage.getFlexCellFormatter().setColSpan(0, 0, 2);\n-\n-\t\tmainPage.setWidget(1, 0, attributeDetailTable);\n-\t\tmainPage.setWidget(1, 1, rightsTable);\n-\t\tmainPage.getFlexCellFormatter().setWidth(1, 0, \"50%\");\n-\t\tmainPage.getFlexCellFormatter().setWidth(1, 1, \"50%\");\n-\n-\t\tHTML title = new HTML(\"<p>Required by service</p>\");\n-\t\ttitle.setStyleName(\"subsection-heading\");\n-\t\tmainPage.setWidget(2, 0, title);\n-\t\tmainPage.getFlexCellFormatter().setColSpan(2, 0, 2);\n-\n-\t\t// put page into scroll panel\n-\t\tmainPage.setWidget(3, 0, scrollTable);\n-\t\tmainPage.getFlexCellFormatter().setColSpan(3, 0, 2);\n-\t\tmainPage.getFlexCellFormatter().setHeight(3, 0, \"100%\");\n-\n-\t\tthis.contentWidget.setWidget(mainPage);\n-\n-\t\treturn getWidget();\n-\t}\n-\n-\tprivate void setRightsToWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n-\n-\t\t// prepare\n-\t\tArrayList<String> list = new ArrayList<>();\n-\t\tfor (int i = 0; i < right.getRights().length(); i++) {\n-\t\t\tlist.add(right.getRights().get(i));\n-\t\t}\n-\n-\t\t// set read\n-\t\tif (list.contains(\"READ\")) {\n-\t\t\tread.setValue(true);\n-\t\t} else {\n-\t\t\tread.setValue(false);\n-\t\t}\n-\n-\t\t// set write\n-\t\tif (list.contains(\"WRITE\")) {\n-\t\t\twrite.setValue(true);\n-\t\t} else {\n-\t\t\twrite.setValue(false);\n-\t\t}\n-\n-\n-\t}\n-\n-\tprivate void setRightsToWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n-\t\t\t\t\t\t\t\t\tCheckBox readVo, CheckBox writeVo, AttributeRights right) {\n-\n-\t\tArrayList<String> list = new ArrayList<>();\n-\t\tfor (int i=0; i<right.getRights().length(); i++) {\n-\t\t\tlist.add(right.getRights().get(i));\n-\t\t}\n-\n-\t\tif (list.contains(\"READ\")) {\n-\t\t\tread.setValue(true);\n-\t\t} else {\n-\t\t\tread.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"WRITE\")) {\n-\t\t\twrite.setValue(true);\n-\t\t} else {\n-\t\t\twrite.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"READ_PUBLIC\")) {\n-\t\t\treadPublic.setValue(true);\n-\t\t} else {\n-\t\t\treadPublic.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"WRITE_PUBLIC\")) {\n-\t\t\twritePublic.setValue(true);\n-\t\t} else {\n-\t\t\twritePublic.setValue(false);\n-\t\t}\n-\t\tif (list.contains(\"READ_VO\")) {\n-\t\t\treadVo.setValue(true);\n-\t\t} else {\n-\t\t\treadVo.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"WRITE_VO\")) {\n-\t\t\twriteVo.setValue(true);\n-\t\t} else {\n-\t\t\twriteVo.setValue(false);\n-\t\t}\n-\t}\n-\n-\tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n-\n-\t\tright.setRights(read.getValue(), write.getValue());\n-\n-\t\treturn right;\n-\n-\t}\n-\n-\tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n-\t\t\t\t\t\t\t\t\t\t\t\t CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n-\n-\t\tright.setSelfRights(read.getValue(), write.getValue(), readPublic.getValue(), writePublic.getValue(),\n-\t\t\treadVo.getValue(), writeVo.getValue());\n-\n-\t\treturn right;\n-\n-\t}\n-\n-\tprivate void enableDisableWidgets(boolean enabled) {\n-\n-\t\tselfRead.setEnabled(enabled);\n-\t\tselfWrite.setEnabled(enabled);\n-\t\tselfReadPublic.setEnabled(enabled);\n-\t\tselfWritePublic.setEnabled(enabled);\n-\t\tselfReadVo.setEnabled(enabled);\n-\t\tselfWriteVo.setEnabled(enabled);\n-\t\tvoRead.setEnabled(enabled);\n-\t\tvoWrite.setEnabled(enabled);\n-\t\tgroupRead.setEnabled(enabled);\n-\t\tgroupWrite.setEnabled(enabled);\n-\t\tfacilityRead.setEnabled(enabled);\n-\t\tfacilityWrite.setEnabled(enabled);\n-\n-\t}\n-\n-\t@Override\n-\tpublic Widget getWidget() {\n-\t\treturn this.contentWidget;\n-\t}\n-\n-\t@Override\n-\tpublic Widget getTitle() {\n-\t\treturn this.titleWidget;\n-\t}\n-\n-\t@Override\n-\tpublic ImageResource getIcon() {\n-\t\treturn SmallIcons.INSTANCE.attributesDisplayIcon();\n-\t}\n-\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\tfinal int prime = 557;\n-\t\tint result = 1;\n-\t\tresult = prime * result * 13;\n-\t\treturn result;\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object obj) {\n-\t\tif (this == obj)\n-\t\t\treturn true;\n-\t\tif (obj == null)\n-\t\t\treturn false;\n-\t\treturn getClass() == obj.getClass();\n-\t}\n-\n-\t@Override\n-\tpublic boolean multipleInstancesEnabled() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void open() {\n-\n-\t}\n-\n-\t@Override\n-\tpublic boolean isAuthorized() {\n-\n-\t\treturn session.isPerunAdmin();\n-\n-\t}\n+    /**\n+     * Perun web session\n+     */\n+    private PerunWebSession session = PerunWebSession.getInstance();\n+\n+    /**\n+     * Content widget - should be simple panel\n+     */\n+    private SimplePanel contentWidget = new SimplePanel();\n+\n+    /**\n+     * Title widget\n+     */\n+    private Label titleWidget = new Label(\"Attribute\");\n+\n+    private AttributeDefinition def;\n+    private ArrayList<AttributeRights> rights = new ArrayList<>();\n+\n+    private final CheckBox selfRead = new CheckBox();\n+    private final CheckBox selfWrite = new CheckBox();\n+    private final CheckBox selfReadVo = new CheckBox();\n+    private final CheckBox selfReadPublic = new CheckBox();\n+    private final CheckBox selfWriteVo = new CheckBox();\n+    private final CheckBox selfWritePublic = new CheckBox();\n+    private final CheckBox voRead = new CheckBox();\n+    private final CheckBox voWrite = new CheckBox();\n+    private final CheckBox groupRead = new CheckBox();\n+    private final CheckBox groupWrite = new CheckBox();\n+    private final CheckBox facilityRead = new CheckBox();\n+    private final CheckBox facilityWrite = new CheckBox();\n+\n+    private final CheckBox unique = new CheckBox();\n+\n+\n+    /**\n+     * Creates a tab instance\n+     */\n+    public EntitylessAttributesDetailTabItem(AttributeDefinition def) {\n+        this.def = def;\n+    }\n+\n+    @Override\n+    public boolean isPrepared() {\n+        return true;\n+    }\n+\n+    @Override\n+    public boolean isRefreshParentOnClose() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void onClose() {\n+\n+    }\n+\n+    @Override\n+    public Widget draw() {\n+\n+        titleWidget.setText(def.getName());\n+        final TabItem tab = this;\n+\n+        // create main panel for content\n+        final FlexTable mainPage = new FlexTable();\n+        mainPage.setWidth(\"100%\");\n+\n+        final ExtendedTextBox description = new ExtendedTextBox();\n+        description.setWidth(\"100%\");\n+        description.getTextBox().setText(def.getDescription());\n+        final ExtendedTextBox.TextBoxValidator validator = () -> {\n+            if (description.getTextBox().getText().trim().isEmpty()) {\n+                description.setError(\"Description can't be empty.\");\n+                return false;\n+            }\n+            description.setOk();\n+            return true;\n+        };\n+\n+        final ExtendedTextBox displayName = new ExtendedTextBox();\n+        displayName.setWidth(\"100%\");\n+        displayName.getTextBox().setText(def.getDisplayName());\n+        final ExtendedTextBox.TextBoxValidator validatorName = () -> {\n+            if (displayName.getTextBox().getText().trim().isEmpty()) {\n+                displayName.setError(\"Display name can't be empty.\");\n+                return false;\n+            }\n+            displayName.setOk();\n+            return true;\n+        };\n+\n+        description.setValidator(validator);\n+        displayName.setValidator(validatorName);\n+\n+\n+        //unique.setEnabled(false);\n+        unique.setValue(def.isUnique());\n+\n+        if (Arrays.asList(\"core\", \"virt\").contains(def.getDefinition()) || def.getEntity().equals(\"entityless\")) {\n+\n+            unique.setEnabled(false);\n+\n+        } else {\n+\n+            unique.addValueChangeHandler(valueChangeEvent -> {\n+\n+                if (valueChangeEvent.getValue()) {\n+                    UiElements.generateAlert(\"Change confirmation\",\n+                            \"Changing attribute to UNIQUE might take a lot of time if there is large number of entities with set values. Perun will check uniqueness during the process. If values are not unique, conversion will be stopped.<p style=\\\"color:red;\\\">We strongly recommend to refresh whole browser window after conversion is DONE to prevent errors when modyfying attributes from GUI.\",\n+                            clickEvent -> {\n+                                ConvertAttributeToUnique convert = new ConvertAttributeToUnique(new JsonCallbackEvents() {\n+                                    @Override\n+                                    public void onFinished(JavaScriptObject jso) {\n+                                        unique.setValue(true);\n+                                        unique.setEnabled(false);\n+                                        def.setUnique(true);\n+                                    }\n+\n+                                    @Override\n+                                    public void onError(PerunError error) {\n+                                        unique.setValue(false);\n+                                        unique.setEnabled(true);\n+                                        def.setUnique(false);\n+                                    }\n+\n+                                    @Override\n+                                    public void onLoadingStart() {\n+                                        unique.setEnabled(false);\n+                                    }\n+                                });\n+                                convert.convertAttributeDefinitionToUnique(def.getId());\n+                            }, clickEvent -> {\n+                                // action canceled\n+                                unique.setValue(false);\n+                            });\n+                } else {\n+                    UiElements.generateInfo(\"Change not allowed\", \"Once converted to UNIQUE, attributes can't be converted back to non-unique.\");\n+                    unique.setValue(true);\n+                }\n+\n+            });\n+\n+\n+        }\n+\n+        FlexTable attributeDetailTable = new FlexTable();\n+        attributeDetailTable.setStyleName(\"inputFormFlexTable\");\n+\n+\n+        final CustomButton updateButton = TabMenu.getPredefinedButton(ButtonType.SAVE, \"Save attribute details\");\n+        updateButton.addClickHandler(event -> {\n+\n+            final ArrayList<AttributeRights> list = new ArrayList<>();\n+            for (AttributeRights r : rights) {\n+                if (r.getRole().equalsIgnoreCase(\"SELF\")) {\n+                    list.add(getRightsFromWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r));\n+                } else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n+                    list.add(getRightsFromWidgets(voRead, voWrite, r));\n+                } else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n+                    list.add(getRightsFromWidgets(groupRead, groupWrite, r));\n+                } else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n+                    list.add(getRightsFromWidgets(facilityRead, facilityWrite, r));\n+                }\n+            }\n+\n+            if ((!Objects.equals(def.getDescription(), description.getTextBox().getText().trim()) || !Objects.equals(def.getDisplayName(), displayName.getTextBox().getText().trim()))) {\n+\n+                if (!validator.validateTextBox() || !validatorName.validateTextBox()) {\n+                    return;\n+                }\n+\n+                def.setDescription(description.getTextBox().getText().trim());\n+                def.setDisplayName(displayName.getTextBox().getText().trim());\n+\n+                UpdateAttribute request = new UpdateAttribute(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n+                    @Override\n+                    public void onFinished(JavaScriptObject jso) {\n+\n+                        // after update - update rights\n+                        SetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n+                            @Override\n+                            public void onFinished(JavaScriptObject jso) {\n+                                enableDisableWidgets(true);\n+                            }\n+\n+                            @Override\n+                            public void onLoadingStart() {\n+                                enableDisableWidgets(false);\n+                            }\n+\n+                            @Override\n+                            public void onError(PerunError error) {\n+                                enableDisableWidgets(true);\n+                            }\n+                        }));\n+                        request.setAttributeRights(list);\n+\n+                    }\n+                }));\n+                request.updateAttribute(def);\n+            } else {\n+\n+                // after update - update rights\n+                SetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n+                    @Override\n+                    public void onFinished(JavaScriptObject jso) {\n+                        enableDisableWidgets(true);\n+                    }\n+\n+                    @Override\n+                    public void onLoadingStart() {\n+                        enableDisableWidgets(false);\n+                    }\n+\n+                    @Override\n+                    public void onError(PerunError error) {\n+                        enableDisableWidgets(true);\n+                    }\n+                }));\n+                request.setAttributeRights(list);\n+\n+            }\n+        });\n+\n+        attributeDetailTable.setHTML(0, 0, \"Display name:\");\n+        attributeDetailTable.setWidget(0, 1, displayName);\n+        attributeDetailTable.setHTML(1, 0, \"Description:\");\n+        attributeDetailTable.setWidget(1, 1, description);\n+        attributeDetailTable.setHTML(2, 0, \"Unique:\");\n+        attributeDetailTable.setWidget(2, 1, unique);\n+        for (int i = 0; i < attributeDetailTable.getRowCount(); i++) {\n+            attributeDetailTable.getFlexCellFormatter().setStyleName(i, 0, \"itemName\");\n+        }\n+\n+        final FlexTable rightsTable = new FlexTable();\n+        rightsTable.setStyleName(\"inputFormFlexTable\");\n+\n+        rightsTable.setHTML(0, 1, \"<strong>SELF</strong>\");\n+        rightsTable.setHTML(0, 2, \"<strong>SELF_PUBLIC</strong>\");\n+        rightsTable.setHTML(0, 3, \"<strong>SELF_VO</strong>\");\n+        rightsTable.setHTML(0, 4, \"<strong>VO</strong>\");\n+        rightsTable.setHTML(0, 5, \"<strong>GROUP</strong>\");\n+        rightsTable.setHTML(0, 6, \"<strong>FACILITY</strong>\");\n+\n+        rightsTable.setHTML(1, 0, \"<strong>READ</strong>\");\n+        rightsTable.setHTML(2, 0, \"<strong>WRITE</strong>\");\n+\n+        rightsTable.setWidget(1, 1, selfRead);\n+        rightsTable.setWidget(2, 1, selfWrite);\n+        rightsTable.setWidget(1, 2, selfReadPublic);\n+        rightsTable.setWidget(2, 2, selfWritePublic);\n+        rightsTable.setWidget(1, 3, selfReadVo);\n+        rightsTable.setWidget(2, 3, selfWriteVo);\n+        rightsTable.setWidget(1, 4, voRead);\n+        rightsTable.setWidget(2, 4, voWrite);\n+        rightsTable.setWidget(1, 5, groupRead);\n+        rightsTable.setWidget(2, 5, groupWrite);\n+        rightsTable.setWidget(1, 6, facilityRead);\n+        rightsTable.setWidget(2, 6, facilityWrite);\n+\n+        rightsTable.addStyleName(\"centeredTable\");\n+\n+        TabMenu menu = new TabMenu();\n+        menu.addWidget(UiElements.getRefreshButton(this));\n+        menu.addWidget(updateButton);\n+\n+        menu.addWidget(TabMenu.getPredefinedButton(ButtonType.CLOSE, \"\", event ->\n+                session.getTabManager().closeTab(tab, isRefreshParentOnClose())));\n+\n+        CustomButton showKeys = new CustomButton();\n+        showKeys.setText(\"show keys\");\n+        showKeys.addClickHandler(clickEvent -> session.getTabManager().addTab(new EntitylessAttributeEditKeyTabItem(def)));\n+        menu.addWidget(showKeys);\n+\n+        GetAttributeRights rightsCall = new GetAttributeRights(def.getId(), new JsonCallbackEvents() {\n+            @Override\n+            public void onFinished(JavaScriptObject jso) {\n+                rights = JsonUtils.jsoAsList(jso);\n+                for (AttributeRights r : rights) {\n+                    if (r.getRole().equalsIgnoreCase(\"SELF\")) {\n+                        setRightsToWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r);\n+                    } else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n+                        setRightsToWidgets(voRead, voWrite, r);\n+                    } else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n+                        setRightsToWidgets(groupRead, groupWrite, r);\n+                    } else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n+                        setRightsToWidgets(facilityRead, facilityWrite, r);\n+                    }\n+                }\n+                enableDisableWidgets(true);\n+                rightsTable.setVisible(true);\n+            }\n+\n+            @Override\n+            public void onError(PerunError error) {\n+                enableDisableWidgets(true);\n+                rightsTable.setVisible(false);\n+            }\n+\n+            @Override\n+            public void onLoadingStart() {\n+                enableDisableWidgets(false);\n+                rightsTable.setVisible(false);\n+            }\n+        });\n+        rightsCall.retrieveData();\n+\n+        // create new instance for jsonCall\n+        final GetServicesByAttrDefinition services = new GetServicesByAttrDefinition(def.getId());\n+        services.setCheckable(false);\n+\n+        CellTable<Service> attrDefTable = services.getTable((index, object, value) ->\n+                session.getTabManager().addTab(new ServiceDetailTabItem(object)));\n+        attrDefTable.setStyleName(\"perun-table\");\n+        ScrollPanel scrollTable = new ScrollPanel(attrDefTable);\n+        scrollTable.addStyleName(\"perun-tableScrollPanel\");\n+        session.getUiElements().resizePerunTable(scrollTable, 350, this);\n+\n+        // set content to page\n+\n+        mainPage.setWidget(0, 0, menu);\n+        mainPage.getFlexCellFormatter().setColSpan(0, 0, 2);\n+\n+        mainPage.setWidget(1, 0, attributeDetailTable);\n+        mainPage.setWidget(1, 1, rightsTable);\n+        mainPage.getFlexCellFormatter().setWidth(1, 0, \"50%\");\n+        mainPage.getFlexCellFormatter().setWidth(1, 1, \"50%\");\n+\n+        HTML title = new HTML(\"<p>Required by service</p>\");\n+        title.setStyleName(\"subsection-heading\");\n+        mainPage.setWidget(2, 0, title);\n+        mainPage.getFlexCellFormatter().setColSpan(2, 0, 2);\n+\n+        // put page into scroll panel\n+        mainPage.setWidget(3, 0, scrollTable);\n+        mainPage.getFlexCellFormatter().setColSpan(3, 0, 2);\n+        mainPage.getFlexCellFormatter().setHeight(3, 0, \"100%\");\n+\n+        this.contentWidget.setWidget(mainPage);\n+\n+        return getWidget();\n+    }\n+\n+    private void setRightsToWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n+\n+        // prepare\n+        ArrayList<String> list = new ArrayList<>();\n+        for (int i = 0; i < right.getRights().length(); i++) {\n+            list.add(right.getRights().get(i));\n+        }\n+\n+        // set read\n+        if (list.contains(\"READ\")) {\n+            read.setValue(true);\n+        } else {\n+            read.setValue(false);\n+        }\n+\n+        // set write\n+        if (list.contains(\"WRITE\")) {\n+            write.setValue(true);\n+        } else {\n+            write.setValue(false);\n+        }\n+\n+\n+    }\n+\n+    private void setRightsToWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n+                                    CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n+\n+        ArrayList<String> list = new ArrayList<>();\n+        for (int i = 0; i < right.getRights().length(); i++) {\n+            list.add(right.getRights().get(i));\n+        }\n+\n+        if (list.contains(\"READ\")) {\n+            read.setValue(true);\n+        } else {\n+            read.setValue(false);\n+        }\n+\n+        if (list.contains(\"WRITE\")) {\n+            write.setValue(true);\n+        } else {\n+            write.setValue(false);\n+        }\n+\n+        if (list.contains(\"READ_PUBLIC\")) {\n+            readPublic.setValue(true);\n+        } else {\n+            readPublic.setValue(false);\n+        }\n+\n+        if (list.contains(\"WRITE_PUBLIC\")) {\n+            writePublic.setValue(true);\n+        } else {\n+            writePublic.setValue(false);\n+        }\n+        if (list.contains(\"READ_VO\")) {\n+            readVo.setValue(true);\n+        } else {\n+            readVo.setValue(false);\n+        }\n+\n+        if (list.contains(\"WRITE_VO\")) {\n+            writeVo.setValue(true);\n+        } else {\n+            writeVo.setValue(false);\n+        }\n+    }\n+\n+    private AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n+\n+        right.setRights(read.getValue(), write.getValue());\n+\n+        return right;\n+\n+    }\n+\n+    private AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n+                                                 CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n+\n+        right.setSelfRights(read.getValue(), write.getValue(), readPublic.getValue(), writePublic.getValue(),\n+                readVo.getValue(), writeVo.getValue());\n+\n+        return right;\n+\n+    }\n+\n+    private void enableDisableWidgets(boolean enabled) {\n+\n+        selfRead.setEnabled(enabled);\n+        selfWrite.setEnabled(enabled);\n+        selfReadPublic.setEnabled(enabled);\n+        selfWritePublic.setEnabled(enabled);\n+        selfReadVo.setEnabled(enabled);\n+        selfWriteVo.setEnabled(enabled);\n+        voRead.setEnabled(enabled);\n+        voWrite.setEnabled(enabled);\n+        groupRead.setEnabled(enabled);\n+        groupWrite.setEnabled(enabled);\n+        facilityRead.setEnabled(enabled);\n+        facilityWrite.setEnabled(enabled);\n+\n+    }\n+\n+    @Override\n+    public Widget getWidget() {\n+        return this.contentWidget;\n+    }\n+\n+    @Override\n+    public Widget getTitle() {\n+        return this.titleWidget;\n+    }\n+\n+    @Override\n+    public ImageResource getIcon() {\n+        return SmallIcons.INSTANCE.attributesDisplayIcon();\n+    }\n+\n+\n+    @Override\n+    public int hashCode() {\n+        final int prime = 557;\n+        int result = 1;\n+        result = prime * result * 13;\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        return getClass() == obj.getClass();\n+    }\n+\n+    @Override\n+    public boolean multipleInstancesEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void open() {\n+\n+    }\n+\n+    @Override\n+    public boolean isAuthorized() {\n+\n+        return session.isPerunAdmin();\n+\n+    }\n }\n",
            "diff_size": 497
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/428/EntitylessAttributesDetailTabItem.java\nindex 6c18ecf9200..51ea5f9370f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/428/EntitylessAttributesDetailTabItem.java\n@@ -24,7 +24,6 @@ import cz.metacentrum.perun.webgui.tabs.servicestabs.ServiceDetailTabItem;\n import cz.metacentrum.perun.webgui.widgets.CustomButton;\n import cz.metacentrum.perun.webgui.widgets.ExtendedTextBox;\n import cz.metacentrum.perun.webgui.widgets.TabMenu;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Objects;\n@@ -35,499 +34,459 @@ import java.util.Objects;\n  * @author Dano Fecko <dano9500@gmail.com>\n  */\n \n+\n public class EntitylessAttributesDetailTabItem implements TabItem {\n \n-\t/**\n-\t * Perun web session\n-\t */\n-\tprivate PerunWebSession session = PerunWebSession.getInstance();\n-\n-\t/**\n-\t * Content widget - should be simple panel\n-\t */\n-\tprivate SimplePanel contentWidget = new SimplePanel();\n-\n-\t/**\n-\t * Title widget\n-\t */\n-\tprivate Label titleWidget = new Label(\"Attribute\");\n-\n-\tprivate AttributeDefinition def;\n-\tprivate ArrayList<AttributeRights> rights = new ArrayList<>();\n-\n-\tprivate final CheckBox selfRead = new CheckBox();\n-\tprivate final CheckBox selfWrite = new CheckBox();\n-\tprivate final CheckBox selfReadVo = new CheckBox();\n-\tprivate final CheckBox selfReadPublic = new CheckBox();\n-\tprivate final CheckBox selfWriteVo = new CheckBox();\n-\tprivate final CheckBox selfWritePublic = new CheckBox();\n-\tprivate final CheckBox voRead = new CheckBox();\n-\tprivate final CheckBox voWrite = new CheckBox();\n-\tprivate final CheckBox groupRead = new CheckBox();\n-\tprivate final CheckBox groupWrite = new CheckBox();\n-\tprivate final CheckBox facilityRead = new CheckBox();\n-\tprivate final CheckBox facilityWrite = new CheckBox();\n-\n-\tprivate final CheckBox unique = new CheckBox();\n-\n-\n-\t/**\n-\t * Creates a tab instance\n-\t */\n-\tpublic EntitylessAttributesDetailTabItem(AttributeDefinition def) {\n-\t\tthis.def = def;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isPrepared() {\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isRefreshParentOnClose() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void onClose() {\n-\n-\t}\n-\n-\t@Override\n-\tpublic Widget draw() {\n-\n-\t\ttitleWidget.setText(def.getName());\n-\t\tfinal TabItem tab = this;\n-\n-\t\t// create main panel for content\n-\t\tfinal FlexTable mainPage = new FlexTable();\n-\t\tmainPage.setWidth(\"100%\");\n-\n-\t\tfinal ExtendedTextBox description = new ExtendedTextBox();\n-\t\tdescription.setWidth(\"100%\");\n-\t\tdescription.getTextBox().setText(def.getDescription());\n-\t\tfinal ExtendedTextBox.TextBoxValidator validator = () -> {\n-\t\t\tif (description.getTextBox().getText().trim().isEmpty()) {\n-\t\t\t\tdescription.setError(\"Description can't be empty.\");\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tdescription.setOk();\n-\t\t\treturn true;\n-\t\t};\n-\n-\t\tfinal ExtendedTextBox displayName = new ExtendedTextBox();\n-\t\tdisplayName.setWidth(\"100%\");\n-\t\tdisplayName.getTextBox().setText(def.getDisplayName());\n-\t\tfinal ExtendedTextBox.TextBoxValidator validatorName = () -> {\n-\t\t\tif (displayName.getTextBox().getText().trim().isEmpty()) {\n-\t\t\t\tdisplayName.setError(\"Display name can't be empty.\");\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tdisplayName.setOk();\n-\t\t\treturn true;\n-\t\t};\n-\n-\t\tdescription.setValidator(validator);\n-\t\tdisplayName.setValidator(validatorName);\n-\n-\n-\t\t//unique.setEnabled(false);\n-\t\tunique.setValue(def.isUnique());\n-\n-\t\tif (Arrays.asList(\"core\", \"virt\").contains(def.getDefinition()) || def.getEntity().equals(\"entityless\")) {\n-\n-\t\t\tunique.setEnabled(false);\n-\n-\t\t} else {\n-\n-\t\t\tunique.addValueChangeHandler(valueChangeEvent -> {\n-\n-\t\t\t\tif (valueChangeEvent.getValue()) {\n-\t\t\t\t\tUiElements.generateAlert(\"Change confirmation\",\n-\t\t\t\t\t\t\"Changing attribute to UNIQUE might take a lot of time if there is large number of entities with set values. Perun will check uniqueness during the process. If values are not unique, conversion will be stopped.<p style=\\\"color:red;\\\">We strongly recommend to refresh whole browser window after conversion is DONE to prevent errors when modyfying attributes from GUI.\",\n-\t\t\t\t\t\tclickEvent -> {\n-\t\t\t\t\t\t\tConvertAttributeToUnique convert = new ConvertAttributeToUnique(new JsonCallbackEvents() {\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\t\t\t\t\t\tunique.setValue(true);\n-\t\t\t\t\t\t\t\t\tunique.setEnabled(false);\n-\t\t\t\t\t\t\t\t\tdef.setUnique(true);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\t\t\t\t\t\tunique.setValue(false);\n-\t\t\t\t\t\t\t\t\tunique.setEnabled(true);\n-\t\t\t\t\t\t\t\t\tdef.setUnique(false);\n-\t\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onLoadingStart() {\n-\t\t\t\t\t\t\t\t\tunique.setEnabled(false);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t\tconvert.convertAttributeDefinitionToUnique(def.getId());\n-\t\t\t\t\t\t}, clickEvent -> {\n-\t\t\t\t\t\t\t// action canceled\n-\t\t\t\t\t\t\tunique.setValue(false);\n-\t\t\t\t\t\t});\n-\t\t\t\t} else {\n-\t\t\t\t\tUiElements.generateInfo(\"Change not allowed\", \"Once converted to UNIQUE, attributes can't be converted back to non-unique.\");\n-\t\t\t\t\tunique.setValue(true);\n-\t\t\t\t}\n-\n-\t\t\t});\n-\n-\n-\t\t}\n-\n-\t\tFlexTable attributeDetailTable = new FlexTable();\n-\t\tattributeDetailTable.setStyleName(\"inputFormFlexTable\");\n-\n-\n-\t\tfinal CustomButton updateButton = TabMenu.getPredefinedButton(ButtonType.SAVE, \"Save attribute details\");\n-\t\tupdateButton.addClickHandler(event -> {\n-\n-\t\t\tfinal ArrayList<AttributeRights> list = new ArrayList<>();\n-\t\t\tfor (AttributeRights r : rights) {\n-\t\t\t\tif (r.getRole().equalsIgnoreCase(\"SELF\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r));\n-\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(voRead, voWrite, r));\n-\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(groupRead, groupWrite, r));\n-\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n-\t\t\t\t\tlist.add(getRightsFromWidgets(facilityRead, facilityWrite, r));\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif ((!Objects.equals(def.getDescription(), description.getTextBox().getText().trim()) || !Objects.equals(def.getDisplayName(), displayName.getTextBox().getText().trim()))) {\n-\n-\t\t\t\tif (!validator.validateTextBox() || !validatorName.validateTextBox()) return;\n-\n-\t\t\t\tdef.setDescription(description.getTextBox().getText().trim());\n-\t\t\t\tdef.setDisplayName(displayName.getTextBox().getText().trim());\n-\n-\t\t\t\tUpdateAttribute request = new UpdateAttribute(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\n-\t\t\t\t\t\t// after update - update rights\n-\t\t\t\t\t\tSetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n-\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\tpublic void onLoadingStart() {\n-\t\t\t\t\t\t\t\tenableDisableWidgets(false);\n-\t\t\t\t\t\t\t}\n-\n-\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}));\n-\t\t\t\t\t\trequest.setAttributeRights(list);\n-\n-\t\t\t\t\t}\n-\t\t\t\t}));\n-\t\t\t\trequest.updateAttribute(def);\n-\t\t\t} else {\n-\n-\t\t\t\t// after update - update rights\n-\t\t\t\tSetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onLoadingStart() {\n-\t\t\t\t\t\tenableDisableWidgets(false);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\t\t}\n-\t\t\t\t}));\n-\t\t\t\trequest.setAttributeRights(list);\n-\n-\t\t\t}\n-\t\t});\n-\n-\t\tattributeDetailTable.setHTML(0, 0, \"Display name:\");\n-\t\tattributeDetailTable.setWidget(0, 1, displayName);\n-\t\tattributeDetailTable.setHTML(1, 0, \"Description:\");\n-\t\tattributeDetailTable.setWidget(1, 1, description);\n-\t\tattributeDetailTable.setHTML(2, 0, \"Unique:\");\n-\t\tattributeDetailTable.setWidget(2, 1, unique);\n-\t\tfor (int i = 0; i < attributeDetailTable.getRowCount(); i++) {\n-\t\t\tattributeDetailTable.getFlexCellFormatter().setStyleName(i, 0, \"itemName\");\n-\t\t}\n-\n-\t\tfinal FlexTable rightsTable = new FlexTable();\n-\t\trightsTable.setStyleName(\"inputFormFlexTable\");\n-\n-\t\trightsTable.setHTML(0, 1, \"<strong>SELF</strong>\");\n-\t\trightsTable.setHTML(0, 2, \"<strong>SELF_PUBLIC</strong>\");\n-\t\trightsTable.setHTML(0, 3, \"<strong>SELF_VO</strong>\");\n-\t\trightsTable.setHTML(0, 4, \"<strong>VO</strong>\");\n-\t\trightsTable.setHTML(0, 5, \"<strong>GROUP</strong>\");\n-\t\trightsTable.setHTML(0, 6, \"<strong>FACILITY</strong>\");\n-\n-\t\trightsTable.setHTML(1, 0, \"<strong>READ</strong>\");\n-\t\trightsTable.setHTML(2, 0, \"<strong>WRITE</strong>\");\n-\n-\t\trightsTable.setWidget(1, 1, selfRead);\n-\t\trightsTable.setWidget(2, 1, selfWrite);\n-\t\trightsTable.setWidget(1, 2, selfReadPublic);\n-\t\trightsTable.setWidget(2, 2, selfWritePublic);\n-\t\trightsTable.setWidget(1, 3, selfReadVo);\n-\t\trightsTable.setWidget(2, 3, selfWriteVo);\n-\t\trightsTable.setWidget(1, 4, voRead);\n-\t\trightsTable.setWidget(2, 4, voWrite);\n-\t\trightsTable.setWidget(1, 5, groupRead);\n-\t\trightsTable.setWidget(2, 5, groupWrite);\n-\t\trightsTable.setWidget(1, 6, facilityRead);\n-\t\trightsTable.setWidget(2, 6, facilityWrite);\n-\n-\t\trightsTable.addStyleName(\"centeredTable\");\n-\n-\t\tTabMenu menu = new TabMenu();\n-\t\tmenu.addWidget(UiElements.getRefreshButton(this));\n-\t\tmenu.addWidget(updateButton);\n-\n-\t\tmenu.addWidget(TabMenu.getPredefinedButton(ButtonType.CLOSE, \"\", event ->\n-\t\t\tsession.getTabManager().closeTab(tab, isRefreshParentOnClose())));\n-\n-\t\tCustomButton showKeys = new CustomButton();\n-\t\tshowKeys.setText(\"show keys\");\n-\t\tshowKeys.addClickHandler(clickEvent -> session.getTabManager().addTab(new EntitylessAttributeEditKeyTabItem(def)));\n-\t\tmenu.addWidget(showKeys);\n-\n-\t\tGetAttributeRights rightsCall = new GetAttributeRights(def.getId(), new JsonCallbackEvents() {\n-\t\t\t@Override\n-\t\t\tpublic void onFinished(JavaScriptObject jso) {\n-\t\t\t\trights = JsonUtils.jsoAsList(jso);\n-\t\t\t\tfor (AttributeRights r : rights) {\n-\t\t\t\t\tif (r.getRole().equalsIgnoreCase(\"SELF\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r);\n-\t\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(voRead, voWrite, r);\n-\t\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(groupRead, groupWrite, r);\n-\t\t\t\t\t} else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n-\t\t\t\t\t\tsetRightsToWidgets(facilityRead, facilityWrite, r);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\trightsTable.setVisible(true);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onError(PerunError error) {\n-\t\t\t\tenableDisableWidgets(true);\n-\t\t\t\trightsTable.setVisible(false);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void onLoadingStart() {\n-\t\t\t\tenableDisableWidgets(false);\n-\t\t\t\trightsTable.setVisible(false);\n-\t\t\t}\n-\t\t});\n-\t\trightsCall.retrieveData();\n-\n-\t\t// create new instance for jsonCall\n-\t\tfinal GetServicesByAttrDefinition services = new GetServicesByAttrDefinition(def.getId());\n-\t\tservices.setCheckable(false);\n-\n-\t\tCellTable<Service> attrDefTable = services.getTable((index, object, value) ->\n-\t\t\tsession.getTabManager().addTab(new ServiceDetailTabItem(object)));\n-\t\tattrDefTable.setStyleName(\"perun-table\");\n-\t\tScrollPanel scrollTable = new ScrollPanel(attrDefTable);\n-\t\tscrollTable.addStyleName(\"perun-tableScrollPanel\");\n-\t\tsession.getUiElements().resizePerunTable(scrollTable, 350, this);\n-\n-\t\t// set content to page\n-\n-\t\tmainPage.setWidget(0, 0, menu);\n-\t\tmainPage.getFlexCellFormatter().setColSpan(0, 0, 2);\n-\n-\t\tmainPage.setWidget(1, 0, attributeDetailTable);\n-\t\tmainPage.setWidget(1, 1, rightsTable);\n-\t\tmainPage.getFlexCellFormatter().setWidth(1, 0, \"50%\");\n-\t\tmainPage.getFlexCellFormatter().setWidth(1, 1, \"50%\");\n-\n-\t\tHTML title = new HTML(\"<p>Required by service</p>\");\n-\t\ttitle.setStyleName(\"subsection-heading\");\n-\t\tmainPage.setWidget(2, 0, title);\n-\t\tmainPage.getFlexCellFormatter().setColSpan(2, 0, 2);\n-\n-\t\t// put page into scroll panel\n-\t\tmainPage.setWidget(3, 0, scrollTable);\n-\t\tmainPage.getFlexCellFormatter().setColSpan(3, 0, 2);\n-\t\tmainPage.getFlexCellFormatter().setHeight(3, 0, \"100%\");\n-\n-\t\tthis.contentWidget.setWidget(mainPage);\n-\n-\t\treturn getWidget();\n-\t}\n-\n-\tprivate void setRightsToWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n-\n-\t\t// prepare\n-\t\tArrayList<String> list = new ArrayList<>();\n-\t\tfor (int i = 0; i < right.getRights().length(); i++) {\n-\t\t\tlist.add(right.getRights().get(i));\n-\t\t}\n-\n-\t\t// set read\n-\t\tif (list.contains(\"READ\")) {\n-\t\t\tread.setValue(true);\n-\t\t} else {\n-\t\t\tread.setValue(false);\n-\t\t}\n-\n-\t\t// set write\n-\t\tif (list.contains(\"WRITE\")) {\n-\t\t\twrite.setValue(true);\n-\t\t} else {\n-\t\t\twrite.setValue(false);\n-\t\t}\n-\n-\n-\t}\n-\n-\tprivate void setRightsToWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n-\t\t\t\t\t\t\t\t\tCheckBox readVo, CheckBox writeVo, AttributeRights right) {\n-\n-\t\tArrayList<String> list = new ArrayList<>();\n-\t\tfor (int i=0; i<right.getRights().length(); i++) {\n-\t\t\tlist.add(right.getRights().get(i));\n-\t\t}\n-\n-\t\tif (list.contains(\"READ\")) {\n-\t\t\tread.setValue(true);\n-\t\t} else {\n-\t\t\tread.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"WRITE\")) {\n-\t\t\twrite.setValue(true);\n-\t\t} else {\n-\t\t\twrite.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"READ_PUBLIC\")) {\n-\t\t\treadPublic.setValue(true);\n-\t\t} else {\n-\t\t\treadPublic.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"WRITE_PUBLIC\")) {\n-\t\t\twritePublic.setValue(true);\n-\t\t} else {\n-\t\t\twritePublic.setValue(false);\n-\t\t}\n-\t\tif (list.contains(\"READ_VO\")) {\n-\t\t\treadVo.setValue(true);\n-\t\t} else {\n-\t\t\treadVo.setValue(false);\n-\t\t}\n-\n-\t\tif (list.contains(\"WRITE_VO\")) {\n-\t\t\twriteVo.setValue(true);\n-\t\t} else {\n-\t\t\twriteVo.setValue(false);\n-\t\t}\n-\t}\n-\n-\tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n-\n-\t\tright.setRights(read.getValue(), write.getValue());\n-\n-\t\treturn right;\n-\n-\t}\n-\n-\tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n-\t\t\t\t\t\t\t\t\t\t\t\t CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n-\n-\t\tright.setSelfRights(read.getValue(), write.getValue(), readPublic.getValue(), writePublic.getValue(),\n-\t\t\treadVo.getValue(), writeVo.getValue());\n-\n-\t\treturn right;\n-\n-\t}\n-\n-\tprivate void enableDisableWidgets(boolean enabled) {\n-\n-\t\tselfRead.setEnabled(enabled);\n-\t\tselfWrite.setEnabled(enabled);\n-\t\tselfReadPublic.setEnabled(enabled);\n-\t\tselfWritePublic.setEnabled(enabled);\n-\t\tselfReadVo.setEnabled(enabled);\n-\t\tselfWriteVo.setEnabled(enabled);\n-\t\tvoRead.setEnabled(enabled);\n-\t\tvoWrite.setEnabled(enabled);\n-\t\tgroupRead.setEnabled(enabled);\n-\t\tgroupWrite.setEnabled(enabled);\n-\t\tfacilityRead.setEnabled(enabled);\n-\t\tfacilityWrite.setEnabled(enabled);\n-\n-\t}\n-\n-\t@Override\n-\tpublic Widget getWidget() {\n-\t\treturn this.contentWidget;\n-\t}\n-\n-\t@Override\n-\tpublic Widget getTitle() {\n-\t\treturn this.titleWidget;\n-\t}\n-\n-\t@Override\n-\tpublic ImageResource getIcon() {\n-\t\treturn SmallIcons.INSTANCE.attributesDisplayIcon();\n-\t}\n-\n-\n-\t@Override\n-\tpublic int hashCode() {\n-\t\tfinal int prime = 557;\n-\t\tint result = 1;\n-\t\tresult = prime * result * 13;\n-\t\treturn result;\n-\t}\n-\n-\t@Override\n-\tpublic boolean equals(Object obj) {\n-\t\tif (this == obj)\n-\t\t\treturn true;\n-\t\tif (obj == null)\n-\t\t\treturn false;\n-\t\treturn getClass() == obj.getClass();\n-\t}\n-\n-\t@Override\n-\tpublic boolean multipleInstancesEnabled() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void open() {\n-\n-\t}\n-\n-\t@Override\n-\tpublic boolean isAuthorized() {\n-\n-\t\treturn session.isPerunAdmin();\n-\n-\t}\n-}\n+ /**\n+  * Perun web session\n+  */\n+\n+\n+ private PerunWebSession session = PerunWebSession.getInstance();\n+\n+ /**\n+  * Content widget - should be simple panel\n+  */\n+ private SimplePanel contentWidget = new SimplePanel();\n+\n+ /**\n+  * Title widget\n+  */\n+ private Label titleWidget = new Label(\"Attribute\");\n+ private AttributeDefinition def;\n+ private ArrayList<AttributeRights> rights = new ArrayList<>();\n+ private final CheckBox selfRead = new CheckBox();\n+ private final CheckBox selfWrite = new CheckBox();\n+ private final CheckBox selfReadVo = new CheckBox();\n+ private final CheckBox selfReadPublic = new CheckBox();\n+ private final CheckBox selfWriteVo = new CheckBox();\n+ private final CheckBox selfWritePublic = new CheckBox();\n+ private final CheckBox voRead = new CheckBox();\n+ private final CheckBox voWrite = new CheckBox();\n+ private final CheckBox groupRead = new CheckBox();\n+ private final CheckBox groupWrite = new CheckBox();\n+ private final CheckBox facilityRead = new CheckBox();\n+ private final CheckBox facilityWrite = new CheckBox();\n+ private final CheckBox unique = new CheckBox();\n+\n+\n+ /**\n+  * Creates a tab instance\n+  */\n+\n+\n+ public EntitylessAttributesDetailTabItem(AttributeDefinition def) {\n+  this.def = def;\n+ }\n+\n+ @Override\n+ public boolean isPrepared() {\n+  return true;\n+ }\n+\n+ @Override\n+ public boolean isRefreshParentOnClose() {\n+  return false;\n+ }\n+\n+ @Override\n+ public void onClose() { }\n+\n+ @Override\n+ public Widget draw() {\n+  titleWidget.setText(def.getName());\n+\n+\n+  final TabItem tab = this;\n+\n+  // create main panel for content\n+  final FlexTable mainPage = new FlexTable();\n+  mainPage.setWidth(\"100%\");\n+\n+\n+  final ExtendedTextBox description = new ExtendedTextBox();\n+  description.setWidth(\"100%\");\n+  description.getTextBox().setText(def.getDescription());\n+\n+\n+  final ExtendedTextBox.TextBoxValidator validator = ()-> {\n+                                                      if (description.getTextBox().getText().trim().isEmpty()) {\n+                                                       description.setError(\"Description can't be empty.\");\n+                                                       return false;\n+                                                      }\n+                                                      description.setOk();\n+                                                      return true;\n+                                                     };\n+  final ExtendedTextBox displayName = new ExtendedTextBox();\n+  displayName.setWidth(\"100%\");\n+  displayName.getTextBox().setText(def.getDisplayName());\n+\n+\n+  final ExtendedTextBox.TextBoxValidator validatorName = ()-> {\n+                                                          if (displayName.getTextBox().getText().trim().isEmpty()) {\n+                                                           displayName.setError(\"Display name can't be empty.\");\n+                                                           return false;\n+                                                          }\n+                                                          displayName.setOk();\n+                                                          return true;\n+                                                         };\n+  description.setValidator(validator);\n+  displayName.setValidator(validatorName);\n+\n+\n+  //unique.setEnabled(false);\n+  unique.setValue(def.isUnique());\n+  if (Arrays.asList(\"core\", \"virt\").contains(def.getDefinition()) || def.getEntity().equals(\"entityless\")) {\n+   unique.setEnabled(false);\n+  } else {\n+   unique.addValueChangeHandler(valueChangeEvent-> {\n+                                 if (valueChangeEvent.getValue()) {\n+                                  UiElements.generateAlert(\"Change confirmation\", \"Changing attribute to UNIQUE might take a lot of time if there is large number of entities with set values. Perun will check uniqueness during the process. If values are not unique, conversion will be stopped.<p style=\\\"color:red;\\\">We strongly recommend to refresh whole browser window after conversion is DONE to prevent errors when modyfying attributes from GUI.\", clickEvent-> {\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ConvertAttributeToUnique convert = new ConvertAttributeToUnique(new JsonCallbackEvents() {\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        @Override\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        public void onFinished(JavaScriptObject jso) {\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         unique.setValue(true);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         unique.setEnabled(false);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         def.setUnique(true);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }\n+\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        @Override\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        public void onError(PerunError error) {\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         unique.setValue(false);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         unique.setEnabled(true);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         def.setUnique(false);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }\n+\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        @Override\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        public void onLoadingStart() {\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         unique.setEnabled(false);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        });\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                    convert.convertAttributeDefinitionToUnique(def.getId());\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                   }, clickEvent-> {\n+       // action canceled\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                       unique.setValue(false);\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                      });\n+                                 } else {\n+                                  UiElements.generateInfo(\"Change not allowed\", \"Once converted to UNIQUE, attributes can't be converted back to non-unique.\");\n+                                  unique.setValue(true);\n+                                 }\n+                                });\n+  }\n+  FlexTable attributeDetailTable = new FlexTable();\n+  attributeDetailTable.setStyleName(\"inputFormFlexTable\");\n+\n+\n+  final CustomButton updateButton = TabMenu.getPredefinedButton(ButtonType.SAVE, \"Save attribute details\");\n+  updateButton.addClickHandler(event-> {\n+                                final ArrayList<AttributeRights> list = new ArrayList<>();\n+                                for (AttributeRights r : rights) {\n+                                 if (r.getRole().equalsIgnoreCase(\"SELF\")) {\n+                                  list.add(getRightsFromWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r));\n+                                 } else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n+                                  list.add(getRightsFromWidgets(voRead, voWrite, r));\n+                                 } else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n+                                         list.add(getRightsFromWidgets(groupRead, groupWrite, r));\n+                                        } else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n+                                         list.add(getRightsFromWidgets(facilityRead, facilityWrite, r));\n+                                        }\n+                                }\n+                                if ((!Objects.equals(def.getDescription(), description.getTextBox().getText().trim()) || !Objects.equals(def.getDisplayName(), displayName.getTextBox().getText().trim()))) {\n+                                 if (!validator.validateTextBox() || !validatorName.validateTextBox())\n+                                  return;\n+                                 def.setDescription(description.getTextBox().getText().trim());\n+                                 def.setDisplayName(displayName.getTextBox().getText().trim());\n+                                 UpdateAttribute request = new UpdateAttribute(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n+                                                                                @Override\n+                                                                                public void onFinished(JavaScriptObject jso) {\n+\n+      // after update - update rights\n+                                                                                 SetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n+                                                                                                                                      @Override\n+                                                                                                                                      public void onFinished(JavaScriptObject jso) {\n+                                                                                                                                       enableDisableWidgets(true);\n+                                                                                                                                      }\n+\n+                                                                                                                                      @Override\n+                                                                                                                                      public void onLoadingStart() {\n+                                                                                                                                       enableDisableWidgets(false);\n+                                                                                                                                      }\n+\n+                                                                                                                                      @Override\n+                                                                                                                                      public void onError(PerunError error) {\n+                                                                                                                                       enableDisableWidgets(true);\n+                                                                                                                                      }\n+                                                                                                                                      }));\n+                                                                                 request.setAttributeRights(list);\n+                                                                                }\n+                                                                               }));\n+                                 request.updateAttribute(def);\n+                                } else {\n+\n+    // after update - update rights\n+                                 SetAttributeRights request = new SetAttributeRights(JsonCallbackEvents.disableButtonEvents(updateButton, new JsonCallbackEvents() {\n+                                                                                      @Override\n+                                                                                      public void onFinished(JavaScriptObject jso) {\n+                                                                                       enableDisableWidgets(true);\n+                                                                                      }\n+\n+                                                                                      @Override\n+                                                                                      public void onLoadingStart() {\n+                                                                                       enableDisableWidgets(false);\n+                                                                                      }\n+\n+                                                                                      @Override\n+                                                                                      public void onError(PerunError error) {\n+                                                                                       enableDisableWidgets(true);\n+                                                                                      }\n+                                                                                      }));\n+                                 request.setAttributeRights(list);\n+                                }\n+                               });\n+  attributeDetailTable.setHTML(0, 0, \"Display name:\");\n+  attributeDetailTable.setWidget(0, 1, displayName);\n+  attributeDetailTable.setHTML(1, 0, \"Description:\");\n+  attributeDetailTable.setWidget(1, 1, description);\n+  attributeDetailTable.setHTML(2, 0, \"Unique:\");\n+  attributeDetailTable.setWidget(2, 1, unique);\n+  for (int i = 0; i<attributeDetailTable.getRowCount(); i++) {\n+   attributeDetailTable.getFlexCellFormatter().setStyleName(i, 0, \"itemName\");\n+  }\n+\n+\n+  final FlexTable rightsTable = new FlexTable();\n+  rightsTable.setStyleName(\"inputFormFlexTable\");\n+  rightsTable.setHTML(0, 1, \"<strong>SELF</strong>\");\n+  rightsTable.setHTML(0, 2, \"<strong>SELF_PUBLIC</strong>\");\n+  rightsTable.setHTML(0, 3, \"<strong>SELF_VO</strong>\");\n+  rightsTable.setHTML(0, 4, \"<strong>VO</strong>\");\n+  rightsTable.setHTML(0, 5, \"<strong>GROUP</strong>\");\n+  rightsTable.setHTML(0, 6, \"<strong>FACILITY</strong>\");\n+  rightsTable.setHTML(1, 0, \"<strong>READ</strong>\");\n+  rightsTable.setHTML(2, 0, \"<strong>WRITE</strong>\");\n+  rightsTable.setWidget(1, 1, selfRead);\n+  rightsTable.setWidget(2, 1, selfWrite);\n+  rightsTable.setWidget(1, 2, selfReadPublic);\n+  rightsTable.setWidget(2, 2, selfWritePublic);\n+  rightsTable.setWidget(1, 3, selfReadVo);\n+  rightsTable.setWidget(2, 3, selfWriteVo);\n+  rightsTable.setWidget(1, 4, voRead);\n+  rightsTable.setWidget(2, 4, voWrite);\n+  rightsTable.setWidget(1, 5, groupRead);\n+  rightsTable.setWidget(2, 5, groupWrite);\n+  rightsTable.setWidget(1, 6, facilityRead);\n+  rightsTable.setWidget(2, 6, facilityWrite);\n+  rightsTable.addStyleName(\"centeredTable\");\n+  TabMenu menu = new TabMenu();\n+  menu.addWidget(UiElements.getRefreshButton(this));\n+  menu.addWidget(updateButton);\n+  menu.addWidget(TabMenu.getPredefinedButton(ButtonType.CLOSE, \"\", event->session.getTabManager().closeTab(tab, isRefreshParentOnClose())));\n+  CustomButton showKeys = new CustomButton();\n+  showKeys.setText(\"show keys\");\n+  showKeys.addClickHandler(clickEvent->session.getTabManager().addTab(new EntitylessAttributeEditKeyTabItem(def)));\n+  menu.addWidget(showKeys);\n+  GetAttributeRights rightsCall = new GetAttributeRights(def.getId(), new JsonCallbackEvents() {\n+                                   @Override\n+                                   public void onFinished(JavaScriptObject jso) {\n+                                    rights = JsonUtils.jsoAsList(jso);\n+                                    for (AttributeRights r : rights) {\n+                                     if (r.getRole().equalsIgnoreCase(\"SELF\")) {\n+                                      setRightsToWidgets(selfRead, selfWrite, selfReadPublic, selfWritePublic, selfReadVo, selfWriteVo, r);\n+                                     } else if (r.getRole().equalsIgnoreCase(\"VOADMIN\")) {\n+                                      setRightsToWidgets(voRead, voWrite, r);\n+                                     } else if (r.getRole().equalsIgnoreCase(\"GROUPADMIN\")) {\n+                                             setRightsToWidgets(groupRead, groupWrite, r);\n+                                            } else if (r.getRole().equalsIgnoreCase(\"FACILITYADMIN\")) {\n+                                             setRightsToWidgets(facilityRead, facilityWrite, r);\n+                                            }\n+                                    }\n+                                    enableDisableWidgets(true);\n+                                    rightsTable.setVisible(true);\n+                                   }\n+\n+                                   @Override\n+                                   public void onError(PerunError error) {\n+                                    enableDisableWidgets(true);\n+                                    rightsTable.setVisible(false);\n+                                   }\n+\n+                                   @Override\n+                                   public void onLoadingStart() {\n+                                    enableDisableWidgets(false);\n+                                    rightsTable.setVisible(false);\n+                                   }\n+                                   });\n+  rightsCall.retrieveData();\n+\n+  // create new instance for jsonCall\n+\n+\n+  final GetServicesByAttrDefinition services = new GetServicesByAttrDefinition(def.getId());\n+  services.setCheckable(false);\n+  CellTable<Service> attrDefTable = services.getTable((index,object,value)->session.getTabManager().addTab(new ServiceDetailTabItem(object)));\n+  attrDefTable.setStyleName(\"perun-table\");\n+  ScrollPanel scrollTable = new ScrollPanel(attrDefTable);\n+  scrollTable.addStyleName(\"perun-tableScrollPanel\");\n+  session.getUiElements().resizePerunTable(scrollTable, 350, this);\n+\n+  // set content to page\n+  mainPage.setWidget(0, 0, menu);\n+  mainPage.getFlexCellFormatter().setColSpan(0, 0, 2);\n+  mainPage.setWidget(1, 0, attributeDetailTable);\n+  mainPage.setWidget(1, 1, rightsTable);\n+  mainPage.getFlexCellFormatter().setWidth(1, 0, \"50%\");\n+  mainPage.getFlexCellFormatter().setWidth(1, 1, \"50%\");\n+  HTML title = new HTML(\"<p>Required by service</p>\");\n+  title.setStyleName(\"subsection-heading\");\n+  mainPage.setWidget(2, 0, title);\n+  mainPage.getFlexCellFormatter().setColSpan(2, 0, 2);\n+\n+  // put page into scroll panel\n+  mainPage.setWidget(3, 0, scrollTable);\n+  mainPage.getFlexCellFormatter().setColSpan(3, 0, 2);\n+  mainPage.getFlexCellFormatter().setHeight(3, 0, \"100%\");\n+  this.contentWidget.setWidget(mainPage);\n+  return getWidget();\n+ }\n+\n+\n+ private void setRightsToWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n+\n+  // prepare\n+  ArrayList<String> list = new ArrayList<>();\n+  for (int i = 0; i<right.getRights().length(); i++) {\n+   list.add(right.getRights().get(i));\n+  }\n+\n+  // set read\n+  if (list.contains(\"READ\")) {\n+   read.setValue(true);\n+  } else {\n+   read.setValue(false);\n+  }\n+\n+  // set write\n+  if (list.contains(\"WRITE\")) {\n+   write.setValue(true);\n+  } else {\n+   write.setValue(false);\n+  }\n+ }\n+\n+\n+ private void setRightsToWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic, CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n+  ArrayList<String> list = new ArrayList<>();\n+  for (int i = 0; i<right.getRights().length(); i++) {\n+   list.add(right.getRights().get(i));\n+  }\n+  if (list.contains(\"READ\")) {\n+   read.setValue(true);\n+  } else {\n+   read.setValue(false);\n+  }\n+  if (list.contains(\"WRITE\")) {\n+   write.setValue(true);\n+  } else {\n+   write.setValue(false);\n+  }\n+  if (list.contains(\"READ_PUBLIC\")) {\n+   readPublic.setValue(true);\n+  } else {\n+   readPublic.setValue(false);\n+  }\n+  if (list.contains(\"WRITE_PUBLIC\")) {\n+   writePublic.setValue(true);\n+  } else {\n+   writePublic.setValue(false);\n+  }\n+  if (list.contains(\"READ_VO\")) {\n+   readVo.setValue(true);\n+  } else {\n+   readVo.setValue(false);\n+  }\n+  if (list.contains(\"WRITE_VO\")) {\n+   writeVo.setValue(true);\n+  } else {\n+   writeVo.setValue(false);\n+  }\n+ }\n+\n+\n+ private AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, AttributeRights right) {\n+  right.setRights(read.getValue(), write.getValue());\n+  return right;\n+ }\n+\n+\n+ private AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic, CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n+  right.setSelfRights(read.getValue(),\n+  write.getValue(),\n+  readPublic.getValue(),\n+  writePublic.getValue(),\n+  readVo.getValue(),\n+  writeVo.getValue());\n+  return right;\n+ }\n+\n+\n+ private void enableDisableWidgets(boolean enabled) {\n+  selfRead.setEnabled(enabled);\n+  selfWrite.setEnabled(enabled);\n+  selfReadPublic.setEnabled(enabled);\n+  selfWritePublic.setEnabled(enabled);\n+  selfReadVo.setEnabled(enabled);\n+  selfWriteVo.setEnabled(enabled);\n+  voRead.setEnabled(enabled);\n+  voWrite.setEnabled(enabled);\n+  groupRead.setEnabled(enabled);\n+  groupWrite.setEnabled(enabled);\n+  facilityRead.setEnabled(enabled);\n+  facilityWrite.setEnabled(enabled);\n+ }\n+\n+ @Override\n+ public Widget getWidget() {\n+  return this.contentWidget;\n+ }\n+\n+ @Override\n+ public Widget getTitle() {\n+  return this.titleWidget;\n+ }\n+\n+ @Override\n+ public ImageResource getIcon() {\n+  return SmallIcons.INSTANCE.attributesDisplayIcon();\n+ }\n+\n+ @Override\n+ public int hashCode() {\n+  final int prime = 557;\n+  int result = 1;\n+  result = prime * result * 13;\n+  return result;\n+ }\n+\n+ @Override\n+ public boolean equals(Object obj) {\n+  if (this == obj)\n+   return true;\n+  if (obj == null)\n+   return false;\n+  return getClass() == obj.getClass();\n+ }\n+\n+ @Override\n+ public boolean multipleInstancesEnabled() {\n+  return false;\n+ }\n+\n+ @Override\n+ public void open() { }\n+\n+ @Override\n+ public boolean isAuthorized() {\n+  return session.isPerunAdmin();\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 496
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/428/EntitylessAttributesDetailTabItem.java\nindex 6c18ecf9200..6880b161742 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/428/EntitylessAttributesDetailTabItem.java\n@@ -455,7 +455,7 @@ public class EntitylessAttributesDetailTabItem implements TabItem {\n \t}\n \n \tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n-\t\t\t\t\t\t\t\t\t\t\t\t CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n+\t\t\tCheckBox readVo, CheckBox writeVo, AttributeRights right) {\n \n \t\tright.setSelfRights(read.getValue(), write.getValue(), readPublic.getValue(), writePublic.getValue(),\n \t\t\treadVo.getValue(), writeVo.getValue());\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/428/EntitylessAttributesDetailTabItem.java\nindex 6c18ecf9200..390b1bd1cc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/428/EntitylessAttributesDetailTabItem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/428/EntitylessAttributesDetailTabItem.java\n@@ -455,7 +455,7 @@ public class EntitylessAttributesDetailTabItem implements TabItem {\n \t}\n \n \tprivate AttributeRights getRightsFromWidgets(CheckBox read, CheckBox write, CheckBox readPublic, CheckBox writePublic,\n-\t\t\t\t\t\t\t\t\t\t\t\t CheckBox readVo, CheckBox writeVo, AttributeRights right) {\n+\tCheckBox readVo, CheckBox writeVo, AttributeRights right) {\n \n \t\tright.setSelfRights(read.getValue(), write.getValue(), readPublic.getValue(), writePublic.getValue(),\n \t\t\treadVo.getValue(), writeVo.getValue());\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}