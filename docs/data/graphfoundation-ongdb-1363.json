{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1363",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "451",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "456",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "470",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "502",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1363/RecordStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1363/RecordStore.java\nindex 74275dced79..43f42d825ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1363/RecordStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1363/RecordStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -46,7 +47,7 @@ import org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord;\n /**\n  * A store for {@link #updateRecord(AbstractBaseRecord) updating} and\n  * {@link #getRecord(long, AbstractBaseRecord, RecordLoad) getting} records.\n- *\n+ * <p>\n  * There are two ways of getting records, either one-by-one using\n  * {@link #getRecord(long, AbstractBaseRecord, RecordLoad)}, passing in record retrieved from {@link #newRecord()}.\n  * This to make a conscious decision about who will create the record instance and in that process figure out\n@@ -61,479 +62,480 @@ import org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord;\n  */\n public interface RecordStore<RECORD extends AbstractBaseRecord> extends IdSequence\n {\n-    /**\n-     * @return the {@link File} that backs this store.\n-     */\n-    File getStorageFileName();\n-\n-    /**\n-     * @return high id of this store, i.e an id higher than any in use record.\n-     */\n-    long getHighId();\n-\n-    /**\n-     * @return highest id in use in this store.\n-     */\n-    long getHighestPossibleIdInUse();\n-\n-    /**\n-     * Sets highest id in use for this store. This is for when records are applied to this store where\n-     * the ids have been generated through some other means. Having an up to date highest possible id\n-     * makes sure that closing this store truncates at the right place and that \"all record scans\" can\n-     * see all records.\n-     *\n-     * @param highestIdInUse highest id that is now in use in this store.\n-     */\n-    void setHighestPossibleIdInUse( long highestIdInUse );\n-\n-    /**\n-     * @return a new record instance for receiving data by {@link #getRecord(long, AbstractBaseRecord, RecordLoad)}\n-     * and {@link #newRecordCursor(AbstractBaseRecord)}.\n-     */\n-    RECORD newRecord();\n-\n-    /**\n-     * Reads a record from the store into {@code target}. Depending on {@link RecordLoad} given there will\n-     * be different behavior, although the {@code target} record will be marked with the specified\n-     * {@code id} after participating in this method call.\n-     * <ul>\n-     * <li>{@link RecordLoad#CHECK}: As little data as possible is read to determine whether or not the record\n-     *     is in use. If not in use then no more data will be loaded into the target record and\n-     *     the the data of the record will be {@link AbstractBaseRecord#clear() cleared}.</li>\n-     * <li>{@link RecordLoad#NORMAL}: Just like {@link RecordLoad#CHECK}, but with the difference that\n-     *     an {@link InvalidRecordException} will be thrown if the record isn't in use.</li>\n-     * <li>{@link RecordLoad#FORCE}: The entire contents of the record will be loaded into the target record\n-     *     regardless if the record is in use or not. This leaves no guarantees about the data in the record\n-     *     after this method call, except that the id will be the specified {@code id}.\n-     *\n-     * @param id the id of the record to load.\n-     * @param target record where data will be loaded into. This record will have its id set to the specified\n-     * {@code id} as part of this method call.\n-     * @param mode loading behaviour, read more in method description.\n-     * @return the record that was passed in, for convenience.\n-     * @throws InvalidRecordException if record not in use and the {@code mode} allows for throwing.\n-     */\n-    RECORD getRecord( long id, RECORD target, RecordLoad mode ) throws InvalidRecordException;\n-\n-    /**\n-     * Reads a record from the store into {@code target}, see\n-     * {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)}.\n-     * <p>\n-     * The provided page cursor will be used to get the record, and in doing this it will be redirected to the\n-     * correct page if needed.\n-     *\n-     * @param id the record id, understood to be the absolute reference to the store.\n-     * @param target the record to fill.\n-     * @param mode loading behaviour, read more in {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)}.\n-     * @param cursor the PageCursor to use for record loading.\n-     * @throws InvalidRecordException if record not in use and the {@code mode} allows for throwing.\n-     */\n-    void getRecordByCursor( long id, RECORD target, RecordLoad mode, PageCursor cursor ) throws InvalidRecordException;\n-\n-    /**\n-     * For stores that have other stores coupled underneath, the \"top level\" record will have a flag\n-     * saying whether or not it's light. Light means that no records from the coupled store have been loaded yet.\n-     * This method can load those records and enrich the target record with those, marking it as heavy.\n-     *\n-     * @param record record to make heavy, if not already.\n-     */\n-    void ensureHeavy( RECORD record );\n-\n-    /**\n-     * Reads records that belong together, a chain of records that as a whole forms the entirety of a data item.\n-     *\n-     * @param firstId record id of the first record to start loading from.\n-     * @param mode {@link RecordLoad} mode.\n-     * @return {@link Collection} of records in the loaded chain.\n-     * @throws InvalidRecordException if some record not in use and the {@code mode} is allows for throwing.\n-     */\n-    Collection<RECORD> getRecords( long firstId, RecordLoad mode ) throws InvalidRecordException;\n-\n-    /**\n-     * Instantiates a new record cursor capable of iterating over records in this store. A {@link RecordCursor}\n-     * gets created with one record and will use every time it reads records.\n-     *\n-     * @param record instance to use when reading record data.\n-     * @return a new {@link RecordCursor} instance capable of reading records in this store.\n-     */\n-    RecordCursor<RECORD> newRecordCursor( RECORD record );\n-\n-    /**\n-     * Returns another record id which the given {@code record} references and which a {@link RecordCursor}\n-     * would follow and read next.\n-     *\n-     * @param record to read the \"next\" reference from.\n-     * @return record id of \"next\" record that the given {@code record} references, or {@link Record#NULL_REFERENCE}\n-     * if the record doesn't reference a next record.\n-     */\n-    long getNextRecordReference( RECORD record );\n-\n-    /**\n-     * Updates this store with the contents of {@code record} at the record id\n-     * {@link AbstractBaseRecord#getId() specified} by the record. The whole record will be written if\n-     * the given record is {@link AbstractBaseRecord#inUse() in use}, not necessarily so if it's not in use.\n-     *\n-     * @param record containing data to write to this store at the {@link AbstractBaseRecord#getId() id}\n-     * specified by the record.\n-     */\n-    void updateRecord( RECORD record );\n-\n-    /**\n-     * Lets {@code record} be processed by {@link Processor}.\n-     *\n-     * @param processor {@link Processor} of records.\n-     * @param record to process.\n-     * @throws FAILURE if the processor fails.\n-     */\n-    <FAILURE extends Exception> void accept( Processor<FAILURE> processor, RECORD record ) throws FAILURE;\n-\n-    /**\n-     * @return number of bytes each record in this store occupies. All records in a store is of the same size.\n-     */\n-    int getRecordSize();\n-\n-    /**\n-     * @deprecated since it's exposed through the generic {@link RecordStore} interface although only\n-     * applicable to one particular type of of implementation of it.\n-     * @return record \"data\" size, only applicable to dynamic record stores where record size may be specified\n-     * at creation time and later used every time the store is opened. Data size refers to number of bytes\n-     * of a record without header information, such as \"inUse\" and \"next\".\n-     */\n-    @Deprecated\n-    int getRecordDataSize();\n-\n-    /**\n-     * @return underlying storage is assumed to work with pages. This method returns number of records that\n-     * will fit into each page.\n-     */\n-    int getRecordsPerPage();\n-\n-    /**\n-     * Closes this store and releases any resource attached to it.\n-     */\n-    void close();\n-\n-    /**\n-     * Flushes all pending {@link #updateRecord(AbstractBaseRecord) updates} to underlying storage.\n-     * This call is blocking and will ensure all updates since last call to this method are durable\n-     * once the call returns.\n-     */\n-    void flush();\n-\n-    /**\n-     * Some stores may have meta data stored in the header of the store file. Since all records in a store\n-     * are of the same size the means of storing that meta data is to occupy one or more records at the\n-     * beginning of the store (0...).\n-     *\n-     * @return the number of records in the beginning of the file that are reserved for header meta data.\n-     */\n-    int getNumberOfReservedLowIds();\n-\n-    /**\n-     * Returns store header (see {@link #getNumberOfReservedLowIds()}) as {@code int}. Exposed like this\n-     * for convenience since all known store headers are ints.\n-     *\n-     * @return store header as an int value, e.g the first 4 bytes of the first (reserved) record in this store.\n-     */\n-    int getStoreHeaderInt();\n-\n-    /**\n-     * Called once all changes to a record is ready to be converted into a command.\n-     *\n-     * @param record record to prepare, potentially updating it with more information before converting into a command.\n-     */\n-    void prepareForCommit( RECORD record );\n-\n-    /**\n-     * Called once all changes to a record is ready to be converted into a command.\n-     * WARNING this is for advanced use, please consider using {@link #prepareForCommit(AbstractBaseRecord)} instead.\n-     *\n-     * @param record record to prepare, potentially updating it with more information before converting into a command.\n-     * @param idSequence {@link IdSequence} to use for potentially generating additional ids required by this record.\n-     */\n-    void prepareForCommit( RECORD record, IdSequence idSequence );\n-\n-    /**\n-     * Scan the given range of records both inclusive, and pass all the in-use ones to the given processor, one by one.\n-     *\n-     * The record passed to the NodeRecordScanner is reused instead of reallocated for every record, so it must be\n-     * cloned if you want to save it for later.\n-     * @param visitor {@link Visitor} notified about all records.\n-     * @throws Exception on error reading from store.\n-     */\n-    <EXCEPTION extends Exception> void scanAllRecords( Visitor<RECORD,EXCEPTION> visitor ) throws EXCEPTION;\n-\n-    void freeId( long id );\n-\n-    Predicate<AbstractBaseRecord> IN_USE = AbstractBaseRecord::inUse;\n-\n-    class Delegator<R extends AbstractBaseRecord> implements RecordStore<R>\n-    {\n-        private final RecordStore<R> actual;\n-\n-        @Override\n-        public void setHighestPossibleIdInUse( long highestIdInUse )\n-        {\n-            actual.setHighestPossibleIdInUse( highestIdInUse );\n-        }\n-\n-        @Override\n-        public R newRecord()\n-        {\n-            return actual.newRecord();\n-        }\n-\n-        @Override\n-        public R getRecord( long id, R target, RecordLoad mode ) throws InvalidRecordException\n-        {\n-            return actual.getRecord( id, target, mode );\n-        }\n+  /**\n+   * @return the {@link File} that backs this store.\n+   */\n+  File getStorageFileName();\n+\n+  /**\n+   * @return high id of this store, i.e an id higher than any in use record.\n+   */\n+  long getHighId();\n+\n+  /**\n+   * @return highest id in use in this store.\n+   */\n+  long getHighestPossibleIdInUse();\n+\n+  /**\n+   * Sets highest id in use for this store. This is for when records are applied to this store where\n+   * the ids have been generated through some other means. Having an up to date highest possible id\n+   * makes sure that closing this store truncates at the right place and that \"all record scans\" can\n+   * see all records.\n+   *\n+   * @param highestIdInUse highest id that is now in use in this store.\n+   */\n+  void setHighestPossibleIdInUse(long highestIdInUse);\n+\n+  /**\n+   * @return a new record instance for receiving data by {@link #getRecord(long, AbstractBaseRecord, RecordLoad)}\n+   * and {@link #newRecordCursor(AbstractBaseRecord)}.\n+   */\n+  RECORD newRecord();\n+\n+  /**\n+   * Reads a record from the store into {@code target}. Depending on {@link RecordLoad} given there will\n+   * be different behavior, although the {@code target} record will be marked with the specified\n+   * {@code id} after participating in this method call.\n+   * <ul>\n+   * <li>{@link RecordLoad#CHECK}: As little data as possible is read to determine whether or not the record\n+   *     is in use. If not in use then no more data will be loaded into the target record and\n+   *     the the data of the record will be {@link AbstractBaseRecord#clear() cleared}.</li>\n+   * <li>{@link RecordLoad#NORMAL}: Just like {@link RecordLoad#CHECK}, but with the difference that\n+   *     an {@link InvalidRecordException} will be thrown if the record isn't in use.</li>\n+   * <li>{@link RecordLoad#FORCE}: The entire contents of the record will be loaded into the target record\n+   *     regardless if the record is in use or not. This leaves no guarantees about the data in the record\n+   *     after this method call, except that the id will be the specified {@code id}.\n+   *\n+   * @param id     the id of the record to load.\n+   * @param target record where data will be loaded into. This record will have its id set to the specified\n+   *               {@code id} as part of this method call.\n+   * @param mode   loading behaviour, read more in method description.\n+   * @return the record that was passed in, for convenience.\n+   * @throws InvalidRecordException if record not in use and the {@code mode} allows for throwing.\n+   */\n+  RECORD getRecord(long id, RECORD target, RecordLoad mode) throws InvalidRecordException;\n+\n+  /**\n+   * Reads a record from the store into {@code target}, see\n+   * {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)}.\n+   * <p>\n+   * The provided page cursor will be used to get the record, and in doing this it will be redirected to the\n+   * correct page if needed.\n+   *\n+   * @param id     the record id, understood to be the absolute reference to the store.\n+   * @param target the record to fill.\n+   * @param mode   loading behaviour, read more in {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)}.\n+   * @param cursor the PageCursor to use for record loading.\n+   * @throws InvalidRecordException if record not in use and the {@code mode} allows for throwing.\n+   */\n+  void getRecordByCursor(long id, RECORD target, RecordLoad mode, PageCursor cursor) throws InvalidRecordException;\n+\n+  /**\n+   * For stores that have other stores coupled underneath, the \"top level\" record will have a flag\n+   * saying whether or not it's light. Light means that no records from the coupled store have been loaded yet.\n+   * This method can load those records and enrich the target record with those, marking it as heavy.\n+   *\n+   * @param record record to make heavy, if not already.\n+   */\n+  void ensureHeavy(RECORD record);\n+\n+  /**\n+   * Reads records that belong together, a chain of records that as a whole forms the entirety of a data item.\n+   *\n+   * @param firstId record id of the first record to start loading from.\n+   * @param mode    {@link RecordLoad} mode.\n+   * @return {@link Collection} of records in the loaded chain.\n+   * @throws InvalidRecordException if some record not in use and the {@code mode} is allows for throwing.\n+   */\n+  Collection<RECORD> getRecords(long firstId, RecordLoad mode) throws InvalidRecordException;\n+\n+  /**\n+   * Instantiates a new record cursor capable of iterating over records in this store. A {@link RecordCursor}\n+   * gets created with one record and will use every time it reads records.\n+   *\n+   * @param record instance to use when reading record data.\n+   * @return a new {@link RecordCursor} instance capable of reading records in this store.\n+   */\n+  RecordCursor<RECORD> newRecordCursor(RECORD record);\n+\n+  /**\n+   * Returns another record id which the given {@code record} references and which a {@link RecordCursor}\n+   * would follow and read next.\n+   *\n+   * @param record to read the \"next\" reference from.\n+   * @return record id of \"next\" record that the given {@code record} references, or {@link Record#NULL_REFERENCE}\n+   * if the record doesn't reference a next record.\n+   */\n+  long getNextRecordReference(RECORD record);\n+\n+  /**\n+   * Updates this store with the contents of {@code record} at the record id\n+   * {@link AbstractBaseRecord#getId() specified} by the record. The whole record will be written if\n+   * the given record is {@link AbstractBaseRecord#inUse() in use}, not necessarily so if it's not in use.\n+   *\n+   * @param record containing data to write to this store at the {@link AbstractBaseRecord#getId() id}\n+   *               specified by the record.\n+   */\n+  void updateRecord(RECORD record);\n+\n+  /**\n+   * Lets {@code record} be processed by {@link Processor}.\n+   *\n+   * @param processor {@link Processor} of records.\n+   * @param record    to process.\n+   * @throws FAILURE if the processor fails.\n+   */\n+  <FAILURE extends Exception> void accept(Processor<FAILURE> processor, RECORD record) throws FAILURE;\n+\n+  /**\n+   * @return number of bytes each record in this store occupies. All records in a store is of the same size.\n+   */\n+  int getRecordSize();\n+\n+  /**\n+   * @return record \"data\" size, only applicable to dynamic record stores where record size may be specified\n+   * at creation time and later used every time the store is opened. Data size refers to number of bytes\n+   * of a record without header information, such as \"inUse\" and \"next\".\n+   * @deprecated since it's exposed through the generic {@link RecordStore} interface although only\n+   * applicable to one particular type of of implementation of it.\n+   */\n+  @Deprecated\n+  int getRecordDataSize();\n+\n+  /**\n+   * @return underlying storage is assumed to work with pages. This method returns number of records that\n+   * will fit into each page.\n+   */\n+  int getRecordsPerPage();\n+\n+  /**\n+   * Closes this store and releases any resource attached to it.\n+   */\n+  void close();\n+\n+  /**\n+   * Flushes all pending {@link #updateRecord(AbstractBaseRecord) updates} to underlying storage.\n+   * This call is blocking and will ensure all updates since last call to this method are durable\n+   * once the call returns.\n+   */\n+  void flush();\n+\n+  /**\n+   * Some stores may have meta data stored in the header of the store file. Since all records in a store\n+   * are of the same size the means of storing that meta data is to occupy one or more records at the\n+   * beginning of the store (0...).\n+   *\n+   * @return the number of records in the beginning of the file that are reserved for header meta data.\n+   */\n+  int getNumberOfReservedLowIds();\n+\n+  /**\n+   * Returns store header (see {@link #getNumberOfReservedLowIds()}) as {@code int}. Exposed like this\n+   * for convenience since all known store headers are ints.\n+   *\n+   * @return store header as an int value, e.g the first 4 bytes of the first (reserved) record in this store.\n+   */\n+  int getStoreHeaderInt();\n+\n+  /**\n+   * Called once all changes to a record is ready to be converted into a command.\n+   *\n+   * @param record record to prepare, potentially updating it with more information before converting into a command.\n+   */\n+  void prepareForCommit(RECORD record);\n+\n+  /**\n+   * Called once all changes to a record is ready to be converted into a command.\n+   * WARNING this is for advanced use, please consider using {@link #prepareForCommit(AbstractBaseRecord)} instead.\n+   *\n+   * @param record     record to prepare, potentially updating it with more information before converting into a command.\n+   * @param idSequence {@link IdSequence} to use for potentially generating additional ids required by this record.\n+   */\n+  void prepareForCommit(RECORD record, IdSequence idSequence);\n+\n+  /**\n+   * Scan the given range of records both inclusive, and pass all the in-use ones to the given processor, one by one.\n+   * <p>\n+   * The record passed to the NodeRecordScanner is reused instead of reallocated for every record, so it must be\n+   * cloned if you want to save it for later.\n+   *\n+   * @param visitor {@link Visitor} notified about all records.\n+   * @throws Exception on error reading from store.\n+   */\n+  <EXCEPTION extends Exception> void scanAllRecords(Visitor<RECORD, EXCEPTION> visitor) throws EXCEPTION;\n+\n+  void freeId(long id);\n+\n+  Predicate<AbstractBaseRecord> IN_USE = AbstractBaseRecord::inUse;\n+\n+  class Delegator<R extends AbstractBaseRecord> implements RecordStore<R>\n+  {\n+    private final RecordStore<R> actual;\n+\n+    @Override\n+    public void setHighestPossibleIdInUse(long highestIdInUse)\n+    {\n+      actual.setHighestPossibleIdInUse(highestIdInUse);\n+    }\n \n-        @Override\n-        public void getRecordByCursor( long id, R target, RecordLoad mode, PageCursor cursor ) throws InvalidRecordException\n-        {\n-            actual.getRecordByCursor( id, target, mode, cursor );\n-        }\n+    @Override\n+    public R newRecord()\n+    {\n+      return actual.newRecord();\n+    }\n \n-        @Override\n-        public Collection<R> getRecords( long firstId, RecordLoad mode ) throws InvalidRecordException\n-        {\n-            return actual.getRecords( firstId, mode );\n-        }\n+    @Override\n+    public R getRecord(long id, R target, RecordLoad mode) throws InvalidRecordException\n+    {\n+      return actual.getRecord(id, target, mode);\n+    }\n \n-        @Override\n-        public RecordCursor<R> newRecordCursor( R record )\n-        {\n-            return actual.newRecordCursor( record );\n-        }\n+    @Override\n+    public void getRecordByCursor(long id, R target, RecordLoad mode, PageCursor cursor) throws InvalidRecordException\n+    {\n+      actual.getRecordByCursor(id, target, mode, cursor);\n+    }\n \n-        @Override\n-        public long getNextRecordReference( R record )\n-        {\n-            return actual.getNextRecordReference( record );\n-        }\n+    @Override\n+    public Collection<R> getRecords(long firstId, RecordLoad mode) throws InvalidRecordException\n+    {\n+      return actual.getRecords(firstId, mode);\n+    }\n \n-        public Delegator( RecordStore<R> actual )\n-        {\n-            this.actual = actual;\n-        }\n+    @Override\n+    public RecordCursor<R> newRecordCursor(R record)\n+    {\n+      return actual.newRecordCursor(record);\n+    }\n \n-        @Override\n-        public long nextId()\n-        {\n-            return actual.nextId();\n-        }\n+    @Override\n+    public long getNextRecordReference(R record)\n+    {\n+      return actual.getNextRecordReference(record);\n+    }\n \n-        @Override\n-        public IdRange nextIdBatch( int size )\n-        {\n-            return actual.nextIdBatch( size );\n-        }\n+    public Delegator(RecordStore<R> actual)\n+    {\n+      this.actual = actual;\n+    }\n \n-        @Override\n-        public File getStorageFileName()\n-        {\n-            return actual.getStorageFileName();\n-        }\n+    @Override\n+    public long nextId()\n+    {\n+      return actual.nextId();\n+    }\n \n-        @Override\n-        public long getHighId()\n-        {\n-            return actual.getHighId();\n-        }\n+    @Override\n+    public IdRange nextIdBatch(int size)\n+    {\n+      return actual.nextIdBatch(size);\n+    }\n \n-        @Override\n-        public long getHighestPossibleIdInUse()\n-        {\n-            return actual.getHighestPossibleIdInUse();\n-        }\n+    @Override\n+    public File getStorageFileName()\n+    {\n+      return actual.getStorageFileName();\n+    }\n \n-        @Override\n-        public void updateRecord( R record )\n-        {\n-            actual.updateRecord( record );\n-        }\n+    @Override\n+    public long getHighId()\n+    {\n+      return actual.getHighId();\n+    }\n \n-        @Override\n-        public <FAILURE extends Exception> void accept( Processor<FAILURE> processor, R record ) throws FAILURE\n-        {\n-            actual.accept( processor, record );\n-        }\n+    @Override\n+    public long getHighestPossibleIdInUse()\n+    {\n+      return actual.getHighestPossibleIdInUse();\n+    }\n \n-        @Override\n-        public int getRecordSize()\n-        {\n-            return actual.getRecordSize();\n-        }\n+    @Override\n+    public void updateRecord(R record)\n+    {\n+      actual.updateRecord(record);\n+    }\n \n-        @Override\n-        public int getRecordDataSize()\n-        {\n-            return actual.getRecordDataSize();\n-        }\n+    @Override\n+    public <FAILURE extends Exception> void accept(Processor<FAILURE> processor, R record) throws FAILURE\n+    {\n+      actual.accept(processor, record);\n+    }\n \n-        @Override\n-        public int getRecordsPerPage()\n-        {\n-            return actual.getRecordsPerPage();\n-        }\n+    @Override\n+    public int getRecordSize()\n+    {\n+      return actual.getRecordSize();\n+    }\n \n-        @Override\n-        public int getStoreHeaderInt()\n-        {\n-            return actual.getStoreHeaderInt();\n-        }\n+    @Override\n+    public int getRecordDataSize()\n+    {\n+      return actual.getRecordDataSize();\n+    }\n \n-        @Override\n-        public void close()\n-        {\n-            actual.close();\n-        }\n+    @Override\n+    public int getRecordsPerPage()\n+    {\n+      return actual.getRecordsPerPage();\n+    }\n \n-        @Override\n-        public int getNumberOfReservedLowIds()\n-        {\n-            return actual.getNumberOfReservedLowIds();\n-        }\n+    @Override\n+    public int getStoreHeaderInt()\n+    {\n+      return actual.getStoreHeaderInt();\n+    }\n \n-        @Override\n-        public void flush()\n-        {\n-            actual.flush();\n-        }\n+    @Override\n+    public void close()\n+    {\n+      actual.close();\n+    }\n \n-        @Override\n-        public void ensureHeavy( R record )\n-        {\n-            actual.ensureHeavy( record );\n-        }\n+    @Override\n+    public int getNumberOfReservedLowIds()\n+    {\n+      return actual.getNumberOfReservedLowIds();\n+    }\n \n-        @Override\n-        public void prepareForCommit( R record )\n-        {\n-            actual.prepareForCommit( record );\n-        }\n+    @Override\n+    public void flush()\n+    {\n+      actual.flush();\n+    }\n \n-        @Override\n-        public void prepareForCommit( R record, IdSequence idSequence )\n-        {\n-            actual.prepareForCommit( record, idSequence );\n-        }\n+    @Override\n+    public void ensureHeavy(R record)\n+    {\n+      actual.ensureHeavy(record);\n+    }\n \n-        @Override\n-        public <EXCEPTION extends Exception> void scanAllRecords( Visitor<R,EXCEPTION> visitor ) throws EXCEPTION\n-        {\n-            actual.scanAllRecords( visitor );\n-        }\n+    @Override\n+    public void prepareForCommit(R record)\n+    {\n+      actual.prepareForCommit(record);\n+    }\n \n-        @Override\n-        public void freeId( long id )\n-        {\n-            actual.freeId( id );\n-        }\n+    @Override\n+    public void prepareForCommit(R record, IdSequence idSequence)\n+    {\n+      actual.prepareForCommit(record, idSequence);\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    abstract class Processor<FAILURE extends Exception>\n+    @Override\n+    public <EXCEPTION extends Exception> void scanAllRecords(Visitor<R, EXCEPTION> visitor) throws EXCEPTION\n     {\n-        // Have it volatile so that it can be stopped from a different thread.\n-        private volatile boolean shouldStop;\n+      actual.scanAllRecords(visitor);\n+    }\n \n-        public void stop()\n-        {\n-            shouldStop = true;\n-        }\n+    @Override\n+    public void freeId(long id)\n+    {\n+      actual.freeId(id);\n+    }\n+  }\n \n-        public abstract void processSchema( RecordStore<DynamicRecord> store, DynamicRecord schema ) throws FAILURE;\n+  @SuppressWarnings(\"unchecked\")\n+  abstract class Processor<FAILURE extends Exception>\n+  {\n+    // Have it volatile so that it can be stopped from a different thread.\n+    private volatile boolean shouldStop;\n \n-        public abstract void processNode( RecordStore<NodeRecord> store, NodeRecord node ) throws FAILURE;\n+    public void stop()\n+    {\n+      shouldStop = true;\n+    }\n \n-        public abstract void processRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel )\n-                throws FAILURE;\n+    public abstract void processSchema(RecordStore<DynamicRecord> store, DynamicRecord schema) throws FAILURE;\n \n-        public abstract void processProperty( RecordStore<PropertyRecord> store, PropertyRecord property ) throws\n-                FAILURE;\n+    public abstract void processNode(RecordStore<NodeRecord> store, NodeRecord node) throws FAILURE;\n \n-        public abstract void processString( RecordStore<DynamicRecord> store, DynamicRecord string, IdType idType )\n-                throws FAILURE;\n+    public abstract void processRelationship(RecordStore<RelationshipRecord> store, RelationshipRecord rel)\n+        throws FAILURE;\n \n-        public abstract void processArray( RecordStore<DynamicRecord> store, DynamicRecord array ) throws FAILURE;\n+    public abstract void processProperty(RecordStore<PropertyRecord> store, PropertyRecord property) throws\n+        FAILURE;\n \n-        public abstract void processLabelArrayWithOwner( RecordStore<DynamicRecord> store, DynamicRecord labelArray )\n-                throws FAILURE;\n+    public abstract void processString(RecordStore<DynamicRecord> store, DynamicRecord string, IdType idType)\n+        throws FAILURE;\n \n-        public abstract void processRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n-                RelationshipTypeTokenRecord record ) throws FAILURE;\n+    public abstract void processArray(RecordStore<DynamicRecord> store, DynamicRecord array) throws FAILURE;\n \n-        public abstract void processPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord\n-                record ) throws FAILURE;\n+    public abstract void processLabelArrayWithOwner(RecordStore<DynamicRecord> store, DynamicRecord labelArray)\n+        throws FAILURE;\n \n-        public abstract void processLabelToken( RecordStore<LabelTokenRecord> store, LabelTokenRecord record ) throws\n-                FAILURE;\n+    public abstract void processRelationshipTypeToken(RecordStore<RelationshipTypeTokenRecord> store,\n+                                                      RelationshipTypeTokenRecord record) throws FAILURE;\n \n-        public abstract void processRelationshipGroup( RecordStore<RelationshipGroupRecord> store,\n-                RelationshipGroupRecord record ) throws FAILURE;\n+    public abstract void processPropertyKeyToken(RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord\n+        record) throws FAILURE;\n \n-        protected <R extends AbstractBaseRecord> R getRecord( RecordStore<R> store, long id, R into )\n-        {\n-            store.getRecord( id, into, RecordLoad.FORCE );\n-            return into;\n-        }\n+    public abstract void processLabelToken(RecordStore<LabelTokenRecord> store, LabelTokenRecord record) throws\n+        FAILURE;\n \n-        public <R extends AbstractBaseRecord> void applyFiltered( RecordStore<R> store,\n-                Predicate<? super R>... filters ) throws FAILURE\n-        {\n-            apply( store, ProgressListener.NONE, filters );\n-        }\n+    public abstract void processRelationshipGroup(RecordStore<RelationshipGroupRecord> store,\n+                                                  RelationshipGroupRecord record) throws FAILURE;\n \n-        public <R extends AbstractBaseRecord> void applyFiltered( RecordStore<R> store,\n-                ProgressListener progressListener,\n-                Predicate<? super R>... filters ) throws FAILURE\n-        {\n-            apply( store, progressListener, filters );\n-        }\n+    protected <R extends AbstractBaseRecord> R getRecord(RecordStore<R> store, long id, R into)\n+    {\n+      store.getRecord(id, into, RecordLoad.FORCE);\n+      return into;\n+    }\n \n-        private <R extends AbstractBaseRecord> void apply( RecordStore<R> store, ProgressListener progressListener,\n-                Predicate<? super R>... filters ) throws FAILURE\n-        {\n-            ResourceIterable<R> iterable = Scanner.scan( store, true, filters );\n-            try ( ResourceIterator<R> scan = iterable.iterator() )\n-            {\n-                while ( scan.hasNext() )\n-                {\n-                    R record = scan.next();\n-                    if ( shouldStop )\n-                    {\n-                        break;\n-                    }\n-\n-                    store.accept( this, record );\n-                    progressListener.set( record.getId() );\n-                }\n-                progressListener.done();\n-            }\n-        }\n+    public <R extends AbstractBaseRecord> void applyFiltered(RecordStore<R> store,\n+                                                             Predicate<? super R>... filters) throws FAILURE\n+    {\n+      apply(store, ProgressListener.NONE, filters);\n     }\n \n-    /**\n-     * Utility methods for reading records. These are not on the interface itself since it should be\n-     * an explicit choice when to create the record instances passed into it.\n-     * Also for mocking purposes it's less confusing and error prone having only a single method.\n-     */\n-    static <R extends AbstractBaseRecord> R getRecord( RecordStore<R> store, long id, RecordLoad mode )\n+    public <R extends AbstractBaseRecord> void applyFiltered(RecordStore<R> store,\n+                                                             ProgressListener progressListener,\n+                                                             Predicate<? super R>... filters) throws FAILURE\n     {\n-        R record = store.newRecord();\n-        store.getRecord( id, record, mode );\n-        return record;\n+      apply(store, progressListener, filters);\n     }\n \n-    /**\n-     * Utility methods for reading records. These are not on the interface itself since it should be\n-     * an explicit choice when to create the record instances passed into it.\n-     * Also for mocking purposes it's less confusing and error prone having only a single method.\n-     */\n-    static <R extends AbstractBaseRecord> R getRecord( RecordStore<R> store, long id )\n+    private <R extends AbstractBaseRecord> void apply(RecordStore<R> store, ProgressListener progressListener,\n+                                                      Predicate<? super R>... filters) throws FAILURE\n     {\n-        return getRecord( store, id, RecordLoad.NORMAL );\n+      ResourceIterable<R> iterable = Scanner.scan(store, true, filters);\n+      try (ResourceIterator<R> scan = iterable.iterator())\n+      {\n+        while (scan.hasNext())\n+        {\n+          R record = scan.next();\n+          if (shouldStop)\n+          {\n+            break;\n+          }\n+\n+          store.accept(this, record);\n+          progressListener.set(record.getId());\n+        }\n+        progressListener.done();\n+      }\n     }\n+  }\n+\n+  /**\n+   * Utility methods for reading records. These are not on the interface itself since it should be\n+   * an explicit choice when to create the record instances passed into it.\n+   * Also for mocking purposes it's less confusing and error prone having only a single method.\n+   */\n+  static <R extends AbstractBaseRecord> R getRecord(RecordStore<R> store, long id, RecordLoad mode)\n+  {\n+    R record = store.newRecord();\n+    store.getRecord(id, record, mode);\n+    return record;\n+  }\n+\n+  /**\n+   * Utility methods for reading records. These are not on the interface itself since it should be\n+   * an explicit choice when to create the record instances passed into it.\n+   * Also for mocking purposes it's less confusing and error prone having only a single method.\n+   */\n+  static <R extends AbstractBaseRecord> R getRecord(RecordStore<R> store, long id)\n+  {\n+    return getRecord(store, id, RecordLoad.NORMAL);\n+  }\n }\n",
            "diff_size": 476
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "488",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1363/RecordStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1363/RecordStore.java\nindex 74275dced79..fac75300a98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1363/RecordStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1363/RecordStore.java\n@@ -448,54 +448,45 @@ public interface RecordStore<RECORD extends AbstractBaseRecord> extends IdSequen\n \n         public abstract void processNode( RecordStore<NodeRecord> store, NodeRecord node ) throws FAILURE;\n \n-        public abstract void processRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel )\n-                throws FAILURE;\n+        public abstract void processRelationship( RecordStore<RelationshipRecord> store, RelationshipRecord rel ) throws FAILURE;\n \n-        public abstract void processProperty( RecordStore<PropertyRecord> store, PropertyRecord property ) throws\n-                FAILURE;\n+public abstract void processProperty( RecordStore<PropertyRecord> store, PropertyRecord property ) throws FAILURE;\n \n-        public abstract void processString( RecordStore<DynamicRecord> store, DynamicRecord string, IdType idType )\n-                throws FAILURE;\n+public abstract void processString( RecordStore<DynamicRecord> store, DynamicRecord string, IdType idType ) throws FAILURE;\n \n-        public abstract void processArray( RecordStore<DynamicRecord> store, DynamicRecord array ) throws FAILURE;\n+public abstract void processArray( RecordStore<DynamicRecord> store, DynamicRecord array ) throws FAILURE;\n \n-        public abstract void processLabelArrayWithOwner( RecordStore<DynamicRecord> store, DynamicRecord labelArray )\n-                throws FAILURE;\n+        public abstract void processLabelArrayWithOwner( RecordStore<DynamicRecord> store, DynamicRecord labelArray ) throws FAILURE;\n \n-        public abstract void processRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n+public abstract void processRelationshipTypeToken( RecordStore<RelationshipTypeTokenRecord> store,\n                 RelationshipTypeTokenRecord record ) throws FAILURE;\n \n-        public abstract void processPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord\n-                record ) throws FAILURE;\n+public abstract void processPropertyKeyToken( RecordStore<PropertyKeyTokenRecord> store, PropertyKeyTokenRecord record ) throws FAILURE;\n \n-        public abstract void processLabelToken( RecordStore<LabelTokenRecord> store, LabelTokenRecord record ) throws\n-                FAILURE;\n+public abstract void processLabelToken( RecordStore<LabelTokenRecord> store, LabelTokenRecord record ) throws FAILURE;\n \n-        public abstract void processRelationshipGroup( RecordStore<RelationshipGroupRecord> store,\n+public abstract void processRelationshipGroup( RecordStore<RelationshipGroupRecord> store,\n                 RelationshipGroupRecord record ) throws FAILURE;\n \n-        protected <R extends AbstractBaseRecord> R getRecord( RecordStore<R> store, long id, R into )\n+protected <R extends AbstractBaseRecord> R getRecord( RecordStore<R> store, long id, R into )\n         {\n             store.getRecord( id, into, RecordLoad.FORCE );\n             return into;\n         }\n \n-        public <R extends AbstractBaseRecord> void applyFiltered( RecordStore<R> store,\n-                Predicate<? super R>... filters ) throws FAILURE\n-        {\n+        public <R extends AbstractBaseRecord> void applyFiltered( RecordStore<R> store, Predicate<? super R>... filters ) throws FAILURE\n+{\n             apply( store, ProgressListener.NONE, filters );\n         }\n \n         public <R extends AbstractBaseRecord> void applyFiltered( RecordStore<R> store,\n-                ProgressListener progressListener,\n-                Predicate<? super R>... filters ) throws FAILURE\n-        {\n+                ProgressListener progressListener, Predicate<? super R>... filters ) throws FAILURE\n+{\n             apply( store, progressListener, filters );\n         }\n \n-        private <R extends AbstractBaseRecord> void apply( RecordStore<R> store, ProgressListener progressListener,\n-                Predicate<? super R>... filters ) throws FAILURE\n-        {\n+        private <R extends AbstractBaseRecord> void apply( RecordStore<R> store, ProgressListener progressListener, Predicate<? super R>... filters ) throws FAILURE\n+{\n             ResourceIterable<R> iterable = Scanner.scan( store, true, filters );\n             try ( ResourceIterator<R> scan = iterable.iterator() )\n             {\n@@ -536,4 +527,4 @@ public interface RecordStore<RECORD extends AbstractBaseRecord> extends IdSequen\n     {\n         return getRecord( store, id, RecordLoad.NORMAL );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}