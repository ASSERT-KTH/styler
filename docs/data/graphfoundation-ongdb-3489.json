{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3489",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3489/DiagnosticsReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3489/DiagnosticsReporter.java\nindex 9c73d815a4b..72edec664ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3489/DiagnosticsReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3489/DiagnosticsReporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.diagnostics;\n \n import java.io.File;\n@@ -40,118 +41,117 @@ import org.neo4j.kernel.configuration.Config;\n \n public class DiagnosticsReporter\n {\n-    private final List<DiagnosticsOfflineReportProvider> providers = new ArrayList<>();\n-    private final Set<String> availableClassifiers = new TreeSet<>();\n-    private final Map<String,List<DiagnosticsReportSource>> additionalSources = new HashMap<>();\n-\n-    public void registerOfflineProvider( DiagnosticsOfflineReportProvider provider )\n+  private final List<DiagnosticsOfflineReportProvider> providers = new ArrayList<>();\n+  private final Set<String> availableClassifiers = new TreeSet<>();\n+  private final Map<String, List<DiagnosticsReportSource>> additionalSources = new HashMap<>();\n+\n+  public void registerOfflineProvider(DiagnosticsOfflineReportProvider provider)\n+  {\n+    providers.add(provider);\n+    availableClassifiers.addAll(provider.getFilterClassifiers());\n+  }\n+\n+  public void registerSource(String classifier, DiagnosticsReportSource source)\n+  {\n+    availableClassifiers.add(classifier);\n+    additionalSources.computeIfAbsent(classifier, c -> new ArrayList<>()).add(source);\n+  }\n+\n+  public void dump(Set<String> classifiers, Path destination, DiagnosticsReporterProgress progress, boolean force) throws IOException\n+  {\n+    // Collect sources\n+    List<DiagnosticsReportSource> sources = new ArrayList<>();\n+    for (DiagnosticsOfflineReportProvider provider : providers)\n     {\n-        providers.add( provider );\n-        availableClassifiers.addAll( provider.getFilterClassifiers() );\n+      sources.addAll(provider.getDiagnosticsSources(classifiers));\n     }\n \n-    public void registerSource( String classifier, DiagnosticsReportSource source )\n+    // Add additional sources\n+    for (Map.Entry<String, List<DiagnosticsReportSource>> classifier : additionalSources.entrySet())\n     {\n-        availableClassifiers.add( classifier );\n-        additionalSources.computeIfAbsent( classifier, c -> new ArrayList<>() ).add( source );\n+      if (classifiers.contains(\"all\") || classifiers.contains(classifier.getKey()))\n+      {\n+        sources.addAll(classifier.getValue());\n+      }\n     }\n \n-    public void dump( Set<String> classifiers, Path destination, DiagnosticsReporterProgress progress, boolean force ) throws IOException\n-    {\n-        // Collect sources\n-        List<DiagnosticsReportSource> sources = new ArrayList<>();\n-        for ( DiagnosticsOfflineReportProvider provider : providers )\n-        {\n-            sources.addAll( provider.getDiagnosticsSources( classifiers ) );\n-        }\n-\n-        // Add additional sources\n-        for ( Map.Entry<String,List<DiagnosticsReportSource>> classifier : additionalSources.entrySet() )\n-        {\n-            if ( classifiers.contains( \"all\" ) || classifiers.contains( classifier.getKey() ) )\n-            {\n-                sources.addAll( classifier.getValue() );\n-            }\n-        }\n-\n-        // Make sure target directory exists\n-        Path destinationFolder = destination.getParent();\n-        Files.createDirectories( destinationFolder );\n+    // Make sure target directory exists\n+    Path destinationFolder = destination.getParent();\n+    Files.createDirectories(destinationFolder);\n \n-        // Estimate an upper bound of the final size and make sure it will fit, if not, end reporting\n-        estimateSizeAndCheckAvailableDiskSpace( destination, progress, sources, destinationFolder, force );\n+    // Estimate an upper bound of the final size and make sure it will fit, if not, end reporting\n+    estimateSizeAndCheckAvailableDiskSpace(destination, progress, sources, destinationFolder, force);\n \n-        // Compress all files to destination\n-        Map<String, Object> env = new HashMap<>();\n-        env.put( \"create\", \"true\" );\n-        env.put( \"useTempFile\", Boolean.TRUE );\n+    // Compress all files to destination\n+    Map<String, Object> env = new HashMap<>();\n+    env.put(\"create\", \"true\");\n+    env.put(\"useTempFile\", Boolean.TRUE);\n \n-        // NOTE: we need the toUri() in order to handle windows file paths\n-        URI uri = URI.create(\"jar:file:\" + destination.toAbsolutePath().toUri().getRawPath() );\n-\n-        try ( FileSystem fs = FileSystems.newFileSystem( uri, env ) )\n-        {\n-            progress.setTotalSteps( sources.size() );\n-            for ( int i = 0; i < sources.size(); i++ )\n-            {\n-                DiagnosticsReportSource source = sources.get( i );\n-                Path path = fs.getPath( source.destinationPath() );\n-                if ( path.getParent() != null )\n-                {\n-                    Files.createDirectories( path.getParent() );\n-                }\n-\n-                progress.started( i + 1, path.toString() );\n-                try\n-                {\n-                    source.addToArchive( path, progress );\n-                }\n-                catch ( Throwable e )\n-                {\n-                    progress.error( \"Step failed\", e );\n-                    continue;\n-                }\n-                progress.finished();\n-            }\n-        }\n-    }\n+    // NOTE: we need the toUri() in order to handle windows file paths\n+    URI uri = URI.create(\"jar:file:\" + destination.toAbsolutePath().toUri().getRawPath());\n \n-    private void estimateSizeAndCheckAvailableDiskSpace( Path destination,\n-            DiagnosticsReporterProgress progress, List<DiagnosticsReportSource> sources,\n-            Path destinationFolder, boolean force ) throws IOException\n+    try (FileSystem fs = FileSystems.newFileSystem(uri, env))\n     {\n-        if ( force )\n+      progress.setTotalSteps(sources.size());\n+      for (int i = 0; i < sources.size(); i++)\n+      {\n+        DiagnosticsReportSource source = sources.get(i);\n+        Path path = fs.getPath(source.destinationPath());\n+        if (path.getParent() != null)\n         {\n-            return;\n+          Files.createDirectories(path.getParent());\n         }\n \n-        long estimatedFinalSize = 0;\n-        for ( DiagnosticsReportSource source  : sources )\n+        progress.started(i + 1, path.toString());\n+        try\n         {\n-            estimatedFinalSize += source.estimatedSize( progress );\n-        }\n-\n-        long freeSpace = destinationFolder.toFile().getFreeSpace();\n-        if ( estimatedFinalSize > freeSpace )\n+          source.addToArchive(path, progress);\n+        } catch (Throwable e)\n         {\n-            String message = String.format(\n-                    \"Free available disk space for %s is %s, worst case estimate is %s. To ignore add '--force' to the command.\",\n-                    destination.getFileName(), Format.bytes( freeSpace ), Format.bytes( estimatedFinalSize ) );\n-            throw new RuntimeException( message );\n+          progress.error(\"Step failed\", e);\n+          continue;\n         }\n+        progress.finished();\n+      }\n     }\n+  }\n \n-    public Set<String> getAvailableClassifiers()\n+  private void estimateSizeAndCheckAvailableDiskSpace(Path destination,\n+                                                      DiagnosticsReporterProgress progress, List<DiagnosticsReportSource> sources,\n+                                                      Path destinationFolder, boolean force) throws IOException\n+  {\n+    if (force)\n     {\n-        return availableClassifiers;\n+      return;\n     }\n \n-    public void registerAllOfflineProviders( Config config, File storeDirectory, FileSystemAbstraction fs )\n+    long estimatedFinalSize = 0;\n+    for (DiagnosticsReportSource source : sources)\n     {\n-        for ( DiagnosticsOfflineReportProvider provider : Service.load( DiagnosticsOfflineReportProvider.class ) )\n-        {\n-            provider.init( fs, config, storeDirectory );\n-            registerOfflineProvider( provider );\n-        }\n+      estimatedFinalSize += source.estimatedSize(progress);\n+    }\n+\n+    long freeSpace = destinationFolder.toFile().getFreeSpace();\n+    if (estimatedFinalSize > freeSpace)\n+    {\n+      String message = String.format(\n+          \"Free available disk space for %s is %s, worst case estimate is %s. To ignore add '--force' to the command.\",\n+          destination.getFileName(), Format.bytes(freeSpace), Format.bytes(estimatedFinalSize));\n+      throw new RuntimeException(message);\n+    }\n+  }\n+\n+  public Set<String> getAvailableClassifiers()\n+  {\n+    return availableClassifiers;\n+  }\n+\n+  public void registerAllOfflineProviders(Config config, File storeDirectory, FileSystemAbstraction fs)\n+  {\n+    for (DiagnosticsOfflineReportProvider provider : Service.load(DiagnosticsOfflineReportProvider.class))\n+    {\n+      provider.init(fs, config, storeDirectory);\n+      registerOfflineProvider(provider);\n     }\n+  }\n }\n",
            "diff_size": 143
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "135",
                    "column": "32",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3489/DiagnosticsReporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3489/DiagnosticsReporter.java\nindex 9c73d815a4b..2ab7f6b6b6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3489/DiagnosticsReporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3489/DiagnosticsReporter.java\n@@ -82,12 +82,12 @@ public class DiagnosticsReporter\n         estimateSizeAndCheckAvailableDiskSpace( destination, progress, sources, destinationFolder, force );\n \n         // Compress all files to destination\n-        Map<String, Object> env = new HashMap<>();\n+        Map<String,Object> env = new HashMap<>();\n         env.put( \"create\", \"true\" );\n         env.put( \"useTempFile\", Boolean.TRUE );\n \n         // NOTE: we need the toUri() in order to handle windows file paths\n-        URI uri = URI.create(\"jar:file:\" + destination.toAbsolutePath().toUri().getRawPath() );\n+        URI uri = URI.create( \"jar:file:\" + destination.toAbsolutePath().toUri().getRawPath() );\n \n         try ( FileSystem fs = FileSystems.newFileSystem( uri, env ) )\n         {\n@@ -119,25 +119,24 @@ public class DiagnosticsReporter\n     private void estimateSizeAndCheckAvailableDiskSpace( Path destination,\n             DiagnosticsReporterProgress progress, List<DiagnosticsReportSource> sources,\n             Path destinationFolder, boolean force ) throws IOException\n-    {\n+{\n         if ( force )\n         {\n             return;\n         }\n \n         long estimatedFinalSize = 0;\n-        for ( DiagnosticsReportSource source  : sources )\n+        for ( DiagnosticsReportSource source: sources )\n         {\n             estimatedFinalSize += source.estimatedSize( progress );\n         }\n \n         long freeSpace = destinationFolder.toFile().getFreeSpace();\n-        if ( estimatedFinalSize > freeSpace )\n+        if ( estimatedFinalSize> freeSpace )\n         {\n-            String message = String.format(\n-                    \"Free available disk space for %s is %s, worst case estimate is %s. To ignore add '--force' to the command.\",\n+            String message = String.format( \"Free available disk space for %s is %s, worst case estimate is %s. To ignore add '--force' to the command.\",\n                     destination.getFileName(), Format.bytes( freeSpace ), Format.bytes( estimatedFinalSize ) );\n-            throw new RuntimeException( message );\n+    throw new RuntimeException( message );\n         }\n     }\n \n@@ -154,4 +153,4 @@ public class DiagnosticsReporter\n             registerOfflineProvider( provider );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}