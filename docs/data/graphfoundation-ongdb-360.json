{
    "project_name": "graphfoundation-ongdb",
    "error_id": "360",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/360/HighAvailabilityDiagnostics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/360/HighAvailabilityDiagnostics.java\nindex 4b3c7b207a6..ec1155d791a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/360/HighAvailabilityDiagnostics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/360/HighAvailabilityDiagnostics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha;\n \n import org.neo4j.cluster.client.ClusterClient;\n@@ -29,39 +30,39 @@ import org.neo4j.logging.Logger;\n  * TODO\n  */\n public class HighAvailabilityDiagnostics\n-        implements DiagnosticsProvider\n+    implements DiagnosticsProvider\n {\n-    private final HighAvailabilityMemberStateMachine memberStateMachine;\n-    private final ClusterClient clusterClient;\n+  private final HighAvailabilityMemberStateMachine memberStateMachine;\n+  private final ClusterClient clusterClient;\n \n-    public HighAvailabilityDiagnostics( HighAvailabilityMemberStateMachine memberStateMachine,\n-                                        ClusterClient clusterClient )\n-    {\n-        this.memberStateMachine = memberStateMachine;\n-        this.clusterClient = clusterClient;\n-    }\n+  public HighAvailabilityDiagnostics(HighAvailabilityMemberStateMachine memberStateMachine,\n+                                     ClusterClient clusterClient)\n+  {\n+    this.memberStateMachine = memberStateMachine;\n+    this.clusterClient = clusterClient;\n+  }\n \n-    @Override\n-    public String getDiagnosticsIdentifier()\n-    {\n-        return getClass().getSimpleName();\n-    }\n+  @Override\n+  public String getDiagnosticsIdentifier()\n+  {\n+    return getClass().getSimpleName();\n+  }\n \n-    @Override\n-    public void acceptDiagnosticsVisitor( Object visitor )\n-    {\n-    }\n+  @Override\n+  public void acceptDiagnosticsVisitor(Object visitor)\n+  {\n+  }\n \n-    @Override\n-    public void dump( DiagnosticsPhase phase, Logger logger )\n-    {\n-        StringBuilder builder = new StringBuilder();\n+  @Override\n+  public void dump(DiagnosticsPhase phase, Logger logger)\n+  {\n+    StringBuilder builder = new StringBuilder();\n \n-        builder.append( \"High Availability diagnostics\\n\" ).\n-                append( \"Member state:\" ).append( memberStateMachine.getCurrentState().name() ).append( \"\\n\" ).\n-                append( \"State machines:\\n\" );\n+    builder.append(\"High Availability diagnostics\\n\").\n+        append(\"Member state:\").append(memberStateMachine.getCurrentState().name()).append(\"\\n\").\n+        append(\"State machines:\\n\");\n \n-        clusterClient.dumpDiagnostics( builder );\n-        logger.log( builder.toString() );\n-    }\n+    clusterClient.dumpDiagnostics(builder);\n+    logger.log(builder.toString());\n+  }\n }\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/360/HighAvailabilityDiagnostics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/360/HighAvailabilityDiagnostics.java\nindex 4b3c7b207a6..51a56d5fec3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/360/HighAvailabilityDiagnostics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/360/HighAvailabilityDiagnostics.java\n@@ -28,15 +28,13 @@ import org.neo4j.logging.Logger;\n /**\n  * TODO\n  */\n-public class HighAvailabilityDiagnostics\n-        implements DiagnosticsProvider\n+public class HighAvailabilityDiagnostics implements DiagnosticsProvider\n {\n     private final HighAvailabilityMemberStateMachine memberStateMachine;\n     private final ClusterClient clusterClient;\n \n-    public HighAvailabilityDiagnostics( HighAvailabilityMemberStateMachine memberStateMachine,\n-                                        ClusterClient clusterClient )\n-    {\n+    public HighAvailabilityDiagnostics( HighAvailabilityMemberStateMachine memberStateMachine, ClusterClient clusterClient )\n+{\n         this.memberStateMachine = memberStateMachine;\n         this.clusterClient = clusterClient;\n     }\n@@ -56,12 +54,8 @@ public class HighAvailabilityDiagnostics\n     public void dump( DiagnosticsPhase phase, Logger logger )\n     {\n         StringBuilder builder = new StringBuilder();\n-\n-        builder.append( \"High Availability diagnostics\\n\" ).\n-                append( \"Member state:\" ).append( memberStateMachine.getCurrentState().name() ).append( \"\\n\" ).\n-                append( \"State machines:\\n\" );\n-\n-        clusterClient.dumpDiagnostics( builder );\n+builder.append( \"High Availability diagnostics\\n\" ).append( \"Member state:\" ).append( memberStateMachine.getCurrentState().name() ).append( \"\\n\" ).append( \"State machines:\\n\" );\n+clusterClient.dumpDiagnostics( builder );\n         logger.log( builder.toString() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}