{
    "project_name": "h2database-h2database",
    "error_id": "154",
    "information": {
        "errors": [
            {
                "line": "258",
                "column": "13",
                "severity": "warning",
                "message": "'{' at column 13 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "            ArrayList<Column> foundCols = allColumnsSet.get(getTable());\n            if (foundCols != null)\n            {\n                for (Column c : foundCols) {\n                    boolean found = false;\n                    for (Column c2 : columns) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/154/BaseIndex.java\nindex 5738e3b2bb8..8ba3ea40d30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/154/BaseIndex.java\n@@ -254,8 +254,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         if (!isScanIndex && allColumnsSet != null) {\n             boolean foundAllColumnsWeNeed = true;\n             ArrayList<Column> foundCols = allColumnsSet.get(getTable());\n-            if (foundCols != null)\n-            {\n+            if (foundCols != null) {\n                 for (Column c : foundCols) {\n                     boolean found = false;\n                     for (Column c2 : columns) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/154/BaseIndex.java\nindex 5738e3b2bb8..aa89d7c257f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/154/BaseIndex.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.index;\n \n import java.util.ArrayList;\n@@ -41,15 +42,15 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n     /**\n      * Initialize the base index.\n      *\n-     * @param newTable the table\n-     * @param id the object id\n-     * @param name the index name\n+     * @param newTable        the table\n+     * @param id              the object id\n+     * @param name            the index name\n      * @param newIndexColumns the columns that are indexed or null if this is\n-     *            not yet known\n-     * @param newIndexType the index type\n+     *                        not yet known\n+     * @param newIndexType    the index type\n      */\n     protected BaseIndex(Table newTable, int id, String name,\n-            IndexColumn[] newIndexColumns, IndexType newIndexType) {\n+                        IndexColumn[] newIndexColumns, IndexType newIndexType) {\n         super(newTable.getSchema(), id, name, Trace.INDEX);\n         this.indexType = newIndexType;\n         this.table = newTable;\n@@ -105,7 +106,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         if (key != null) {\n             builder.append(\" VALUES \").append(key);\n         }\n-        DbException e = DbException.get(ErrorCode.DUPLICATE_KEY_1, builder.toString());\n+        DbException e =\n+                DbException.get(ErrorCode.DUPLICATE_KEY_1, builder.toString());\n         e.setSource(this);\n         return e;\n     }\n@@ -121,7 +123,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         table.getSQL(builder, TRACE_SQL_FLAGS);\n         if (mainIndexColumn >= 0 && mainIndexColumn < indexColumns.length) {\n             builder.append('(');\n-            indexColumns[mainIndexColumn].getSQL(builder, TRACE_SQL_FLAGS).append(')');\n+            indexColumns[mainIndexColumn].getSQL(builder, TRACE_SQL_FLAGS)\n+                    .append(')');\n         }\n         return builder;\n     }\n@@ -138,19 +141,21 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * b-tree range index. This is the estimated cost required to search one\n      * row, and then iterate over the given number of rows.\n      *\n-     * @param masks the IndexCondition search masks, one for each column in the\n-     *            table\n-     * @param rowCount the number of rows in the index\n-     * @param filters all joined table filters\n-     * @param filter the current table filter index\n-     * @param sortOrder the sort order\n-     * @param isScanIndex whether this is a \"table scan\" index\n+     * @param masks         the IndexCondition search masks, one for each column in the\n+     *                      table\n+     * @param rowCount      the number of rows in the index\n+     * @param filters       all joined table filters\n+     * @param filter        the current table filter index\n+     * @param sortOrder     the sort order\n+     * @param isScanIndex   whether this is a \"table scan\" index\n      * @param allColumnsSet the set of all columns\n      * @return the estimated cost\n      */\n     protected final long getCostRangeIndex(int[] masks, long rowCount,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            boolean isScanIndex, AllColumnsForPlan allColumnsSet) {\n+                                           TableFilter[] filters, int filter,\n+                                           SortOrder sortOrder,\n+                                           boolean isScanIndex,\n+                                           AllColumnsForPlan allColumnsSet) {\n         rowCount += Constants.COST_ROW_OFFSET;\n         int totalSelectivity = 0;\n         long rowsCost = rowCount;\n@@ -161,7 +166,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n                 Column column = columns[i++];\n                 int index = column.getColumnId();\n                 int mask = masks[index];\n-                if ((mask & IndexCondition.EQUALITY) == IndexCondition.EQUALITY) {\n+                if ((mask & IndexCondition.EQUALITY) ==\n+                        IndexCondition.EQUALITY) {\n                     if (i == len && getIndexType().isUnique()) {\n                         rowsCost = 3;\n                         break;\n@@ -173,11 +179,13 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n                         distinctRows = 1;\n                     }\n                     rowsCost = 2 + Math.max(rowCount / distinctRows, 1);\n-                } else if ((mask & IndexCondition.RANGE) == IndexCondition.RANGE) {\n+                } else if ((mask & IndexCondition.RANGE) ==\n+                        IndexCondition.RANGE) {\n                     rowsCost = 2 + rowsCost / 4;\n                     tryAdditional = true;\n                     break;\n-                } else if ((mask & IndexCondition.START) == IndexCondition.START) {\n+                } else if ((mask & IndexCondition.START) ==\n+                        IndexCondition.START) {\n                     rowsCost = 2 + rowsCost / 3;\n                     tryAdditional = true;\n                     break;\n@@ -254,8 +262,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         if (!isScanIndex && allColumnsSet != null) {\n             boolean foundAllColumnsWeNeed = true;\n             ArrayList<Column> foundCols = allColumnsSet.get(getTable());\n-            if (foundCols != null)\n-            {\n+            if (foundCols != null) {\n                 for (Column c : foundCols) {\n                     boolean found = false;\n                     for (Column c2 : columns) {\n@@ -316,29 +323,28 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * current compatibility mode. Duplicates with {@code NULL} values are\n      * allowed in some modes.\n      *\n-     * @param searchRow\n-     *            the row to check\n+     * @param searchRow the row to check\n      * @return {@code true} if specified row may have duplicates,\n-     *         {@code false otherwise}\n+     * {@code false otherwise}\n      */\n     public boolean mayHaveNullDuplicates(SearchRow searchRow) {\n         switch (database.getMode().uniqueIndexNullsHandling) {\n-        case ALLOW_DUPLICATES_WITH_ANY_NULL:\n-            for (int index : columnIds) {\n-                if (searchRow.getValue(index) == ValueNull.INSTANCE) {\n-                    return true;\n+            case ALLOW_DUPLICATES_WITH_ANY_NULL:\n+                for (int index : columnIds) {\n+                    if (searchRow.getValue(index) == ValueNull.INSTANCE) {\n+                        return true;\n+                    }\n                 }\n-            }\n-            return false;\n-        case ALLOW_DUPLICATES_WITH_ALL_NULLS:\n-            for (int index : columnIds) {\n-                if (searchRow.getValue(index) != ValueNull.INSTANCE) {\n-                    return false;\n+                return false;\n+            case ALLOW_DUPLICATES_WITH_ALL_NULLS:\n+                for (int index : columnIds) {\n+                    if (searchRow.getValue(index) != ValueNull.INSTANCE) {\n+                        return false;\n+                    }\n                 }\n-            }\n-            return true;\n-        default:\n-            return false;\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -348,7 +354,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @param rowData the first row\n      * @param compare the second row\n      * @return 0 if both rows are equal, -1 if the first row is smaller,\n-     *         otherwise 1\n+     * otherwise 1\n      */\n     public int compareKeys(SearchRow rowData, SearchRow compare) {\n         long k1 = rowData.getKey();\n@@ -397,7 +403,9 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @return the list of columns\n      */\n     private String getColumnListSQL(int sqlFlags) {\n-        return IndexColumn.writeColumns(new StringBuilder(), indexColumns, sqlFlags).toString();\n+        return IndexColumn\n+                .writeColumns(new StringBuilder(), indexColumns, sqlFlags)\n+                .toString();\n     }\n \n     @Override\n@@ -415,7 +423,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n             buff.append(\" COMMENT \");\n             StringUtils.quoteStringSQL(buff, comment);\n         }\n-        buff.append('(').append(getColumnListSQL(DEFAULT_SQL_FLAGS)).append(')');\n+        buff.append('(').append(getColumnListSQL(DEFAULT_SQL_FLAGS))\n+                .append(')');\n         return buff.toString();\n     }\n \n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/154/BaseIndex.java\nindex 5738e3b2bb8..948702fc1b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/154/BaseIndex.java\n@@ -254,8 +254,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         if (!isScanIndex && allColumnsSet != null) {\n             boolean foundAllColumnsWeNeed = true;\n             ArrayList<Column> foundCols = allColumnsSet.get(getTable());\n-            if (foundCols != null)\n-            {\n+            if (foundCols != null) {\n                 for (Column c : foundCols) {\n                     boolean found = false;\n                     for (Column c2 : columns) {\n@@ -453,4 +452,4 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n     public boolean isHidden() {\n         return table.isHidden();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/154/BaseIndex.java\nindex 5738e3b2bb8..71ac463fe4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/154/BaseIndex.java\n@@ -29,12 +29,23 @@ import org.h2.value.ValueNull;\n /**\n  * Most index implementations extend the base index.\n  */\n+\n+\n public abstract class BaseIndex extends SchemaObjectBase implements Index {\n \n+\n     protected IndexColumn[] indexColumns;\n+\n+\n     protected Column[] columns;\n+\n+\n     protected int[] columnIds;\n+\n+\n     protected final Table table;\n+\n+\n     protected final IndexType indexType;\n     private final RowFactory rowFactory;\n \n@@ -48,8 +59,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      *            not yet known\n      * @param newIndexType the index type\n      */\n-    protected BaseIndex(Table newTable, int id, String name,\n-            IndexColumn[] newIndexColumns, IndexType newIndexType) {\n+\n+    protected BaseIndex(Table newTable, int id, String name, IndexColumn[] newIndexColumns, IndexType newIndexType) {\n         super(newTable.getSchema(), id, name, Trace.INDEX);\n         this.indexType = newIndexType;\n         this.table = newTable;\n@@ -64,10 +75,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n                 columnIds[i] = col.getColumnId();\n             }\n         }\n-        rowFactory = database.getRowFactory().createRowFactory(\n-                database, database.getCompareMode(), database.getMode(),\n-                database, table.getColumns(),\n-                newIndexType.isScan() ? null : newIndexColumns);\n+        rowFactory = database.getRowFactory().createRowFactory(database, database.getCompareMode(), database.getMode(), database, table.getColumns(), newIndexType.isScan() ? null : newIndexColumns);\n     }\n \n     @Override\n@@ -80,11 +88,12 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      *\n      * @param columns the columns\n      */\n+\n+\n     protected static void checkIndexColumnTypes(IndexColumn[] columns) {\n         for (IndexColumn c : columns) {\n             if (!DataType.isIndexable(c.column.getType())) {\n-                throw DbException.getUnsupportedException(\n-                        \"Index on column: \" + c.column.getCreateSQL());\n+                throw DbException.getUnsupportedException(\"Index on column: \" + c.column.getCreateSQL());\n             }\n         }\n     }\n@@ -96,6 +105,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @param key the key values\n      * @return the exception\n      */\n+\n+\n     public DbException getDuplicateKeyException(String key) {\n         StringBuilder builder = new StringBuilder();\n         getSQL(builder, TRACE_SQL_FLAGS).append(\" ON \");\n@@ -116,6 +127,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @param mainIndexColumn the column index\n      * @return the message\n      */\n+\n+\n     protected StringBuilder getDuplicatePrimaryKeyMessage(int mainIndexColumn) {\n         StringBuilder builder = new StringBuilder(\"PRIMARY KEY ON \");\n         table.getSQL(builder, TRACE_SQL_FLAGS);\n@@ -148,9 +161,9 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @param allColumnsSet the set of all columns\n      * @return the estimated cost\n      */\n-    protected final long getCostRangeIndex(int[] masks, long rowCount,\n-            TableFilter[] filters, int filter, SortOrder sortOrder,\n-            boolean isScanIndex, AllColumnsForPlan allColumnsSet) {\n+\n+\n+    protected final long getCostRangeIndex(int[] masks, long rowCount, TableFilter[] filters, int filter, SortOrder sortOrder, boolean isScanIndex, AllColumnsForPlan allColumnsSet) {\n         rowCount += Constants.COST_ROW_OFFSET;\n         int totalSelectivity = 0;\n         long rowsCost = rowCount;\n@@ -166,8 +179,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n                         rowsCost = 3;\n                         break;\n                     }\n-                    totalSelectivity = 100 - ((100 - totalSelectivity) *\n-                            (100 - column.getSelectivity()) / 100);\n+                    totalSelectivity = 100 - ((100 - totalSelectivity) * (100 - column.getSelectivity()) / 100);\n                     long distinctRows = rowCount * totalSelectivity / 100;\n                     if (distinctRows <= 0) {\n                         distinctRows = 1;\n@@ -177,21 +189,21 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n                     rowsCost = 2 + rowsCost / 4;\n                     tryAdditional = true;\n                     break;\n-                } else if ((mask & IndexCondition.START) == IndexCondition.START) {\n-                    rowsCost = 2 + rowsCost / 3;\n-                    tryAdditional = true;\n-                    break;\n+                            } else if ((mask & IndexCondition.START) == IndexCondition.START) {\n+                           rowsCost = 2 + rowsCost / 3;\n+                           tryAdditional = true;\n+                           break;\n                 } else if ((mask & IndexCondition.END) == IndexCondition.END) {\n-                    rowsCost = rowsCost / 3;\n-                    tryAdditional = true;\n-                    break;\n+                                       rowsCost = rowsCost / 3;\n+                                       tryAdditional = true;\n+                                       break;\n                 } else {\n-                    if (mask == 0) {\n+                                       if (mask == 0) {\n                         // Adjust counter of used columns (i)\n-                        i--;\n-                    }\n-                    break;\n-                }\n+                                           i--;\n+                                       }\n+                                       break;\n+                                   }\n             }\n             // Some additional columns can still be used\n             if (tryAdditional) {\n@@ -254,8 +266,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         if (!isScanIndex && allColumnsSet != null) {\n             boolean foundAllColumnsWeNeed = true;\n             ArrayList<Column> foundCols = allColumnsSet.get(getTable());\n-            if (foundCols != null)\n-            {\n+            if (foundCols != null) {\n                 for (Column c : foundCols) {\n                     boolean found = false;\n                     for (Column c2 : columns) {\n@@ -279,7 +290,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n             rc = rowsCost + sortingCost + 20;\n         } else if (needsToReadFromScanIndex) {\n             rc = rowsCost + rowsCost + sortingCost + 20;\n-        } else {\n+                                                                                                                                                                                     } else {\n             // The (20-x) calculation makes sure that when we pick a covering\n             // index, we pick the covering index that has the smallest number of\n             // columns (the more columns we have in index - the higher cost).\n@@ -321,6 +332,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @return {@code true} if specified row may have duplicates,\n      *         {@code false otherwise}\n      */\n+\n+\n     public boolean mayHaveNullDuplicates(SearchRow searchRow) {\n         switch (database.getMode().uniqueIndexNullsHandling) {\n         case ALLOW_DUPLICATES_WITH_ANY_NULL:\n@@ -350,6 +363,8 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @return 0 if both rows are equal, -1 if the first row is smaller,\n      *         otherwise 1\n      */\n+\n+\n     public int compareKeys(SearchRow rowData, SearchRow compare) {\n         long k1 = rowData.getKey();\n         long k2 = compare.getKey();\n@@ -396,6 +411,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n      * @param sqlFlags formatting flags\n      * @return the list of columns\n      */\n+\n     private String getColumnListSQL(int sqlFlags) {\n         return IndexColumn.writeColumns(new StringBuilder(), indexColumns, sqlFlags).toString();\n     }\n@@ -453,4 +469,5 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n     public boolean isHidden() {\n         return table.isHidden();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/154/BaseIndex.java\nindex 5738e3b2bb8..8ba3ea40d30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/154/BaseIndex.java\n@@ -254,8 +254,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         if (!isScanIndex && allColumnsSet != null) {\n             boolean foundAllColumnsWeNeed = true;\n             ArrayList<Column> foundCols = allColumnsSet.get(getTable());\n-            if (foundCols != null)\n-            {\n+            if (foundCols != null) {\n                 for (Column c : foundCols) {\n                     boolean found = false;\n                     for (Column c2 : columns) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/154/BaseIndex.java\nindex 5738e3b2bb8..8ba3ea40d30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/154/BaseIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/154/BaseIndex.java\n@@ -254,8 +254,7 @@ public abstract class BaseIndex extends SchemaObjectBase implements Index {\n         if (!isScanIndex && allColumnsSet != null) {\n             boolean foundAllColumnsWeNeed = true;\n             ArrayList<Column> foundCols = allColumnsSet.get(getTable());\n-            if (foundCols != null)\n-            {\n+            if (foundCols != null) {\n                 for (Column c : foundCols) {\n                     boolean found = false;\n                     for (Column c2 : columns) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}