{
    "project_name": "apache-ignite-3",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "30",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "{\n    private final BytecodeExpression value;\n    private final OpCode negateOpCode;\n\n    NegateBytecodeExpression(BytecodeExpression value)\n    {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/69/NegateBytecodeExpression.java\nindex f1873c5cf10..d211b7689c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/69/NegateBytecodeExpression.java\n@@ -27,6 +27,7 @@ class NegateBytecodeExpression\n         extends BytecodeExpression\n {\n     private final BytecodeExpression value;\n+\n     private final OpCode negateOpCode;\n \n     NegateBytecodeExpression(BytecodeExpression value)\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/69/NegateBytecodeExpression.java\nindex f1873c5cf10..1e0eccbfa27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/69/NegateBytecodeExpression.java\n@@ -11,6 +11,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.facebook.presto.bytecode.expression;\n \n import com.facebook.presto.bytecode.BytecodeBlock;\n@@ -24,43 +25,39 @@ import static com.facebook.presto.bytecode.expression.ArithmeticBytecodeExpressi\n import static java.util.Objects.requireNonNull;\n \n class NegateBytecodeExpression\n-        extends BytecodeExpression\n-{\n-    private final BytecodeExpression value;\n-    private final OpCode negateOpCode;\n-\n-    NegateBytecodeExpression(BytecodeExpression value)\n-    {\n-        super(requireNonNull(value, \"value is null\").getType());\n-        this.value = value;\n-\n-        Class<?> type = value.getType().getPrimitiveType();\n-        checkArgument(type != null, \"value is not a primitive\");\n-        checkArgument(type != void.class, \"value is void\");\n-        checkArgument(type == int.class || type == long.class || type == float.class || type == double.class,\n-                \"value argument must be int, long, float, or double, but is %s\",\n-                type);\n-\n-        negateOpCode = getNumericOpCode(\"Negate\", OpCode.INEG, type);\n-    }\n-\n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext)\n-    {\n-        return new BytecodeBlock()\n-                .append(value)\n-                .append(negateOpCode);\n-    }\n-\n-    @Override\n-    public List<BytecodeNode> getChildNodes()\n-    {\n-        return List.of(value);\n-    }\n-\n-    @Override\n-    protected String formatOneLine()\n-    {\n-        return \"-(\" + value + \")\";\n-    }\n+    extends BytecodeExpression {\n+  private final BytecodeExpression value;\n+\n+  private final OpCode negateOpCode;\n+\n+  NegateBytecodeExpression(BytecodeExpression value) {\n+    super(requireNonNull(value, \"value is null\").getType());\n+    this.value = value;\n+\n+    Class<?> type = value.getType().getPrimitiveType();\n+    checkArgument(type != null, \"value is not a primitive\");\n+    checkArgument(type != void.class, \"value is void\");\n+    checkArgument(type == int.class || type == long.class || type == float.class || type == double.class,\n+        \"value argument must be int, long, float, or double, but is %s\",\n+        type);\n+\n+    negateOpCode = getNumericOpCode(\"Negate\", OpCode.INEG, type);\n+  }\n+\n+  @Override\n+  public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+    return new BytecodeBlock()\n+        .append(value)\n+        .append(negateOpCode);\n+  }\n+\n+  @Override\n+  public List<BytecodeNode> getChildNodes() {\n+    return List.of(value);\n+  }\n+\n+  @Override\n+  protected String formatOneLine() {\n+    return \"-(\" + value + \")\";\n+  }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/69/NegateBytecodeExpression.java\nindex f1873c5cf10..68009bfdc05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/69/NegateBytecodeExpression.java\n@@ -37,11 +37,10 @@ class NegateBytecodeExpression\n         Class<?> type = value.getType().getPrimitiveType();\n         checkArgument(type != null, \"value is not a primitive\");\n         checkArgument(type != void.class, \"value is void\");\n-        checkArgument(type == int.class || type == long.class || type == float.class || type == double.class,\n-                \"value argument must be int, long, float, or double, but is %s\",\n+        checkArgument(type == int.class || type == long.class || type == float.class || type == double.class, \"value argument must be int, long, float, or double, but is %s\",\n                 type);\n \n-        negateOpCode = getNumericOpCode(\"Negate\", OpCode.INEG, type);\n+negateOpCode = getNumericOpCode(\"Negate\", OpCode.INEG, type);\n     }\n \n     @Override\n@@ -63,4 +62,4 @@ class NegateBytecodeExpression\n     {\n         return \"-(\" + value + \")\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "55",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "61",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "66",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/69/NegateBytecodeExpression.java\nindex f1873c5cf10..36cd975c382 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/69/NegateBytecodeExpression.java\n@@ -23,44 +23,47 @@ import static com.facebook.presto.bytecode.BytecodeUtils.checkArgument;\n import static com.facebook.presto.bytecode.expression.ArithmeticBytecodeExpression.getNumericOpCode;\n import static java.util.Objects.requireNonNull;\n \n-class NegateBytecodeExpression\n-        extends BytecodeExpression\n-{\n+class NegateBytecodeExpression extends BytecodeExpression {\n+\n     private final BytecodeExpression value;\n+\n+\n     private final OpCode negateOpCode;\n \n-    NegateBytecodeExpression(BytecodeExpression value)\n-    {\n-        super(requireNonNull(value, \"value is null\").getType());\n-        this.value = value;\n \n-        Class<?> type = value.getType().getPrimitiveType();\n-        checkArgument(type != null, \"value is not a primitive\");\n-        checkArgument(type != void.class, \"value is void\");\n-        checkArgument(type == int.class || type == long.class || type == float.class || type == double.class,\n-                \"value argument must be int, long, float, or double, but is %s\",\n-                type);\n+    NegateBytecodeExpression(BytecodeExpression value) {\n+                                                           super(requireNonNull(value, \"value is null\").getType());\n \n-        negateOpCode = getNumericOpCode(\"Negate\", OpCode.INEG, type);\n-    }\n+                                                           this.value = value;\n+\n+                                                           Class<?> type = value.getType().getPrimitiveType();\n+\n+                                                           checkArgument(type != null, \"value is not a primitive\");\n \n-    @Override\n-    public BytecodeNode getBytecode(MethodGenerationContext generationContext)\n-    {\n-        return new BytecodeBlock()\n-                .append(value)\n-                .append(negateOpCode);\n+                                                           checkArgument(type != void.class, \"value is void\");\n+\n+                                                           checkArgument(\n+                                                               type == int.class || type == long.class || type == float.class || type == double.class,\n+                                                               \"value argument must be int, long, float, or double, but is %s\",\n+                                                               type\n+                                                           );\n+\n+                                                           negateOpCode = getNumericOpCode(\"Negate\", OpCode.INEG, type);\n+                                                       }\n+\n+\n+    @Override public BytecodeNode getBytecode(MethodGenerationContext generationContext) {\n+        return new BytecodeBlock().append(value)\n+                                  .append(negateOpCode);\n     }\n \n-    @Override\n-    public List<BytecodeNode> getChildNodes()\n-    {\n+\n+    @Override public List<BytecodeNode> getChildNodes() {\n         return List.of(value);\n     }\n \n-    @Override\n-    protected String formatOneLine()\n-    {\n+\n+    @Override protected String formatOneLine() {\n         return \"-(\" + value + \")\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/69/NegateBytecodeExpression.java\nindex f1873c5cf10..d211b7689c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/69/NegateBytecodeExpression.java\n@@ -27,6 +27,7 @@ class NegateBytecodeExpression\n         extends BytecodeExpression\n {\n     private final BytecodeExpression value;\n+\n     private final OpCode negateOpCode;\n \n     NegateBytecodeExpression(BytecodeExpression value)\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/69/NegateBytecodeExpression.java\nindex f1873c5cf10..d211b7689c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/69/NegateBytecodeExpression.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/69/NegateBytecodeExpression.java\n@@ -27,6 +27,7 @@ class NegateBytecodeExpression\n         extends BytecodeExpression\n {\n     private final BytecodeExpression value;\n+\n     private final OpCode negateOpCode;\n \n     NegateBytecodeExpression(BytecodeExpression value)\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}