{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3236",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3236/PathInterestFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3236/PathInterestFactory.java\nindex 2ae8ee5d9b8..e4f1f1e07d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3236/PathInterestFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3236/PathInterestFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.Comparator;\n@@ -32,274 +33,274 @@ import static org.neo4j.graphalgo.impl.util.PathInterest.VisitCountBasedPathInte\n  */\n public class PathInterestFactory\n {\n-    public static final Comparator<Comparable> STANDARD_COMPARATOR = Comparable::compareTo;\n-\n-    private PathInterestFactory()\n+  public static final Comparator<Comparable> STANDARD_COMPARATOR = Comparable::compareTo;\n+\n+  private PathInterestFactory()\n+  {\n+  }\n+\n+  public static PathInterest<? extends Comparable> single()\n+  {\n+    return SINGLE;\n+  }\n+\n+  public static PathInterest<? extends Comparable> allShortest()\n+  {\n+    return ALL_SHORTEST;\n+  }\n+\n+  public static PathInterest<? extends Comparable> all()\n+  {\n+    return ALL;\n+  }\n+\n+  private static final PathInterest<? extends Comparable> SINGLE = new PathInterest<Comparable>()\n+  {\n+    @Override\n+    public Comparator<Comparable> comparator()\n     {\n+      return STANDARD_COMPARATOR;\n     }\n \n-    public static PathInterest<? extends Comparable> single()\n+    @Override\n+    public boolean canBeRuledOut(int numberOfVisits, Comparable pathPriority, Comparable oldPriority)\n     {\n-        return SINGLE;\n+      return numberOfVisits > 0 || pathPriority.compareTo(oldPriority) >= 0;\n     }\n \n-    public static PathInterest<? extends Comparable> allShortest()\n+    @Override\n+    public boolean stillInteresting(int numberOfVisits)\n     {\n-        return ALL_SHORTEST;\n+      return numberOfVisits <= 1;\n     }\n \n-    public static PathInterest<? extends Comparable> all()\n+    @Override\n+    public boolean stopAfterLowestCost()\n     {\n-        return ALL;\n+      return true;\n     }\n+  };\n \n-    private static final PathInterest<? extends Comparable> SINGLE = new PathInterest<Comparable>()\n-    {\n-        @Override\n-        public Comparator<Comparable> comparator()\n-        {\n-            return STANDARD_COMPARATOR;\n-        }\n-\n-        @Override\n-        public boolean canBeRuledOut( int numberOfVisits, Comparable pathPriority, Comparable oldPriority )\n-        {\n-            return numberOfVisits > 0 || pathPriority.compareTo( oldPriority ) >= 0;\n-        }\n+  private static final PathInterest<? extends Comparable> ALL_SHORTEST =\n+      new PriorityBasedPathInterest<Comparable>()\n+      {\n+        private BiFunction<Comparable, Comparable, Boolean> interestFunction;\n \n         @Override\n-        public boolean stillInteresting( int numberOfVisits )\n+        public BiFunction<Comparable, Comparable, Boolean> interestFunction()\n         {\n-            return numberOfVisits <= 1;\n+          if (interestFunction == null)\n+          {\n+            interestFunction = (newValue, oldValue) -> newValue.compareTo(oldValue) <= 0;\n+          }\n+          return interestFunction;\n         }\n \n-        @Override\n-        public boolean stopAfterLowestCost()\n-        {\n-            return true;\n-        }\n-    };\n-\n-    private static final PathInterest<? extends Comparable> ALL_SHORTEST =\n-            new PriorityBasedPathInterest<Comparable>()\n-            {\n-                private BiFunction<Comparable,Comparable,Boolean> interestFunction;\n-\n-                @Override\n-                public BiFunction<Comparable,Comparable,Boolean> interestFunction()\n-                {\n-                    if ( interestFunction == null )\n-                    {\n-                        interestFunction = ( newValue, oldValue ) -> newValue.compareTo( oldValue ) <= 0;\n-                    }\n-                    return interestFunction;\n-                }\n-\n-                @Override\n-                public Comparator<Comparable> comparator()\n-                {\n-                    return STANDARD_COMPARATOR;\n-                }\n-            };\n-\n-    private static final PathInterest<? extends Comparable> ALL = new PathInterest<Comparable>()\n-    {\n         @Override\n         public Comparator<Comparable> comparator()\n         {\n-            return STANDARD_COMPARATOR;\n-        }\n-\n-        @Override\n-        public boolean canBeRuledOut( int numberOfVisits, Comparable pathPriority, Comparable oldPriority )\n-        {\n-            return false;\n+          return STANDARD_COMPARATOR;\n         }\n+      };\n \n-        @Override\n-        public boolean stillInteresting( int numberOfVisits )\n-        {\n-            return true;\n-        }\n-\n-        @Override\n-        public boolean stopAfterLowestCost()\n-        {\n-            return false;\n-        }\n-    };\n-\n-    public static <P extends Comparable<? super P>> PathInterest<P> numberOfShortest( final int numberOfWantedPaths )\n+  private static final PathInterest<? extends Comparable> ALL = new PathInterest<Comparable>()\n+  {\n+    @Override\n+    public Comparator<Comparable> comparator()\n     {\n-        if ( numberOfWantedPaths < 1 )\n-        {\n-            throw new IllegalArgumentException( \"Can not create PathInterest with interested in less than 1 path.\" );\n-        }\n-\n-        return new VisitCountBasedPathInterest<P>()\n-        {\n-            private Comparator<P> comparator = Comparable::compareTo;\n-\n-            @Override\n-            int numberOfWantedPaths()\n-            {\n-                return numberOfWantedPaths;\n-            }\n-\n-            @Override\n-            public Comparator<P> comparator()\n-            {\n-                return comparator;\n-            }\n-        };\n+      return STANDARD_COMPARATOR;\n     }\n \n-    public static PathInterest<Double> allShortest( double epsilon )\n+    @Override\n+    public boolean canBeRuledOut(int numberOfVisits, Comparable pathPriority, Comparable oldPriority)\n     {\n-        return new PriorityBasedTolerancePathInterest( epsilon );\n+      return false;\n     }\n \n-    public static PathInterest<Double> all( double epsilon )\n+    @Override\n+    public boolean stillInteresting(int numberOfVisits)\n     {\n-        return new AllTolerancePathInterest( epsilon );\n+      return true;\n     }\n \n-    public static PathInterest<Double> numberOfShortest( double epsilon, int numberOfWantedPaths )\n+    @Override\n+    public boolean stopAfterLowestCost()\n     {\n-        return new VisitCountBasedTolerancePathInterest( epsilon, numberOfWantedPaths );\n+      return false;\n     }\n+  };\n \n-    public static PathInterest<Double> single( double epsilon )\n+  public static <P extends Comparable<? super P>> PathInterest<P> numberOfShortest(final int numberOfWantedPaths)\n+  {\n+    if (numberOfWantedPaths < 1)\n     {\n-        return new SingleTolerancePathInterest( epsilon );\n+      throw new IllegalArgumentException(\"Can not create PathInterest with interested in less than 1 path.\");\n     }\n \n-    private static class PriorityBasedTolerancePathInterest extends PriorityBasedPathInterest<Double>\n+    return new VisitCountBasedPathInterest<P>()\n     {\n-        private final double epsilon;\n-        private BiFunction<Double,Double,Boolean> interestFunction =\n-                new BiFunction<Double,Double,Boolean>()\n-                {\n-                    @Override\n-                    public Boolean apply( Double newValue, Double oldValue )\n-                    {\n-                        return NoneStrictMath.compare( newValue, oldValue, epsilon ) <= 0;\n-                    }\n-                };\n-        private final Comparator<Double> comparator;\n-\n-        PriorityBasedTolerancePathInterest( final double epsilon )\n+      private Comparator<P> comparator = Comparable::compareTo;\n+\n+      @Override\n+      int numberOfWantedPaths()\n+      {\n+        return numberOfWantedPaths;\n+      }\n+\n+      @Override\n+      public Comparator<P> comparator()\n+      {\n+        return comparator;\n+      }\n+    };\n+  }\n+\n+  public static PathInterest<Double> allShortest(double epsilon)\n+  {\n+    return new PriorityBasedTolerancePathInterest(epsilon);\n+  }\n+\n+  public static PathInterest<Double> all(double epsilon)\n+  {\n+    return new AllTolerancePathInterest(epsilon);\n+  }\n+\n+  public static PathInterest<Double> numberOfShortest(double epsilon, int numberOfWantedPaths)\n+  {\n+    return new VisitCountBasedTolerancePathInterest(epsilon, numberOfWantedPaths);\n+  }\n+\n+  public static PathInterest<Double> single(double epsilon)\n+  {\n+    return new SingleTolerancePathInterest(epsilon);\n+  }\n+\n+  private static class PriorityBasedTolerancePathInterest extends PriorityBasedPathInterest<Double>\n+  {\n+    private final double epsilon;\n+    private BiFunction<Double, Double, Boolean> interestFunction =\n+        new BiFunction<Double, Double, Boolean>()\n         {\n-            this.epsilon = epsilon;\n-            this.comparator = new NoneStrictMath.CommonToleranceComparator( epsilon );\n-        }\n+          @Override\n+          public Boolean apply(Double newValue, Double oldValue)\n+          {\n+            return NoneStrictMath.compare(newValue, oldValue, epsilon) <= 0;\n+          }\n+        };\n+    private final Comparator<Double> comparator;\n \n-        @Override\n-        public BiFunction<Double,Double,Boolean> interestFunction()\n-        {\n-            return interestFunction;\n-        }\n+    PriorityBasedTolerancePathInterest(final double epsilon)\n+    {\n+      this.epsilon = epsilon;\n+      this.comparator = new NoneStrictMath.CommonToleranceComparator(epsilon);\n+    }\n \n-        @Override\n-        public Comparator<Double> comparator()\n-        {\n-            return comparator;\n-        }\n+    @Override\n+    public BiFunction<Double, Double, Boolean> interestFunction()\n+    {\n+      return interestFunction;\n     }\n \n-    private static class VisitCountBasedTolerancePathInterest extends VisitCountBasedPathInterest<Double>\n+    @Override\n+    public Comparator<Double> comparator()\n     {\n-        private final double epsilon;\n-        private final int numberOfWantedPaths;\n-        private final Comparator<Double> comparator;\n+      return comparator;\n+    }\n+  }\n \n-        VisitCountBasedTolerancePathInterest( double epsilon, int numberOfWantedPaths )\n-        {\n-            this.epsilon = epsilon;\n-            this.numberOfWantedPaths = numberOfWantedPaths;\n-            this.comparator = new NoneStrictMath.CommonToleranceComparator( epsilon );\n-        }\n+  private static class VisitCountBasedTolerancePathInterest extends VisitCountBasedPathInterest<Double>\n+  {\n+    private final double epsilon;\n+    private final int numberOfWantedPaths;\n+    private final Comparator<Double> comparator;\n \n-        @Override\n-        int numberOfWantedPaths()\n-        {\n-            return numberOfWantedPaths;\n-        }\n+    VisitCountBasedTolerancePathInterest(double epsilon, int numberOfWantedPaths)\n+    {\n+      this.epsilon = epsilon;\n+      this.numberOfWantedPaths = numberOfWantedPaths;\n+      this.comparator = new NoneStrictMath.CommonToleranceComparator(epsilon);\n+    }\n \n-        @Override\n-        public Comparator<Double> comparator()\n-        {\n-            return comparator;\n-        }\n+    @Override\n+    int numberOfWantedPaths()\n+    {\n+      return numberOfWantedPaths;\n     }\n \n-    private static class SingleTolerancePathInterest implements PathInterest<Double>\n+    @Override\n+    public Comparator<Double> comparator()\n     {\n-        private final double epsilon;\n-        private final Comparator<Double> comparator;\n+      return comparator;\n+    }\n+  }\n \n-        SingleTolerancePathInterest( double epsilon )\n-        {\n-            this.epsilon = epsilon;\n-            this.comparator = new NoneStrictMath.CommonToleranceComparator( epsilon );\n-        }\n+  private static class SingleTolerancePathInterest implements PathInterest<Double>\n+  {\n+    private final double epsilon;\n+    private final Comparator<Double> comparator;\n \n-        @Override\n-        public Comparator<Double> comparator()\n-        {\n-            return comparator;\n-        }\n+    SingleTolerancePathInterest(double epsilon)\n+    {\n+      this.epsilon = epsilon;\n+      this.comparator = new NoneStrictMath.CommonToleranceComparator(epsilon);\n+    }\n \n-        @Override\n-        public boolean canBeRuledOut( int numberOfVisits, Double pathPriority, Double oldPriority )\n-        {\n-            return numberOfVisits > 0 || NoneStrictMath.compare( pathPriority, oldPriority, epsilon ) >= 0;\n-        }\n+    @Override\n+    public Comparator<Double> comparator()\n+    {\n+      return comparator;\n+    }\n \n-        @Override\n-        public boolean stillInteresting( int numberOfVisits )\n-        {\n-            return numberOfVisits <= 1;\n-        }\n+    @Override\n+    public boolean canBeRuledOut(int numberOfVisits, Double pathPriority, Double oldPriority)\n+    {\n+      return numberOfVisits > 0 || NoneStrictMath.compare(pathPriority, oldPriority, epsilon) >= 0;\n+    }\n \n-        @Override\n-        public boolean stopAfterLowestCost()\n-        {\n-            return true;\n-        }\n+    @Override\n+    public boolean stillInteresting(int numberOfVisits)\n+    {\n+      return numberOfVisits <= 1;\n     }\n \n-    private static class AllTolerancePathInterest implements PathInterest<Double>\n+    @Override\n+    public boolean stopAfterLowestCost()\n     {\n-        private final Comparator<Double> comparator;\n+      return true;\n+    }\n+  }\n \n-        AllTolerancePathInterest( double epsilon )\n-        {\n-            this.comparator = new NoneStrictMath.CommonToleranceComparator( epsilon );\n-        }\n+  private static class AllTolerancePathInterest implements PathInterest<Double>\n+  {\n+    private final Comparator<Double> comparator;\n \n-        @Override\n-        public Comparator<Double> comparator()\n-        {\n-            return comparator;\n-        }\n+    AllTolerancePathInterest(double epsilon)\n+    {\n+      this.comparator = new NoneStrictMath.CommonToleranceComparator(epsilon);\n+    }\n \n-        @Override\n-        public boolean canBeRuledOut( int numberOfVisits, Double pathPriority, Double oldPriority )\n-        {\n-            return false;\n-        }\n+    @Override\n+    public Comparator<Double> comparator()\n+    {\n+      return comparator;\n+    }\n \n-        @Override\n-        public boolean stillInteresting( int numberOfVisits )\n-        {\n-            return true;\n-        }\n+    @Override\n+    public boolean canBeRuledOut(int numberOfVisits, Double pathPriority, Double oldPriority)\n+    {\n+      return false;\n+    }\n \n-        @Override\n-        public boolean stopAfterLowestCost()\n-        {\n-            return false;\n-        }\n+    @Override\n+    public boolean stillInteresting(int numberOfVisits)\n+    {\n+      return true;\n+    }\n+\n+    @Override\n+    public boolean stopAfterLowestCost()\n+    {\n+      return false;\n     }\n+  }\n }\n",
            "diff_size": 290
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "34",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "256",
                    "column": "34",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3236/PathInterestFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3236/PathInterestFactory.java\nindex 2ae8ee5d9b8..8542bc19aa1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3236/PathInterestFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3236/PathInterestFactory.java\n@@ -64,7 +64,7 @@ public class PathInterestFactory\n         @Override\n         public boolean canBeRuledOut( int numberOfVisits, Comparable pathPriority, Comparable oldPriority )\n         {\n-            return numberOfVisits > 0 || pathPriority.compareTo( oldPriority ) >= 0;\n+            return numberOfVisits> 0 || pathPriority.compareTo( oldPriority ) >= 0;\n         }\n \n         @Override\n@@ -80,8 +80,7 @@ public class PathInterestFactory\n         }\n     };\n \n-    private static final PathInterest<? extends Comparable> ALL_SHORTEST =\n-            new PriorityBasedPathInterest<Comparable>()\n+    private static final PathInterest<? extends Comparable> ALL_SHORTEST = new PriorityBasedPathInterest<Comparable>()\n             {\n                 private BiFunction<Comparable,Comparable,Boolean> interestFunction;\n \n@@ -92,7 +91,8 @@ public class PathInterestFactory\n                     {\n                         interestFunction = ( newValue, oldValue ) -> newValue.compareTo( oldValue ) <= 0;\n                     }\n-                    return interestFunction;\n+\n+return interestFunction;\n                 }\n \n                 @Override\n@@ -102,7 +102,7 @@ public class PathInterestFactory\n                 }\n             };\n \n-    private static final PathInterest<? extends Comparable> ALL = new PathInterest<Comparable>()\n+private static final PathInterest<? extends Comparable> ALL = new PathInterest<Comparable>()\n     {\n         @Override\n         public Comparator<Comparable> comparator()\n@@ -177,8 +177,7 @@ public class PathInterestFactory\n     private static class PriorityBasedTolerancePathInterest extends PriorityBasedPathInterest<Double>\n     {\n         private final double epsilon;\n-        private BiFunction<Double,Double,Boolean> interestFunction =\n-                new BiFunction<Double,Double,Boolean>()\n+        private BiFunction<Double,Double,Boolean> interestFunction = new BiFunction<Double,Double,Boolean>()\n                 {\n                     @Override\n                     public Boolean apply( Double newValue, Double oldValue )\n@@ -186,7 +185,8 @@ public class PathInterestFactory\n                         return NoneStrictMath.compare( newValue, oldValue, epsilon ) <= 0;\n                     }\n                 };\n-        private final Comparator<Double> comparator;\n+\n+private final Comparator<Double> comparator;\n \n         PriorityBasedTolerancePathInterest( final double epsilon )\n         {\n@@ -253,7 +253,7 @@ public class PathInterestFactory\n         @Override\n         public boolean canBeRuledOut( int numberOfVisits, Double pathPriority, Double oldPriority )\n         {\n-            return numberOfVisits > 0 || NoneStrictMath.compare( pathPriority, oldPriority, epsilon ) >= 0;\n+            return numberOfVisits> 0 || NoneStrictMath.compare( pathPriority, oldPriority, epsilon ) >= 0;\n         }\n \n         @Override\n@@ -302,4 +302,4 @@ public class PathInterestFactory\n             return false;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}