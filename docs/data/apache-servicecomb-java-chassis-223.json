{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "223",
    "information": {
        "errors": [
            {
                "line": "45",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * \u7528\u4e8e\u540c\u65f6\u652f\u6301cse\u8c03\u7528\u548c\u975ecse\u8c03\u7528\n */\n// TODO: 2017/7/1 what we want to expose is RestOperations instead, since some RestTemplate methods are not to be called by users\nclass RestTemplateWrapper extends RestTemplate {\n  private final List<AcceptableRestTemplate> acceptableRestTemplates = new ArrayList<>();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/223/RestTemplateWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/223/RestTemplateWrapper.java\nindex 9cc0b0cad4d..8cd47f09d75 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/223/RestTemplateWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/223/RestTemplateWrapper.java\n@@ -81,7 +81,7 @@ class RestTemplateWrapper extends RestTemplate {\n \n   @Override\n   public <T> T getForObject(String url, Class<T> responseType,\n-      Map<String, ?> urlVariables) throws RestClientException {\n+                            Map<String, ?> urlVariables) throws RestClientException {\n     return getRestTemplate(url).getForObject(url, responseType, urlVariables);\n   }\n \n@@ -92,13 +92,13 @@ class RestTemplateWrapper extends RestTemplate {\n \n   @Override\n   public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,\n-      Object... urlVariables) throws RestClientException {\n+                                            Object... urlVariables) throws RestClientException {\n     return getRestTemplate(url).getForEntity(url, responseType, urlVariables);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,\n-      Map<String, ?> urlVariables) throws RestClientException {\n+                                            Map<String, ?> urlVariables) throws RestClientException {\n     return getRestTemplate(url).getForEntity(url, responseType, urlVariables);\n   }\n \n@@ -109,13 +109,13 @@ class RestTemplateWrapper extends RestTemplate {\n \n   @Override\n   public <T> T postForObject(String url, Object request, Class<T> responseType,\n-      Object... uriVariables) throws RestClientException {\n+                             Object... uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForObject(url, request, responseType, uriVariables);\n   }\n \n   @Override\n   public <T> T postForObject(String url, Object request, Class<T> responseType,\n-      Map<String, ?> uriVariables) throws RestClientException {\n+                             Map<String, ?> uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForObject(url, request, responseType, uriVariables);\n   }\n \n@@ -126,19 +126,19 @@ class RestTemplateWrapper extends RestTemplate {\n \n   @Override\n   public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType,\n-      Object... uriVariables) throws RestClientException {\n+                                             Object... uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForEntity(url, request, responseType, uriVariables);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType,\n-      Map<String, ?> uriVariables) throws RestClientException {\n+                                             Map<String, ?> uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForEntity(url, request, responseType, uriVariables);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> postForEntity(URI url, Object request,\n-      Class<T> responseType) throws RestClientException {\n+                                             Class<T> responseType) throws RestClientException {\n     return getRestTemplate(url).postForEntity(url, request, responseType);\n   }\n \n@@ -174,49 +174,51 @@ class RestTemplateWrapper extends RestTemplate {\n \n   @Override\n   public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      Class<T> responseType, Object... uriVariables) throws RestClientException {\n+                                        Class<T> responseType, Object... uriVariables) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n+                                        ParameterizedTypeReference<T> responseType, Map<String, ?> uriVariables)\n+      throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n+                                        Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType, Object... uriVariables) throws RestClientException {\n+                                        ParameterizedTypeReference<T> responseType, Object... uriVariables)\n+      throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,\n-      Class<T> responseType) throws RestClientException {\n+                                        Class<T> responseType) throws RestClientException {\n     return getRestTemplate(requestEntity.getUrl()).exchange(requestEntity, responseType);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType) throws RestClientException {\n+                                        ParameterizedTypeReference<T> responseType) throws RestClientException {\n     return getRestTemplate(requestEntity.getUrl()).exchange(requestEntity, responseType);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity,\n-      Class<T> responseType) throws RestClientException {\n+                                        Class<T> responseType) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType);\n   }\n \n   @Override\n   public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType) throws RestClientException {\n+                                        ParameterizedTypeReference<T> responseType) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType);\n   }\n \n@@ -267,19 +269,19 @@ class RestTemplateWrapper extends RestTemplate {\n \n   @Override\n   public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n-      ResponseExtractor<T> responseExtractor, Object... urlVariables) throws RestClientException {\n+                       ResponseExtractor<T> responseExtractor, Object... urlVariables) throws RestClientException {\n     return getRestTemplate(url).execute(url, method, requestCallback, responseExtractor, urlVariables);\n   }\n \n   @Override\n   public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n-      ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) throws RestClientException {\n+                       ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) throws RestClientException {\n     return getRestTemplate(url).execute(url, method, requestCallback, responseExtractor, urlVariables);\n   }\n \n   @Override\n   public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n-      ResponseExtractor<T> responseExtractor) throws RestClientException {\n+                       ResponseExtractor<T> responseExtractor) throws RestClientException {\n     return getRestTemplate(url).execute(url, method, requestCallback, responseExtractor);\n   }\n \n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/223/RestTemplateWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/223/RestTemplateWrapper.java\nindex 9cc0b0cad4d..af1eeab15f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/223/RestTemplateWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/223/RestTemplateWrapper.java\n@@ -320,4 +320,4 @@ class RestTemplateWrapper extends RestTemplate {\n     super.setMessageConverters(messageConverters);\n     defaultRestTemplate.setMessageConverters(messageConverters);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "113",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "173",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "253",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "258",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "263",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/223/RestTemplateWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/223/RestTemplateWrapper.java\nindex 9cc0b0cad4d..7cdd1f34b32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/223/RestTemplateWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/223/RestTemplateWrapper.java\n@@ -22,7 +22,6 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.http.HttpEntity;\n import org.springframework.http.HttpHeaders;\n@@ -43,6 +42,7 @@ import org.springframework.web.util.UriTemplateHandler;\n  * \u7528\u4e8e\u540c\u65f6\u652f\u6301cse\u8c03\u7528\u548c\u975ecse\u8c03\u7528\n  */\n // TODO: 2017/7/1 what we want to expose is RestOperations instead, since some RestTemplate methods are not to be called by users\n+\n class RestTemplateWrapper extends RestTemplate {\n   private final List<AcceptableRestTemplate> acceptableRestTemplates = new ArrayList<>();\n \n@@ -80,8 +80,7 @@ class RestTemplateWrapper extends RestTemplate {\n   }\n \n   @Override\n-  public <T> T getForObject(String url, Class<T> responseType,\n-      Map<String, ?> urlVariables) throws RestClientException {\n+  public <T> T getForObject(String url, Class<T> responseType, Map<String, ?> urlVariables) throws RestClientException {\n     return getRestTemplate(url).getForObject(url, responseType, urlVariables);\n   }\n \n@@ -91,14 +90,12 @@ class RestTemplateWrapper extends RestTemplate {\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,\n-      Object... urlVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... urlVariables) throws RestClientException {\n     return getRestTemplate(url).getForEntity(url, responseType, urlVariables);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType,\n-      Map<String, ?> urlVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> urlVariables) throws RestClientException {\n     return getRestTemplate(url).getForEntity(url, responseType, urlVariables);\n   }\n \n@@ -108,14 +105,12 @@ class RestTemplateWrapper extends RestTemplate {\n   }\n \n   @Override\n-  public <T> T postForObject(String url, Object request, Class<T> responseType,\n-      Object... uriVariables) throws RestClientException {\n+  public <T> T postForObject(String url, Object request, Class<T> responseType, Object... uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForObject(url, request, responseType, uriVariables);\n   }\n \n   @Override\n-  public <T> T postForObject(String url, Object request, Class<T> responseType,\n-      Map<String, ?> uriVariables) throws RestClientException {\n+  public <T> T postForObject(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForObject(url, request, responseType, uriVariables);\n   }\n \n@@ -125,20 +120,17 @@ class RestTemplateWrapper extends RestTemplate {\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType,\n-      Object... uriVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Object... uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForEntity(url, request, responseType, uriVariables);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType,\n-      Map<String, ?> uriVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n     return getRestTemplate(url).postForEntity(url, request, responseType, uriVariables);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> postForEntity(URI url, Object request,\n-      Class<T> responseType) throws RestClientException {\n+  public <T> ResponseEntity<T> postForEntity(URI url, Object request, Class<T> responseType) throws RestClientException {\n     return getRestTemplate(url).postForEntity(url, request, responseType);\n   }\n \n@@ -173,50 +165,42 @@ class RestTemplateWrapper extends RestTemplate {\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      Class<T> responseType, Object... uriVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType, Object... uriVariables) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType, Object... uriVariables) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(String url, HttpMethod method, HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType, Object... uriVariables) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType, uriVariables);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,\n-      Class<T> responseType) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, Class<T> responseType) throws RestClientException {\n     return getRestTemplate(requestEntity.getUrl()).exchange(requestEntity, responseType);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(RequestEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) throws RestClientException {\n     return getRestTemplate(requestEntity.getUrl()).exchange(requestEntity, responseType);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity,\n-      Class<T> responseType) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity, Class<T> responseType) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType);\n   }\n \n   @Override\n-  public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity,\n-      ParameterizedTypeReference<T> responseType) throws RestClientException {\n+  public <T> ResponseEntity<T> exchange(URI url, HttpMethod method, HttpEntity<?> requestEntity, ParameterizedTypeReference<T> responseType) throws RestClientException {\n     return getRestTemplate(url).exchange(url, method, requestEntity, responseType);\n   }\n \n@@ -266,20 +250,17 @@ class RestTemplateWrapper extends RestTemplate {\n   }\n \n   @Override\n-  public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n-      ResponseExtractor<T> responseExtractor, Object... urlVariables) throws RestClientException {\n+  public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, ResponseExtractor<T> responseExtractor, Object... urlVariables) throws RestClientException {\n     return getRestTemplate(url).execute(url, method, requestCallback, responseExtractor, urlVariables);\n   }\n \n   @Override\n-  public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback,\n-      ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) throws RestClientException {\n+  public <T> T execute(String url, HttpMethod method, RequestCallback requestCallback, ResponseExtractor<T> responseExtractor, Map<String, ?> urlVariables) throws RestClientException {\n     return getRestTemplate(url).execute(url, method, requestCallback, responseExtractor, urlVariables);\n   }\n \n   @Override\n-  public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback,\n-      ResponseExtractor<T> responseExtractor) throws RestClientException {\n+  public <T> T execute(URI url, HttpMethod method, RequestCallback requestCallback, ResponseExtractor<T> responseExtractor) throws RestClientException {\n     return getRestTemplate(url).execute(url, method, requestCallback, responseExtractor);\n   }\n \n@@ -320,4 +301,4 @@ class RestTemplateWrapper extends RestTemplate {\n     super.setMessageConverters(messageConverters);\n     defaultRestTemplate.setMessageConverters(messageConverters);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}