{
    "project_name": "graphfoundation-ongdb",
    "error_id": "90",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "250",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "255",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "299",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "340",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "344",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "365",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "442",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "445",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "450",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "546",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "549",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "583",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/90/DefaultRelationshipTraversalCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/90/DefaultRelationshipTraversalCursor.java\nindex ab49256c985..b9100d71717 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/90/DefaultRelationshipTraversalCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/90/DefaultRelationshipTraversalCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.newapi;\n \n import org.neo4j.collection.primitive.PrimitiveLongCollections;\n@@ -31,351 +32,345 @@ import org.neo4j.storageengine.api.txstate.NodeState;\n import static java.lang.String.format;\n \n class DefaultRelationshipTraversalCursor extends RelationshipCursor\n-        implements RelationshipTraversalCursor\n+    implements RelationshipTraversalCursor\n {\n-    private enum GroupState\n-    {\n-        INCOMING,\n-        OUTGOING,\n-        LOOP,\n-        NONE\n-    }\n-\n-    private enum FilterState\n-    {\n-        // need filter, and need to read filter state from first store relationship\n-        NOT_INITIALIZED( RelationshipDirection.ERROR )\n-                {\n-                    @Override\n-                    boolean check( long source, long target, long origin )\n-                    {\n-                        throw new IllegalStateException( \"Cannot call check on uninitialized filter\" );\n-                    }\n-                },\n-        // allow only incoming relationships\n-        INCOMING( RelationshipDirection.INCOMING )\n-                {\n-                    @Override\n-                    boolean check( long source, long target, long origin )\n-                    {\n-                        return origin == target && source != target;\n-                    }\n-                },\n-        // allow only outgoing relationships\n-        OUTGOING( RelationshipDirection.OUTGOING )\n-                {\n-                    @Override\n-                    boolean check( long source, long target, long origin )\n-                    {\n-                        return origin == source && source != target;\n-                    }\n-                },\n-        // allow only loop relationships\n-        LOOP( RelationshipDirection.LOOP )\n-                {\n-                    @Override\n-                    boolean check( long source, long target, long origin )\n-                    {\n-                        return source == target;\n-                    }\n-                },\n-        // no filtering required\n-        NONE( RelationshipDirection.ERROR )\n-                {\n-                    @Override\n-                    boolean check( long source, long target, long origin )\n-                    {\n-                        return true;\n-                    }\n-                };\n-\n-        abstract boolean check( long source, long target, long origin );\n-\n-        private final RelationshipDirection direction;\n-\n-        FilterState( RelationshipDirection direction )\n+  private enum GroupState\n+  {\n+    INCOMING,\n+    OUTGOING,\n+    LOOP,\n+    NONE\n+  }\n+\n+  private enum FilterState\n+  {\n+    // need filter, and need to read filter state from first store relationship\n+    NOT_INITIALIZED(RelationshipDirection.ERROR)\n         {\n-            this.direction = direction;\n-        }\n-\n-        private static FilterState fromRelationshipDirection( RelationshipDirection direction )\n+          @Override\n+          boolean check(long source, long target, long origin)\n+          {\n+            throw new IllegalStateException(\"Cannot call check on uninitialized filter\");\n+          }\n+        },\n+    // allow only incoming relationships\n+    INCOMING(RelationshipDirection.INCOMING)\n         {\n-            switch ( direction )\n-            {\n-            case OUTGOING:\n-                return FilterState.OUTGOING;\n-            case INCOMING:\n-                return FilterState.INCOMING;\n-            case LOOP:\n-                return FilterState.LOOP;\n-            case ERROR:\n-                throw new IllegalArgumentException( \"There has been a RelationshipDirection.ERROR\" );\n-            default:\n-                throw new IllegalStateException(\n-                        format( \"Still poking my eye, dear checkstyle... (cannot filter on direction '%s')\", direction ) );\n-            }\n-        }\n-    }\n+          @Override\n+          boolean check(long source, long target, long origin)\n+          {\n+            return origin == target && source != target;\n+          }\n+        },\n+    // allow only outgoing relationships\n+    OUTGOING(RelationshipDirection.OUTGOING)\n+        {\n+          @Override\n+          boolean check(long source, long target, long origin)\n+          {\n+            return origin == source && source != target;\n+          }\n+        },\n+    // allow only loop relationships\n+    LOOP(RelationshipDirection.LOOP)\n+        {\n+          @Override\n+          boolean check(long source, long target, long origin)\n+          {\n+            return source == target;\n+          }\n+        },\n+    // no filtering required\n+    NONE(RelationshipDirection.ERROR)\n+        {\n+          @Override\n+          boolean check(long source, long target, long origin)\n+          {\n+            return true;\n+          }\n+        };\n \n-    private long originNodeReference;\n-    private long next;\n-    private Record buffer;\n-    private PageCursor pageCursor;\n-    private final DefaultRelationshipGroupCursor group;\n-    private GroupState groupState;\n-    private FilterState filterState;\n-    private boolean filterStore;\n-    private int filterType = NO_ID;\n+    abstract boolean check(long source, long target, long origin);\n \n-    private PrimitiveLongIterator addedRelationships;\n+    private final RelationshipDirection direction;\n \n-    DefaultRelationshipTraversalCursor( DefaultRelationshipGroupCursor group, DefaultCursors pool )\n+    FilterState(RelationshipDirection direction)\n     {\n-        super( pool );\n-        this.group = group;\n+      this.direction = direction;\n     }\n \n-    /*\n-     * Cursor being called as a group, use the buffered records in Record\n-     * instead. These are guaranteed to all have the same type and direction.\n-     */\n-    void buffered( long nodeReference, Record record, RelationshipDirection direction, int type, Read read )\n+    private static FilterState fromRelationshipDirection(RelationshipDirection direction)\n     {\n-        this.originNodeReference = nodeReference;\n-        this.buffer = Record.initialize( record );\n-        this.groupState = GroupState.NONE;\n-        this.filterState = FilterState.fromRelationshipDirection( direction );\n-        this.filterType = type;\n-        init( read );\n-        this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+      switch (direction)\n+      {\n+        case OUTGOING:\n+          return FilterState.OUTGOING;\n+        case INCOMING:\n+          return FilterState.INCOMING;\n+        case LOOP:\n+          return FilterState.LOOP;\n+        case ERROR:\n+          throw new IllegalArgumentException(\"There has been a RelationshipDirection.ERROR\");\n+        default:\n+          throw new IllegalStateException(\n+              format(\"Still poking my eye, dear checkstyle... (cannot filter on direction '%s')\", direction));\n+      }\n     }\n-\n-    /*\n-     * Normal traversal. Traversal returns mixed types and directions.\n-     */\n-    void chain( long nodeReference, long reference, Read read )\n+  }\n+\n+  private long originNodeReference;\n+  private long next;\n+  private Record buffer;\n+  private PageCursor pageCursor;\n+  private final DefaultRelationshipGroupCursor group;\n+  private GroupState groupState;\n+  private FilterState filterState;\n+  private boolean filterStore;\n+  private int filterType = NO_ID;\n+\n+  private PrimitiveLongIterator addedRelationships;\n+\n+  DefaultRelationshipTraversalCursor(DefaultRelationshipGroupCursor group, DefaultCursors pool)\n+  {\n+    super(pool);\n+    this.group = group;\n+  }\n+\n+  /*\n+   * Cursor being called as a group, use the buffered records in Record\n+   * instead. These are guaranteed to all have the same type and direction.\n+   */\n+  void buffered(long nodeReference, Record record, RelationshipDirection direction, int type, Read read)\n+  {\n+    this.originNodeReference = nodeReference;\n+    this.buffer = Record.initialize(record);\n+    this.groupState = GroupState.NONE;\n+    this.filterState = FilterState.fromRelationshipDirection(direction);\n+    this.filterType = type;\n+    init(read);\n+    this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+  }\n+\n+  /*\n+   * Normal traversal. Traversal returns mixed types and directions.\n+   */\n+  void chain(long nodeReference, long reference, Read read)\n+  {\n+    if (pageCursor == null)\n     {\n-        if ( pageCursor == null )\n-        {\n-            pageCursor = read.relationshipPage( reference );\n-        }\n-        setId( NO_ID );\n-        this.groupState = GroupState.NONE;\n-        this.filterState = FilterState.NONE;\n-        this.filterType = NO_ID;\n-        this.originNodeReference = nodeReference;\n-        this.next = reference;\n-        init( read );\n-        this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+      pageCursor = read.relationshipPage(reference);\n     }\n-\n-    /*\n-     * Reference to a group record. Traversal returns mixed types and directions.\n-     */\n-    void groups( long nodeReference, long groupReference, Read read )\n+    setId(NO_ID);\n+    this.groupState = GroupState.NONE;\n+    this.filterState = FilterState.NONE;\n+    this.filterType = NO_ID;\n+    this.originNodeReference = nodeReference;\n+    this.next = reference;\n+    init(read);\n+    this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+  }\n+\n+  /*\n+   * Reference to a group record. Traversal returns mixed types and directions.\n+   */\n+  void groups(long nodeReference, long groupReference, Read read)\n+  {\n+    setId(NO_ID);\n+    this.next = NO_ID;\n+    this.groupState = GroupState.INCOMING;\n+    this.filterState = FilterState.NONE;\n+    this.filterType = NO_ID;\n+    this.originNodeReference = nodeReference;\n+    read.relationshipGroups(nodeReference, groupReference, group);\n+    init(read);\n+    this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+  }\n+\n+  /*\n+   * Grouped traversal of non-dense node. Same type and direction as first read relationship. Store relationships are\n+   * all assumed to be of wanted relationship type and direction iff filterStore == false.\n+   */\n+  void filtered(long nodeReference, long reference, Read read, boolean filterStore)\n+  {\n+    if (pageCursor == null)\n     {\n-        setId( NO_ID );\n-        this.next = NO_ID;\n-        this.groupState = GroupState.INCOMING;\n-        this.filterState = FilterState.NONE;\n-        this.filterType = NO_ID;\n-        this.originNodeReference = nodeReference;\n-        read.relationshipGroups( nodeReference, groupReference, group );\n-        init( read );\n-        this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+      pageCursor = read.relationshipPage(reference);\n     }\n-\n-    /*\n-     * Grouped traversal of non-dense node. Same type and direction as first read relationship. Store relationships are\n-     * all assumed to be of wanted relationship type and direction iff filterStore == false.\n-     */\n-    void filtered( long nodeReference, long reference, Read read, boolean filterStore )\n+    setId(NO_ID);\n+    this.groupState = GroupState.NONE;\n+    this.filterState = FilterState.NOT_INITIALIZED;\n+    this.filterStore = filterStore;\n+    this.originNodeReference = nodeReference;\n+    this.next = reference;\n+    init(read);\n+    this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+  }\n+\n+  /*\n+   * Empty chain in store. Return from tx-state with provided relationship type and direction.\n+   */\n+  void filteredTxState(long nodeReference, Read read, int filterType, RelationshipDirection direction)\n+  {\n+    setId(NO_ID);\n+    this.groupState = GroupState.NONE;\n+    this.filterType = filterType;\n+    this.filterState = FilterState.fromRelationshipDirection(direction);\n+    this.filterStore = false;\n+    this.originNodeReference = nodeReference;\n+    this.next = NO_ID;\n+    init(read);\n+    this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n+  }\n+\n+  @Override\n+  public Position suspend()\n+  {\n+    throw new UnsupportedOperationException(\"not implemented\");\n+  }\n+\n+  @Override\n+  public void resume(Position position)\n+  {\n+    throw new UnsupportedOperationException(\"not implemented\");\n+  }\n+\n+  @Override\n+  public void neighbour(NodeCursor cursor)\n+  {\n+    read.singleNode(neighbourNodeReference(), cursor);\n+  }\n+\n+  @Override\n+  public long neighbourNodeReference()\n+  {\n+    final long source = sourceNodeReference(), target = targetNodeReference();\n+    if (source == originNodeReference)\n     {\n-        if ( pageCursor == null )\n-        {\n-            pageCursor = read.relationshipPage( reference );\n-        }\n-        setId( NO_ID );\n-        this.groupState = GroupState.NONE;\n-        this.filterState = FilterState.NOT_INITIALIZED;\n-        this.filterStore = filterStore;\n-        this.originNodeReference = nodeReference;\n-        this.next = reference;\n-        init( read );\n-        this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n-    }\n-\n-    /*\n-     * Empty chain in store. Return from tx-state with provided relationship type and direction.\n-     */\n-    void filteredTxState( long nodeReference, Read read, int filterType, RelationshipDirection direction )\n+      return target;\n+    } else if (target == originNodeReference)\n     {\n-        setId( NO_ID );\n-        this.groupState = GroupState.NONE;\n-        this.filterType = filterType;\n-        this.filterState = FilterState.fromRelationshipDirection( direction );\n-        this.filterStore = false;\n-        this.originNodeReference = nodeReference;\n-        this.next = NO_ID;\n-        init( read );\n-        this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n-    }\n-\n-    @Override\n-    public Position suspend()\n+      return source;\n+    } else\n     {\n-        throw new UnsupportedOperationException( \"not implemented\" );\n+      throw new IllegalStateException(\"NOT PART OF CHAIN\");\n     }\n+  }\n \n-    @Override\n-    public void resume( Position position )\n-    {\n-        throw new UnsupportedOperationException( \"not implemented\" );\n-    }\n+  @Override\n+  public long originNodeReference()\n+  {\n+    return originNodeReference;\n+  }\n \n-    @Override\n-    public void neighbour( NodeCursor cursor )\n-    {\n-        read.singleNode( neighbourNodeReference(), cursor );\n-    }\n+  @Override\n+  public boolean next()\n+  {\n+    boolean hasChanges;\n+    TransactionState txs;\n \n-    @Override\n-    public long neighbourNodeReference()\n+    if (filterState == FilterState.NOT_INITIALIZED)\n     {\n-        final long source = sourceNodeReference(), target = targetNodeReference();\n-        if ( source == originNodeReference )\n-        {\n-            return target;\n-        }\n-        else if ( target == originNodeReference )\n-        {\n-            return source;\n-        }\n-        else\n-        {\n-            throw new IllegalStateException( \"NOT PART OF CHAIN\" );\n-        }\n-    }\n-\n-    @Override\n-    public long originNodeReference()\n+      // Initialize filtering:\n+      //  - Read first record\n+      //  - Remember type and direction\n+      //  - Return first relationship if it's not deleted\n+      // Subsequent relationships need to have same type and direction\n+\n+      hasChanges = hasChanges(); // <- will setup filter state if needed\n+      txs = hasChanges ? read.txState() : null;\n+\n+      if (filterState == FilterState.NOT_INITIALIZED && filterStore)\n+      {\n+        read.relationshipFull(this, next, pageCursor);\n+        setupFilterState();\n+      }\n+\n+      if (filterState != FilterState.NOT_INITIALIZED && (!hasChanges || !txs.relationshipIsDeletedInThisTx(getId())))\n+      {\n+        return true;\n+      }\n+    } else\n     {\n-        return originNodeReference;\n+      hasChanges = hasChanges();\n+      txs = hasChanges ? read.txState() : null;\n     }\n \n-    @Override\n-    public boolean next()\n+    // tx-state relationships\n+    if (hasChanges && addedRelationships.hasNext())\n     {\n-        boolean hasChanges;\n-        TransactionState txs;\n-\n-        if ( filterState == FilterState.NOT_INITIALIZED )\n-        {\n-            // Initialize filtering:\n-            //  - Read first record\n-            //  - Remember type and direction\n-            //  - Return first relationship if it's not deleted\n-            // Subsequent relationships need to have same type and direction\n-\n-            hasChanges = hasChanges(); // <- will setup filter state if needed\n-            txs = hasChanges ? read.txState() : null;\n-\n-            if ( filterState == FilterState.NOT_INITIALIZED && filterStore )\n-            {\n-                read.relationshipFull( this, next, pageCursor );\n-                setupFilterState();\n-            }\n-\n-            if ( filterState != FilterState.NOT_INITIALIZED && (!hasChanges || !txs.relationshipIsDeletedInThisTx( getId() ) ) )\n-            {\n-                return true;\n-            }\n-        }\n-        else\n-        {\n-            hasChanges = hasChanges();\n-            txs = hasChanges ? read.txState() : null;\n-        }\n-\n-        // tx-state relationships\n-        if ( hasChanges && addedRelationships.hasNext() )\n-        {\n-            loadFromTxState( addedRelationships.next() );\n-            return true;\n-        }\n-\n-        if ( hasBufferedData() )\n-        {   // We have buffered data, iterate the chain of buffered records\n-            return nextBuffered( txs );\n-        }\n-\n-        do\n-        {\n-            if ( traversingDenseNode() )\n-            {\n-                traverseDenseNode();\n-            }\n-\n-            if ( next == NO_ID )\n-            {\n-                reset();\n-                return false;\n-            }\n-\n-            read.relationshipFull( this, next, pageCursor );\n-            computeNext();\n-\n-        } while ( ( filterStore && !correctTypeAndDirection() ) ||\n-                  ( hasChanges && txs.relationshipIsDeletedInThisTx( getId() ) ) );\n-\n-        return true;\n+      loadFromTxState(addedRelationships.next());\n+      return true;\n     }\n \n-    private void setupFilterState()\n-    {\n-        filterType = getType();\n-        final long source = sourceNodeReference(), target = targetNodeReference();\n-        if ( source == target )\n-        {\n-            next = getFirstNextRel();\n-            filterState = FilterState.LOOP;\n-        }\n-        else if ( source == originNodeReference )\n-        {\n-            next = getFirstNextRel();\n-            filterState = FilterState.OUTGOING;\n-        }\n-        else if ( target == originNodeReference )\n-        {\n-            next = getSecondNextRel();\n-            filterState = FilterState.INCOMING;\n-        }\n+    if (hasBufferedData())\n+    {   // We have buffered data, iterate the chain of buffered records\n+      return nextBuffered(txs);\n     }\n \n-    private boolean nextBuffered( TransactionState txs )\n+    do\n     {\n-        do\n-        {\n-            buffer = buffer.next;\n-            if ( !hasBufferedData() )\n-            {\n-                reset();\n-                return false;\n-            }\n-            else\n-            {\n-                // Copy buffer data to self\n-                copyFromBuffer();\n-            }\n-        } while ( txs != null && txs.relationshipIsDeletedInThisTx( getId() ) );\n-\n-        return true;\n+      if (traversingDenseNode())\n+      {\n+        traverseDenseNode();\n+      }\n+\n+      if (next == NO_ID)\n+      {\n+        reset();\n+        return false;\n+      }\n+\n+      read.relationshipFull(this, next, pageCursor);\n+      computeNext();\n+\n+    } while ((filterStore && !correctTypeAndDirection()) ||\n+        (hasChanges && txs.relationshipIsDeletedInThisTx(getId())));\n+\n+    return true;\n+  }\n+\n+  private void setupFilterState()\n+  {\n+    filterType = getType();\n+    final long source = sourceNodeReference(), target = targetNodeReference();\n+    if (source == target)\n+    {\n+      next = getFirstNextRel();\n+      filterState = FilterState.LOOP;\n+    } else if (source == originNodeReference)\n+    {\n+      next = getFirstNextRel();\n+      filterState = FilterState.OUTGOING;\n+    } else if (target == originNodeReference)\n+    {\n+      next = getSecondNextRel();\n+      filterState = FilterState.INCOMING;\n     }\n+  }\n \n-    private void traverseDenseNode()\n+  private boolean nextBuffered(TransactionState txs)\n+  {\n+    do\n+    {\n+      buffer = buffer.next;\n+      if (!hasBufferedData())\n+      {\n+        reset();\n+        return false;\n+      } else\n+      {\n+        // Copy buffer data to self\n+        copyFromBuffer();\n+      }\n+    } while (txs != null && txs.relationshipIsDeletedInThisTx(getId()));\n+\n+    return true;\n+  }\n+\n+  private void traverseDenseNode()\n+  {\n+    while (next == NO_ID)\n     {\n-        while ( next == NO_ID )\n-        {\n              /*\n               Dense nodes looks something like:\n \n@@ -408,215 +403,209 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n               7) Iterate relationship chain until we reach the end\n               8) GOTO 1\n              */\n-            switch ( groupState )\n-            {\n-            case INCOMING:\n-                boolean hasNext = group.next();\n-                if ( !hasNext )\n-                {\n-                    assert next == NO_ID;\n-                    return; // no more groups nor relationships\n-                }\n-                next = group.incomingRawId();\n-                if ( pageCursor == null )\n-                {\n-                    pageCursor = read.relationshipPage( Math.max( next, 0L ) );\n-                }\n-                groupState = GroupState.OUTGOING;\n-                break;\n-\n-            case OUTGOING:\n-                next = group.outgoingRawId();\n-                groupState = GroupState.LOOP;\n-                break;\n-\n-            case LOOP:\n-                next = group.loopsRawId();\n-                groupState = GroupState.INCOMING;\n-                break;\n-\n-            default:\n-                throw new IllegalStateException( \"We cannot get here, but checkstyle forces this!\" );\n-            }\n-        }\n-    }\n-\n-    private void computeNext()\n-    {\n-        final long source = sourceNodeReference(), target = targetNodeReference();\n-        if ( source == originNodeReference )\n-        {\n-            next = getFirstNextRel();\n-        }\n-        else if ( target == originNodeReference )\n-        {\n-            next = getSecondNextRel();\n-        }\n-        else\n-        {\n-            throw new IllegalStateException( \"NOT PART OF CHAIN! \" + this );\n-        }\n+      switch (groupState)\n+      {\n+        case INCOMING:\n+          boolean hasNext = group.next();\n+          if (!hasNext)\n+          {\n+            assert next == NO_ID;\n+            return; // no more groups nor relationships\n+          }\n+          next = group.incomingRawId();\n+          if (pageCursor == null)\n+          {\n+            pageCursor = read.relationshipPage(Math.max(next, 0L));\n+          }\n+          groupState = GroupState.OUTGOING;\n+          break;\n+\n+        case OUTGOING:\n+          next = group.outgoingRawId();\n+          groupState = GroupState.LOOP;\n+          break;\n+\n+        case LOOP:\n+          next = group.loopsRawId();\n+          groupState = GroupState.INCOMING;\n+          break;\n+\n+        default:\n+          throw new IllegalStateException(\"We cannot get here, but checkstyle forces this!\");\n+      }\n     }\n+  }\n \n-    private boolean correctTypeAndDirection()\n+  private void computeNext()\n+  {\n+    final long source = sourceNodeReference(), target = targetNodeReference();\n+    if (source == originNodeReference)\n     {\n-        return filterType == getType() &&\n-               filterState.check( sourceNodeReference(), targetNodeReference(), originNodeReference );\n-    }\n-\n-    private void copyFromBuffer()\n+      next = getFirstNextRel();\n+    } else if (target == originNodeReference)\n     {\n-        this.setId( buffer.id );\n-        this.setType( buffer.type );\n-        this.setNextProp( buffer.nextProp );\n-        this.setFirstNode( buffer.firstNode );\n-        this.setSecondNode( buffer.secondNode );\n-    }\n-\n-    private boolean traversingDenseNode()\n+      next = getSecondNextRel();\n+    } else\n     {\n-        return groupState != GroupState.NONE;\n+      throw new IllegalStateException(\"NOT PART OF CHAIN! \" + this);\n     }\n-\n-    @Override\n-    public void close()\n+  }\n+\n+  private boolean correctTypeAndDirection()\n+  {\n+    return filterType == getType() &&\n+        filterState.check(sourceNodeReference(), targetNodeReference(), originNodeReference);\n+  }\n+\n+  private void copyFromBuffer()\n+  {\n+    this.setId(buffer.id);\n+    this.setType(buffer.type);\n+    this.setNextProp(buffer.nextProp);\n+    this.setFirstNode(buffer.firstNode);\n+    this.setSecondNode(buffer.secondNode);\n+  }\n+\n+  private boolean traversingDenseNode()\n+  {\n+    return groupState != GroupState.NONE;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    super.close();\n+    if (!isClosed())\n     {\n-        super.close();\n-        if ( !isClosed() )\n-        {\n-            read = null;\n-            buffer = null;\n-            reset();\n+      read = null;\n+      buffer = null;\n+      reset();\n \n-            pool.accept( this );\n-        }\n+      pool.accept(this);\n     }\n-\n-    private void reset()\n-    {\n-        setId( next = NO_ID );\n-        groupState = GroupState.NONE;\n-        filterState = FilterState.NONE;\n-        filterType = NO_ID;\n-        filterStore = false;\n-        buffer = null;\n-    }\n-\n-    @Override\n-    protected void collectAddedTxStateSnapshot()\n+  }\n+\n+  private void reset()\n+  {\n+    setId(next = NO_ID);\n+    groupState = GroupState.NONE;\n+    filterState = FilterState.NONE;\n+    filterType = NO_ID;\n+    filterStore = false;\n+    buffer = null;\n+  }\n+\n+  @Override\n+  protected void collectAddedTxStateSnapshot()\n+  {\n+    if (filterState == FilterState.NOT_INITIALIZED)\n     {\n-        if ( filterState == FilterState.NOT_INITIALIZED )\n-        {\n-            read.relationshipFull( this, next, pageCursor );\n-            setupFilterState();\n-        }\n-\n-        NodeState nodeState = read.txState().getNodeState( originNodeReference );\n-        addedRelationships = hasTxStateFilter() ?\n-                             nodeState.getAddedRelationships( filterState.direction, filterType ) :\n-                             nodeState.getAddedRelationships();\n+      read.relationshipFull(this, next, pageCursor);\n+      setupFilterState();\n     }\n \n-    private boolean hasTxStateFilter()\n+    NodeState nodeState = read.txState().getNodeState(originNodeReference);\n+    addedRelationships = hasTxStateFilter() ?\n+        nodeState.getAddedRelationships(filterState.direction, filterType) :\n+        nodeState.getAddedRelationships();\n+  }\n+\n+  private boolean hasTxStateFilter()\n+  {\n+    return filterState != FilterState.NONE;\n+  }\n+\n+  @Override\n+  public boolean isClosed()\n+  {\n+    return read == null && !hasBufferedData();\n+  }\n+\n+  public void release()\n+  {\n+    if (pageCursor != null)\n     {\n-        return filterState != FilterState.NONE;\n+      pageCursor.close();\n+      pageCursor = null;\n     }\n \n-    @Override\n-    public boolean isClosed()\n-    {\n-        return read == null && !hasBufferedData();\n-    }\n+    group.release();\n+  }\n \n-    public void release()\n+  @Override\n+  public String toString()\n+  {\n+    if (isClosed())\n     {\n-        if ( pageCursor != null )\n-        {\n-            pageCursor.close();\n-            pageCursor = null;\n-        }\n-\n-        group.release();\n-    }\n-\n-    @Override\n-    public String toString()\n+      return \"RelationshipTraversalCursor[closed state]\";\n+    } else\n     {\n-        if ( isClosed() )\n-        {\n-            return \"RelationshipTraversalCursor[closed state]\";\n-        }\n-        else\n-        {\n-            String dense = \"denseNode=\" + traversingDenseNode();\n-            String mode = \"mode=\";\n-\n-            if ( hasBufferedData() )\n-            {\n-                mode = mode + \"bufferedData\";\n-            }\n-            else if ( filterStore )\n-            {\n-                mode = mode + \"filterStore\";\n-            }\n-            else\n-            {\n-                mode = mode + \"regular\";\n-            }\n-            return \"RelationshipTraversalCursor[id=\" + getId() + \", open state with: \" + dense + \", next=\" + next + \", \" + mode + \", underlying record=\" +\n-                    super.toString() + \" ]\";\n-        }\n+      String dense = \"denseNode=\" + traversingDenseNode();\n+      String mode = \"mode=\";\n+\n+      if (hasBufferedData())\n+      {\n+        mode = mode + \"bufferedData\";\n+      } else if (filterStore)\n+      {\n+        mode = mode + \"filterStore\";\n+      } else\n+      {\n+        mode = mode + \"regular\";\n+      }\n+      return \"RelationshipTraversalCursor[id=\" + getId() + \", open state with: \" + dense + \", next=\" + next + \", \" + mode + \", underlying record=\" +\n+          super.toString() + \" ]\";\n     }\n+  }\n+\n+  private boolean hasBufferedData()\n+  {\n+    return buffer != null;\n+  }\n+\n+  /*\n+   * Record is both a data holder for buffering data from a RelationshipRecord\n+   * as well as a linked list over the records in the group.\n+   */\n+  static class Record\n+  {\n+    private static final RelationshipRecord DUMMY = null;\n+    final long id;\n+    final int type;\n+    final long nextProp;\n+    final long firstNode;\n+    final long secondNode;\n+    final Record next;\n \n-    private boolean hasBufferedData()\n+    /*\n+     * Initialize the chain of records\n+     */\n+    static Record initialize(Record first)\n     {\n-        return buffer != null;\n+      return new Record(DUMMY, first);\n     }\n \n     /*\n-     * Record is both a data holder for buffering data from a RelationshipRecord\n-     * as well as a linked list over the records in the group.\n+     * Initialize the record chain or push a new record as the new head of the record chain\n      */\n-    static class Record\n+    Record(RelationshipRecord record, Record next)\n     {\n-        private static final RelationshipRecord DUMMY = null;\n-        final long id;\n-        final int type;\n-        final long nextProp;\n-        final long firstNode;\n-        final long secondNode;\n-        final Record next;\n-\n-        /*\n-         * Initialize the chain of records\n-         */\n-        static Record initialize( Record first )\n-        {\n-            return new Record( DUMMY, first );\n-        }\n-\n-        /*\n-         * Initialize the record chain or push a new record as the new head of the record chain\n-         */\n-        Record( RelationshipRecord record, Record next )\n-        {\n-            if ( record != null )\n-            {\n-                id = record.getId();\n-                type = record.getType();\n-                nextProp = record.getNextProp();\n-                firstNode = record.getFirstNode();\n-                secondNode = record.getSecondNode();\n-            }\n-            else\n-            {\n-                id = NO_ID;\n-                type = NO_ID;\n-                nextProp = NO_ID;\n-                firstNode = NO_ID;\n-                secondNode = NO_ID;\n-            }\n-            this.next = next;\n-        }\n+      if (record != null)\n+      {\n+        id = record.getId();\n+        type = record.getType();\n+        nextProp = record.getNextProp();\n+        firstNode = record.getFirstNode();\n+        secondNode = record.getSecondNode();\n+      } else\n+      {\n+        id = NO_ID;\n+        type = NO_ID;\n+        nextProp = NO_ID;\n+        firstNode = NO_ID;\n+        secondNode = NO_ID;\n+      }\n+      this.next = next;\n     }\n+  }\n }\n",
            "diff_size": 755
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "326",
                    "column": "61",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "456",
                    "column": "40",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "555",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/90/DefaultRelationshipTraversalCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/90/DefaultRelationshipTraversalCursor.java\nindex ab49256c985..6c9277d21c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/90/DefaultRelationshipTraversalCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/90/DefaultRelationshipTraversalCursor.java\n@@ -30,14 +30,11 @@ import org.neo4j.storageengine.api.txstate.NodeState;\n \n import static java.lang.String.format;\n \n-class DefaultRelationshipTraversalCursor extends RelationshipCursor\n-        implements RelationshipTraversalCursor\n+class DefaultRelationshipTraversalCursor extends RelationshipCursor implements RelationshipTraversalCursor\n {\n     private enum GroupState\n     {\n-        INCOMING,\n-        OUTGOING,\n-        LOOP,\n+        INCOMING, OUTGOING, LOOP,\n         NONE\n     }\n \n@@ -45,43 +42,39 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n     {\n         // need filter, and need to read filter state from first store relationship\n         NOT_INITIALIZED( RelationshipDirection.ERROR )\n-                {\n+{\n                     @Override\n                     boolean check( long source, long target, long origin )\n                     {\n                         throw new IllegalStateException( \"Cannot call check on uninitialized filter\" );\n                     }\n-                },\n-        // allow only incoming relationships\n+                }, // allow only incoming relationships\n         INCOMING( RelationshipDirection.INCOMING )\n-                {\n+{\n                     @Override\n                     boolean check( long source, long target, long origin )\n                     {\n                         return origin == target && source != target;\n                     }\n-                },\n-        // allow only outgoing relationships\n+                }, // allow only outgoing relationships\n         OUTGOING( RelationshipDirection.OUTGOING )\n-                {\n+{\n                     @Override\n                     boolean check( long source, long target, long origin )\n                     {\n                         return origin == source && source != target;\n                     }\n-                },\n-        // allow only loop relationships\n+                }, // allow only loop relationships\n         LOOP( RelationshipDirection.LOOP )\n-                {\n+{\n                     @Override\n                     boolean check( long source, long target, long origin )\n                     {\n                         return source == target;\n                     }\n-                },\n-        // no filtering required\n+                }, // no filtering required\n         NONE( RelationshipDirection.ERROR )\n-                {\n+{\n                     @Override\n                     boolean check( long source, long target, long origin )\n                     {\n@@ -89,7 +82,7 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n                     }\n                 };\n \n-        abstract boolean check( long source, long target, long origin );\n+abstract boolean check( long source, long target, long origin );\n \n         private final RelationshipDirection direction;\n \n@@ -111,9 +104,8 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n             case ERROR:\n                 throw new IllegalArgumentException( \"There has been a RelationshipDirection.ERROR\" );\n             default:\n-                throw new IllegalStateException(\n-                        format( \"Still poking my eye, dear checkstyle... (cannot filter on direction '%s')\", direction ) );\n-            }\n+                throw new IllegalStateException( format( \"Still poking my eye, dear checkstyle... (cannot filter on direction '%s')\", direction ) );\n+    }\n         }\n     }\n \n@@ -146,7 +138,8 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n         this.groupState = GroupState.NONE;\n         this.filterState = FilterState.fromRelationshipDirection( direction );\n         this.filterType = type;\n-        init( read );\n+\n+init( read );\n         this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n     }\n \n@@ -159,13 +152,15 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n         {\n             pageCursor = read.relationshipPage( reference );\n         }\n-        setId( NO_ID );\n+\n+setId( NO_ID );\n         this.groupState = GroupState.NONE;\n         this.filterState = FilterState.NONE;\n         this.filterType = NO_ID;\n         this.originNodeReference = nodeReference;\n         this.next = reference;\n-        init( read );\n+\n+init( read );\n         this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n     }\n \n@@ -195,13 +190,15 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n         {\n             pageCursor = read.relationshipPage( reference );\n         }\n-        setId( NO_ID );\n+\n+setId( NO_ID );\n         this.groupState = GroupState.NONE;\n         this.filterState = FilterState.NOT_INITIALIZED;\n         this.filterStore = filterStore;\n         this.originNodeReference = nodeReference;\n         this.next = reference;\n-        init( read );\n+\n+init( read );\n         this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n     }\n \n@@ -217,7 +214,8 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n         this.filterStore = false;\n         this.originNodeReference = nodeReference;\n         this.next = NO_ID;\n-        init( read );\n+\n+init( read );\n         this.addedRelationships = PrimitiveLongCollections.emptyIterator();\n     }\n \n@@ -305,7 +303,8 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n         }\n \n         if ( hasBufferedData() )\n-        {   // We have buffered data, iterate the chain of buffered records\n+        {\n+    // We have buffered data, iterate the chain of buffered records\n             return nextBuffered( txs );\n         }\n \n@@ -324,11 +323,8 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n \n             read.relationshipFull( this, next, pageCursor );\n             computeNext();\n-\n-        } while ( ( filterStore && !correctTypeAndDirection() ) ||\n-                  ( hasChanges && txs.relationshipIsDeletedInThisTx( getId() ) ) );\n-\n-        return true;\n+    } while ( ( filterStore && !correctTypeAndDirection() ) ||( hasChanges && txs.relationshipIsDeletedInThisTx( getId() ) ) );\n+return true;\n     }\n \n     private void setupFilterState()\n@@ -368,15 +364,14 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n                 copyFromBuffer();\n             }\n         } while ( txs != null && txs.relationshipIsDeletedInThisTx( getId() ) );\n-\n-        return true;\n+return true;\n     }\n \n     private void traverseDenseNode()\n     {\n         while ( next == NO_ID )\n         {\n-             /*\n+    /*\n               Dense nodes looks something like:\n \n                     Node(dense=true)\n@@ -408,7 +403,7 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n               7) Iterate relationship chain until we reach the end\n               8) GOTO 1\n              */\n-            switch ( groupState )\n+switch ( groupState )\n             {\n             case INCOMING:\n                 boolean hasNext = group.next();\n@@ -422,20 +417,18 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n                 {\n                     pageCursor = read.relationshipPage( Math.max( next, 0L ) );\n                 }\n-                groupState = GroupState.OUTGOING;\n-                break;\n \n-            case OUTGOING:\n+groupState = GroupState.OUTGOING;\n+                break;\n+    case OUTGOING:\n                 next = group.outgoingRawId();\n                 groupState = GroupState.LOOP;\n                 break;\n-\n-            case LOOP:\n+    case LOOP:\n                 next = group.loopsRawId();\n                 groupState = GroupState.INCOMING;\n                 break;\n-\n-            default:\n+    default:\n                 throw new IllegalStateException( \"We cannot get here, but checkstyle forces this!\" );\n             }\n         }\n@@ -460,8 +453,7 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n \n     private boolean correctTypeAndDirection()\n     {\n-        return filterType == getType() &&\n-               filterState.check( sourceNodeReference(), targetNodeReference(), originNodeReference );\n+        return filterType == getType() &&filterState.check( sourceNodeReference(), targetNodeReference(), originNodeReference );\n     }\n \n     private void copyFromBuffer()\n@@ -487,8 +479,7 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n             read = null;\n             buffer = null;\n             reset();\n-\n-            pool.accept( this );\n+pool.accept( this );\n         }\n     }\n \n@@ -512,9 +503,7 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n         }\n \n         NodeState nodeState = read.txState().getNodeState( originNodeReference );\n-        addedRelationships = hasTxStateFilter() ?\n-                             nodeState.getAddedRelationships( filterState.direction, filterType ) :\n-                             nodeState.getAddedRelationships();\n+        addedRelationships = hasTxStateFilter() ? nodeState.getAddedRelationships( filterState.direction, filterType ) : nodeState.getAddedRelationships();\n     }\n \n     private boolean hasTxStateFilter()\n@@ -563,9 +552,8 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n             {\n                 mode = mode + \"regular\";\n             }\n-            return \"RelationshipTraversalCursor[id=\" + getId() + \", open state with: \" + dense + \", next=\" + next + \", \" + mode + \", underlying record=\" +\n-                    super.toString() + \" ]\";\n-        }\n+            return \"RelationshipTraversalCursor[id=\" + getId() + \", open state with: \" + dense + \", next=\" + next + \", \" + mode + \", underlying record=\" + super.toString() + \" ]\";\n+    }\n     }\n \n     private boolean hasBufferedData()\n@@ -619,4 +607,4 @@ class DefaultRelationshipTraversalCursor extends RelationshipCursor\n             this.next = next;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}