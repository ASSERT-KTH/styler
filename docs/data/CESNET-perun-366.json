{
    "project_name": "CESNET-perun",
    "error_id": "366",
    "information": {
        "errors": [
            {
                "line": "387",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t * @throws ServiceNotAssignedException\n\t */\n\tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException,\n\t\t\t ServiceNotExistsException, ServiceNotAssignedException;\n\n\t/**",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/366/ResourcesManagerBl.java\nindex 5dbed8601bc..db845ac83f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/366/ResourcesManagerBl.java\n@@ -385,7 +385,7 @@ public interface ResourcesManagerBl {\n \t * @throws ServiceNotAssignedException\n \t */\n \tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException,\n-\t\t\t ServiceNotExistsException, ServiceNotAssignedException;\n+\t\t\tServiceNotExistsException, ServiceNotAssignedException;\n \n \t/**\n \t * Remove from resource all services from services package.\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/366/ResourcesManagerBl.java\nindex 5dbed8601bc..672130e43a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/366/ResourcesManagerBl.java\n@@ -8,962 +8,920 @@ import cz.metacentrum.perun.core.api.exceptions.*;\n /**\n  * Manages resources.\n  *\n- * @author  Slavek Licehammer\n+ * @author Slavek Licehammer\n  */\n public interface ResourcesManagerBl {\n \n-\t/**\n-\t * Searches for the Resource with specified id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return Resource with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tResource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Searches for the RichResource with specified id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return RichResource with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tRichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Return resource by its name.\n-\t *\n-\t * @param sess\n-\t * @param name\n-\t * @param vo\n-\t * @param facility\n-\t * @return resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tResource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Inserts resource into DB.\n-\t *\n-\t * @param resource resource to create\n-\t * @throws InternalErrorException\n-\t */\n-\tResource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, FacilityNotExistsException, ResourceExistsException;\n-\n-\t/**\n-\t * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n-\t * Resource can be from any of user's facilities.\n-\t *\n-\t * @param perunSession\n-\t * @param templateResource \"template\" resource\n-\t * @param destinationResource destination resource\n-\t * @param withGroups if set to true and resources ARE from the same VO we also copy all group-resource and member-resource attributes,\n-\t *                   if set to true and resources ARE NOT from the same VO we copy resource only attributes,\n-\t *                   if set to false we copy resource only attributes.\n-\t */\n-\tResource copyResource(PerunSession perunSession, Resource templateResource, Resource destinationResource, boolean withGroups) throws ResourceExistsException, InternalErrorException;\n-\n-\t/**\n-\t *  Deletes resource by id.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n-\t */\n-\tvoid deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t *  Deletes all resources for the VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there is at least 1 resource not affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n-\t */\n-\tvoid deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Get facility which belongs to the concrete resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return facility belonging to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tFacility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Set Facility to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get Vo which is tied to specified resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return vo tied to specified resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tVo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is assigned to the current resource, false otherwise.\n-\t * @param sess\n-\t * @param user\n-\t * @param resource\n-\t * @return true if the user is assigned to the current resource.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserAssigned(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is allowed to the current resource, false otherwise.\n-\t * @param sess\n-\t * @param user\n-\t * @param resource\n-\t * @return true if the user is allowed to the current resource.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserAllowed(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the group is assigned to the current resource, false otherwise.\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @return true if the group is assigned to the current resource.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isGroupAssigned(PerunSession sess, Group group, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all members who can access the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getAssignedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource as RichMembers.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of rich members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getAssignedRichMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all users, who can assess the resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of resources\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param group the group\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove group from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotDefinedOnResourceException Group was never assigned to this resource\n-\t * @throws GroupAlreadyRemovedFromResourceException there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove groups from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of groups\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove group from resources.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param group the group\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupFromResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * List all groups associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @return list of assigned group\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * List all groups associated with the resource where Member is a member.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param member\n-\t *\n-\t * @return list of assigned groups\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getAssignedGroups(PerunSession perunSession, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * List all resources associated with the group.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * List all rich resources associated with the group with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * List all services associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @return list of assigned resources\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Assign service to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyAssignedException\n-\t */\n-\tvoid assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Assign all services from services package to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServicesPackageNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Remove service from resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotAssignedException\n-\t */\n-\tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException,\n-\t\t\t ServiceNotExistsException, ServiceNotAssignedException;\n-\n-\t/**\n-\t * Remove from resource all services from services package.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get all VO resources.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\n-\t * @throws InternalErrorException\n-\t * @return list of resources\n-\t */\n-\tList<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all VO rich resources with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\n-\t * @throws InternalErrorException\n-\t * @return list of rich resources\n-\t */\n-\tList<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get list of resources by theirs IDs.\n-\t *\n-\t * @param sess\n-\t * @param resourcesIds\n-\t * @return list of resources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getResourcesByIds(PerunSession sess, List<Integer> resourcesIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all VO resources count.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\n-\t * @throws InternalErrorException\n-\t * @return count fo vo resources\n-\t */\n-\tint getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get count of all resources.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getResourcesCount(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all resource which have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<Resource> getResourcesByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all resources which have the member access on.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of resources which have the member access on\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all resources which are under the facility and has member of the user with status other than INVALID.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t *\n-\t * @return list of resources allowed for user (user has there member with status other than INVALID)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources where the member is assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources where the member and the service are assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n-\n-\t/**\n-\t * Return List of assigned resources to user on the vo.\n-\t * If user is not member of Vo, return empty List;\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param vo\n-\t * @return return list of assigned resources or empty list if user is not member of Vo\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, User user, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all rich resources where the member is assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all rich resources where the service and the member are assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n-\n-\t/**\n-\t * Updates Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return returns updated Resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceExistsException\n-\t */\n-\tResource updateResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceExistsException;\n-\n-\n-\t/**\n-\t * Create new Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param vo\n-\t * @return new created resourceTag\n-\t * @throws InternalErrorException\n-\t */\n-\tResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Update existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return updated ResourceTag\n-\t * @throws InternalErrorException\n-\t */\n-\tResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n-\n-\t/**\n-\t * Delete existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Delete all ResourcesTags for specific VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign existing ResourceTag on existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove specific ResourceTag from existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagNotAssignedException\n-\t */\n-\tvoid removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagNotAssignedException;\n-\n-\t/**\n-\t * Remove all existing Resource tags for specific resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return list of Resources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Vo.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @return list of all resourcesTags for existing Vo\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Resource\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of ResourcesTags\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Copy all attributes of the source resource to the destination resource.\n-\t * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common attributes are replaced with attributes from the source resource.\n-\t * The virtual attributes are not copied.\n-\t *\n-\t * @param sess\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all services of the source resource to the destination resource.\n-\t * The services, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common services are replaced with services from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tpublic void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all groups of the source resource to the destination resource.\n-\t * The groups, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common groups are replaced with the groups from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException;\n-\n-\n-\tvoid checkResourceExists(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException;\n-\n-\tvoid checkResourceTagExists(PerunSession sess, ResourceTag resourceTag) throws InternalErrorException, ResourceTagNotExistsException;\n-\n-\t/**\n-\t * Get list of all user administrators for supported role and given resource.\n-\t *\n-\t * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of all user administrators of the given resource for supported role\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException;\n-\n-\t/**\n-\t * Get list of all richUser administrators for the resource and supported role with specific attributes.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @param specificAttributes list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of RichUser administrators for the resource and supported role with attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of resources, where the user is an admin.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources, where the user is an admin.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all group administrators of the Resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of Groups that are admins in the resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Add role resource admin to user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Add role resource admin to group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Remove role resource admin from user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException;\n-\n-\t/**\n-\t * Remove role resource admin from group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException;\n-\n-\t/**\n-\t * Set ban for member on resource\n-\t *\n-\t * @param sess\n-\t * @param banOnresource the ban\n-\t * @return ban on resource\n-\t * @throws InternalErrorException\n-\t * @throws BanAlreadyExistsException\n-\t */\n-\tBanOnResource setBan(PerunSession sess, BanOnResource banOnresource) throws InternalErrorException, BanAlreadyExistsException;\n-\n-\t/**\n-\t * Get Ban for member on resource by it's id\n-\t *\n-\t * @param sess\n-\t * @param banId the ban id\n-\t * @return resource ban by it's id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tBanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Get true if any ban for member and resource exists.\n-\t *\n-\t * @param sess\n-\t * @param memberId id of member\n-\t * @param resourceId id of resource\n-\t * @return true if ban exists\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean banExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException;\n-\n-\t/**\n-\t * Get true if any band defined by id exists for any user and facility.\n-\t *\n-\t * @param sess\n-\t * @param banId id of ban\n-\t * @return true if ban exists\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean banExists(PerunSession sess, int banId) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if ban already exists.\n-\t *\n-\t * Throw exception if no.\n-\t *\n-\t * @param sess\n-\t * @param memberId user id\n-\t * @param resourceId facility id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid checkBanExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Check if ban already exists.\n-\t *\n-\t * Throw exception if no.\n-\t *\n-\t * @param sess\n-\t * @param banId ban id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid checkBanExists(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Get specific resource ban.\n-\t *\n-\t * @param sess\n-\t * @param memberId the member id\n-\t * @param resourceId the resource id\n-\t * @return specific resource ban\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tBanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Get all resources bans for member.\n-\t *\n-\t * @param sess\n-\t * @param memberId the member id\n-\t * @return list of bans for member on any resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all members bans for resource\n-\t *\n-\t * @param sess\n-\t * @param resourceId the resource id\n-\t * @return list of all members bans on resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all expired bans on any resource to now date\n-\t *\n-\t * @param sess\n-\t * @return list of expired bans for any resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<BanOnResource> getAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Update description and validity timestamp of specific ban.\n-\t *\n-\t * @param sess\n-\t * @param banOnResource ban to be updated\n-\t * @return updated ban\n-\t * @throws InternalErrorException\n-\t */\n-\tBanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove ban by id from resources bans.\n-\t *\n-\t * @param sess\n-\t * @param banId id of specific ban\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid removeBan(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Remove ban by member_id and facility_id\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @param resourceId the id of resource\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Remove all expired bans on resources to now date.\n-\t *\n-\t * Get all expired bans and remove them one by one with auditing process.\n-\t * This method is for purpose of removing expired bans using some cron tool.\n-\t *\n-\t * @param sess\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n+    /**\n+     * Searches for the Resource with specified id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return Resource with specified id\n+     * @throws InternalErrorException\n+     */\n+    Resource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n+\n+    /**\n+     * Searches for the RichResource with specified id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return RichResource with specified id\n+     * @throws InternalErrorException\n+     */\n+    RichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n+\n+    /**\n+     * Return resource by its name.\n+     *\n+     * @param sess\n+     * @param name\n+     * @param vo\n+     * @param facility\n+     * @return resource\n+     * @throws InternalErrorException\n+     * @throws ResourceNotExistsException\n+     */\n+    Resource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException;\n+\n+    /**\n+     * Inserts resource into DB.\n+     *\n+     * @param resource resource to create\n+     * @throws InternalErrorException\n+     */\n+    Resource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, FacilityNotExistsException, ResourceExistsException;\n+\n+    /**\n+     * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n+     * Resource can be from any of user's facilities.\n+     *\n+     * @param perunSession\n+     * @param templateResource    \"template\" resource\n+     * @param destinationResource destination resource\n+     * @param withGroups          if set to true and resources ARE from the same VO we also copy all group-resource and member-resource attributes,\n+     *                            if set to true and resources ARE NOT from the same VO we copy resource only attributes,\n+     *                            if set to false we copy resource only attributes.\n+     */\n+    Resource copyResource(PerunSession perunSession, Resource templateResource, Resource destinationResource, boolean withGroups) throws ResourceExistsException, InternalErrorException;\n+\n+    /**\n+     * Deletes resource by id.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws RelationExistsException\n+     * @throws ResourceAlreadyRemovedException          if there are 0 rows affected by deleting from DB\n+     * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n+     */\n+    void deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * Deletes all resources for the VO.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @throws InternalErrorException\n+     * @throws RelationExistsException\n+     * @throws ResourceAlreadyRemovedException          if there is at least 1 resource not affected by deleting from DB\n+     * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n+     */\n+    void deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * Get facility which belongs to the concrete resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return facility belonging to the resource\n+     * @throws InternalErrorException\n+     */\n+    Facility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Set Facility to resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param facility\n+     * @throws InternalErrorException\n+     */\n+    void setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException;\n+\n+    /**\n+     * Get Vo which is tied to specified resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return vo tied to specified resource\n+     * @throws InternalErrorException\n+     */\n+    Vo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Returns true if the user is assigned to the current resource, false otherwise.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param resource\n+     * @return true if the user is assigned to the current resource.\n+     * @throws InternalErrorException\n+     */\n+    boolean isUserAssigned(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Returns true if the user is allowed to the current resource, false otherwise.\n+     *\n+     * @param sess\n+     * @param user\n+     * @param resource\n+     * @return true if the user is allowed to the current resource.\n+     * @throws InternalErrorException\n+     */\n+    boolean isUserAllowed(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Returns true if the group is assigned to the current resource, false otherwise.\n+     *\n+     * @param sess\n+     * @param group\n+     * @param resource\n+     * @return true if the group is assigned to the current resource.\n+     * @throws InternalErrorException\n+     */\n+    boolean isGroupAssigned(PerunSession sess, Group group, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Returns all members who can access the resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of members assigned to the resource\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Returns all members assigned to the resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of members assigned to the resource\n+     * @throws InternalErrorException\n+     */\n+    List<Member> getAssignedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Returns all members assigned to the resource as RichMembers.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of rich members assigned to the resource\n+     * @throws InternalErrorException\n+     */\n+    List<RichMember> getAssignedRichMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Get all users, who can assess the resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @return list of users\n+     * @throws InternalErrorException\n+     */\n+    List<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws GroupAlreadyAssignedException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    void assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+    /**\n+     * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n+     *\n+     * @param perunSession\n+     * @param groups       list of resources\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws GroupAlreadyAssignedException\n+     */\n+    void assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+    /**\n+     * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n+     *\n+     * @param perunSession\n+     * @param group        the group\n+     * @param resources    list of resources\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeValueException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws GroupAlreadyAssignedException\n+     */\n+    void assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+    /**\n+     * Remove group from a resource.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @param resource\n+     * @throws InternalErrorException                   Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n+     * @throws ResourceNotExistsException\n+     * @throws GroupNotDefinedOnResourceException       Group was never assigned to this resource\n+     * @throws GroupAlreadyRemovedFromResourceException there are 0 rows affected by deleting from DB\n+     */\n+    void removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * Remove groups from a resource.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param perunSession\n+     * @param groups       list of groups\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws GroupNotDefinedOnResourceException\n+     * @throws GroupAlreadyRemovedFromResourceException\n+     */\n+    void removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * Remove group from resources.\n+     * After removing, check attributes and fix them if it is needed.\n+     *\n+     * @param perunSession\n+     * @param group        the group\n+     * @param resources    list of resources\n+     * @throws InternalErrorException\n+     * @throws GroupNotDefinedOnResourceException\n+     * @throws GroupAlreadyRemovedFromResourceException\n+     */\n+    void removeGroupFromResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+    /**\n+     * List all groups associated with the resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of assigned group\n+     * @throws InternalErrorException\n+     */\n+    List<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * List all groups associated with the resource where Member is a member.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param member\n+     * @return list of assigned groups\n+     * @throws InternalErrorException\n+     */\n+    List<Group> getAssignedGroups(PerunSession perunSession, Resource resource, Member member) throws InternalErrorException;\n+\n+    /**\n+     * List all resources associated with the group.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @return list of assigned resources\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException;\n+\n+    /**\n+     * List all rich resources associated with the group with facility property filled.\n+     *\n+     * @param perunSession\n+     * @param group\n+     * @return list of assigned rich resources\n+     * @throws InternalErrorException\n+     */\n+    List<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException;\n+\n+    /**\n+     * List all services associated with the resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of assigned resources\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Assign service to resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param service\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws ServiceNotExistsException\n+     * @throws ServiceAlreadyAssignedException\n+     */\n+    void assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Assign all services from services package to resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param servicesPackage\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     * @throws ServicesPackageNotExistsException\n+     * @throws InternalErrorException\n+     */\n+    void assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Remove service from resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param service\n+     * @throws InternalErrorException\n+     * @throws ServiceNotAssignedException\n+     */\n+    void removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException,\n+            ServiceNotExistsException, ServiceNotAssignedException;\n+\n+    /**\n+     * Remove from resource all services from services package.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param servicesPackage\n+     * @throws InternalErrorException\n+     */\n+    void removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException;\n+\n+    /**\n+     * Get all VO resources.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get all VO rich resources with facility property filled.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return list of rich resources\n+     * @throws InternalErrorException\n+     */\n+    List<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get list of resources by theirs IDs.\n+     *\n+     * @param sess\n+     * @param resourcesIds\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getResourcesByIds(PerunSession sess, List<Integer> resourcesIds) throws InternalErrorException;\n+\n+    /**\n+     * Get all VO resources count.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return count fo vo resources\n+     * @throws InternalErrorException\n+     */\n+    int getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get count of all resources.\n+     *\n+     * @param perunSession\n+     * @return count of all resources\n+     * @throws InternalErrorException\n+     */\n+    int getResourcesCount(PerunSession perunSession) throws InternalErrorException;\n+\n+    /**\n+     * Returns all resource which have set the attribute with the value. Searching only def and opt attributes.\n+     *\n+     * @param sess\n+     * @param attribute\n+     * @return\n+     * @throws InternalErrorException\n+     * @throws WrongAttributeAssignmentException\n+     */\n+    List<Resource> getResourcesByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n+\n+    /**\n+     * Get all resources which have the member access on.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return list of resources which have the member access on\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Return all resources which are under the facility and has member of the user with status other than INVALID.\n+     *\n+     * @param sess\n+     * @param facility\n+     * @param user\n+     * @return list of resources allowed for user (user has there member with status other than INVALID)\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+    /**\n+     * Get all resources where the member is assigned.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get all resources where the member and the service are assigned.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param service\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n+\n+    /**\n+     * Return List of assigned resources to user on the vo.\n+     * If user is not member of Vo, return empty List;\n+     *\n+     * @param sess\n+     * @param user\n+     * @param vo\n+     * @return return list of assigned resources or empty list if user is not member of Vo\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, User user, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get all rich resources where the member is assigned with facility property filled.\n+     *\n+     * @param sess\n+     * @param member\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     */\n+    List<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException;\n+\n+    /**\n+     * Get all rich resources where the service and the member are assigned with facility property filled.\n+     *\n+     * @param sess\n+     * @param member\n+     * @param service\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     */\n+    List<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n+\n+    /**\n+     * Updates Resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return returns updated Resource\n+     * @throws InternalErrorException\n+     * @throws ResourceExistsException\n+     */\n+    Resource updateResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceExistsException;\n+\n+\n+    /**\n+     * Create new Resource tag.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @param vo\n+     * @return new created resourceTag\n+     * @throws InternalErrorException\n+     */\n+    ResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Update existing Resource tag.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @return updated ResourceTag\n+     * @throws InternalErrorException\n+     */\n+    ResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n+\n+    /**\n+     * Delete existing Resource tag.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @throws InternalErrorException\n+     * @throws ResourceTagAlreadyAssignedException\n+     */\n+    void deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n+\n+    /**\n+     * Delete all ResourcesTags for specific VO.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @throws InternalErrorException\n+     * @throws ResourceTagAlreadyAssignedException\n+     */\n+    void deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n+\n+    /**\n+     * Assign existing ResourceTag on existing Resource.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws ResourceTagAlreadyAssignedException\n+     */\n+    void assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n+\n+    /**\n+     * Remove specific ResourceTag from existing Resource.\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @param resource\n+     * @throws InternalErrorException\n+     * @throws ResourceTagNotAssignedException\n+     */\n+    void removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagNotAssignedException;\n+\n+    /**\n+     * Remove all existing Resource tags for specific resource.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @throws InternalErrorException\n+     */\n+    void removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n+     *\n+     * @param perunSession\n+     * @param resourceTag\n+     * @return list of Resources\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n+\n+    /**\n+     * Get all resourcesTags for existing Vo.\n+     *\n+     * @param perunSession\n+     * @param vo\n+     * @return list of all resourcesTags for existing Vo\n+     * @throws InternalErrorException\n+     */\n+    List<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+    /**\n+     * Get all resourcesTags for existing Resource\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @return list of ResourcesTags\n+     * @throws InternalErrorException\n+     */\n+    List<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Copy all attributes of the source resource to the destination resource.\n+     * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n+     * The common attributes are replaced with attributes from the source resource.\n+     * The virtual attributes are not copied.\n+     *\n+     * @param sess\n+     * @param sourceResource\n+     * @param destinationResource\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     */\n+    public void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Copy all services of the source resource to the destination resource.\n+     * The services, that are in the destination resource and aren't in the source resource, are retained.\n+     * The common services are replaced with services from source resource.\n+     *\n+     * @param sourceResource\n+     * @param destinationResource\n+     * @throws InternalErrorException\n+     * @throws WrongReferenceAttributeValueException\n+     * @throws WrongAttributeValueException\n+     */\n+    public void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+    /**\n+     * Copy all groups of the source resource to the destination resource.\n+     * The groups, that are in the destination resource and aren't in the source resource, are retained.\n+     * The common groups are replaced with the groups from source resource.\n+     *\n+     * @param sourceResource\n+     * @param destinationResource\n+     * @throws InternalErrorException\n+     */\n+    public void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException;\n+\n+\n+    void checkResourceExists(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException;\n+\n+    void checkResourceTagExists(PerunSession sess, ResourceTag resourceTag) throws InternalErrorException, ResourceTagNotExistsException;\n+\n+    /**\n+     * Get list of all user administrators for supported role and given resource.\n+     * <p>\n+     * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n+     * <p>\n+     * Supported roles: ResourceAdmin, VOAdmin\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+     * @return list of all user administrators of the given resource for supported role\n+     * @throws InternalErrorException\n+     */\n+    List<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException;\n+\n+    /**\n+     * Get list of all richUser administrators for the resource and supported role with specific attributes.\n+     * <p>\n+     * Supported roles: ResourceAdmin, VOAdmin\n+     * <p>\n+     * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n+     * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+     *\n+     * @param perunSession\n+     * @param resource\n+     * @param specificAttributes list of specified attributes which are needed in object richUser\n+     * @param allUserAttributes  if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+     * @param onlyDirectAdmins   if true, get only direct user administrators (if false, get both direct and indirect)\n+     * @return list of RichUser administrators for the resource and supported role with attributes\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     */\n+    List<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException;\n+\n+    /**\n+     * Returns list of resources, where the user is an admin.\n+     *\n+     * @param sess\n+     * @param user\n+     * @return list of resources, where the user is an admin.\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+    /**\n+     * Gets list of all group administrators of the Resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @return list of Groups that are admins in the resource\n+     * @throws InternalErrorException\n+     */\n+    List<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+    /**\n+     * Add role resource admin to user for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws AlreadyAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException;\n+\n+    /**\n+     * Add role resource admin to group for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param group\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws AlreadyAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException;\n+\n+    /**\n+     * Remove role resource admin from user for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param user\n+     * @throws InternalErrorException\n+     * @throws UserNotExistsException\n+     * @throws PrivilegeException\n+     * @throws AlreadyAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException;\n+\n+    /**\n+     * Remove role resource admin from group for the selected resource.\n+     *\n+     * @param sess\n+     * @param resource\n+     * @param group\n+     * @throws InternalErrorException\n+     * @throws GroupNotExistsException\n+     * @throws PrivilegeException\n+     * @throws GroupNotAdminException\n+     * @throws ResourceNotExistsException\n+     */\n+    void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException;\n+\n+    /**\n+     * Set ban for member on resource\n+     *\n+     * @param sess\n+     * @param banOnresource the ban\n+     * @return ban on resource\n+     * @throws InternalErrorException\n+     * @throws BanAlreadyExistsException\n+     */\n+    BanOnResource setBan(PerunSession sess, BanOnResource banOnresource) throws InternalErrorException, BanAlreadyExistsException;\n+\n+    /**\n+     * Get Ban for member on resource by it's id\n+     *\n+     * @param sess\n+     * @param banId the ban id\n+     * @return resource ban by it's id\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     */\n+    BanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n+\n+    /**\n+     * Get true if any ban for member and resource exists.\n+     *\n+     * @param sess\n+     * @param memberId   id of member\n+     * @param resourceId id of resource\n+     * @return true if ban exists\n+     * @throws InternalErrorException\n+     */\n+    boolean banExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException;\n+\n+    /**\n+     * Get true if any band defined by id exists for any user and facility.\n+     *\n+     * @param sess\n+     * @param banId id of ban\n+     * @return true if ban exists\n+     * @throws InternalErrorException\n+     */\n+    boolean banExists(PerunSession sess, int banId) throws InternalErrorException;\n+\n+    /**\n+     * Check if ban already exists.\n+     * <p>\n+     * Throw exception if no.\n+     *\n+     * @param sess\n+     * @param memberId   user id\n+     * @param resourceId facility id\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     */\n+    void checkBanExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n+\n+    /**\n+     * Check if ban already exists.\n+     * <p>\n+     * Throw exception if no.\n+     *\n+     * @param sess\n+     * @param banId ban id\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     */\n+    void checkBanExists(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n+\n+    /**\n+     * Get specific resource ban.\n+     *\n+     * @param sess\n+     * @param memberId   the member id\n+     * @param resourceId the resource id\n+     * @return specific resource ban\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     */\n+    BanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n+\n+    /**\n+     * Get all resources bans for member.\n+     *\n+     * @param sess\n+     * @param memberId the member id\n+     * @return list of bans for member on any resource\n+     * @throws InternalErrorException\n+     */\n+    List<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException;\n+\n+    /**\n+     * Get all members bans for resource\n+     *\n+     * @param sess\n+     * @param resourceId the resource id\n+     * @return list of all members bans on resource\n+     * @throws InternalErrorException\n+     */\n+    List<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException;\n+\n+    /**\n+     * Get all expired bans on any resource to now date\n+     *\n+     * @param sess\n+     * @return list of expired bans for any resource\n+     * @throws InternalErrorException\n+     */\n+    List<BanOnResource> getAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n+\n+    /**\n+     * Update description and validity timestamp of specific ban.\n+     *\n+     * @param sess\n+     * @param banOnResource ban to be updated\n+     * @return updated ban\n+     * @throws InternalErrorException\n+     */\n+    BanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException;\n+\n+    /**\n+     * Remove ban by id from resources bans.\n+     *\n+     * @param sess\n+     * @param banId id of specific ban\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     */\n+    void removeBan(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n+\n+    /**\n+     * Remove ban by member_id and facility_id\n+     *\n+     * @param sess\n+     * @param memberId   the id of member\n+     * @param resourceId the id of resource\n+     * @throws InternalErrorException\n+     * @throws BanNotExistsException\n+     */\n+    void removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n+\n+    /**\n+     * Remove all expired bans on resources to now date.\n+     * <p>\n+     * Get all expired bans and remove them one by one with auditing process.\n+     * This method is for purpose of removing expired bans using some cron tool.\n+     *\n+     * @param sess\n+     * @throws InternalErrorException\n+     */\n+    void removeAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n }\n",
            "diff_size": 955
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/366/ResourcesManagerBl.java\nindex 5dbed8601bc..67e3762cdd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/366/ResourcesManagerBl.java\n@@ -1,7 +1,6 @@\n package cz.metacentrum.perun.core.bl;\n \n import java.util.List;\n-\n import cz.metacentrum.perun.core.api.*;\n import cz.metacentrum.perun.core.api.exceptions.*;\n \n@@ -10,960 +9,1125 @@ import cz.metacentrum.perun.core.api.exceptions.*;\n  *\n  * @author  Slavek Licehammer\n  */\n+\n+\n public interface ResourcesManagerBl {\n \n-\t/**\n-\t * Searches for the Resource with specified id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return Resource with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tResource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Searches for the RichResource with specified id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t *\n-\t * @return RichResource with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tRichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Return resource by its name.\n-\t *\n-\t * @param sess\n-\t * @param name\n-\t * @param vo\n-\t * @param facility\n-\t * @return resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tResource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException;\n-\n-\t/**\n-\t * Inserts resource into DB.\n-\t *\n-\t * @param resource resource to create\n-\t * @throws InternalErrorException\n-\t */\n-\tResource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, FacilityNotExistsException, ResourceExistsException;\n-\n-\t/**\n-\t * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n-\t * Resource can be from any of user's facilities.\n-\t *\n-\t * @param perunSession\n-\t * @param templateResource \"template\" resource\n-\t * @param destinationResource destination resource\n-\t * @param withGroups if set to true and resources ARE from the same VO we also copy all group-resource and member-resource attributes,\n-\t *                   if set to true and resources ARE NOT from the same VO we copy resource only attributes,\n-\t *                   if set to false we copy resource only attributes.\n-\t */\n-\tResource copyResource(PerunSession perunSession, Resource templateResource, Resource destinationResource, boolean withGroups) throws ResourceExistsException, InternalErrorException;\n-\n-\t/**\n-\t *  Deletes resource by id.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n-\t */\n-\tvoid deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t *  Deletes all resources for the VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws RelationExistsException\n-\t * @throws ResourceAlreadyRemovedException if there is at least 1 resource not affected by deleting from DB\n-\t * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n-\t */\n-\tvoid deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Get facility which belongs to the concrete resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return facility belonging to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tFacility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Set Facility to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException;\n-\n-\t/**\n-\t * Get Vo which is tied to specified resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return vo tied to specified resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tVo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is assigned to the current resource, false otherwise.\n-\t * @param sess\n-\t * @param user\n-\t * @param resource\n-\t * @return true if the user is assigned to the current resource.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserAssigned(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the user is allowed to the current resource, false otherwise.\n-\t * @param sess\n-\t * @param user\n-\t * @param resource\n-\t * @return true if the user is allowed to the current resource.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isUserAllowed(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns true if the group is assigned to the current resource, false otherwise.\n-\t * @param sess\n-\t * @param group\n-\t * @param resource\n-\t * @return true if the group is assigned to the current resource.\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean isGroupAssigned(PerunSession sess, Group group, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all members who can access the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Member> getAssignedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all members assigned to the resource as RichMembers.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of rich members assigned to the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichMember> getAssignedRichMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all users, who can assess the resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of users\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tvoid assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of resources\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n-\t *\n-\t * @param perunSession\n-\t * @param group the group\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeValueException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws GroupAlreadyAssignedException\n-\t */\n-\tvoid assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove group from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t * @param resource\n-\n-\t * @throws InternalErrorException Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n-\t * @throws ResourceNotExistsException\n-\t * @throws GroupNotDefinedOnResourceException Group was never assigned to this resource\n-\t * @throws GroupAlreadyRemovedFromResourceException there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove groups from a resource.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param groups list of groups\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * Remove group from resources.\n-\t * After removing, check attributes and fix them if it is needed.\n-\t *\n-\t * @param perunSession\n-\t * @param group the group\n-\t * @param resources list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotDefinedOnResourceException\n-\t * @throws GroupAlreadyRemovedFromResourceException\n-\t */\n-\tvoid removeGroupFromResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n-\n-\t/**\n-\t * List all groups associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @return list of assigned group\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * List all groups associated with the resource where Member is a member.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param member\n-\t *\n-\t * @return list of assigned groups\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getAssignedGroups(PerunSession perunSession, Resource resource, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * List all resources associated with the group.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * List all rich resources associated with the group with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param group\n-\t *\n-\t * @return list of assigned rich resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException;\n-\n-\t/**\n-\t * List all services associated with the resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @throws InternalErrorException\n-\t * @return list of assigned resources\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Assign service to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyAssignedException\n-\t */\n-\tvoid assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Assign all services from services package to resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t * @throws ServicesPackageNotExistsException\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Remove service from resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param service\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotAssignedException\n-\t */\n-\tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException,\n-\t\t\t ServiceNotExistsException, ServiceNotAssignedException;\n-\n-\t/**\n-\t * Remove from resource all services from services package.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param servicesPackage\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get all VO resources.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\n-\t * @throws InternalErrorException\n-\t * @return list of resources\n-\t */\n-\tList<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all VO rich resources with facility property filled.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\n-\t * @throws InternalErrorException\n-\t * @return list of rich resources\n-\t */\n-\tList<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get list of resources by theirs IDs.\n-\t *\n-\t * @param sess\n-\t * @param resourcesIds\n-\t * @return list of resources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getResourcesByIds(PerunSession sess, List<Integer> resourcesIds) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all VO resources count.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\n-\t * @throws InternalErrorException\n-\t * @return count fo vo resources\n-\t */\n-\tint getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get count of all resources.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getResourcesCount(PerunSession perunSession) throws InternalErrorException;\n-\n-\t/**\n-\t * Returns all resource which have set the attribute with the value. Searching only def and opt attributes.\n-\t *\n-\t * @param sess\n-\t * @param attribute\n-\t * @return\n-\t * @throws InternalErrorException\n-\t * @throws WrongAttributeAssignmentException\n-\t */\n-\tList<Resource> getResourcesByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n-\n-\t/**\n-\t * Get all resources which have the member access on.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of resources which have the member access on\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Return all resources which are under the facility and has member of the user with status other than INVALID.\n-\t *\n-\t * @param sess\n-\t * @param facility\n-\t * @param user\n-\t *\n-\t * @return list of resources allowed for user (user has there member with status other than INVALID)\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources where the member is assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources where the member and the service are assigned.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n-\n-\t/**\n-\t * Return List of assigned resources to user on the vo.\n-\t * If user is not member of Vo, return empty List;\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @param vo\n-\t * @return return list of assigned resources or empty list if user is not member of Vo\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, User user, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all rich resources where the member is assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all rich resources where the service and the member are assigned with facility property filled.\n-\t *\n-\t * @param sess\n-\t * @param member\n-\t * @param service\n-\t * @return list of resources\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n-\n-\t/**\n-\t * Updates Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return returns updated Resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceExistsException\n-\t */\n-\tResource updateResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceExistsException;\n-\n-\n-\t/**\n-\t * Create new Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param vo\n-\t * @return new created resourceTag\n-\t * @throws InternalErrorException\n-\t */\n-\tResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Update existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return updated ResourceTag\n-\t * @throws InternalErrorException\n-\t */\n-\tResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n-\n-\t/**\n-\t * Delete existing Resource tag.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Delete all ResourcesTags for specific VO.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Assign existing ResourceTag on existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagAlreadyAssignedException\n-\t */\n-\tvoid assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove specific ResourceTag from existing Resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t * @throws ResourceTagNotAssignedException\n-\t */\n-\tvoid removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagNotAssignedException;\n-\n-\t/**\n-\t * Remove all existing Resource tags for specific resource.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n-\t *\n-\t * @param perunSession\n-\t * @param resourceTag\n-\t * @return list of Resources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Vo.\n-\t *\n-\t * @param perunSession\n-\t * @param vo\n-\t * @return list of all resourcesTags for existing Vo\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all resourcesTags for existing Resource\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @return list of ResourcesTags\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Copy all attributes of the source resource to the destination resource.\n-\t * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common attributes are replaced with attributes from the source resource.\n-\t * The virtual attributes are not copied.\n-\t *\n-\t * @param sess\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t */\n-\tpublic void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all services of the source resource to the destination resource.\n-\t * The services, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common services are replaced with services from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t * @throws WrongReferenceAttributeValueException\n-\t * @throws WrongAttributeValueException\n-\t */\n-\tpublic void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n-\n-\t/**\n-\t * Copy all groups of the source resource to the destination resource.\n-\t * The groups, that are in the destination resource and aren't in the source resource, are retained.\n-\t * The common groups are replaced with the groups from source resource.\n-\t *\n-\t * @param sourceResource\n-\t * @param destinationResource\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException;\n-\n-\n-\tvoid checkResourceExists(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException;\n-\n-\tvoid checkResourceTagExists(PerunSession sess, ResourceTag resourceTag) throws InternalErrorException, ResourceTagNotExistsException;\n-\n-\t/**\n-\t * Get list of all user administrators for supported role and given resource.\n-\t *\n-\t * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of all user administrators of the given resource for supported role\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException;\n-\n-\t/**\n-\t * Get list of all richUser administrators for the resource and supported role with specific attributes.\n-\t *\n-\t * Supported roles: ResourceAdmin, VOAdmin\n-\t *\n-\t * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n-\t * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n-\t *\n-\t * @param perunSession\n-\t * @param resource\n-\t *\n-\t * @param specificAttributes list of specified attributes which are needed in object richUser\n-\t * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n-\t * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n-\t *\n-\t * @return list of RichUser administrators for the resource and supported role with attributes\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t */\n-\tList<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException;\n-\n-\t/**\n-\t * Returns list of resources, where the user is an admin.\n-\t *\n-\t * @param sess\n-\t * @param user\n-\t * @return list of resources, where the user is an admin.\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException;\n-\n-\t/**\n-\t * Gets list of all group administrators of the Resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @return list of Groups that are admins in the resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException;\n-\n-\t/**\n-\t * Add role resource admin to user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Add role resource admin to group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException;\n-\n-\t/**\n-\t * Remove role resource admin from user for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param user\n-\t * @throws InternalErrorException\n-\t * @throws UserNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws AlreadyAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException;\n-\n-\t/**\n-\t * Remove role resource admin from group for the selected resource.\n-\t *\n-\t * @param sess\n-\t * @param resource\n-\t * @param group\n-\t * @throws InternalErrorException\n-\t * @throws GroupNotExistsException\n-\t * @throws PrivilegeException\n-\t * @throws GroupNotAdminException\n-\t * @throws ResourceNotExistsException\n-\t */\n-\tvoid removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException;\n-\n-\t/**\n-\t * Set ban for member on resource\n-\t *\n-\t * @param sess\n-\t * @param banOnresource the ban\n-\t * @return ban on resource\n-\t * @throws InternalErrorException\n-\t * @throws BanAlreadyExistsException\n-\t */\n-\tBanOnResource setBan(PerunSession sess, BanOnResource banOnresource) throws InternalErrorException, BanAlreadyExistsException;\n-\n-\t/**\n-\t * Get Ban for member on resource by it's id\n-\t *\n-\t * @param sess\n-\t * @param banId the ban id\n-\t * @return resource ban by it's id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tBanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Get true if any ban for member and resource exists.\n-\t *\n-\t * @param sess\n-\t * @param memberId id of member\n-\t * @param resourceId id of resource\n-\t * @return true if ban exists\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean banExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException;\n-\n-\t/**\n-\t * Get true if any band defined by id exists for any user and facility.\n-\t *\n-\t * @param sess\n-\t * @param banId id of ban\n-\t * @return true if ban exists\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean banExists(PerunSession sess, int banId) throws InternalErrorException;\n-\n-\t/**\n-\t * Check if ban already exists.\n-\t *\n-\t * Throw exception if no.\n-\t *\n-\t * @param sess\n-\t * @param memberId user id\n-\t * @param resourceId facility id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid checkBanExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Check if ban already exists.\n-\t *\n-\t * Throw exception if no.\n-\t *\n-\t * @param sess\n-\t * @param banId ban id\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid checkBanExists(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Get specific resource ban.\n-\t *\n-\t * @param sess\n-\t * @param memberId the member id\n-\t * @param resourceId the resource id\n-\t * @return specific resource ban\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tBanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Get all resources bans for member.\n-\t *\n-\t * @param sess\n-\t * @param memberId the member id\n-\t * @return list of bans for member on any resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all members bans for resource\n-\t *\n-\t * @param sess\n-\t * @param resourceId the resource id\n-\t * @return list of all members bans on resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException;\n-\n-\t/**\n-\t * Get all expired bans on any resource to now date\n-\t *\n-\t * @param sess\n-\t * @return list of expired bans for any resource\n-\t * @throws InternalErrorException\n-\t */\n-\tList<BanOnResource> getAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n-\n-\t/**\n-\t * Update description and validity timestamp of specific ban.\n-\t *\n-\t * @param sess\n-\t * @param banOnResource ban to be updated\n-\t * @return updated ban\n-\t * @throws InternalErrorException\n-\t */\n-\tBanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException;\n-\n-\t/**\n-\t * Remove ban by id from resources bans.\n-\t *\n-\t * @param sess\n-\t * @param banId id of specific ban\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid removeBan(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Remove ban by member_id and facility_id\n-\t *\n-\t * @param sess\n-\t * @param memberId the id of member\n-\t * @param resourceId the id of resource\n-\t * @throws InternalErrorException\n-\t * @throws BanNotExistsException\n-\t */\n-\tvoid removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n-\n-\t/**\n-\t * Remove all expired bans on resources to now date.\n-\t *\n-\t * Get all expired bans and remove them one by one with auditing process.\n-\t * This method is for purpose of removing expired bans using some cron tool.\n-\t *\n-\t * @param sess\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n-}\n+ /**\n+  * Searches for the Resource with specified id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  *\n+  * @return Resource with specified id\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Resource getResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n+\n+ /**\n+  * Searches for the RichResource with specified id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  *\n+  * @return RichResource with specified id\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ RichResource getRichResourceById(PerunSession perunSession, int id) throws InternalErrorException, ResourceNotExistsException;\n+\n+ /**\n+  * Return resource by its name.\n+  *\n+  * @param sess\n+  * @param name\n+  * @param vo\n+  * @param facility\n+  * @return resource\n+  * @throws InternalErrorException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ Resource getResourceByName(PerunSession sess, Vo vo, Facility facility, String name) throws InternalErrorException, ResourceNotExistsException;\n+\n+ /**\n+  * Inserts resource into DB.\n+  *\n+  * @param resource resource to create\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Resource createResource(PerunSession perunSession, Resource resource, Vo vo, Facility facility) throws InternalErrorException, FacilityNotExistsException, ResourceExistsException;\n+\n+ /**\n+  * Copy \"template\" settings from user's another existing resource and create new resource with this template.\n+  * Resource can be from any of user's facilities.\n+  *\n+  * @param perunSession\n+  * @param templateResource \"template\" resource\n+  * @param destinationResource destination resource\n+  * @param withGroups if set to true and resources ARE from the same VO we also copy all group-resource and member-resource attributes,\n+  *                   if set to true and resources ARE NOT from the same VO we copy resource only attributes,\n+  *                   if set to false we copy resource only attributes.\n+  */\n+\n+\n+ Resource copyResource(PerunSession perunSession, Resource templateResource, Resource destinationResource, boolean withGroups) throws ResourceExistsException, InternalErrorException;\n+\n+ /**\n+  *  Deletes resource by id.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws RelationExistsException\n+  * @throws ResourceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n+  */\n+\n+\n+ void deleteResource(PerunSession perunSession, Resource resource) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  *  Deletes all resources for the VO.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  *\n+  * @throws InternalErrorException\n+  * @throws RelationExistsException\n+  * @throws ResourceAlreadyRemovedException if there is at least 1 resource not affected by deleting from DB\n+  * @throws GroupAlreadyRemovedFromResourceException if there is at least 1 group not affected by deleting from DB\n+  */\n+\n+\n+ void deleteAllResources(PerunSession perunSession, Vo vo) throws InternalErrorException, RelationExistsException, ResourceAlreadyRemovedException, GroupAlreadyRemovedFromResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * Get facility which belongs to the concrete resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return facility belonging to the resource\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Facility getFacility(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Set Facility to resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param facility\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void setFacility(PerunSession perunSession, Resource resource, Facility facility) throws InternalErrorException;\n+\n+ /**\n+  * Get Vo which is tied to specified resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return vo tied to specified resource\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ Vo getVo(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Returns true if the user is assigned to the current resource, false otherwise.\n+  * @param sess\n+  * @param user\n+  * @param resource\n+  * @return true if the user is assigned to the current resource.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isUserAssigned(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Returns true if the user is allowed to the current resource, false otherwise.\n+  * @param sess\n+  * @param user\n+  * @param resource\n+  * @return true if the user is allowed to the current resource.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isUserAllowed(PerunSession sess, User user, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Returns true if the group is assigned to the current resource, false otherwise.\n+  * @param sess\n+  * @param group\n+  * @param resource\n+  * @return true if the group is assigned to the current resource.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean isGroupAssigned(PerunSession sess, Group group, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Returns all members who can access the resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return list of members assigned to the resource\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getAllowedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Returns all members assigned to the resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return list of members assigned to the resource\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Member> getAssignedMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Returns all members assigned to the resource as RichMembers.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return list of rich members assigned to the resource\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichMember> getAssignedRichMembers(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Get all users, who can assess the resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @return list of users\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getAllowedUsers(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Assign group to a resource. Check if attributes for each member form group are valid. Fill members' attributes with missing value.\n+  *\n+  * @param perunSession\n+  * @param group\n+  * @param resource\n+\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws GroupAlreadyAssignedException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ void assignGroupToResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+ /**\n+  * Assign groups to a resource. Check if attributes for each member from all groups are valid. Fill members' attributes with missing values.\n+  *\n+  * @param perunSession\n+  * @param groups list of resources\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws GroupAlreadyAssignedException\n+  */\n+\n+\n+ void assignGroupsToResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+ /**\n+  * Assign group to the resources. Check if attributes for each member from group are valid. Fill members' attributes with missing values.\n+  *\n+  * @param perunSession\n+  * @param group the group\n+  * @param resources list of resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeValueException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws GroupAlreadyAssignedException\n+  */\n+\n+\n+ void assignGroupToResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException, GroupAlreadyAssignedException;\n+\n+ /**\n+  * Remove group from a resource.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param perunSession\n+  * @param group\n+  * @param resource\n+\n+  * @throws InternalErrorException Raise when group and resource not belong to the same VO or cant properly fix attributes of group's members after removing group from resource.\n+  * @throws ResourceNotExistsException\n+  * @throws GroupNotDefinedOnResourceException Group was never assigned to this resource\n+  * @throws GroupAlreadyRemovedFromResourceException there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void removeGroupFromResource(PerunSession perunSession, Group group, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * Remove groups from a resource.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param perunSession\n+  * @param groups list of groups\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @throws GroupNotDefinedOnResourceException\n+  * @throws GroupAlreadyRemovedFromResourceException\n+  */\n+\n+\n+ void removeGroupsFromResource(PerunSession perunSession, List<Group> groups, Resource resource) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * Remove group from resources.\n+  * After removing, check attributes and fix them if it is needed.\n+  *\n+  * @param perunSession\n+  * @param group the group\n+  * @param resources list of resources\n+  *\n+  * @throws InternalErrorException\n+  * @throws GroupNotDefinedOnResourceException\n+  * @throws GroupAlreadyRemovedFromResourceException\n+  */\n+\n+\n+ void removeGroupFromResources(PerunSession perunSession, Group group, List<Resource> resources) throws InternalErrorException, GroupNotDefinedOnResourceException, GroupAlreadyRemovedFromResourceException;\n+\n+ /**\n+  * List all groups associated with the resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @return list of assigned group\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Group> getAssignedGroups(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * List all groups associated with the resource where Member is a member.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param member\n+  *\n+  * @return list of assigned groups\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Group> getAssignedGroups(PerunSession perunSession, Resource resource, Member member) throws InternalErrorException;\n+\n+ /**\n+  * List all resources associated with the group.\n+  *\n+  * @param perunSession\n+  * @param group\n+  *\n+  * @return list of assigned resources\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession perunSession, Group group) throws InternalErrorException;\n+\n+ /**\n+  * List all rich resources associated with the group with facility property filled.\n+  *\n+  * @param perunSession\n+  * @param group\n+  *\n+  * @return list of assigned rich resources\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichResource> getAssignedRichResources(PerunSession perunSession, Group group) throws InternalErrorException;\n+\n+ /**\n+  * List all services associated with the resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @throws InternalErrorException\n+  * @return list of assigned resources\n+  */\n+\n+\n+ List<Service> getAssignedServices(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Assign service to resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param service\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws ServiceNotExistsException\n+  * @throws ServiceAlreadyAssignedException\n+  */\n+\n+\n+ void assignService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, ServiceNotExistsException, ServiceAlreadyAssignedException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Assign all services from services package to resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param servicesPackage\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  * @throws ServicesPackageNotExistsException\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void assignServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Remove service from resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param service\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServiceNotAssignedException\n+  */\n+\n+\n+ void removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException, ServiceNotExistsException, ServiceNotAssignedException;\n+\n+ /**\n+  * Remove from resource all services from services package.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param servicesPackage\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeServicesPackage(PerunSession perunSession, Resource resource, ServicesPackage servicesPackage) throws InternalErrorException, ServicesPackageNotExistsException;\n+\n+ /**\n+  * Get all VO resources.\n+  *\n+  * @param perunSession\n+  * @param vo\n+\n+  * @throws InternalErrorException\n+  * @return list of resources\n+  */\n+\n+\n+ List<Resource> getResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get all VO rich resources with facility property filled.\n+  *\n+  * @param perunSession\n+  * @param vo\n+\n+  * @throws InternalErrorException\n+  * @return list of rich resources\n+  */\n+\n+\n+ List<RichResource> getRichResources(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get list of resources by theirs IDs.\n+  *\n+  * @param sess\n+  * @param resourcesIds\n+  * @return list of resources\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getResourcesByIds(PerunSession sess, List<Integer> resourcesIds) throws InternalErrorException;\n+\n+ /**\n+  * Get all VO resources count.\n+  *\n+  * @param perunSession\n+  * @param vo\n+\n+  * @throws InternalErrorException\n+  * @return count fo vo resources\n+  */\n+\n+\n+ int getResourcesCount(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get count of all resources.\n+  *\n+  * @param perunSession\n+  *\n+  * @return count of all resources\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ int getResourcesCount(PerunSession perunSession) throws InternalErrorException;\n+\n+ /**\n+  * Returns all resource which have set the attribute with the value. Searching only def and opt attributes.\n+  *\n+  * @param sess\n+  * @param attribute\n+  * @return\n+  * @throws InternalErrorException\n+  * @throws WrongAttributeAssignmentException\n+  */\n+\n+\n+ List<Resource> getResourcesByAttribute(PerunSession sess, Attribute attribute) throws InternalErrorException, WrongAttributeAssignmentException;\n+\n+ /**\n+  * Get all resources which have the member access on.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return list of resources which have the member access on\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAllowedResources(PerunSession sess, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Return all resources which are under the facility and has member of the user with status other than INVALID.\n+  *\n+  * @param sess\n+  * @param facility\n+  * @param user\n+  *\n+  * @return list of resources allowed for user (user has there member with status other than INVALID)\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAllowedResources(PerunSession sess, Facility facility, User user) throws InternalErrorException;\n+\n+ /**\n+  * Get all resources where the member is assigned.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get all resources where the member and the service are assigned.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param service\n+  * @return list of resources\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n+\n+ /**\n+  * Return List of assigned resources to user on the vo.\n+  * If user is not member of Vo, return empty List;\n+  *\n+  * @param sess\n+  * @param user\n+  * @param vo\n+  * @return return list of assigned resources or empty list if user is not member of Vo\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, User user, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get all rich resources where the member is assigned with facility property filled.\n+  *\n+  * @param sess\n+  * @param member\n+  * @return list of resources\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichResource> getAssignedRichResources(PerunSession sess, Member member) throws InternalErrorException;\n+\n+ /**\n+  * Get all rich resources where the service and the member are assigned with facility property filled.\n+  *\n+  * @param sess\n+  * @param member\n+  * @param service\n+  * @return list of resources\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichResource> getAssignedRichResources(PerunSession sess, Member member, Service service) throws InternalErrorException;\n+\n+ /**\n+  * Updates Resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return returns updated Resource\n+  * @throws InternalErrorException\n+  * @throws ResourceExistsException\n+  */\n+\n+\n+ Resource updateResource(PerunSession perunSession, Resource resource) throws InternalErrorException, ResourceExistsException;\n+\n+\n+ /**\n+  * Create new Resource tag.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @param vo\n+  * @return new created resourceTag\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ ResourceTag createResourceTag(PerunSession perunSession, ResourceTag resourceTag, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Update existing Resource tag.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @return updated ResourceTag\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ ResourceTag updateResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n+\n+ /**\n+  * Delete existing Resource tag.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @throws InternalErrorException\n+  * @throws ResourceTagAlreadyAssignedException\n+  */\n+\n+\n+ void deleteResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n+\n+ /**\n+  * Delete all ResourcesTags for specific VO.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @throws InternalErrorException\n+  * @throws ResourceTagAlreadyAssignedException\n+  */\n+\n+\n+ void deleteAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n+\n+ /**\n+  * Assign existing ResourceTag on existing Resource.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @param resource\n+  * @throws InternalErrorException\n+  * @throws ResourceTagAlreadyAssignedException\n+  */\n+\n+\n+ void assignResourceTagToResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagAlreadyAssignedException;\n+\n+ /**\n+  * Remove specific ResourceTag from existing Resource.\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @param resource\n+  * @throws InternalErrorException\n+  * @throws ResourceTagNotAssignedException\n+  */\n+\n+\n+ void removeResourceTagFromResource(PerunSession perunSession, ResourceTag resourceTag, Resource resource) throws InternalErrorException, ResourceTagNotAssignedException;\n+\n+ /**\n+  * Remove all existing Resource tags for specific resource.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllResourcesTagFromResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Get all resources in specific Vo (specific by resourceTag.getVoId) for existing resourceTag\n+  *\n+  * @param perunSession\n+  * @param resourceTag\n+  * @return list of Resources\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAllResourcesByResourceTag(PerunSession perunSession, ResourceTag resourceTag) throws InternalErrorException;\n+\n+ /**\n+  * Get all resourcesTags for existing Vo.\n+  *\n+  * @param perunSession\n+  * @param vo\n+  * @return list of all resourcesTags for existing Vo\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<ResourceTag> getAllResourcesTagsForVo(PerunSession perunSession, Vo vo) throws InternalErrorException;\n+\n+ /**\n+  * Get all resourcesTags for existing Resource\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @return list of ResourcesTags\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<ResourceTag> getAllResourcesTagsForResource(PerunSession perunSession, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Copy all attributes of the source resource to the destination resource.\n+  * The attributes, that are in the destination resource and aren't in the source resource, are retained.\n+  * The common attributes are replaced with attributes from the source resource.\n+  * The virtual attributes are not copied.\n+  *\n+  * @param sess\n+  * @param sourceResource\n+  * @param destinationResource\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  */\n+\n+\n+ public void copyAttributes(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Copy all services of the source resource to the destination resource.\n+  * The services, that are in the destination resource and aren't in the source resource, are retained.\n+  * The common services are replaced with services from source resource.\n+  *\n+  * @param sourceResource\n+  * @param destinationResource\n+  * @throws InternalErrorException\n+  * @throws WrongReferenceAttributeValueException\n+  * @throws WrongAttributeValueException\n+  */\n+\n+\n+ public void copyServices(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException, WrongAttributeValueException, WrongReferenceAttributeValueException;\n+\n+ /**\n+  * Copy all groups of the source resource to the destination resource.\n+  * The groups, that are in the destination resource and aren't in the source resource, are retained.\n+  * The common groups are replaced with the groups from source resource.\n+  *\n+  * @param sourceResource\n+  * @param destinationResource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ public void copyGroups(PerunSession sess, Resource sourceResource, Resource destinationResource) throws InternalErrorException;\n+\n+\n+ void checkResourceExists(PerunSession sess, Resource resource) throws InternalErrorException, ResourceNotExistsException;\n+\n+\n+ void checkResourceTagExists(PerunSession sess, ResourceTag resourceTag) throws InternalErrorException, ResourceTagNotExistsException;\n+\n+ /**\n+  * Get list of all user administrators for supported role and given resource.\n+  *\n+  * If onlyDirectAdmins is true, return only direct users of the group for supported role.\n+  *\n+  * Supported roles: ResourceAdmin, VOAdmin\n+  *\n+  * @param perunSession\n+  * @param resource\n+  * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+  *\n+  * @return list of all user administrators of the given resource for supported role\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<User> getAdmins(PerunSession perunSession, Resource resource, boolean onlyDirectAdmins) throws InternalErrorException;\n+\n+ /**\n+  * Get list of all richUser administrators for the resource and supported role with specific attributes.\n+  *\n+  * Supported roles: ResourceAdmin, VOAdmin\n+  *\n+  * If \"onlyDirectAdmins\" is \"true\", return only direct users of the group for supported role with specific attributes.\n+  * If \"allUserAttributes\" is \"true\", do not specify attributes through list and return them all in objects richUser. Ignoring list of specific attributes.\n+  *\n+  * @param perunSession\n+  * @param resource\n+  *\n+  * @param specificAttributes list of specified attributes which are needed in object richUser\n+  * @param allUserAttributes if true, get all possible user attributes and ignore list of specificAttributes (if false, get only specific attributes)\n+  * @param onlyDirectAdmins if true, get only direct user administrators (if false, get both direct and indirect)\n+  *\n+  * @return list of RichUser administrators for the resource and supported role with attributes\n+  *\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  */\n+\n+\n+ List<RichUser> getRichAdmins(PerunSession perunSession, Resource resource, List<String> specificAttributes, boolean allUserAttributes, boolean onlyDirectAdmins) throws InternalErrorException, UserNotExistsException;\n+\n+ /**\n+  * Returns list of resources, where the user is an admin.\n+  *\n+  * @param sess\n+  * @param user\n+  * @return list of resources, where the user is an admin.\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getResourcesWhereUserIsAdmin(PerunSession sess, User user) throws InternalErrorException;\n+\n+ /**\n+  * Gets list of all group administrators of the Resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @return list of Groups that are admins in the resource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Group> getAdminGroups(PerunSession sess, Resource resource) throws InternalErrorException;\n+\n+ /**\n+  * Add role resource admin to user for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws AlreadyAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void addAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, AlreadyAdminException;\n+\n+ /**\n+  * Add role resource admin to group for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param group\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws AlreadyAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void addAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, AlreadyAdminException;\n+\n+ /**\n+  * Remove role resource admin from user for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param user\n+  * @throws InternalErrorException\n+  * @throws UserNotExistsException\n+  * @throws PrivilegeException\n+  * @throws AlreadyAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void removeAdmin(PerunSession sess, Resource resource, User user) throws InternalErrorException, UserNotAdminException;\n+\n+ /**\n+  * Remove role resource admin from group for the selected resource.\n+  *\n+  * @param sess\n+  * @param resource\n+  * @param group\n+  * @throws InternalErrorException\n+  * @throws GroupNotExistsException\n+  * @throws PrivilegeException\n+  * @throws GroupNotAdminException\n+  * @throws ResourceNotExistsException\n+  */\n+\n+\n+ void removeAdmin(PerunSession sess, Resource resource, Group group) throws InternalErrorException, GroupNotAdminException;\n+\n+ /**\n+  * Set ban for member on resource\n+  *\n+  * @param sess\n+  * @param banOnresource the ban\n+  * @return ban on resource\n+  * @throws InternalErrorException\n+  * @throws BanAlreadyExistsException\n+  */\n+\n+\n+ BanOnResource setBan(PerunSession sess, BanOnResource banOnresource) throws InternalErrorException, BanAlreadyExistsException;\n+\n+ /**\n+  * Get Ban for member on resource by it's id\n+  *\n+  * @param sess\n+  * @param banId the ban id\n+  * @return resource ban by it's id\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  */\n+\n+\n+ BanOnResource getBanById(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n+\n+ /**\n+  * Get true if any ban for member and resource exists.\n+  *\n+  * @param sess\n+  * @param memberId id of member\n+  * @param resourceId id of resource\n+  * @return true if ban exists\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean banExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException;\n+\n+ /**\n+  * Get true if any band defined by id exists for any user and facility.\n+  *\n+  * @param sess\n+  * @param banId id of ban\n+  * @return true if ban exists\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean banExists(PerunSession sess, int banId) throws InternalErrorException;\n+\n+ /**\n+  * Check if ban already exists.\n+  *\n+  * Throw exception if no.\n+  *\n+  * @param sess\n+  * @param memberId user id\n+  * @param resourceId facility id\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  */\n+\n+\n+ void checkBanExists(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n+\n+ /**\n+  * Check if ban already exists.\n+  *\n+  * Throw exception if no.\n+  *\n+  * @param sess\n+  * @param banId ban id\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  */\n+\n+\n+ void checkBanExists(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n+\n+ /**\n+  * Get specific resource ban.\n+  *\n+  * @param sess\n+  * @param memberId the member id\n+  * @param resourceId the resource id\n+  * @return specific resource ban\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  */\n+\n+\n+ BanOnResource getBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n+\n+ /**\n+  * Get all resources bans for member.\n+  *\n+  * @param sess\n+  * @param memberId the member id\n+  * @return list of bans for member on any resource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<BanOnResource> getBansForMember(PerunSession sess, int memberId) throws InternalErrorException;\n+\n+ /**\n+  * Get all members bans for resource\n+  *\n+  * @param sess\n+  * @param resourceId the resource id\n+  * @return list of all members bans on resource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<BanOnResource> getBansForResource(PerunSession sess, int resourceId) throws InternalErrorException;\n+\n+ /**\n+  * Get all expired bans on any resource to now date\n+  *\n+  * @param sess\n+  * @return list of expired bans for any resource\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<BanOnResource> getAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n+\n+ /**\n+  * Update description and validity timestamp of specific ban.\n+  *\n+  * @param sess\n+  * @param banOnResource ban to be updated\n+  * @return updated ban\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ BanOnResource updateBan(PerunSession sess, BanOnResource banOnResource) throws InternalErrorException;\n+\n+ /**\n+  * Remove ban by id from resources bans.\n+  *\n+  * @param sess\n+  * @param banId id of specific ban\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  */\n+\n+\n+ void removeBan(PerunSession sess, int banId) throws InternalErrorException, BanNotExistsException;\n+\n+ /**\n+  * Remove ban by member_id and facility_id\n+  *\n+  * @param sess\n+  * @param memberId the id of member\n+  * @param resourceId the id of resource\n+  * @throws InternalErrorException\n+  * @throws BanNotExistsException\n+  */\n+\n+\n+ void removeBan(PerunSession sess, int memberId, int resourceId) throws InternalErrorException, BanNotExistsException;\n+\n+ /**\n+  * Remove all expired bans on resources to now date.\n+  *\n+  * Get all expired bans and remove them one by one with auditing process.\n+  * This method is for purpose of removing expired bans using some cron tool.\n+  *\n+  * @param sess\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllExpiredBansOnResources(PerunSession sess) throws InternalErrorException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 1121
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/366/ResourcesManagerBl.java\nindex 5dbed8601bc..db845ac83f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/366/ResourcesManagerBl.java\n@@ -385,7 +385,7 @@ public interface ResourcesManagerBl {\n \t * @throws ServiceNotAssignedException\n \t */\n \tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException,\n-\t\t\t ServiceNotExistsException, ServiceNotAssignedException;\n+\t\t\tServiceNotExistsException, ServiceNotAssignedException;\n \n \t/**\n \t * Remove from resource all services from services package.\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/366/ResourcesManagerBl.java\nindex 5dbed8601bc..236bb02d42c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/366/ResourcesManagerBl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/366/ResourcesManagerBl.java\n@@ -385,7 +385,7 @@ public interface ResourcesManagerBl {\n \t * @throws ServiceNotAssignedException\n \t */\n \tvoid removeService(PerunSession perunSession, Resource resource, Service service) throws InternalErrorException,\n-\t\t\t ServiceNotExistsException, ServiceNotAssignedException;\n+\tServiceNotExistsException, ServiceNotAssignedException;\n \n \t/**\n \t * Remove from resource all services from services package.\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}