{
    "project_name": "wso2-attic-commons",
    "error_id": "287",
    "information": {
        "errors": [
            {
                "line": "71",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   *      javax.wsdl.Definition, javax.wsdl.extensions.ExtensionRegistry)\n   */\n  public ExtensibilityElement unmarshall(Class clsType, QName eltype, Element el, Definition def, ExtensionRegistry extReg)\n          throws WSDLException {\n\n      validateExtensibilityElementContext(el);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/287/BpelExtensionSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/287/BpelExtensionSerializer.java\nindex dfad64dee93..6765bb843d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/287/BpelExtensionSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/287/BpelExtensionSerializer.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.compiler.wsdl;\n \n import java.io.PrintWriter;\n@@ -49,41 +50,42 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n   private BpelObjectFactory _factory;\n \n   public BpelExtensionSerializer(BpelObjectFactory factory) {\n-      _factory = factory;\n+    _factory = factory;\n   }\n \n   /**\n    * @see javax.wsdl.extensions.ExtensionSerializer#marshall(java.lang.Class,\n-   *      javax.xml.namespace.QName,\n-   *      javax.wsdl.extensions.ExtensibilityElement, java.io.PrintWriter,\n-   *      javax.wsdl.Definition, javax.wsdl.extensions.ExtensionRegistry)\n+   * javax.xml.namespace.QName,\n+   * javax.wsdl.extensions.ExtensibilityElement, java.io.PrintWriter,\n+   * javax.wsdl.Definition, javax.wsdl.extensions.ExtensionRegistry)\n    */\n   public void marshall(Class arg0, QName arg1, ExtensibilityElement arg2, PrintWriter arg3, Definition arg4,\n-          ExtensionRegistry arg5) throws WSDLException {\n-      throw new UnsupportedOperationException();\n+                       ExtensionRegistry arg5) throws WSDLException {\n+    throw new UnsupportedOperationException();\n   }\n \n   /**\n    * @see javax.wsdl.extensions.ExtensionDeserializer#unmarshall(java.lang.Class,\n-   *      javax.xml.namespace.QName, org.w3c.dom.Element,\n-   *      javax.wsdl.Definition, javax.wsdl.extensions.ExtensionRegistry)\n+   * javax.xml.namespace.QName, org.w3c.dom.Element,\n+   * javax.wsdl.Definition, javax.wsdl.extensions.ExtensionRegistry)\n    */\n-  public ExtensibilityElement unmarshall(Class clsType, QName eltype, Element el, Definition def, ExtensionRegistry extReg)\n-          throws WSDLException {\n+  public ExtensibilityElement unmarshall(Class clsType, QName eltype, Element el, Definition def,\n+                                         ExtensionRegistry extReg)\n+    throws WSDLException {\n \n-      validateExtensibilityElementContext(el);\n+    validateExtensibilityElementContext(el);\n \n-      BpelObject4WSDL obj;\n-      try {\n-          obj = (BpelObject4WSDL) _factory.createBpelObject(el,new URI(def.getDocumentBaseURI()));\n-      } catch (URISyntaxException e) {\n-          throw new RuntimeException(e);\n-      }\n-      \n-      obj.setElementType(eltype);\n-      obj.setRequired(false);  // ? what does this do \n-      obj.setTargetNamespace(def.getTargetNamespace());\n-      return obj;\n+    BpelObject4WSDL obj;\n+    try {\n+      obj = (BpelObject4WSDL) _factory.createBpelObject(el, new URI(def.getDocumentBaseURI()));\n+    } catch (URISyntaxException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+    obj.setElementType(eltype);\n+    obj.setRequired(false);  // ? what does this do\n+    obj.setTargetNamespace(def.getTargetNamespace());\n+    return obj;\n   }\n \n   /**\n@@ -91,12 +93,12 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n    * context of a given element.\n    *\n    * @param prefixedQNameStr qualified name, represented as a prefixed string\n-   * @param context context element\n+   * @param context          context element\n    * @return a resolved {@link QName}\n    * @throws javax.wsdl.WSDLException in case of resolution error (e.g. undefined prefix)\n    */\n   protected static QName derefQName(String prefixedQNameStr, Element context)\n-                          throws WSDLException {\n+    throws WSDLException {\n     int idx = prefixedQNameStr.indexOf(\":\");\n     String uri;\n \n@@ -108,7 +110,7 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n         throw new WSDLException(WSDLException.INVALID_WSDL, msg);\n       }\n \n-        // Look up the prefix from the namespaces defined *at the element*.\n+      // Look up the prefix from the namespaces defined *at the element*.\n       String prefix = prefixedQNameStr.substring(0, idx);\n       uri = DOMUtils.getMyNSContext(context).getNamespaceURI(prefix);\n \n@@ -133,16 +135,15 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n     Node n = el.getParentNode();\n     if (n == null || n.getNodeType() != Node.ELEMENT_NODE) {\n       WSDLException we = new WSDLException(WSDLException.OTHER_ERROR,\n-          __msgs.msgCannotBeDocumentRootElement(DOMUtils.getElementQName(el).toString()));\n+        __msgs.msgCannotBeDocumentRootElement(DOMUtils.getElementQName(el).toString()));\n       we.setLocation(XPathUtils.getXPathExprFromNode(el));\n       throw we;\n     }\n     Element def = (Element) n;\n     if (def.getNamespaceURI() == null || !def.getNamespaceURI().equals(DOMUtils.WSDL_NS)\n-      || !def.getLocalName().equals(DOMUtils.WSDL_ROOT_ELEMENT))\n-    {\n-      WSDLException we =  new WSDLException(WSDLException.OTHER_ERROR,\n-          __msgs.msgMustBeChildOfDef(DOMUtils.getElementQName(el).toString()));\n+      || !def.getLocalName().equals(DOMUtils.WSDL_ROOT_ELEMENT)) {\n+      WSDLException we = new WSDLException(WSDLException.OTHER_ERROR,\n+        __msgs.msgMustBeChildOfDef(DOMUtils.getElementQName(el).toString()));\n       we.setLocation(XPathUtils.getXPathExprFromNode(el));\n       throw we;\n     }\n@@ -166,8 +167,9 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n \n   protected String getAttribute(Element element, String attributeName) {\n     Attr attribute = element.getAttributeNode(attributeName);\n-    if (attribute == null)\n+    if (attribute == null) {\n       return null;\n+    }\n     return attribute.getValue();\n \n   }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/287/BpelExtensionSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/287/BpelExtensionSerializer.java\nindex dfad64dee93..a407da4a663 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/287/BpelExtensionSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/287/BpelExtensionSerializer.java\n@@ -79,9 +79,8 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n       } catch (URISyntaxException e) {\n           throw new RuntimeException(e);\n       }\n-      \n-      obj.setElementType(eltype);\n-      obj.setRequired(false);  // ? what does this do \n+obj.setElementType(eltype);\n+obj.setRequired(false);  // ? what does this do \n       obj.setTargetNamespace(def.getTargetNamespace());\n       return obj;\n   }\n@@ -95,8 +94,7 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n    * @return a resolved {@link QName}\n    * @throws javax.wsdl.WSDLException in case of resolution error (e.g. undefined prefix)\n    */\n-  protected static QName derefQName(String prefixedQNameStr, Element context)\n-                          throws WSDLException {\n+  protected static QName derefQName(String prefixedQNameStr, Element context) throws WSDLException {\n     int idx = prefixedQNameStr.indexOf(\":\");\n     String uri;\n \n@@ -152,17 +150,9 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n      * schema, but the WS-I version is more permissive.  Leaving this check out\n      * complies with the WS-I version, which is preferable.\n      */\n-//    n = el.getNextSibling();\n-//    while (n != null) {\n-//      if (n.getNamespaceURI() != null && n.getNamespaceURI().equals(DOMUtils.WSDL_NS)) {\n-//        WSDLException we = new WSDLException(WSDLException.INVALID_WSDL,\n-//            MSGS.msgExtensibilityElementsMustBeLast(DOMUtils.getElementQName(el).toString()));\n-//        we.setLocation(XPathUtils.getXPathExprFromNode(el));\n-//        throw we;\n-//      }\n-//      n = n.getNextSibling();\n-//    }\n-  }\n+\n+//    n = el.getNex\n+    }\n \n   protected String getAttribute(Element element, String attributeName) {\n     Attr attribute = element.getAttributeNode(attributeName);\n@@ -171,4 +161,4 @@ public class BpelExtensionSerializer implements ExtensionDeserializer, Extension\n     return attribute.getValue();\n \n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}