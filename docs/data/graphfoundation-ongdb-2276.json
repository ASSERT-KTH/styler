{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2276",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2276/PropertyTraverser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2276/PropertyTraverser.java\nindex e6879437db9..cbbadb4ecb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2276/PropertyTraverser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2276/PropertyTraverser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import java.util.Arrays;\n@@ -32,98 +33,98 @@ import org.neo4j.kernel.impl.util.Listener;\n \n public class PropertyTraverser\n {\n-    /**\n-     * Traverses a property record chain and finds the record containing the property with key {@code propertyKey}.\n-     * If none is found and {@code strict} is {@code true} then {@link IllegalStateException} is thrown,\n-     * otherwise id value of {@link Record#NO_NEXT_PROPERTY} is returned.\n-     *\n-     * @param primitive {@link PrimitiveRecord} which is the owner of the chain.\n-     * @param propertyKey property key token id to look for.\n-     * @param propertyRecords access to records.\n-     * @param strict dictates behavior on property key not found. If {@code true} then {@link IllegalStateException}\n-     * is thrown, otherwise value of {@link Record#NO_NEXT_PROPERTY} is returned.\n-     * @return property record id containing property with the given {@code propertyKey}, otherwise if\n-     * {@code strict} is false value of {@link Record#NO_NEXT_PROPERTY}.\n-     */\n-    public long findPropertyRecordContaining( PrimitiveRecord primitive, int propertyKey,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords, boolean strict )\n+  /**\n+   * Traverses a property record chain and finds the record containing the property with key {@code propertyKey}.\n+   * If none is found and {@code strict} is {@code true} then {@link IllegalStateException} is thrown,\n+   * otherwise id value of {@link Record#NO_NEXT_PROPERTY} is returned.\n+   *\n+   * @param primitive       {@link PrimitiveRecord} which is the owner of the chain.\n+   * @param propertyKey     property key token id to look for.\n+   * @param propertyRecords access to records.\n+   * @param strict          dictates behavior on property key not found. If {@code true} then {@link IllegalStateException}\n+   *                        is thrown, otherwise value of {@link Record#NO_NEXT_PROPERTY} is returned.\n+   * @return property record id containing property with the given {@code propertyKey}, otherwise if\n+   * {@code strict} is false value of {@link Record#NO_NEXT_PROPERTY}.\n+   */\n+  public long findPropertyRecordContaining(PrimitiveRecord primitive, int propertyKey,\n+                                           RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords, boolean strict)\n+  {\n+    long propertyRecordId = primitive.getNextProp();\n+    while (!Record.NO_NEXT_PROPERTY.is(propertyRecordId))\n     {\n-        long propertyRecordId = primitive.getNextProp();\n-        while ( !Record.NO_NEXT_PROPERTY.is( propertyRecordId ) )\n-        {\n-            PropertyRecord propertyRecord =\n-                    propertyRecords.getOrLoad( propertyRecordId, primitive ).forReadingLinkage();\n-            if ( propertyRecord.getPropertyBlock( propertyKey ) != null )\n-            {\n-                return propertyRecordId;\n-            }\n-            propertyRecordId = propertyRecord.getNextProp();\n-        }\n-\n-        if ( strict )\n-        {\n-            throw new IllegalStateException( \"No property record in property chain for \" + primitive +\n-                    \" contained property with key \" + propertyKey );\n-        }\n+      PropertyRecord propertyRecord =\n+          propertyRecords.getOrLoad(propertyRecordId, primitive).forReadingLinkage();\n+      if (propertyRecord.getPropertyBlock(propertyKey) != null)\n+      {\n+        return propertyRecordId;\n+      }\n+      propertyRecordId = propertyRecord.getNextProp();\n+    }\n \n-        return Record.NO_NEXT_PROPERTY.intValue();\n+    if (strict)\n+    {\n+      throw new IllegalStateException(\"No property record in property chain for \" + primitive +\n+          \" contained property with key \" + propertyKey);\n     }\n \n-    public void getPropertyChain( long nextProp,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n-            Listener<PropertyBlock> collector )\n+    return Record.NO_NEXT_PROPERTY.intValue();\n+  }\n+\n+  public void getPropertyChain(long nextProp,\n+                               RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n+                               Listener<PropertyBlock> collector)\n+  {\n+    while (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n     {\n-        while ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            PropertyRecord propRecord = propertyRecords.getOrLoad( nextProp, null ).forReadingData();\n-            for ( PropertyBlock propBlock : propRecord )\n-            {\n-                collector.receive( propBlock );\n-            }\n-            nextProp = propRecord.getNextProp();\n-        }\n+      PropertyRecord propRecord = propertyRecords.getOrLoad(nextProp, null).forReadingData();\n+      for (PropertyBlock propBlock : propRecord)\n+      {\n+        collector.receive(propBlock);\n+      }\n+      nextProp = propRecord.getNextProp();\n     }\n+  }\n \n-    public boolean assertPropertyChain( PrimitiveRecord primitive,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+  public boolean assertPropertyChain(PrimitiveRecord primitive,\n+                                     RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n+  {\n+    List<PropertyRecord> toCheck = new LinkedList<>();\n+    long nextIdToFetch = primitive.getNextProp();\n+    while (nextIdToFetch != Record.NO_NEXT_PROPERTY.intValue())\n+    {\n+      PropertyRecord propRecord = propertyRecords.getOrLoad(nextIdToFetch, primitive).forReadingLinkage();\n+      toCheck.add(propRecord);\n+      assert propRecord.inUse() : primitive + \"->\"\n+          + Arrays.toString(toCheck.toArray());\n+      assert propRecord.size() <= PropertyType.getPayloadSize() : propRecord + \" size \" + propRecord.size();\n+      nextIdToFetch = propRecord.getNextProp();\n+    }\n+    if (toCheck.isEmpty())\n+    {\n+      assert primitive.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive;\n+      return true;\n+    }\n+    PropertyRecord first = toCheck.get(0);\n+    PropertyRecord last = toCheck.get(toCheck.size() - 1);\n+    assert first.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : primitive\n+        + \"->\"\n+        + Arrays.toString(toCheck.toArray());\n+    assert last.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive\n+        + \"->\"\n+        + Arrays.toString(toCheck.toArray());\n+    PropertyRecord current;\n+    PropertyRecord previous = first;\n+    for (int i = 1; i < toCheck.size(); i++)\n     {\n-        List<PropertyRecord> toCheck = new LinkedList<>();\n-        long nextIdToFetch = primitive.getNextProp();\n-        while ( nextIdToFetch != Record.NO_NEXT_PROPERTY.intValue() )\n-        {\n-            PropertyRecord propRecord = propertyRecords.getOrLoad( nextIdToFetch, primitive ).forReadingLinkage();\n-            toCheck.add( propRecord );\n-            assert propRecord.inUse() : primitive + \"->\"\n-                                        + Arrays.toString( toCheck.toArray() );\n-            assert propRecord.size() <= PropertyType.getPayloadSize() : propRecord + \" size \" + propRecord.size();\n-            nextIdToFetch = propRecord.getNextProp();\n-        }\n-        if ( toCheck.isEmpty() )\n-        {\n-            assert primitive.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive;\n-            return true;\n-        }\n-        PropertyRecord first = toCheck.get( 0 );\n-        PropertyRecord last = toCheck.get( toCheck.size() - 1 );\n-        assert first.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : primitive\n-                                                                               + \"->\"\n-                                                                               + Arrays.toString( toCheck.toArray() );\n-        assert last.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive\n-                                                                          + \"->\"\n-                                                                          + Arrays.toString( toCheck.toArray() );\n-        PropertyRecord current;\n-        PropertyRecord previous = first;\n-        for ( int i = 1; i < toCheck.size(); i++ )\n-        {\n-            current = toCheck.get( i );\n-            assert current.getPrevProp() == previous.getId() : primitive\n-                                                               + \"->\"\n-                                                               + Arrays.toString( toCheck.toArray() );\n-            assert previous.getNextProp() == current.getId() : primitive\n-                                                               + \"->\"\n-                                                               + Arrays.toString( toCheck.toArray() );\n-            previous = current;\n-        }\n-        return true;\n+      current = toCheck.get(i);\n+      assert current.getPrevProp() == previous.getId() : primitive\n+          + \"->\"\n+          + Arrays.toString(toCheck.toArray());\n+      assert previous.getNextProp() == current.getId() : primitive\n+          + \"->\"\n+          + Arrays.toString(toCheck.toArray());\n+      previous = current;\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 128
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2276/PropertyTraverser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2276/PropertyTraverser.java\nindex e6879437db9..7b96668799c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2276/PropertyTraverser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2276/PropertyTraverser.java\n@@ -45,33 +45,29 @@ public class PropertyTraverser\n      * @return property record id containing property with the given {@code propertyKey}, otherwise if\n      * {@code strict} is false value of {@link Record#NO_NEXT_PROPERTY}.\n      */\n-    public long findPropertyRecordContaining( PrimitiveRecord primitive, int propertyKey,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords, boolean strict )\n+    public long findPropertyRecordContaining( PrimitiveRecord primitive, int propertyKey, RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords, boolean strict )\n     {\n         long propertyRecordId = primitive.getNextProp();\n         while ( !Record.NO_NEXT_PROPERTY.is( propertyRecordId ) )\n         {\n-            PropertyRecord propertyRecord =\n-                    propertyRecords.getOrLoad( propertyRecordId, primitive ).forReadingLinkage();\n-            if ( propertyRecord.getPropertyBlock( propertyKey ) != null )\n+            PropertyRecord propertyRecord = propertyRecords.getOrLoad( propertyRecordId, primitive ).forReadingLinkage();\n+if ( propertyRecord.getPropertyBlock( propertyKey ) != null )\n             {\n                 return propertyRecordId;\n             }\n-            propertyRecordId = propertyRecord.getNextProp();\n+\n+propertyRecordId = propertyRecord.getNextProp();\n         }\n \n         if ( strict )\n         {\n-            throw new IllegalStateException( \"No property record in property chain for \" + primitive +\n-                    \" contained property with key \" + propertyKey );\n+            throw new IllegalStateException( \"No property record in property chain for \" + primitive + \" contained property with key \" + propertyKey );\n         }\n \n         return Record.NO_NEXT_PROPERTY.intValue();\n     }\n \n-    public void getPropertyChain( long nextProp,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n-            Listener<PropertyBlock> collector )\n+    public void getPropertyChain( long nextProp, RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords, Listener<PropertyBlock> collector )\n     {\n         while ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n         {\n@@ -80,12 +76,12 @@ public class PropertyTraverser\n             {\n                 collector.receive( propBlock );\n             }\n-            nextProp = propRecord.getNextProp();\n+\n+nextProp = propRecord.getNextProp();\n         }\n     }\n \n-    public boolean assertPropertyChain( PrimitiveRecord primitive,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+    public boolean assertPropertyChain( PrimitiveRecord primitive, RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords )\n     {\n         List<PropertyRecord> toCheck = new LinkedList<>();\n         long nextIdToFetch = primitive.getNextProp();\n@@ -93,37 +89,30 @@ public class PropertyTraverser\n         {\n             PropertyRecord propRecord = propertyRecords.getOrLoad( nextIdToFetch, primitive ).forReadingLinkage();\n             toCheck.add( propRecord );\n-            assert propRecord.inUse() : primitive + \"->\"\n-                                        + Arrays.toString( toCheck.toArray() );\n-            assert propRecord.size() <= PropertyType.getPayloadSize() : propRecord + \" size \" + propRecord.size();\n+            assert propRecord.inUse() : primitive + \"->\" + Arrays.toString( toCheck.toArray() );\n+assert propRecord.size() <= PropertyType.getPayloadSize() : propRecord + \" size \" + propRecord.size();\n             nextIdToFetch = propRecord.getNextProp();\n         }\n-        if ( toCheck.isEmpty() )\n+\n+if ( toCheck.isEmpty() )\n         {\n             assert primitive.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive;\n             return true;\n         }\n-        PropertyRecord first = toCheck.get( 0 );\n+\n+PropertyRecord first = toCheck.get( 0 );\n         PropertyRecord last = toCheck.get( toCheck.size() - 1 );\n-        assert first.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : primitive\n-                                                                               + \"->\"\n-                                                                               + Arrays.toString( toCheck.toArray() );\n-        assert last.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive\n-                                                                          + \"->\"\n-                                                                          + Arrays.toString( toCheck.toArray() );\n-        PropertyRecord current;\n+        assert first.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : primitive + \"->\" + Arrays.toString( toCheck.toArray() );\n+assert last.getNextProp() == Record.NO_NEXT_PROPERTY.intValue() : primitive + \"->\" + Arrays.toString( toCheck.toArray() );\n+PropertyRecord current;\n         PropertyRecord previous = first;\n         for ( int i = 1; i < toCheck.size(); i++ )\n         {\n             current = toCheck.get( i );\n-            assert current.getPrevProp() == previous.getId() : primitive\n-                                                               + \"->\"\n-                                                               + Arrays.toString( toCheck.toArray() );\n-            assert previous.getNextProp() == current.getId() : primitive\n-                                                               + \"->\"\n-                                                               + Arrays.toString( toCheck.toArray() );\n-            previous = current;\n+            assert current.getPrevProp() == previous.getId() : primitive + \"->\" + Arrays.toString( toCheck.toArray() );\n+assert previous.getNextProp() == current.getId() : primitive + \"->\" + Arrays.toString( toCheck.toArray() );\n+previous = current;\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}