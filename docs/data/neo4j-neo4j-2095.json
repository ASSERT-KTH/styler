{
    "project_name": "neo4j-neo4j",
    "error_id": "2095",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2095/PropertyDeleter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2095/PropertyDeleter.java\nindex 816a443efd9..92b57c5e7b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2095/PropertyDeleter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2095/PropertyDeleter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import org.neo4j.internal.recordstorage.RecordAccess.RecordProxy;\n@@ -32,62 +33,62 @@ public class PropertyDeleter\n     private final PropertyTraverser traverser;\n     private final PageCursorTracer cursorTracer;\n \n-    public PropertyDeleter( PropertyTraverser traverser, PageCursorTracer cursorTracer )\n+    public PropertyDeleter(PropertyTraverser traverser, PageCursorTracer cursorTracer)\n     {\n         this.traverser = traverser;\n         this.cursorTracer = cursorTracer;\n     }\n \n-    public void deletePropertyChain( PrimitiveRecord primitive,\n-            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords )\n+    public void deletePropertyChain(PrimitiveRecord primitive,\n+                                    RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n     {\n         long nextProp = primitive.getNextProp();\n-        while ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n+        while (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n         {\n-            RecordProxy<PropertyRecord, PrimitiveRecord> propertyChange = propertyRecords.getOrLoad( nextProp, primitive, cursorTracer );\n+            RecordProxy<PropertyRecord, PrimitiveRecord> propertyChange = propertyRecords.getOrLoad(nextProp, primitive, cursorTracer);\n \n             // TODO forChanging/forReading piggy-backing\n             PropertyRecord propRecord = propertyChange.forChangingData();\n-            deletePropertyRecordIncludingValueRecords( propRecord );\n+            deletePropertyRecordIncludingValueRecords(propRecord);\n             nextProp = propRecord.getNextProp();\n-            propRecord.setChanged( primitive );\n+            propRecord.setChanged(primitive);\n         }\n-        primitive.setNextProp( Record.NO_NEXT_PROPERTY.intValue() );\n+        primitive.setNextProp(Record.NO_NEXT_PROPERTY.intValue());\n     }\n \n-    public static void deletePropertyRecordIncludingValueRecords( PropertyRecord record )\n+    public static void deletePropertyRecordIncludingValueRecords(PropertyRecord record)\n     {\n-        for ( PropertyBlock block : record )\n+        for (PropertyBlock block : record)\n         {\n-            for ( DynamicRecord valueRecord : block.getValueRecords() )\n+            for (DynamicRecord valueRecord : block.getValueRecords())\n             {\n                 assert valueRecord.inUse();\n-                valueRecord.setInUse( false );\n-                record.addDeletedRecord( valueRecord );\n+                valueRecord.setInUse(false);\n+                record.addDeletedRecord(valueRecord);\n             }\n         }\n         record.clearPropertyBlocks();\n-        record.setInUse( false );\n+        record.setInUse(false);\n     }\n \n     /**\n      * Removes property with given {@code propertyKey} from property chain owner by the primitive found in\n      * {@code primitiveProxy} if it exists.\n      *\n-     * @param primitiveProxy access to the primitive record pointing to the start of the property chain.\n-     * @param propertyKey the property key token id to look for and remove.\n+     * @param primitiveProxy  access to the primitive record pointing to the start of the property chain.\n+     * @param propertyKey     the property key token id to look for and remove.\n      * @param propertyRecords access to records.\n      * @return {@code true} if the property was found and removed, otherwise {@code false}.\n      */\n-    public <P extends PrimitiveRecord> boolean removePropertyIfExists( RecordProxy<P,Void> primitiveProxy,\n-            int propertyKey, RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords )\n+    public <P extends PrimitiveRecord> boolean removePropertyIfExists(RecordProxy<P, Void> primitiveProxy,\n+                                                                      int propertyKey, RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n     {\n         PrimitiveRecord primitive = primitiveProxy.forReadingData();\n         long propertyId = // propertyData.getId();\n-                traverser.findPropertyRecordContaining( primitive, propertyKey, propertyRecords, false );\n-        if ( !Record.NO_NEXT_PROPERTY.is( propertyId ) )\n+          traverser.findPropertyRecordContaining(primitive, propertyKey, propertyRecords, false);\n+        if (!Record.NO_NEXT_PROPERTY.is(propertyId))\n         {\n-            removeProperty( primitiveProxy, propertyKey, propertyRecords, primitive, propertyId );\n+            removeProperty(primitiveProxy, propertyKey, propertyRecords, primitive, propertyId);\n             return true;\n         }\n         return false;\n@@ -97,102 +98,101 @@ public class PropertyDeleter\n      * Removes property with given {@code propertyKey} from property chain owner by the primitive found in\n      * {@code primitiveProxy}.\n      *\n-     * @param primitiveProxy access to the primitive record pointing to the start of the property chain.\n-     * @param propertyKey the property key token id to look for and remove.\n+     * @param primitiveProxy  access to the primitive record pointing to the start of the property chain.\n+     * @param propertyKey     the property key token id to look for and remove.\n      * @param propertyRecords access to records.\n      * @throws IllegalStateException if property key was not found in the property chain.\n      */\n-    public <P extends PrimitiveRecord> void removeProperty( RecordProxy<P,Void> primitiveProxy, int propertyKey,\n-            RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords )\n+    public <P extends PrimitiveRecord> void removeProperty(RecordProxy<P, Void> primitiveProxy, int propertyKey,\n+                                                           RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords)\n     {\n         PrimitiveRecord primitive = primitiveProxy.forReadingData();\n         long propertyId = // propertyData.getId();\n-                traverser.findPropertyRecordContaining( primitive, propertyKey, propertyRecords, true );\n-        removeProperty( primitiveProxy, propertyKey, propertyRecords, primitive, propertyId );\n+          traverser.findPropertyRecordContaining(primitive, propertyKey, propertyRecords, true);\n+        removeProperty(primitiveProxy, propertyKey, propertyRecords, primitive, propertyId);\n     }\n \n-    private <P extends PrimitiveRecord> void removeProperty( RecordProxy<P,Void> primitiveProxy, int propertyKey,\n-            RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords, PrimitiveRecord primitive,\n-            long propertyId )\n+    private <P extends PrimitiveRecord> void removeProperty(RecordProxy<P, Void> primitiveProxy, int propertyKey,\n+                                                            RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords, PrimitiveRecord primitive,\n+                                                            long propertyId)\n     {\n-        RecordProxy<PropertyRecord, PrimitiveRecord> recordChange = propertyRecords.getOrLoad( propertyId, primitive, cursorTracer );\n+        RecordProxy<PropertyRecord, PrimitiveRecord> recordChange = propertyRecords.getOrLoad(propertyId, primitive, cursorTracer);\n         PropertyRecord propRecord = recordChange.forChangingData();\n-        if ( !propRecord.inUse() )\n+        if (!propRecord.inUse())\n         {\n-            throw new IllegalStateException( \"Unable to delete property[\" +\n-                    propertyId + \"] since it is already deleted.\" );\n+            throw new IllegalStateException(\"Unable to delete property[\" +\n+              propertyId + \"] since it is already deleted.\");\n         }\n \n-        PropertyBlock block = propRecord.removePropertyBlock( propertyKey );\n-        if ( block == null )\n+        PropertyBlock block = propRecord.removePropertyBlock(propertyKey);\n+        if (block == null)\n         {\n-            throw new IllegalStateException( \"Property with index[\"\n-                                             + propertyKey\n-                                             + \"] is not present in property[\"\n-                                             + propertyId + \"]\" );\n+            throw new IllegalStateException(\"Property with index[\"\n+              + propertyKey\n+              + \"] is not present in property[\"\n+              + propertyId + \"]\");\n         }\n \n-        for ( DynamicRecord valueRecord : block.getValueRecords() )\n+        for (DynamicRecord valueRecord : block.getValueRecords())\n         {\n             assert valueRecord.inUse();\n-            valueRecord.setInUse( false, block.getType().intValue() );\n-            propRecord.addDeletedRecord( valueRecord );\n+            valueRecord.setInUse(false, block.getType().intValue());\n+            propRecord.addDeletedRecord(valueRecord);\n         }\n-        if ( propRecord.size() > 0 )\n+        if (propRecord.size() > 0)\n         {\n             /*\n              * There are remaining blocks in the record. We do not unlink yet.\n              */\n-            propRecord.setChanged( primitive );\n-            assert traverser.assertPropertyChain( primitive, propertyRecords );\n-        }\n-        else\n+            propRecord.setChanged(primitive);\n+            assert traverser.assertPropertyChain(primitive, propertyRecords);\n+        } else\n         {\n-            unlinkPropertyRecord( propRecord, propertyRecords, primitiveProxy );\n+            unlinkPropertyRecord(propRecord, propertyRecords, primitiveProxy);\n         }\n     }\n \n-    private <P extends PrimitiveRecord> void unlinkPropertyRecord( PropertyRecord propRecord,\n-            RecordAccess<PropertyRecord,PrimitiveRecord> propertyRecords,\n-            RecordProxy<P, Void> primitiveRecordChange )\n+    private <P extends PrimitiveRecord> void unlinkPropertyRecord(PropertyRecord propRecord,\n+                                                                  RecordAccess<PropertyRecord, PrimitiveRecord> propertyRecords,\n+                                                                  RecordProxy<P, Void> primitiveRecordChange)\n     {\n         P primitive = primitiveRecordChange.forReadingLinkage();\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n+        assert traverser.assertPropertyChain(primitive, propertyRecords);\n         assert propRecord.size() == 0;\n         long prevProp = propRecord.getPrevProp();\n         long nextProp = propRecord.getNextProp();\n-        if ( primitive.getNextProp() == propRecord.getId() )\n+        if (primitive.getNextProp() == propRecord.getId())\n         {\n             assert propRecord.getPrevProp() == Record.NO_PREVIOUS_PROPERTY.intValue() : propRecord\n-                    + \" for \"\n-                    + primitive;\n-            primitiveRecordChange.forChangingLinkage().setNextProp( nextProp );\n+              + \" for \"\n+              + primitive;\n+            primitiveRecordChange.forChangingLinkage().setNextProp(nextProp);\n         }\n-        if ( prevProp != Record.NO_PREVIOUS_PROPERTY.intValue() )\n+        if (prevProp != Record.NO_PREVIOUS_PROPERTY.intValue())\n         {\n-            PropertyRecord prevPropRecord = propertyRecords.getOrLoad( prevProp, primitive, cursorTracer ).forChangingLinkage();\n+            PropertyRecord prevPropRecord = propertyRecords.getOrLoad(prevProp, primitive, cursorTracer).forChangingLinkage();\n             assert prevPropRecord.inUse() : prevPropRecord + \"->\" + propRecord\n-            + \" for \" + primitive;\n-            prevPropRecord.setNextProp( nextProp );\n-            prevPropRecord.setChanged( primitive );\n+              + \" for \" + primitive;\n+            prevPropRecord.setNextProp(nextProp);\n+            prevPropRecord.setChanged(primitive);\n         }\n-        if ( nextProp != Record.NO_NEXT_PROPERTY.intValue() )\n+        if (nextProp != Record.NO_NEXT_PROPERTY.intValue())\n         {\n-            PropertyRecord nextPropRecord = propertyRecords.getOrLoad( nextProp, primitive, cursorTracer ).forChangingLinkage();\n+            PropertyRecord nextPropRecord = propertyRecords.getOrLoad(nextProp, primitive, cursorTracer).forChangingLinkage();\n             assert nextPropRecord.inUse() : propRecord + \"->\" + nextPropRecord\n-            + \" for \" + primitive;\n-            nextPropRecord.setPrevProp( prevProp );\n-            nextPropRecord.setChanged( primitive );\n+              + \" for \" + primitive;\n+            nextPropRecord.setPrevProp(prevProp);\n+            nextPropRecord.setChanged(primitive);\n         }\n-        propRecord.setInUse( false );\n+        propRecord.setInUse(false);\n         /*\n          *  The following two are not needed - the above line does all the work (PropertyStore\n          *  does not write out the prev/next for !inUse records). It is nice to set this\n          *  however to check for consistency when assertPropertyChain().\n          */\n-        propRecord.setPrevProp( Record.NO_PREVIOUS_PROPERTY.intValue() );\n-        propRecord.setNextProp( Record.NO_NEXT_PROPERTY.intValue() );\n-        propRecord.setChanged( primitive );\n-        assert traverser.assertPropertyChain( primitive, propertyRecords );\n+        propRecord.setPrevProp(Record.NO_PREVIOUS_PROPERTY.intValue());\n+        propRecord.setNextProp(Record.NO_NEXT_PROPERTY.intValue());\n+        propRecord.setChanged(primitive);\n+        assert traverser.assertPropertyChain(primitive, propertyRecords);\n     }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}