{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3676",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "131",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "355",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "358",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "361",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "364",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "493",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "499",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "516",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "523",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "537",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "548",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "556",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "565",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "591",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "600",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "600",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "626",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "632",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "657",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "659",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "659",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "678",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "678",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "761",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "761",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "774",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "774",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "774",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "779",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "782",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "800",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "800",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "807",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "807",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "816",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "816",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "838",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "843",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "843",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "850",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "886",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "889",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "889",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "908",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "914",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "925",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "928",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "931",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "931",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "935",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "935",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "935",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "939",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "949",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "949",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "951",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "951",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "956",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "963",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "968",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "968",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "973",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "973",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "973",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "976",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "976",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "976",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "979",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "982",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "992",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "992",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "995",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "995",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "999",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "999",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1005",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1005",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1010",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1010",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1024",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1024",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1026",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1026",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1033",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1033",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1035",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1035",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1038",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1038",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1040",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1040",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1047",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1049",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1049",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3676/MuninnPageCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3676/MuninnPageCache.java\nindex 86841d3ae51..c4f929d2e24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3676/MuninnPageCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3676/MuninnPageCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.impl.muninn;\n \n import java.io.File;\n@@ -97,970 +98,956 @@ import static org.neo4j.util.FeatureToggles.getInteger;\n  *                                                     'xo.   ..\n  * </pre>\n  * <p>\n- *     In Norse mythology, Huginn (from Old Norse \"thought\") and Muninn (Old Norse\n- *     \"memory\" or \"mind\") are a pair of ravens that fly all over the world, Midgard,\n- *     and bring information to the god Odin.\n+ * In Norse mythology, Huginn (from Old Norse \"thought\") and Muninn (Old Norse\n+ * \"memory\" or \"mind\") are a pair of ravens that fly all over the world, Midgard,\n+ * and bring information to the god Odin.\n  * </p>\n  * <p>\n- *     This implementation of {@link org.neo4j.io.pagecache.PageCache} is optimised for\n- *     configurations with large memory capacities and large stores, and uses sequence\n- *     locks to make uncontended reads and writes fast.\n+ * This implementation of {@link org.neo4j.io.pagecache.PageCache} is optimised for\n+ * configurations with large memory capacities and large stores, and uses sequence\n+ * locks to make uncontended reads and writes fast.\n  * </p>\n  */\n public class MuninnPageCache implements PageCache\n {\n-    public static final byte ZERO_BYTE =\n-            (byte) (flag( MuninnPageCache.class, \"brandedZeroByte\", false ) ? 0x0f : 0);\n-\n-    // The amount of memory we need for every page, both its buffer and its meta-data.\n-    private static final int MEMORY_USE_PER_PAGE = PAGE_SIZE + PageList.META_DATA_BYTES_PER_PAGE;\n-\n-    // Keep this many pages free and ready for use in faulting.\n-    // This will be truncated to be no more than half of the number of pages\n-    // in the cache.\n-    private static final int pagesToKeepFree = getInteger(\n-            MuninnPageCache.class, \"pagesToKeepFree\", 30 );\n-\n-    // This is how many times that, during cooperative eviction, we'll iterate through the entire set of pages looking\n-    // for a page to evict, before we give up and throw CacheLiveLockException. This MUST be greater than 1.\n-    private static final int cooperativeEvictionLiveLockThreshold = getInteger(\n-            MuninnPageCache.class, \"cooperativeEvictionLiveLockThreshold\", 100 );\n-\n-    // This is a pre-allocated constant, so we can throw it without allocating any objects:\n-    @SuppressWarnings( \"ThrowableInstanceNeverThrown\" )\n-    private static final IOException oomException = new IOException(\n-            \"OutOfMemoryError encountered in the page cache background eviction thread\" );\n-\n-    // The field offset to unsafely access the freelist field.\n-    private static final long freelistOffset =\n-            UnsafeUtil.getFieldOffset( MuninnPageCache.class, \"freelist\" );\n-\n-    // This is used as a poison-pill signal in the freelist, to inform any\n-    // page faulting thread that it is now no longer possible to queue up and\n-    // wait for more pages to be evicted, because the page cache has been shut\n-    // down.\n-    private static final FreePage shutdownSignal = new FreePage( 0 );\n-\n-    // A counter used to identify which background threads belong to which page cache.\n-    private static final AtomicInteger pageCacheIdCounter = new AtomicInteger();\n-\n-    // This Executor runs all the background threads for all page cache instances. It allows us to reuse threads\n-    // between multiple page cache instances, which is of no consequence in normal usage, but is quite useful for the\n-    // many, many tests that create and close page caches all the time. We DO NOT want to take an Executor in through\n-    // the constructor of the PageCache, because the Executors have too many configuration options, many of which are\n-    // highly troublesome for our use case; caller-runs, bounded submission queues, bounded thread count, non-daemon\n-    // thread factories, etc.\n-    private static final Executor backgroundThreadExecutor = BackgroundThreadExecutor.INSTANCE;\n-\n-    private static final List<OpenOption> ignoredOpenOptions = Arrays.asList( (OpenOption) StandardOpenOption.APPEND,\n-            StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.SPARSE );\n-\n-    // Used when trying to figure out number of available pages in a page cache. Could be returned from tryGetNumberOfAvailablePages.\n-    private static final int UNKNOWN_AVAILABLE_PAGES = -1;\n-\n-    private final int pageCacheId;\n-    private final PageSwapperFactory swapperFactory;\n-    private final int cachePageSize;\n-    private final int keepFree;\n-    private final PageCacheTracer pageCacheTracer;\n-    private final PageCursorTracerSupplier pageCursorTracerSupplier;\n-    private final VersionContextSupplier versionContextSupplier;\n-    final PageList pages;\n-    // All PageCursors are initialised with their pointers pointing to the victim page. This way, we don't have to throw\n-    // exceptions on bounds checking failures; we can instead return the victim page pointer, and permit the page\n-    // accesses to take place without fear of segfaulting newly allocated cursors.\n-    final long victimPage;\n-\n-    // The freelist is a thread-safe linked-list of FreePage objects, or an AtomicInteger, or null.\n-    // Initially, the field is an AtomicInteger that counts from zero to the max page count, at which point all of the\n-    // pages have been put in use. Once this happens, the field is set to null to allow the background eviction thread\n-    // to start its work. From that point on, the field will operate as a concurrent stack of FreePage objects. The\n-    // eviction thread pushes newly freed FreePage objects onto the stack, and page faulting threads pops FreePage\n-    // objects from the stack. The FreePage objects are single-use, to avoid running into the ABA-problem.\n-    @SuppressWarnings( \"unused\" ) // This field is accessed via Unsafe.\n-    private volatile Object freelist;\n-\n-    // Linked list of mappings - guarded by synchronized(this)\n-    private volatile FileMapping mappedFiles;\n-\n-    // The thread that runs the eviction algorithm. We unpark this when we've run out of\n-    // free pages to grab.\n-    private volatile Thread evictionThread;\n-    // True if the eviction thread is currently parked, without someone having\n-    // signalled it to wake up. This is used as a weak guard for unparking the\n-    // eviction thread, because calling unpark too much (from many page\n-    // faulting threads) can cause contention on the locks protecting that\n-    // threads scheduling meta-data in the OS kernel.\n-    private volatile boolean evictorParked;\n-    private volatile IOException evictorException;\n-\n-    // Flag for when page cache is closed - writes guarded by synchronized(this), reads can be unsynchronized\n-    private volatile boolean closed;\n-\n-    // Only used by ensureThreadsInitialised while holding the monitor lock on this MuninnPageCache instance.\n-    private boolean threadsInitialised;\n-\n-    // 'true' (the default) if we should print any exceptions we get when unmapping a file.\n-    private boolean printExceptionsOnClose;\n-    /**\n-     * Compute the amount of memory needed for a page cache with the given number of 8 KiB pages.\n-     * @param pageCount The number of pages\n-     * @return The memory required for the buffers and meta-data of the given number of pages\n-     */\n-    public static long memoryRequiredForPages( long pageCount )\n-    {\n-        return pageCount * MEMORY_USE_PER_PAGE;\n-    }\n-\n-    /**\n-     * Create page cache.\n-     * @param swapperFactory page cache swapper factory\n-     * @param maxPages maximum number of pages\n-     * @param pageCacheTracer global page cache tracer\n-     * @param pageCursorTracerSupplier supplier of thread local (transaction local) page cursor tracer that will provide\n-     * thread local page cache statistics\n-     * @param versionContextSupplier supplier of thread local (transaction local) version context that will provide\n-     * access to thread local version context\n-     */\n-    public MuninnPageCache(\n-            PageSwapperFactory swapperFactory,\n-            int maxPages,\n-            PageCacheTracer pageCacheTracer,\n-            PageCursorTracerSupplier pageCursorTracerSupplier,\n-            VersionContextSupplier versionContextSupplier )\n-    {\n-        this( swapperFactory,\n-                // Cast to long prevents overflow:\n-                MemoryAllocator.createAllocator( \"\" + memoryRequiredForPages( maxPages ), GlobalMemoryTracker.INSTANCE ),\n-                PAGE_SIZE,\n-                pageCacheTracer,\n-                pageCursorTracerSupplier,\n-                versionContextSupplier );\n-    }\n-\n-    /**\n-     * Create page cache.\n-     * @param swapperFactory page cache swapper factory\n-     * @param memoryAllocator the source of native memory the page cache should use\n-     * @param pageCacheTracer global page cache tracer\n-     * @param pageCursorTracerSupplier supplier of thread local (transaction local) page cursor tracer that will provide\n-     * thread local page cache statistics\n-     * @param versionContextSupplier supplier of thread local (transaction local) version context that will provide\n-     *        access to thread local version context\n-     */\n-    public MuninnPageCache(\n-            PageSwapperFactory swapperFactory,\n-            MemoryAllocator memoryAllocator,\n-            PageCacheTracer pageCacheTracer,\n-            PageCursorTracerSupplier pageCursorTracerSupplier,\n-            VersionContextSupplier versionContextSupplier )\n+  public static final byte ZERO_BYTE =\n+      (byte) (flag(MuninnPageCache.class, \"brandedZeroByte\", false) ? 0x0f : 0);\n+\n+  // The amount of memory we need for every page, both its buffer and its meta-data.\n+  private static final int MEMORY_USE_PER_PAGE = PAGE_SIZE + PageList.META_DATA_BYTES_PER_PAGE;\n+\n+  // Keep this many pages free and ready for use in faulting.\n+  // This will be truncated to be no more than half of the number of pages\n+  // in the cache.\n+  private static final int pagesToKeepFree = getInteger(\n+      MuninnPageCache.class, \"pagesToKeepFree\", 30);\n+\n+  // This is how many times that, during cooperative eviction, we'll iterate through the entire set of pages looking\n+  // for a page to evict, before we give up and throw CacheLiveLockException. This MUST be greater than 1.\n+  private static final int cooperativeEvictionLiveLockThreshold = getInteger(\n+      MuninnPageCache.class, \"cooperativeEvictionLiveLockThreshold\", 100);\n+\n+  // This is a pre-allocated constant, so we can throw it without allocating any objects:\n+  @SuppressWarnings(\"ThrowableInstanceNeverThrown\")\n+  private static final IOException oomException = new IOException(\n+      \"OutOfMemoryError encountered in the page cache background eviction thread\");\n+\n+  // The field offset to unsafely access the freelist field.\n+  private static final long freelistOffset =\n+      UnsafeUtil.getFieldOffset(MuninnPageCache.class, \"freelist\");\n+\n+  // This is used as a poison-pill signal in the freelist, to inform any\n+  // page faulting thread that it is now no longer possible to queue up and\n+  // wait for more pages to be evicted, because the page cache has been shut\n+  // down.\n+  private static final FreePage shutdownSignal = new FreePage(0);\n+\n+  // A counter used to identify which background threads belong to which page cache.\n+  private static final AtomicInteger pageCacheIdCounter = new AtomicInteger();\n+\n+  // This Executor runs all the background threads for all page cache instances. It allows us to reuse threads\n+  // between multiple page cache instances, which is of no consequence in normal usage, but is quite useful for the\n+  // many, many tests that create and close page caches all the time. We DO NOT want to take an Executor in through\n+  // the constructor of the PageCache, because the Executors have too many configuration options, many of which are\n+  // highly troublesome for our use case; caller-runs, bounded submission queues, bounded thread count, non-daemon\n+  // thread factories, etc.\n+  private static final Executor backgroundThreadExecutor = BackgroundThreadExecutor.INSTANCE;\n+\n+  private static final List<OpenOption> ignoredOpenOptions = Arrays.asList((OpenOption) StandardOpenOption.APPEND,\n+      StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.SPARSE);\n+\n+  // Used when trying to figure out number of available pages in a page cache. Could be returned from tryGetNumberOfAvailablePages.\n+  private static final int UNKNOWN_AVAILABLE_PAGES = -1;\n+\n+  private final int pageCacheId;\n+  private final PageSwapperFactory swapperFactory;\n+  private final int cachePageSize;\n+  private final int keepFree;\n+  private final PageCacheTracer pageCacheTracer;\n+  private final PageCursorTracerSupplier pageCursorTracerSupplier;\n+  private final VersionContextSupplier versionContextSupplier;\n+  final PageList pages;\n+  // All PageCursors are initialised with their pointers pointing to the victim page. This way, we don't have to throw\n+  // exceptions on bounds checking failures; we can instead return the victim page pointer, and permit the page\n+  // accesses to take place without fear of segfaulting newly allocated cursors.\n+  final long victimPage;\n+\n+  // The freelist is a thread-safe linked-list of FreePage objects, or an AtomicInteger, or null.\n+  // Initially, the field is an AtomicInteger that counts from zero to the max page count, at which point all of the\n+  // pages have been put in use. Once this happens, the field is set to null to allow the background eviction thread\n+  // to start its work. From that point on, the field will operate as a concurrent stack of FreePage objects. The\n+  // eviction thread pushes newly freed FreePage objects onto the stack, and page faulting threads pops FreePage\n+  // objects from the stack. The FreePage objects are single-use, to avoid running into the ABA-problem.\n+  @SuppressWarnings(\"unused\") // This field is accessed via Unsafe.\n+  private volatile Object freelist;\n+\n+  // Linked list of mappings - guarded by synchronized(this)\n+  private volatile FileMapping mappedFiles;\n+\n+  // The thread that runs the eviction algorithm. We unpark this when we've run out of\n+  // free pages to grab.\n+  private volatile Thread evictionThread;\n+  // True if the eviction thread is currently parked, without someone having\n+  // signalled it to wake up. This is used as a weak guard for unparking the\n+  // eviction thread, because calling unpark too much (from many page\n+  // faulting threads) can cause contention on the locks protecting that\n+  // threads scheduling meta-data in the OS kernel.\n+  private volatile boolean evictorParked;\n+  private volatile IOException evictorException;\n+\n+  // Flag for when page cache is closed - writes guarded by synchronized(this), reads can be unsynchronized\n+  private volatile boolean closed;\n+\n+  // Only used by ensureThreadsInitialised while holding the monitor lock on this MuninnPageCache instance.\n+  private boolean threadsInitialised;\n+\n+  // 'true' (the default) if we should print any exceptions we get when unmapping a file.\n+  private boolean printExceptionsOnClose;\n+\n+  /**\n+   * Compute the amount of memory needed for a page cache with the given number of 8 KiB pages.\n+   *\n+   * @param pageCount The number of pages\n+   * @return The memory required for the buffers and meta-data of the given number of pages\n+   */\n+  public static long memoryRequiredForPages(long pageCount)\n+  {\n+    return pageCount * MEMORY_USE_PER_PAGE;\n+  }\n+\n+  /**\n+   * Create page cache.\n+   *\n+   * @param swapperFactory           page cache swapper factory\n+   * @param maxPages                 maximum number of pages\n+   * @param pageCacheTracer          global page cache tracer\n+   * @param pageCursorTracerSupplier supplier of thread local (transaction local) page cursor tracer that will provide\n+   *                                 thread local page cache statistics\n+   * @param versionContextSupplier   supplier of thread local (transaction local) version context that will provide\n+   *                                 access to thread local version context\n+   */\n+  public MuninnPageCache(\n+      PageSwapperFactory swapperFactory,\n+      int maxPages,\n+      PageCacheTracer pageCacheTracer,\n+      PageCursorTracerSupplier pageCursorTracerSupplier,\n+      VersionContextSupplier versionContextSupplier)\n+  {\n+    this(swapperFactory,\n+        // Cast to long prevents overflow:\n+        MemoryAllocator.createAllocator(\"\" + memoryRequiredForPages(maxPages), GlobalMemoryTracker.INSTANCE),\n+        PAGE_SIZE,\n+        pageCacheTracer,\n+        pageCursorTracerSupplier,\n+        versionContextSupplier);\n+  }\n+\n+  /**\n+   * Create page cache.\n+   *\n+   * @param swapperFactory           page cache swapper factory\n+   * @param memoryAllocator          the source of native memory the page cache should use\n+   * @param pageCacheTracer          global page cache tracer\n+   * @param pageCursorTracerSupplier supplier of thread local (transaction local) page cursor tracer that will provide\n+   *                                 thread local page cache statistics\n+   * @param versionContextSupplier   supplier of thread local (transaction local) version context that will provide\n+   *                                 access to thread local version context\n+   */\n+  public MuninnPageCache(\n+      PageSwapperFactory swapperFactory,\n+      MemoryAllocator memoryAllocator,\n+      PageCacheTracer pageCacheTracer,\n+      PageCursorTracerSupplier pageCursorTracerSupplier,\n+      VersionContextSupplier versionContextSupplier)\n+  {\n+    this(swapperFactory, memoryAllocator, PAGE_SIZE, pageCacheTracer, pageCursorTracerSupplier, versionContextSupplier);\n+  }\n+\n+  /**\n+   * Constructor variant that allows setting a non-standard cache page size.\n+   * Only ever use this for testing.\n+   */\n+  @SuppressWarnings(\"DeprecatedIsStillUsed\")\n+  @Deprecated\n+  public MuninnPageCache(\n+      PageSwapperFactory swapperFactory,\n+      MemoryAllocator memoryAllocator,\n+      int cachePageSize,\n+      PageCacheTracer pageCacheTracer,\n+      PageCursorTracerSupplier pageCursorTracerSupplier,\n+      VersionContextSupplier versionContextSupplier)\n+  {\n+    verifyHacks();\n+    verifyCachePageSizeIsPowerOfTwo(cachePageSize);\n+    int maxPages = calculatePageCount(memoryAllocator, cachePageSize);\n+\n+    // Expose the total number of pages\n+    pageCacheTracer.maxPages(maxPages);\n+    MemoryAllocationTracker memoryTracker = GlobalMemoryTracker.INSTANCE;\n+\n+    this.pageCacheId = pageCacheIdCounter.incrementAndGet();\n+    this.swapperFactory = swapperFactory;\n+    this.cachePageSize = cachePageSize;\n+    this.keepFree = Math.min(pagesToKeepFree, maxPages / 2);\n+    this.pageCacheTracer = pageCacheTracer;\n+    this.pageCursorTracerSupplier = pageCursorTracerSupplier;\n+    this.versionContextSupplier = versionContextSupplier;\n+    this.printExceptionsOnClose = true;\n+    long alignment = swapperFactory.getRequiredBufferAlignment();\n+    this.victimPage = VictimPageReference.getVictimPage(cachePageSize, memoryTracker);\n+    this.pages = new PageList(maxPages, cachePageSize, memoryAllocator, new SwapperSet(), victimPage, alignment);\n+\n+    setFreelistHead(new AtomicInteger());\n+  }\n+\n+  private static void verifyHacks()\n+  {\n+    // Make sure that we have access to theUnsafe.\n+    UnsafeUtil.assertHasUnsafe();\n+  }\n+\n+  private static void verifyCachePageSizeIsPowerOfTwo(int cachePageSize)\n+  {\n+    int exponent = 31 - Integer.numberOfLeadingZeros(cachePageSize);\n+    if (1 << exponent != cachePageSize)\n     {\n-        this( swapperFactory, memoryAllocator, PAGE_SIZE, pageCacheTracer, pageCursorTracerSupplier, versionContextSupplier );\n+      throw new IllegalArgumentException(\n+          \"Cache page size must be a power of two, but was \" + cachePageSize);\n     }\n-\n-    /**\n-     * Constructor variant that allows setting a non-standard cache page size.\n-     * Only ever use this for testing.\n-     */\n-    @SuppressWarnings( \"DeprecatedIsStillUsed\" )\n-    @Deprecated\n-    public MuninnPageCache(\n-            PageSwapperFactory swapperFactory,\n-            MemoryAllocator memoryAllocator,\n-            int cachePageSize,\n-            PageCacheTracer pageCacheTracer,\n-            PageCursorTracerSupplier pageCursorTracerSupplier,\n-            VersionContextSupplier versionContextSupplier )\n+  }\n+\n+  private static int calculatePageCount(MemoryAllocator memoryAllocator, int cachePageSize)\n+  {\n+    long memoryPerPage = cachePageSize + PageList.META_DATA_BYTES_PER_PAGE;\n+    long maxPages = memoryAllocator.availableMemory() / memoryPerPage;\n+    int minimumPageCount = 2;\n+    if (maxPages < minimumPageCount)\n     {\n-        verifyHacks();\n-        verifyCachePageSizeIsPowerOfTwo( cachePageSize );\n-        int maxPages = calculatePageCount( memoryAllocator, cachePageSize );\n-\n-        // Expose the total number of pages\n-        pageCacheTracer.maxPages( maxPages );\n-        MemoryAllocationTracker memoryTracker = GlobalMemoryTracker.INSTANCE;\n-\n-        this.pageCacheId = pageCacheIdCounter.incrementAndGet();\n-        this.swapperFactory = swapperFactory;\n-        this.cachePageSize = cachePageSize;\n-        this.keepFree = Math.min( pagesToKeepFree, maxPages / 2 );\n-        this.pageCacheTracer = pageCacheTracer;\n-        this.pageCursorTracerSupplier = pageCursorTracerSupplier;\n-        this.versionContextSupplier = versionContextSupplier;\n-        this.printExceptionsOnClose = true;\n-        long alignment = swapperFactory.getRequiredBufferAlignment();\n-        this.victimPage = VictimPageReference.getVictimPage( cachePageSize, memoryTracker );\n-        this.pages = new PageList( maxPages, cachePageSize, memoryAllocator, new SwapperSet(), victimPage, alignment );\n-\n-        setFreelistHead( new AtomicInteger() );\n+      throw new IllegalArgumentException(format(\n+          \"Page cache must have at least %s pages (%s bytes of memory), but was given %s pages.\",\n+          minimumPageCount, minimumPageCount * memoryPerPage, maxPages));\n     }\n-\n-    private static void verifyHacks()\n+    maxPages = Math.min(maxPages, PageList.MAX_PAGES);\n+    return Math.toIntExact(maxPages);\n+  }\n+\n+  @Override\n+  public synchronized PagedFile map(File file, int filePageSize, OpenOption... openOptions) throws IOException\n+  {\n+    assertHealthy();\n+    ensureThreadsInitialised();\n+    if (filePageSize > cachePageSize)\n     {\n-        // Make sure that we have access to theUnsafe.\n-        UnsafeUtil.assertHasUnsafe();\n+      throw new IllegalArgumentException(\n+          \"Cannot map files with a filePageSize (\" + filePageSize + \") that is greater than the \" +\n+              \"cachePageSize (\" + cachePageSize + \")\");\n     }\n-\n-    private static void verifyCachePageSizeIsPowerOfTwo( int cachePageSize )\n+    file = file.getCanonicalFile();\n+    boolean createIfNotExists = false;\n+    boolean truncateExisting = false;\n+    boolean deleteOnClose = false;\n+    boolean anyPageSize = false;\n+    for (OpenOption option : openOptions)\n     {\n-        int exponent = 31 - Integer.numberOfLeadingZeros( cachePageSize );\n-        if ( 1 << exponent != cachePageSize )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Cache page size must be a power of two, but was \" + cachePageSize );\n-        }\n+      if (option.equals(StandardOpenOption.CREATE))\n+      {\n+        createIfNotExists = true;\n+      } else if (option.equals(StandardOpenOption.TRUNCATE_EXISTING))\n+      {\n+        truncateExisting = true;\n+      } else if (option.equals(StandardOpenOption.DELETE_ON_CLOSE))\n+      {\n+        deleteOnClose = true;\n+      } else if (option.equals(PageCacheOpenOptions.ANY_PAGE_SIZE))\n+      {\n+        anyPageSize = true;\n+      } else if (!ignoredOpenOptions.contains(option))\n+      {\n+        throw new UnsupportedOperationException(\"Unsupported OpenOption: \" + option);\n+      }\n     }\n \n-    private static int calculatePageCount( MemoryAllocator memoryAllocator, int cachePageSize )\n-    {\n-        long memoryPerPage = cachePageSize + PageList.META_DATA_BYTES_PER_PAGE;\n-        long maxPages = memoryAllocator.availableMemory() / memoryPerPage;\n-        int minimumPageCount = 2;\n-        if ( maxPages < minimumPageCount )\n-        {\n-            throw new IllegalArgumentException( format(\n-                    \"Page cache must have at least %s pages (%s bytes of memory), but was given %s pages.\",\n-                    minimumPageCount, minimumPageCount * memoryPerPage, maxPages ) );\n-        }\n-        maxPages = Math.min( maxPages, PageList.MAX_PAGES );\n-        return Math.toIntExact( maxPages );\n-    }\n+    FileMapping current = mappedFiles;\n \n-    @Override\n-    public synchronized PagedFile map( File file, int filePageSize, OpenOption... openOptions ) throws IOException\n+    // find an existing mapping\n+    while (current != null)\n     {\n-        assertHealthy();\n-        ensureThreadsInitialised();\n-        if ( filePageSize > cachePageSize )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Cannot map files with a filePageSize (\" + filePageSize + \") that is greater than the \" +\n-                    \"cachePageSize (\" + cachePageSize + \")\" );\n-        }\n-        file = file.getCanonicalFile();\n-        boolean createIfNotExists = false;\n-        boolean truncateExisting = false;\n-        boolean deleteOnClose = false;\n-        boolean anyPageSize = false;\n-        for ( OpenOption option : openOptions )\n-        {\n-            if ( option.equals( StandardOpenOption.CREATE ) )\n-            {\n-                createIfNotExists = true;\n-            }\n-            else if ( option.equals( StandardOpenOption.TRUNCATE_EXISTING ) )\n-            {\n-                truncateExisting = true;\n-            }\n-            else if ( option.equals( StandardOpenOption.DELETE_ON_CLOSE ) )\n-            {\n-                deleteOnClose = true;\n-            }\n-            else if ( option.equals( PageCacheOpenOptions.ANY_PAGE_SIZE ) )\n-            {\n-                anyPageSize = true;\n-            }\n-            else if ( !ignoredOpenOptions.contains( option ) )\n-            {\n-                throw new UnsupportedOperationException( \"Unsupported OpenOption: \" + option );\n-            }\n-        }\n-\n-        FileMapping current = mappedFiles;\n-\n-        // find an existing mapping\n-        while ( current != null )\n+      if (current.file.equals(file))\n+      {\n+        MuninnPagedFile pagedFile = current.pagedFile;\n+        if (pagedFile.pageSize() != filePageSize && !anyPageSize)\n         {\n-            if ( current.file.equals( file ) )\n-            {\n-                MuninnPagedFile pagedFile = current.pagedFile;\n-                if ( pagedFile.pageSize() != filePageSize && !anyPageSize )\n-                {\n-                    String msg = \"Cannot map file \" + file + \" with \" +\n-                            \"filePageSize \" + filePageSize + \" bytes, \" +\n-                            \"because it has already been mapped with a \" +\n-                            \"filePageSize of \" + pagedFile.pageSize() +\n-                            \" bytes.\";\n-                    throw new IllegalArgumentException( msg );\n-                }\n-                if ( truncateExisting )\n-                {\n-                    throw new UnsupportedOperationException( \"Cannot truncate a file that is already mapped\" );\n-                }\n-                pagedFile.incrementRefCount();\n-                pagedFile.markDeleteOnClose( deleteOnClose );\n-                return pagedFile;\n-            }\n-            current = current.next;\n+          String msg = \"Cannot map file \" + file + \" with \" +\n+              \"filePageSize \" + filePageSize + \" bytes, \" +\n+              \"because it has already been mapped with a \" +\n+              \"filePageSize of \" + pagedFile.pageSize() +\n+              \" bytes.\";\n+          throw new IllegalArgumentException(msg);\n         }\n-\n-        if ( filePageSize < Long.BYTES )\n+        if (truncateExisting)\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot map files with a filePageSize (\" + filePageSize + \") that is less than \" +\n-                    Long.BYTES + \" bytes\" );\n+          throw new UnsupportedOperationException(\"Cannot truncate a file that is already mapped\");\n         }\n-\n-        // there was no existing mapping\n-        MuninnPagedFile pagedFile = new MuninnPagedFile(\n-                file,\n-                this,\n-                filePageSize,\n-                swapperFactory,\n-                pageCacheTracer,\n-                pageCursorTracerSupplier,\n-                versionContextSupplier,\n-                createIfNotExists,\n-                truncateExisting );\n         pagedFile.incrementRefCount();\n-        pagedFile.markDeleteOnClose( deleteOnClose );\n-        current = new FileMapping( file, pagedFile );\n-        current.next = mappedFiles;\n-        mappedFiles = current;\n-        pageCacheTracer.mappedFile( file );\n+        pagedFile.markDeleteOnClose(deleteOnClose);\n         return pagedFile;\n+      }\n+      current = current.next;\n     }\n \n-    @Override\n-    public synchronized Optional<PagedFile> getExistingMapping( File file ) throws IOException\n+    if (filePageSize < Long.BYTES)\n     {\n-        assertHealthy();\n-        ensureThreadsInitialised();\n-\n-        file = file.getCanonicalFile();\n-        MuninnPagedFile pagedFile = tryGetMappingOrNull( file );\n-        if ( pagedFile != null )\n-        {\n-            pagedFile.incrementRefCount();\n-            return Optional.of( pagedFile );\n-        }\n-        return Optional.empty();\n+      throw new IllegalArgumentException(\n+          \"Cannot map files with a filePageSize (\" + filePageSize + \") that is less than \" +\n+              Long.BYTES + \" bytes\");\n     }\n \n-    private MuninnPagedFile tryGetMappingOrNull( File file )\n+    // there was no existing mapping\n+    MuninnPagedFile pagedFile = new MuninnPagedFile(\n+        file,\n+        this,\n+        filePageSize,\n+        swapperFactory,\n+        pageCacheTracer,\n+        pageCursorTracerSupplier,\n+        versionContextSupplier,\n+        createIfNotExists,\n+        truncateExisting);\n+    pagedFile.incrementRefCount();\n+    pagedFile.markDeleteOnClose(deleteOnClose);\n+    current = new FileMapping(file, pagedFile);\n+    current.next = mappedFiles;\n+    mappedFiles = current;\n+    pageCacheTracer.mappedFile(file);\n+    return pagedFile;\n+  }\n+\n+  @Override\n+  public synchronized Optional<PagedFile> getExistingMapping(File file) throws IOException\n+  {\n+    assertHealthy();\n+    ensureThreadsInitialised();\n+\n+    file = file.getCanonicalFile();\n+    MuninnPagedFile pagedFile = tryGetMappingOrNull(file);\n+    if (pagedFile != null)\n     {\n-        FileMapping current = mappedFiles;\n-\n-        // find an existing mapping\n-        while ( current != null )\n-        {\n-            if ( current.file.equals( file ) )\n-            {\n-                return current.pagedFile;\n-            }\n-            current = current.next;\n-        }\n-\n-        // no mapping exists\n-        return null;\n+      pagedFile.incrementRefCount();\n+      return Optional.of(pagedFile);\n     }\n+    return Optional.empty();\n+  }\n \n-    @Override\n-    public synchronized List<PagedFile> listExistingMappings() throws IOException\n-    {\n-        assertNotClosed();\n-        ensureThreadsInitialised();\n-\n-        List<PagedFile> list = new ArrayList<>();\n-        FileMapping current = mappedFiles;\n-\n-        while ( current != null )\n-        {\n-            // Note that we are NOT incrementing the reference count here.\n-            // Calling code is expected to be able to deal with asynchronously closed PagedFiles.\n-            MuninnPagedFile pagedFile = current.pagedFile;\n-            list.add( pagedFile );\n-            current = current.next;\n-        }\n-        return list;\n-    }\n+  private MuninnPagedFile tryGetMappingOrNull(File file)\n+  {\n+    FileMapping current = mappedFiles;\n \n-    /**\n-     * Note: Must be called while synchronizing on the MuninnPageCache instance.\n-     */\n-    private void ensureThreadsInitialised() throws IOException\n+    // find an existing mapping\n+    while (current != null)\n     {\n-        if ( threadsInitialised )\n-        {\n-            return;\n-        }\n-        threadsInitialised = true;\n-\n-        try\n-        {\n-            backgroundThreadExecutor.execute( new EvictionTask( this ) );\n-        }\n-        catch ( Exception e )\n-        {\n-            IOException exception = new IOException( e );\n-            try\n-            {\n-                close();\n-            }\n-            catch ( Exception closeException )\n-            {\n-                exception.addSuppressed( closeException );\n-            }\n-            throw exception;\n-        }\n+      if (current.file.equals(file))\n+      {\n+        return current.pagedFile;\n+      }\n+      current = current.next;\n     }\n \n-    synchronized void unmap( MuninnPagedFile file )\n-    {\n-        if ( file.decrementRefCount() )\n-        {\n-            // This was the last reference!\n-            // Find and remove the existing mapping:\n-            FileMapping prev = null;\n-            FileMapping current = mappedFiles;\n+    // no mapping exists\n+    return null;\n+  }\n \n-            while ( current != null )\n-            {\n-                if ( current.pagedFile == file )\n-                {\n-                    if ( prev == null )\n-                    {\n-                        mappedFiles = current.next;\n-                    }\n-                    else\n-                    {\n-                        prev.next = current.next;\n-                    }\n-                    pageCacheTracer.unmappedFile( current.file );\n-                    flushAndCloseWithoutFail( file );\n-                    break;\n-                }\n-                prev = current;\n-                current = current.next;\n-            }\n-        }\n-    }\n+  @Override\n+  public synchronized List<PagedFile> listExistingMappings() throws IOException\n+  {\n+    assertNotClosed();\n+    ensureThreadsInitialised();\n \n-    private void flushAndCloseWithoutFail( MuninnPagedFile file )\n+    List<PagedFile> list = new ArrayList<>();\n+    FileMapping current = mappedFiles;\n+\n+    while (current != null)\n     {\n-        boolean flushedAndClosed = false;\n-        boolean printedFirstException = false;\n-        do\n-        {\n-            try\n-            {\n-                file.flushAndForceForClose();\n-                file.closeSwapper();\n-                flushedAndClosed = true;\n-            }\n-            catch ( IOException e )\n-            {\n-                if ( printExceptionsOnClose && !printedFirstException )\n-                {\n-                    printedFirstException = true;\n-                    try\n-                    {\n-                        e.printStackTrace();\n-                    }\n-                    catch ( Exception ignore )\n-                    {\n-                    }\n-                }\n-            }\n-        }\n-        while ( !flushedAndClosed );\n+      // Note that we are NOT incrementing the reference count here.\n+      // Calling code is expected to be able to deal with asynchronously closed PagedFiles.\n+      MuninnPagedFile pagedFile = current.pagedFile;\n+      list.add(pagedFile);\n+      current = current.next;\n     }\n-\n-    public void setPrintExceptionsOnClose( boolean enabled )\n+    return list;\n+  }\n+\n+  /**\n+   * Note: Must be called while synchronizing on the MuninnPageCache instance.\n+   */\n+  private void ensureThreadsInitialised() throws IOException\n+  {\n+    if (threadsInitialised)\n     {\n-        this.printExceptionsOnClose = enabled;\n+      return;\n     }\n+    threadsInitialised = true;\n \n-    @Override\n-    public void flushAndForce() throws IOException\n+    try\n+    {\n+      backgroundThreadExecutor.execute(new EvictionTask(this));\n+    } catch (Exception e)\n     {\n-        flushAndForce( IOLimiter.unlimited() );\n+      IOException exception = new IOException(e);\n+      try\n+      {\n+        close();\n+      } catch (Exception closeException)\n+      {\n+        exception.addSuppressed(closeException);\n+      }\n+      throw exception;\n     }\n+  }\n \n-    @Override\n-    public void flushAndForce( IOLimiter limiter ) throws IOException\n+  synchronized void unmap(MuninnPagedFile file)\n+  {\n+    if (file.decrementRefCount())\n     {\n-        if ( limiter == null )\n+      // This was the last reference!\n+      // Find and remove the existing mapping:\n+      FileMapping prev = null;\n+      FileMapping current = mappedFiles;\n+\n+      while (current != null)\n+      {\n+        if (current.pagedFile == file)\n         {\n-            throw new IllegalArgumentException( \"IOLimiter cannot be null\" );\n+          if (prev == null)\n+          {\n+            mappedFiles = current.next;\n+          } else\n+          {\n+            prev.next = current.next;\n+          }\n+          pageCacheTracer.unmappedFile(current.file);\n+          flushAndCloseWithoutFail(file);\n+          break;\n         }\n-        assertNotClosed();\n-        List<PagedFile> files = listExistingMappings();\n-        flushAllPages( files, limiter );\n-        clearEvictorException();\n+        prev = current;\n+        current = current.next;\n+      }\n     }\n+  }\n \n-    private void flushAllPages( List<PagedFile> files, IOLimiter limiter ) throws IOException\n+  private void flushAndCloseWithoutFail(MuninnPagedFile file)\n+  {\n+    boolean flushedAndClosed = false;\n+    boolean printedFirstException = false;\n+    do\n     {\n-        try ( MajorFlushEvent cacheFlush = pageCacheTracer.beginCacheFlush() )\n+      try\n+      {\n+        file.flushAndForceForClose();\n+        file.closeSwapper();\n+        flushedAndClosed = true;\n+      } catch (IOException e)\n+      {\n+        if (printExceptionsOnClose && !printedFirstException)\n         {\n-            for ( PagedFile file : files )\n-            {\n-                MuninnPagedFile muninnPagedFile = (MuninnPagedFile) file;\n-                try ( MajorFlushEvent fileFlush = pageCacheTracer.beginFileFlush( muninnPagedFile.swapper ) )\n-                {\n-                    FlushEventOpportunity flushOpportunity = fileFlush.flushEventOpportunity();\n-                    muninnPagedFile.flushAndForceInternal( flushOpportunity, false, limiter );\n-                }\n-                catch ( ClosedChannelException e )\n-                {\n-                    if ( muninnPagedFile.getRefCount() > 0 )\n-                    {\n-                        // The file is not supposed to be closed, since we have a positive ref-count, yet we got a\n-                        // ClosedChannelException anyway? It's an odd situation, so let's tell the outside world about\n-                        // this failure.\n-                        throw e;\n-                    }\n-                    // Otherwise: The file was closed while we were trying to flush it. Since unmapping implies a flush\n-                    // anyway, we can safely assume that this is not a problem. The file was flushed, and it doesn't\n-                    // really matter how that happened. We'll ignore this exception.\n-                }\n-            }\n-            syncDevice();\n+          printedFirstException = true;\n+          try\n+          {\n+            e.printStackTrace();\n+          } catch (Exception ignore)\n+          {\n+          }\n         }\n+      }\n     }\n-\n-    void syncDevice()\n+    while (!flushedAndClosed);\n+  }\n+\n+  public void setPrintExceptionsOnClose(boolean enabled)\n+  {\n+    this.printExceptionsOnClose = enabled;\n+  }\n+\n+  @Override\n+  public void flushAndForce() throws IOException\n+  {\n+    flushAndForce(IOLimiter.unlimited());\n+  }\n+\n+  @Override\n+  public void flushAndForce(IOLimiter limiter) throws IOException\n+  {\n+    if (limiter == null)\n     {\n-        swapperFactory.syncDevice();\n+      throw new IllegalArgumentException(\"IOLimiter cannot be null\");\n     }\n-\n-    @Override\n-    public synchronized void close()\n+    assertNotClosed();\n+    List<PagedFile> files = listExistingMappings();\n+    flushAllPages(files, limiter);\n+    clearEvictorException();\n+  }\n+\n+  private void flushAllPages(List<PagedFile> files, IOLimiter limiter) throws IOException\n+  {\n+    try (MajorFlushEvent cacheFlush = pageCacheTracer.beginCacheFlush())\n     {\n-        if ( closed )\n-        {\n-            return;\n-        }\n-\n-        FileMapping files = mappedFiles;\n-        if ( files != null )\n+      for (PagedFile file : files)\n+      {\n+        MuninnPagedFile muninnPagedFile = (MuninnPagedFile) file;\n+        try (MajorFlushEvent fileFlush = pageCacheTracer.beginFileFlush(muninnPagedFile.swapper))\n         {\n-            StringBuilder msg = new StringBuilder(\n-                    \"Cannot close the PageCache while files are still mapped:\" );\n-            while ( files != null )\n-            {\n-                int refCount = files.pagedFile.getRefCount();\n-                msg.append( \"\\n\\t\" );\n-                msg.append( files.file );\n-                msg.append( \" (\" ).append( refCount );\n-                msg.append( refCount == 1 ? \" mapping)\" : \" mappings)\" );\n-                files = files.next;\n-            }\n-            throw new IllegalStateException( msg.toString() );\n-        }\n-\n-        closed = true;\n-\n-        interrupt( evictionThread );\n-        evictionThread = null;\n-\n-        // Close the page swapper factory last. If this fails then we will still consider ourselves closed.\n-        swapperFactory.close();\n-    }\n-\n-    private void interrupt( Thread thread )\n-    {\n-        if ( thread != null )\n+          FlushEventOpportunity flushOpportunity = fileFlush.flushEventOpportunity();\n+          muninnPagedFile.flushAndForceInternal(flushOpportunity, false, limiter);\n+        } catch (ClosedChannelException e)\n         {\n-            thread.interrupt();\n+          if (muninnPagedFile.getRefCount() > 0)\n+          {\n+            // The file is not supposed to be closed, since we have a positive ref-count, yet we got a\n+            // ClosedChannelException anyway? It's an odd situation, so let's tell the outside world about\n+            // this failure.\n+            throw e;\n+          }\n+          // Otherwise: The file was closed while we were trying to flush it. Since unmapping implies a flush\n+          // anyway, we can safely assume that this is not a problem. The file was flushed, and it doesn't\n+          // really matter how that happened. We'll ignore this exception.\n         }\n+      }\n+      syncDevice();\n     }\n+  }\n \n-    @Override\n-    protected void finalize() throws Throwable\n-    {\n-        close();\n-        super.finalize();\n-    }\n+  void syncDevice()\n+  {\n+    swapperFactory.syncDevice();\n+  }\n \n-    private void assertHealthy() throws IOException\n+  @Override\n+  public synchronized void close()\n+  {\n+    if (closed)\n     {\n-        assertNotClosed();\n-        IOException exception = evictorException;\n-        if ( exception != null )\n-        {\n-            throw new IOException( \"Exception in the page eviction thread\", exception );\n-        }\n+      return;\n     }\n \n-    private void assertNotClosed()\n+    FileMapping files = mappedFiles;\n+    if (files != null)\n     {\n-        if ( closed )\n-        {\n-            throw new IllegalStateException( \"The PageCache has been shut down\" );\n-        }\n+      StringBuilder msg = new StringBuilder(\n+          \"Cannot close the PageCache while files are still mapped:\");\n+      while (files != null)\n+      {\n+        int refCount = files.pagedFile.getRefCount();\n+        msg.append(\"\\n\\t\");\n+        msg.append(files.file);\n+        msg.append(\" (\").append(refCount);\n+        msg.append(refCount == 1 ? \" mapping)\" : \" mappings)\");\n+        files = files.next;\n+      }\n+      throw new IllegalStateException(msg.toString());\n     }\n \n-    @Override\n-    public int pageSize()\n-    {\n-        return cachePageSize;\n-    }\n+    closed = true;\n \n-    @Override\n-    public long maxCachedPages()\n-    {\n-        return pages.getPageCount();\n-    }\n+    interrupt(evictionThread);\n+    evictionThread = null;\n \n-    @Override\n-    public FileSystemAbstraction getCachedFileSystem()\n-    {\n-        return swapperFactory.getFileSystemAbstraction();\n-    }\n+    // Close the page swapper factory last. If this fails then we will still consider ourselves closed.\n+    swapperFactory.close();\n+  }\n \n-    @Override\n-    public void reportEvents()\n+  private void interrupt(Thread thread)\n+  {\n+    if (thread != null)\n     {\n-        pageCursorTracerSupplier.get().reportEvents();\n+      thread.interrupt();\n     }\n-\n-    @Override\n-    public boolean fileSystemSupportsFileOperations()\n+  }\n+\n+  @Override\n+  protected void finalize() throws Throwable\n+  {\n+    close();\n+    super.finalize();\n+  }\n+\n+  private void assertHealthy() throws IOException\n+  {\n+    assertNotClosed();\n+    IOException exception = evictorException;\n+    if (exception != null)\n     {\n-        // Default filesystem supports direct file access.\n-        return getCachedFileSystem() instanceof DefaultFileSystemAbstraction;\n+      throw new IOException(\"Exception in the page eviction thread\", exception);\n     }\n+  }\n \n-    int getPageCacheId()\n+  private void assertNotClosed()\n+  {\n+    if (closed)\n     {\n-        return pageCacheId;\n+      throw new IllegalStateException(\"The PageCache has been shut down\");\n     }\n-\n-    long grabFreeAndExclusivelyLockedPage( PageFaultEvent faultEvent ) throws IOException\n+  }\n+\n+  @Override\n+  public int pageSize()\n+  {\n+    return cachePageSize;\n+  }\n+\n+  @Override\n+  public long maxCachedPages()\n+  {\n+    return pages.getPageCount();\n+  }\n+\n+  @Override\n+  public FileSystemAbstraction getCachedFileSystem()\n+  {\n+    return swapperFactory.getFileSystemAbstraction();\n+  }\n+\n+  @Override\n+  public void reportEvents()\n+  {\n+    pageCursorTracerSupplier.get().reportEvents();\n+  }\n+\n+  @Override\n+  public boolean fileSystemSupportsFileOperations()\n+  {\n+    // Default filesystem supports direct file access.\n+    return getCachedFileSystem() instanceof DefaultFileSystemAbstraction;\n+  }\n+\n+  int getPageCacheId()\n+  {\n+    return pageCacheId;\n+  }\n+\n+  long grabFreeAndExclusivelyLockedPage(PageFaultEvent faultEvent) throws IOException\n+  {\n+    // Review the comment on the freelist field before making changes to\n+    // this part of the code.\n+    // Whatever the case, we're going to the head-pointer of the freelist,\n+    // and in doing so, we can discover a number of things.\n+    // We can discover a MuninnPage object, in which case we can try to\n+    // CAS the freelist pointer to the value of the MuninnPage.nextFree\n+    // pointer, and if this succeeds then we've grabbed that page.\n+    // We can discover a FreePage object, in which case we'll do a similar\n+    // dance by attempting to CAS the freelist to the FreePage objects next\n+    // pointer, and again, if we succeed then we've grabbed the MuninnPage\n+    // given by the FreePage object.\n+    // We can discover a null-pointer, in which case the freelist has just\n+    // been emptied for whatever it contained before. New FreePage objects\n+    // are eventually going to be added to the freelist, but we are not\n+    // going to wait around for that to happen. If the freelist is empty,\n+    // then we do our own eviction to get a free page.\n+    // If we find a FreePage object on the freelist, then it is important\n+    // to check and see if it is the shutdownSignal instance. If that's the\n+    // case, then the page cache has been shut down, and we should throw an\n+    // exception from our page fault routine.\n+    Object current;\n+    for (; ; )\n     {\n-        // Review the comment on the freelist field before making changes to\n-        // this part of the code.\n-        // Whatever the case, we're going to the head-pointer of the freelist,\n-        // and in doing so, we can discover a number of things.\n-        // We can discover a MuninnPage object, in which case we can try to\n-        // CAS the freelist pointer to the value of the MuninnPage.nextFree\n-        // pointer, and if this succeeds then we've grabbed that page.\n-        // We can discover a FreePage object, in which case we'll do a similar\n-        // dance by attempting to CAS the freelist to the FreePage objects next\n-        // pointer, and again, if we succeed then we've grabbed the MuninnPage\n-        // given by the FreePage object.\n-        // We can discover a null-pointer, in which case the freelist has just\n-        // been emptied for whatever it contained before. New FreePage objects\n-        // are eventually going to be added to the freelist, but we are not\n-        // going to wait around for that to happen. If the freelist is empty,\n-        // then we do our own eviction to get a free page.\n-        // If we find a FreePage object on the freelist, then it is important\n-        // to check and see if it is the shutdownSignal instance. If that's the\n-        // case, then the page cache has been shut down, and we should throw an\n-        // exception from our page fault routine.\n-        Object current;\n-        for (;;)\n+      assertHealthy();\n+      current = getFreelistHead();\n+      if (current == null)\n+      {\n+        unparkEvictor();\n+        long pageRef = cooperativelyEvict(faultEvent);\n+        if (pageRef != 0)\n         {\n-            assertHealthy();\n-            current = getFreelistHead();\n-            if ( current == null )\n-            {\n-                unparkEvictor();\n-                long pageRef = cooperativelyEvict( faultEvent );\n-                if ( pageRef != 0 )\n-                {\n-                    return pageRef;\n-                }\n-            }\n-            else if ( current instanceof AtomicInteger )\n-            {\n-                int pageCount = pages.getPageCount();\n-                AtomicInteger counter = (AtomicInteger) current;\n-                int pageId = counter.get();\n-                if ( pageId < pageCount && counter.compareAndSet( pageId, pageId + 1 ) )\n-                {\n-                    return pages.deref( pageId );\n-                }\n-                if ( pageId >= pageCount )\n-                {\n-                    compareAndSetFreelistHead( current, null );\n-                }\n-            }\n-            else if ( current instanceof FreePage )\n-            {\n-                FreePage freePage = (FreePage) current;\n-                if ( freePage == shutdownSignal )\n-                {\n-                    throw new IllegalStateException( \"The PageCache has been shut down.\" );\n-                }\n-\n-                if ( compareAndSetFreelistHead( freePage, freePage.next ) )\n-                {\n-                    return freePage.pageRef;\n-                }\n-            }\n+          return pageRef;\n         }\n-    }\n-\n-    private long cooperativelyEvict( PageFaultEvent faultEvent ) throws IOException\n-    {\n-        int iterations = 0;\n+      } else if (current instanceof AtomicInteger)\n+      {\n         int pageCount = pages.getPageCount();\n-        int clockArm = ThreadLocalRandom.current().nextInt( pageCount );\n-        boolean evicted = false;\n-        long pageRef;\n-        do\n+        AtomicInteger counter = (AtomicInteger) current;\n+        int pageId = counter.get();\n+        if (pageId < pageCount && counter.compareAndSet(pageId, pageId + 1))\n         {\n-            assertHealthy();\n-            if ( getFreelistHead() != null )\n-            {\n-                return 0;\n-            }\n-\n-            if ( clockArm == pageCount )\n-            {\n-                if ( iterations == cooperativeEvictionLiveLockThreshold )\n-                {\n-                    throw cooperativeEvictionLiveLock();\n-                }\n-                iterations++;\n-                clockArm = 0;\n-            }\n-\n-            pageRef = pages.deref( clockArm );\n-            if ( pages.isLoaded( pageRef ) && pages.decrementUsage( pageRef ) )\n-            {\n-                evicted = pages.tryEvict( pageRef, faultEvent );\n-            }\n-            clockArm++;\n+          return pages.deref(pageId);\n+        }\n+        if (pageId >= pageCount)\n+        {\n+          compareAndSetFreelistHead(current, null);\n+        }\n+      } else if (current instanceof FreePage)\n+      {\n+        FreePage freePage = (FreePage) current;\n+        if (freePage == shutdownSignal)\n+        {\n+          throw new IllegalStateException(\"The PageCache has been shut down.\");\n         }\n-        while ( !evicted );\n-        return pageRef;\n-    }\n \n-    private CacheLiveLockException cooperativeEvictionLiveLock()\n-    {\n-        return new CacheLiveLockException(\n-                \"Live-lock encountered when trying to cooperatively evict a page during page fault. \" +\n-                \"This happens when we want to access a page that is not in memory, so it has to be faulted in, but \" +\n-                \"there are no free memory pages available to accept the page fault, so we have to evict an existing \" +\n-                \"page, but all the in-memory pages are currently locked by other accesses. If those other access are \" +\n-                \"waiting for our page fault to make progress, then we have a live-lock, and the only way we can get \" +\n-                \"out of it is by throwing this exception. This should be extremely rare, but can happen if the page \" +\n-                \"cache size is tiny and the number of concurrently running transactions is very high. You should be \" +\n-                \"able to get around this problem by increasing the amount of memory allocated to the page cache \" +\n-                \"with the `dbms.memory.pagecache.size` setting. Please contact Neo4j support if you need help tuning \" +\n-                \"your database.\" );\n+        if (compareAndSetFreelistHead(freePage, freePage.next))\n+        {\n+          return freePage.pageRef;\n+        }\n+      }\n     }\n-\n-    private void unparkEvictor()\n+  }\n+\n+  private long cooperativelyEvict(PageFaultEvent faultEvent) throws IOException\n+  {\n+    int iterations = 0;\n+    int pageCount = pages.getPageCount();\n+    int clockArm = ThreadLocalRandom.current().nextInt(pageCount);\n+    boolean evicted = false;\n+    long pageRef;\n+    do\n     {\n-        if ( evictorParked )\n+      assertHealthy();\n+      if (getFreelistHead() != null)\n+      {\n+        return 0;\n+      }\n+\n+      if (clockArm == pageCount)\n+      {\n+        if (iterations == cooperativeEvictionLiveLockThreshold)\n         {\n-            evictorParked = false;\n-            LockSupport.unpark( evictionThread );\n+          throw cooperativeEvictionLiveLock();\n         }\n+        iterations++;\n+        clockArm = 0;\n+      }\n+\n+      pageRef = pages.deref(clockArm);\n+      if (pages.isLoaded(pageRef) && pages.decrementUsage(pageRef))\n+      {\n+        evicted = pages.tryEvict(pageRef, faultEvent);\n+      }\n+      clockArm++;\n     }\n-\n-    private void parkEvictor( long parkNanos )\n+    while (!evicted);\n+    return pageRef;\n+  }\n+\n+  private CacheLiveLockException cooperativeEvictionLiveLock()\n+  {\n+    return new CacheLiveLockException(\n+        \"Live-lock encountered when trying to cooperatively evict a page during page fault. \" +\n+            \"This happens when we want to access a page that is not in memory, so it has to be faulted in, but \" +\n+            \"there are no free memory pages available to accept the page fault, so we have to evict an existing \" +\n+            \"page, but all the in-memory pages are currently locked by other accesses. If those other access are \" +\n+            \"waiting for our page fault to make progress, then we have a live-lock, and the only way we can get \" +\n+            \"out of it is by throwing this exception. This should be extremely rare, but can happen if the page \" +\n+            \"cache size is tiny and the number of concurrently running transactions is very high. You should be \" +\n+            \"able to get around this problem by increasing the amount of memory allocated to the page cache \" +\n+            \"with the `dbms.memory.pagecache.size` setting. Please contact Neo4j support if you need help tuning \" +\n+            \"your database.\");\n+  }\n+\n+  private void unparkEvictor()\n+  {\n+    if (evictorParked)\n     {\n-        // Only called from the background eviction thread!\n-        evictorParked = true;\n-        LockSupport.parkNanos( this, parkNanos );\n-        evictorParked = false;\n+      evictorParked = false;\n+      LockSupport.unpark(evictionThread);\n     }\n-\n-    private Object getFreelistHead()\n+  }\n+\n+  private void parkEvictor(long parkNanos)\n+  {\n+    // Only called from the background eviction thread!\n+    evictorParked = true;\n+    LockSupport.parkNanos(this, parkNanos);\n+    evictorParked = false;\n+  }\n+\n+  private Object getFreelistHead()\n+  {\n+    return UnsafeUtil.getObjectVolatile(this, freelistOffset);\n+  }\n+\n+  private boolean compareAndSetFreelistHead(Object expected, Object update)\n+  {\n+    return UnsafeUtil.compareAndSwapObject(\n+        this, freelistOffset, expected, update);\n+  }\n+\n+  private void setFreelistHead(Object newFreelistHead)\n+  {\n+    UnsafeUtil.putObjectVolatile(this, freelistOffset, newFreelistHead);\n+  }\n+\n+  /**\n+   * Scan through all the pages, one by one, and decrement their usage stamps.\n+   * If a usage reaches zero, we try-write-locking it, and if we get that lock,\n+   * we evict the page. If we don't, we move on to the next page.\n+   * Once we have enough free pages, we park our thread. Page-faulting will\n+   * unpark our thread as needed.\n+   */\n+  void continuouslySweepPages()\n+  {\n+    evictionThread = Thread.currentThread();\n+    int clockArm = 0;\n+\n+    while (!closed)\n     {\n-        return UnsafeUtil.getObjectVolatile( this, freelistOffset );\n+      int pageCountToEvict = parkUntilEvictionRequired(keepFree);\n+      try (EvictionRunEvent evictionRunEvent = pageCacheTracer.beginPageEvictions(pageCountToEvict))\n+      {\n+        clockArm = evictPages(pageCountToEvict, clockArm, evictionRunEvent);\n+      }\n     }\n \n-    private boolean compareAndSetFreelistHead( Object expected, Object update )\n+    // The last thing we do, is signalling the shutdown of the cache via\n+    // the freelist. This signal is looked out for in grabFreePage.\n+    setFreelistHead(shutdownSignal);\n+  }\n+\n+  private int parkUntilEvictionRequired(int keepFree)\n+  {\n+    // Park until we're either interrupted, or the number of free pages drops\n+    // bellow keepFree.\n+    long parkNanos = TimeUnit.MILLISECONDS.toNanos(10);\n+    for (; ; )\n     {\n-        return UnsafeUtil.compareAndSwapObject(\n-                this, freelistOffset, expected, update );\n+      parkEvictor(parkNanos);\n+      if (Thread.interrupted() || closed)\n+      {\n+        return 0;\n+      }\n+\n+      int availablePages = tryGetNumberOfAvailablePages(keepFree);\n+      if (availablePages != UNKNOWN_AVAILABLE_PAGES)\n+      {\n+        return availablePages;\n+      }\n     }\n+  }\n \n-    private void setFreelistHead( Object newFreelistHead )\n-    {\n-        UnsafeUtil.putObjectVolatile( this, freelistOffset, newFreelistHead );\n-    }\n+  private int tryGetNumberOfAvailablePages(int keepFree)\n+  {\n+    Object freelistHead = getFreelistHead();\n \n-    /**\n-     * Scan through all the pages, one by one, and decrement their usage stamps.\n-     * If a usage reaches zero, we try-write-locking it, and if we get that lock,\n-     * we evict the page. If we don't, we move on to the next page.\n-     * Once we have enough free pages, we park our thread. Page-faulting will\n-     * unpark our thread as needed.\n-     */\n-    void continuouslySweepPages()\n+    if (freelistHead == null)\n     {\n-        evictionThread = Thread.currentThread();\n-        int clockArm = 0;\n-\n-        while ( !closed )\n-        {\n-            int pageCountToEvict = parkUntilEvictionRequired( keepFree );\n-            try ( EvictionRunEvent evictionRunEvent = pageCacheTracer.beginPageEvictions( pageCountToEvict ) )\n-            {\n-                clockArm = evictPages( pageCountToEvict, clockArm, evictionRunEvent );\n-            }\n-        }\n-\n-        // The last thing we do, is signalling the shutdown of the cache via\n-        // the freelist. This signal is looked out for in grabFreePage.\n-        setFreelistHead( shutdownSignal );\n-    }\n-\n-    private int parkUntilEvictionRequired( int keepFree )\n+      return keepFree;\n+    } else if (freelistHead.getClass() == FreePage.class)\n     {\n-        // Park until we're either interrupted, or the number of free pages drops\n-        // bellow keepFree.\n-        long parkNanos = TimeUnit.MILLISECONDS.toNanos( 10 );\n-        for (;;)\n-        {\n-            parkEvictor( parkNanos );\n-            if ( Thread.interrupted() || closed )\n-            {\n-                return 0;\n-            }\n-\n-            int availablePages = tryGetNumberOfAvailablePages( keepFree );\n-            if ( availablePages != UNKNOWN_AVAILABLE_PAGES )\n-            {\n-                return availablePages;\n-            }\n-        }\n+      int availablePages = ((FreePage) freelistHead).count;\n+      if (availablePages < keepFree)\n+      {\n+        return keepFree - availablePages;\n+      }\n+    } else if (freelistHead.getClass() == AtomicInteger.class)\n+    {\n+      AtomicInteger counter = (AtomicInteger) freelistHead;\n+      long count = pages.getPageCount() - counter.get();\n+      if (count < keepFree)\n+      {\n+        return count < 0 ? keepFree : (int) (keepFree - count);\n+      }\n     }\n+    return UNKNOWN_AVAILABLE_PAGES;\n+  }\n \n-    private int tryGetNumberOfAvailablePages( int keepFree )\n+  int evictPages(int pageCountToEvict, int clockArm, EvictionRunEvent evictionRunEvent)\n+  {\n+    while (pageCountToEvict > 0 && !closed)\n     {\n-        Object freelistHead = getFreelistHead();\n-\n-        if ( freelistHead == null )\n+      if (clockArm == pages.getPageCount())\n+      {\n+        clockArm = 0;\n+      }\n+\n+      if (closed)\n+      {\n+        // The page cache has been shut down.\n+        return 0;\n+      }\n+\n+      long pageRef = pages.deref(clockArm);\n+      if (pages.isLoaded(pageRef) && pages.decrementUsage(pageRef))\n+      {\n+        try\n         {\n-            return keepFree;\n-        }\n-        else if ( freelistHead.getClass() == FreePage.class )\n+          pageCountToEvict--;\n+          if (pages.tryEvict(pageRef, evictionRunEvent))\n+          {\n+            clearEvictorException();\n+            addFreePageToFreelist(pageRef);\n+          }\n+        } catch (IOException e)\n         {\n-            int availablePages = ((FreePage) freelistHead).count;\n-            if ( availablePages < keepFree )\n-            {\n-                return keepFree - availablePages;\n-            }\n-        }\n-        else if ( freelistHead.getClass() == AtomicInteger.class )\n+          evictorException = e;\n+        } catch (OutOfMemoryError oom)\n         {\n-            AtomicInteger counter = (AtomicInteger) freelistHead;\n-            long count = pages.getPageCount() - counter.get();\n-            if ( count < keepFree )\n-            {\n-                return count < 0 ? keepFree : (int) (keepFree - count);\n-            }\n-        }\n-        return UNKNOWN_AVAILABLE_PAGES;\n-    }\n-\n-    int evictPages( int pageCountToEvict, int clockArm, EvictionRunEvent evictionRunEvent )\n-    {\n-        while ( pageCountToEvict > 0 && !closed )\n+          evictorException = oomException;\n+        } catch (Throwable th)\n         {\n-            if ( clockArm == pages.getPageCount() )\n-            {\n-                clockArm = 0;\n-            }\n-\n-            if ( closed )\n-            {\n-                // The page cache has been shut down.\n-                return 0;\n-            }\n-\n-            long pageRef = pages.deref( clockArm );\n-            if ( pages.isLoaded( pageRef ) && pages.decrementUsage( pageRef ) )\n-            {\n-                try\n-                {\n-                    pageCountToEvict--;\n-                    if ( pages.tryEvict( pageRef, evictionRunEvent ) )\n-                    {\n-                        clearEvictorException();\n-                        addFreePageToFreelist( pageRef );\n-                    }\n-                }\n-                catch ( IOException e )\n-                {\n-                    evictorException = e;\n-                }\n-                catch ( OutOfMemoryError oom )\n-                {\n-                    evictorException = oomException;\n-                }\n-                catch ( Throwable th )\n-                {\n-                    evictorException = new IOException(\n-                            \"Eviction thread encountered a problem\", th );\n-                }\n-            }\n-\n-            clockArm++;\n+          evictorException = new IOException(\n+              \"Eviction thread encountered a problem\", th);\n         }\n+      }\n \n-        return clockArm;\n+      clockArm++;\n     }\n \n-    void addFreePageToFreelist( long pageRef )\n+    return clockArm;\n+  }\n+\n+  void addFreePageToFreelist(long pageRef)\n+  {\n+    Object current;\n+    FreePage freePage = new FreePage(pageRef);\n+    do\n     {\n-        Object current;\n-        FreePage freePage = new FreePage( pageRef );\n-        do\n-        {\n-            current = getFreelistHead();\n-            if ( current instanceof AtomicInteger && ((AtomicInteger) current).get() > pages.getPageCount() )\n-            {\n-                current = null;\n-            }\n-            freePage.setNext( current );\n-        }\n-        while ( !compareAndSetFreelistHead( current, freePage ) );\n+      current = getFreelistHead();\n+      if (current instanceof AtomicInteger && ((AtomicInteger) current).get() > pages.getPageCount())\n+      {\n+        current = null;\n+      }\n+      freePage.setNext(current);\n     }\n+    while (!compareAndSetFreelistHead(current, freePage));\n+  }\n \n-    void clearEvictorException()\n+  void clearEvictorException()\n+  {\n+    if (evictorException != null)\n     {\n-        if ( evictorException != null )\n-        {\n-            evictorException = null;\n-        }\n+      evictorException = null;\n     }\n-\n-    @Override\n-    public String toString()\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    int availablePages = tryGetNumberOfAvailablePages(keepFree);\n+    return format(\"%s[pageCacheId:%d, pageSize:%d, pages:%d, availablePages:%s]\", getClass().getSimpleName(),\n+        pageCacheId, cachePageSize, pages.getPageCount(), availablePages != UNKNOWN_AVAILABLE_PAGES ? String.valueOf(availablePages) : \"N/A\");\n+  }\n+\n+  void vacuum(SwapperSet swappers)\n+  {\n+    if (getFreelistHead() instanceof AtomicInteger && swappers.countAvailableIds() > 200)\n     {\n-        int availablePages = tryGetNumberOfAvailablePages( keepFree );\n-        return format( \"%s[pageCacheId:%d, pageSize:%d, pages:%d, availablePages:%s]\", getClass().getSimpleName(),\n-                pageCacheId, cachePageSize, pages.getPageCount(), availablePages != UNKNOWN_AVAILABLE_PAGES ? String.valueOf( availablePages ) : \"N/A\" );\n+      return; // We probably still have plenty of free pages left. Don't bother vacuuming just yet.\n     }\n-\n-    void vacuum( SwapperSet swappers )\n+    swappers.vacuum(swapperIds ->\n     {\n-        if ( getFreelistHead() instanceof AtomicInteger && swappers.countAvailableIds() > 200 )\n+      int pageCount = pages.getPageCount();\n+      try (EvictionRunEvent evictions = pageCacheTracer.beginPageEvictions(0))\n+      {\n+        for (int i = 0; i < pageCount; i++)\n         {\n-            return; // We probably still have plenty of free pages left. Don't bother vacuuming just yet.\n-        }\n-        swappers.vacuum( swapperIds ->\n-        {\n-            int pageCount = pages.getPageCount();\n-            try ( EvictionRunEvent evictions = pageCacheTracer.beginPageEvictions( 0 ) )\n-            {\n-                for ( int i = 0; i < pageCount; i++ )\n-                {\n-                    long pageRef = pages.deref( i );\n-                    while ( swapperIds.test( pages.getSwapperId( pageRef ) ) )\n-                    {\n-                        if ( pages.tryEvict( pageRef, evictions ) )\n-                        {\n-                            addFreePageToFreelist( pageRef );\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-            catch ( IOException e )\n+          long pageRef = pages.deref(i);\n+          while (swapperIds.test(pages.getSwapperId(pageRef)))\n+          {\n+            if (pages.tryEvict(pageRef, evictions))\n             {\n-                throw new UncheckedIOException( e );\n+              addFreePageToFreelist(pageRef);\n+              break;\n             }\n-        } );\n-    }\n+          }\n+        }\n+      } catch (IOException e)\n+      {\n+        throw new UncheckedIOException(e);\n+      }\n+    });\n+  }\n }\n",
            "diff_size": 1286
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "299",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "column": "26",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "313",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "377",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "805",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 979).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "908",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3676/MuninnPageCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3676/MuninnPageCache.java\nindex 86841d3ae51..eda09e23311 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3676/MuninnPageCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3676/MuninnPageCache.java\n@@ -109,32 +109,22 @@ import static org.neo4j.util.FeatureToggles.getInteger;\n  */\n public class MuninnPageCache implements PageCache\n {\n-    public static final byte ZERO_BYTE =\n-            (byte) (flag( MuninnPageCache.class, \"brandedZeroByte\", false ) ? 0x0f : 0);\n-\n+    public static final byte ZERO_BYTE = (byte) (flag( MuninnPageCache.class, \"brandedZeroByte\", false ) ? 0x0f : 0 );\n     // The amount of memory we need for every page, both its buffer and its meta-data.\n     private static final int MEMORY_USE_PER_PAGE = PAGE_SIZE + PageList.META_DATA_BYTES_PER_PAGE;\n \n     // Keep this many pages free and ready for use in faulting.\n     // This will be truncated to be no more than half of the number of pages\n     // in the cache.\n-    private static final int pagesToKeepFree = getInteger(\n-            MuninnPageCache.class, \"pagesToKeepFree\", 30 );\n-\n+    private static final int pagesToKeepFree = getInteger( MuninnPageCache.class, \"pagesToKeepFree\", 30 );\n     // This is how many times that, during cooperative eviction, we'll iterate through the entire set of pages looking\n     // for a page to evict, before we give up and throw CacheLiveLockException. This MUST be greater than 1.\n-    private static final int cooperativeEvictionLiveLockThreshold = getInteger(\n-            MuninnPageCache.class, \"cooperativeEvictionLiveLockThreshold\", 100 );\n-\n+    private static final int cooperativeEvictionLiveLockThreshold = getInteger( MuninnPageCache.class, \"cooperativeEvictionLiveLockThreshold\", 100 );\n     // This is a pre-allocated constant, so we can throw it without allocating any objects:\n     @SuppressWarnings( \"ThrowableInstanceNeverThrown\" )\n-    private static final IOException oomException = new IOException(\n-            \"OutOfMemoryError encountered in the page cache background eviction thread\" );\n-\n+    private static final IOException oomException = new IOException( \"OutOfMemoryError encountered in the page cache background eviction thread\" );\n     // The field offset to unsafely access the freelist field.\n-    private static final long freelistOffset =\n-            UnsafeUtil.getFieldOffset( MuninnPageCache.class, \"freelist\" );\n-\n+    private static final long freelistOffset = UnsafeUtil.getFieldOffset( MuninnPageCache.class, \"freelist\" );\n     // This is used as a poison-pill signal in the freelist, to inform any\n     // page faulting thread that it is now no longer possible to queue up and\n     // wait for more pages to be evicted, because the page cache has been shut\n@@ -154,11 +144,9 @@ public class MuninnPageCache implements PageCache\n \n     private static final List<OpenOption> ignoredOpenOptions = Arrays.asList( (OpenOption) StandardOpenOption.APPEND,\n             StandardOpenOption.READ, StandardOpenOption.WRITE, StandardOpenOption.SPARSE );\n-\n     // Used when trying to figure out number of available pages in a page cache. Could be returned from tryGetNumberOfAvailablePages.\n     private static final int UNKNOWN_AVAILABLE_PAGES = -1;\n-\n-    private final int pageCacheId;\n+private final int pageCacheId;\n     private final PageSwapperFactory swapperFactory;\n     private final int cachePageSize;\n     private final int keepFree;\n@@ -202,7 +190,8 @@ public class MuninnPageCache implements PageCache\n \n     // 'true' (the default) if we should print any exceptions we get when unmapping a file.\n     private boolean printExceptionsOnClose;\n-    /**\n+\n+/**\n      * Compute the amount of memory needed for a page cache with the given number of 8 KiB pages.\n      * @param pageCount The number of pages\n      * @return The memory required for the buffers and meta-data of the given number of pages\n@@ -222,20 +211,14 @@ public class MuninnPageCache implements PageCache\n      * @param versionContextSupplier supplier of thread local (transaction local) version context that will provide\n      * access to thread local version context\n      */\n-    public MuninnPageCache(\n-            PageSwapperFactory swapperFactory,\n-            int maxPages,\n+    public MuninnPageCache( PageSwapperFactory swapperFactory, int maxPages,\n             PageCacheTracer pageCacheTracer,\n             PageCursorTracerSupplier pageCursorTracerSupplier,\n             VersionContextSupplier versionContextSupplier )\n     {\n         this( swapperFactory,\n                 // Cast to long prevents overflow:\n-                MemoryAllocator.createAllocator( \"\" + memoryRequiredForPages( maxPages ), GlobalMemoryTracker.INSTANCE ),\n-                PAGE_SIZE,\n-                pageCacheTracer,\n-                pageCursorTracerSupplier,\n-                versionContextSupplier );\n+                MemoryAllocator.createAllocator( \"\" + memoryRequiredForPages( maxPages ), GlobalMemoryTracker.INSTANCE ), PAGE_SIZE, pageCacheTracer, pageCursorTracerSupplier, versionContextSupplier );\n     }\n \n     /**\n@@ -248,8 +231,7 @@ public class MuninnPageCache implements PageCache\n      * @param versionContextSupplier supplier of thread local (transaction local) version context that will provide\n      *        access to thread local version context\n      */\n-    public MuninnPageCache(\n-            PageSwapperFactory swapperFactory,\n+    public MuninnPageCache( PageSwapperFactory swapperFactory,\n             MemoryAllocator memoryAllocator,\n             PageCacheTracer pageCacheTracer,\n             PageCursorTracerSupplier pageCursorTracerSupplier,\n@@ -264,10 +246,8 @@ public class MuninnPageCache implements PageCache\n      */\n     @SuppressWarnings( \"DeprecatedIsStillUsed\" )\n     @Deprecated\n-    public MuninnPageCache(\n-            PageSwapperFactory swapperFactory,\n-            MemoryAllocator memoryAllocator,\n-            int cachePageSize,\n+    public MuninnPageCache( PageSwapperFactory swapperFactory,\n+            MemoryAllocator memoryAllocator, int cachePageSize,\n             PageCacheTracer pageCacheTracer,\n             PageCursorTracerSupplier pageCursorTracerSupplier,\n             VersionContextSupplier versionContextSupplier )\n@@ -279,8 +259,7 @@ public class MuninnPageCache implements PageCache\n         // Expose the total number of pages\n         pageCacheTracer.maxPages( maxPages );\n         MemoryAllocationTracker memoryTracker = GlobalMemoryTracker.INSTANCE;\n-\n-        this.pageCacheId = pageCacheIdCounter.incrementAndGet();\n+this.pageCacheId = pageCacheIdCounter.incrementAndGet();\n         this.swapperFactory = swapperFactory;\n         this.cachePageSize = cachePageSize;\n         this.keepFree = Math.min( pagesToKeepFree, maxPages / 2 );\n@@ -306,9 +285,8 @@ public class MuninnPageCache implements PageCache\n         int exponent = 31 - Integer.numberOfLeadingZeros( cachePageSize );\n         if ( 1 << exponent != cachePageSize )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cache page size must be a power of two, but was \" + cachePageSize );\n-        }\n+            throw new IllegalArgumentException( \"Cache page size must be a power of two, but was \" + cachePageSize );\n+    }\n     }\n \n     private static int calculatePageCount( MemoryAllocator memoryAllocator, int cachePageSize )\n@@ -318,11 +296,10 @@ public class MuninnPageCache implements PageCache\n         int minimumPageCount = 2;\n         if ( maxPages < minimumPageCount )\n         {\n-            throw new IllegalArgumentException( format(\n-                    \"Page cache must have at least %s pages (%s bytes of memory), but was given %s pages.\",\n-                    minimumPageCount, minimumPageCount * memoryPerPage, maxPages ) );\n+            throw new IllegalArgumentException( format( \"Page cache must have at least %s pages (%s bytes of memory), but was given %s pages.\", minimumPageCount, minimumPageCount * memoryPerPage, maxPages ) );\n         }\n-        maxPages = Math.min( maxPages, PageList.MAX_PAGES );\n+\n+maxPages = Math.min( maxPages, PageList.MAX_PAGES );\n         return Math.toIntExact( maxPages );\n     }\n \n@@ -331,13 +308,12 @@ public class MuninnPageCache implements PageCache\n     {\n         assertHealthy();\n         ensureThreadsInitialised();\n-        if ( filePageSize > cachePageSize )\n+        if ( filePageSize> cachePageSize )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot map files with a filePageSize (\" + filePageSize + \") that is greater than the \" +\n-                    \"cachePageSize (\" + cachePageSize + \")\" );\n+            throw new IllegalArgumentException( \"Cannot map files with a filePageSize (\" + filePageSize + \") that is greater than the \" + \"cachePageSize (\" + cachePageSize + \")\" );\n         }\n-        file = file.getCanonicalFile();\n+\n+file = file.getCanonicalFile();\n         boolean createIfNotExists = false;\n         boolean truncateExisting = false;\n         boolean deleteOnClose = false;\n@@ -376,14 +352,11 @@ public class MuninnPageCache implements PageCache\n                 MuninnPagedFile pagedFile = current.pagedFile;\n                 if ( pagedFile.pageSize() != filePageSize && !anyPageSize )\n                 {\n-                    String msg = \"Cannot map file \" + file + \" with \" +\n-                            \"filePageSize \" + filePageSize + \" bytes, \" +\n-                            \"because it has already been mapped with a \" +\n-                            \"filePageSize of \" + pagedFile.pageSize() +\n-                            \" bytes.\";\n-                    throw new IllegalArgumentException( msg );\n+                    String msg = \"Cannot map file \" + file + \" with \" + \"filePageSize \" + filePageSize + \" bytes, \" + \"because it has already been mapped with a \" + \"filePageSize of \" + pagedFile.pageSize() + \" bytes.\";\n+    throw new IllegalArgumentException( msg );\n                 }\n-                if ( truncateExisting )\n+\n+if ( truncateExisting )\n                 {\n                     throw new UnsupportedOperationException( \"Cannot truncate a file that is already mapped\" );\n                 }\n@@ -391,28 +364,18 @@ public class MuninnPageCache implements PageCache\n                 pagedFile.markDeleteOnClose( deleteOnClose );\n                 return pagedFile;\n             }\n-            current = current.next;\n+\n+current = current.next;\n         }\n \n         if ( filePageSize < Long.BYTES )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot map files with a filePageSize (\" + filePageSize + \") that is less than \" +\n-                    Long.BYTES + \" bytes\" );\n+            throw new IllegalArgumentException( \"Cannot map files with a filePageSize (\" + filePageSize + \") that is less than \" + Long.BYTES + \" bytes\" );\n         }\n \n         // there was no existing mapping\n-        MuninnPagedFile pagedFile = new MuninnPagedFile(\n-                file,\n-                this,\n-                filePageSize,\n-                swapperFactory,\n-                pageCacheTracer,\n-                pageCursorTracerSupplier,\n-                versionContextSupplier,\n-                createIfNotExists,\n-                truncateExisting );\n-        pagedFile.incrementRefCount();\n+        MuninnPagedFile pagedFile = new MuninnPagedFile( file, this, filePageSize, swapperFactory, pageCacheTracer, pageCursorTracerSupplier, versionContextSupplier, createIfNotExists, truncateExisting );\n+pagedFile.incrementRefCount();\n         pagedFile.markDeleteOnClose( deleteOnClose );\n         current = new FileMapping( file, pagedFile );\n         current.next = mappedFiles;\n@@ -434,7 +397,8 @@ public class MuninnPageCache implements PageCache\n             pagedFile.incrementRefCount();\n             return Optional.of( pagedFile );\n         }\n-        return Optional.empty();\n+\n+return Optional.empty();\n     }\n \n     private MuninnPagedFile tryGetMappingOrNull( File file )\n@@ -448,7 +412,8 @@ public class MuninnPageCache implements PageCache\n             {\n                 return current.pagedFile;\n             }\n-            current = current.next;\n+\n+current = current.next;\n         }\n \n         // no mapping exists\n@@ -472,7 +437,8 @@ public class MuninnPageCache implements PageCache\n             list.add( pagedFile );\n             current = current.next;\n         }\n-        return list;\n+\n+return list;\n     }\n \n     /**\n@@ -484,7 +450,8 @@ public class MuninnPageCache implements PageCache\n         {\n             return;\n         }\n-        threadsInitialised = true;\n+\n+threadsInitialised = true;\n \n         try\n         {\n@@ -530,7 +497,8 @@ public class MuninnPageCache implements PageCache\n                     flushAndCloseWithoutFail( file );\n                     break;\n                 }\n-                prev = current;\n+\n+prev = current;\n                 current = current.next;\n             }\n         }\n@@ -584,7 +552,8 @@ public class MuninnPageCache implements PageCache\n         {\n             throw new IllegalArgumentException( \"IOLimiter cannot be null\" );\n         }\n-        assertNotClosed();\n+\n+assertNotClosed();\n         List<PagedFile> files = listExistingMappings();\n         flushAllPages( files, limiter );\n         clearEvictorException();\n@@ -616,7 +585,8 @@ public class MuninnPageCache implements PageCache\n                     // really matter how that happened. We'll ignore this exception.\n                 }\n             }\n-            syncDevice();\n+\n+syncDevice();\n         }\n     }\n \n@@ -636,9 +606,8 @@ public class MuninnPageCache implements PageCache\n         FileMapping files = mappedFiles;\n         if ( files != null )\n         {\n-            StringBuilder msg = new StringBuilder(\n-                    \"Cannot close the PageCache while files are still mapped:\" );\n-            while ( files != null )\n+            StringBuilder msg = new StringBuilder( \"Cannot close the PageCache while files are still mapped:\" );\n+    while ( files != null )\n             {\n                 int refCount = files.pagedFile.getRefCount();\n                 msg.append( \"\\n\\t\" );\n@@ -773,7 +742,8 @@ public class MuninnPageCache implements PageCache\n                 {\n                     return pages.deref( pageId );\n                 }\n-                if ( pageId >= pageCount )\n+\n+if ( pageId >= pageCount )\n                 {\n                     compareAndSetFreelistHead( current, null );\n                 }\n@@ -832,17 +802,7 @@ public class MuninnPageCache implements PageCache\n \n     private CacheLiveLockException cooperativeEvictionLiveLock()\n     {\n-        return new CacheLiveLockException(\n-                \"Live-lock encountered when trying to cooperatively evict a page during page fault. \" +\n-                \"This happens when we want to access a page that is not in memory, so it has to be faulted in, but \" +\n-                \"there are no free memory pages available to accept the page fault, so we have to evict an existing \" +\n-                \"page, but all the in-memory pages are currently locked by other accesses. If those other access are \" +\n-                \"waiting for our page fault to make progress, then we have a live-lock, and the only way we can get \" +\n-                \"out of it is by throwing this exception. This should be extremely rare, but can happen if the page \" +\n-                \"cache size is tiny and the number of concurrently running transactions is very high. You should be \" +\n-                \"able to get around this problem by increasing the amount of memory allocated to the page cache \" +\n-                \"with the `dbms.memory.pagecache.size` setting. Please contact Neo4j support if you need help tuning \" +\n-                \"your database.\" );\n+        return new CacheLiveLockException( \"Live-lock encountered when trying to cooperatively evict a page during page fault. \" + \"This happens when we want to access a page that is not in memory, so it has to be faulted in, but \" + \"there are no free memory pages available to accept the page fault, so we have to evict an existing \" + \"page, but all the in-memory pages are currently locked by other accesses. If those other access are \" + \"waiting for our page fault to make progress, then we have a live-lock, and the only way we can get \" + \"out of it is by throwing this exception. This should be extremely rare, but can happen if the page \" + \"cache size is tiny and the number of concurrently running transactions is very high. You should be \" + \"able to get around this problem by increasing the amount of memory allocated to the page cache \" + \"with the `dbms.memory.pagecache.size` setting. Please contact Neo4j support if you need help tuning \" + \"your database.\" );\n     }\n \n     private void unparkEvictor()\n@@ -869,8 +829,7 @@ public class MuninnPageCache implements PageCache\n \n     private boolean compareAndSetFreelistHead( Object expected, Object update )\n     {\n-        return UnsafeUtil.compareAndSwapObject(\n-                this, freelistOffset, expected, update );\n+        return UnsafeUtil.compareAndSwapObject( this, freelistOffset, expected, update );\n     }\n \n     private void setFreelistHead( Object newFreelistHead )\n@@ -928,8 +887,7 @@ public class MuninnPageCache implements PageCache\n     private int tryGetNumberOfAvailablePages( int keepFree )\n     {\n         Object freelistHead = getFreelistHead();\n-\n-        if ( freelistHead == null )\n+if ( freelistHead == null )\n         {\n             return keepFree;\n         }\n@@ -947,7 +905,7 @@ public class MuninnPageCache implements PageCache\n             long count = pages.getPageCount() - counter.get();\n             if ( count < keepFree )\n             {\n-                return count < 0 ? keepFree : (int) (keepFree - count);\n+                return count < 0 ? keepFree : ( int) ( keepFree - count);\n             }\n         }\n         return UNKNOWN_AVAILABLE_PAGES;\n@@ -990,9 +948,8 @@ public class MuninnPageCache implements PageCache\n                 }\n                 catch ( Throwable th )\n                 {\n-                    evictorException = new IOException(\n-                            \"Eviction thread encountered a problem\", th );\n-                }\n+                    evictorException = new IOException( \"Eviction thread encountered a problem\", th );\n+    }\n             }\n \n             clockArm++;\n@@ -1063,4 +1020,4 @@ public class MuninnPageCache implements PageCache\n             }\n         } );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}