{
    "project_name": "HuygensING-timbuctoo",
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "163",
                "column": "80",
                "severity": "error",
                "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "              InlineFragment fragment = (InlineFragment) selection;\n              String typeUri = typeNameStore.makeUri(\n                fragment.getTypeCondition().getName().substring(prefix.length()+ 1)\n              );\n              if (typeUris.contains(typeUri)) {\n                typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(typeUri);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler/65/RdfWiringFactory.java\nindex 7e3c1eec5ff..c3726300268 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler/65/RdfWiringFactory.java\n@@ -160,7 +160,7 @@ public class RdfWiringFactory implements WiringFactory {\n             if (selection instanceof InlineFragment) {\n               InlineFragment fragment = (InlineFragment) selection;\n               String typeUri = typeNameStore.makeUri(\n-                fragment.getTypeCondition().getName().substring(prefix.length()+ 1)\n+                fragment.getTypeCondition().getName().substring(prefix.length() + 1)\n               );\n               if (typeUris.contains(typeUri)) {\n                 typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(typeUri);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/intellij/65/RdfWiringFactory.java\nindex 7e3c1eec5ff..f22ebf40ef9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/intellij/65/RdfWiringFactory.java\n@@ -141,8 +141,8 @@ public class RdfWiringFactory implements WiringFactory {\n         final String prefix = typedValue.getDataSet().getMetadata().getCombinedId();\n         typeName =\n           prefix +\n-          \"_\" +\n-          typedValue.getDataSet().getTypeNameStore().makeGraphQlValuename(typeUri);\n+            \"_\" +\n+            typedValue.getDataSet().getTypeNameStore().makeGraphQlValuename(typeUri);\n       } else {\n         //Often a thing has one type. In that case this lambda is easy to implement. Simply return that type\n         //In rdf things can have more then one type though (types are like java interfaces)\n@@ -160,7 +160,7 @@ public class RdfWiringFactory implements WiringFactory {\n             if (selection instanceof InlineFragment) {\n               InlineFragment fragment = (InlineFragment) selection;\n               String typeUri = typeNameStore.makeUri(\n-                fragment.getTypeCondition().getName().substring(prefix.length()+ 1)\n+                fragment.getTypeCondition().getName().substring(prefix.length() + 1)\n               );\n               if (typeUris.contains(typeUri)) {\n                 typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(typeUri);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/65/RdfWiringFactory.java\nindex 7e3c1eec5ff..1a34ebb23d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/65/RdfWiringFactory.java\n@@ -139,8 +139,7 @@ public class RdfWiringFactory implements WiringFactory {\n         final TypedValue typedValue = (TypedValue) environment.getObject();\n         final String typeUri = typedValue.getType();\n         final String prefix = typedValue.getDataSet().getMetadata().getCombinedId();\n-        typeName =\n-          prefix +\n+        typeName = prefix +\n           \"_\" +\n           typedValue.getDataSet().getTypeNameStore().makeGraphQlValuename(typeUri);\n       } else {\n@@ -160,7 +159,7 @@ public class RdfWiringFactory implements WiringFactory {\n             if (selection instanceof InlineFragment) {\n               InlineFragment fragment = (InlineFragment) selection;\n               String typeUri = typeNameStore.makeUri(\n-                fragment.getTypeCondition().getName().substring(prefix.length()+ 1)\n+                fragment.getTypeCondition().getName().substring(prefix.length() + 1)\n               );\n               if (typeUris.contains(typeUri)) {\n                 typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(typeUri);\n@@ -180,4 +179,4 @@ public class RdfWiringFactory implements WiringFactory {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 351).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 20, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "'method def modifier' has incorrect indentation level 56, expected level should be one of the following: 22, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 58, expected level should be one of the following: 24, 26.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "'method def rcurly' has incorrect indentation level 56, expected level should be one of the following: 22, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "'object def rcurly' has incorrect indentation level 54, expected level should be one of the following: 20, 22.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 18, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/65/RdfWiringFactory.java\nindex 7e3c1eec5ff..b1f6f33226a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/65/RdfWiringFactory.java\n@@ -29,7 +29,6 @@ import nl.knaw.huygens.timbuctoo.v5.graphql.datafetchers.dto.TypedValue;\n import nl.knaw.huygens.timbuctoo.v5.util.RdfConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.Set;\n \n import static nl.knaw.huygens.timbuctoo.v5.datastores.quadstore.dto.Direction.valueOf;\n@@ -69,11 +68,7 @@ public class RdfWiringFactory implements WiringFactory {\n \n   @Override\n   public boolean providesDataFetcher(FieldWiringEnvironment environment) {\n-    return environment.getFieldDefinition().getDirective(\"fromCollection\") != null ||\n-      environment.getFieldDefinition().getDirective(\"rdf\") != null ||\n-      environment.getFieldDefinition().getDirective(\"uri\") != null ||\n-      environment.getFieldDefinition().getDirective(\"passThrough\") != null ||\n-      environment.getFieldDefinition().getDirective(\"dataSet\") != null;\n+    return environment.getFieldDefinition().getDirective(\"fromCollection\") != null || environment.getFieldDefinition().getDirective(\"rdf\") != null || environment.getFieldDefinition().getDirective(\"uri\") != null || environment.getFieldDefinition().getDirective(\"passThrough\") != null || environment.getFieldDefinition().getDirective(\"dataSet\") != null;\n   }\n \n   @Override\n@@ -105,20 +100,20 @@ public class RdfWiringFactory implements WiringFactory {\n           return new DataFetcherWrapper(isList, new TypedLiteralDataFetcher(uri));\n         }\n       }\n-    } else if (environment.getFieldDefinition().getDirective(\"uri\") != null) {\n-      return uriFetcher;\n-    } else if (environment.getFieldDefinition().getDirective(\"dataSet\") != null) {\n-      final Directive directive = environment.getFieldDefinition().getDirective(\"dataSet\");\n-      String userId = ((StringValue) directive.getArgument(\"userId\").getValue()).getValue();\n-      String dataSetId = ((StringValue) directive.getArgument(\"dataSetId\").getValue()).getValue();\n-      final DataSet dataSet = dataSetRepository.getDataSet(userId, dataSetId).orElse(null);\n-      return dataFetchingEnvironment -> new DatabaseResult() {\n-        @Override\n-        public DataSet getDataSet() {\n-          return dataSet;\n-        }\n-      };\n-    }\n+           } else if (environment.getFieldDefinition().getDirective(\"uri\") != null) {\n+             return uriFetcher;\n+           } else if (environment.getFieldDefinition().getDirective(\"dataSet\") != null) {\n+                    final Directive directive = environment.getFieldDefinition().getDirective(\"dataSet\");\n+                    String userId = ((StringValue) directive.getArgument(\"userId\").getValue()).getValue();\n+                    String dataSetId = ((StringValue) directive.getArgument(\"dataSetId\").getValue()).getValue();\n+                    final DataSet dataSet = dataSetRepository.getDataSet(userId, dataSetId).orElse(null);\n+                    return dataFetchingEnvironment -> new DatabaseResult() {\n+                                                        @Override\n+                                                        public DataSet getDataSet() {\n+                                                          return dataSet;\n+                                                        }\n+                                                      };\n+                  }\n     return null;\n   }\n \n@@ -128,21 +123,17 @@ public class RdfWiringFactory implements WiringFactory {\n   }\n \n   private static class ObjectTypeResolver implements TypeResolver {\n-\n     private static final Logger LOG = LoggerFactory.getLogger(ObjectTypeResolver.class);\n-\n     @Override\n     public GraphQLObjectType getType(TypeResolutionEnvironment environment) {\n-\n       String typeName = null;\n       if (environment.getObject() instanceof TypedValue) {\n         final TypedValue typedValue = (TypedValue) environment.getObject();\n         final String typeUri = typedValue.getType();\n-        final String prefix = typedValue.getDataSet().getMetadata().getCombinedId();\n-        typeName =\n-          prefix +\n-          \"_\" +\n-          typedValue.getDataSet().getTypeNameStore().makeGraphQlValuename(typeUri);\n+        final String prefix = typedValue.getDataSet().getMetadata()\n+                                                     .getCombinedId();\n+        typeName = prefix + \"_\" + typedValue.getDataSet().getTypeNameStore()\n+                                                         .makeGraphQlValuename(typeUri);\n       } else {\n         //Often a thing has one type. In that case this lambda is easy to implement. Simply return that type\n         //In rdf things can have more then one type though (types are like java interfaces)\n@@ -150,18 +141,19 @@ public class RdfWiringFactory implements WiringFactory {\n         // that\n         //the user actually requested\n         final SubjectReference subjectReference = (SubjectReference) environment.getObject();\n-        final String prefix = subjectReference.getDataSet().getMetadata().getCombinedId();\n+        final String prefix = subjectReference.getDataSet().getMetadata()\n+                                                           .getCombinedId();\n         Set<String> typeUris = subjectReference.getTypes();\n         final TypeNameStore typeNameStore = subjectReference.getDataSet().getTypeNameStore();\n         if (typeUris.isEmpty()) {\n           typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(RdfConstants.UNKNOWN);\n         } else {\n-          for (Selection selection : environment.getField().getSelectionSet().getSelections()) {\n+          for (Selection selection : environment.getField().getSelectionSet()\n+                                                           .getSelections()) {\n             if (selection instanceof InlineFragment) {\n               InlineFragment fragment = (InlineFragment) selection;\n-              String typeUri = typeNameStore.makeUri(\n-                fragment.getTypeCondition().getName().substring(prefix.length()+ 1)\n-              );\n+              String typeUri = typeNameStore.makeUri(fragment.getTypeCondition().getName()\n+                                                                                .substring(prefix.length() + 1));\n               if (typeUris.contains(typeUri)) {\n                 typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(typeUri);\n                 break;\n@@ -180,4 +172,4 @@ public class RdfWiringFactory implements WiringFactory {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_random/65/RdfWiringFactory.java\nindex 7e3c1eec5ff..c3726300268 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_random/65/RdfWiringFactory.java\n@@ -160,7 +160,7 @@ public class RdfWiringFactory implements WiringFactory {\n             if (selection instanceof InlineFragment) {\n               InlineFragment fragment = (InlineFragment) selection;\n               String typeUri = typeNameStore.makeUri(\n-                fragment.getTypeCondition().getName().substring(prefix.length()+ 1)\n+                fragment.getTypeCondition().getName().substring(prefix.length() + 1)\n               );\n               if (typeUris.contains(typeUri)) {\n                 typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(typeUri);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/65/RdfWiringFactory.java\nindex 7e3c1eec5ff..c3726300268 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/65/RdfWiringFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/styler_three_grams/65/RdfWiringFactory.java\n@@ -160,7 +160,7 @@ public class RdfWiringFactory implements WiringFactory {\n             if (selection instanceof InlineFragment) {\n               InlineFragment fragment = (InlineFragment) selection;\n               String typeUri = typeNameStore.makeUri(\n-                fragment.getTypeCondition().getName().substring(prefix.length()+ 1)\n+                fragment.getTypeCondition().getName().substring(prefix.length() + 1)\n               );\n               if (typeUris.contains(typeUri)) {\n                 typeName = prefix + \"_\" + typeNameStore.makeGraphQlname(typeUri);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}