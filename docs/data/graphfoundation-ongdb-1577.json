{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1577",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1577/ConsistencyCheckTasks.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1577/ConsistencyCheckTasks.java\nindex aad629ce810..1e10055e10c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1577/ConsistencyCheckTasks.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1577/ConsistencyCheckTasks.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.ArrayList;\n@@ -62,211 +63,212 @@ import static org.neo4j.consistency.checking.full.QueueDistribution.ROUND_ROBIN;\n \n public class ConsistencyCheckTasks\n {\n-    private final ProgressMonitorFactory.MultiPartBuilder multiPartBuilder;\n-    private final StoreProcessor defaultProcessor;\n-    private final StoreAccess nativeStores;\n-    private final Statistics statistics;\n-    private final MultiPassStore.Factory multiPass;\n-    private final ConsistencyReporter reporter;\n-    private final LabelScanStore labelScanStore;\n-    private final IndexAccessors indexes;\n-    private final CacheAccess cacheAccess;\n-    private final int numberOfThreads;\n+  private final ProgressMonitorFactory.MultiPartBuilder multiPartBuilder;\n+  private final StoreProcessor defaultProcessor;\n+  private final StoreAccess nativeStores;\n+  private final Statistics statistics;\n+  private final MultiPassStore.Factory multiPass;\n+  private final ConsistencyReporter reporter;\n+  private final LabelScanStore labelScanStore;\n+  private final IndexAccessors indexes;\n+  private final CacheAccess cacheAccess;\n+  private final int numberOfThreads;\n \n-    ConsistencyCheckTasks( ProgressMonitorFactory.MultiPartBuilder multiPartBuilder,\n-            StoreProcessor defaultProcessor, StoreAccess nativeStores, Statistics statistics,\n-            CacheAccess cacheAccess, LabelScanStore labelScanStore,\n-            IndexAccessors indexes, MultiPassStore.Factory multiPass, ConsistencyReporter reporter, int numberOfThreads )\n-    {\n-        this.multiPartBuilder = multiPartBuilder;\n-        this.defaultProcessor = defaultProcessor;\n-        this.nativeStores = nativeStores;\n-        this.statistics = statistics;\n-        this.cacheAccess = cacheAccess;\n-        this.multiPass = multiPass;\n-        this.reporter = reporter;\n-        this.labelScanStore = labelScanStore;\n-        this.indexes = indexes;\n-        this.numberOfThreads = numberOfThreads;\n-    }\n+  ConsistencyCheckTasks(ProgressMonitorFactory.MultiPartBuilder multiPartBuilder,\n+                        StoreProcessor defaultProcessor, StoreAccess nativeStores, Statistics statistics,\n+                        CacheAccess cacheAccess, LabelScanStore labelScanStore,\n+                        IndexAccessors indexes, MultiPassStore.Factory multiPass, ConsistencyReporter reporter, int numberOfThreads)\n+  {\n+    this.multiPartBuilder = multiPartBuilder;\n+    this.defaultProcessor = defaultProcessor;\n+    this.nativeStores = nativeStores;\n+    this.statistics = statistics;\n+    this.cacheAccess = cacheAccess;\n+    this.multiPass = multiPass;\n+    this.reporter = reporter;\n+    this.labelScanStore = labelScanStore;\n+    this.indexes = indexes;\n+    this.numberOfThreads = numberOfThreads;\n+  }\n \n-    public List<ConsistencyCheckerTask> createTasksForFullCheck( boolean checkLabelScanStore, boolean checkIndexes,\n-            boolean checkGraph )\n+  public List<ConsistencyCheckerTask> createTasksForFullCheck(boolean checkLabelScanStore, boolean checkIndexes,\n+                                                              boolean checkGraph)\n+  {\n+    List<ConsistencyCheckerTask> tasks = new ArrayList<>();\n+    if (checkGraph)\n     {\n-        List<ConsistencyCheckerTask> tasks = new ArrayList<>();\n-        if ( checkGraph )\n-        {\n-            MandatoryProperties mandatoryProperties = new MandatoryProperties( nativeStores );\n-            StoreProcessor processor =\n-                    multiPass.processor( CheckStage.Stage1_NS_PropsLabels, PROPERTIES );\n-            tasks.add( create( CheckStage.Stage1_NS_PropsLabels.name(), nativeStores.getNodeStore(),\n-                    processor, ROUND_ROBIN ) );\n-            //ReltionshipStore pass - check label counts using cached labels, check properties, skip nodes and relationships\n-            processor = multiPass.processor( CheckStage.Stage2_RS_Labels, LABELS );\n-            multiPass.reDecorateRelationship( processor, RelationshipRecordCheck.relationshipRecordCheckForwardPass() );\n-            tasks.add( create( CheckStage.Stage2_RS_Labels.name(), nativeStores.getRelationshipStore(),\n-                    processor, ROUND_ROBIN ) );\n-            //NodeStore pass - just cache nextRel and inUse\n-            tasks.add( new CacheTask.CacheNextRel( CheckStage.Stage3_NS_NextRel, cacheAccess,\n-                    Scanner.scan( nativeStores.getNodeStore() ) ) );\n-            //RelationshipStore pass - check nodes inUse, FirstInFirst, FirstInSecond using cached info\n-            processor = multiPass.processor( CheckStage.Stage4_RS_NextRel, NODES );\n-            multiPass.reDecorateRelationship( processor, RelationshipRecordCheck.relationshipRecordCheckBackwardPass(\n-                    new PropertyChain<>( mandatoryProperties.forRelationships( reporter ) ) ) );\n-            tasks.add( create( CheckStage.Stage4_RS_NextRel.name(), nativeStores.getRelationshipStore(),\n-                    processor, ROUND_ROBIN ) );\n-            //NodeStore pass - just cache nextRel and inUse\n-            multiPass.reDecorateNode( processor, NodeRecordCheck.toCheckNextRel(), true );\n-            multiPass.reDecorateNode( processor, NodeRecordCheck.toCheckNextRelationshipGroup(), false );\n-            tasks.add( new CacheTask.CheckNextRel( CheckStage.Stage5_Check_NextRel, cacheAccess, nativeStores, processor ) );\n-            // source chain\n-            //RelationshipStore pass - forward scan of source chain using the cache.\n-            processor = multiPass.processor( CheckStage.Stage6_RS_Forward, RELATIONSHIPS );\n-            multiPass.reDecorateRelationship( processor,\n-                    RelationshipRecordCheck.relationshipRecordCheckSourceChain() );\n-            tasks.add( create( CheckStage.Stage6_RS_Forward.name(), nativeStores.getRelationshipStore(),\n-                    processor, QueueDistribution.RELATIONSHIPS ) );\n-            //RelationshipStore pass - reverse scan of source chain using the cache.\n-            processor = multiPass.processor( CheckStage.Stage7_RS_Backward, RELATIONSHIPS );\n-            multiPass.reDecorateRelationship( processor,\n-                    RelationshipRecordCheck.relationshipRecordCheckSourceChain() );\n-            tasks.add( create( CheckStage.Stage7_RS_Backward.name(), nativeStores.getRelationshipStore(),\n-                    processor, QueueDistribution.RELATIONSHIPS ) );\n+      MandatoryProperties mandatoryProperties = new MandatoryProperties(nativeStores);\n+      StoreProcessor processor =\n+          multiPass.processor(CheckStage.Stage1_NS_PropsLabels, PROPERTIES);\n+      tasks.add(create(CheckStage.Stage1_NS_PropsLabels.name(), nativeStores.getNodeStore(),\n+          processor, ROUND_ROBIN));\n+      //ReltionshipStore pass - check label counts using cached labels, check properties, skip nodes and relationships\n+      processor = multiPass.processor(CheckStage.Stage2_RS_Labels, LABELS);\n+      multiPass.reDecorateRelationship(processor, RelationshipRecordCheck.relationshipRecordCheckForwardPass());\n+      tasks.add(create(CheckStage.Stage2_RS_Labels.name(), nativeStores.getRelationshipStore(),\n+          processor, ROUND_ROBIN));\n+      //NodeStore pass - just cache nextRel and inUse\n+      tasks.add(new CacheTask.CacheNextRel(CheckStage.Stage3_NS_NextRel, cacheAccess,\n+          Scanner.scan(nativeStores.getNodeStore())));\n+      //RelationshipStore pass - check nodes inUse, FirstInFirst, FirstInSecond using cached info\n+      processor = multiPass.processor(CheckStage.Stage4_RS_NextRel, NODES);\n+      multiPass.reDecorateRelationship(processor, RelationshipRecordCheck.relationshipRecordCheckBackwardPass(\n+          new PropertyChain<>(mandatoryProperties.forRelationships(reporter))));\n+      tasks.add(create(CheckStage.Stage4_RS_NextRel.name(), nativeStores.getRelationshipStore(),\n+          processor, ROUND_ROBIN));\n+      //NodeStore pass - just cache nextRel and inUse\n+      multiPass.reDecorateNode(processor, NodeRecordCheck.toCheckNextRel(), true);\n+      multiPass.reDecorateNode(processor, NodeRecordCheck.toCheckNextRelationshipGroup(), false);\n+      tasks.add(new CacheTask.CheckNextRel(CheckStage.Stage5_Check_NextRel, cacheAccess, nativeStores, processor));\n+      // source chain\n+      //RelationshipStore pass - forward scan of source chain using the cache.\n+      processor = multiPass.processor(CheckStage.Stage6_RS_Forward, RELATIONSHIPS);\n+      multiPass.reDecorateRelationship(processor,\n+          RelationshipRecordCheck.relationshipRecordCheckSourceChain());\n+      tasks.add(create(CheckStage.Stage6_RS_Forward.name(), nativeStores.getRelationshipStore(),\n+          processor, QueueDistribution.RELATIONSHIPS));\n+      //RelationshipStore pass - reverse scan of source chain using the cache.\n+      processor = multiPass.processor(CheckStage.Stage7_RS_Backward, RELATIONSHIPS);\n+      multiPass.reDecorateRelationship(processor,\n+          RelationshipRecordCheck.relationshipRecordCheckSourceChain());\n+      tasks.add(create(CheckStage.Stage7_RS_Backward.name(), nativeStores.getRelationshipStore(),\n+          processor, QueueDistribution.RELATIONSHIPS));\n \n-            //relationshipGroup\n-            StoreProcessor relGrpProcessor = multiPass.processor( Stage.PARALLEL_FORWARD, RELATIONSHIP_GROUPS );\n-            tasks.add( create( \"RelationshipGroupStore-RelGrp\", nativeStores.getRelationshipGroupStore(),\n-                    relGrpProcessor, ROUND_ROBIN ) );\n+      //relationshipGroup\n+      StoreProcessor relGrpProcessor = multiPass.processor(Stage.PARALLEL_FORWARD, RELATIONSHIP_GROUPS);\n+      tasks.add(create(\"RelationshipGroupStore-RelGrp\", nativeStores.getRelationshipGroupStore(),\n+          relGrpProcessor, ROUND_ROBIN));\n \n-            PropertyReader propertyReader = new PropertyReader( nativeStores );\n-            tasks.add( recordScanner( CheckStage.Stage8_PS_Props.name(),\n-                    new IterableStore<>( nativeStores.getNodeStore(), true ),\n-                    new PropertyAndNode2LabelIndexProcessor( reporter, checkIndexes ? indexes : null,\n-                            propertyReader, cacheAccess, mandatoryProperties.forNodes( reporter ) ),\n-                    CheckStage.Stage8_PS_Props, ROUND_ROBIN,\n-                    new IterableStore<>( nativeStores.getPropertyStore(), true ) ) );\n+      PropertyReader propertyReader = new PropertyReader(nativeStores);\n+      tasks.add(recordScanner(CheckStage.Stage8_PS_Props.name(),\n+          new IterableStore<>(nativeStores.getNodeStore(), true),\n+          new PropertyAndNode2LabelIndexProcessor(reporter, checkIndexes ? indexes : null,\n+              propertyReader, cacheAccess, mandatoryProperties.forNodes(reporter)),\n+          CheckStage.Stage8_PS_Props, ROUND_ROBIN,\n+          new IterableStore<>(nativeStores.getPropertyStore(), true)));\n \n-            tasks.add( create( \"StringStore-Str\", nativeStores.getStringStore(),\n-                    multiPass.processor( Stage.SEQUENTIAL_FORWARD, STRINGS ), ROUND_ROBIN ) );\n-            tasks.add( create( \"ArrayStore-Arrays\", nativeStores.getArrayStore(),\n-                    multiPass.processor( Stage.SEQUENTIAL_FORWARD, ARRAYS ), ROUND_ROBIN ) );\n-        }\n-        // The schema store is verified in multiple passes that share state since it fits into memory\n-        // and we care about the consistency of back references (cf. SemanticCheck)\n-        // PASS 1: Dynamic record chains\n-        tasks.add( create( \"SchemaStore\", nativeStores.getSchemaStore(), ROUND_ROBIN ) );\n-        // PASS 2: Rule integrity and obligation build up\n-        final SchemaRecordCheck schemaCheck =\n-                new SchemaRecordCheck( new SchemaStorage( nativeStores.getSchemaStore() ), indexes );\n-        tasks.add( new SchemaStoreProcessorTask<>( \"SchemaStoreProcessor-check_rules\", statistics, numberOfThreads,\n-                nativeStores.getSchemaStore(), nativeStores, \"check_rules\",\n-                schemaCheck, multiPartBuilder, cacheAccess, defaultProcessor, ROUND_ROBIN ) );\n-        // PASS 3: Obligation verification and semantic rule uniqueness\n-        tasks.add( new SchemaStoreProcessorTask<>( \"SchemaStoreProcessor-check_obligations\", statistics,\n-                    numberOfThreads, nativeStores.getSchemaStore(), nativeStores,\n-                \"check_obligations\", schemaCheck.forObligationChecking(), multiPartBuilder, cacheAccess, defaultProcessor,\n-                ROUND_ROBIN ) );\n-        if ( checkGraph )\n-        {\n-            tasks.add( create( \"RelationshipTypeTokenStore\", nativeStores.getRelationshipTypeTokenStore(), ROUND_ROBIN ) );\n-            tasks.add( create( \"PropertyKeyTokenStore\", nativeStores.getPropertyKeyTokenStore(), ROUND_ROBIN ) );\n-            tasks.add( create( \"LabelTokenStore\", nativeStores.getLabelTokenStore(), ROUND_ROBIN ) );\n-            tasks.add( create( \"RelationshipTypeNameStore\", nativeStores.getRelationshipTypeNameStore(), ROUND_ROBIN ) );\n-            tasks.add( create( \"PropertyKeyNameStore\", nativeStores.getPropertyKeyNameStore(), ROUND_ROBIN ) );\n-            tasks.add( create( \"LabelNameStore\", nativeStores.getLabelNameStore(), ROUND_ROBIN ) );\n-            tasks.add( create( \"NodeDynamicLabelStore\", nativeStores.getNodeDynamicLabelStore(), ROUND_ROBIN ) );\n-        }\n-\n-        ConsistencyReporter filteredReporter = multiPass.reporter( NODES );\n-        if ( checkLabelScanStore )\n-        {\n-            long highId = nativeStores.getNodeStore().getHighId();\n-            tasks.add( new LabelIndexDirtyCheckTask() );\n-            tasks.add( recordScanner( \"LabelScanStore\",\n-                    new GapFreeAllEntriesLabelScanReader( labelScanStore.allNodeLabelRanges(), highId ),\n-                    new LabelScanDocumentProcessor( filteredReporter, new LabelScanCheck() ), Stage.SEQUENTIAL_FORWARD,\n-                    ROUND_ROBIN ) );\n-        }\n-        if ( checkIndexes )\n-        {\n-            tasks.add( new IndexDirtyCheckTask() );\n-            for ( IndexRule indexRule : indexes.onlineRules() )\n-            {\n-                tasks.add( recordScanner( format( \"Index_%d\", indexRule.getId() ),\n-                        new IndexIterator( indexes.accessorFor( indexRule ) ),\n-                        new IndexEntryProcessor( filteredReporter, new IndexCheck( indexRule ) ),\n-                        Stage.SEQUENTIAL_FORWARD, ROUND_ROBIN ) );\n-            }\n-        }\n-        return tasks;\n+      tasks.add(create(\"StringStore-Str\", nativeStores.getStringStore(),\n+          multiPass.processor(Stage.SEQUENTIAL_FORWARD, STRINGS), ROUND_ROBIN));\n+      tasks.add(create(\"ArrayStore-Arrays\", nativeStores.getArrayStore(),\n+          multiPass.processor(Stage.SEQUENTIAL_FORWARD, ARRAYS), ROUND_ROBIN));\n     }\n-\n-    private <RECORD> RecordScanner<RECORD> recordScanner( String name,\n-            BoundedIterable<RECORD> store, RecordProcessor<RECORD> processor, Stage stage,\n-            QueueDistribution distribution,\n-            @SuppressWarnings( \"rawtypes\" ) IterableStore... warmupStores )\n+    // The schema store is verified in multiple passes that share state since it fits into memory\n+    // and we care about the consistency of back references (cf. SemanticCheck)\n+    // PASS 1: Dynamic record chains\n+    tasks.add(create(\"SchemaStore\", nativeStores.getSchemaStore(), ROUND_ROBIN));\n+    // PASS 2: Rule integrity and obligation build up\n+    final SchemaRecordCheck schemaCheck =\n+        new SchemaRecordCheck(new SchemaStorage(nativeStores.getSchemaStore()), indexes);\n+    tasks.add(new SchemaStoreProcessorTask<>(\"SchemaStoreProcessor-check_rules\", statistics, numberOfThreads,\n+        nativeStores.getSchemaStore(), nativeStores, \"check_rules\",\n+        schemaCheck, multiPartBuilder, cacheAccess, defaultProcessor, ROUND_ROBIN));\n+    // PASS 3: Obligation verification and semantic rule uniqueness\n+    tasks.add(new SchemaStoreProcessorTask<>(\"SchemaStoreProcessor-check_obligations\", statistics,\n+        numberOfThreads, nativeStores.getSchemaStore(), nativeStores,\n+        \"check_obligations\", schemaCheck.forObligationChecking(), multiPartBuilder, cacheAccess, defaultProcessor,\n+        ROUND_ROBIN));\n+    if (checkGraph)\n     {\n-        return stage.isParallel()\n-                ? new ParallelRecordScanner<>( name, statistics, numberOfThreads, store, multiPartBuilder, processor,\n-                        cacheAccess, distribution, warmupStores )\n-                : new SequentialRecordScanner<>( name, statistics, numberOfThreads, store, multiPartBuilder, processor,\n-                        warmupStores );\n+      tasks.add(create(\"RelationshipTypeTokenStore\", nativeStores.getRelationshipTypeTokenStore(), ROUND_ROBIN));\n+      tasks.add(create(\"PropertyKeyTokenStore\", nativeStores.getPropertyKeyTokenStore(), ROUND_ROBIN));\n+      tasks.add(create(\"LabelTokenStore\", nativeStores.getLabelTokenStore(), ROUND_ROBIN));\n+      tasks.add(create(\"RelationshipTypeNameStore\", nativeStores.getRelationshipTypeNameStore(), ROUND_ROBIN));\n+      tasks.add(create(\"PropertyKeyNameStore\", nativeStores.getPropertyKeyNameStore(), ROUND_ROBIN));\n+      tasks.add(create(\"LabelNameStore\", nativeStores.getLabelNameStore(), ROUND_ROBIN));\n+      tasks.add(create(\"NodeDynamicLabelStore\", nativeStores.getNodeDynamicLabelStore(), ROUND_ROBIN));\n     }\n \n-    private <RECORD extends AbstractBaseRecord> StoreProcessorTask<RECORD> create( String name,\n-            RecordStore<RECORD> input, QueueDistribution distribution )\n+    ConsistencyReporter filteredReporter = multiPass.reporter(NODES);\n+    if (checkLabelScanStore)\n     {\n-        return new StoreProcessorTask<>( name, statistics, numberOfThreads, input, nativeStores, name, multiPartBuilder,\n-                cacheAccess, defaultProcessor, distribution );\n+      long highId = nativeStores.getNodeStore().getHighId();\n+      tasks.add(new LabelIndexDirtyCheckTask());\n+      tasks.add(recordScanner(\"LabelScanStore\",\n+          new GapFreeAllEntriesLabelScanReader(labelScanStore.allNodeLabelRanges(), highId),\n+          new LabelScanDocumentProcessor(filteredReporter, new LabelScanCheck()), Stage.SEQUENTIAL_FORWARD,\n+          ROUND_ROBIN));\n     }\n+    if (checkIndexes)\n+    {\n+      tasks.add(new IndexDirtyCheckTask());\n+      for (IndexRule indexRule : indexes.onlineRules())\n+      {\n+        tasks.add(recordScanner(format(\"Index_%d\", indexRule.getId()),\n+            new IndexIterator(indexes.accessorFor(indexRule)),\n+            new IndexEntryProcessor(filteredReporter, new IndexCheck(indexRule)),\n+            Stage.SEQUENTIAL_FORWARD, ROUND_ROBIN));\n+      }\n+    }\n+    return tasks;\n+  }\n+\n+  private <RECORD> RecordScanner<RECORD> recordScanner(String name,\n+                                                       BoundedIterable<RECORD> store, RecordProcessor<RECORD> processor, Stage stage,\n+                                                       QueueDistribution distribution,\n+                                                       @SuppressWarnings(\"rawtypes\") IterableStore... warmupStores)\n+  {\n+    return stage.isParallel()\n+        ? new ParallelRecordScanner<>(name, statistics, numberOfThreads, store, multiPartBuilder, processor,\n+        cacheAccess, distribution, warmupStores)\n+        : new SequentialRecordScanner<>(name, statistics, numberOfThreads, store, multiPartBuilder, processor,\n+        warmupStores);\n+  }\n \n-    private <RECORD extends AbstractBaseRecord> StoreProcessorTask<RECORD> create( String name,\n-            RecordStore<RECORD> input, StoreProcessor processor, QueueDistribution distribution )\n+  private <RECORD extends AbstractBaseRecord> StoreProcessorTask<RECORD> create(String name,\n+                                                                                RecordStore<RECORD> input, QueueDistribution distribution)\n+  {\n+    return new StoreProcessorTask<>(name, statistics, numberOfThreads, input, nativeStores, name, multiPartBuilder,\n+        cacheAccess, defaultProcessor, distribution);\n+  }\n+\n+  private <RECORD extends AbstractBaseRecord> StoreProcessorTask<RECORD> create(String name,\n+                                                                                RecordStore<RECORD> input, StoreProcessor processor,\n+                                                                                QueueDistribution distribution)\n+  {\n+    return new StoreProcessorTask<>(name, statistics, numberOfThreads, input, nativeStores, name, multiPartBuilder,\n+        cacheAccess, processor, distribution);\n+  }\n+\n+  private class LabelIndexDirtyCheckTask extends ConsistencyCheckerTask\n+  {\n+    LabelIndexDirtyCheckTask()\n     {\n-        return new StoreProcessorTask<>( name, statistics, numberOfThreads, input, nativeStores, name, multiPartBuilder,\n-                cacheAccess, processor, distribution );\n+      super(\"Label index dirty check\", Statistics.NONE, 1);\n     }\n \n-    private class LabelIndexDirtyCheckTask extends ConsistencyCheckerTask\n+    @Override\n+    public void run()\n     {\n-        LabelIndexDirtyCheckTask()\n+      if (labelScanStore instanceof NativeLabelScanStore)\n+      {\n+        if (((NativeLabelScanStore) labelScanStore).isDirty())\n         {\n-            super( \"Label index dirty check\", Statistics.NONE, 1 );\n+          reporter.report(new LabelScanIndex(), ConsistencyReport.LabelScanConsistencyReport.class,\n+              RecordType.LABEL_SCAN_DOCUMENT).dirtyIndex();\n         }\n+      }\n+    }\n+  }\n \n-        @Override\n-        public void run()\n-        {\n-            if ( labelScanStore instanceof NativeLabelScanStore )\n-            {\n-                if ( ((NativeLabelScanStore)labelScanStore).isDirty() )\n-                {\n-                    reporter.report( new LabelScanIndex(), ConsistencyReport.LabelScanConsistencyReport.class,\n-                            RecordType.LABEL_SCAN_DOCUMENT ).dirtyIndex();\n-                }\n-            }\n-        }\n+  private class IndexDirtyCheckTask extends ConsistencyCheckerTask\n+  {\n+    IndexDirtyCheckTask()\n+    {\n+      super(\"Indexes dirty check\", Statistics.NONE, 1);\n     }\n \n-    private class IndexDirtyCheckTask extends ConsistencyCheckerTask\n+    @Override\n+    public void run()\n     {\n-        IndexDirtyCheckTask()\n+      for (IndexRule indexRule : indexes.onlineRules())\n+      {\n+        if (indexes.accessorFor(indexRule).isDirty())\n         {\n-            super( \"Indexes dirty check\", Statistics.NONE, 1 );\n+          reporter.report(new IndexRecord(indexRule), ConsistencyReport.IndexConsistencyReport.class,\n+              RecordType.INDEX).dirtyIndex();\n         }\n+      }\n \n-        @Override\n-        public void run()\n-        {\n-            for ( IndexRule indexRule : indexes.onlineRules() )\n-            {\n-                if ( indexes.accessorFor( indexRule ).isDirty() )\n-                {\n-                    reporter.report( new IndexRecord( indexRule ), ConsistencyReport.IndexConsistencyReport.class,\n-                            RecordType.INDEX ).dirtyIndex();\n-                }\n-            }\n-\n-        }\n     }\n+  }\n }\n",
            "diff_size": 255
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}