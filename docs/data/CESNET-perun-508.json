{
    "project_name": "CESNET-perun",
    "error_id": "508",
    "information": {
        "errors": [
            {
                "line": "770",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t\treturn richResource;\n\t}\n\t\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/508/AuditParser.java\nindex b7b2f29acf5..fc323936119 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/508/AuditParser.java\n@@ -767,5 +767,4 @@ public class AuditParser {\n \n \t\treturn richResource;\n \t}\n-\t\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/508/AuditParser.java\nindex b7b2f29acf5..e1ddeb38175 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/508/AuditParser.java\n@@ -22,104 +22,138 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author NorexanWORK\n  */\n public class AuditParser {\n-\tprivate final static Logger loger = LoggerFactory.getLogger(AuditParser.class);\n-\tstatic final Pattern perunBeanStartPattern = Pattern.compile(\"\\\\w+:\\\\[\");\n-\tstatic final Pattern pointyAndSquareBracket = Pattern.compile(\".\\\\[|.\\\\]|[^\\\\\\\\](\\\\\\\\\\\\\\\\)*(<|>)\");\n-\n-\n-\tpublic static List<PerunBean> parseLog(String log) throws InternalErrorException {\n-\t\tList<PerunBean> listPerunBeans = new ArrayList<PerunBean>();\n-\t\tPerunBean perunBean = null;\n-\t\t//Parse log to List of text Beanss\n-\t\tList<Pair<String, Map<String, String>>> listOfTextBeans = new ArrayList<Pair<String, Map<String, String>>>();\n-\t\ttry {\n-\t\t\tlistOfTextBeans = beansToMap(log);\n-\t\t} catch (RuntimeException ex) {\n-\t\t\tloger.error(\"Message \" + log + \" was not correctly parsed to Map<NameOfBean,BodyOfBean>\", ex);\n-\t\t}\n-\t\t//For every bean try to find it and create object from text\n-\t\tfor(Pair<String, Map<String, String>> p: listOfTextBeans) {\n-\t\t\ttry {\n-\t\t\t\tperunBean = null;\n-\t\t\t\tif(p.getLeft().equals(\"Attribute\")) perunBean = createAttribute(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"AttributeDefinition\")) perunBean = createAttributeDefinition(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Candidate\")) perunBean = createCandidate(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Destination\")) perunBean = createDestination(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"ExtSource\")) perunBean = createExtSource(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"RichFacility\")) perunBean = createRichFacility(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Facility\")) perunBean = createFacility(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Group\")) perunBean = createGroup(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Host\")) perunBean = createHost(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Member\")) perunBean = createMember(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Owner\")) perunBean = createOwner(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Resource\")) perunBean = createResource(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"RichDestination\")) perunBean = createRichDestination(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"RichMember\")) perunBean = createRichMember(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"RichUser\")) perunBean = createRichUser(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"RichGroup\")) perunBean = createRichGroup(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"RichResource\")) perunBean = createRichResource(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Service\")) perunBean = createService(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"User\")) perunBean = createUser(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"UserExtSource\")) perunBean = createUserExtSource(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Vo\")) perunBean = createVo(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"Authorship\")) perunBean = createAuthorship(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"ResourceTag\")) perunBean = createResourceTag(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"ExecService\")) perunBean = createExecService(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"SecurityTeam\")) perunBean = createSecurityTeam(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"TaskResult\")) perunBean = createTaskResult(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"BanOnResource\")) perunBean = createBanOnResource(p.getRight());\n-\t\t\t\telse if(p.getLeft().equals(\"BanOnFacility\")) perunBean = createBanOnFacility(p.getRight());\n-\t\t\t\telse loger.debug(\"Object of this type can't be parsed cause there is no such object in parser's branches. ObjectName:\" + p.getLeft());\n-\t\t\t\tif(perunBean != null) listPerunBeans.add(perunBean);\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tloger.error(\"Object name \" + p.getLeft() + \" with attributes \" + p.getRight() + \" was not parsed due to fail {} \", e);\n-\t\t\t}\n-\t\t}\n-\t\treturn listPerunBeans;\n-\t}\n-\n-\n-\t/**\n-\t * This method take log message and return List of Pair where left is Name\n-\t * of object and right is Map of object attributes and their values. For\n-\t * Example \"Group - {id=21, voId=21, description=Group containing VO\n-\t * members, name=members}\"\n-\t *\n-\t * This method using for function method parseOfLog to get listOfObjects in\n-\t * Strings from log message\n-\t *\n-\t * @param log log message\n-\t * @return list of pairs name of bean to map of his attributes and values\n-\t */\n-\tprivate static List<Pair<String, Map<String, String>>> beansToMap(String log) {\n-\t\tif(log.equals(\"\\\\0\")) return null;\n-\t\t//First get list of beans from log message\n-\t\tList<String> listOfNonparsedBeans = parseOfLog(log);\n-\t\tList<Pair<String, Map<String, String>>> listOfBeans = new ArrayList<Pair<String, Map<String, String>>>();\n-\n-\t\t//For every object in list of nonparsed beans try to parse it\n-\t\tfor (String s : listOfNonparsedBeans) {\n-\t\t\t//Prepare empty map and empty string for name of bean\n-\t\t\tString nameOfBean = null;\n-\t\t\tMap<String, String> map = new HashMap<String, String>();\n-\n-\t\t\t//Find, save and cut name of Bean from beanstring\n-\t\t\tfor (int i = 0; i < s.length(); i++) {\n-\t\t\t\t//After correct bean name there is everytime char \":\"\n-\t\t\t\tif (s.charAt(i) == ':') {\n-\t\t\t\t\tnameOfBean = s.substring(0, i);\n-\t\t\t\t\t//Cut name of Bean + chars \":[\" after it\n-\t\t\t\t\ts = s.substring(i + 2);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tif(s.charAt(0) == '\\\\' && s.charAt(1) == '0') map = null;\n-\t\t\telse {\n+    private final static Logger loger = LoggerFactory.getLogger(AuditParser.class);\n+    static final Pattern perunBeanStartPattern = Pattern.compile(\"\\\\w+:\\\\[\");\n+    static final Pattern pointyAndSquareBracket = Pattern.compile(\".\\\\[|.\\\\]|[^\\\\\\\\](\\\\\\\\\\\\\\\\)*(<|>)\");\n+\n+\n+    public static List<PerunBean> parseLog(String log) throws InternalErrorException {\n+        List<PerunBean> listPerunBeans = new ArrayList<PerunBean>();\n+        PerunBean perunBean = null;\n+        //Parse log to List of text Beanss\n+        List<Pair<String, Map<String, String>>> listOfTextBeans = new ArrayList<Pair<String, Map<String, String>>>();\n+        try {\n+            listOfTextBeans = beansToMap(log);\n+        } catch (RuntimeException ex) {\n+            loger.error(\"Message \" + log + \" was not correctly parsed to Map<NameOfBean,BodyOfBean>\", ex);\n+        }\n+        //For every bean try to find it and create object from text\n+        for (Pair<String, Map<String, String>> p : listOfTextBeans) {\n+            try {\n+                perunBean = null;\n+                if (p.getLeft().equals(\"Attribute\")) {\n+                    perunBean = createAttribute(p.getRight());\n+                } else if (p.getLeft().equals(\"AttributeDefinition\")) {\n+                    perunBean = createAttributeDefinition(p.getRight());\n+                } else if (p.getLeft().equals(\"Candidate\")) {\n+                    perunBean = createCandidate(p.getRight());\n+                } else if (p.getLeft().equals(\"Destination\")) {\n+                    perunBean = createDestination(p.getRight());\n+                } else if (p.getLeft().equals(\"ExtSource\")) {\n+                    perunBean = createExtSource(p.getRight());\n+                } else if (p.getLeft().equals(\"RichFacility\")) {\n+                    perunBean = createRichFacility(p.getRight());\n+                } else if (p.getLeft().equals(\"Facility\")) {\n+                    perunBean = createFacility(p.getRight());\n+                } else if (p.getLeft().equals(\"Group\")) {\n+                    perunBean = createGroup(p.getRight());\n+                } else if (p.getLeft().equals(\"Host\")) {\n+                    perunBean = createHost(p.getRight());\n+                } else if (p.getLeft().equals(\"Member\")) {\n+                    perunBean = createMember(p.getRight());\n+                } else if (p.getLeft().equals(\"Owner\")) {\n+                    perunBean = createOwner(p.getRight());\n+                } else if (p.getLeft().equals(\"Resource\")) {\n+                    perunBean = createResource(p.getRight());\n+                } else if (p.getLeft().equals(\"RichDestination\")) {\n+                    perunBean = createRichDestination(p.getRight());\n+                } else if (p.getLeft().equals(\"RichMember\")) {\n+                    perunBean = createRichMember(p.getRight());\n+                } else if (p.getLeft().equals(\"RichUser\")) {\n+                    perunBean = createRichUser(p.getRight());\n+                } else if (p.getLeft().equals(\"RichGroup\")) {\n+                    perunBean = createRichGroup(p.getRight());\n+                } else if (p.getLeft().equals(\"RichResource\")) {\n+                    perunBean = createRichResource(p.getRight());\n+                } else if (p.getLeft().equals(\"Service\")) {\n+                    perunBean = createService(p.getRight());\n+                } else if (p.getLeft().equals(\"User\")) {\n+                    perunBean = createUser(p.getRight());\n+                } else if (p.getLeft().equals(\"UserExtSource\")) {\n+                    perunBean = createUserExtSource(p.getRight());\n+                } else if (p.getLeft().equals(\"Vo\")) {\n+                    perunBean = createVo(p.getRight());\n+                } else if (p.getLeft().equals(\"Authorship\")) {\n+                    perunBean = createAuthorship(p.getRight());\n+                } else if (p.getLeft().equals(\"ResourceTag\")) {\n+                    perunBean = createResourceTag(p.getRight());\n+                } else if (p.getLeft().equals(\"ExecService\")) {\n+                    perunBean = createExecService(p.getRight());\n+                } else if (p.getLeft().equals(\"SecurityTeam\")) {\n+                    perunBean = createSecurityTeam(p.getRight());\n+                } else if (p.getLeft().equals(\"TaskResult\")) {\n+                    perunBean = createTaskResult(p.getRight());\n+                } else if (p.getLeft().equals(\"BanOnResource\")) {\n+                    perunBean = createBanOnResource(p.getRight());\n+                } else if (p.getLeft().equals(\"BanOnFacility\")) {\n+                    perunBean = createBanOnFacility(p.getRight());\n+                } else {\n+                    loger.debug(\"Object of this type can't be parsed cause there is no such object in parser's branches. ObjectName:\" + p.getLeft());\n+                }\n+                if (perunBean != null) {\n+                    listPerunBeans.add(perunBean);\n+                }\n+            } catch (RuntimeException e) {\n+                loger.error(\"Object name \" + p.getLeft() + \" with attributes \" + p.getRight() + \" was not parsed due to fail {} \", e);\n+            }\n+        }\n+        return listPerunBeans;\n+    }\n+\n+\n+    /**\n+     * This method take log message and return List of Pair where left is Name\n+     * of object and right is Map of object attributes and their values. For\n+     * Example \"Group - {id=21, voId=21, description=Group containing VO\n+     * members, name=members}\"\n+     * <p>\n+     * This method using for function method parseOfLog to get listOfObjects in\n+     * Strings from log message\n+     *\n+     * @param log log message\n+     * @return list of pairs name of bean to map of his attributes and values\n+     */\n+    private static List<Pair<String, Map<String, String>>> beansToMap(String log) {\n+        if (log.equals(\"\\\\0\")) {\n+            return null;\n+        }\n+        //First get list of beans from log message\n+        List<String> listOfNonparsedBeans = parseOfLog(log);\n+        List<Pair<String, Map<String, String>>> listOfBeans = new ArrayList<Pair<String, Map<String, String>>>();\n+\n+        //For every object in list of nonparsed beans try to parse it\n+        for (String s : listOfNonparsedBeans) {\n+            //Prepare empty map and empty string for name of bean\n+            String nameOfBean = null;\n+            Map<String, String> map = new HashMap<String, String>();\n+\n+            //Find, save and cut name of Bean from beanstring\n+            for (int i = 0; i < s.length(); i++) {\n+                //After correct bean name there is everytime char \":\"\n+                if (s.charAt(i) == ':') {\n+                    nameOfBean = s.substring(0, i);\n+                    //Cut name of Bean + chars \":[\" after it\n+                    s = s.substring(i + 2);\n+                    break;\n+                }\n+            }\n+\n+            if (s.charAt(0) == '\\\\' && s.charAt(1) == '0') {\n+                map = null;\n+            } else {\n \t\t\t\t/*\n \t\t\t\t//Find name of Bean form beanString\n \t\t\t\tString nameOfBean = null;\n@@ -128,644 +162,752 @@ public class AuditParser {\n \t\t\t\tnameOfBean = s.substring(beanNameMatcher.start(), beanNameMatcher.end()-1);\n \t\t\t\t*/\n \n-\t\t\t\t//From the rest get pair attribute of object / value of attribute and put it to the MAP\n-\t\t\t\t//Helping variables to find start of attribute name, end of attribute name and the same for attribute value its always quaternion\n-\t\t\t\tint startName = -1;\n-\t\t\t\tint endName = -1;\n-\t\t\t\tint startValue = -1;\n-\t\t\t\tint endValue = -1;\n-\t\t\t\tint pointyBrackets = 0;\n-\t\t\t\tboolean isName = true;\n-\n-\t\t\t\t//For the rest of object String searching for attributes names and their values\n-\t\t\t\tfor (int i = 0; i < s.length(); i++) {\n-\t\t\t\t\t//found first Letter when no start still exist and searching for name and save it\n-\t\t\t\t\tif(Character.isLetter(s.charAt(i)) && startName == -1 && isName == true) {\n-\t\t\t\t\t\tstartName = i;\n-\t\t\t\t\t} //found for last Letter symbol in beans attribute name\n-\t\t\t\t\telse if(Character.isLetter(s.charAt(i)) && endName == -1 && isName == true) {\n-\t\t\t\t\t\t//If there is still some symbol after this one and if it is not Letter, i save my end name position\n-\t\t\t\t\t\tif (i + 1 != s.length()) {\n-\t\t\t\t\t\t\tif(!Character.isLetter(s.charAt(i+1))) {\n-\t\t\t\t\t\t\t\tendName = i;\n-\t\t\t\t\t\t\t\t//when i found all name, i will be searching for value\n-\t\t\t\t\t\t\t\tisName = false;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} //If i found name already, trying to find nonescaped < and count it\n-\t\t\t\t\telse if (s.charAt(i) == '<' && isName == false) {\n-\t\t\t\t\t\t//if its first, its my start of value position and i save it\n-\t\t\t\t\t\tif (pointyBrackets == 0) {\n-\t\t\t\t\t\t\tif (!BeansUtils.isEscaped(s, i - 1)) {\n-\t\t\t\t\t\t\t\tstartValue = i;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t//if this bracket is nonescaped so count it\n-\t\t\t\t\t\tif (!BeansUtils.isEscaped(s, i - 1)) {\n-\t\t\t\t\t\t\tpointyBrackets++;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} //If i found name already, there are some open angle breackets and is nonescaped so count this one off\n-\t\t\t\t\telse if (pointyBrackets != 0 && s.charAt(i) == '>' && isName == false) {\n-\t\t\t\t\t\t//if this bracket is nonescaped so count it off\n-\t\t\t\t\t\tif (!BeansUtils.isEscaped(s, i - 1)) {\n-\t\t\t\t\t\t\tpointyBrackets--;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t//if there left no brackets after counting off, so its my end bracket and i save it\n-\t\t\t\t\t\tif (pointyBrackets == 0) {\n-\t\t\t\t\t\t\tif (!BeansUtils.isEscaped(s, i - 1)) {\n-\t\t\t\t\t\t\t\tendValue = i;\n-\t\t\t\t\t\t\t\tisName = true;\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\t//If i have already all quaternion of position i will put this attribute to the map and set helping variables to start\n-\t\t\t\t\tif (startName != -1 && endName != -1 && startValue != -1 && endValue != -1) {\n-\t\t\t\t\t\tmap.put(s.substring(startName, endName + 1), s.substring(startValue + 1, endValue));\n-\t\t\t\t\t\tstartName = -1;\n-\t\t\t\t\t\tendName = -1;\n-\t\t\t\t\t\tstartValue = -1;\n-\t\t\t\t\t\tendValue = -1;\n-\t\t\t\t\t}\n-\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t//Put name of object and map of attribute and values to the list of all objects\n-\t\t\tPair<String, Map<String, String>> pair = new Pair<String, Map<String, String>>();\n-\t\t\tpair.put(nameOfBean, map);\n-\t\t\tlistOfBeans.add(pair);\n-\t\t}\n-\t\treturn listOfBeans;\n-\t}\n-\n-\t/**\n-\t * This method get log message and parse it to list of beans in Strings For\n-\t * example item in array is everytime something like -> Bean:[*] where * is\n-\t * anything\n-\t *\n-\t * This method using method \"CutStartOfLog\" for searching beans in log\n-\t *\n-\t * @param log log message\n-\t * @return list of object in String\n-\t */\n-\tprivate static List<String> parseOfLog(String log) {\n-\t\tList<String> results = new ArrayList<String>();\n-\t\t//Load helping variables for counting brackets\n-\t\tint squareBrackets = 0;\n-\t\tint pointyBrackets = 0;\n-\t\tboolean enableCountSquareBrackets = true;\n-\n-\t\tlog = CutStartOfLog(log);\n-\t\twhile(log!=null) {\n-\t\t\t//TODO this regular expresion expect, that never get char <,>,[,] or \\ like first char in string log!!!\n-\t\t\tMatcher pointyAndSquareBracketMatcher = pointyAndSquareBracket.matcher(log);\n-\t\t\tint endOfObject = 0;\n-\t\t\tint start = 0;\n-\t\t\twhile(pointyAndSquareBracketMatcher.find(start)) {\n-\t\t\t\tif(log.charAt(pointyAndSquareBracketMatcher.end()-1)=='<') {\n-\t\t\t\t\tenableCountSquareBrackets = false;\n-\t\t\t\t\tpointyBrackets++;\n-\t\t\t\t}else if(log.charAt(pointyAndSquareBracketMatcher.end()-1)=='>') {\n-\t\t\t\t\tpointyBrackets--;\n-\t\t\t\t\t//If it means that this is our searching end anglebracket, so enable counting square brackets again\n-\t\t\t\t\tif (pointyBrackets == 0) {\n-\t\t\t\t\t\tenableCountSquareBrackets = true;\n-\t\t\t\t\t}\n-\t\t\t\t}else if(enableCountSquareBrackets && log.charAt(pointyAndSquareBracketMatcher.end()-1)=='[') {\n-\t\t\t\t\tsquareBrackets++;\n-\t\t\t\t}else if(enableCountSquareBrackets && log.charAt(pointyAndSquareBracketMatcher.end()-1)==']') {\n-\t\t\t\t\tsquareBrackets--;\n-\t\t\t\t\tif (squareBrackets == 0) {\n-\t\t\t\t\t\t//This is end position of searching object\n-\t\t\t\t\t\tendOfObject = pointyAndSquareBracketMatcher.end();\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tstart = pointyAndSquareBracketMatcher.end()-1;\n-\t\t\t}\n-\t\t\tif(endOfObject != 0) {\n-\t\t\t\tresults.add(log.substring(0, endOfObject));\n-\t\t\t\tlog = log.substring(endOfObject);\n-\t\t\t}else {\n-\t\t\t\treturn results;\n-\t\t\t}\n-\t\t\tlog = CutStartOfLog(log);\n-\t\t}\n-\t\treturn results;\n-\t}\n-\n-\t/**\n-\t * Get log message and find first real object thx '*:[' where * is name of\n-\t * object cut it on the start of name example 'blabluble ,l;[0Bean:[*'\n-\t * return 'Bean:[*'\n-\t *\n-\t * Warning: If log content bad definition of bean, have *:[ in text without\n-\t * bean inside, parsing failed\n-\t *\n-\t * @param log log message\n-\t * @return Message cutted to Start of first real bean in log\n-\t */\n-\tprivate static String CutStartOfLog(String log) {\n-\n-\t\tif(log == null) return null;\n-\t\tMatcher perunBeanStartMatcher = perunBeanStartPattern.matcher(log);\n-\t\tif(perunBeanStartMatcher.find()) {\n-\t\t\tlog = log.substring(perunBeanStartMatcher.start());\n-\t\t} else return null;\n-\t\treturn log;\n-\t}\n-\n-\t//--------------------------------------------------------------------------\n-\t//--------------------------BEANS CREATORS---------------------------------\n-\tprivate static User createUser(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tUser user = new User();\n-\t\tuser.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tuser.setTitleBefore(BeansUtils.eraseEscaping(beanAttr.get(\"titleBefore\")));\n-\t\tuser.setTitleAfter(BeansUtils.eraseEscaping(beanAttr.get(\"titleAfter\")));\n-\t\tuser.setFirstName(BeansUtils.eraseEscaping(beanAttr.get(\"firstName\")));\n-\t\tuser.setLastName(BeansUtils.eraseEscaping(beanAttr.get(\"lastName\")));\n-\t\tuser.setMiddleName(BeansUtils.eraseEscaping(beanAttr.get(\"middleName\")));\n-\t\tuser.setServiceUser(Boolean.valueOf(beanAttr.get(\"serviceAccount\")).booleanValue());\n-\t\tuser.setSponsoredUser(Boolean.valueOf(beanAttr.get(\"sponsoredAccount\")).booleanValue());\n-\t\treturn user;\n-\t}\n-\n-\tprivate static Attribute createAttribute(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif(beanAttr==null) return null;\n-\t\tAttribute attribute = new Attribute();\n-\t\tattribute.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tattribute.setFriendlyName(BeansUtils.eraseEscaping(beanAttr.get(\"friendlyName\")));\n-\t\tattribute.setNamespace(BeansUtils.eraseEscaping(beanAttr.get(\"namespace\")));\n-\t\tattribute.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n-\t\tattribute.setValue(BeansUtils.stringToAttributeValue(BeansUtils.eraseEscaping(beanAttr.get(\"value\")), attribute.getType()));\n-\t\treturn attribute;\n-\t}\n-\n-\tprivate static AttributeDefinition createAttributeDefinition(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tAttributeDefinition attributeDefinition = new AttributeDefinition();\n-\t\tattributeDefinition.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tattributeDefinition.setFriendlyName(BeansUtils.eraseEscaping(beanAttr.get(\"friendlyName\")));\n-\t\tattributeDefinition.setNamespace(BeansUtils.eraseEscaping(beanAttr.get(\"namespace\")));\n-\t\tattributeDefinition.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n-\t\treturn attributeDefinition;\n-\t}\n-\n-\tprivate static Candidate createCandidate(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tCandidate candidate = new Candidate();\n-\t\tcandidate.setAttributes(BeansUtils.deserializeStringToMap(beanAttr.get(\"attributes\")));\n-\t\t//Parse and get ExtSource\n-\t\tUserExtSource userExtSource;\n-\t\tif(beanAttr.get(\"userExtSource\").equals(\"\\\\0\")) userExtSource = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> userExtSourceMap = beansToMap(beanAttr.get(\"userExtSource\"));\n-\t\t\tuserExtSource = createUserExtSource(userExtSourceMap.get(0).getRight());\n-\t\t}\n-\t\tcandidate.setUserExtSource(userExtSource);\n-\t\t//Parse and get list of UserExtSources\n-\t\tList<UserExtSource> additionalUserExtSources = new ArrayList<UserExtSource>();\n-\t\tif(beanAttr.get(\"additionalUserExtSources\").equals(\"\\\\0\")) additionalUserExtSources = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> userExtSourcesList = beansToMap(beanAttr.get(\"additionalUserExtSources\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: userExtSourcesList) {\n-\t\t\t\tuserExtSource = createUserExtSource(p.getRight());\n-\t\t\t\tadditionalUserExtSources.add(userExtSource);\n-\t\t\t}\n-\t\t}\n-\t\tcandidate.setAdditionalUserExtSources(additionalUserExtSources);\n-\t\treturn candidate;\n-\t}\n-\n-\tprivate static Destination createDestination(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tDestination destination = new Destination();\n-\t\tdestination.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tdestination.setDestination(BeansUtils.eraseEscaping(beanAttr.get(\"destination\")));\n-\t\tdestination.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n-\t\tdestination.setPropagationType(BeansUtils.eraseEscaping(beanAttr.get(\"propagationtype\")));\n-\t\treturn destination;\n-\t}\n-\n-\tprivate static ExtSource createExtSource(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tExtSource extSource = new ExtSource();\n-\t\textSource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\textSource.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\textSource.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n-\t\treturn extSource;\n-\t}\n-\n-\tprivate static Facility createFacility(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tFacility facility = new Facility();\n-\t\tfacility.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tfacility.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\tfacility.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n-\t\treturn facility;\n-\t}\n-\n-\tprivate static Group createGroup(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tGroup group = new Group();\n-\t\tif(beanAttr.get(\"parentGroupId\").equals(\"\\\\0\")) group.setParentGroupId(null);\n-\t\telse group.setParentGroupId(Integer.valueOf(beanAttr.get(\"parentGroupId\")));\n-\t\tgroup.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tgroup.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\tgroup.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n-\t\tgroup.setVoId(Integer.valueOf(beanAttr.get(\"voId\")));\n-\t\treturn group;\n-\t}\n-\n-\tprivate static Host createHost(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif(beanAttr==null) return null;\n-\t\tHost host = new Host();\n-\t\thost.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\thost.setHostname(BeansUtils.eraseEscaping(beanAttr.get(\"hostname\")));\n-\t\treturn host;\n-\t}\n-\n-\tprivate static Member createMember(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tMember member = new Member();\n-\t\tmember.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tmember.setUserId(Integer.valueOf(beanAttr.get(\"userId\")).intValue());\n-\t\tmember.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n-\t\tmember.setStatus(BeansUtils.eraseEscaping(beanAttr.get(\"status\")));\n-\t\tmember.setMembershipType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n-\t\tmember.setSourceGroupId(beanAttr.get(\"sourceGroupId\").equals(\"\\\\0\") ? null : Integer.valueOf(beanAttr.get(\"sourceGroupId\")));\n-\t\treturn member;\n-\t}\n-\n-\tprivate static Owner createOwner(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tOwner owner = new Owner();\n-\t\towner.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\towner.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\towner.setContact(BeansUtils.eraseEscaping(beanAttr.get(\"contact\")));\n-\t\towner.setTypeByString(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n-\t\treturn owner;\n-\t}\n-\n-\tprivate static Resource createResource(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tResource resource = new Resource();\n-\t\tresource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tresource.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n-\t\tresource.setFacilityId(Integer.valueOf(beanAttr.get(\"facilityId\")).intValue());\n-\t\tresource.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\tresource.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n-\t\treturn resource;\n-\t}\n-\n-\tprivate static Service createService(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tService service = new Service();\n-\t\tservice.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tservice.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\treturn service;\n-\t}\n-\n-\tprivate static UserExtSource createUserExtSource(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tUserExtSource userExtSource = new UserExtSource();\n-\t\tuserExtSource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tuserExtSource.setLoa(Integer.valueOf(beanAttr.get(\"loa\")).intValue());\n-\t\tuserExtSource.setLogin(BeansUtils.eraseEscaping(beanAttr.get(\"login\")));\n-\t\t//Parse and get ExtSource\n-\t\tExtSource extSource;\n-\t\tif(beanAttr.get(\"source\").equals(\"\\\\0\")) extSource = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> extSourceList = beansToMap(beanAttr.get(\"source\"));\n-\t\t\textSource = createExtSource(extSourceList.get(0).getRight());\n-\t\t}\n-\t\tuserExtSource.setExtSource(extSource);\n-\t\treturn userExtSource;\n-\t}\n-\n-\tprivate static Vo createVo(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tVo vo = new Vo();\n-\t\tvo.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tvo.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\tvo.setShortName(BeansUtils.eraseEscaping(beanAttr.get(\"shortName\")));\n-\t\treturn vo;\n-\t}\n-\n-\tprivate static Authorship createAuthorship(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif(beanAttr==null) return null;\n-\t\tAuthorship authorship = new Authorship();\n-\t\tauthorship.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tauthorship.setPublicationId(Integer.valueOf(beanAttr.get(\"publicationId\")).intValue());\n-\t\tauthorship.setUserId(Integer.valueOf(beanAttr.get(\"userId\")).intValue());\n-\t\tauthorship.setCreatedBy(BeansUtils.eraseEscaping(beanAttr.get(\"createdBy\")));\n-\t\tauthorship.setCreatedByUid((beanAttr.get(\"createdByUid\").equals(\"\\\\0\")) ? null : Integer.valueOf(beanAttr.get(\"createdByUid\")).intValue());\n-\t\tif(BeansUtils.eraseEscaping(beanAttr.get(\"createdDate\"))== null) authorship.setCreatedDate(null);\n-\t\telse {\n-\t\t\tDate date;\n-\t\t\ttry {\n-\t\t\t\tdate = BeansUtils.getDateFormatter().parse(BeansUtils.eraseEscaping(beanAttr.get(\"createdDate\")));\n-\t\t\t} catch (ParseException ex) {\n-\t\t\t\tthrow new InternalErrorException(\"Error when date was parsing from String to Date.\", ex);\n-\t\t\t}\n-\t\t\tauthorship.setCreatedDate(date);\n-\t\t}\n-\t\treturn authorship;\n-\t}\n-\n-\tprivate static ResourceTag createResourceTag(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tResourceTag resourceTag = new ResourceTag();\n-\t\tresourceTag.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tresourceTag.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n-\t\tresourceTag.setTagName(BeansUtils.eraseEscaping(beanAttr.get(\"tagName\")));\n-\t\treturn resourceTag;\n-\t}\n-\n-\tprivate static ExecService createExecService(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tExecService execService = new ExecService();\n-\t\texecService.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\texecService.setDefaultDelay(Integer.valueOf(beanAttr.get(\"defaultDelay\")).intValue());\n-\t\texecService.setDefaultRecurrence(Integer.valueOf(beanAttr.get(\"defaultRecurrence\")).intValue());\n-\t\texecService.setEnabled(Boolean.valueOf(beanAttr.get(\"enabled\")).booleanValue());\n-\t\tif(beanAttr.get(\"script\").equals(\"\\\\0\")) execService.setScript(null);\n-\t\telse {\n-\t\t\texecService.setScript(BeansUtils.eraseEscaping(beanAttr.get(\"script\")));\n-\t\t}\n-\t\tService service;\n-\t\tif(beanAttr.get(\"service\").equals(\"\\\\0\")) service = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> serviceList = beansToMap(beanAttr.get(\"service\"));\n-\t\t\tservice = createService(serviceList.get(0).getRight());\n-\t\t}\n-\t\texecService.setService(service);\n-\t\tExecService.ExecServiceType exType;\n-\t\tif(beanAttr.get(\"type\").equals(\"\\\\0\")) exType = null;\n-\t\telse {\n-\t\t\tString type = beanAttr.get(\"type\");\n-\t\t\tif(type.equals(\"GENERATE\")) exType = ExecServiceType.GENERATE;\n-\t\t\telse if(type.equals(\"SEND\")) exType = ExecServiceType.SEND;\n-\t\t\telse exType = null;\n-\t\t}\n-\t\texecService.setExecServiceType(exType);\n-\t\treturn execService;\n-\t}\n-\n-\tprivate static SecurityTeam createSecurityTeam(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tSecurityTeam securityTeam = new SecurityTeam();\n-\t\tsecurityTeam.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\tsecurityTeam.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\tsecurityTeam.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n-\t\treturn securityTeam;\n-\t}\n-\n-\tprivate static TaskResult createTaskResult(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif (beanAttr == null) return null;\n-\t\tTaskResult taskResult = new TaskResult();\n-\t\ttaskResult.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\ttaskResult.setTaskId(Integer.valueOf(beanAttr.get(\"taskId\")).intValue());\n-\t\ttaskResult.setDestinationId(Integer.valueOf(beanAttr.get(\"destinationId\")).intValue());\n-\t\tString errorMessage;\n-\t\tif (beanAttr.get(\"errorMessage\").equals(\"\\\\0\")) errorMessage = null;\n-\t\telse {\n-\t\t\terrorMessage = BeansUtils.eraseEscaping(beanAttr.get(\"errorMessage\"));\n-\t\t}\n-\t\ttaskResult.setErrorMessage(errorMessage);\n-\t\tString standardMessage;\n-\t\tif (beanAttr.get(\"standardMessage\").equals(\"\\\\0\")) standardMessage = null;\n-\t\telse {\n-\t\t\tstandardMessage = BeansUtils.eraseEscaping(beanAttr.get(\"standardMessage\"));\n-\t\t}\n-\t\ttaskResult.setStandardMessage(standardMessage);\n-\t\ttaskResult.setReturnCode(Integer.valueOf(beanAttr.get(\"returnCode\")).intValue());\n-\t\ttry {\n-\t\t\ttaskResult.setTimestamp(BeansUtils.getDateFormatter().parse(BeansUtils.eraseEscaping(beanAttr.get(\"timestamp\"))));\n-\t\t} catch (ParseException e) {\n-\t\t\tthrow new InternalErrorException(\"Error when date was parsing from String to Date.\", e);\n-\t\t}\n-\t\tString status = BeansUtils.eraseEscaping(beanAttr.get(\"status\"));\n-\t\tTaskResultStatus st;\n-\t\tif (status.equals(\"\\\\0\")) st = null;\n-\t\telse {\n-\t\t\tif (status.equals(\"DENIED\")) st = TaskResultStatus.DENIED;\n-\t\t\telse if (status.equals(\"DONE\")) st = TaskResultStatus.DONE;\n-\t\t\telse if (status.equals(\"ERROR\")) st = TaskResultStatus.ERROR;\n-\t\t\telse if (status.equals(\"FATAL_ERROR\")) st = TaskResultStatus.FATAL_ERROR;\n-\t\t\telse if (status.equals(\"WARN\")) st = TaskResultStatus.WARN;\n-\t\t\telse st = null;\n-\t\t}\n-\t\ttaskResult.setStatus(st);\n-\t\tService service;\n-\t\tif (beanAttr.get(\"service\").equals(\"\\\\0\")) service = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> serviceList = beansToMap(beanAttr.get(\"service\"));\n-\t\t\tif (serviceList.size() > 0) {\n-\t\t\t\tservice = createService(serviceList.get(0).getRight());\n-\t\t\t} else service = null;\n-\t\t}\n-\t\ttaskResult.setService(service);\n-\n-\t\treturn taskResult;\n-\n-\t}\n-\n-\tprivate static Ban createBanOnResource(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tBanOnResource banOnResource = new BanOnResource();\n-\t\tbanOnResource.setId(Integer.valueOf(beanAttr.get(\"id\")));\n-\t\tbanOnResource.setMemberId(Integer.valueOf(beanAttr.get(\"memberId\")));\n-\t\tbanOnResource.setResourceId(Integer.valueOf(beanAttr.get(\"resourceId\")));\n-\t\tbanOnResource.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n-\t\tDate validityTo;\n-\t\tif(beanAttr.get(\"validityTo\").equals(\"\\\\0\")) validityTo = null;\n-\t\telse validityTo = new Date(Long.valueOf(beanAttr.get(\"validityTo\")));\n-\t\tbanOnResource.setValidityTo(validityTo);\n-\t\treturn banOnResource;\n-\t}\n-\n-\tprivate static Ban createBanOnFacility(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tBanOnFacility banOnFacility = new BanOnFacility();\n-\t\tbanOnFacility.setId(Integer.valueOf(beanAttr.get(\"id\")));\n-\t\tbanOnFacility.setUserId(Integer.valueOf(beanAttr.get(\"userId\")));\n-\t\tbanOnFacility.setFacilityId(Integer.valueOf(beanAttr.get(\"facilityId\")));\n-\t\tbanOnFacility.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n-\t\tDate validityTo;\n-\t\tif(beanAttr.get(\"validityTo\").equals(\"\\\\0\")) validityTo = null;\n-\t\telse validityTo = new Date(Long.valueOf(beanAttr.get(\"validityTo\")));\n-\t\tbanOnFacility.setValidityTo(validityTo);\n-\t\treturn banOnFacility;\n-\t}\n-\n-\t//--------------------------------------------------------------------------\n-\t//------------------------RICH BEANS CREATORS-------------------------------\n-\n-\tprivate static RichDestination createRichDestination(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tRichDestination richDestination = new RichDestination();\n-\t\trichDestination.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\trichDestination.setDestination(BeansUtils.eraseEscaping(beanAttr.get(\"destination\")));\n-\t\trichDestination.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n-\t\t//Parse and get service\n-\t\tService service;\n-\t\tif(beanAttr.get(\"service\").equals(\"\\\\0\")) service = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> serviceList = beansToMap(beanAttr.get(\"service\"));\n-\t\t\tservice = createService(serviceList.get(0).getRight());\n-\t\t}\n-\t\trichDestination.setService(service);\n-\t\t//Parse and get Facility\n-\t\tFacility facility;\n-\t\tif(beanAttr.get(\"facility\").equals(\"\\\\0\")) facility = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> facilityList = beansToMap(beanAttr.get(\"facility\"));\n-\t\t\tfacility = createFacility(facilityList.get(0).getRight());\n-\t\t}\n-\t\trichDestination.setFacility(facility);\n-\t\treturn richDestination;\n-\t}\n-\n-\tprivate static RichMember createRichMember(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif(beanAttr==null) return null;\n-\t\tMember member = createMember(beanAttr);\n-\t\tUser user;\n-\t\tif(beansToMap(beanAttr.get(\"user\")) == null) user = null;\n-\t\telse user = createUser(beansToMap(beanAttr.get(\"user\")).get(0).getRight());\n-\t\t//Parse and get list of UserExtSources\n-\t\tList<UserExtSource> userExtSources = new ArrayList<UserExtSource>();\n-\t\tif(beanAttr.get(\"userExtSources\").equals(\"\\\\0\")) userExtSources = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> userExtSourcesList = beansToMap(beanAttr.get(\"userExtSources\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: userExtSourcesList) {\n-\t\t\t\tUserExtSource userExtSource = createUserExtSource(p.getRight());\n-\t\t\t\tuserExtSources.add(userExtSource);\n-\t\t\t}\n-\t\t}\n-\t\t//Parse and get list of UserAttributes\n-\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\tif(beanAttr.get(\"userAttributes\").equals(\"\\\\0\")) userAttributes = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> userAttributesList = beansToMap(beanAttr.get(\"userAttributes\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: userAttributesList) {\n-\t\t\t\tAttribute attribute = createAttribute(p.getRight());\n-\t\t\t\tuserAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\t//Parse and get list of MemberAttributes\n-\t\tList<Attribute> memberAttributes = new ArrayList<Attribute>();\n-\t\tif(beanAttr.get(\"memberAttributes\").equals(\"\\\\0\")) memberAttributes = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> memberAttributesList = beansToMap(beanAttr.get(\"memberAttributes\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: memberAttributesList) {\n-\t\t\t\tAttribute attribute = createAttribute(p.getRight());\n-\t\t\t\tmemberAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tRichMember richMember = new RichMember(user, member, userExtSources, userAttributes, memberAttributes);\n-\t\treturn richMember;\n-\t}\n-\n-\tprivate static RichUser createRichUser(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif(beanAttr==null) return null;\n-\t\tUser user = createUser(beanAttr);\n-\t\t//Parse and get list of UserExtSources\n-\t\tList<UserExtSource> userExtSources = new ArrayList<UserExtSource>();\n-\t\tif(beanAttr.get(\"userExtSources\").equals(\"\\\\0\")) userExtSources = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> userExtSourcesList = beansToMap(beanAttr.get(\"userExtSources\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: userExtSourcesList) {\n-\t\t\t\tUserExtSource userExtSource = createUserExtSource(p.getRight());\n-\t\t\t\tuserExtSources.add(userExtSource);\n-\t\t\t}\n-\t\t}\n-\t\t//Parse and get list of UserAttributes\n-\t\tList<Attribute> userAttributes = new ArrayList<Attribute>();\n-\t\tif(beanAttr.get(\"userAttributes\").equals(\"\\\\0\")) userAttributes = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> userAttributesList = beansToMap(beanAttr.get(\"userAttributes\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: userAttributesList) {\n-\t\t\t\tAttribute attribute = createAttribute(p.getRight());\n-\t\t\t\tuserAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tRichUser richUser = new RichUser(user, userExtSources, userAttributes);\n-\t\treturn richUser;\n-\t}\n-\n-\tprivate static RichGroup createRichGroup(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif(beanAttr==null) return null;\n-\t\tGroup group = createGroup(beanAttr);\n-\n-\t\t//Parse and get list of GroupAttributes\n-\t\tList<Attribute> groupAttributes = new ArrayList<Attribute>();\n-\t\tif(beanAttr.get(\"groupAttributes\").equals(\"\\\\0\")) groupAttributes = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> groupAttributesList = beansToMap(beanAttr.get(\"groupAttributes\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: groupAttributesList) {\n-\t\t\t\tAttribute attribute = createAttribute(p.getRight());\n-\t\t\t\tgroupAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tRichGroup richGroup = new RichGroup(group, groupAttributes);\n-\t\treturn richGroup;\n-\t}\n-\n-\tprivate static RichFacility createRichFacility(Map<String, String> beanAttr) throws InternalErrorException {\n-\t\tif(beanAttr==null) return null;\n-\t\tFacility facility = createFacility(beanAttr);\n-\t\t//Parse and get list of Owners\n-\t\tList<Owner> facilityOwners = new ArrayList<Owner>();\n-\t\tif(beanAttr.get(\"facilityOwners\").equals(\"\\\\0\")) facilityOwners = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> facilityOwnersList = beansToMap(beanAttr.get(\"facilityOwners\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: facilityOwnersList) {\n-\t\t\t\tOwner owner = createOwner(p.getRight());\n-\t\t\t\tfacilityOwners.add(owner);\n-\t\t\t}\n-\t\t}\n-\t\tRichFacility richFacility = new RichFacility(facility, facilityOwners);\n-\t\treturn richFacility;\n-\t}\n-\n-\tprivate static RichResource createRichResource(Map<String, String> beanAttr) {\n-\t\tif(beanAttr==null) return null;\n-\t\tRichResource richResource = new RichResource();\n-\t\trichResource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n-\t\trichResource.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n-\t\trichResource.setFacilityId(Integer.valueOf(beanAttr.get(\"facilityId\")).intValue());\n-\t\trichResource.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n-\t\trichResource.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n-\t\t//Parse and get Vo\n-\t\tVo vo;\n-\t\tif(beanAttr.get(\"vo\").equals(\"\\\\0\")) vo = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> voMap = beansToMap(beanAttr.get(\"vo\"));\n-\t\t\tvo = createVo(voMap.get(0).getRight());\n-\t\t}\n-\t\trichResource.setVo(vo);\n-\t\t//Parse and get Facility\n-\t\tFacility facility;\n-\t\tif(beanAttr.get(\"facility\").equals(\"\\\\0\")) facility = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> facilityMap = beansToMap(beanAttr.get(\"facility\"));\n-\t\t\tfacility = createFacility(facilityMap.get(0).getRight());\n-\t\t}\n-\t\trichResource.setFacility(facility);\n-\t\t//Parse and get List of ResourceTags\n-\t\tList<ResourceTag> tags = new ArrayList<ResourceTag>();\n-\t\tif(beanAttr.get(\"resourceTags\").equals(\"\\\\0\")) tags = null;\n-\t\telse {\n-\t\t\tList<Pair<String, Map<String, String>>> tagsList = beansToMap(beanAttr.get(\"resourceTags\"));\n-\t\t\tfor(Pair<String, Map<String, String>> p: tagsList) {\n-\t\t\t\tResourceTag tag = createResourceTag(p.getRight());\n-\t\t\t\ttags.add(tag);\n-\t\t\t}\n-\t\t}\n-\t\trichResource.setResourceTags(tags);\n-\n-\t\treturn richResource;\n-\t}\n-\t\n+                //From the rest get pair attribute of object / value of attribute and put it to the MAP\n+                //Helping variables to find start of attribute name, end of attribute name and the same for attribute value its always quaternion\n+                int startName = -1;\n+                int endName = -1;\n+                int startValue = -1;\n+                int endValue = -1;\n+                int pointyBrackets = 0;\n+                boolean isName = true;\n+\n+                //For the rest of object String searching for attributes names and their values\n+                for (int i = 0; i < s.length(); i++) {\n+                    //found first Letter when no start still exist and searching for name and save it\n+                    if (Character.isLetter(s.charAt(i)) && startName == -1 && isName == true) {\n+                        startName = i;\n+                    } //found for last Letter symbol in beans attribute name\n+                    else if (Character.isLetter(s.charAt(i)) && endName == -1 && isName == true) {\n+                        //If there is still some symbol after this one and if it is not Letter, i save my end name position\n+                        if (i + 1 != s.length()) {\n+                            if (!Character.isLetter(s.charAt(i + 1))) {\n+                                endName = i;\n+                                //when i found all name, i will be searching for value\n+                                isName = false;\n+                            }\n+                        }\n+                    } //If i found name already, trying to find nonescaped < and count it\n+                    else if (s.charAt(i) == '<' && isName == false) {\n+                        //if its first, its my start of value position and i save it\n+                        if (pointyBrackets == 0) {\n+                            if (!BeansUtils.isEscaped(s, i - 1)) {\n+                                startValue = i;\n+                            }\n+                        }\n+                        //if this bracket is nonescaped so count it\n+                        if (!BeansUtils.isEscaped(s, i - 1)) {\n+                            pointyBrackets++;\n+                        }\n+                    } //If i found name already, there are some open angle breackets and is nonescaped so count this one off\n+                    else if (pointyBrackets != 0 && s.charAt(i) == '>' && isName == false) {\n+                        //if this bracket is nonescaped so count it off\n+                        if (!BeansUtils.isEscaped(s, i - 1)) {\n+                            pointyBrackets--;\n+                        }\n+                        //if there left no brackets after counting off, so its my end bracket and i save it\n+                        if (pointyBrackets == 0) {\n+                            if (!BeansUtils.isEscaped(s, i - 1)) {\n+                                endValue = i;\n+                                isName = true;\n+                            }\n+                        }\n+                    }\n+                    //If i have already all quaternion of position i will put this attribute to the map and set helping variables to start\n+                    if (startName != -1 && endName != -1 && startValue != -1 && endValue != -1) {\n+                        map.put(s.substring(startName, endName + 1), s.substring(startValue + 1, endValue));\n+                        startName = -1;\n+                        endName = -1;\n+                        startValue = -1;\n+                        endValue = -1;\n+                    }\n+\n+                }\n+            }\n+            //Put name of object and map of attribute and values to the list of all objects\n+            Pair<String, Map<String, String>> pair = new Pair<String, Map<String, String>>();\n+            pair.put(nameOfBean, map);\n+            listOfBeans.add(pair);\n+        }\n+        return listOfBeans;\n+    }\n+\n+    /**\n+     * This method get log message and parse it to list of beans in Strings For\n+     * example item in array is everytime something like -> Bean:[*] where * is\n+     * anything\n+     * <p>\n+     * This method using method \"CutStartOfLog\" for searching beans in log\n+     *\n+     * @param log log message\n+     * @return list of object in String\n+     */\n+    private static List<String> parseOfLog(String log) {\n+        List<String> results = new ArrayList<String>();\n+        //Load helping variables for counting brackets\n+        int squareBrackets = 0;\n+        int pointyBrackets = 0;\n+        boolean enableCountSquareBrackets = true;\n+\n+        log = CutStartOfLog(log);\n+        while (log != null) {\n+            //TODO this regular expresion expect, that never get char <,>,[,] or \\ like first char in string log!!!\n+            Matcher pointyAndSquareBracketMatcher = pointyAndSquareBracket.matcher(log);\n+            int endOfObject = 0;\n+            int start = 0;\n+            while (pointyAndSquareBracketMatcher.find(start)) {\n+                if (log.charAt(pointyAndSquareBracketMatcher.end() - 1) == '<') {\n+                    enableCountSquareBrackets = false;\n+                    pointyBrackets++;\n+                } else if (log.charAt(pointyAndSquareBracketMatcher.end() - 1) == '>') {\n+                    pointyBrackets--;\n+                    //If it means that this is our searching end anglebracket, so enable counting square brackets again\n+                    if (pointyBrackets == 0) {\n+                        enableCountSquareBrackets = true;\n+                    }\n+                } else if (enableCountSquareBrackets && log.charAt(pointyAndSquareBracketMatcher.end() - 1) == '[') {\n+                    squareBrackets++;\n+                } else if (enableCountSquareBrackets && log.charAt(pointyAndSquareBracketMatcher.end() - 1) == ']') {\n+                    squareBrackets--;\n+                    if (squareBrackets == 0) {\n+                        //This is end position of searching object\n+                        endOfObject = pointyAndSquareBracketMatcher.end();\n+                        break;\n+                    }\n+                }\n+                start = pointyAndSquareBracketMatcher.end() - 1;\n+            }\n+            if (endOfObject != 0) {\n+                results.add(log.substring(0, endOfObject));\n+                log = log.substring(endOfObject);\n+            } else {\n+                return results;\n+            }\n+            log = CutStartOfLog(log);\n+        }\n+        return results;\n+    }\n+\n+    /**\n+     * Get log message and find first real object thx '*:[' where * is name of\n+     * object cut it on the start of name example 'blabluble ,l;[0Bean:[*'\n+     * return 'Bean:[*'\n+     * <p>\n+     * Warning: If log content bad definition of bean, have *:[ in text without\n+     * bean inside, parsing failed\n+     *\n+     * @param log log message\n+     * @return Message cutted to Start of first real bean in log\n+     */\n+    private static String CutStartOfLog(String log) {\n+\n+        if (log == null) {\n+            return null;\n+        }\n+        Matcher perunBeanStartMatcher = perunBeanStartPattern.matcher(log);\n+        if (perunBeanStartMatcher.find()) {\n+            log = log.substring(perunBeanStartMatcher.start());\n+        } else {\n+            return null;\n+        }\n+        return log;\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    //--------------------------BEANS CREATORS---------------------------------\n+    private static User createUser(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        User user = new User();\n+        user.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        user.setTitleBefore(BeansUtils.eraseEscaping(beanAttr.get(\"titleBefore\")));\n+        user.setTitleAfter(BeansUtils.eraseEscaping(beanAttr.get(\"titleAfter\")));\n+        user.setFirstName(BeansUtils.eraseEscaping(beanAttr.get(\"firstName\")));\n+        user.setLastName(BeansUtils.eraseEscaping(beanAttr.get(\"lastName\")));\n+        user.setMiddleName(BeansUtils.eraseEscaping(beanAttr.get(\"middleName\")));\n+        user.setServiceUser(Boolean.valueOf(beanAttr.get(\"serviceAccount\")).booleanValue());\n+        user.setSponsoredUser(Boolean.valueOf(beanAttr.get(\"sponsoredAccount\")).booleanValue());\n+        return user;\n+    }\n+\n+    private static Attribute createAttribute(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Attribute attribute = new Attribute();\n+        attribute.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        attribute.setFriendlyName(BeansUtils.eraseEscaping(beanAttr.get(\"friendlyName\")));\n+        attribute.setNamespace(BeansUtils.eraseEscaping(beanAttr.get(\"namespace\")));\n+        attribute.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n+        attribute.setValue(BeansUtils.stringToAttributeValue(BeansUtils.eraseEscaping(beanAttr.get(\"value\")), attribute.getType()));\n+        return attribute;\n+    }\n+\n+    private static AttributeDefinition createAttributeDefinition(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        AttributeDefinition attributeDefinition = new AttributeDefinition();\n+        attributeDefinition.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        attributeDefinition.setFriendlyName(BeansUtils.eraseEscaping(beanAttr.get(\"friendlyName\")));\n+        attributeDefinition.setNamespace(BeansUtils.eraseEscaping(beanAttr.get(\"namespace\")));\n+        attributeDefinition.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n+        return attributeDefinition;\n+    }\n+\n+    private static Candidate createCandidate(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Candidate candidate = new Candidate();\n+        candidate.setAttributes(BeansUtils.deserializeStringToMap(beanAttr.get(\"attributes\")));\n+        //Parse and get ExtSource\n+        UserExtSource userExtSource;\n+        if (beanAttr.get(\"userExtSource\").equals(\"\\\\0\")) {\n+            userExtSource = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> userExtSourceMap = beansToMap(beanAttr.get(\"userExtSource\"));\n+            userExtSource = createUserExtSource(userExtSourceMap.get(0).getRight());\n+        }\n+        candidate.setUserExtSource(userExtSource);\n+        //Parse and get list of UserExtSources\n+        List<UserExtSource> additionalUserExtSources = new ArrayList<UserExtSource>();\n+        if (beanAttr.get(\"additionalUserExtSources\").equals(\"\\\\0\")) {\n+            additionalUserExtSources = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> userExtSourcesList = beansToMap(beanAttr.get(\"additionalUserExtSources\"));\n+            for (Pair<String, Map<String, String>> p : userExtSourcesList) {\n+                userExtSource = createUserExtSource(p.getRight());\n+                additionalUserExtSources.add(userExtSource);\n+            }\n+        }\n+        candidate.setAdditionalUserExtSources(additionalUserExtSources);\n+        return candidate;\n+    }\n+\n+    private static Destination createDestination(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Destination destination = new Destination();\n+        destination.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        destination.setDestination(BeansUtils.eraseEscaping(beanAttr.get(\"destination\")));\n+        destination.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n+        destination.setPropagationType(BeansUtils.eraseEscaping(beanAttr.get(\"propagationtype\")));\n+        return destination;\n+    }\n+\n+    private static ExtSource createExtSource(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        ExtSource extSource = new ExtSource();\n+        extSource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        extSource.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        extSource.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n+        return extSource;\n+    }\n+\n+    private static Facility createFacility(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Facility facility = new Facility();\n+        facility.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        facility.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        facility.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n+        return facility;\n+    }\n+\n+    private static Group createGroup(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Group group = new Group();\n+        if (beanAttr.get(\"parentGroupId\").equals(\"\\\\0\")) {\n+            group.setParentGroupId(null);\n+        } else {\n+            group.setParentGroupId(Integer.valueOf(beanAttr.get(\"parentGroupId\")));\n+        }\n+        group.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        group.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        group.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n+        group.setVoId(Integer.valueOf(beanAttr.get(\"voId\")));\n+        return group;\n+    }\n+\n+    private static Host createHost(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Host host = new Host();\n+        host.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        host.setHostname(BeansUtils.eraseEscaping(beanAttr.get(\"hostname\")));\n+        return host;\n+    }\n+\n+    private static Member createMember(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Member member = new Member();\n+        member.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        member.setUserId(Integer.valueOf(beanAttr.get(\"userId\")).intValue());\n+        member.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n+        member.setStatus(BeansUtils.eraseEscaping(beanAttr.get(\"status\")));\n+        member.setMembershipType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n+        member.setSourceGroupId(beanAttr.get(\"sourceGroupId\").equals(\"\\\\0\") ? null : Integer.valueOf(beanAttr.get(\"sourceGroupId\")));\n+        return member;\n+    }\n+\n+    private static Owner createOwner(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Owner owner = new Owner();\n+        owner.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        owner.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        owner.setContact(BeansUtils.eraseEscaping(beanAttr.get(\"contact\")));\n+        owner.setTypeByString(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n+        return owner;\n+    }\n+\n+    private static Resource createResource(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Resource resource = new Resource();\n+        resource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        resource.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n+        resource.setFacilityId(Integer.valueOf(beanAttr.get(\"facilityId\")).intValue());\n+        resource.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        resource.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n+        return resource;\n+    }\n+\n+    private static Service createService(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Service service = new Service();\n+        service.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        service.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        return service;\n+    }\n+\n+    private static UserExtSource createUserExtSource(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        UserExtSource userExtSource = new UserExtSource();\n+        userExtSource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        userExtSource.setLoa(Integer.valueOf(beanAttr.get(\"loa\")).intValue());\n+        userExtSource.setLogin(BeansUtils.eraseEscaping(beanAttr.get(\"login\")));\n+        //Parse and get ExtSource\n+        ExtSource extSource;\n+        if (beanAttr.get(\"source\").equals(\"\\\\0\")) {\n+            extSource = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> extSourceList = beansToMap(beanAttr.get(\"source\"));\n+            extSource = createExtSource(extSourceList.get(0).getRight());\n+        }\n+        userExtSource.setExtSource(extSource);\n+        return userExtSource;\n+    }\n+\n+    private static Vo createVo(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Vo vo = new Vo();\n+        vo.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        vo.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        vo.setShortName(BeansUtils.eraseEscaping(beanAttr.get(\"shortName\")));\n+        return vo;\n+    }\n+\n+    private static Authorship createAuthorship(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Authorship authorship = new Authorship();\n+        authorship.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        authorship.setPublicationId(Integer.valueOf(beanAttr.get(\"publicationId\")).intValue());\n+        authorship.setUserId(Integer.valueOf(beanAttr.get(\"userId\")).intValue());\n+        authorship.setCreatedBy(BeansUtils.eraseEscaping(beanAttr.get(\"createdBy\")));\n+        authorship.setCreatedByUid((beanAttr.get(\"createdByUid\").equals(\"\\\\0\")) ? null : Integer.valueOf(beanAttr.get(\"createdByUid\")).intValue());\n+        if (BeansUtils.eraseEscaping(beanAttr.get(\"createdDate\")) == null) {\n+            authorship.setCreatedDate(null);\n+        } else {\n+            Date date;\n+            try {\n+                date = BeansUtils.getDateFormatter().parse(BeansUtils.eraseEscaping(beanAttr.get(\"createdDate\")));\n+            } catch (ParseException ex) {\n+                throw new InternalErrorException(\"Error when date was parsing from String to Date.\", ex);\n+            }\n+            authorship.setCreatedDate(date);\n+        }\n+        return authorship;\n+    }\n+\n+    private static ResourceTag createResourceTag(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        ResourceTag resourceTag = new ResourceTag();\n+        resourceTag.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        resourceTag.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n+        resourceTag.setTagName(BeansUtils.eraseEscaping(beanAttr.get(\"tagName\")));\n+        return resourceTag;\n+    }\n+\n+    private static ExecService createExecService(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        ExecService execService = new ExecService();\n+        execService.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        execService.setDefaultDelay(Integer.valueOf(beanAttr.get(\"defaultDelay\")).intValue());\n+        execService.setDefaultRecurrence(Integer.valueOf(beanAttr.get(\"defaultRecurrence\")).intValue());\n+        execService.setEnabled(Boolean.valueOf(beanAttr.get(\"enabled\")).booleanValue());\n+        if (beanAttr.get(\"script\").equals(\"\\\\0\")) {\n+            execService.setScript(null);\n+        } else {\n+            execService.setScript(BeansUtils.eraseEscaping(beanAttr.get(\"script\")));\n+        }\n+        Service service;\n+        if (beanAttr.get(\"service\").equals(\"\\\\0\")) {\n+            service = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> serviceList = beansToMap(beanAttr.get(\"service\"));\n+            service = createService(serviceList.get(0).getRight());\n+        }\n+        execService.setService(service);\n+        ExecService.ExecServiceType exType;\n+        if (beanAttr.get(\"type\").equals(\"\\\\0\")) {\n+            exType = null;\n+        } else {\n+            String type = beanAttr.get(\"type\");\n+            if (type.equals(\"GENERATE\")) {\n+                exType = ExecServiceType.GENERATE;\n+            } else if (type.equals(\"SEND\")) {\n+                exType = ExecServiceType.SEND;\n+            } else {\n+                exType = null;\n+            }\n+        }\n+        execService.setExecServiceType(exType);\n+        return execService;\n+    }\n+\n+    private static SecurityTeam createSecurityTeam(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        SecurityTeam securityTeam = new SecurityTeam();\n+        securityTeam.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        securityTeam.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        securityTeam.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n+        return securityTeam;\n+    }\n+\n+    private static TaskResult createTaskResult(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        TaskResult taskResult = new TaskResult();\n+        taskResult.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        taskResult.setTaskId(Integer.valueOf(beanAttr.get(\"taskId\")).intValue());\n+        taskResult.setDestinationId(Integer.valueOf(beanAttr.get(\"destinationId\")).intValue());\n+        String errorMessage;\n+        if (beanAttr.get(\"errorMessage\").equals(\"\\\\0\")) {\n+            errorMessage = null;\n+        } else {\n+            errorMessage = BeansUtils.eraseEscaping(beanAttr.get(\"errorMessage\"));\n+        }\n+        taskResult.setErrorMessage(errorMessage);\n+        String standardMessage;\n+        if (beanAttr.get(\"standardMessage\").equals(\"\\\\0\")) {\n+            standardMessage = null;\n+        } else {\n+            standardMessage = BeansUtils.eraseEscaping(beanAttr.get(\"standardMessage\"));\n+        }\n+        taskResult.setStandardMessage(standardMessage);\n+        taskResult.setReturnCode(Integer.valueOf(beanAttr.get(\"returnCode\")).intValue());\n+        try {\n+            taskResult.setTimestamp(BeansUtils.getDateFormatter().parse(BeansUtils.eraseEscaping(beanAttr.get(\"timestamp\"))));\n+        } catch (ParseException e) {\n+            throw new InternalErrorException(\"Error when date was parsing from String to Date.\", e);\n+        }\n+        String status = BeansUtils.eraseEscaping(beanAttr.get(\"status\"));\n+        TaskResultStatus st;\n+        if (status.equals(\"\\\\0\")) {\n+            st = null;\n+        } else {\n+            if (status.equals(\"DENIED\")) {\n+                st = TaskResultStatus.DENIED;\n+            } else if (status.equals(\"DONE\")) {\n+                st = TaskResultStatus.DONE;\n+            } else if (status.equals(\"ERROR\")) {\n+                st = TaskResultStatus.ERROR;\n+            } else if (status.equals(\"FATAL_ERROR\")) {\n+                st = TaskResultStatus.FATAL_ERROR;\n+            } else if (status.equals(\"WARN\")) {\n+                st = TaskResultStatus.WARN;\n+            } else {\n+                st = null;\n+            }\n+        }\n+        taskResult.setStatus(st);\n+        Service service;\n+        if (beanAttr.get(\"service\").equals(\"\\\\0\")) {\n+            service = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> serviceList = beansToMap(beanAttr.get(\"service\"));\n+            if (serviceList.size() > 0) {\n+                service = createService(serviceList.get(0).getRight());\n+            } else {\n+                service = null;\n+            }\n+        }\n+        taskResult.setService(service);\n+\n+        return taskResult;\n+\n+    }\n+\n+    private static Ban createBanOnResource(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        BanOnResource banOnResource = new BanOnResource();\n+        banOnResource.setId(Integer.valueOf(beanAttr.get(\"id\")));\n+        banOnResource.setMemberId(Integer.valueOf(beanAttr.get(\"memberId\")));\n+        banOnResource.setResourceId(Integer.valueOf(beanAttr.get(\"resourceId\")));\n+        banOnResource.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n+        Date validityTo;\n+        if (beanAttr.get(\"validityTo\").equals(\"\\\\0\")) {\n+            validityTo = null;\n+        } else {\n+            validityTo = new Date(Long.valueOf(beanAttr.get(\"validityTo\")));\n+        }\n+        banOnResource.setValidityTo(validityTo);\n+        return banOnResource;\n+    }\n+\n+    private static Ban createBanOnFacility(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        BanOnFacility banOnFacility = new BanOnFacility();\n+        banOnFacility.setId(Integer.valueOf(beanAttr.get(\"id\")));\n+        banOnFacility.setUserId(Integer.valueOf(beanAttr.get(\"userId\")));\n+        banOnFacility.setFacilityId(Integer.valueOf(beanAttr.get(\"facilityId\")));\n+        banOnFacility.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n+        Date validityTo;\n+        if (beanAttr.get(\"validityTo\").equals(\"\\\\0\")) {\n+            validityTo = null;\n+        } else {\n+            validityTo = new Date(Long.valueOf(beanAttr.get(\"validityTo\")));\n+        }\n+        banOnFacility.setValidityTo(validityTo);\n+        return banOnFacility;\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    //------------------------RICH BEANS CREATORS-------------------------------\n+\n+    private static RichDestination createRichDestination(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        RichDestination richDestination = new RichDestination();\n+        richDestination.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        richDestination.setDestination(BeansUtils.eraseEscaping(beanAttr.get(\"destination\")));\n+        richDestination.setType(BeansUtils.eraseEscaping(beanAttr.get(\"type\")));\n+        //Parse and get service\n+        Service service;\n+        if (beanAttr.get(\"service\").equals(\"\\\\0\")) {\n+            service = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> serviceList = beansToMap(beanAttr.get(\"service\"));\n+            service = createService(serviceList.get(0).getRight());\n+        }\n+        richDestination.setService(service);\n+        //Parse and get Facility\n+        Facility facility;\n+        if (beanAttr.get(\"facility\").equals(\"\\\\0\")) {\n+            facility = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> facilityList = beansToMap(beanAttr.get(\"facility\"));\n+            facility = createFacility(facilityList.get(0).getRight());\n+        }\n+        richDestination.setFacility(facility);\n+        return richDestination;\n+    }\n+\n+    private static RichMember createRichMember(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Member member = createMember(beanAttr);\n+        User user;\n+        if (beansToMap(beanAttr.get(\"user\")) == null) {\n+            user = null;\n+        } else {\n+            user = createUser(beansToMap(beanAttr.get(\"user\")).get(0).getRight());\n+        }\n+        //Parse and get list of UserExtSources\n+        List<UserExtSource> userExtSources = new ArrayList<UserExtSource>();\n+        if (beanAttr.get(\"userExtSources\").equals(\"\\\\0\")) {\n+            userExtSources = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> userExtSourcesList = beansToMap(beanAttr.get(\"userExtSources\"));\n+            for (Pair<String, Map<String, String>> p : userExtSourcesList) {\n+                UserExtSource userExtSource = createUserExtSource(p.getRight());\n+                userExtSources.add(userExtSource);\n+            }\n+        }\n+        //Parse and get list of UserAttributes\n+        List<Attribute> userAttributes = new ArrayList<Attribute>();\n+        if (beanAttr.get(\"userAttributes\").equals(\"\\\\0\")) {\n+            userAttributes = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> userAttributesList = beansToMap(beanAttr.get(\"userAttributes\"));\n+            for (Pair<String, Map<String, String>> p : userAttributesList) {\n+                Attribute attribute = createAttribute(p.getRight());\n+                userAttributes.add(attribute);\n+            }\n+        }\n+        //Parse and get list of MemberAttributes\n+        List<Attribute> memberAttributes = new ArrayList<Attribute>();\n+        if (beanAttr.get(\"memberAttributes\").equals(\"\\\\0\")) {\n+            memberAttributes = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> memberAttributesList = beansToMap(beanAttr.get(\"memberAttributes\"));\n+            for (Pair<String, Map<String, String>> p : memberAttributesList) {\n+                Attribute attribute = createAttribute(p.getRight());\n+                memberAttributes.add(attribute);\n+            }\n+        }\n+        RichMember richMember = new RichMember(user, member, userExtSources, userAttributes, memberAttributes);\n+        return richMember;\n+    }\n+\n+    private static RichUser createRichUser(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        User user = createUser(beanAttr);\n+        //Parse and get list of UserExtSources\n+        List<UserExtSource> userExtSources = new ArrayList<UserExtSource>();\n+        if (beanAttr.get(\"userExtSources\").equals(\"\\\\0\")) {\n+            userExtSources = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> userExtSourcesList = beansToMap(beanAttr.get(\"userExtSources\"));\n+            for (Pair<String, Map<String, String>> p : userExtSourcesList) {\n+                UserExtSource userExtSource = createUserExtSource(p.getRight());\n+                userExtSources.add(userExtSource);\n+            }\n+        }\n+        //Parse and get list of UserAttributes\n+        List<Attribute> userAttributes = new ArrayList<Attribute>();\n+        if (beanAttr.get(\"userAttributes\").equals(\"\\\\0\")) {\n+            userAttributes = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> userAttributesList = beansToMap(beanAttr.get(\"userAttributes\"));\n+            for (Pair<String, Map<String, String>> p : userAttributesList) {\n+                Attribute attribute = createAttribute(p.getRight());\n+                userAttributes.add(attribute);\n+            }\n+        }\n+        RichUser richUser = new RichUser(user, userExtSources, userAttributes);\n+        return richUser;\n+    }\n+\n+    private static RichGroup createRichGroup(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Group group = createGroup(beanAttr);\n+\n+        //Parse and get list of GroupAttributes\n+        List<Attribute> groupAttributes = new ArrayList<Attribute>();\n+        if (beanAttr.get(\"groupAttributes\").equals(\"\\\\0\")) {\n+            groupAttributes = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> groupAttributesList = beansToMap(beanAttr.get(\"groupAttributes\"));\n+            for (Pair<String, Map<String, String>> p : groupAttributesList) {\n+                Attribute attribute = createAttribute(p.getRight());\n+                groupAttributes.add(attribute);\n+            }\n+        }\n+        RichGroup richGroup = new RichGroup(group, groupAttributes);\n+        return richGroup;\n+    }\n+\n+    private static RichFacility createRichFacility(Map<String, String> beanAttr) throws InternalErrorException {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        Facility facility = createFacility(beanAttr);\n+        //Parse and get list of Owners\n+        List<Owner> facilityOwners = new ArrayList<Owner>();\n+        if (beanAttr.get(\"facilityOwners\").equals(\"\\\\0\")) {\n+            facilityOwners = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> facilityOwnersList = beansToMap(beanAttr.get(\"facilityOwners\"));\n+            for (Pair<String, Map<String, String>> p : facilityOwnersList) {\n+                Owner owner = createOwner(p.getRight());\n+                facilityOwners.add(owner);\n+            }\n+        }\n+        RichFacility richFacility = new RichFacility(facility, facilityOwners);\n+        return richFacility;\n+    }\n+\n+    private static RichResource createRichResource(Map<String, String> beanAttr) {\n+        if (beanAttr == null) {\n+            return null;\n+        }\n+        RichResource richResource = new RichResource();\n+        richResource.setId(Integer.valueOf(beanAttr.get(\"id\")).intValue());\n+        richResource.setVoId(Integer.valueOf(beanAttr.get(\"voId\")).intValue());\n+        richResource.setFacilityId(Integer.valueOf(beanAttr.get(\"facilityId\")).intValue());\n+        richResource.setName(BeansUtils.eraseEscaping(beanAttr.get(\"name\")));\n+        richResource.setDescription(BeansUtils.eraseEscaping(beanAttr.get(\"description\")));\n+        //Parse and get Vo\n+        Vo vo;\n+        if (beanAttr.get(\"vo\").equals(\"\\\\0\")) {\n+            vo = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> voMap = beansToMap(beanAttr.get(\"vo\"));\n+            vo = createVo(voMap.get(0).getRight());\n+        }\n+        richResource.setVo(vo);\n+        //Parse and get Facility\n+        Facility facility;\n+        if (beanAttr.get(\"facility\").equals(\"\\\\0\")) {\n+            facility = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> facilityMap = beansToMap(beanAttr.get(\"facility\"));\n+            facility = createFacility(facilityMap.get(0).getRight());\n+        }\n+        richResource.setFacility(facility);\n+        //Parse and get List of ResourceTags\n+        List<ResourceTag> tags = new ArrayList<ResourceTag>();\n+        if (beanAttr.get(\"resourceTags\").equals(\"\\\\0\")) {\n+            tags = null;\n+        } else {\n+            List<Pair<String, Map<String, String>>> tagsList = beansToMap(beanAttr.get(\"resourceTags\"));\n+            for (Pair<String, Map<String, String>> p : tagsList) {\n+                ResourceTag tag = createResourceTag(p.getRight());\n+                tags.add(tag);\n+            }\n+        }\n+        richResource.setResourceTags(tags);\n+\n+        return richResource;\n+    }\n+\n }\n",
            "diff_size": 878
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/508/AuditParser.java\nindex b7b2f29acf5..fc323936119 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/508/AuditParser.java\n@@ -767,5 +767,4 @@ public class AuditParser {\n \n \t\treturn richResource;\n \t}\n-\t\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/508/AuditParser.java\nindex b7b2f29acf5..31bbabc6c62 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/508/AuditParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/508/AuditParser.java\n@@ -767,5 +767,4 @@ public class AuditParser {\n \n \t\treturn richResource;\n \t}\n-\t\n-}\n+ }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}