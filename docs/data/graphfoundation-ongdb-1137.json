{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1137",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "85",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "285",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1137/HazelcastClusterTopology.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1137/HazelcastClusterTopology.java\nindex f01f247cb9a..164c0d35c13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1137/HazelcastClusterTopology.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1137/HazelcastClusterTopology.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.discovery;\n \n import com.hazelcast.config.MemberAttributeConfig;\n@@ -58,286 +59,283 @@ import static org.neo4j.helpers.collection.Iterables.asSet;\n \n public final class HazelcastClusterTopology\n {\n-    // per server attributes\n-    private static final String DISCOVERY_SERVER = \"discovery_server\"; // not currently used\n-    static final String MEMBER_UUID = \"member_uuid\";\n-    static final String TRANSACTION_SERVER = \"transaction_server\";\n-    static final String RAFT_SERVER = \"raft_server\";\n-    static final String CLIENT_CONNECTOR_ADDRESSES = \"client_connector_addresses\";\n-    static final String MEMBER_DB_NAME = \"member_database_name\";\n-\n-    private static final String REFUSE_TO_BE_LEADER_KEY = \"refuseToBeLeader\";\n-\n-    // cluster-wide attributes\n-    static final String CLUSTER_UUID_DB_NAME_MAP = \"cluster_uuid\";\n-    static final String SERVER_GROUPS_MULTIMAP = \"groups\";\n-    static final String READ_REPLICA_TRANSACTION_SERVER_ADDRESS_MAP = \"read-replica-transaction-servers\";\n-    static final String READ_REPLICA_BOLT_ADDRESS_MAP = \"read_replicas\"; // hz client uuid string -> boltAddress string\n-    static final String READ_REPLICA_MEMBER_ID_MAP = \"read-replica-member-ids\";\n-    static final String READ_REPLICAS_DB_NAME_MAP = \"read_replicas_database_names\";\n-    static final String DB_NAME_LEADER_TERM_PREFIX = \"leader_term_for_database_name_\";\n-\n-    private HazelcastClusterTopology()\n+  // per server attributes\n+  private static final String DISCOVERY_SERVER = \"discovery_server\"; // not currently used\n+  static final String MEMBER_UUID = \"member_uuid\";\n+  static final String TRANSACTION_SERVER = \"transaction_server\";\n+  static final String RAFT_SERVER = \"raft_server\";\n+  static final String CLIENT_CONNECTOR_ADDRESSES = \"client_connector_addresses\";\n+  static final String MEMBER_DB_NAME = \"member_database_name\";\n+\n+  private static final String REFUSE_TO_BE_LEADER_KEY = \"refuseToBeLeader\";\n+\n+  // cluster-wide attributes\n+  static final String CLUSTER_UUID_DB_NAME_MAP = \"cluster_uuid\";\n+  static final String SERVER_GROUPS_MULTIMAP = \"groups\";\n+  static final String READ_REPLICA_TRANSACTION_SERVER_ADDRESS_MAP = \"read-replica-transaction-servers\";\n+  static final String READ_REPLICA_BOLT_ADDRESS_MAP = \"read_replicas\"; // hz client uuid string -> boltAddress string\n+  static final String READ_REPLICA_MEMBER_ID_MAP = \"read-replica-member-ids\";\n+  static final String READ_REPLICAS_DB_NAME_MAP = \"read_replicas_database_names\";\n+  static final String DB_NAME_LEADER_TERM_PREFIX = \"leader_term_for_database_name_\";\n+\n+  private HazelcastClusterTopology()\n+  {\n+  }\n+\n+  static ReadReplicaTopology getReadReplicaTopology(HazelcastInstance hazelcastInstance, Log log)\n+  {\n+    Map<MemberId, ReadReplicaInfo> readReplicas = emptyMap();\n+\n+    if (hazelcastInstance != null)\n     {\n-    }\n-\n-    static ReadReplicaTopology getReadReplicaTopology( HazelcastInstance hazelcastInstance, Log log )\n+      readReplicas = readReplicas(hazelcastInstance);\n+    } else\n     {\n-        Map<MemberId,ReadReplicaInfo> readReplicas = emptyMap();\n-\n-        if ( hazelcastInstance != null )\n-        {\n-            readReplicas = readReplicas( hazelcastInstance );\n-        }\n-        else\n-        {\n-            log.info( \"Cannot currently bind to distributed discovery service.\" );\n-        }\n-\n-        return new ReadReplicaTopology( readReplicas );\n+      log.info(\"Cannot currently bind to distributed discovery service.\");\n     }\n \n-    static CoreTopology getCoreTopology( HazelcastInstance hazelcastInstance, Config config, Log log )\n-    {\n-        Map<MemberId,CoreServerInfo> coreMembers = emptyMap();\n-        boolean canBeBootstrapped = false;\n-        ClusterId clusterId = null;\n-        String dbName = config.get( CausalClusteringSettings.database );\n-\n-        if ( hazelcastInstance != null )\n-        {\n-            Set<Member> hzMembers = hazelcastInstance.getCluster().getMembers();\n-            canBeBootstrapped = canBeBootstrapped( hazelcastInstance, config );\n+    return new ReadReplicaTopology(readReplicas);\n+  }\n \n-            coreMembers = toCoreMemberMap( hzMembers, log, hazelcastInstance );\n+  static CoreTopology getCoreTopology(HazelcastInstance hazelcastInstance, Config config, Log log)\n+  {\n+    Map<MemberId, CoreServerInfo> coreMembers = emptyMap();\n+    boolean canBeBootstrapped = false;\n+    ClusterId clusterId = null;\n+    String dbName = config.get(CausalClusteringSettings.database);\n \n-            clusterId = getClusterId( hazelcastInstance, dbName );\n-        }\n-        else\n-        {\n-            log.info( \"Cannot currently bind to distributed discovery service.\" );\n-        }\n-\n-        return new CoreTopology( clusterId, canBeBootstrapped, coreMembers );\n-    }\n-\n-    public static Map<MemberId,AdvertisedSocketAddress> extractCatchupAddressesMap( CoreTopology coreTopology,\n-            ReadReplicaTopology rrTopology )\n+    if (hazelcastInstance != null)\n     {\n-        Map<MemberId,AdvertisedSocketAddress> catchupAddressMap = new HashMap<>();\n-\n-        for ( Map.Entry<MemberId,CoreServerInfo> entry : coreTopology.members().entrySet() )\n-        {\n-            catchupAddressMap.put( entry.getKey(), entry.getValue().getCatchupServer() );\n-        }\n-\n-        for ( Map.Entry<MemberId,ReadReplicaInfo> entry : rrTopology.members().entrySet() )\n-        {\n-            catchupAddressMap.put( entry.getKey(), entry.getValue().getCatchupServer() );\n-\n-        }\n+      Set<Member> hzMembers = hazelcastInstance.getCluster().getMembers();\n+      canBeBootstrapped = canBeBootstrapped(hazelcastInstance, config);\n \n-        return catchupAddressMap;\n-    }\n+      coreMembers = toCoreMemberMap(hzMembers, log, hazelcastInstance);\n \n-    private static ClusterId getClusterId( HazelcastInstance hazelcastInstance, String dbName )\n+      clusterId = getClusterId(hazelcastInstance, dbName);\n+    } else\n     {\n-        IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n-        UUID uuid = uuidPerDbCluster.get( dbName );\n-        return uuid != null ? new ClusterId( uuid ) : null;\n+      log.info(\"Cannot currently bind to distributed discovery service.\");\n     }\n \n-    private static Set<String> getDBNames( HazelcastInstance hazelcastInstance )\n+    return new CoreTopology(clusterId, canBeBootstrapped, coreMembers);\n+  }\n+\n+  public static Map<MemberId, AdvertisedSocketAddress> extractCatchupAddressesMap(CoreTopology coreTopology,\n+                                                                                  ReadReplicaTopology rrTopology)\n+  {\n+    Map<MemberId, AdvertisedSocketAddress> catchupAddressMap = new HashMap<>();\n+\n+    for (Map.Entry<MemberId, CoreServerInfo> entry : coreTopology.members().entrySet())\n     {\n-        IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n-        return uuidPerDbCluster.keySet();\n+      catchupAddressMap.put(entry.getKey(), entry.getValue().getCatchupServer());\n     }\n \n-    public static Map<MemberId,RoleInfo> getCoreRoles( HazelcastInstance hazelcastInstance, Set<MemberId> coreMembers )\n+    for (Map.Entry<MemberId, ReadReplicaInfo> entry : rrTopology.members().entrySet())\n     {\n+      catchupAddressMap.put(entry.getKey(), entry.getValue().getCatchupServer());\n \n-        Set<String> dbNames = getDBNames( hazelcastInstance );\n-        Set<MemberId> allLeaders = dbNames.stream()\n-                .map( n -> getLeaderForDBName( hazelcastInstance, n ) )\n-                .filter( Optional::isPresent )\n-                .map( l -> l.get().memberId() )\n-                .collect( Collectors.toSet() );\n-\n-        Function<MemberId,RoleInfo> roleMapper = m -> allLeaders.contains( m ) ? RoleInfo.LEADER : RoleInfo.FOLLOWER;\n-\n-        return coreMembers.stream().collect( Collectors.toMap( Function.identity(), roleMapper ) );\n     }\n \n-    static boolean casClusterId( HazelcastInstance hazelcastInstance, ClusterId clusterId, String dbName )\n+    return catchupAddressMap;\n+  }\n+\n+  private static ClusterId getClusterId(HazelcastInstance hazelcastInstance, String dbName)\n+  {\n+    IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap(CLUSTER_UUID_DB_NAME_MAP);\n+    UUID uuid = uuidPerDbCluster.get(dbName);\n+    return uuid != null ? new ClusterId(uuid) : null;\n+  }\n+\n+  private static Set<String> getDBNames(HazelcastInstance hazelcastInstance)\n+  {\n+    IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap(CLUSTER_UUID_DB_NAME_MAP);\n+    return uuidPerDbCluster.keySet();\n+  }\n+\n+  public static Map<MemberId, RoleInfo> getCoreRoles(HazelcastInstance hazelcastInstance, Set<MemberId> coreMembers)\n+  {\n+\n+    Set<String> dbNames = getDBNames(hazelcastInstance);\n+    Set<MemberId> allLeaders = dbNames.stream()\n+        .map(n -> getLeaderForDBName(hazelcastInstance, n))\n+        .filter(Optional::isPresent)\n+        .map(l -> l.get().memberId())\n+        .collect(Collectors.toSet());\n+\n+    Function<MemberId, RoleInfo> roleMapper = m -> allLeaders.contains(m) ? RoleInfo.LEADER : RoleInfo.FOLLOWER;\n+\n+    return coreMembers.stream().collect(Collectors.toMap(Function.identity(), roleMapper));\n+  }\n+\n+  static boolean casClusterId(HazelcastInstance hazelcastInstance, ClusterId clusterId, String dbName)\n+  {\n+    IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap(CLUSTER_UUID_DB_NAME_MAP);\n+    UUID uuid = uuidPerDbCluster.putIfAbsent(dbName, clusterId.uuid());\n+    return uuid == null || clusterId.uuid().equals(uuid);\n+  }\n+\n+  private static Map<MemberId, ReadReplicaInfo> readReplicas(HazelcastInstance hazelcastInstance)\n+  {\n+    Map<MemberId, ReadReplicaInfo> result = new HashMap<>();\n+\n+    IMap<String/*uuid*/, String/*boltAddress*/> clientAddressMap =\n+        hazelcastInstance.getMap(READ_REPLICA_BOLT_ADDRESS_MAP);\n+    IMap<String, String> txServerMap = hazelcastInstance.getMap(READ_REPLICA_TRANSACTION_SERVER_ADDRESS_MAP);\n+    IMap<String, String> memberIdMap = hazelcastInstance.getMap(READ_REPLICA_MEMBER_ID_MAP);\n+    MultiMap<String, String> serverGroups = hazelcastInstance.getMultiMap(SERVER_GROUPS_MULTIMAP);\n+    IMap<String, String> memberDbMap = hazelcastInstance.getMap(READ_REPLICAS_DB_NAME_MAP);\n+\n+    if (of(clientAddressMap, txServerMap, memberIdMap, serverGroups).anyMatch(Objects::isNull))\n     {\n-        IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n-        UUID uuid = uuidPerDbCluster.putIfAbsent( dbName, clusterId.uuid() );\n-        return uuid == null || clusterId.uuid().equals( uuid );\n+      return result;\n     }\n \n-    private static Map<MemberId,ReadReplicaInfo> readReplicas( HazelcastInstance hazelcastInstance )\n+    for (String hzUUID : clientAddressMap.keySet())\n     {\n-        Map<MemberId,ReadReplicaInfo> result = new HashMap<>();\n-\n-        IMap<String/*uuid*/,String/*boltAddress*/> clientAddressMap =\n-                hazelcastInstance.getMap( READ_REPLICA_BOLT_ADDRESS_MAP );\n-        IMap<String,String> txServerMap = hazelcastInstance.getMap( READ_REPLICA_TRANSACTION_SERVER_ADDRESS_MAP );\n-        IMap<String,String> memberIdMap = hazelcastInstance.getMap( READ_REPLICA_MEMBER_ID_MAP );\n-        MultiMap<String,String> serverGroups = hazelcastInstance.getMultiMap( SERVER_GROUPS_MULTIMAP );\n-        IMap<String, String> memberDbMap = hazelcastInstance.getMap( READ_REPLICAS_DB_NAME_MAP );\n-\n-        if ( of( clientAddressMap, txServerMap, memberIdMap, serverGroups ).anyMatch( Objects::isNull ) )\n-        {\n-            return result;\n-        }\n-\n-        for ( String hzUUID : clientAddressMap.keySet() )\n-        {\n-            String sAddresses = clientAddressMap.get( hzUUID );\n-            String sCatchupAddress = txServerMap.get( hzUUID );\n-            String sMemberId = memberIdMap.get( hzUUID );\n-            String dbName = memberDbMap.get( hzUUID );\n-            Collection<String> sServerGroups = serverGroups.get( hzUUID );\n-\n-            if ( concat( of( sServerGroups ), of( sAddresses, sCatchupAddress, sMemberId ) ).anyMatch( Objects::isNull ) )\n-            {\n-                continue;\n-            }\n-\n-            ClientConnectorAddresses clientConnectorAddresses = ClientConnectorAddresses.fromString( sAddresses );\n-            AdvertisedSocketAddress catchupAddress = socketAddress( sCatchupAddress, AdvertisedSocketAddress::new );\n-\n-            ReadReplicaInfo readReplicaInfo = new ReadReplicaInfo( clientConnectorAddresses, catchupAddress, asSet( sServerGroups ), dbName );\n-            result.put( new MemberId( UUID.fromString( sMemberId ) ), readReplicaInfo );\n-        }\n-        return result;\n+      String sAddresses = clientAddressMap.get(hzUUID);\n+      String sCatchupAddress = txServerMap.get(hzUUID);\n+      String sMemberId = memberIdMap.get(hzUUID);\n+      String dbName = memberDbMap.get(hzUUID);\n+      Collection<String> sServerGroups = serverGroups.get(hzUUID);\n+\n+      if (concat(of(sServerGroups), of(sAddresses, sCatchupAddress, sMemberId)).anyMatch(Objects::isNull))\n+      {\n+        continue;\n+      }\n+\n+      ClientConnectorAddresses clientConnectorAddresses = ClientConnectorAddresses.fromString(sAddresses);\n+      AdvertisedSocketAddress catchupAddress = socketAddress(sCatchupAddress, AdvertisedSocketAddress::new);\n+\n+      ReadReplicaInfo readReplicaInfo = new ReadReplicaInfo(clientConnectorAddresses, catchupAddress, asSet(sServerGroups), dbName);\n+      result.put(new MemberId(UUID.fromString(sMemberId)), readReplicaInfo);\n     }\n+    return result;\n+  }\n \n-    static void casLeaders( HazelcastInstance hazelcastInstance, LeaderInfo leaderInfo, String dbName )\n-    {\n-        IAtomicReference<LeaderInfo> leaderRef = hazelcastInstance.getAtomicReference( DB_NAME_LEADER_TERM_PREFIX + dbName );\n-\n-        LeaderInfo current = leaderRef.get();\n-        Optional<LeaderInfo> currentOpt = Optional.ofNullable( current );\n+  static void casLeaders(HazelcastInstance hazelcastInstance, LeaderInfo leaderInfo, String dbName)\n+  {\n+    IAtomicReference<LeaderInfo> leaderRef = hazelcastInstance.getAtomicReference(DB_NAME_LEADER_TERM_PREFIX + dbName);\n \n-        boolean sameLeader =  currentOpt.map( LeaderInfo::memberId ).equals( Optional.ofNullable( leaderInfo.memberId() ) );\n+    LeaderInfo current = leaderRef.get();\n+    Optional<LeaderInfo> currentOpt = Optional.ofNullable(current);\n \n-        int termComparison =  currentOpt.map( l -> Long.compare( l.term(), leaderInfo.term() ) ).orElse( -1 );\n+    boolean sameLeader = currentOpt.map(LeaderInfo::memberId).equals(Optional.ofNullable(leaderInfo.memberId()));\n \n-        boolean greaterTermExists = termComparison > 0;\n+    int termComparison = currentOpt.map(l -> Long.compare(l.term(), leaderInfo.term())).orElse(-1);\n \n-        boolean sameTermButNoStepdown = termComparison == 0 && !leaderInfo.isSteppingDown();\n+    boolean greaterTermExists = termComparison > 0;\n \n-        if ( sameLeader || greaterTermExists || sameTermButNoStepdown )\n-        {\n-            return;\n-        }\n-\n-        leaderRef.compareAndSet( current, leaderInfo );\n-    }\n+    boolean sameTermButNoStepdown = termComparison == 0 && !leaderInfo.isSteppingDown();\n \n-    private static Optional<LeaderInfo> getLeaderForDBName( HazelcastInstance hazelcastInstance, String dbName )\n+    if (sameLeader || greaterTermExists || sameTermButNoStepdown)\n     {\n-        IAtomicReference<LeaderInfo> leader = hazelcastInstance.getAtomicReference( DB_NAME_LEADER_TERM_PREFIX + dbName );\n-        return Optional.ofNullable( leader.get() );\n+      return;\n     }\n \n-    private static boolean canBeBootstrapped( HazelcastInstance hazelcastInstance, Config config )\n-    {\n-        Set<Member> members = hazelcastInstance.getCluster().getMembers();\n-        String dbName = config.get( CausalClusteringSettings.database );\n+    leaderRef.compareAndSet(current, leaderInfo);\n+  }\n \n-        Predicate<Member> acceptsToBeLeader = m -> !m.getBooleanAttribute( REFUSE_TO_BE_LEADER_KEY );\n-        Predicate<Member> hostsMyDb = m -> dbName.equals( m.getStringAttribute( MEMBER_DB_NAME ) );\n+  private static Optional<LeaderInfo> getLeaderForDBName(HazelcastInstance hazelcastInstance, String dbName)\n+  {\n+    IAtomicReference<LeaderInfo> leader = hazelcastInstance.getAtomicReference(DB_NAME_LEADER_TERM_PREFIX + dbName);\n+    return Optional.ofNullable(leader.get());\n+  }\n \n-        Stream<Member> membersWhoCanLeadForMyDb = members.stream().filter( acceptsToBeLeader ).filter( hostsMyDb );\n+  private static boolean canBeBootstrapped(HazelcastInstance hazelcastInstance, Config config)\n+  {\n+    Set<Member> members = hazelcastInstance.getCluster().getMembers();\n+    String dbName = config.get(CausalClusteringSettings.database);\n \n-        Optional<Member> firstAppropriateMember = membersWhoCanLeadForMyDb.findFirst();\n+    Predicate<Member> acceptsToBeLeader = m -> !m.getBooleanAttribute(REFUSE_TO_BE_LEADER_KEY);\n+    Predicate<Member> hostsMyDb = m -> dbName.equals(m.getStringAttribute(MEMBER_DB_NAME));\n \n-        return firstAppropriateMember.map( Member::localMember ).orElse( false );\n-    }\n+    Stream<Member> membersWhoCanLeadForMyDb = members.stream().filter(acceptsToBeLeader).filter(hostsMyDb);\n \n-    static Map<MemberId,CoreServerInfo> toCoreMemberMap( Set<Member> members, Log log,\n-            HazelcastInstance hazelcastInstance )\n-    {\n-        Map<MemberId,CoreServerInfo> coreMembers = new HashMap<>();\n-        MultiMap<String,String> serverGroupsMMap = hazelcastInstance.getMultiMap( SERVER_GROUPS_MULTIMAP );\n+    Optional<Member> firstAppropriateMember = membersWhoCanLeadForMyDb.findFirst();\n+\n+    return firstAppropriateMember.map(Member::localMember).orElse(false);\n+  }\n \n-        for ( Member member : members )\n+  static Map<MemberId, CoreServerInfo> toCoreMemberMap(Set<Member> members, Log log,\n+                                                       HazelcastInstance hazelcastInstance)\n+  {\n+    Map<MemberId, CoreServerInfo> coreMembers = new HashMap<>();\n+    MultiMap<String, String> serverGroupsMMap = hazelcastInstance.getMultiMap(SERVER_GROUPS_MULTIMAP);\n+\n+    for (Member member : members)\n+    {\n+      Collection<String> attrKeys = asList(MEMBER_UUID, RAFT_SERVER, TRANSACTION_SERVER,\n+          CLIENT_CONNECTOR_ADDRESSES, MEMBER_DB_NAME);\n+\n+      Map<String, String> attrMap = new HashMap<>();\n+      boolean incomplete = false;\n+      for (String attrKey : attrKeys)\n+      {\n+        String attrValue = member.getStringAttribute(attrKey);\n+        if (attrValue == null)\n+        {\n+          log.warn(\"Missing member attribute '%s' for member %s\", attrKey, member);\n+          incomplete = true;\n+        } else\n         {\n-            Collection<String> attrKeys = asList( MEMBER_UUID, RAFT_SERVER, TRANSACTION_SERVER,\n-                    CLIENT_CONNECTOR_ADDRESSES, MEMBER_DB_NAME );\n-\n-            Map<String,String> attrMap = new HashMap<>();\n-            boolean incomplete = false;\n-            for ( String attrKey : attrKeys )\n-            {\n-                String attrValue = member.getStringAttribute( attrKey );\n-                if ( attrValue == null )\n-                {\n-                    log.warn( \"Missing member attribute '%s' for member %s\", attrKey, member );\n-                    incomplete = true;\n-                }\n-                else\n-                {\n-                    attrMap.put( attrKey, attrValue );\n-                }\n-            }\n-\n-            if ( incomplete )\n-            {\n-                continue;\n-            }\n-\n-            CoreServerInfo coreServerInfo = new CoreServerInfo(\n-                    socketAddress( attrMap.get( RAFT_SERVER ), AdvertisedSocketAddress::new ),\n-                    socketAddress( attrMap.get( TRANSACTION_SERVER ), AdvertisedSocketAddress::new ),\n-                    ClientConnectorAddresses.fromString( attrMap.get( CLIENT_CONNECTOR_ADDRESSES ) ),\n-                    asSet( serverGroupsMMap.get( attrMap.get( MEMBER_UUID ) ) ), attrMap.get( MEMBER_DB_NAME ) );\n-\n-            MemberId memberId = new MemberId( UUID.fromString( attrMap.get( MEMBER_UUID ) ) );\n-            coreMembers.put( memberId, coreServerInfo );\n+          attrMap.put(attrKey, attrValue);\n         }\n+      }\n \n-        return coreMembers;\n+      if (incomplete)\n+      {\n+        continue;\n+      }\n+\n+      CoreServerInfo coreServerInfo = new CoreServerInfo(\n+          socketAddress(attrMap.get(RAFT_SERVER), AdvertisedSocketAddress::new),\n+          socketAddress(attrMap.get(TRANSACTION_SERVER), AdvertisedSocketAddress::new),\n+          ClientConnectorAddresses.fromString(attrMap.get(CLIENT_CONNECTOR_ADDRESSES)),\n+          asSet(serverGroupsMMap.get(attrMap.get(MEMBER_UUID))), attrMap.get(MEMBER_DB_NAME));\n+\n+      MemberId memberId = new MemberId(UUID.fromString(attrMap.get(MEMBER_UUID)));\n+      coreMembers.put(memberId, coreServerInfo);\n     }\n \n-    static void refreshGroups( HazelcastInstance hazelcastInstance, String memberId, List<String> groups )\n-    {\n-        MultiMap<String,String> groupsMap = hazelcastInstance.getMultiMap( SERVER_GROUPS_MULTIMAP );\n-        Collection<String> existing = groupsMap.get( memberId );\n+    return coreMembers;\n+  }\n \n-        Set<String> superfluous = existing.stream().filter( t -> !groups.contains( t ) ).collect( Collectors.toSet() );\n-        Set<String> missing = groups.stream().filter( t -> !existing.contains( t ) ).collect( Collectors.toSet() );\n+  static void refreshGroups(HazelcastInstance hazelcastInstance, String memberId, List<String> groups)\n+  {\n+    MultiMap<String, String> groupsMap = hazelcastInstance.getMultiMap(SERVER_GROUPS_MULTIMAP);\n+    Collection<String> existing = groupsMap.get(memberId);\n \n-        missing.forEach( group -> groupsMap.put( memberId, group ) );\n-        superfluous.forEach( group -> groupsMap.remove( memberId, group ) );\n-    }\n+    Set<String> superfluous = existing.stream().filter(t -> !groups.contains(t)).collect(Collectors.toSet());\n+    Set<String> missing = groups.stream().filter(t -> !existing.contains(t)).collect(Collectors.toSet());\n \n-    static MemberAttributeConfig buildMemberAttributesForCore( MemberId myself, Config config )\n-    {\n+    missing.forEach(group -> groupsMap.put(memberId, group));\n+    superfluous.forEach(group -> groupsMap.remove(memberId, group));\n+  }\n \n-        MemberAttributeConfig memberAttributeConfig = new MemberAttributeConfig();\n-        memberAttributeConfig.setStringAttribute( MEMBER_UUID, myself.getUuid().toString() );\n+  static MemberAttributeConfig buildMemberAttributesForCore(MemberId myself, Config config)\n+  {\n \n-        AdvertisedSocketAddress discoveryAddress = config.get( CausalClusteringSettings.discovery_advertised_address );\n-        memberAttributeConfig.setStringAttribute( DISCOVERY_SERVER, discoveryAddress.toString() );\n+    MemberAttributeConfig memberAttributeConfig = new MemberAttributeConfig();\n+    memberAttributeConfig.setStringAttribute(MEMBER_UUID, myself.getUuid().toString());\n \n-        AdvertisedSocketAddress transactionSource =\n-                config.get( CausalClusteringSettings.transaction_advertised_address );\n-        memberAttributeConfig.setStringAttribute( TRANSACTION_SERVER, transactionSource.toString() );\n+    AdvertisedSocketAddress discoveryAddress = config.get(CausalClusteringSettings.discovery_advertised_address);\n+    memberAttributeConfig.setStringAttribute(DISCOVERY_SERVER, discoveryAddress.toString());\n \n-        AdvertisedSocketAddress raftAddress = config.get( CausalClusteringSettings.raft_advertised_address );\n-        memberAttributeConfig.setStringAttribute( RAFT_SERVER, raftAddress.toString() );\n+    AdvertisedSocketAddress transactionSource =\n+        config.get(CausalClusteringSettings.transaction_advertised_address);\n+    memberAttributeConfig.setStringAttribute(TRANSACTION_SERVER, transactionSource.toString());\n \n-        ClientConnectorAddresses clientConnectorAddresses = ClientConnectorAddresses.extractFromConfig( config );\n-        memberAttributeConfig.setStringAttribute( CLIENT_CONNECTOR_ADDRESSES, clientConnectorAddresses.toString() );\n+    AdvertisedSocketAddress raftAddress = config.get(CausalClusteringSettings.raft_advertised_address);\n+    memberAttributeConfig.setStringAttribute(RAFT_SERVER, raftAddress.toString());\n \n-        memberAttributeConfig.setBooleanAttribute( REFUSE_TO_BE_LEADER_KEY,\n-                config.get( refuse_to_be_leader )  );\n+    ClientConnectorAddresses clientConnectorAddresses = ClientConnectorAddresses.extractFromConfig(config);\n+    memberAttributeConfig.setStringAttribute(CLIENT_CONNECTOR_ADDRESSES, clientConnectorAddresses.toString());\n \n-        memberAttributeConfig.setStringAttribute( MEMBER_DB_NAME, config.get( CausalClusteringSettings.database ) );\n+    memberAttributeConfig.setBooleanAttribute(REFUSE_TO_BE_LEADER_KEY,\n+        config.get(refuse_to_be_leader));\n \n-        return memberAttributeConfig;\n-    }\n+    memberAttributeConfig.setStringAttribute(MEMBER_DB_NAME, config.get(CausalClusteringSettings.database));\n+\n+    return memberAttributeConfig;\n+  }\n }\n",
            "diff_size": 349
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "125",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "131",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "column": "28",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "181",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "211",
                    "column": "60",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "212",
                    "column": "24",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "212",
                    "column": "44",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "241",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "241",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "246",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 396).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1137/HazelcastClusterTopology.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1137/HazelcastClusterTopology.java\nindex f01f247cb9a..76428833e87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1137/HazelcastClusterTopology.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1137/HazelcastClusterTopology.java\n@@ -26,7 +26,6 @@ import com.hazelcast.core.IAtomicReference;\n import com.hazelcast.core.IMap;\n import com.hazelcast.core.Member;\n import com.hazelcast.core.MultiMap;\n-\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n@@ -39,7 +38,6 @@ import java.util.function.Function;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-\n import org.neo4j.causalclustering.core.CausalClusteringSettings;\n import org.neo4j.causalclustering.core.consensus.LeaderInfo;\n import org.neo4j.causalclustering.identity.ClusterId;\n@@ -47,13 +45,18 @@ import org.neo4j.causalclustering.identity.MemberId;\n import org.neo4j.helpers.AdvertisedSocketAddress;\n import org.neo4j.kernel.configuration.Config;\n import org.neo4j.logging.Log;\n-\n import static java.util.Arrays.asList;\n+\n import static java.util.Collections.emptyMap;\n+\n import static java.util.stream.Stream.concat;\n+\n import static java.util.stream.Stream.of;\n+\n import static org.neo4j.causalclustering.core.CausalClusteringSettings.refuse_to_be_leader;\n+\n import static org.neo4j.helpers.SocketAddressParser.socketAddress;\n+\n import static org.neo4j.helpers.collection.Iterables.asSet;\n \n public final class HazelcastClusterTopology\n@@ -65,7 +68,6 @@ public final class HazelcastClusterTopology\n     static final String RAFT_SERVER = \"raft_server\";\n     static final String CLIENT_CONNECTOR_ADDRESSES = \"client_connector_addresses\";\n     static final String MEMBER_DB_NAME = \"member_database_name\";\n-\n     private static final String REFUSE_TO_BE_LEADER_KEY = \"refuseToBeLeader\";\n \n     // cluster-wide attributes\n@@ -84,7 +86,6 @@ public final class HazelcastClusterTopology\n     static ReadReplicaTopology getReadReplicaTopology( HazelcastInstance hazelcastInstance, Log log )\n     {\n         Map<MemberId,ReadReplicaInfo> readReplicas = emptyMap();\n-\n         if ( hazelcastInstance != null )\n         {\n             readReplicas = readReplicas( hazelcastInstance );\n@@ -103,14 +104,11 @@ public final class HazelcastClusterTopology\n         boolean canBeBootstrapped = false;\n         ClusterId clusterId = null;\n         String dbName = config.get( CausalClusteringSettings.database );\n-\n         if ( hazelcastInstance != null )\n         {\n             Set<Member> hzMembers = hazelcastInstance.getCluster().getMembers();\n             canBeBootstrapped = canBeBootstrapped( hazelcastInstance, config );\n-\n             coreMembers = toCoreMemberMap( hzMembers, log, hazelcastInstance );\n-\n             clusterId = getClusterId( hazelcastInstance, dbName );\n         }\n         else\n@@ -121,20 +119,19 @@ public final class HazelcastClusterTopology\n         return new CoreTopology( clusterId, canBeBootstrapped, coreMembers );\n     }\n \n-    public static Map<MemberId,AdvertisedSocketAddress> extractCatchupAddressesMap( CoreTopology coreTopology,\n-            ReadReplicaTopology rrTopology )\n+    public static Map<MemberId,AdvertisedSocketAddress> extractCatchupAddressesMap( CoreTopology coreTopology, ReadReplicaTopology rrTopology )\n     {\n         Map<MemberId,AdvertisedSocketAddress> catchupAddressMap = new HashMap<>();\n-\n-        for ( Map.Entry<MemberId,CoreServerInfo> entry : coreTopology.members().entrySet() )\n+        for( Map.Entry<MemberId,CoreServerInfo> entry : coreTopology.members().entrySet()\n+        )\n         {\n             catchupAddressMap.put( entry.getKey(), entry.getValue().getCatchupServer() );\n         }\n \n-        for ( Map.Entry<MemberId,ReadReplicaInfo> entry : rrTopology.members().entrySet() )\n+        for( Map.Entry<MemberId,ReadReplicaInfo> entry : rrTopology.members().entrySet()\n+        )\n         {\n             catchupAddressMap.put( entry.getKey(), entry.getValue().getCatchupServer() );\n-\n         }\n \n         return catchupAddressMap;\n@@ -142,63 +139,53 @@ public final class HazelcastClusterTopology\n \n     private static ClusterId getClusterId( HazelcastInstance hazelcastInstance, String dbName )\n     {\n-        IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n+        IMap<String,UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n         UUID uuid = uuidPerDbCluster.get( dbName );\n         return uuid != null ? new ClusterId( uuid ) : null;\n     }\n \n     private static Set<String> getDBNames( HazelcastInstance hazelcastInstance )\n     {\n-        IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n+        IMap<String,UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n         return uuidPerDbCluster.keySet();\n     }\n \n     public static Map<MemberId,RoleInfo> getCoreRoles( HazelcastInstance hazelcastInstance, Set<MemberId> coreMembers )\n     {\n-\n         Set<String> dbNames = getDBNames( hazelcastInstance );\n-        Set<MemberId> allLeaders = dbNames.stream()\n-                .map( n -> getLeaderForDBName( hazelcastInstance, n ) )\n-                .filter( Optional::isPresent )\n-                .map( l -> l.get().memberId() )\n-                .collect( Collectors.toSet() );\n-\n+        Set<MemberId> allLeaders = dbNames.stream().map( n -> getLeaderForDBName( hazelcastInstance, n ) ).filter( Optional::isPresent ).map( l -> l.get().memberId() ).collect( Collectors.toSet() );\n         Function<MemberId,RoleInfo> roleMapper = m -> allLeaders.contains( m ) ? RoleInfo.LEADER : RoleInfo.FOLLOWER;\n-\n         return coreMembers.stream().collect( Collectors.toMap( Function.identity(), roleMapper ) );\n     }\n \n     static boolean casClusterId( HazelcastInstance hazelcastInstance, ClusterId clusterId, String dbName )\n     {\n-        IMap<String, UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n+        IMap<String,UUID> uuidPerDbCluster = hazelcastInstance.getMap( CLUSTER_UUID_DB_NAME_MAP );\n         UUID uuid = uuidPerDbCluster.putIfAbsent( dbName, clusterId.uuid() );\n-        return uuid == null || clusterId.uuid().equals( uuid );\n+        return uuid == null|| clusterId.uuid().equals( uuid );\n     }\n \n     private static Map<MemberId,ReadReplicaInfo> readReplicas( HazelcastInstance hazelcastInstance )\n     {\n         Map<MemberId,ReadReplicaInfo> result = new HashMap<>();\n-\n-        IMap<String/*uuid*/,String/*boltAddress*/> clientAddressMap =\n-                hazelcastInstance.getMap( READ_REPLICA_BOLT_ADDRESS_MAP );\n+        IMap<String/*uuid*/,String/*boltAddress*/> clientAddressMap = hazelcastInstance.getMap( READ_REPLICA_BOLT_ADDRESS_MAP );\n         IMap<String,String> txServerMap = hazelcastInstance.getMap( READ_REPLICA_TRANSACTION_SERVER_ADDRESS_MAP );\n         IMap<String,String> memberIdMap = hazelcastInstance.getMap( READ_REPLICA_MEMBER_ID_MAP );\n         MultiMap<String,String> serverGroups = hazelcastInstance.getMultiMap( SERVER_GROUPS_MULTIMAP );\n-        IMap<String, String> memberDbMap = hazelcastInstance.getMap( READ_REPLICAS_DB_NAME_MAP );\n-\n+        IMap<String,String> memberDbMap = hazelcastInstance.getMap( READ_REPLICAS_DB_NAME_MAP );\n         if ( of( clientAddressMap, txServerMap, memberIdMap, serverGroups ).anyMatch( Objects::isNull ) )\n         {\n             return result;\n         }\n \n-        for ( String hzUUID : clientAddressMap.keySet() )\n+        for( String hzUUID : clientAddressMap.keySet()\n+        )\n         {\n             String sAddresses = clientAddressMap.get( hzUUID );\n             String sCatchupAddress = txServerMap.get( hzUUID );\n             String sMemberId = memberIdMap.get( hzUUID );\n             String dbName = memberDbMap.get( hzUUID );\n             Collection<String> sServerGroups = serverGroups.get( hzUUID );\n-\n             if ( concat( of( sServerGroups ), of( sAddresses, sCatchupAddress, sMemberId ) ).anyMatch( Objects::isNull ) )\n             {\n                 continue;\n@@ -206,29 +193,23 @@ public final class HazelcastClusterTopology\n \n             ClientConnectorAddresses clientConnectorAddresses = ClientConnectorAddresses.fromString( sAddresses );\n             AdvertisedSocketAddress catchupAddress = socketAddress( sCatchupAddress, AdvertisedSocketAddress::new );\n-\n             ReadReplicaInfo readReplicaInfo = new ReadReplicaInfo( clientConnectorAddresses, catchupAddress, asSet( sServerGroups ), dbName );\n             result.put( new MemberId( UUID.fromString( sMemberId ) ), readReplicaInfo );\n         }\n+\n         return result;\n     }\n \n     static void casLeaders( HazelcastInstance hazelcastInstance, LeaderInfo leaderInfo, String dbName )\n     {\n         IAtomicReference<LeaderInfo> leaderRef = hazelcastInstance.getAtomicReference( DB_NAME_LEADER_TERM_PREFIX + dbName );\n-\n         LeaderInfo current = leaderRef.get();\n         Optional<LeaderInfo> currentOpt = Optional.ofNullable( current );\n-\n-        boolean sameLeader =  currentOpt.map( LeaderInfo::memberId ).equals( Optional.ofNullable( leaderInfo.memberId() ) );\n-\n-        int termComparison =  currentOpt.map( l -> Long.compare( l.term(), leaderInfo.term() ) ).orElse( -1 );\n-\n+        boolean sameLeader = currentOpt.map( LeaderInfo::memberId ).equals( Optional.ofNullable( leaderInfo.memberId() ) );\n+        int termComparison = currentOpt.map( l -> Long.compare( l.term(), leaderInfo.term() ) ).orElse( - 1 );\n         boolean greaterTermExists = termComparison > 0;\n-\n-        boolean sameTermButNoStepdown = termComparison == 0 && !leaderInfo.isSteppingDown();\n-\n-        if ( sameLeader || greaterTermExists || sameTermButNoStepdown )\n+        boolean sameTermButNoStepdown = termComparison == 0&& ! leaderInfo.isSteppingDown();\n+        if ( sameLeader|| greaterTermExists|| sameTermButNoStepdown )\n         {\n             return;\n         }\n@@ -246,31 +227,23 @@ public final class HazelcastClusterTopology\n     {\n         Set<Member> members = hazelcastInstance.getCluster().getMembers();\n         String dbName = config.get( CausalClusteringSettings.database );\n-\n-        Predicate<Member> acceptsToBeLeader = m -> !m.getBooleanAttribute( REFUSE_TO_BE_LEADER_KEY );\n+        Predicate<Member> acceptsToBeLeader = m -> ! m.getBooleanAttribute( REFUSE_TO_BE_LEADER_KEY );\n         Predicate<Member> hostsMyDb = m -> dbName.equals( m.getStringAttribute( MEMBER_DB_NAME ) );\n-\n         Stream<Member> membersWhoCanLeadForMyDb = members.stream().filter( acceptsToBeLeader ).filter( hostsMyDb );\n-\n         Optional<Member> firstAppropriateMember = membersWhoCanLeadForMyDb.findFirst();\n-\n         return firstAppropriateMember.map( Member::localMember ).orElse( false );\n     }\n \n-    static Map<MemberId,CoreServerInfo> toCoreMemberMap( Set<Member> members, Log log,\n-            HazelcastInstance hazelcastInstance )\n+    static Map<MemberId,CoreServerInfo> toCoreMemberMap( Set<Member> members, Log log, HazelcastInstance hazelcastInstance )\n     {\n         Map<MemberId,CoreServerInfo> coreMembers = new HashMap<>();\n         MultiMap<String,String> serverGroupsMMap = hazelcastInstance.getMultiMap( SERVER_GROUPS_MULTIMAP );\n-\n-        for ( Member member : members )\n+        for( Member member : members)\n         {\n-            Collection<String> attrKeys = asList( MEMBER_UUID, RAFT_SERVER, TRANSACTION_SERVER,\n-                    CLIENT_CONNECTOR_ADDRESSES, MEMBER_DB_NAME );\n-\n+            Collection<String> attrKeys = asList( MEMBER_UUID, RAFT_SERVER, TRANSACTION_SERVER, CLIENT_CONNECTOR_ADDRESSES, MEMBER_DB_NAME );\n             Map<String,String> attrMap = new HashMap<>();\n             boolean incomplete = false;\n-            for ( String attrKey : attrKeys )\n+            for( String attrKey : attrKeys)\n             {\n                 String attrValue = member.getStringAttribute( attrKey );\n                 if ( attrValue == null )\n@@ -289,12 +262,7 @@ public final class HazelcastClusterTopology\n                 continue;\n             }\n \n-            CoreServerInfo coreServerInfo = new CoreServerInfo(\n-                    socketAddress( attrMap.get( RAFT_SERVER ), AdvertisedSocketAddress::new ),\n-                    socketAddress( attrMap.get( TRANSACTION_SERVER ), AdvertisedSocketAddress::new ),\n-                    ClientConnectorAddresses.fromString( attrMap.get( CLIENT_CONNECTOR_ADDRESSES ) ),\n-                    asSet( serverGroupsMMap.get( attrMap.get( MEMBER_UUID ) ) ), attrMap.get( MEMBER_DB_NAME ) );\n-\n+            CoreServerInfo coreServerInfo = new CoreServerInfo( socketAddress( attrMap.get( RAFT_SERVER ), AdvertisedSocketAddress::new ), socketAddress( attrMap.get( TRANSACTION_SERVER ), AdvertisedSocketAddress::new ), ClientConnectorAddresses.fromString( attrMap.get( CLIENT_CONNECTOR_ADDRESSES ) ), asSet( serverGroupsMMap.get( attrMap.get( MEMBER_UUID ) ) ), attrMap.get( MEMBER_DB_NAME ) );\n             MemberId memberId = new MemberId( UUID.fromString( attrMap.get( MEMBER_UUID ) ) );\n             coreMembers.put( memberId, coreServerInfo );\n         }\n@@ -306,38 +274,26 @@ public final class HazelcastClusterTopology\n     {\n         MultiMap<String,String> groupsMap = hazelcastInstance.getMultiMap( SERVER_GROUPS_MULTIMAP );\n         Collection<String> existing = groupsMap.get( memberId );\n-\n-        Set<String> superfluous = existing.stream().filter( t -> !groups.contains( t ) ).collect( Collectors.toSet() );\n-        Set<String> missing = groups.stream().filter( t -> !existing.contains( t ) ).collect( Collectors.toSet() );\n-\n+        Set<String> superfluous = existing.stream().filter( t -> ! groups.contains( t ) ).collect( Collectors.toSet() );\n+        Set<String> missing = groups.stream().filter( t -> ! existing.contains( t ) ).collect( Collectors.toSet() );\n         missing.forEach( group -> groupsMap.put( memberId, group ) );\n         superfluous.forEach( group -> groupsMap.remove( memberId, group ) );\n     }\n \n     static MemberAttributeConfig buildMemberAttributesForCore( MemberId myself, Config config )\n     {\n-\n         MemberAttributeConfig memberAttributeConfig = new MemberAttributeConfig();\n         memberAttributeConfig.setStringAttribute( MEMBER_UUID, myself.getUuid().toString() );\n-\n         AdvertisedSocketAddress discoveryAddress = config.get( CausalClusteringSettings.discovery_advertised_address );\n         memberAttributeConfig.setStringAttribute( DISCOVERY_SERVER, discoveryAddress.toString() );\n-\n-        AdvertisedSocketAddress transactionSource =\n-                config.get( CausalClusteringSettings.transaction_advertised_address );\n+        AdvertisedSocketAddress transactionSource = config.get( CausalClusteringSettings.transaction_advertised_address );\n         memberAttributeConfig.setStringAttribute( TRANSACTION_SERVER, transactionSource.toString() );\n-\n         AdvertisedSocketAddress raftAddress = config.get( CausalClusteringSettings.raft_advertised_address );\n         memberAttributeConfig.setStringAttribute( RAFT_SERVER, raftAddress.toString() );\n-\n         ClientConnectorAddresses clientConnectorAddresses = ClientConnectorAddresses.extractFromConfig( config );\n         memberAttributeConfig.setStringAttribute( CLIENT_CONNECTOR_ADDRESSES, clientConnectorAddresses.toString() );\n-\n-        memberAttributeConfig.setBooleanAttribute( REFUSE_TO_BE_LEADER_KEY,\n-                config.get( refuse_to_be_leader )  );\n-\n+        memberAttributeConfig.setBooleanAttribute( REFUSE_TO_BE_LEADER_KEY, config.get( refuse_to_be_leader ) );\n         memberAttributeConfig.setStringAttribute( MEMBER_DB_NAME, config.get( CausalClusteringSettings.database ) );\n-\n         return memberAttributeConfig;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 89
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}