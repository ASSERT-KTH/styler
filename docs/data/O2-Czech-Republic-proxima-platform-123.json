{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "123",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Test\n  public void testSerializable() throws IOException, ClassNotFoundException {\n    SerializableScopedValue<Integer, Integer> value = new SerializableScopedValue<>(() -> 1);\n    SerializableScopedValue<Integer, Integer> other = TestUtils.assertSerializable(value);\n    TestUtils.assertHashCodeAndEquals(value, other);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/123/SerializableScopedValueTest.java\nindex 731cec2c22b..287a0970aca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/123/SerializableScopedValueTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.util;\n \n import static org.junit.Assert.*;\n@@ -28,7 +29,8 @@ public class SerializableScopedValueTest {\n \n   @Test\n   public void testSerializable() throws IOException, ClassNotFoundException {\n-    SerializableScopedValue<Integer, Integer> value = new SerializableScopedValue<>(() -> 1);\n+    SerializableScopedValue<Integer, Integer> value =\n+        new SerializableScopedValue<>(() -> 1);\n     SerializableScopedValue<Integer, Integer> other = TestUtils.assertSerializable(value);\n     TestUtils.assertHashCodeAndEquals(value, other);\n   }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/123/SerializableScopedValueTest.java\nindex 731cec2c22b..5b20abf0619 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/123/SerializableScopedValueTest.java\n@@ -39,8 +39,7 @@ public class SerializableScopedValueTest {\n     SerializableScopedValue<Integer, AtomicInteger> value =\n         new SerializableScopedValue<>(() -> new AtomicInteger(1));\n     value.reset(1);\n-    SerializableScopedValue<Integer, AtomicInteger> other =\n-        TestUtils.deserializeObject(TestUtils.serializeObject(value));\n+    SerializableScopedValue<Integer, AtomicInteger> other = TestUtils.deserializeObject(TestUtils.serializeObject(value));\n     assertEquals(1, other.get(1).getAndAdd(1));\n     assertEquals(1, other.get(2).getAndAdd(2));\n     assertEquals(2, other.get(1).get());\n@@ -48,4 +47,4 @@ public class SerializableScopedValueTest {\n     other.reset(1);\n     assertEquals(1, other.get(1).get());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/123/SerializableScopedValueTest.java\nindex 731cec2c22b..4645a5ee364 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/123/SerializableScopedValueTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.util;\n \n import static org.junit.Assert.*;\n-\n import java.io.IOException;\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingDeque;\n@@ -24,6 +23,8 @@ import java.util.concurrent.atomic.AtomicInteger;\n import org.junit.Test;\n \n /** Test {@link SerializableScopedValue}. */\n+\n+\n public class SerializableScopedValueTest {\n \n   @Test\n@@ -36,11 +37,9 @@ public class SerializableScopedValueTest {\n   @Test\n   public void testContextLocality() throws IOException, ClassNotFoundException {\n     BlockingQueue<Integer> results = new LinkedBlockingDeque<>();\n-    SerializableScopedValue<Integer, AtomicInteger> value =\n-        new SerializableScopedValue<>(() -> new AtomicInteger(1));\n+    SerializableScopedValue<Integer, AtomicInteger> value = new SerializableScopedValue<>(() -> new AtomicInteger(1));\n     value.reset(1);\n-    SerializableScopedValue<Integer, AtomicInteger> other =\n-        TestUtils.deserializeObject(TestUtils.serializeObject(value));\n+    SerializableScopedValue<Integer, AtomicInteger> other = TestUtils.deserializeObject(TestUtils.serializeObject(value));\n     assertEquals(1, other.get(1).getAndAdd(1));\n     assertEquals(1, other.get(2).getAndAdd(2));\n     assertEquals(2, other.get(1).get());\n@@ -48,4 +47,4 @@ public class SerializableScopedValueTest {\n     other.reset(1);\n     assertEquals(1, other.get(1).get());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "31",
                    "column": "87",
                    "severity": "error",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "31",
                    "column": "89",
                    "severity": "error",
                    "message": "WhitespaceAround: '->' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/123/SerializableScopedValueTest.java\nindex 731cec2c22b..0ed72f9eca0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/123/SerializableScopedValueTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/123/SerializableScopedValueTest.java\n@@ -28,7 +28,7 @@ public class SerializableScopedValueTest {\n \n   @Test\n   public void testSerializable() throws IOException, ClassNotFoundException {\n-    SerializableScopedValue<Integer, Integer> value = new SerializableScopedValue<>(() -> 1);\n+    SerializableScopedValue<Integer, Integer> value = new SerializableScopedValue<>(()->1);\n     SerializableScopedValue<Integer, Integer> other = TestUtils.assertSerializable(value);\n     TestUtils.assertHashCodeAndEquals(value, other);\n   }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}