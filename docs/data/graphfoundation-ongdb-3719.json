{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3719",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3719/QueryExecutionType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3719/QueryExecutionType.java\nindex 7c19efbab0f..4d5d06a91a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3719/QueryExecutionType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3719/QueryExecutionType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import static java.util.Objects.requireNonNull;\n@@ -49,182 +50,190 @@ import static java.util.Objects.requireNonNull;\n  */\n public final class QueryExecutionType\n {\n+  /**\n+   * Signifies what type of query an {@link QueryExecutionType} executes.\n+   */\n+  public enum QueryType\n+  {\n     /**\n-     * Signifies what type of query an {@link QueryExecutionType} executes.\n-     */\n-    public enum QueryType\n-    {\n-        /** A read-only query, that does not change any data, but only produces a result. */\n-        READ_ONLY,\n-        /** A read/write query, that creates or updates data, and also produces a result. */\n-        READ_WRITE,\n-        /** A write-only query, that creates or updates data, but does not yield any rows in the result. */\n-        WRITE,\n-        /**\n-         * A schema changing query, that updates the schema but neither changes any data nor yields any rows in the\n-         * result.\n-         */\n-        SCHEMA_WRITE,;\n-        private final QueryExecutionType query;\n-        private final QueryExecutionType profiled;\n-        private final QueryExecutionType explained;\n-\n-        QueryType()\n-        {\n-            this.query = new QueryExecutionType( Execution.QUERY, this );\n-            this.profiled = new QueryExecutionType( Execution.PROFILE, this );\n-            this.explained = new QueryExecutionType( Execution.EXPLAIN, this );\n-        }\n-    }\n-\n-    /**\n-     * Get the {@link QueryExecutionType} that signifies normal execution of a query of the supplied type.\n-     *\n-     * @param type the type of query executed.\n-     * @return The instance that signifies normal execution of the supplied {@link QueryType}.\n+     * A read-only query, that does not change any data, but only produces a result.\n      */\n-    public static QueryExecutionType query( QueryType type )\n-    {\n-        return requireNonNull( type, \"QueryType\" ).query;\n-    }\n-\n-    /**\n-     * Get the {@link QueryExecutionType} that signifies profiled execution of a query of the supplied type.\n-     *\n-     * @param type the type of query executed.\n-     * @return The instance that signifies profiled execution of the supplied {@link QueryType}.\n-     */\n-    public static QueryExecutionType profiled( QueryType type )\n-    {\n-        return requireNonNull( type, \"QueryType\" ).profiled;\n-    }\n-\n+    READ_ONLY,\n     /**\n-     * Get the {@link QueryExecutionType} that signifies explaining the plan of a query of the supplied type.\n-     *\n-     * @param type the type of query executed.\n-     * @return The instance that signifies explaining the plan of the supplied {@link QueryType}.\n+     * A read/write query, that creates or updates data, and also produces a result.\n      */\n-    public static QueryExecutionType explained( QueryType type )\n-    {\n-        return requireNonNull( type, \"QueryType\" ).explained;\n-    }\n-\n+    READ_WRITE,\n     /**\n-     * Get the type of query this execution refers to.\n-     *\n-     * @return the type of query this execution refers to.\n+     * A write-only query, that creates or updates data, but does not yield any rows in the result.\n      */\n-    public QueryType queryType()\n-    {\n-        return type;\n-    }\n-\n+    WRITE,\n     /**\n-     * Signifies whether results from this execution\n-     * {@linkplain ExecutionPlanDescription#getProfilerStatistics() contains profiling information}.\n-     *\n-     * This is {@code true} for queries executed with the\n-     * <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/execution-plans/\">{@code PROFILE}</a> directive.\n-     *\n-     * @return {@code true} if the results from this execution would contain profiling information.\n+     * A schema changing query, that updates the schema but neither changes any data nor yields any rows in the\n+     * result.\n      */\n-    public boolean isProfiled()\n-    {\n-        return execution == Execution.PROFILE;\n-    }\n+    SCHEMA_WRITE,\n+    ;\n+    private final QueryExecutionType query;\n+    private final QueryExecutionType profiled;\n+    private final QueryExecutionType explained;\n \n-    /**\n-     * Signifies whether the supplied query contained a directive that asked for a\n-     * {@linkplain ExecutionPlanDescription description of the execution plan}.\n-     *\n-     * This is {@code true} for queries executed with either the\n-     * <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/execution-plans/\">{@code EXPLAIN} or {@code PROFILE} directives</a>.\n-     *\n-     * @return {@code true} if a description of the plan should be presented to the user.\n-     */\n-    public boolean requestedExecutionPlanDescription()\n+    QueryType()\n     {\n-        return execution != Execution.QUERY;\n+      this.query = new QueryExecutionType(Execution.QUERY, this);\n+      this.profiled = new QueryExecutionType(Execution.PROFILE, this);\n+      this.explained = new QueryExecutionType(Execution.EXPLAIN, this);\n     }\n-\n-    /**\n-     * Signifies that the query was executed with the\n-     * <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/execution-plans/\">{@code EXPLAIN} directive</a>.\n-     *\n-     * @return {@code true} if the query was executed using the {@code EXPLAIN} directive.\n-     */\n-    public boolean isExplained()\n-    {\n-        return execution == Execution.EXPLAIN;\n-    }\n-\n-    /**\n-     * Signifies that the execution of the query could produce a result.\n-     *\n-     * This is an important distinction from the result being empty.\n-     *\n-     * @return {@code true} if the execution would yield rows in the result set.\n-     */\n-    public boolean canContainResults()\n-    {\n-        return (type == QueryType.READ_ONLY || type == QueryType.READ_WRITE) && execution != Execution.EXPLAIN;\n-    }\n-\n-    /**\n-     * Signifies that the execution of the query could perform changes to the data.\n-     *\n-     * {@link Result}{@link Result#getQueryStatistics() .getQueryStatistics()}{@link QueryStatistics#containsUpdates()\n-     * .containsUpdates()} signifies whether the query actually performed any updates.\n-     *\n-     * @return {@code true} if the execution could perform changes to data.\n-     */\n-    public boolean canUpdateData()\n-    {\n-        return (type == QueryType.READ_WRITE || type == QueryType.WRITE) && execution != Execution.EXPLAIN;\n-    }\n-\n-    /**\n-     * Signifies that the execution of the query updates the schema.\n-     *\n-     * @return {@code true} if the execution updates the schema.\n-     */\n-    public boolean canUpdateSchema()\n-    {\n-        return type == QueryType.SCHEMA_WRITE && execution != Execution.EXPLAIN;\n-    }\n-\n-    private final Execution execution;\n-    private final QueryType type;\n-\n-    private QueryExecutionType( Execution execution, QueryType type )\n-    {\n-        this.execution = execution;\n-        this.type = type;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return execution.toString( type );\n-    }\n-\n-    private enum Execution\n-    {\n-        QUERY\n-                {\n-                    @Override\n-                    String toString( QueryType type )\n-                    {\n-                        return type.name();\n-                    }\n-                },\n-        PROFILE,\n-        EXPLAIN,;\n-\n-        String toString( QueryType type )\n+  }\n+\n+  /**\n+   * Get the {@link QueryExecutionType} that signifies normal execution of a query of the supplied type.\n+   *\n+   * @param type the type of query executed.\n+   * @return The instance that signifies normal execution of the supplied {@link QueryType}.\n+   */\n+  public static QueryExecutionType query(QueryType type)\n+  {\n+    return requireNonNull(type, \"QueryType\").query;\n+  }\n+\n+  /**\n+   * Get the {@link QueryExecutionType} that signifies profiled execution of a query of the supplied type.\n+   *\n+   * @param type the type of query executed.\n+   * @return The instance that signifies profiled execution of the supplied {@link QueryType}.\n+   */\n+  public static QueryExecutionType profiled(QueryType type)\n+  {\n+    return requireNonNull(type, \"QueryType\").profiled;\n+  }\n+\n+  /**\n+   * Get the {@link QueryExecutionType} that signifies explaining the plan of a query of the supplied type.\n+   *\n+   * @param type the type of query executed.\n+   * @return The instance that signifies explaining the plan of the supplied {@link QueryType}.\n+   */\n+  public static QueryExecutionType explained(QueryType type)\n+  {\n+    return requireNonNull(type, \"QueryType\").explained;\n+  }\n+\n+  /**\n+   * Get the type of query this execution refers to.\n+   *\n+   * @return the type of query this execution refers to.\n+   */\n+  public QueryType queryType()\n+  {\n+    return type;\n+  }\n+\n+  /**\n+   * Signifies whether results from this execution\n+   * {@linkplain ExecutionPlanDescription#getProfilerStatistics() contains profiling information}.\n+   * <p>\n+   * This is {@code true} for queries executed with the\n+   * <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/execution-plans/\">{@code PROFILE}</a> directive.\n+   *\n+   * @return {@code true} if the results from this execution would contain profiling information.\n+   */\n+  public boolean isProfiled()\n+  {\n+    return execution == Execution.PROFILE;\n+  }\n+\n+  /**\n+   * Signifies whether the supplied query contained a directive that asked for a\n+   * {@linkplain ExecutionPlanDescription description of the execution plan}.\n+   * <p>\n+   * This is {@code true} for queries executed with either the\n+   * <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/execution-plans/\">{@code EXPLAIN} or {@code PROFILE} directives</a>.\n+   *\n+   * @return {@code true} if a description of the plan should be presented to the user.\n+   */\n+  public boolean requestedExecutionPlanDescription()\n+  {\n+    return execution != Execution.QUERY;\n+  }\n+\n+  /**\n+   * Signifies that the query was executed with the\n+   * <a href=\"https://neo4j.com/docs/developer-manual/current/cypher/execution-plans/\">{@code EXPLAIN} directive</a>.\n+   *\n+   * @return {@code true} if the query was executed using the {@code EXPLAIN} directive.\n+   */\n+  public boolean isExplained()\n+  {\n+    return execution == Execution.EXPLAIN;\n+  }\n+\n+  /**\n+   * Signifies that the execution of the query could produce a result.\n+   * <p>\n+   * This is an important distinction from the result being empty.\n+   *\n+   * @return {@code true} if the execution would yield rows in the result set.\n+   */\n+  public boolean canContainResults()\n+  {\n+    return (type == QueryType.READ_ONLY || type == QueryType.READ_WRITE) && execution != Execution.EXPLAIN;\n+  }\n+\n+  /**\n+   * Signifies that the execution of the query could perform changes to the data.\n+   * <p>\n+   * {@link Result}{@link Result#getQueryStatistics() .getQueryStatistics()}{@link QueryStatistics#containsUpdates()\n+   * .containsUpdates()} signifies whether the query actually performed any updates.\n+   *\n+   * @return {@code true} if the execution could perform changes to data.\n+   */\n+  public boolean canUpdateData()\n+  {\n+    return (type == QueryType.READ_WRITE || type == QueryType.WRITE) && execution != Execution.EXPLAIN;\n+  }\n+\n+  /**\n+   * Signifies that the execution of the query updates the schema.\n+   *\n+   * @return {@code true} if the execution updates the schema.\n+   */\n+  public boolean canUpdateSchema()\n+  {\n+    return type == QueryType.SCHEMA_WRITE && execution != Execution.EXPLAIN;\n+  }\n+\n+  private final Execution execution;\n+  private final QueryType type;\n+\n+  private QueryExecutionType(Execution execution, QueryType type)\n+  {\n+    this.execution = execution;\n+    this.type = type;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return execution.toString(type);\n+  }\n+\n+  private enum Execution\n+  {\n+    QUERY\n         {\n-            return name() + \":\" + type.name();\n-        }\n+          @Override\n+          String toString(QueryType type)\n+          {\n+            return type.name();\n+          }\n+        },\n+    PROFILE,\n+    EXPLAIN,\n+    ;\n+\n+    String toString(QueryType type)\n+    {\n+      return name() + \":\" + type.name();\n     }\n+  }\n }\n",
            "diff_size": 247
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3719/QueryExecutionType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3719/QueryExecutionType.java\nindex 7c19efbab0f..c167674092f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3719/QueryExecutionType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3719/QueryExecutionType.java\n@@ -168,7 +168,7 @@ public final class QueryExecutionType\n      */\n     public boolean canContainResults()\n     {\n-        return (type == QueryType.READ_ONLY || type == QueryType.READ_WRITE) && execution != Execution.EXPLAIN;\n+        return ( type == QueryType.READ_ONLY || type == QueryType.READ_WRITE) && execution != Execution.EXPLAIN;\n     }\n \n     /**\n@@ -181,7 +181,7 @@ public final class QueryExecutionType\n      */\n     public boolean canUpdateData()\n     {\n-        return (type == QueryType.READ_WRITE || type == QueryType.WRITE) && execution != Execution.EXPLAIN;\n+        return ( type == QueryType.READ_WRITE || type == QueryType.WRITE) && execution != Execution.EXPLAIN;\n     }\n \n     /**\n@@ -212,19 +212,17 @@ public final class QueryExecutionType\n     private enum Execution\n     {\n         QUERY\n-                {\n+{\n                     @Override\n                     String toString( QueryType type )\n                     {\n                         return type.name();\n                     }\n-                },\n-        PROFILE,\n-        EXPLAIN,;\n+                }, PROFILE, EXPLAIN,;\n \n         String toString( QueryType type )\n         {\n             return name() + \":\" + type.name();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "26",
                    "severity": "error",
                    "message": "'{' at column 26 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "56",
                    "column": "26",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 567).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 570).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 571).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 539).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 529).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 593).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 598).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 599).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 529).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "176",
                    "column": "45",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "176",
                    "column": "77",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "190",
                    "column": "46",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "190",
                    "column": "73",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "201",
                    "column": "46",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "219",
                    "column": "27",
                    "severity": "error",
                    "message": "'{' at column 27 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "219",
                    "column": "27",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Annotation 'Override' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3719/QueryExecutionType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3719/QueryExecutionType.java\nindex 7c19efbab0f..d7c40d747ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3719/QueryExecutionType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3719/QueryExecutionType.java\n@@ -47,35 +47,32 @@ import static java.util.Objects.requireNonNull;\n  * {@linkplain Result#getExecutionPlanDescription() get a description of the plan} that <i>would</i> be executed\n  * if/when the query is executed normally (or under {@code PROFILE}).\n  */\n+\n public final class QueryExecutionType\n {\n     /**\n      * Signifies what type of query an {@link QueryExecutionType} executes.\n      */\n-    public enum QueryType\n-    {\n-        /** A read-only query, that does not change any data, but only produces a result. */\n-        READ_ONLY,\n-        /** A read/write query, that creates or updates data, and also produces a result. */\n-        READ_WRITE,\n-        /** A write-only query, that creates or updates data, but does not yield any rows in the result. */\n-        WRITE,\n+    public enum QueryType{\n+        /** A read-only query, that does not change any data, but only produces a result. */ READ_ONLY,\n+        /** A read/write query, that creates or updates data, and also produces a result. */ READ_WRITE,\n+        /** A write-only query, that creates or updates data, but does not yield any rows in the result. */ WRITE,\n         /**\n          * A schema changing query, that updates the schema but neither changes any data nor yields any rows in the\n          * result.\n-         */\n-        SCHEMA_WRITE,;\n-        private final QueryExecutionType query;\n-        private final QueryExecutionType profiled;\n-        private final QueryExecutionType explained;\n-\n-        QueryType()\n-        {\n-            this.query = new QueryExecutionType( Execution.QUERY, this );\n-            this.profiled = new QueryExecutionType( Execution.PROFILE, this );\n-            this.explained = new QueryExecutionType( Execution.EXPLAIN, this );\n-        }\n-    }\n+         */ SCHEMA_WRITE, ;\n+                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                private final QueryExecutionType query;\nprivate final QueryExecutionType profiled;\nprivate final QueryExecutionType explained;\n+\nueryType()\n{\nthis.query = new QueryExecutionType( Execution.QUERY, this );\nthis.profiled = new QueryExecutionType( Execution.PROFILE, this );\nthis.explained = new QueryExecutionType( Execution.EXPLAIN, this );\n}\n+\n+                         }\n \n     /**\n      * Get the {@link QueryExecutionType} that signifies normal execution of a query of the supplied type.\n@@ -83,6 +80,7 @@ public final class QueryExecutionType\n      * @param type the type of query executed.\n      * @return The instance that signifies normal execution of the supplied {@link QueryType}.\n      */\n+\n     public static QueryExecutionType query( QueryType type )\n     {\n         return requireNonNull( type, \"QueryType\" ).query;\n@@ -94,6 +92,7 @@ public final class QueryExecutionType\n      * @param type the type of query executed.\n      * @return The instance that signifies profiled execution of the supplied {@link QueryType}.\n      */\n+\n     public static QueryExecutionType profiled( QueryType type )\n     {\n         return requireNonNull( type, \"QueryType\" ).profiled;\n@@ -105,6 +104,7 @@ public final class QueryExecutionType\n      * @param type the type of query executed.\n      * @return The instance that signifies explaining the plan of the supplied {@link QueryType}.\n      */\n+\n     public static QueryExecutionType explained( QueryType type )\n     {\n         return requireNonNull( type, \"QueryType\" ).explained;\n@@ -115,6 +115,7 @@ public final class QueryExecutionType\n      *\n      * @return the type of query this execution refers to.\n      */\n+\n     public QueryType queryType()\n     {\n         return type;\n@@ -129,6 +130,7 @@ public final class QueryExecutionType\n      *\n      * @return {@code true} if the results from this execution would contain profiling information.\n      */\n+\n     public boolean isProfiled()\n     {\n         return execution == Execution.PROFILE;\n@@ -143,6 +145,7 @@ public final class QueryExecutionType\n      *\n      * @return {@code true} if a description of the plan should be presented to the user.\n      */\n+\n     public boolean requestedExecutionPlanDescription()\n     {\n         return execution != Execution.QUERY;\n@@ -154,6 +157,7 @@ public final class QueryExecutionType\n      *\n      * @return {@code true} if the query was executed using the {@code EXPLAIN} directive.\n      */\n+\n     public boolean isExplained()\n     {\n         return execution == Execution.EXPLAIN;\n@@ -166,9 +170,10 @@ public final class QueryExecutionType\n      *\n      * @return {@code true} if the execution would yield rows in the result set.\n      */\n+\n     public boolean canContainResults()\n     {\n-        return (type == QueryType.READ_ONLY || type == QueryType.READ_WRITE) && execution != Execution.EXPLAIN;\n+        return ( type == QueryType.READ_ONLY|| type == QueryType.READ_WRITE)&& execution != Execution.EXPLAIN;\n     }\n \n     /**\n@@ -179,9 +184,10 @@ public final class QueryExecutionType\n      *\n      * @return {@code true} if the execution could perform changes to data.\n      */\n+\n     public boolean canUpdateData()\n     {\n-        return (type == QueryType.READ_WRITE || type == QueryType.WRITE) && execution != Execution.EXPLAIN;\n+        return ( type == QueryType.READ_WRITE|| type == QueryType.WRITE)&& execution != Execution.EXPLAIN;\n     }\n \n     /**\n@@ -189,9 +195,10 @@ public final class QueryExecutionType\n      *\n      * @return {@code true} if the execution updates the schema.\n      */\n+\n     public boolean canUpdateSchema()\n     {\n-        return type == QueryType.SCHEMA_WRITE && execution != Execution.EXPLAIN;\n+        return type == QueryType.SCHEMA_WRITE&& execution != Execution.EXPLAIN;\n     }\n \n     private final Execution execution;\n@@ -209,22 +216,17 @@ public final class QueryExecutionType\n         return execution.toString( type );\n     }\n \n-    private enum Execution\n-    {\n-        QUERY\n-                {\n-                    @Override\n-                    String toString( QueryType type )\n-                    {\n-                        return type.name();\n-                    }\n-                },\n-        PROFILE,\n-        EXPLAIN,;\n-\n-        String toString( QueryType type )\n-        {\n-            return name() + \":\" + type.name();\n-        }\n-    }\n-}\n+    private enum Execution{ QUERY\n+                            {\n+                                @Override String toString( QueryType type )\n+                                {\n+                                    return type.name();\n+                                }\n+                            }, PROFILE, EXPLAIN, ;\n+                                                     String toString( QueryType type )\n+                                                     {\n+                                                         return name() + \":\" + type.name();\n+                                                     }\n+\n+                          }\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}