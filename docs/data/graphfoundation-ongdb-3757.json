{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3757",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "82",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3757/ZonedDateTimeSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3757/ZonedDateTimeSchemaKey.java\nindex dfa62d9c55e..6342d5496ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3757/ZonedDateTimeSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3757/ZonedDateTimeSchemaKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.time.ZoneId;\n@@ -40,96 +41,96 @@ import static java.lang.String.format;\n  */\n class ZonedDateTimeSchemaKey extends NativeSchemaKey<ZonedDateTimeSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES +    /* epochSecond */\n-            Integer.BYTES + /* nanoOfSecond */\n-            Integer.BYTES + /* timeZone */\n-            Long.BYTES;     /* entityId */\n+  static final int SIZE =\n+      Long.BYTES +    /* epochSecond */\n+          Integer.BYTES + /* nanoOfSecond */\n+          Integer.BYTES + /* timeZone */\n+          Long.BYTES;     /* entityId */\n \n-    long epochSecondUTC;\n-    int nanoOfSecond;\n-    short zoneId;\n-    int zoneOffsetSeconds;\n+  long epochSecondUTC;\n+  int nanoOfSecond;\n+  short zoneId;\n+  int zoneOffsetSeconds;\n \n-    @Override\n-    public Value asValue()\n-    {\n-        return TimeZones.validZoneId( zoneId ) ?\n-            DateTimeValue.datetime( epochSecondUTC, nanoOfSecond, ZoneId.of( TimeZones.map( zoneId ) ) ) :\n-            DateTimeValue.datetime( epochSecondUTC, nanoOfSecond, ZoneOffset.ofTotalSeconds( zoneOffsetSeconds ) );\n-    }\n+  @Override\n+  public Value asValue()\n+  {\n+    return TimeZones.validZoneId(zoneId) ?\n+        DateTimeValue.datetime(epochSecondUTC, nanoOfSecond, ZoneId.of(TimeZones.map(zoneId))) :\n+        DateTimeValue.datetime(epochSecondUTC, nanoOfSecond, ZoneOffset.ofTotalSeconds(zoneOffsetSeconds));\n+  }\n \n-    @Override\n-    public void initValueAsLowest()\n-    {\n-        epochSecondUTC = Long.MIN_VALUE;\n-        nanoOfSecond = Integer.MIN_VALUE;\n-        zoneId = Short.MIN_VALUE;\n-        zoneOffsetSeconds = Integer.MIN_VALUE;\n-    }\n+  @Override\n+  public void initValueAsLowest()\n+  {\n+    epochSecondUTC = Long.MIN_VALUE;\n+    nanoOfSecond = Integer.MIN_VALUE;\n+    zoneId = Short.MIN_VALUE;\n+    zoneOffsetSeconds = Integer.MIN_VALUE;\n+  }\n \n-    @Override\n-    public void initValueAsHighest()\n-    {\n-        epochSecondUTC = Long.MAX_VALUE;\n-        nanoOfSecond = Integer.MAX_VALUE;\n-        zoneId = Short.MAX_VALUE;\n-        zoneOffsetSeconds = Integer.MAX_VALUE;\n-    }\n+  @Override\n+  public void initValueAsHighest()\n+  {\n+    epochSecondUTC = Long.MAX_VALUE;\n+    nanoOfSecond = Integer.MAX_VALUE;\n+    zoneId = Short.MAX_VALUE;\n+    zoneOffsetSeconds = Integer.MAX_VALUE;\n+  }\n \n-    @Override\n-    public int compareValueTo( ZonedDateTimeSchemaKey other )\n+  @Override\n+  public int compareValueTo(ZonedDateTimeSchemaKey other)\n+  {\n+    int compare = Long.compare(epochSecondUTC, other.epochSecondUTC);\n+    if (compare == 0)\n     {\n-        int compare = Long.compare( epochSecondUTC, other.epochSecondUTC );\n-        if ( compare == 0 )\n-        {\n-            compare = Integer.compare( nanoOfSecond, other.nanoOfSecond );\n-            if ( compare == 0 &&\n-                    // We need to check validity upfront without throwing exceptions, because the PageCursor might give garbage bytes\n-                    TimeZones.validZoneOffset( zoneOffsetSeconds ) &&\n-                    TimeZones.validZoneOffset( other.zoneOffsetSeconds ) )\n-            {\n-                // In the rare case of comparing the same instant in different time zones, we settle for\n-                // mapping to values and comparing using the general values comparator.\n-                compare = Values.COMPARATOR.compare( asValue(), other.asValue() );\n-            }\n-        }\n-        return compare;\n+      compare = Integer.compare(nanoOfSecond, other.nanoOfSecond);\n+      if (compare == 0 &&\n+          // We need to check validity upfront without throwing exceptions, because the PageCursor might give garbage bytes\n+          TimeZones.validZoneOffset(zoneOffsetSeconds) &&\n+          TimeZones.validZoneOffset(other.zoneOffsetSeconds))\n+      {\n+        // In the rare case of comparing the same instant in different time zones, we settle for\n+        // mapping to values and comparing using the general values comparator.\n+        compare = Values.COMPARATOR.compare(asValue(), other.asValue());\n+      }\n     }\n+    return compare;\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( \"value=%s,entityId=%d,epochSecond=%d,nanoOfSecond=%d,zoneId=%d,zoneOffset=%d\",\n-                asValue(), getEntityId(), epochSecondUTC, nanoOfSecond, zoneId, zoneOffsetSeconds );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"value=%s,entityId=%d,epochSecond=%d,nanoOfSecond=%d,zoneId=%d,zoneOffset=%d\",\n+        asValue(), getEntityId(), epochSecondUTC, nanoOfSecond, zoneId, zoneOffsetSeconds);\n+  }\n \n-    @Override\n-    public void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds )\n-    {\n-        this.epochSecondUTC = epochSecondUTC;\n-        this.nanoOfSecond = nano;\n-        this.zoneOffsetSeconds = offsetSeconds;\n-        this.zoneId = -1;\n-    }\n+  @Override\n+  public void writeDateTime(long epochSecondUTC, int nano, int offsetSeconds)\n+  {\n+    this.epochSecondUTC = epochSecondUTC;\n+    this.nanoOfSecond = nano;\n+    this.zoneOffsetSeconds = offsetSeconds;\n+    this.zoneId = -1;\n+  }\n \n-    @Override\n-    public void writeDateTime( long epochSecondUTC, int nano, String zoneId )\n-    {\n-        this.epochSecondUTC = epochSecondUTC;\n-        this.nanoOfSecond = nano;\n-        this.zoneId = TimeZones.map( zoneId );\n-        this.zoneOffsetSeconds = 0;\n-    }\n+  @Override\n+  public void writeDateTime(long epochSecondUTC, int nano, String zoneId)\n+  {\n+    this.epochSecondUTC = epochSecondUTC;\n+    this.nanoOfSecond = nano;\n+    this.zoneId = TimeZones.map(zoneId);\n+    this.zoneOffsetSeconds = 0;\n+  }\n \n-    @Override\n-    protected Value assertCorrectType( Value value )\n+  @Override\n+  protected Value assertCorrectType(Value value)\n+  {\n+    if (!(value instanceof DateTimeValue))\n     {\n-        if ( !(value instanceof DateTimeValue) )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support DateTimeValue, tried to create key from \" + value );\n-        }\n-        return value;\n+      throw new IllegalArgumentException(\n+          \"Key layout does only support DateTimeValue, tried to create key from \" + value);\n     }\n+    return value;\n+  }\n }\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3757/ZonedDateTimeSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3757/ZonedDateTimeSchemaKey.java\nindex dfa62d9c55e..b1fff9042c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3757/ZonedDateTimeSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3757/ZonedDateTimeSchemaKey.java\n@@ -40,13 +40,12 @@ import static java.lang.String.format;\n  */\n class ZonedDateTimeSchemaKey extends NativeSchemaKey<ZonedDateTimeSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES +    /* epochSecond */\n+    static final int SIZE = Long.BYTES + /* epochSecond */\n             Integer.BYTES + /* nanoOfSecond */\n             Integer.BYTES + /* timeZone */\n-            Long.BYTES;     /* entityId */\n-\n-    long epochSecondUTC;\n+            Long.BYTES;\n+/* entityId */\n+long epochSecondUTC;\n     int nanoOfSecond;\n     short zoneId;\n     int zoneOffsetSeconds;\n@@ -54,9 +53,7 @@ class ZonedDateTimeSchemaKey extends NativeSchemaKey<ZonedDateTimeSchemaKey>\n     @Override\n     public Value asValue()\n     {\n-        return TimeZones.validZoneId( zoneId ) ?\n-            DateTimeValue.datetime( epochSecondUTC, nanoOfSecond, ZoneId.of( TimeZones.map( zoneId ) ) ) :\n-            DateTimeValue.datetime( epochSecondUTC, nanoOfSecond, ZoneOffset.ofTotalSeconds( zoneOffsetSeconds ) );\n+        return TimeZones.validZoneId( zoneId ) ? DateTimeValue.datetime( epochSecondUTC, nanoOfSecond, ZoneId.of( TimeZones.map( zoneId ) ) ) : DateTimeValue.datetime( epochSecondUTC, nanoOfSecond, ZoneOffset.ofTotalSeconds( zoneOffsetSeconds ) );\n     }\n \n     @Override\n@@ -125,11 +122,11 @@ class ZonedDateTimeSchemaKey extends NativeSchemaKey<ZonedDateTimeSchemaKey>\n     @Override\n     protected Value assertCorrectType( Value value )\n     {\n-        if ( !(value instanceof DateTimeValue) )\n+        if ( !( value instanceof DateTimeValue) )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support DateTimeValue, tried to create key from \" + value );\n+            throw new IllegalArgumentException( \"Key layout does only support DateTimeValue, tried to create key from \" + value );\n         }\n-        return value;\n+\n+return value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}