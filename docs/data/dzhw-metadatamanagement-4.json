{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "85",
                "severity": "error",
                "message": "'}' at column 85 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(FilterExpressionAndLanguageNotEmpty constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "26",
                    "column": "85",
                    "severity": "error",
                    "message": "'}' at column 85 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/4/FilterExpressionAndLanguageNotEmptyValidator.java\nindex c4fb344076f..6b15bdac8f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/4/FilterExpressionAndLanguageNotEmptyValidator.java\n@@ -10,47 +10,47 @@ import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.FilterDetails;\n /**\n  * Ensure that either both of filterDetails.expressionLanguage and filterDetails.expression are set\n  * or none of them.\n- * \n- * @author Ren\u00e9 Reitmann\n  *\n+ * @author Ren\u00e9 Reitmann\n  */\n public class FilterExpressionAndLanguageNotEmptyValidator\n     implements ConstraintValidator<FilterExpressionAndLanguageNotEmpty, FilterDetails> {\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(FilterExpressionAndLanguageNotEmpty constraintAnnotation) {}\n+  public void initialize(FilterExpressionAndLanguageNotEmpty constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n   @Override\n   public boolean isValid(FilterDetails filterDetails, ConstraintValidatorContext context) {\n-    \n+\n     //check for generation details\n     if (filterDetails == null) {\n       return true;\n     }\n-    \n+\n     // checks if both are present\n     if (!Strings.isNullOrEmpty(filterDetails.getExpression())\n         && !Strings.isNullOrEmpty(filterDetails.getExpressionLanguage())) {\n       return true;\n     }\n-    \n+\n     // checks if none is present\n     if (Strings.isNullOrEmpty(filterDetails.getExpression())\n         && Strings.isNullOrEmpty(filterDetails.getExpressionLanguage())) {\n       return true;\n     }\n-      \n+\n     return false;\n   }\n }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "column": "85",
                    "severity": "error",
                    "message": "'}' at column 85 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/4/FilterExpressionAndLanguageNotEmptyValidator.java\nindex c4fb344076f..130cae33ee5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/4/FilterExpressionAndLanguageNotEmptyValidator.java\n@@ -50,7 +50,6 @@ public class FilterExpressionAndLanguageNotEmptyValidator\n         && Strings.isNullOrEmpty(filterDetails.getExpressionLanguage())) {\n       return true;\n     }\n-      \n-    return false;\n+return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'ConstraintValidatorContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/4/FilterExpressionAndLanguageNotEmptyValidator.java\nindex c4fb344076f..ca91791df7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/4/FilterExpressionAndLanguageNotEmptyValidator.java\n@@ -2,9 +2,7 @@ package eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import com.google.common.base.Strings;\n-\n import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.FilterDetails;\n \n /**\n@@ -14,16 +12,20 @@ import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.FilterDetails;\n  * @author Ren\u00e9 Reitmann\n  *\n  */\n-public class FilterExpressionAndLanguageNotEmptyValidator\n-    implements ConstraintValidator<FilterExpressionAndLanguageNotEmpty, FilterDetails> {\n+\n+\n+public class FilterExpressionAndLanguageNotEmptyValidator implements ConstraintValidator<FilterExpressionAndLanguageNotEmpty, FilterDetails> {\n \n   /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n+\n   @Override\n-  public void initialize(FilterExpressionAndLanguageNotEmpty constraintAnnotation) {}\n+  public void initialize(FilterExpressionAndLanguageNotEmpty constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n@@ -31,8 +33,11 @@ public class FilterExpressionAndLanguageNotEmptyValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n+\n+\n   @Override\n-  public boolean isValid(FilterDetails filterDetails, ConstraintValidatorContext context) {\n+  public boolean isValid(FilterDetails filterDetails,\n+    ConstraintValidatorContext context) {\n     \n     //check for generation details\n     if (filterDetails == null) {\n@@ -40,17 +45,15 @@ public class FilterExpressionAndLanguageNotEmptyValidator\n     }\n     \n     // checks if both are present\n-    if (!Strings.isNullOrEmpty(filterDetails.getExpression())\n-        && !Strings.isNullOrEmpty(filterDetails.getExpressionLanguage())) {\n+    if (!Strings.isNullOrEmpty(filterDetails.getExpression()) && !Strings.isNullOrEmpty(filterDetails.getExpressionLanguage())) {\n       return true;\n     }\n     \n     // checks if none is present\n-    if (Strings.isNullOrEmpty(filterDetails.getExpression())\n-        && Strings.isNullOrEmpty(filterDetails.getExpressionLanguage())) {\n+    if (Strings.isNullOrEmpty(filterDetails.getExpression()) && Strings.isNullOrEmpty(filterDetails.getExpressionLanguage())) {\n       return true;\n     }\n-      \n+\n     return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "26",
                    "column": "85",
                    "severity": "error",
                    "message": "'}' at column 85 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "column": "85",
                    "severity": "error",
                    "message": "'}' at column 85 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/4/FilterExpressionAndLanguageNotEmptyValidator.java\nindex c4fb344076f..cec459dae10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/4/FilterExpressionAndLanguageNotEmptyValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/4/FilterExpressionAndLanguageNotEmptyValidator.java\n@@ -24,7 +24,6 @@ public class FilterExpressionAndLanguageNotEmptyValidator\n    */\n   @Override\n   public void initialize(FilterExpressionAndLanguageNotEmpty constraintAnnotation) {}\n-\n   /*\n    * (non-Javadoc)\n    * \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}