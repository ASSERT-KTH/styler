{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "309",
    "information": {
        "errors": [
            {
                "line": "12",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class TestDocumentCreationWithBuilder <N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\n{\n\tprivate final String DOC_TYPE_DECL = null;\n\tprivate final DtdAttributeKind DTD_ATT_KIND = null;\n\t\n    FragmentBuilder<N> m_fragBuilder;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/309/TestDocumentCreationWithBuilder.java\nindex 46c326e5035..b8c4986b008 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/309/TestDocumentCreationWithBuilder.java\n@@ -9,7 +9,7 @@ import org.genxdm.io.FragmentBuilder;\n \r\n public class TestDocumentCreationWithBuilder <N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\r\n {\r\n-\tprivate final String DOC_TYPE_DECL = null;\r\n+private final String DOC_TYPE_DECL = null;\r\n \tprivate final DtdAttributeKind DTD_ATT_KIND = null;\r\n \t\r\n     FragmentBuilder<N> m_fragBuilder;\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/309/TestDocumentCreationWithBuilder.java\nindex 46c326e5035..5af170e6087 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/309/TestDocumentCreationWithBuilder.java\n@@ -7,98 +7,104 @@ import java.util.Map;\n import org.genxdm.io.DtdAttributeKind;\r\n import org.genxdm.io.FragmentBuilder;\r\n \r\n-public class TestDocumentCreationWithBuilder <N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\r\n-{\r\n-\tprivate final String DOC_TYPE_DECL = null;\r\n-\tprivate final DtdAttributeKind DTD_ATT_KIND = null;\r\n-\t\r\n+public class TestDocumentCreationWithBuilder<N, A> extends BaseBridgePerfTest<N, A>\r\n+    implements MutationPerfTestConstants {\r\n+    private final String DOC_TYPE_DECL = null;\r\n+\r\n+    private final DtdAttributeKind DTD_ATT_KIND = null;\r\n+\r\n     FragmentBuilder<N> m_fragBuilder;\r\n-\tint m_depth;\r\n-\tint m_width;\r\n-\t\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\tlong size = 1;\r\n-\t\tfor(int icnt = 1; icnt <= m_depth; icnt++)\r\n-\t\t{\r\n-\t\t\tsize += Math.pow(m_width, icnt);\r\n-\t\t}\r\n-\t\treturn \"Document creation via builder: \" + size + \" elements\";\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\r\n-\t{\r\n-\t\tsuper.initialSetup(props);\r\n-\t\tString depth = (String)props.get(DOC_CREATE_DEPTH_NAME);\r\n-\t\tif(depth == null)\r\n-\t\t\tm_depth = DOC_CREATE_DEPTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_depth = Integer.parseInt(depth);\r\n-\r\n-\t\tString width = (String)props.get(DOC_CREATE_WIDTH_NAME);\r\n-\t\tif(width == null)\r\n-\t\t\tm_width = DOC_CREATE_WIDTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_width = Integer.parseInt(width);\r\n-\t}\r\n-\t@Override\r\n-\tpublic void iterativeSetup() {\r\n-\t\t\r\n-\t\tm_fragBuilder = getPcx().newFragmentBuilder();\r\n-\t}\r\n-\t@Override\r\n-\tpublic void finalTeardown()\t{\r\n-\t\tm_fragBuilder = null;\r\n-\t\tsuper.finalTeardown();\r\n-\t}\r\n-\t@Override\r\n-\tpublic void execute() {\r\n-\t\t/* // Create a new document. */\r\n-\t\ttry {\r\n-\t\t\tm_fragBuilder.startDocument(new URI(DOC_CREATE_NS), DOC_TYPE_DECL);\r\n-\t\t\t{\r\n-\t\t\t\tm_fragBuilder.startElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n-\t\t\t\t{\r\n-\t\t\t\t\tappendChildren(DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\r\n-\t\t\t\t}\r\n-\t\t\t\tm_fragBuilder.endElement();\r\n-\t\t\t}\r\n-\t\t} catch (URISyntaxException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t\tm_fragBuilder.endDocument();\r\n-\t}\r\n-\tprivate void appendChildren(String ns, String prefix, String childName, String[][] atts, String textValues[], int depth, int width)\r\n-\t{\r\n-\t\t// Add children\r\n-\t\tfor(int icnt = 0; icnt < width; icnt++)\r\n-\t\t{\r\n-\t\t\tm_fragBuilder.startElement(ns, childName, prefix);\r\n-\t\t\t{\r\n-\t\t\t\t// Add attributes\r\n-\t\t\t\tfor(String[] att : atts)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tm_fragBuilder.attribute(ns, att[0], prefix, att[1], DTD_ATT_KIND);\r\n-\t\t\t\t}\r\n-\t\t\t\t// If not leaf node, add children\r\n-\t\t\t\tif(depth > 1)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdepth--;\r\n-\t\t\t\t\tappendChildren(ns, prefix, childName, atts, textValues, depth, width);\r\n-\t\t\t\t}\r\n-\t\t\t\t// Else if leaf node, add text values\r\n-\t\t\t\telse\r\n-\t\t\t\t{\r\n-\t\t\t\t\tfor(String textValue : textValues)\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\tm_fragBuilder.text(textValue);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\tm_fragBuilder.endElement();\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n+\r\n+    int m_depth;\r\n+\r\n+    int m_width;\r\n+\r\n+    @Override\r\n+    public String getTestName() {\r\n+        long size = 1;\r\n+        for (int icnt = 1; icnt <= m_depth; icnt++) {\r\n+            size += Math.pow(m_width, icnt);\r\n+        }\r\n+        return \"Document creation via builder: \" + size + \" elements\";\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialSetup(Map<String, Object> props) {\r\n+        super.initialSetup(props);\r\n+        String depth = (String) props.get(DOC_CREATE_DEPTH_NAME);\r\n+        if (depth == null) {\r\n+            m_depth = DOC_CREATE_DEPTH_DEFAULT;\r\n+        } else {\r\n+            m_depth = Integer.parseInt(depth);\r\n+        }\r\n+\r\n+        String width = (String) props.get(DOC_CREATE_WIDTH_NAME);\r\n+        if (width == null) {\r\n+            m_width = DOC_CREATE_WIDTH_DEFAULT;\r\n+        } else {\r\n+            m_width = Integer.parseInt(width);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void iterativeSetup() {\r\n+\r\n+        m_fragBuilder = getPcx().newFragmentBuilder();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void finalTeardown() {\r\n+        m_fragBuilder = null;\r\n+        super.finalTeardown();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void execute() {\r\n+        /* // Create a new document. */\r\n+        try {\r\n+            m_fragBuilder.startDocument(new URI(DOC_CREATE_NS), DOC_TYPE_DECL);\r\n+            {\r\n+                m_fragBuilder.startElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n+                {\r\n+                    appendChildren(DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME,\r\n+                        DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\r\n+                }\r\n+                m_fragBuilder.endElement();\r\n+            }\r\n+        } catch (URISyntaxException e) {\r\n+            throw new RuntimeException(e);\r\n+        }\r\n+        m_fragBuilder.endDocument();\r\n+    }\r\n+\r\n+    private void appendChildren(String ns, String prefix, String childName, String[][] atts,\r\n+                                String textValues[], int depth, int width) {\r\n+        // Add children\r\n+        for (int icnt = 0; icnt < width; icnt++) {\r\n+            m_fragBuilder.startElement(ns, childName, prefix);\r\n+            {\r\n+                // Add attributes\r\n+                for (String[] att : atts) {\r\n+                    m_fragBuilder.attribute(ns, att[0], prefix, att[1], DTD_ATT_KIND);\r\n+                }\r\n+                // If not leaf node, add children\r\n+                if (depth > 1) {\r\n+                    depth--;\r\n+                    appendChildren(ns, prefix, childName, atts, textValues, depth, width);\r\n+                }\r\n+                // Else if leaf node, add text values\r\n+                else {\r\n+                    for (String textValue : textValues) {\r\n+                        m_fragBuilder.text(textValue);\r\n+                    }\r\n+                }\r\n+            }\r\n+            m_fragBuilder.endElement();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public Iterable<String> iterativeTeardown() {\r\n+        return null;\r\n+    }\r\n }\r\n",
            "diff_size": 99
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/309/TestDocumentCreationWithBuilder.java\nindex 46c326e5035..fb1a803641c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/309/TestDocumentCreationWithBuilder.java\n@@ -7,98 +7,97 @@ import java.util.Map;\n import org.genxdm.io.DtdAttributeKind;\r\n import org.genxdm.io.FragmentBuilder;\r\n \r\n-public class TestDocumentCreationWithBuilder <N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\r\n-{\r\n-\tprivate final String DOC_TYPE_DECL = null;\r\n+public class TestDocumentCreationWithBuilder<N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\r\n+{\n+    private final String DOC_TYPE_DECL = null;\r\n \tprivate final DtdAttributeKind DTD_ATT_KIND = null;\r\n \t\r\n     FragmentBuilder<N> m_fragBuilder;\r\n \tint m_depth;\r\n-\tint m_width;\r\n-\t\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\tlong size = 1;\r\n-\t\tfor(int icnt = 1; icnt <= m_depth; icnt++)\r\n-\t\t{\r\n-\t\t\tsize += Math.pow(m_width, icnt);\r\n-\t\t}\r\n-\t\treturn \"Document creation via builder: \" + size + \" elements\";\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\r\n-\t{\r\n-\t\tsuper.initialSetup(props);\r\n+\tint m_width;\n+\n+@Override\n+public String getTestName() {\n+    long size = 1;\r\n+\t\tfor (int icnt = 1; icnt <= m_depth; icnt++)\r\n+\t\t{\n+    size += Math.pow(m_width, icnt);\n+    }\r\n+\t\treturn \"Document creation via builder: \" + size + \" elements\";\n+    }\n+\n+@Override\n+public void initialSetup(Map<String,Object> props)\r\n+\t{\n+    super.initialSetup(props);\r\n \t\tString depth = (String)props.get(DOC_CREATE_DEPTH_NAME);\r\n-\t\tif(depth == null)\r\n-\t\t\tm_depth = DOC_CREATE_DEPTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_depth = Integer.parseInt(depth);\r\n-\r\n-\t\tString width = (String)props.get(DOC_CREATE_WIDTH_NAME);\r\n-\t\tif(width == null)\r\n-\t\t\tm_width = DOC_CREATE_WIDTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_width = Integer.parseInt(width);\r\n-\t}\r\n+\t\tif (depth == null)\n+    m_depth = DOC_CREATE_DEPTH_DEFAULT;\n+    else\n+    m_depth = Integer.parseInt(depth);\n+String width = (String)props.get(DOC_CREATE_WIDTH_NAME);\r\n+\t\tif (width == null)\n+    m_width = DOC_CREATE_WIDTH_DEFAULT;\n+    else\n+    m_width = Integer.parseInt(width);\n+    }\r\n \t@Override\r\n-\tpublic void iterativeSetup() {\r\n-\t\t\r\n-\t\tm_fragBuilder = getPcx().newFragmentBuilder();\r\n-\t}\r\n+\tpublic void iterativeSetup() {\n+    m_fragBuilder = getPcx().newFragmentBuilder();\n+    }\r\n \t@Override\r\n-\tpublic void finalTeardown()\t{\r\n-\t\tm_fragBuilder = null;\r\n-\t\tsuper.finalTeardown();\r\n-\t}\r\n+\tpublic void finalTeardown()\n+{\n+    m_fragBuilder = null;\r\n+\t\tsuper.finalTeardown();\n+    }\r\n \t@Override\r\n-\tpublic void execute() {\r\n-\t\t/* // Create a new document. */\r\n-\t\ttry {\r\n-\t\t\tm_fragBuilder.startDocument(new URI(DOC_CREATE_NS), DOC_TYPE_DECL);\r\n-\t\t\t{\r\n-\t\t\t\tm_fragBuilder.startElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n-\t\t\t\t{\r\n-\t\t\t\t\tappendChildren(DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\r\n-\t\t\t\t}\r\n-\t\t\t\tm_fragBuilder.endElement();\r\n-\t\t\t}\r\n-\t\t} catch (URISyntaxException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t\tm_fragBuilder.endDocument();\r\n-\t}\r\n+\tpublic void execute() { /* // Create a new document. */\r\n+\t\ttry {\n+    m_fragBuilder.startDocument(new URI(DOC_CREATE_NS), DOC_TYPE_DECL);\r\n+\t\t\t{\n+    m_fragBuilder.startElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n+\t\t\t\t{\n+    appendChildren(DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\n+    }\r\n+\t\t\t\tm_fragBuilder.endElement();\n+    }\n+    } catch (URISyntaxException e) {\n+    throw new RuntimeException(e);\n+    }\r\n+\t\tm_fragBuilder.endDocument();\n+    }\r\n \tprivate void appendChildren(String ns, String prefix, String childName, String[][] atts, String textValues[], int depth, int width)\r\n-\t{\r\n-\t\t// Add children\r\n-\t\tfor(int icnt = 0; icnt < width; icnt++)\r\n-\t\t{\r\n-\t\t\tm_fragBuilder.startElement(ns, childName, prefix);\r\n-\t\t\t{\r\n-\t\t\t\t// Add attributes\r\n-\t\t\t\tfor(String[] att : atts)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tm_fragBuilder.attribute(ns, att[0], prefix, att[1], DTD_ATT_KIND);\r\n-\t\t\t\t}\r\n+\t{\n+    // Add children\r\n+\t\tfor (int icnt = 0; icnt < width; icnt++)\r\n+\t\t{\n+    m_fragBuilder.startElement(ns, childName, prefix);\r\n+\t\t\t{\n+    // Add attributes\r\n+\t\t\t\tfor (String[] att : atts)\r\n+\t\t\t\t{\n+    m_fragBuilder.attribute(ns, att[0], prefix, att[1], DTD_ATT_KIND);\n+    }\r\n \t\t\t\t// If not leaf node, add children\r\n-\t\t\t\tif(depth > 1)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdepth--;\r\n-\t\t\t\t\tappendChildren(ns, prefix, childName, atts, textValues, depth, width);\r\n-\t\t\t\t}\r\n+\t\t\t\tif (depth > 1)\r\n+\t\t\t\t{\n+    depth--;\r\n+\t\t\t\t\tappendChildren(ns, prefix, childName, atts, textValues, depth, width);\n+    }\r\n \t\t\t\t// Else if leaf node, add text values\r\n \t\t\t\telse\r\n-\t\t\t\t{\r\n-\t\t\t\t\tfor(String textValue : textValues)\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\tm_fragBuilder.text(textValue);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\tm_fragBuilder.endElement();\r\n-\t\t}\r\n-\t}\r\n+\t\t\t\t{\n+    for (String textValue : textValues)\r\n+\t\t\t\t\t{\n+    m_fragBuilder.text(textValue);\n+    }\n+    }\n+    }\r\n+\t\t\tm_fragBuilder.endElement();\n+    }\n+    }\r\n \t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n-}\r\n+\tpublic Iterable<String> iterativeTeardown() { return null;\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 84
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/309/TestDocumentCreationWithBuilder.java\nindex 46c326e5035..64851c581ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/309/TestDocumentCreationWithBuilder.java\n@@ -1,104 +1,117 @@\n-package org.genxdm.samples.performance.bridges;\r\n-\r\n-import java.net.URI;\r\n-import java.net.URISyntaxException;\r\n-import java.util.Map;\r\n-\r\n-import org.genxdm.io.DtdAttributeKind;\r\n-import org.genxdm.io.FragmentBuilder;\r\n-\r\n-public class TestDocumentCreationWithBuilder <N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\r\n-{\r\n-\tprivate final String DOC_TYPE_DECL = null;\r\n-\tprivate final DtdAttributeKind DTD_ATT_KIND = null;\r\n-\t\r\n-    FragmentBuilder<N> m_fragBuilder;\r\n-\tint m_depth;\r\n-\tint m_width;\r\n-\t\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\tlong size = 1;\r\n-\t\tfor(int icnt = 1; icnt <= m_depth; icnt++)\r\n-\t\t{\r\n-\t\t\tsize += Math.pow(m_width, icnt);\r\n-\t\t}\r\n-\t\treturn \"Document creation via builder: \" + size + \" elements\";\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\r\n-\t{\r\n-\t\tsuper.initialSetup(props);\r\n-\t\tString depth = (String)props.get(DOC_CREATE_DEPTH_NAME);\r\n-\t\tif(depth == null)\r\n-\t\t\tm_depth = DOC_CREATE_DEPTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_depth = Integer.parseInt(depth);\r\n-\r\n-\t\tString width = (String)props.get(DOC_CREATE_WIDTH_NAME);\r\n-\t\tif(width == null)\r\n-\t\t\tm_width = DOC_CREATE_WIDTH_DEFAULT;\r\n-\t\telse\r\n-\t\t\tm_width = Integer.parseInt(width);\r\n-\t}\r\n-\t@Override\r\n-\tpublic void iterativeSetup() {\r\n-\t\t\r\n-\t\tm_fragBuilder = getPcx().newFragmentBuilder();\r\n-\t}\r\n-\t@Override\r\n-\tpublic void finalTeardown()\t{\r\n-\t\tm_fragBuilder = null;\r\n-\t\tsuper.finalTeardown();\r\n-\t}\r\n-\t@Override\r\n-\tpublic void execute() {\r\n-\t\t/* // Create a new document. */\r\n-\t\ttry {\r\n-\t\t\tm_fragBuilder.startDocument(new URI(DOC_CREATE_NS), DOC_TYPE_DECL);\r\n-\t\t\t{\r\n-\t\t\t\tm_fragBuilder.startElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\r\n-\t\t\t\t{\r\n-\t\t\t\t\tappendChildren(DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\r\n-\t\t\t\t}\r\n-\t\t\t\tm_fragBuilder.endElement();\r\n-\t\t\t}\r\n-\t\t} catch (URISyntaxException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t\tm_fragBuilder.endDocument();\r\n-\t}\r\n-\tprivate void appendChildren(String ns, String prefix, String childName, String[][] atts, String textValues[], int depth, int width)\r\n-\t{\r\n-\t\t// Add children\r\n-\t\tfor(int icnt = 0; icnt < width; icnt++)\r\n-\t\t{\r\n-\t\t\tm_fragBuilder.startElement(ns, childName, prefix);\r\n-\t\t\t{\r\n-\t\t\t\t// Add attributes\r\n-\t\t\t\tfor(String[] att : atts)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tm_fragBuilder.attribute(ns, att[0], prefix, att[1], DTD_ATT_KIND);\r\n-\t\t\t\t}\r\n-\t\t\t\t// If not leaf node, add children\r\n-\t\t\t\tif(depth > 1)\r\n-\t\t\t\t{\r\n-\t\t\t\t\tdepth--;\r\n-\t\t\t\t\tappendChildren(ns, prefix, childName, atts, textValues, depth, width);\r\n-\t\t\t\t}\r\n-\t\t\t\t// Else if leaf node, add text values\r\n-\t\t\t\telse\r\n-\t\t\t\t{\r\n-\t\t\t\t\tfor(String textValue : textValues)\r\n-\t\t\t\t\t{\r\n-\t\t\t\t\t\tm_fragBuilder.text(textValue);\r\n-\t\t\t\t\t}\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\tm_fragBuilder.endElement();\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n-}\r\n+package org.genxdm.samples.performance.bridges;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+import org.genxdm.io.DtdAttributeKind;\n+import org.genxdm.io.FragmentBuilder;\n+\n+public class TestDocumentCreationWithBuilder<N, A>\n+    extends BaseBridgePerfTest<N, A>\n+    implements MutationPerfTestConstants\n+{\n+    private final String DOC_TYPE_DECL = null;\n+    private final DtdAttributeKind DTD_ATT_KIND = null;\n+    FragmentBuilder<N> m_fragBuilder;\n+    int m_depth;\n+    int m_width;\n+\n+    @Override\n+    public String getTestName()\n+    {\n+        long size = 1;\n+        for (int icnt = 1; icnt <= m_depth; icnt++)\n+        {\n+            size += Math.pow(m_width, icnt);\n+        }\n+        return \"Document creation via builder: \" + size + \" elements\";\n+    }\n+\n+    @Override\n+    public void initialSetup(Map<String, Object> props)\n+    {\n+        super.initialSetup(props);\n+        String depth = (String)props.get(DOC_CREATE_DEPTH_NAME);\n+        if (depth == null)\n+            m_depth = DOC_CREATE_DEPTH_DEFAULT;\n+        else\n+            m_depth = Integer.parseInt(depth);\n+        String width = (String)props.get(DOC_CREATE_WIDTH_NAME);\n+        if (width == null)\n+            m_width = DOC_CREATE_WIDTH_DEFAULT;\n+        else\n+            m_width = Integer.parseInt(width);\n+    }\n+\n+    @Override\n+    public void iterativeSetup()\n+    {\n+        m_fragBuilder = getPcx().newFragmentBuilder();\n+    }\n+\n+    @Override\n+    public void finalTeardown()\n+    {\n+        m_fragBuilder = null;\n+        super.finalTeardown();\n+    }\n+\n+    @Override\n+    public void execute()\n+    {\r\n+        /* // Create a new document. */\n+        try\n+        {\n+            m_fragBuilder.startDocument(new URI(DOC_CREATE_NS), DOC_TYPE_DECL);\n+            {\n+                m_fragBuilder.startElement(DOC_CREATE_NS, DOC_CREATE_ROOT_NAME, DOC_CREATE_PREFIX);\n+                {\n+                    appendChildren(DOC_CREATE_NS, DOC_CREATE_PREFIX, DOC_CREATE_CHILD_NAME, DOC_CREATE_ATTS, DOC_CREATE_TEXT_VALUES, m_depth, m_width);\n+                }\n+                m_fragBuilder.endElement();\n+            }\n+        }\n+        catch (URISyntaxException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+        m_fragBuilder.endDocument();\n+    }\n+\n+    private void appendChildren(String ns, String prefix, String childName, String[][] atts, String textValues[], int depth, int width)\n+    {\r\n+        // Add children\n+        for (int icnt = 0; icnt < width; icnt++)\n+        {\n+            m_fragBuilder.startElement(ns, childName, prefix);\n+            {\r\n+                // Add attributes\n+                for (String[] att : atts)\n+                {\n+                    m_fragBuilder.attribute(ns, att[0], prefix, att[1], DTD_ATT_KIND);\n+                }\r\n+                // If not leaf node, add children\n+                if (depth > 1)\n+                {\n+                    depth--;\n+                    appendChildren(ns, prefix, childName, atts, textValues, depth, width);\n+                }\r\n+                // Else if leaf node, add text values\n+                else\n+                {\n+                    for (String textValue : textValues)\n+                    {\n+                        m_fragBuilder.text(textValue);\n+                    }\n+                }\n+            }\n+            m_fragBuilder.endElement();\n+        }\n+    }\n+\n+    @Override\n+    public Iterable<String> iterativeTeardown()\n+    {\n+        return null;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/309/TestDocumentCreationWithBuilder.java\nindex 46c326e5035..b8c4986b008 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/309/TestDocumentCreationWithBuilder.java\n@@ -9,7 +9,7 @@ import org.genxdm.io.FragmentBuilder;\n \r\n public class TestDocumentCreationWithBuilder <N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\r\n {\r\n-\tprivate final String DOC_TYPE_DECL = null;\r\n+private final String DOC_TYPE_DECL = null;\r\n \tprivate final DtdAttributeKind DTD_ATT_KIND = null;\r\n \t\r\n     FragmentBuilder<N> m_fragBuilder;\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/309/TestDocumentCreationWithBuilder.java\nindex 46c326e5035..b05a7b41035 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/309/TestDocumentCreationWithBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/309/TestDocumentCreationWithBuilder.java\n@@ -9,7 +9,7 @@ import org.genxdm.io.FragmentBuilder;\n \r\n public class TestDocumentCreationWithBuilder <N,A> extends BaseBridgePerfTest<N,A> implements MutationPerfTestConstants\r\n {\r\n-\tprivate final String DOC_TYPE_DECL = null;\r\n+    private final String DOC_TYPE_DECL = null;\r\n \tprivate final DtdAttributeKind DTD_ATT_KIND = null;\r\n \t\r\n     FragmentBuilder<N> m_fragBuilder;\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}