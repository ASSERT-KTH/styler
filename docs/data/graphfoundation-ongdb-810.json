{
    "project_name": "graphfoundation-ongdb",
    "error_id": "810",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "88",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/810/TransactionIdTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/810/TransactionIdTracker.java\nindex 820158bebb6..e9952bee3b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/810/TransactionIdTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/810/TransactionIdTracker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.txtracking;\n \n import java.time.Duration;\n@@ -36,87 +37,86 @@ import static org.neo4j.kernel.impl.transaction.log.TransactionIdStore.BASE_TX_I\n  */\n public class TransactionIdTracker\n {\n-    private final Supplier<TransactionIdStore> transactionIdStoreSupplier;\n-    private final AvailabilityGuard availabilityGuard;\n+  private final Supplier<TransactionIdStore> transactionIdStoreSupplier;\n+  private final AvailabilityGuard availabilityGuard;\n \n-    public TransactionIdTracker( Supplier<TransactionIdStore> transactionIdStoreSupplier, AvailabilityGuard availabilityGuard )\n-    {\n-        this.availabilityGuard = availabilityGuard;\n-        this.transactionIdStoreSupplier = transactionIdStoreSupplier;\n-    }\n+  public TransactionIdTracker(Supplier<TransactionIdStore> transactionIdStoreSupplier, AvailabilityGuard availabilityGuard)\n+  {\n+    this.availabilityGuard = availabilityGuard;\n+    this.transactionIdStoreSupplier = transactionIdStoreSupplier;\n+  }\n \n-    /**\n-     * Wait for a specific transaction (the Oldest Acceptable Transaction - OAT) to have been applied before\n-     * continuing. This method is useful in a clustered deployment, where different members of the cluster are expected\n-     * to apply transactions at slightly different times.\n-     * <p>\n-     * We assume the OAT will always have been applied on one member of the cluster, therefore it is sensible to wait\n-     * for it to be applied on this member.\n-     * <p>\n-     * The effect is either:\n-     * <ol>\n-     *     <li>If the transaction in question has already been applied, return immediately.\n-     *     This is the most common case because we expect the interval between dependent requests from the client\n-     *     to be longer than the replication lag between cluster members.</li>\n-     *     <li>The transaction has not yet been applied, block until the background replication process has applied it,\n-     *     or timeout.</li>\n-     * </ol>\n-     *\n-     * @param oldestAcceptableTxId id of the Oldest Acceptable Transaction (OAT) that must have been applied before\n-     *                             continuing work.\n-     * @param timeout maximum duration to wait for OAT to be applied\n-     * @throws TransactionFailureException when OAT did not get applied within the given duration\n-     */\n-    public void awaitUpToDate( long oldestAcceptableTxId, Duration timeout ) throws TransactionFailureException\n+  /**\n+   * Wait for a specific transaction (the Oldest Acceptable Transaction - OAT) to have been applied before\n+   * continuing. This method is useful in a clustered deployment, where different members of the cluster are expected\n+   * to apply transactions at slightly different times.\n+   * <p>\n+   * We assume the OAT will always have been applied on one member of the cluster, therefore it is sensible to wait\n+   * for it to be applied on this member.\n+   * <p>\n+   * The effect is either:\n+   * <ol>\n+   *     <li>If the transaction in question has already been applied, return immediately.\n+   *     This is the most common case because we expect the interval between dependent requests from the client\n+   *     to be longer than the replication lag between cluster members.</li>\n+   *     <li>The transaction has not yet been applied, block until the background replication process has applied it,\n+   *     or timeout.</li>\n+   * </ol>\n+   *\n+   * @param oldestAcceptableTxId id of the Oldest Acceptable Transaction (OAT) that must have been applied before\n+   *                             continuing work.\n+   * @param timeout              maximum duration to wait for OAT to be applied\n+   * @throws TransactionFailureException when OAT did not get applied within the given duration\n+   */\n+  public void awaitUpToDate(long oldestAcceptableTxId, Duration timeout) throws TransactionFailureException\n+  {\n+    if (oldestAcceptableTxId <= BASE_TX_ID)\n     {\n-        if ( oldestAcceptableTxId <= BASE_TX_ID )\n-        {\n-            return;\n-        }\n-\n-        if ( !availabilityGuard.isAvailable() )\n-        {\n-            throw new TransactionFailureException( Status.General.DatabaseUnavailable, \"Database unavailable\" );\n-        }\n-\n-        try\n-        {\n-            // await for the last closed transaction id to to have at least the expected value\n-            // it has to be \"last closed\" and not \"last committed\" becase all transactions before the expected one should also be committed\n-            transactionIdStore().awaitClosedTransactionId( oldestAcceptableTxId, timeout.toMillis() );\n-        }\n-        catch ( InterruptedException | TimeoutException e )\n-        {\n-            if ( e instanceof InterruptedException )\n-            {\n-                Thread.currentThread().interrupt();\n-            }\n-\n-            throw new TransactionFailureException( Status.Transaction.InstanceStateChanged, e,\n-                    \"Database not up to the requested version: %d. Latest database version is %d\", oldestAcceptableTxId,\n-                    transactionIdStore().getLastClosedTransactionId() );\n-        }\n+      return;\n     }\n \n-    private TransactionIdStore transactionIdStore()\n+    if (!availabilityGuard.isAvailable())\n     {\n-        // We need to resolve this as late as possible in case the database has been restarted as part of store copy.\n-        // This causes TransactionIdStore staleness and we could get a MetaDataStore closed exception.\n-        // Ideally we'd fix this with some life cycle wizardry but not going to do that for now.\n-        return transactionIdStoreSupplier.get();\n+      throw new TransactionFailureException(Status.General.DatabaseUnavailable, \"Database unavailable\");\n     }\n \n-    /**\n-     * Find the id of the Newest Encountered Transaction (NET) that could have been seen on this server.\n-     * We expect the returned id to be sent back the client and ultimately supplied to\n-     * {@link #awaitUpToDate(long, Duration)} on this server, or on a different server in the cluster.\n-     *\n-     * @return id of the Newest Encountered Transaction (NET).\n-     */\n-    public long newestEncounteredTxId()\n+    try\n+    {\n+      // await for the last closed transaction id to to have at least the expected value\n+      // it has to be \"last closed\" and not \"last committed\" becase all transactions before the expected one should also be committed\n+      transactionIdStore().awaitClosedTransactionId(oldestAcceptableTxId, timeout.toMillis());\n+    } catch (InterruptedException | TimeoutException e)\n     {\n-        // return the \"last committed\" because it is the newest id\n-        // \"last closed\" will return the last gap-free id, pottentially for some old transaction because there might be other committing transactions\n-        return transactionIdStore().getLastCommittedTransactionId();\n+      if (e instanceof InterruptedException)\n+      {\n+        Thread.currentThread().interrupt();\n+      }\n+\n+      throw new TransactionFailureException(Status.Transaction.InstanceStateChanged, e,\n+          \"Database not up to the requested version: %d. Latest database version is %d\", oldestAcceptableTxId,\n+          transactionIdStore().getLastClosedTransactionId());\n     }\n+  }\n+\n+  private TransactionIdStore transactionIdStore()\n+  {\n+    // We need to resolve this as late as possible in case the database has been restarted as part of store copy.\n+    // This causes TransactionIdStore staleness and we could get a MetaDataStore closed exception.\n+    // Ideally we'd fix this with some life cycle wizardry but not going to do that for now.\n+    return transactionIdStoreSupplier.get();\n+  }\n+\n+  /**\n+   * Find the id of the Newest Encountered Transaction (NET) that could have been seen on this server.\n+   * We expect the returned id to be sent back the client and ultimately supplied to\n+   * {@link #awaitUpToDate(long, Duration)} on this server, or on a different server in the cluster.\n+   *\n+   * @return id of the Newest Encountered Transaction (NET).\n+   */\n+  public long newestEncounteredTxId()\n+  {\n+    // return the \"last committed\" because it is the newest id\n+    // \"last closed\" will return the last gap-free id, pottentially for some old transaction because there might be other committing transactions\n+    return transactionIdStore().getLastCommittedTransactionId();\n+  }\n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/810/TransactionIdTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/810/TransactionIdTracker.java\nindex 820158bebb6..5be824d3eeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/810/TransactionIdTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/810/TransactionIdTracker.java\n@@ -92,10 +92,8 @@ public class TransactionIdTracker\n                 Thread.currentThread().interrupt();\n             }\n \n-            throw new TransactionFailureException( Status.Transaction.InstanceStateChanged, e,\n-                    \"Database not up to the requested version: %d. Latest database version is %d\", oldestAcceptableTxId,\n-                    transactionIdStore().getLastClosedTransactionId() );\n-        }\n+            throw new TransactionFailureException( Status.Transaction.InstanceStateChanged, e, \"Database not up to the requested version: %d. Latest database version is %d\", oldestAcceptableTxId, transactionIdStore().getLastClosedTransactionId() );\n+    }\n     }\n \n     private TransactionIdStore transactionIdStore()\n@@ -119,4 +117,4 @@ public class TransactionIdTracker\n         // \"last closed\" will return the last gap-free id, pottentially for some old transaction because there might be other committing transactions\n         return transactionIdStore().getLastCommittedTransactionId();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}