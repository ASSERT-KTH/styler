{
    "project_name": "opencb-opencga",
    "error_id": "89",
    "information": {
        "errors": [
            {
                "line": "114",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Trailing whitespace'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "        return openCGAClient.getProjectClient().search(params);\n    }\n    \n    private RestResponse<Project> update() throws ClientException {\n        ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/89/ProjectCommandExecutor.java\nindex 291573b3ecd..9f92c82ed6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/89/ProjectCommandExecutor.java\n@@ -111,7 +111,7 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         return openCGAClient.getProjectClient().search(params);\n     }\n-    \n+\n     private RestResponse<Project> update() throws ClientException {\n         ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/89/ProjectCommandExecutor.java\nindex 291573b3ecd..8ab12b86bc1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/89/ProjectCommandExecutor.java\n@@ -34,108 +34,108 @@ import org.opencb.opencga.core.response.RestResponse;\n \n public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n-    private ProjectCommandOptions projectsCommandOptions;\n-\n-    public ProjectCommandExecutor(ProjectCommandOptions projectsCommandOptions) {\n-        super(projectsCommandOptions.commonCommandOptions);\n-\n-        this.projectsCommandOptions = projectsCommandOptions;\n-    }\n-\n-    @Override\n-    public void execute() throws Exception {\n-        RestResponse queryResponse = null;\n-        String subCommandString = getParsedSubCommand(projectsCommandOptions.jCommander);\n-        logger.debug(\"Executing Project subcommand '{}'\", subCommandString);\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"search\":\n-                queryResponse = search();\n-                break;\n-            case \"update\":\n-                queryResponse = update();\n-                break;\n-            case \"studies\":\n-                queryResponse = studies();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-        createOutput(queryResponse);\n-    }\n-\n-    private RestResponse<Project> create() throws ClientException {\n-        ProjectCommandOptions.CreateCommandOptions createCommandOptions = projectsCommandOptions.createCommandOptions;\n-\n-        ProjectCreateParams createParams = new ProjectCreateParams()\n-                .setId(createCommandOptions.id)\n-                .setName(createCommandOptions.name)\n-                .setDescription(createCommandOptions.description)\n-                .setOrganism(new ProjectOrganism(createCommandOptions.scientificName, createCommandOptions.commonName,\n-                        createCommandOptions.assembly));\n-        return openCGAClient.getProjectClient().create(createParams);\n-    }\n-\n-    private RestResponse<Project> info() throws ClientException {\n-        ProjectCommandOptions.InfoCommandOptions infoCommandOptions = projectsCommandOptions.infoCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, infoCommandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, infoCommandOptions.dataModelOptions.exclude);\n-        return openCGAClient.getProjectClient().info(infoCommandOptions.project, params);\n+  private ProjectCommandOptions projectsCommandOptions;\n+\n+  public ProjectCommandExecutor(ProjectCommandOptions projectsCommandOptions) {\n+    super(projectsCommandOptions.commonCommandOptions);\n+\n+    this.projectsCommandOptions = projectsCommandOptions;\n+  }\n+\n+  @Override\n+  public void execute() throws Exception {\n+    RestResponse queryResponse = null;\n+    String subCommandString = getParsedSubCommand(projectsCommandOptions.jCommander);\n+    logger.debug(\"Executing Project subcommand '{}'\", subCommandString);\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"search\":\n+        queryResponse = search();\n+        break;\n+      case \"update\":\n+        queryResponse = update();\n+        break;\n+      case \"studies\":\n+        queryResponse = studies();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n-    private RestResponse<Project> search() throws ClientException {\n-        ProjectCommandOptions.SearchCommandOptions searchCommandOptions = projectsCommandOptions.searchCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(\"owner\", searchCommandOptions.owner);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.STUDY.key(), searchCommandOptions.study);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), searchCommandOptions.name);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ID.key(), searchCommandOptions.alias);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), searchCommandOptions.description);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.CREATION_DATE.key(), searchCommandOptions.creationDate);\n-        params.putIfNotEmpty(\"status\", searchCommandOptions.status);\n-        params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ATTRIBUTES.key(), searchCommandOptions.attributes);\n-        params.putAll(searchCommandOptions.commonOptions.params);\n-\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, searchCommandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, searchCommandOptions.dataModelOptions.exclude);\n-\n-        return openCGAClient.getProjectClient().search(params);\n-    }\n-    \n-    private RestResponse<Project> update() throws ClientException {\n-        ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n-\n-        ProjectOrganism organism = null;\n-        if (StringUtils.isNotEmpty(commandOptions.commonName)) {\n-            organism = new ProjectOrganism().setCommonName(commandOptions.commonName);\n-        }\n-\n-        ProjectUpdateParams params = new ProjectUpdateParams()\n-                .setName(commandOptions.name)\n-                .setDescription(commandOptions.description)\n-                .setOrganism(organism);\n-        return openCGAClient.getProjectClient().update(commandOptions.project, params);\n+    createOutput(queryResponse);\n+  }\n+\n+  private RestResponse<Project> create() throws ClientException {\n+    ProjectCommandOptions.CreateCommandOptions createCommandOptions = projectsCommandOptions.createCommandOptions;\n+\n+    ProjectCreateParams createParams = new ProjectCreateParams()\n+        .setId(createCommandOptions.id)\n+        .setName(createCommandOptions.name)\n+        .setDescription(createCommandOptions.description)\n+        .setOrganism(new ProjectOrganism(createCommandOptions.scientificName, createCommandOptions.commonName,\n+            createCommandOptions.assembly));\n+    return openCGAClient.getProjectClient().create(createParams);\n+  }\n+\n+  private RestResponse<Project> info() throws ClientException {\n+    ProjectCommandOptions.InfoCommandOptions infoCommandOptions = projectsCommandOptions.infoCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, infoCommandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, infoCommandOptions.dataModelOptions.exclude);\n+    return openCGAClient.getProjectClient().info(infoCommandOptions.project, params);\n+  }\n+\n+  private RestResponse<Project> search() throws ClientException {\n+    ProjectCommandOptions.SearchCommandOptions searchCommandOptions = projectsCommandOptions.searchCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(\"owner\", searchCommandOptions.owner);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.STUDY.key(), searchCommandOptions.study);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.NAME.key(), searchCommandOptions.name);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ID.key(), searchCommandOptions.alias);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.DESCRIPTION.key(), searchCommandOptions.description);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.CREATION_DATE.key(), searchCommandOptions.creationDate);\n+    params.putIfNotEmpty(\"status\", searchCommandOptions.status);\n+    params.putIfNotEmpty(ProjectDBAdaptor.QueryParams.ATTRIBUTES.key(), searchCommandOptions.attributes);\n+    params.putAll(searchCommandOptions.commonOptions.params);\n+\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, searchCommandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, searchCommandOptions.dataModelOptions.exclude);\n+\n+    return openCGAClient.getProjectClient().search(params);\n+  }\n+\n+  private RestResponse<Project> update() throws ClientException {\n+    ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n+\n+    ProjectOrganism organism = null;\n+    if (StringUtils.isNotEmpty(commandOptions.commonName)) {\n+      organism = new ProjectOrganism().setCommonName(commandOptions.commonName);\n     }\n \n-    private RestResponse<Study> studies() throws ClientException {\n-        ProjectCommandOptions.StudiesCommandOptions studiesCommandOptions = projectsCommandOptions.studiesCommandOptions;\n-\n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, studiesCommandOptions.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, studiesCommandOptions.dataModelOptions.exclude);\n-        params.put(QueryOptions.LIMIT, studiesCommandOptions.numericOptions.limit);\n-        params.put(QueryOptions.SKIP, studiesCommandOptions.numericOptions.skip);\n-        return openCGAClient.getProjectClient().studies(studiesCommandOptions.project, params);\n-    }\n+    ProjectUpdateParams params = new ProjectUpdateParams()\n+        .setName(commandOptions.name)\n+        .setDescription(commandOptions.description)\n+        .setOrganism(organism);\n+    return openCGAClient.getProjectClient().update(commandOptions.project, params);\n+  }\n+\n+  private RestResponse<Study> studies() throws ClientException {\n+    ProjectCommandOptions.StudiesCommandOptions studiesCommandOptions = projectsCommandOptions.studiesCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, studiesCommandOptions.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, studiesCommandOptions.dataModelOptions.exclude);\n+    params.put(QueryOptions.LIMIT, studiesCommandOptions.numericOptions.limit);\n+    params.put(QueryOptions.SKIP, studiesCommandOptions.numericOptions.skip);\n+    return openCGAClient.getProjectClient().studies(studiesCommandOptions.project, params);\n+  }\n \n }\n",
            "diff_size": 123
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/89/ProjectCommandExecutor.java\nindex 291573b3ecd..4f88f8310ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/89/ProjectCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.main.executors.catalog;\n-\n-\n import org.apache.commons.lang3.StringUtils;\n import org.opencb.commons.datastore.core.ObjectMap;\n import org.opencb.commons.datastore.core.QueryOptions;\n@@ -80,7 +78,7 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n                 .setDescription(createCommandOptions.description)\n                 .setOrganism(new ProjectOrganism(createCommandOptions.scientificName, createCommandOptions.commonName,\n                         createCommandOptions.assembly));\n-        return openCGAClient.getProjectClient().create(createParams);\n+return openCGAClient.getProjectClient().create(createParams);\n     }\n \n     private RestResponse<Project> info() throws ClientException {\n@@ -111,9 +109,9 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         return openCGAClient.getProjectClient().search(params);\n     }\n-    \n-    private RestResponse<Project> update() throws ClientException {\n-        ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n+\n+private RestResponse<Project> update() throws ClientException {\n+    ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n \n         ProjectOrganism organism = null;\n         if (StringUtils.isNotEmpty(commandOptions.commonName)) {\n@@ -138,4 +136,4 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getProjectClient().studies(studiesCommandOptions.project, params);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/89/ProjectCommandExecutor.java\nindex 291573b3ecd..9f92c82ed6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/89/ProjectCommandExecutor.java\n@@ -111,7 +111,7 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         return openCGAClient.getProjectClient().search(params);\n     }\n-    \n+\n     private RestResponse<Project> update() throws ClientException {\n         ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/89/ProjectCommandExecutor.java\nindex 291573b3ecd..9f92c82ed6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/89/ProjectCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/89/ProjectCommandExecutor.java\n@@ -111,7 +111,7 @@ public class ProjectCommandExecutor extends OpencgaCommandExecutor {\n \n         return openCGAClient.getProjectClient().search(params);\n     }\n-    \n+\n     private RestResponse<Project> update() throws ClientException {\n         ProjectCommandOptions.UpdateCommandOptions commandOptions = projectsCommandOptions.updateCommandOptions;\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}