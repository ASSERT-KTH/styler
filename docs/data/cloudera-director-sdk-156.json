{
    "project_name": "cloudera-director-sdk",
    "error_id": "156",
    "information": {
        "errors": [
            {
                "line": "0",
                "severity": "error",
                "message": "Required pattern 'Cloudera copyright header' missing in file.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "// Licensed to Cloudera, Inc. under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/156/InstanceProviderConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/156/InstanceProviderConfig.java\nindex 0b9852f7edb..a2c42b74617 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/156/InstanceProviderConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/intellij/156/InstanceProviderConfig.java\n@@ -26,11 +26,14 @@ public class InstanceProviderConfig {\n   private Map<String, String> config;\n   /* Provider type */\n   private String type;\n+\n   public interface Type {\n     String AWS = \"aws\";\n     String BYON = \"byon\";\n   }\n-  public InstanceProviderConfig() { }\n+\n+  public InstanceProviderConfig() {\n+  }\n \n   private InstanceProviderConfig(Map<String, String> config, String type) {\n     this.config = config;\n@@ -67,13 +70,15 @@ public class InstanceProviderConfig {\n \n   public InstanceProviderConfigBuilder toBuilder() {\n     return builder()\n-      .config(config)\n-      .type(type)\n-      ;\n+        .config(config)\n+        .type(type)\n+        ;\n   }\n+\n   public Map<String, String> getConfig() {\n     return config;\n   }\n+\n   public void setConfig(Map<String, String> config) {\n     this.config = config;\n   }\n@@ -81,20 +86,27 @@ public class InstanceProviderConfig {\n   public String getType() {\n     return type;\n   }\n+\n   public void setType(String type) {\n     this.type = type;\n   }\n \n   @Override\n   public boolean equals(Object o) {\n-    if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n \n     InstanceProviderConfig other = (InstanceProviderConfig) o; // NOPMD\n \n     if (type != null ?\n         !type.equals(other.type) :\n-        other.type != null) return false;\n+        other.type != null) {\n+      return false;\n+    }\n     return true;\n   }\n \n@@ -106,7 +118,7 @@ public class InstanceProviderConfig {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class InstanceProviderConfig {\" + newLine);\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "84",
                    "column": "22",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/156/InstanceProviderConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/156/InstanceProviderConfig.java\nindex 0b9852f7edb..bde53864551 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/156/InstanceProviderConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/naturalize/156/InstanceProviderConfig.java\n@@ -1,19 +1,4 @@\n-// Licensed to Cloudera, Inc. under one\n-// or more contributor license agreements.  See the NOTICE file\n-// distributed with this work for additional information\n-// regarding copyright ownership.  Cloudera, Inc. licenses this file\n-// to you under the Apache License, Version 2.0 (the\n-// \"License\"); you may not use this file except in compliance\n-// with the License.  You may obtain a copy of the License at\n-//\n-//     http://www.apache.org/licenses/LICENSE-2.0\n-//\n-// Unless required by applicable law or agreed to in writing, software\n-// distributed under the License is distributed on an \"AS IS\" BASIS,\n-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-// See the License for the specific language governing permissions and\n-// limitations under the License.\n-\n+// Licensed to Cloudera, Inc.\n // Note: This file is auto generated. Do not edit manually.\n \n package com.cloudera.director.client.v1.model;\n@@ -26,11 +11,13 @@ public class InstanceProviderConfig {\n   private Map<String, String> config;\n   /* Provider type */\n   private String type;\n-  public interface Type {\n+\n+public interface Type {\n     String AWS = \"aws\";\n     String BYON = \"byon\";\n   }\n-  public InstanceProviderConfig() { }\n+\n+public InstanceProviderConfig() { }\n \n   private InstanceProviderConfig(Map<String, String> config, String type) {\n     this.config = config;\n@@ -47,7 +34,8 @@ public class InstanceProviderConfig {\n   }\n \n   public static class InstanceProviderConfigBuilder {\n-    private Map<String, String> config = new HashMap<String, String>();\n+\n+  private Map<String, String> config = new HashMap<String, String>();\n     private String type = null;\n \n     public InstanceProviderConfigBuilder config(Map<String, String> config) {\n@@ -66,10 +54,8 @@ public class InstanceProviderConfig {\n   }\n \n   public InstanceProviderConfigBuilder toBuilder() {\n-    return builder()\n-      .config(config)\n-      .type(type)\n-      ;\n+    return builder().config(config)\n+      .type(type);\n   }\n   public Map<String, String> getConfig() {\n     return config;\n@@ -88,13 +74,14 @@ public class InstanceProviderConfig {\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (o == null ||\n+getClass() != o.getClass()) return false;\n+\n+    InstanceProviderConfig other = (InstanceProviderConfig) o;\n \n-    InstanceProviderConfig other = (InstanceProviderConfig) o; // NOPMD\n+// NOPMD\n \n-    if (type != null ?\n-        !type.equals(other.type) :\n-        other.type != null) return false;\n+    if (type != null ?!type.equals(other.type) : other.type != null) return false;\n     return true;\n   }\n \n@@ -106,7 +93,7 @@ public class InstanceProviderConfig {\n   }\n \n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class InstanceProviderConfig {\" + newLine);\n@@ -115,5 +102,4 @@ public class InstanceProviderConfig {\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                },
                {
                    "line": "40",
                    "column": "35",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "40",
                    "column": "36",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "column": "18",
                    "severity": "warning",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "107",
                    "column": "59",
                    "severity": "warning",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "109",
                    "column": "21",
                    "severity": "warning",
                    "message": "'?' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "21",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "46",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "16",
                    "severity": "warning",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "39",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "56",
                    "severity": "warning",
                    "message": "':' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "56",
                    "severity": "warning",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/156/InstanceProviderConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/156/InstanceProviderConfig.java\nindex 0b9852f7edb..4fdd27a5f3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/errored/1/156/InstanceProviderConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/cloudera-director-sdk/codebuff/156/InstanceProviderConfig.java\n@@ -21,33 +21,43 @@ package com.cloudera.director.client.v1.model;\n import java.util.HashMap;\n import java.util.Map;\n \n+\n public class InstanceProviderConfig {\n   /* Provider specific configurations [redacted on read] */\n+\n   private Map<String, String> config;\n   /* Provider type */\n+\n   private String type;\n+\n   public interface Type {\n-    String AWS = \"aws\";\n-    String BYON = \"byon\";\n+String AWS = \"aws\";\n+\n+\n+String BYON = \"byon\";\n   }\n-  public InstanceProviderConfig() { }\n+\n+  public InstanceProviderConfig() {}\n+\n \n   private InstanceProviderConfig(Map<String, String> config, String type) {\n-    this.config = config;\n-    this.type = type;\n-  }\n+                                                                          this.config = config;\n+                                                                          this.type = type;\n+                                    }\n \n   private InstanceProviderConfig(InstanceProviderConfigBuilder builder) {\n-    this.config = builder.config;\n-    this.type = builder.type;\n-  }\n+                                                                        this.config = builder.config;\n+                                                                        this.type = builder.type;\n+                                    }\n \n   public static InstanceProviderConfigBuilder builder() {\n     return new InstanceProviderConfigBuilder();\n   }\n \n   public static class InstanceProviderConfigBuilder {\n+\n     private Map<String, String> config = new HashMap<String, String>();\n+\n     private String type = null;\n \n     public InstanceProviderConfigBuilder config(Map<String, String> config) {\n@@ -68,12 +78,13 @@ public class InstanceProviderConfig {\n   public InstanceProviderConfigBuilder toBuilder() {\n     return builder()\n       .config(config)\n-      .type(type)\n-      ;\n+      .type(type);\n   }\n+\n   public Map<String, String> getConfig() {\n     return config;\n   }\n+\n   public void setConfig(Map<String, String> config) {\n     this.config = config;\n   }\n@@ -81,39 +92,44 @@ public class InstanceProviderConfig {\n   public String getType() {\n     return type;\n   }\n+\n   public void setType(String type) {\n     this.type = type;\n   }\n \n+\n   @Override\n   public boolean equals(Object o) {\n     if (this == o) return true;\n-    if (o == null || getClass() != o.getClass()) return false;\n+    if (o == null||\n+        getClass() != o.getClass()) return false;\n \n-    InstanceProviderConfig other = (InstanceProviderConfig) o; // NOPMD\n+    InstanceProviderConfig other = (InstanceProviderConfig)o; // NOPMD\n \n-    if (type != null ?\n-        !type.equals(other.type) :\n-        other.type != null) return false;\n+    if (type != null?!type.equals(other.type): other.type != null) return false;\n     return true;\n   }\n \n+\n   @Override\n   public int hashCode() {\n     int result = 0;\n-    result = 31 * result + (type != null ? type.hashCode() : 0);\n+    result = 31*result + (type != null? type.hashCode():0);\n     return result;\n   }\n \n+\n   @Override\n-  public String toString()  {\n+  public String toString() {\n     StringBuilder sb = new StringBuilder();\n+\n     String newLine = System.getProperty(\"line.separator\");\n     sb.append(\"class InstanceProviderConfig {\" + newLine);\n-    sb.append(\"  config: \").append(\"REDACTED\").append(newLine);\n-    sb.append(\"  type: \").append(type).append(newLine);\n+    sb.append(\"  config: \")\n+      .append(\"REDACTED\").append(newLine);\n+    sb.append(\"  type: \")\n+      .append(type).append(newLine);\n     sb.append(\"}\" + newLine);\n     return sb.toString();\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "0",
                    "severity": "error",
                    "message": "Required pattern 'Cloudera copyright header' missing in file.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}