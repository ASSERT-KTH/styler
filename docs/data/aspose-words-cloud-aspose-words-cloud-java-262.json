{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "262",
    "information": {
        "errors": [
            {
                "line": "560",
                "column": "5",
                "severity": "error",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "     */\n    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n    {\n        // verify the required parameter 'Name' is set\n        if (getName() == null) {\n            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling saveAsTiff\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/262/SaveAsTiffRequest.java\nindex 801df788e31..9ad6263b300 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/262/SaveAsTiffRequest.java\n@@ -556,8 +556,7 @@ public class SaveAsTiffRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n         if (getName() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling saveAsTiff\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/262/SaveAsTiffRequest.java\nindex 801df788e31..650c198302b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/262/SaveAsTiffRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -30,6 +30,7 @@ package com.aspose.words.cloud.model.requests;\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.squareup.okhttp.*;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -556,8 +557,7 @@ public class SaveAsTiffRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n         if (getName() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling saveAsTiff\");\n@@ -622,8 +622,8 @@ public class SaveAsTiffRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/262/SaveAsTiffRequest.java\nindex 801df788e31..85a073979a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/262/SaveAsTiffRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.squareup.okhttp.*;\n@@ -37,126 +36,175 @@ import java.util.*;\n /*\n  * Request model for saveAsTiff operation.\n  */\n+\n+\n public class SaveAsTiffRequest implements RequestIfc {\n     /*\n      * The document name.\n      */\n-    private String name;\n+\n+  private String name;\n \n     /*\n      * Tiff save options.\n      */\n-    private TiffSaveOptionsData saveOptions;\n+\n+\n+  private TiffSaveOptionsData saveOptions;\n \n     /*\n      * Original document folder.\n      */\n-    private String folder;\n+\n+\n+  private String folder;\n \n     /*\n      * Original document storage.\n      */\n-    private String storage;\n+\n+\n+  private String storage;\n \n     /*\n      * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    private String loadEncoding;\n+\n+\n+  private String loadEncoding;\n \n     /*\n      * Password for opening an encrypted document.\n      */\n-    private String password;\n+\n+\n+  private String password;\n \n     /*\n      * Use antialiasing flag.\n      */\n-    private Boolean useAntiAliasing;\n+\n+\n+  private Boolean useAntiAliasing;\n \n     /*\n      * Use high quality flag.\n      */\n-    private Boolean useHighQualityRendering;\n+\n+\n+  private Boolean useHighQualityRendering;\n \n     /*\n      * Brightness for the generated images.\n      */\n-    private Double imageBrightness;\n+\n+\n+  private Double imageBrightness;\n \n     /*\n      * Color mode for the generated images.\n      */\n-    private String imageColorMode;\n+\n+\n+  private String imageColorMode;\n \n     /*\n      * The contrast for the generated images.\n      */\n-    private Double imageContrast;\n+\n+\n+  private Double imageContrast;\n \n     /*\n      * The images numeral format.\n      */\n-    private String numeralFormat;\n+\n+\n+  private String numeralFormat;\n \n     /*\n      * Number of pages to render.\n      */\n-    private Integer pageCount;\n+\n+\n+  private Integer pageCount;\n \n     /*\n      * Page index to start rendering.\n      */\n-    private Integer pageIndex;\n+\n+\n+  private Integer pageIndex;\n \n     /*\n      * Background image color.\n      */\n-    private String paperColor;\n+\n+\n+  private String paperColor;\n \n     /*\n      * The pixel format of generated images.\n      */\n-    private String pixelFormat;\n+\n+\n+  private String pixelFormat;\n \n     /*\n      * The resolution of generated images.\n      */\n-    private Double resolution;\n+\n+\n+  private Double resolution;\n \n     /*\n      * Zoom factor for generated images.\n      */\n-    private Double scale;\n+\n+\n+  private Double scale;\n \n     /*\n      * The compression tipe.\n      */\n-    private String tiffCompression;\n+\n+\n+  private String tiffCompression;\n \n     /*\n      * Optional, default is Fallback.\n      */\n-    private String dmlRenderingMode;\n+\n+\n+  private String dmlRenderingMode;\n \n     /*\n      * Optional, default is Simplified.\n      */\n-    private String dmlEffectsRenderingMode;\n+\n+\n+  private String dmlEffectsRenderingMode;\n \n     /*\n      * Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold.\n      */\n-    private String tiffBinarizationMethod;\n+\n+\n+  private String tiffBinarizationMethod;\n \n     /*\n      * Optional. A value determining zip output or not.\n      */\n-    private Boolean zipOutput;\n+\n+\n+  private Boolean zipOutput;\n \n     /*\n      * Folder in filestorage with custom fonts.\n      */\n-    private String fontsLocation;\n+\n+\n+  private String fontsLocation;\n \n     /*\n      * Initializes a new instance of the SaveAsTiffRequest class.\n@@ -186,368 +234,419 @@ public class SaveAsTiffRequest implements RequestIfc {\n      * @param Boolean zipOutput Optional. A value determining zip output or not.\n      * @param String fontsLocation Folder in filestorage with custom fonts.\n      */\n-    public SaveAsTiffRequest(String name, TiffSaveOptionsData saveOptions, String folder, String storage, String loadEncoding, String password, Boolean useAntiAliasing, Boolean useHighQualityRendering, Double imageBrightness, String imageColorMode, Double imageContrast, String numeralFormat, Integer pageCount, Integer pageIndex, String paperColor, String pixelFormat, Double resolution, Double scale, String tiffCompression, String dmlRenderingMode, String dmlEffectsRenderingMode, String tiffBinarizationMethod, Boolean zipOutput, String fontsLocation) {\n-        this.name = name;\n-        this.saveOptions = saveOptions;\n-        this.folder = folder;\n-        this.storage = storage;\n-        this.loadEncoding = loadEncoding;\n-        this.password = password;\n-        this.useAntiAliasing = useAntiAliasing;\n-        this.useHighQualityRendering = useHighQualityRendering;\n-        this.imageBrightness = imageBrightness;\n-        this.imageColorMode = imageColorMode;\n-        this.imageContrast = imageContrast;\n-        this.numeralFormat = numeralFormat;\n-        this.pageCount = pageCount;\n-        this.pageIndex = pageIndex;\n-        this.paperColor = paperColor;\n-        this.pixelFormat = pixelFormat;\n-        this.resolution = resolution;\n-        this.scale = scale;\n-        this.tiffCompression = tiffCompression;\n-        this.dmlRenderingMode = dmlRenderingMode;\n-        this.dmlEffectsRenderingMode = dmlEffectsRenderingMode;\n-        this.tiffBinarizationMethod = tiffBinarizationMethod;\n-        this.zipOutput = zipOutput;\n-        this.fontsLocation = fontsLocation;\n-    }\n+\n+\n+  public SaveAsTiffRequest(String name,  TiffSaveOptionsData saveOptions,  String folder,  String storage,  String loadEncoding,  String password,  Boolean useAntiAliasing,  Boolean useHighQualityRendering,  Double imageBrightness,  String imageColorMode,  Double imageContrast,  String numeralFormat,  Integer pageCount,  Integer pageIndex,  String paperColor,  String pixelFormat,  Double resolution,  Double scale,  String tiffCompression,  String dmlRenderingMode,  String dmlEffectsRenderingMode,  String tiffBinarizationMethod,  Boolean zipOutput,  String fontsLocation) {\n+    this.name = name;\n+    this.saveOptions = saveOptions;\n+    this.folder = folder;\n+    this.storage = storage;\n+    this.loadEncoding = loadEncoding;\n+    this.password = password;\n+    this.useAntiAliasing = useAntiAliasing;\n+    this.useHighQualityRendering = useHighQualityRendering;\n+    this.imageBrightness = imageBrightness;\n+    this.imageColorMode = imageColorMode;\n+    this.imageContrast = imageContrast;\n+    this.numeralFormat = numeralFormat;\n+    this.pageCount = pageCount;\n+    this.pageIndex = pageIndex;\n+    this.paperColor = paperColor;\n+    this.pixelFormat = pixelFormat;\n+    this.resolution = resolution;\n+    this.scale = scale;\n+    this.tiffCompression = tiffCompression;\n+    this.dmlRenderingMode = dmlRenderingMode;\n+    this.dmlEffectsRenderingMode = dmlEffectsRenderingMode;\n+    this.tiffBinarizationMethod = tiffBinarizationMethod;\n+    this.zipOutput = zipOutput;\n+    this.fontsLocation = fontsLocation;\n+  }\n \n     /*\n      * Gets The document name.\n      */\n-    public String getName() {\n-        return this.name;\n-    }\n+\n+\n+  public String getName() {\n+    return this.name;\n+  }\n \n     /*\n      * Sets The document name.\n      */\n-    public void setName(String value) {\n-        this.name = value;\n-    }\n+\n+  public void setName(String value) {\n+    this.name = value;\n+  }\n \n     /*\n      * Gets Tiff save options.\n      */\n-    public TiffSaveOptionsData getSaveOptions() {\n-        return this.saveOptions;\n-    }\n+\n+  public TiffSaveOptionsData getSaveOptions() {\n+    return this.saveOptions;\n+  }\n \n     /*\n      * Sets Tiff save options.\n      */\n-    public void setSaveOptions(TiffSaveOptionsData value) {\n-        this.saveOptions = value;\n-    }\n+\n+  public void setSaveOptions(TiffSaveOptionsData value) {\n+    this.saveOptions = value;\n+  }\n \n     /*\n      * Gets Original document folder.\n      */\n-    public String getFolder() {\n-        return this.folder;\n-    }\n+\n+  public String getFolder() {\n+    return this.folder;\n+  }\n \n     /*\n      * Sets Original document folder.\n      */\n-    public void setFolder(String value) {\n-        this.folder = value;\n-    }\n+\n+  public void setFolder(String value) {\n+    this.folder = value;\n+  }\n \n     /*\n      * Gets Original document storage.\n      */\n-    public String getStorage() {\n-        return this.storage;\n-    }\n+\n+  public String getStorage() {\n+    return this.storage;\n+  }\n \n     /*\n      * Sets Original document storage.\n      */\n-    public void setStorage(String value) {\n-        this.storage = value;\n-    }\n+\n+  public void setStorage(String value) {\n+    this.storage = value;\n+  }\n \n     /*\n      * Gets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public String getLoadEncoding() {\n-        return this.loadEncoding;\n-    }\n+\n+  public String getLoadEncoding() {\n+    return this.loadEncoding;\n+  }\n \n     /*\n      * Sets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public void setLoadEncoding(String value) {\n-        this.loadEncoding = value;\n-    }\n+\n+  public void setLoadEncoding(String value) {\n+    this.loadEncoding = value;\n+  }\n \n     /*\n      * Gets Password for opening an encrypted document.\n      */\n-    public String getPassword() {\n-        return this.password;\n-    }\n+\n+  public String getPassword() {\n+    return this.password;\n+  }\n \n     /*\n      * Sets Password for opening an encrypted document.\n      */\n-    public void setPassword(String value) {\n-        this.password = value;\n-    }\n+\n+  public void setPassword(String value) {\n+    this.password = value;\n+  }\n \n     /*\n      * Gets Use antialiasing flag.\n      */\n-    public Boolean getUseAntiAliasing() {\n-        return this.useAntiAliasing;\n-    }\n+\n+  public Boolean getUseAntiAliasing() {\n+    return this.useAntiAliasing;\n+  }\n \n     /*\n      * Sets Use antialiasing flag.\n      */\n-    public void setUseAntiAliasing(Boolean value) {\n-        this.useAntiAliasing = value;\n-    }\n+\n+  public void setUseAntiAliasing(Boolean value) {\n+    this.useAntiAliasing = value;\n+  }\n \n     /*\n      * Gets Use high quality flag.\n      */\n-    public Boolean getUseHighQualityRendering() {\n-        return this.useHighQualityRendering;\n-    }\n+\n+  public Boolean getUseHighQualityRendering() {\n+    return this.useHighQualityRendering;\n+  }\n \n     /*\n      * Sets Use high quality flag.\n      */\n-    public void setUseHighQualityRendering(Boolean value) {\n-        this.useHighQualityRendering = value;\n-    }\n+\n+  public void setUseHighQualityRendering(Boolean value) {\n+    this.useHighQualityRendering = value;\n+  }\n \n     /*\n      * Gets Brightness for the generated images.\n      */\n-    public Double getImageBrightness() {\n-        return this.imageBrightness;\n-    }\n+\n+  public Double getImageBrightness() {\n+    return this.imageBrightness;\n+  }\n \n     /*\n      * Sets Brightness for the generated images.\n      */\n-    public void setImageBrightness(Double value) {\n-        this.imageBrightness = value;\n-    }\n+\n+  public void setImageBrightness(Double value) {\n+    this.imageBrightness = value;\n+  }\n \n     /*\n      * Gets Color mode for the generated images.\n      */\n-    public String getImageColorMode() {\n-        return this.imageColorMode;\n-    }\n+\n+  public String getImageColorMode() {\n+    return this.imageColorMode;\n+  }\n \n     /*\n      * Sets Color mode for the generated images.\n      */\n-    public void setImageColorMode(String value) {\n-        this.imageColorMode = value;\n-    }\n+\n+  public void setImageColorMode(String value) {\n+    this.imageColorMode = value;\n+  }\n \n     /*\n      * Gets The contrast for the generated images.\n      */\n-    public Double getImageContrast() {\n-        return this.imageContrast;\n-    }\n+\n+  public Double getImageContrast() {\n+    return this.imageContrast;\n+  }\n \n     /*\n      * Sets The contrast for the generated images.\n      */\n-    public void setImageContrast(Double value) {\n-        this.imageContrast = value;\n-    }\n+\n+  public void setImageContrast(Double value) {\n+    this.imageContrast = value;\n+  }\n \n     /*\n      * Gets The images numeral format.\n      */\n-    public String getNumeralFormat() {\n-        return this.numeralFormat;\n-    }\n+\n+  public String getNumeralFormat() {\n+    return this.numeralFormat;\n+  }\n \n     /*\n      * Sets The images numeral format.\n      */\n-    public void setNumeralFormat(String value) {\n-        this.numeralFormat = value;\n-    }\n+\n+  public void setNumeralFormat(String value) {\n+    this.numeralFormat = value;\n+  }\n \n     /*\n      * Gets Number of pages to render.\n      */\n-    public Integer getPageCount() {\n-        return this.pageCount;\n-    }\n+\n+  public Integer getPageCount() {\n+    return this.pageCount;\n+  }\n \n     /*\n      * Sets Number of pages to render.\n      */\n-    public void setPageCount(Integer value) {\n-        this.pageCount = value;\n-    }\n+\n+  public void setPageCount(Integer value) {\n+    this.pageCount = value;\n+  }\n \n     /*\n      * Gets Page index to start rendering.\n      */\n-    public Integer getPageIndex() {\n-        return this.pageIndex;\n-    }\n+\n+  public Integer getPageIndex() {\n+    return this.pageIndex;\n+  }\n \n     /*\n      * Sets Page index to start rendering.\n      */\n-    public void setPageIndex(Integer value) {\n-        this.pageIndex = value;\n-    }\n+\n+  public void setPageIndex(Integer value) {\n+    this.pageIndex = value;\n+  }\n \n     /*\n      * Gets Background image color.\n      */\n-    public String getPaperColor() {\n-        return this.paperColor;\n-    }\n+\n+  public String getPaperColor() {\n+    return this.paperColor;\n+  }\n \n     /*\n      * Sets Background image color.\n      */\n-    public void setPaperColor(String value) {\n-        this.paperColor = value;\n-    }\n+\n+  public void setPaperColor(String value) {\n+    this.paperColor = value;\n+  }\n \n     /*\n      * Gets The pixel format of generated images.\n      */\n-    public String getPixelFormat() {\n-        return this.pixelFormat;\n-    }\n+\n+  public String getPixelFormat() {\n+    return this.pixelFormat;\n+  }\n \n     /*\n      * Sets The pixel format of generated images.\n      */\n-    public void setPixelFormat(String value) {\n-        this.pixelFormat = value;\n-    }\n+\n+  public void setPixelFormat(String value) {\n+    this.pixelFormat = value;\n+  }\n \n     /*\n      * Gets The resolution of generated images.\n      */\n-    public Double getResolution() {\n-        return this.resolution;\n-    }\n+\n+  public Double getResolution() {\n+    return this.resolution;\n+  }\n \n     /*\n      * Sets The resolution of generated images.\n      */\n-    public void setResolution(Double value) {\n-        this.resolution = value;\n-    }\n+\n+  public void setResolution(Double value) {\n+    this.resolution = value;\n+  }\n \n     /*\n      * Gets Zoom factor for generated images.\n      */\n-    public Double getScale() {\n-        return this.scale;\n-    }\n+\n+  public Double getScale() {\n+    return this.scale;\n+  }\n \n     /*\n      * Sets Zoom factor for generated images.\n      */\n-    public void setScale(Double value) {\n-        this.scale = value;\n-    }\n+\n+  public void setScale(Double value) {\n+    this.scale = value;\n+  }\n \n     /*\n      * Gets The compression tipe.\n      */\n-    public String getTiffCompression() {\n-        return this.tiffCompression;\n-    }\n+\n+  public String getTiffCompression() {\n+    return this.tiffCompression;\n+  }\n \n     /*\n      * Sets The compression tipe.\n      */\n-    public void setTiffCompression(String value) {\n-        this.tiffCompression = value;\n-    }\n+\n+  public void setTiffCompression(String value) {\n+    this.tiffCompression = value;\n+  }\n \n     /*\n      * Gets Optional, default is Fallback.\n      */\n-    public String getDmlRenderingMode() {\n-        return this.dmlRenderingMode;\n-    }\n+\n+  public String getDmlRenderingMode() {\n+    return this.dmlRenderingMode;\n+  }\n \n     /*\n      * Sets Optional, default is Fallback.\n      */\n-    public void setDmlRenderingMode(String value) {\n-        this.dmlRenderingMode = value;\n-    }\n+\n+  public void setDmlRenderingMode(String value) {\n+    this.dmlRenderingMode = value;\n+  }\n \n     /*\n      * Gets Optional, default is Simplified.\n      */\n-    public String getDmlEffectsRenderingMode() {\n-        return this.dmlEffectsRenderingMode;\n-    }\n+\n+  public String getDmlEffectsRenderingMode() {\n+    return this.dmlEffectsRenderingMode;\n+  }\n \n     /*\n      * Sets Optional, default is Simplified.\n      */\n-    public void setDmlEffectsRenderingMode(String value) {\n-        this.dmlEffectsRenderingMode = value;\n-    }\n+\n+  public void setDmlEffectsRenderingMode(String value) {\n+    this.dmlEffectsRenderingMode = value;\n+  }\n \n     /*\n      * Gets Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold.\n      */\n-    public String getTiffBinarizationMethod() {\n-        return this.tiffBinarizationMethod;\n-    }\n+\n+  public String getTiffBinarizationMethod() {\n+    return this.tiffBinarizationMethod;\n+  }\n \n     /*\n      * Sets Optional, Tiff binarization method, possible values are: FloydSteinbergDithering, Threshold.\n      */\n-    public void setTiffBinarizationMethod(String value) {\n-        this.tiffBinarizationMethod = value;\n-    }\n+\n+  public void setTiffBinarizationMethod(String value) {\n+    this.tiffBinarizationMethod = value;\n+  }\n \n     /*\n      * Gets Optional. A value determining zip output or not.\n      */\n-    public Boolean getZipOutput() {\n-        return this.zipOutput;\n-    }\n+\n+  public Boolean getZipOutput() {\n+    return this.zipOutput;\n+  }\n \n     /*\n      * Sets Optional. A value determining zip output or not.\n      */\n-    public void setZipOutput(Boolean value) {\n-        this.zipOutput = value;\n-    }\n+\n+  public void setZipOutput(Boolean value) {\n+    this.zipOutput = value;\n+  }\n \n     /*\n      * Gets Folder in filestorage with custom fonts.\n      */\n-    public String getFontsLocation() {\n-        return this.fontsLocation;\n-    }\n+\n+  public String getFontsLocation() {\n+    return this.fontsLocation;\n+  }\n \n     /*\n      * Sets Folder in filestorage with custom fonts.\n      */\n-    public void setFontsLocation(String value) {\n-        this.fontsLocation = value;\n-    }\n+\n+  public void setFontsLocation(String value) {\n+    this.fontsLocation = value;\n+  }\n \n     /*\n      * Creates the http request based on this request model.\n@@ -556,85 +655,83 @@ public class SaveAsTiffRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n-        if (getName() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling saveAsTiff\");\n-        }\n+    if (getName() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling saveAsTiff\");\n+    }\n \n         // verify the required parameter 'SaveOptions' is set\n-        if (getSaveOptions() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'SaveOptions' when calling saveAsTiff\");\n-        }\n+    if (getSaveOptions() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'SaveOptions' when calling saveAsTiff\");\n+    }\n \n-        Object localVarPostBody = getSaveOptions();\n+    Object localVarPostBody = getSaveOptions();\n \n         // create path and map variables\n-        String localVarPath = \"/words/{name}/saveAs/tiff\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"useAntiAliasing\", getUseAntiAliasing());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"useHighQualityRendering\", getUseHighQualityRendering());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"imageBrightness\", getImageBrightness());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"imageColorMode\", getImageColorMode());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"imageContrast\", getImageContrast());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"numeralFormat\", getNumeralFormat());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"pageCount\", getPageCount());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"pageIndex\", getPageIndex());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"paperColor\", getPaperColor());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"pixelFormat\", getPixelFormat());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"resolution\", getResolution());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"scale\", getScale());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"tiffCompression\", getTiffCompression());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"dmlRenderingMode\", getDmlRenderingMode());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"dmlEffectsRenderingMode\", getDmlEffectsRenderingMode());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"tiffBinarizationMethod\", getTiffBinarizationMethod());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"zipOutput\", getZipOutput());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"fontsLocation\", getFontsLocation());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n-    }\n+    String localVarPath = \"/words/{name}/saveAs/tiff\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"useAntiAliasing\", getUseAntiAliasing());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"useHighQualityRendering\", getUseHighQualityRendering());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"imageBrightness\", getImageBrightness());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"imageColorMode\", getImageColorMode());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"imageContrast\", getImageContrast());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"numeralFormat\", getNumeralFormat());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"pageCount\", getPageCount());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"pageIndex\", getPageIndex());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"paperColor\", getPaperColor());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"pixelFormat\", getPixelFormat());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"resolution\", getResolution());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"scale\", getScale());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"tiffCompression\", getTiffCompression());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"dmlRenderingMode\", getDmlRenderingMode());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"dmlEffectsRenderingMode\", getDmlEffectsRenderingMode());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"tiffBinarizationMethod\", getTiffBinarizationMethod());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"zipOutput\", getZipOutput());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"fontsLocation\", getFontsLocation());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n+    }\n+    return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return SaveResponse.class;\n-    }\n-}\n+\n+  public Type getResponseType() {\n+    return SaveResponse.class;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 369
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/262/SaveAsTiffRequest.java\nindex 801df788e31..9ad6263b300 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/262/SaveAsTiffRequest.java\n@@ -556,8 +556,7 @@ public class SaveAsTiffRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n         if (getName() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling saveAsTiff\");\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/262/SaveAsTiffRequest.java\nindex 801df788e31..9ad6263b300 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/262/SaveAsTiffRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/262/SaveAsTiffRequest.java\n@@ -556,8 +556,7 @@ public class SaveAsTiffRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException\n-    {\n+    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n         if (getName() == null) {\n             throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling saveAsTiff\");\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}