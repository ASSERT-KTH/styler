{
    "project_name": "wayshall-onetwo",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "53",
                "column": "52",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\t\tsuper.successfulAuthentication(request, response, chain, authResult);\n\t\tOAuth2AccessToken accessToken = restTemplate.getAccessToken();\n\t\tUserDetail userDetail = (UserDetail)authResult.getPrincipal();\n\t\tAccessTokenObtainedEvent event = new AccessTokenObtainedEvent(this, userDetail, accessToken);\n\t\tthis.eventPublisher.publishEvent(event);\n\t}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "53",
                    "column": "52",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/27/ExtOAuth2ClientAuthenticationProcessingFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/27/ExtOAuth2ClientAuthenticationProcessingFilter.java\nindex f882c4ab2b1..55dcb9750c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/27/ExtOAuth2ClientAuthenticationProcessingFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/intellij/27/ExtOAuth2ClientAuthenticationProcessingFilter.java\n@@ -22,42 +22,43 @@ import org.springframework.security.oauth2.common.OAuth2AccessToken;\n  * OAuth2ClientAuthenticationProcessingFilter\u975e BadCredentialsException \u5f02\u5e38\u76f4\u63a5\u629b\u51fa\u65f6\uff0c\n  * \u524d\u7aef\u65e0\u6cd5\u6b63\u5e38\u63a5\u6536\u5230json\u6570\u636e\u8fd4\u56de\u3002\n  * \u8fd9\u91cc\u589e\u52a0\u5bf9 ServletException \u5f02\u5e38\u5904\u7406\uff0c\u5305\u88c5\u6210 BadCredentialsException \u5f02\u5e38\n+ *\n  * @author weishao zeng\n  * <br/>\n  */\n public class ExtOAuth2ClientAuthenticationProcessingFilter extends OAuth2ClientAuthenticationProcessingFilter {\n \n-\tprivate ApplicationEventPublisher eventPublisher;\n-\t\n-\tpublic ExtOAuth2ClientAuthenticationProcessingFilter(String defaultFilterProcessesUrl) {\n-\t\tsuper(defaultFilterProcessesUrl);\n-\t}\n-\n-\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows AuthenticationException, IOException, ServletException {\n-\t\ttry {\n-\t\t\treturn super.attemptAuthentication(request, response);\n-\t\t} catch (BadCredentialsException e) {\n-\t\t\tthrow e;\n-\t\t} catch (ServletException | BaseException e) {\n-\t\t\tAuthenticationException ae = new InternalAuthenticationServiceException(\"Could not obtain user: \" + e.getMessage(), e);\n-\t\t\tthrow ae;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tprotected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n-\t\t\tFilterChain chain, Authentication authResult) throws IOException, ServletException {\n-\t\tsuper.successfulAuthentication(request, response, chain, authResult);\n-\t\tOAuth2AccessToken accessToken = restTemplate.getAccessToken();\n-\t\tUserDetail userDetail = (UserDetail)authResult.getPrincipal();\n-\t\tAccessTokenObtainedEvent event = new AccessTokenObtainedEvent(this, userDetail, accessToken);\n-\t\tthis.eventPublisher.publishEvent(event);\n-\t}\n-\n-\t@Override\n-\tpublic void setApplicationEventPublisher(ApplicationEventPublisher eventPublisher) {\n-\t\tthis.eventPublisher = eventPublisher;\n-\t\tsuper.setApplicationEventPublisher(eventPublisher);\n-\t}\n+  private ApplicationEventPublisher eventPublisher;\n+\n+  public ExtOAuth2ClientAuthenticationProcessingFilter(String defaultFilterProcessesUrl) {\n+    super(defaultFilterProcessesUrl);\n+  }\n+\n+  public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n+    throws AuthenticationException, IOException, ServletException {\n+    try {\n+      return super.attemptAuthentication(request, response);\n+    } catch (BadCredentialsException e) {\n+      throw e;\n+    } catch (ServletException | BaseException e) {\n+      AuthenticationException ae = new InternalAuthenticationServiceException(\"Could not obtain user: \" + e.getMessage(), e);\n+      throw ae;\n+    }\n+  }\n+\n+  @Override\n+  protected void successfulAuthentication(HttpServletRequest request, HttpServletResponse response,\n+                                          FilterChain chain, Authentication authResult) throws IOException, ServletException {\n+    super.successfulAuthentication(request, response, chain, authResult);\n+    OAuth2AccessToken accessToken = restTemplate.getAccessToken();\n+    UserDetail userDetail = (UserDetail) authResult.getPrincipal();\n+    AccessTokenObtainedEvent event = new AccessTokenObtainedEvent(this, userDetail, accessToken);\n+    this.eventPublisher.publishEvent(event);\n+  }\n+\n+  @Override\n+  public void setApplicationEventPublisher(ApplicationEventPublisher eventPublisher) {\n+    this.eventPublisher = eventPublisher;\n+    super.setApplicationEventPublisher(eventPublisher);\n+  }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "column": "52",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/27/ExtOAuth2ClientAuthenticationProcessingFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/naturalize/27/ExtOAuth2ClientAuthenticationProcessingFilter.java\nindex f882c4ab2b1..47f557994d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/errored/1/27/ExtOAuth2ClientAuthenticationProcessingFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wayshall-onetwo/naturalize/27/ExtOAuth2ClientAuthenticationProcessingFilter.java\n@@ -33,9 +33,8 @@ public class ExtOAuth2ClientAuthenticationProcessingFilter extends OAuth2ClientA\n \t\tsuper(defaultFilterProcessesUrl);\n \t}\n \n-\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response)\n-\t\t\tthrows AuthenticationException, IOException, ServletException {\n-\t\ttry {\n+\tpublic Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) throws AuthenticationException, IOException, ServletException {\n+\ttry {\n \t\t\treturn super.attemptAuthentication(request, response);\n \t\t} catch (BadCredentialsException e) {\n \t\t\tthrow e;\n@@ -60,4 +59,4 @@ public class ExtOAuth2ClientAuthenticationProcessingFilter extends OAuth2ClientA\n \t\tthis.eventPublisher = eventPublisher;\n \t\tsuper.setApplicationEventPublisher(eventPublisher);\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "53",
                    "column": "52",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "53",
                    "column": "52",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}