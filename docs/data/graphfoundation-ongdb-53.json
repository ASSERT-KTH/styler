{
    "project_name": "graphfoundation-ongdb",
    "error_id": "53",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "418",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "485",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "521",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "547",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "588",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/53/IndexQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/53/IndexQuery.java\nindex 6e5590da563..2f9aa425f0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/53/IndexQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/53/IndexQuery.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import org.apache.commons.lang3.builder.EqualsBuilder;\n@@ -37,560 +38,561 @@ import static org.neo4j.values.storable.Values.NO_VALUE;\n \n public abstract class IndexQuery\n {\n-    /**\n-     * Searches the index for all entries that has the given property.\n-     *\n-     * @param propertyKeyId the property ID to match.\n-     * @return an {@link IndexQuery} instance to be used for querying an index.\n-     */\n-    public static ExistsPredicate exists( int propertyKeyId )\n-    {\n-        return new ExistsPredicate( propertyKeyId );\n-    }\n-\n-    /**\n-     * Searches the index for a certain value.\n-     *\n-     * @param propertyKeyId the property ID to match.\n-     * @param value the property value to search for.\n-     * @return an {@link IndexQuery} instance to be used for querying an index.\n-     */\n-    public static ExactPredicate exact( int propertyKeyId, Object value )\n-    {\n-        return new ExactPredicate( propertyKeyId, value );\n-    }\n-\n-    /**\n-     * Searches the index for numeric values between {@code from} and {@code to}.\n-     *\n-     * @param propertyKeyId the property ID to match.\n-     * @param from lower bound of the range or null if unbounded\n-     * @param fromInclusive the lower bound is inclusive if true.\n-     * @param to upper bound of the range or null if unbounded\n-     * @param toInclusive the upper bound is inclusive if true.\n-     * @return an {@link IndexQuery} instance to be used for querying an index.\n-     */\n-    public static RangePredicate<?> range( int propertyKeyId,\n+  /**\n+   * Searches the index for all entries that has the given property.\n+   *\n+   * @param propertyKeyId the property ID to match.\n+   * @return an {@link IndexQuery} instance to be used for querying an index.\n+   */\n+  public static ExistsPredicate exists(int propertyKeyId)\n+  {\n+    return new ExistsPredicate(propertyKeyId);\n+  }\n+\n+  /**\n+   * Searches the index for a certain value.\n+   *\n+   * @param propertyKeyId the property ID to match.\n+   * @param value         the property value to search for.\n+   * @return an {@link IndexQuery} instance to be used for querying an index.\n+   */\n+  public static ExactPredicate exact(int propertyKeyId, Object value)\n+  {\n+    return new ExactPredicate(propertyKeyId, value);\n+  }\n+\n+  /**\n+   * Searches the index for numeric values between {@code from} and {@code to}.\n+   *\n+   * @param propertyKeyId the property ID to match.\n+   * @param from          lower bound of the range or null if unbounded\n+   * @param fromInclusive the lower bound is inclusive if true.\n+   * @param to            upper bound of the range or null if unbounded\n+   * @param toInclusive   the upper bound is inclusive if true.\n+   * @return an {@link IndexQuery} instance to be used for querying an index.\n+   */\n+  public static RangePredicate<?> range(int propertyKeyId,\n                                         Number from, boolean fromInclusive,\n-                                        Number to, boolean toInclusive )\n+                                        Number to, boolean toInclusive)\n+  {\n+    return new NumberRangePredicate(propertyKeyId,\n+        from == null ? null : Values.numberValue(from), fromInclusive,\n+        to == null ? null : Values.numberValue(to), toInclusive);\n+  }\n+\n+  public static RangePredicate<?> range(int propertyKeyId,\n+                                        String from, boolean fromInclusive,\n+                                        String to, boolean toInclusive)\n+  {\n+    return new TextRangePredicate(propertyKeyId,\n+        from == null ? null : Values.stringValue(from), fromInclusive,\n+        to == null ? null : Values.stringValue(to), toInclusive);\n+  }\n+\n+  public static <VALUE extends Value> RangePredicate<?> range(int propertyKeyId,\n+                                                              VALUE from, boolean fromInclusive,\n+                                                              VALUE to, boolean toInclusive)\n+  {\n+    if (from == null && to == null)\n     {\n-        return new NumberRangePredicate( propertyKeyId,\n-                                         from == null ? null : Values.numberValue( from ), fromInclusive,\n-                                         to == null ? null : Values.numberValue( to ), toInclusive );\n+      throw new IllegalArgumentException(\"Cannot create RangePredicate without at least one bound\");\n     }\n \n-    public static RangePredicate<?> range( int propertyKeyId,\n-                                        String from, boolean fromInclusive,\n-                                        String to, boolean toInclusive )\n+    ValueGroup valueGroup = from != null ? from.valueGroup() : to.valueGroup();\n+    switch (valueGroup)\n     {\n-        return new TextRangePredicate( propertyKeyId,\n-                                       from == null ? null : Values.stringValue( from ), fromInclusive,\n-                                       to == null ? null : Values.stringValue( to ), toInclusive );\n+      case NUMBER:\n+        return new NumberRangePredicate(propertyKeyId,\n+            (NumberValue) from, fromInclusive,\n+            (NumberValue) to, toInclusive);\n+\n+      case TEXT:\n+        return new TextRangePredicate(propertyKeyId,\n+            (TextValue) from, fromInclusive,\n+            (TextValue) to, toInclusive);\n+\n+      case GEOMETRY:\n+        PointValue pFrom = (PointValue) from;\n+        PointValue pTo = (PointValue) to;\n+        CoordinateReferenceSystem crs = pFrom != null ? pFrom.getCoordinateReferenceSystem() : pTo.getCoordinateReferenceSystem();\n+        return new GeometryRangePredicate(propertyKeyId, crs, pFrom, fromInclusive, pTo, toInclusive);\n+\n+      default:\n+        return new RangePredicate<>(propertyKeyId, valueGroup, from, fromInclusive, to, toInclusive);\n     }\n-\n-    public static <VALUE extends Value> RangePredicate<?> range( int propertyKeyId,\n-                                                              VALUE from, boolean fromInclusive,\n-                                                              VALUE to, boolean toInclusive )\n+  }\n+\n+  /**\n+   * Create IndexQuery for retrieving all indexed entries of the given value group.\n+   */\n+  public static RangePredicate<?> range(int propertyKeyId, ValueGroup valueGroup)\n+  {\n+    if (valueGroup == ValueGroup.GEOMETRY)\n     {\n-        if ( from == null && to == null )\n-        {\n-            throw new IllegalArgumentException( \"Cannot create RangePredicate without at least one bound\" );\n-        }\n-\n-        ValueGroup valueGroup = from != null ? from.valueGroup() : to.valueGroup();\n-        switch ( valueGroup )\n-        {\n-        case NUMBER:\n-            return new NumberRangePredicate( propertyKeyId,\n-                                             (NumberValue)from, fromInclusive,\n-                                             (NumberValue)to, toInclusive );\n-\n-        case TEXT:\n-            return new TextRangePredicate( propertyKeyId,\n-                                           (TextValue)from, fromInclusive,\n-                                           (TextValue)to, toInclusive );\n-\n-        case GEOMETRY:\n-            PointValue pFrom = (PointValue)from;\n-            PointValue pTo = (PointValue)to;\n-            CoordinateReferenceSystem crs = pFrom != null ? pFrom.getCoordinateReferenceSystem() : pTo.getCoordinateReferenceSystem();\n-            return new GeometryRangePredicate( propertyKeyId, crs, pFrom, fromInclusive, pTo, toInclusive );\n-\n-        default:\n-            return new RangePredicate<>( propertyKeyId, valueGroup, from, fromInclusive, to, toInclusive );\n-        }\n+      throw new IllegalArgumentException(\"Cannot create GeometryRangePredicate without a specified CRS\");\n     }\n-\n-    /**\n-     * Create IndexQuery for retrieving all indexed entries of the given value group.\n-     */\n-    public static RangePredicate<?> range( int propertyKeyId, ValueGroup valueGroup )\n+    return new RangePredicate<>(propertyKeyId, valueGroup, null, true, null, true);\n+  }\n+\n+  /**\n+   * Create IndexQuery for retrieving all indexed entries with spatial value of the given\n+   * coordinate reference system.\n+   */\n+  public static RangePredicate<?> range(int propertyKeyId, CoordinateReferenceSystem crs)\n+  {\n+    return new GeometryRangePredicate(propertyKeyId, crs, null, true, null, true);\n+  }\n+\n+  /**\n+   * Searches the index string values starting with {@code prefix}.\n+   *\n+   * @param propertyKeyId the property ID to match.\n+   * @param prefix        the string prefix to search for.\n+   * @return an {@link IndexQuery} instance to be used for querying an index.\n+   */\n+  public static StringPrefixPredicate stringPrefix(int propertyKeyId, String prefix)\n+  {\n+    return new StringPrefixPredicate(propertyKeyId, prefix);\n+  }\n+\n+  /**\n+   * Searches the index for string values containing the exact search string.\n+   *\n+   * @param propertyKeyId the property ID to match.\n+   * @param contains      the string to search for.\n+   * @return an {@link IndexQuery} instance to be used for querying an index.\n+   */\n+  public static StringContainsPredicate stringContains(int propertyKeyId, String contains)\n+  {\n+    return new StringContainsPredicate(propertyKeyId, contains);\n+  }\n+\n+  /**\n+   * Searches the index string values ending with {@code suffix}.\n+   *\n+   * @param propertyKeyId the property ID to match.\n+   * @param suffix        the string suffix to search for.\n+   * @return an {@link IndexQuery} instance to be used for querying an index.\n+   */\n+  public static StringSuffixPredicate stringSuffix(int propertyKeyId, String suffix)\n+  {\n+    return new StringSuffixPredicate(propertyKeyId, suffix);\n+  }\n+\n+  public static ValueTuple asValueTuple(IndexQuery.ExactPredicate... query)\n+  {\n+    Value[] values = new Value[query.length];\n+    for (int i = 0; i < query.length; i++)\n     {\n-        if ( valueGroup == ValueGroup.GEOMETRY )\n-        {\n-            throw new IllegalArgumentException( \"Cannot create GeometryRangePredicate without a specified CRS\" );\n-        }\n-        return new RangePredicate<>( propertyKeyId, valueGroup, null, true, null, true );\n+      values[i] = query[i].value();\n     }\n-\n-    /**\n-     * Create IndexQuery for retrieving all indexed entries with spatial value of the given\n-     * coordinate reference system.\n-     */\n-    public static RangePredicate<?> range( int propertyKeyId, CoordinateReferenceSystem crs )\n+    return ValueTuple.of(values);\n+  }\n+\n+  private final int propertyKeyId;\n+\n+  protected IndexQuery(int propertyKeyId)\n+  {\n+    this.propertyKeyId = propertyKeyId;\n+  }\n+\n+  public abstract IndexQueryType type();\n+\n+  @SuppressWarnings(\"EqualsWhichDoesntCheckParameterClass\")\n+  @Override\n+  public final boolean equals(Object other)\n+  {\n+    // equals() and hashcode() are only used for testing so we don't care that they are a bit slow.\n+    return EqualsBuilder.reflectionEquals(this, other);\n+  }\n+\n+  @Override\n+  public final int hashCode()\n+  {\n+    // equals() and hashcode() are only used for testing so we don't care that they are a bit slow.\n+    return HashCodeBuilder.reflectionHashCode(this, false);\n+  }\n+\n+  @Override\n+  public final String toString()\n+  {\n+    // Only used to debugging, it's okay to be a bit slow.\n+    return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);\n+  }\n+\n+  public final int propertyKeyId()\n+  {\n+    return propertyKeyId;\n+  }\n+\n+  public abstract boolean acceptsValue(Value value);\n+\n+  public boolean acceptsValueAt(PropertyCursor property)\n+  {\n+    return acceptsValue(property.propertyValue());\n+  }\n+\n+  /**\n+   * @return Target {@link ValueGroup} for query or {@link ValueGroup#UNKNOWN} if not targeting single group.\n+   */\n+  public abstract ValueGroup valueGroup();\n+\n+  public enum IndexQueryType\n+  {\n+    exists,\n+    exact,\n+    range,\n+    stringPrefix,\n+    stringSuffix,\n+    stringContains\n+  }\n+\n+  public static final class ExistsPredicate extends IndexQuery\n+  {\n+    ExistsPredicate(int propertyKeyId)\n     {\n-        return new GeometryRangePredicate( propertyKeyId, crs, null, true, null, true );\n+      super(propertyKeyId);\n     }\n \n-    /**\n-     * Searches the index string values starting with {@code prefix}.\n-     *\n-     * @param propertyKeyId the property ID to match.\n-     * @param prefix the string prefix to search for.\n-     * @return an {@link IndexQuery} instance to be used for querying an index.\n-     */\n-    public static StringPrefixPredicate stringPrefix( int propertyKeyId, String prefix )\n+    @Override\n+    public IndexQueryType type()\n     {\n-        return new StringPrefixPredicate( propertyKeyId, prefix );\n+      return IndexQueryType.exists;\n     }\n \n-    /**\n-     * Searches the index for string values containing the exact search string.\n-     *\n-     * @param propertyKeyId the property ID to match.\n-     * @param contains the string to search for.\n-     * @return an {@link IndexQuery} instance to be used for querying an index.\n-     */\n-    public static StringContainsPredicate stringContains( int propertyKeyId, String contains )\n+    @Override\n+    public boolean acceptsValue(Value value)\n     {\n-        return new StringContainsPredicate( propertyKeyId, contains );\n+      return value != null && value != NO_VALUE;\n     }\n \n-    /**\n-     * Searches the index string values ending with {@code suffix}.\n-     *\n-     * @param propertyKeyId the property ID to match.\n-     * @param suffix the string suffix to search for.\n-     * @return an {@link IndexQuery} instance to be used for querying an index.\n-     */\n-    public static StringSuffixPredicate stringSuffix( int propertyKeyId, String suffix )\n+    @Override\n+    public boolean acceptsValueAt(PropertyCursor property)\n     {\n-        return new StringSuffixPredicate( propertyKeyId, suffix );\n+      return true;\n     }\n \n-    public static ValueTuple asValueTuple( IndexQuery.ExactPredicate... query )\n+    @Override\n+    public ValueGroup valueGroup()\n     {\n-        Value[] values = new Value[query.length];\n-        for ( int i = 0; i < query.length; i++ )\n-        {\n-            values[i] = query[i].value();\n-        }\n-        return ValueTuple.of( values );\n+      return ValueGroup.UNKNOWN;\n     }\n+  }\n \n-    private final int propertyKeyId;\n+  public static final class ExactPredicate extends IndexQuery\n+  {\n+    private final Value exactValue;\n \n-    protected IndexQuery( int propertyKeyId )\n+    ExactPredicate(int propertyKeyId, Object value)\n     {\n-        this.propertyKeyId = propertyKeyId;\n+      super(propertyKeyId);\n+      this.exactValue = value instanceof Value ? (Value) value : Values.of(value);\n     }\n \n-    public abstract IndexQueryType type();\n-\n-    @SuppressWarnings( \"EqualsWhichDoesntCheckParameterClass\" )\n     @Override\n-    public final boolean equals( Object other )\n+    public IndexQueryType type()\n     {\n-        // equals() and hashcode() are only used for testing so we don't care that they are a bit slow.\n-        return EqualsBuilder.reflectionEquals( this, other );\n+      return IndexQueryType.exact;\n     }\n \n     @Override\n-    public final int hashCode()\n+    public boolean acceptsValue(Value value)\n     {\n-        // equals() and hashcode() are only used for testing so we don't care that they are a bit slow.\n-        return HashCodeBuilder.reflectionHashCode( this, false );\n+      return exactValue.equals(value);\n     }\n \n     @Override\n-    public final String toString()\n+    public ValueGroup valueGroup()\n     {\n-        // Only used to debugging, it's okay to be a bit slow.\n-        return ToStringBuilder.reflectionToString( this, ToStringStyle.SHORT_PREFIX_STYLE );\n+      return exactValue.valueGroup();\n     }\n \n-    public final int propertyKeyId()\n+    public Value value()\n     {\n-        return propertyKeyId;\n+      return exactValue;\n     }\n-\n-    public abstract boolean acceptsValue( Value value );\n-\n-    public boolean acceptsValueAt( PropertyCursor property )\n+  }\n+\n+  public static class RangePredicate<T extends Value> extends IndexQuery\n+  {\n+    protected final T from;\n+    protected final boolean fromInclusive;\n+    protected final T to;\n+    protected final boolean toInclusive;\n+    protected final ValueGroup valueGroup;\n+\n+    RangePredicate(int propertyKeyId, ValueGroup valueGroup,\n+                   T from, boolean fromInclusive,\n+                   T to, boolean toInclusive)\n     {\n-        return acceptsValue( property.propertyValue() );\n+      super(propertyKeyId);\n+      this.valueGroup = valueGroup;\n+      this.from = from;\n+      this.fromInclusive = fromInclusive;\n+      this.to = to;\n+      this.toInclusive = toInclusive;\n     }\n \n-    /**\n-     * @return Target {@link ValueGroup} for query or {@link ValueGroup#UNKNOWN} if not targeting single group.\n-     */\n-    public abstract ValueGroup valueGroup();\n-\n-    public enum IndexQueryType\n+    @Override\n+    public IndexQueryType type()\n     {\n-        exists,\n-        exact,\n-        range,\n-        stringPrefix,\n-        stringSuffix,\n-        stringContains\n+      return IndexQueryType.range;\n     }\n \n-    public static final class ExistsPredicate extends IndexQuery\n+    @Override\n+    public boolean acceptsValue(Value value)\n     {\n-        ExistsPredicate( int propertyKeyId )\n-        {\n-            super( propertyKeyId );\n-        }\n-\n-        @Override\n-        public IndexQueryType type()\n-        {\n-            return IndexQueryType.exists;\n-        }\n-\n-        @Override\n-        public boolean acceptsValue( Value value )\n-        {\n-            return value != null && value != NO_VALUE;\n-        }\n-\n-        @Override\n-        public boolean acceptsValueAt( PropertyCursor property )\n-        {\n-            return true;\n+      if (value == null || value == NO_VALUE)\n+      {\n+        return false;\n+      }\n+      if (value.valueGroup() == valueGroup)\n+      {\n+        if (from != null)\n+        {\n+          int compare = Values.COMPARATOR.compare(value, from);\n+          if (compare < 0 || !fromInclusive && compare == 0)\n+          {\n+            return false;\n+          }\n         }\n-\n-        @Override\n-        public ValueGroup valueGroup()\n+        if (to != null)\n         {\n-            return ValueGroup.UNKNOWN;\n+          int compare = Values.COMPARATOR.compare(value, to);\n+          if (compare > 0 || !toInclusive && compare == 0)\n+          {\n+            return false;\n+          }\n         }\n+        return true;\n+      }\n+      return false;\n     }\n \n-    public static final class ExactPredicate extends IndexQuery\n+    @Override\n+    public ValueGroup valueGroup()\n     {\n-        private final Value exactValue;\n-\n-        ExactPredicate( int propertyKeyId, Object value )\n-        {\n-            super( propertyKeyId );\n-            this.exactValue = value instanceof Value ? (Value)value : Values.of( value );\n-        }\n-\n-        @Override\n-        public IndexQueryType type()\n-        {\n-            return IndexQueryType.exact;\n-        }\n-\n-        @Override\n-        public boolean acceptsValue( Value value )\n-        {\n-            return exactValue.equals( value );\n-        }\n-\n-        @Override\n-        public ValueGroup valueGroup()\n-        {\n-            return exactValue.valueGroup();\n-        }\n-\n-        public Value value()\n-        {\n-            return exactValue;\n-        }\n+      return valueGroup;\n     }\n \n-    public static class RangePredicate<T extends Value> extends IndexQuery\n+    public Value fromValue()\n     {\n-        protected final T from;\n-        protected final boolean fromInclusive;\n-        protected final T to;\n-        protected final boolean toInclusive;\n-        protected final ValueGroup valueGroup;\n-\n-        RangePredicate( int propertyKeyId, ValueGroup valueGroup,\n-                        T from, boolean fromInclusive,\n-                        T to, boolean toInclusive )\n-        {\n-            super( propertyKeyId );\n-            this.valueGroup = valueGroup;\n-            this.from = from;\n-            this.fromInclusive = fromInclusive;\n-            this.to = to;\n-            this.toInclusive = toInclusive;\n-        }\n+      return from == null ? NO_VALUE : from;\n+    }\n \n-        @Override\n-        public IndexQueryType type()\n-        {\n-            return IndexQueryType.range;\n-        }\n+    public Value toValue()\n+    {\n+      return to == null ? NO_VALUE : to;\n+    }\n \n-        @Override\n-        public boolean acceptsValue( Value value )\n-        {\n-            if ( value == null || value == NO_VALUE )\n-            {\n-                return false;\n-            }\n-            if ( value.valueGroup() == valueGroup )\n-            {\n-                if ( from != null )\n-                {\n-                    int compare = Values.COMPARATOR.compare( value, from );\n-                    if ( compare < 0 || !fromInclusive && compare == 0 )\n-                    {\n-                        return false;\n-                    }\n-                }\n-                if ( to != null )\n-                {\n-                    int compare = Values.COMPARATOR.compare( value, to );\n-                    if ( compare > 0 || !toInclusive && compare == 0 )\n-                    {\n-                        return false;\n-                    }\n-                }\n-                return true;\n-            }\n-            return false;\n-        }\n+    public boolean fromInclusive()\n+    {\n+      return fromInclusive;\n+    }\n \n-        @Override\n-        public ValueGroup valueGroup()\n-        {\n-            return valueGroup;\n-        }\n+    public boolean toInclusive()\n+    {\n+      return toInclusive;\n+    }\n \n-        public Value fromValue()\n-        {\n-            return from == null ? NO_VALUE : from;\n-        }\n+    /**\n+     * @return true if the order defined for this type can also be relied on for bounds comparisons.\n+     */\n+    public boolean isRegularOrder()\n+    {\n+      return true;\n+    }\n+  }\n \n-        public Value toValue()\n-        {\n-            return to == null ? NO_VALUE : to;\n-        }\n+  public static final class GeometryRangePredicate extends RangePredicate<PointValue>\n+  {\n+    private final CoordinateReferenceSystem crs;\n \n-        public boolean fromInclusive()\n-        {\n-            return fromInclusive;\n-        }\n+    GeometryRangePredicate(int propertyKeyId, CoordinateReferenceSystem crs, PointValue from, boolean fromInclusive, PointValue to, boolean toInclusive)\n+    {\n+      super(propertyKeyId, ValueGroup.GEOMETRY, from, fromInclusive, to, toInclusive);\n+      this.crs = crs;\n+    }\n \n-        public boolean toInclusive()\n-        {\n-            return toInclusive;\n-        }\n+    @Override\n+    public boolean acceptsValue(Value value)\n+    {\n+      if (value == null)\n+      {\n+        return false;\n+      }\n+      if (value instanceof PointValue)\n+      {\n+        PointValue point = (PointValue) value;\n+        if (point.getCoordinateReferenceSystem().equals(crs))\n+        {\n+          Boolean within = point.withinRange(from, fromInclusive, to, toInclusive);\n+          return within == null ? false : within;\n+        }\n+      }\n+      return false;\n+    }\n \n-        /**\n-         * @return true if the order defined for this type can also be relied on for bounds comparisons.\n-         */\n-        public boolean isRegularOrder()\n-        {\n-            return true;\n-        }\n+    public CoordinateReferenceSystem crs()\n+    {\n+      return crs;\n     }\n \n-    public static final class GeometryRangePredicate extends RangePredicate<PointValue>\n+    public PointValue from()\n     {\n-        private final CoordinateReferenceSystem crs;\n+      return from;\n+    }\n \n-        GeometryRangePredicate( int propertyKeyId, CoordinateReferenceSystem crs, PointValue from, boolean fromInclusive, PointValue to, boolean toInclusive )\n-        {\n-            super( propertyKeyId, ValueGroup.GEOMETRY, from, fromInclusive, to, toInclusive );\n-            this.crs = crs;\n-        }\n+    public PointValue to()\n+    {\n+      return to;\n+    }\n \n-        @Override\n-        public boolean acceptsValue( Value value )\n-        {\n-            if ( value == null )\n-            {\n-                return false;\n-            }\n-            if ( value instanceof PointValue )\n-            {\n-                PointValue point = (PointValue) value;\n-                if ( point.getCoordinateReferenceSystem().equals( crs ) )\n-                {\n-                    Boolean within = point.withinRange( from, fromInclusive, to, toInclusive );\n-                    return within == null ? false : within;\n-                }\n-            }\n-            return false;\n-        }\n+    /**\n+     * The order defined for spatial types cannot be used for bounds comparisons.\n+     *\n+     * @return false\n+     */\n+    @Override\n+    public boolean isRegularOrder()\n+    {\n+      return false;\n+    }\n+  }\n \n-        public CoordinateReferenceSystem crs()\n-        {\n-            return crs;\n-        }\n+  public static final class NumberRangePredicate extends RangePredicate<NumberValue>\n+  {\n+    NumberRangePredicate(int propertyKeyId, NumberValue from, boolean fromInclusive, NumberValue to,\n+                         boolean toInclusive)\n+    {\n+      super(propertyKeyId, ValueGroup.NUMBER, from, fromInclusive, to, toInclusive);\n+    }\n \n-        public PointValue from()\n-        {\n-            return from;\n-        }\n+    public Number from()\n+    {\n+      return from == null ? null : from.asObject();\n+    }\n \n-        public PointValue to()\n-        {\n-            return to;\n-        }\n+    public Number to()\n+    {\n+      return to == null ? null : to.asObject();\n+    }\n+  }\n \n-        /**\n-         * The order defined for spatial types cannot be used for bounds comparisons.\n-         * @return false\n-         */\n-        @Override\n-        public boolean isRegularOrder()\n-        {\n-            return false;\n-        }\n+  public static final class TextRangePredicate extends RangePredicate<TextValue>\n+  {\n+    TextRangePredicate(int propertyKeyId, TextValue from, boolean fromInclusive, TextValue to,\n+                       boolean toInclusive)\n+    {\n+      super(propertyKeyId, ValueGroup.TEXT, from, fromInclusive, to, toInclusive);\n     }\n \n-    public static final class NumberRangePredicate extends RangePredicate<NumberValue>\n+    public String from()\n     {\n-        NumberRangePredicate( int propertyKeyId, NumberValue from, boolean fromInclusive, NumberValue to,\n-                boolean toInclusive )\n-        {\n-            super( propertyKeyId, ValueGroup.NUMBER, from, fromInclusive, to, toInclusive );\n-        }\n+      return from == null ? null : from.stringValue();\n+    }\n \n-        public Number from()\n-        {\n-            return from == null ? null : from.asObject();\n-        }\n+    public String to()\n+    {\n+      return to == null ? null : to.stringValue();\n+    }\n+  }\n \n-        public Number to()\n-        {\n-            return to == null ? null : to.asObject();\n-        }\n+  public abstract static class StringPredicate extends IndexQuery\n+  {\n+    StringPredicate(int propertyKeyId)\n+    {\n+      super(propertyKeyId);\n     }\n \n-    public static final class TextRangePredicate extends RangePredicate<TextValue>\n+    @Override\n+    public ValueGroup valueGroup()\n     {\n-        TextRangePredicate( int propertyKeyId, TextValue from, boolean fromInclusive, TextValue to,\n-                boolean toInclusive )\n-        {\n-            super( propertyKeyId, ValueGroup.TEXT, from, fromInclusive, to, toInclusive );\n-        }\n+      return ValueGroup.TEXT;\n+    }\n+  }\n \n-        public String from()\n-        {\n-            return from == null ? null : from.stringValue();\n-        }\n+  public static final class StringPrefixPredicate extends StringPredicate\n+  {\n+    private final String prefix;\n \n-        public String to()\n-        {\n-            return to == null ? null : to.stringValue();\n-        }\n+    StringPrefixPredicate(int propertyKeyId, String prefix)\n+    {\n+      super(propertyKeyId);\n+      this.prefix = prefix;\n     }\n \n-    public abstract static class StringPredicate extends IndexQuery\n+    @Override\n+    public IndexQueryType type()\n     {\n-        StringPredicate( int propertyKeyId )\n-        {\n-            super( propertyKeyId );\n-        }\n-\n-        @Override\n-        public ValueGroup valueGroup()\n-        {\n-            return ValueGroup.TEXT;\n-        }\n+      return IndexQueryType.stringPrefix;\n     }\n \n-    public static final class StringPrefixPredicate extends StringPredicate\n+    @Override\n+    public boolean acceptsValue(Value value)\n     {\n-        private final String prefix;\n-\n-        StringPrefixPredicate( int propertyKeyId, String prefix )\n-        {\n-            super( propertyKeyId );\n-            this.prefix = prefix;\n-        }\n+      return Values.isTextValue(value) && ((TextValue) value).stringValue().startsWith(prefix);\n+    }\n \n-        @Override\n-        public IndexQueryType type()\n-        {\n-            return IndexQueryType.stringPrefix;\n-        }\n+    public String prefix()\n+    {\n+      return prefix;\n+    }\n+  }\n \n-        @Override\n-        public boolean acceptsValue( Value value )\n-        {\n-            return Values.isTextValue( value ) && ((TextValue) value).stringValue().startsWith( prefix );\n-        }\n+  public static final class StringContainsPredicate extends StringPredicate\n+  {\n+    private final String contains;\n \n-        public String prefix()\n-        {\n-            return prefix;\n-        }\n+    StringContainsPredicate(int propertyKeyId, String contains)\n+    {\n+      super(propertyKeyId);\n+      this.contains = contains;\n     }\n \n-    public static final class StringContainsPredicate extends StringPredicate\n+    @Override\n+    public IndexQueryType type()\n     {\n-        private final String contains;\n+      return IndexQueryType.stringContains;\n+    }\n \n-        StringContainsPredicate( int propertyKeyId, String contains )\n-        {\n-            super( propertyKeyId );\n-            this.contains = contains;\n-        }\n+    @Override\n+    public boolean acceptsValue(Value value)\n+    {\n+      return Values.isTextValue(value) && ((String) value.asObject()).contains(contains);\n+    }\n \n-        @Override\n-        public IndexQueryType type()\n-        {\n-            return IndexQueryType.stringContains;\n-        }\n+    public String contains()\n+    {\n+      return contains;\n+    }\n+  }\n \n-        @Override\n-        public boolean acceptsValue( Value value )\n-        {\n-            return Values.isTextValue( value ) && ((String) value.asObject()).contains( contains );\n-        }\n+  public static final class StringSuffixPredicate extends StringPredicate\n+  {\n+    private final String suffix;\n \n-        public String contains()\n-        {\n-            return contains;\n-        }\n+    StringSuffixPredicate(int propertyKeyId, String suffix)\n+    {\n+      super(propertyKeyId);\n+      this.suffix = suffix;\n     }\n \n-    public static final class StringSuffixPredicate extends StringPredicate\n+    @Override\n+    public IndexQueryType type()\n     {\n-        private final String suffix;\n-\n-        StringSuffixPredicate( int propertyKeyId, String suffix )\n-        {\n-            super( propertyKeyId );\n-            this.suffix = suffix;\n-        }\n-\n-        @Override\n-        public IndexQueryType type()\n-        {\n-            return IndexQueryType.stringSuffix;\n-        }\n+      return IndexQueryType.stringSuffix;\n+    }\n \n-        @Override\n-        public boolean acceptsValue( Value value )\n-        {\n-            return Values.isTextValue( value ) && ((String) value.asObject()).endsWith( suffix );\n-        }\n+    @Override\n+    public boolean acceptsValue(Value value)\n+    {\n+      return Values.isTextValue(value) && ((String) value.asObject()).endsWith(suffix);\n+    }\n \n-        public String suffix()\n-        {\n-            return suffix;\n-        }\n+    public String suffix()\n+    {\n+      return suffix;\n     }\n+  }\n }\n",
            "diff_size": 654
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/53/IndexQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/53/IndexQuery.java\nindex 6e5590da563..a4e05517316 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/53/IndexQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/53/IndexQuery.java\n@@ -70,28 +70,23 @@ public abstract class IndexQuery\n      * @param toInclusive the upper bound is inclusive if true.\n      * @return an {@link IndexQuery} instance to be used for querying an index.\n      */\n-    public static RangePredicate<?> range( int propertyKeyId,\n-                                        Number from, boolean fromInclusive,\n+    public static RangePredicate<?> range( int propertyKeyId, Number from, boolean fromInclusive,\n                                         Number to, boolean toInclusive )\n-    {\n-        return new NumberRangePredicate( propertyKeyId,\n-                                         from == null ? null : Values.numberValue( from ), fromInclusive,\n+{\n+        return new NumberRangePredicate( propertyKeyId, from == null ? null : Values.numberValue( from ), fromInclusive,\n                                          to == null ? null : Values.numberValue( to ), toInclusive );\n     }\n \n-    public static RangePredicate<?> range( int propertyKeyId,\n-                                        String from, boolean fromInclusive,\n+    public static RangePredicate<?> range( int propertyKeyId, String from, boolean fromInclusive,\n                                         String to, boolean toInclusive )\n-    {\n-        return new TextRangePredicate( propertyKeyId,\n-                                       from == null ? null : Values.stringValue( from ), fromInclusive,\n+{\n+        return new TextRangePredicate( propertyKeyId, from == null ? null : Values.stringValue( from ), fromInclusive,\n                                        to == null ? null : Values.stringValue( to ), toInclusive );\n     }\n \n-    public static <VALUE extends Value> RangePredicate<?> range( int propertyKeyId,\n-                                                              VALUE from, boolean fromInclusive,\n+    public static <VALUE extends Value> RangePredicate<?> range( int propertyKeyId, VALUE from, boolean fromInclusive,\n                                                               VALUE to, boolean toInclusive )\n-    {\n+{\n         if ( from == null && to == null )\n         {\n             throw new IllegalArgumentException( \"Cannot create RangePredicate without at least one bound\" );\n@@ -101,22 +96,15 @@ public abstract class IndexQuery\n         switch ( valueGroup )\n         {\n         case NUMBER:\n-            return new NumberRangePredicate( propertyKeyId,\n-                                             (NumberValue)from, fromInclusive,\n-                                             (NumberValue)to, toInclusive );\n-\n-        case TEXT:\n-            return new TextRangePredicate( propertyKeyId,\n-                                           (TextValue)from, fromInclusive,\n-                                           (TextValue)to, toInclusive );\n-\n-        case GEOMETRY:\n+            return new NumberRangePredicate( propertyKeyId, (NumberValue) from, fromInclusive, (NumberValue) to, toInclusive );\n+    case TEXT:\n+            return new TextRangePredicate( propertyKeyId, (TextValue) from, fromInclusive, (TextValue) to, toInclusive );\n+    case GEOMETRY:\n             PointValue pFrom = (PointValue)from;\n             PointValue pTo = (PointValue)to;\n             CoordinateReferenceSystem crs = pFrom != null ? pFrom.getCoordinateReferenceSystem() : pTo.getCoordinateReferenceSystem();\n             return new GeometryRangePredicate( propertyKeyId, crs, pFrom, fromInclusive, pTo, toInclusive );\n-\n-        default:\n+    default:\n             return new RangePredicate<>( propertyKeyId, valueGroup, from, fromInclusive, to, toInclusive );\n         }\n     }\n@@ -185,7 +173,8 @@ public abstract class IndexQuery\n         {\n             values[i] = query[i].value();\n         }\n-        return ValueTuple.of( values );\n+\n+return ValueTuple.of( values );\n     }\n \n     private final int propertyKeyId;\n@@ -238,11 +227,7 @@ public abstract class IndexQuery\n \n     public enum IndexQueryType\n     {\n-        exists,\n-        exact,\n-        range,\n-        stringPrefix,\n-        stringSuffix,\n+        exists, exact, range, stringPrefix, stringSuffix,\n         stringContains\n     }\n \n@@ -285,7 +270,7 @@ public abstract class IndexQuery\n         ExactPredicate( int propertyKeyId, Object value )\n         {\n             super( propertyKeyId );\n-            this.exactValue = value instanceof Value ? (Value)value : Values.of( value );\n+            this.exactValue = value instanceof Value ? (Value) value : Values.of( value );\n         }\n \n         @Override\n@@ -320,10 +305,9 @@ public abstract class IndexQuery\n         protected final boolean toInclusive;\n         protected final ValueGroup valueGroup;\n \n-        RangePredicate( int propertyKeyId, ValueGroup valueGroup,\n-                        T from, boolean fromInclusive,\n+        RangePredicate( int propertyKeyId, ValueGroup valueGroup, T from, boolean fromInclusive,\n                         T to, boolean toInclusive )\n-        {\n+{\n             super( propertyKeyId );\n             this.valueGroup = valueGroup;\n             this.from = from;\n@@ -345,7 +329,8 @@ public abstract class IndexQuery\n             {\n                 return false;\n             }\n-            if ( value.valueGroup() == valueGroup )\n+\n+if ( value.valueGroup() == valueGroup )\n             {\n                 if ( from != null )\n                 {\n@@ -420,7 +405,8 @@ public abstract class IndexQuery\n             {\n                 return false;\n             }\n-            if ( value instanceof PointValue )\n+\n+if ( value instanceof PointValue )\n             {\n                 PointValue point = (PointValue) value;\n                 if ( point.getCoordinateReferenceSystem().equals( crs ) )\n@@ -593,4 +579,4 @@ public abstract class IndexQuery\n             return suffix;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}