{
    "project_name": "neo4j-neo4j",
    "error_id": "473",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/473/NodeValueIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/473/NodeValueIterator.java\nindex 461b40655d5..1e5300c3afd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/473/NodeValueIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/473/NodeValueIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.eclipse.collections.api.iterator.LongIterator;\n@@ -33,7 +34,7 @@ import org.neo4j.values.storable.Value;\n  * A {@link IndexProgressor} + {@link IndexProgressor.EntityValueClient} combo presented as a {@link LongIterator}.\n  */\n public class NodeValueIterator extends PrimitiveLongCollections.AbstractPrimitiveLongBaseIterator\n-        implements IndexProgressor.EntityValueClient, PrimitiveLongResourceIterator, LongIterator\n+  implements IndexProgressor.EntityValueClient, PrimitiveLongResourceIterator, LongIterator\n {\n     private boolean closed;\n     private IndexProgressor progressor;\n@@ -43,7 +44,7 @@ public class NodeValueIterator extends PrimitiveLongCollections.AbstractPrimitiv\n     {\n         // progressor.next() will progress underlying SeekCursor\n         // and feed result into this with node( long reference, Value... values )\n-        if ( closed || !progressor.next() )\n+        if (closed || !progressor.next())\n         {\n             close();\n             return false;\n@@ -52,19 +53,19 @@ public class NodeValueIterator extends PrimitiveLongCollections.AbstractPrimitiv\n     }\n \n     @Override\n-    public void initialize( IndexDescriptor descriptor,\n-                            IndexProgressor progressor,\n-                            IndexQuery[] query,\n-                            IndexQueryConstraints constraints,\n-                            boolean indexIncludesTransactionState )\n+    public void initialize(IndexDescriptor descriptor,\n+                           IndexProgressor progressor,\n+                           IndexQuery[] query,\n+                           IndexQueryConstraints constraints,\n+                           boolean indexIncludesTransactionState)\n     {\n         this.progressor = progressor;\n     }\n \n     @Override\n-    public boolean acceptEntity( long reference, float score, Value... values )\n+    public boolean acceptEntity(long reference, float score, Value... values)\n     {\n-        return next( reference );\n+        return next(reference);\n     }\n \n     @Override\n@@ -76,7 +77,7 @@ public class NodeValueIterator extends PrimitiveLongCollections.AbstractPrimitiv\n     @Override\n     public void close()\n     {\n-        if ( !closed )\n+        if (!closed)\n         {\n             closed = true;\n             progressor.close();\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}