{
    "project_name": "open-eid-digidoc4j",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "56",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    Condition condition = new KeyUsageCondition(KeyUsageBit.nonRepudiation, true);\n    Map<String, List<Condition>> qualifiersAndConditions = new HashMap<String, List<Condition>>();\n    qualifiersAndConditions.put(\"http://uri.etsi.org/TrstSvc/TrustedList/SvcInfoExt/QCWithSSCD\", Arrays.asList(condition));\n    ServiceInfoStatus status = new ServiceInfoStatus(\"http://uri.etsi.org/TrstSvc/Svctype/CA/QC\",\n        \"http://uri.etsi.org/TrstSvc/TrustedList/Svcstatus/undersupervision\",\n        qualifiersAndConditions,",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/10/TSLCertificateSourceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/10/TSLCertificateSourceImpl.java\nindex d0448ef6bcd..8a5d5a3abe5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/10/TSLCertificateSourceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/10/TSLCertificateSourceImpl.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.tsl;\n \n@@ -53,7 +53,8 @@ public class TSLCertificateSourceImpl extends TrustedListsCertificateSource impl\n     //TODO test addTSLCertificate\n     Condition condition = new KeyUsageCondition(KeyUsageBit.nonRepudiation, true);\n     Map<String, List<Condition>> qualifiersAndConditions = new HashMap<String, List<Condition>>();\n-    qualifiersAndConditions.put(\"http://uri.etsi.org/TrstSvc/TrustedList/SvcInfoExt/QCWithSSCD\", Arrays.asList(condition));\n+    qualifiersAndConditions\n+        .put(\"http://uri.etsi.org/TrstSvc/TrustedList/SvcInfoExt/QCWithSSCD\", Arrays.asList(condition));\n     ServiceInfoStatus status = new ServiceInfoStatus(\"http://uri.etsi.org/TrstSvc/Svctype/CA/QC\",\n         \"http://uri.etsi.org/TrstSvc/TrustedList/Svcstatus/undersupervision\",\n         qualifiersAndConditions,\n@@ -69,9 +70,8 @@ public class TSLCertificateSourceImpl extends TrustedListsCertificateSource impl\n \n   /**\n    * Invalidates cache\n-   *\n+   * <p>\n    * Only applicable when cache is used.\n-   *\n    */\n   @Override\n   public void invalidateCache() {\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/10/TSLCertificateSourceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/10/TSLCertificateSourceImpl.java\nindex d0448ef6bcd..c62318b799a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/10/TSLCertificateSourceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/10/TSLCertificateSourceImpl.java\n@@ -54,14 +54,9 @@ public class TSLCertificateSourceImpl extends TrustedListsCertificateSource impl\n     Condition condition = new KeyUsageCondition(KeyUsageBit.nonRepudiation, true);\n     Map<String, List<Condition>> qualifiersAndConditions = new HashMap<String, List<Condition>>();\n     qualifiersAndConditions.put(\"http://uri.etsi.org/TrstSvc/TrustedList/SvcInfoExt/QCWithSSCD\", Arrays.asList(condition));\n-    ServiceInfoStatus status = new ServiceInfoStatus(\"http://uri.etsi.org/TrstSvc/Svctype/CA/QC\",\n-        \"http://uri.etsi.org/TrstSvc/TrustedList/Svcstatus/undersupervision\",\n-        qualifiersAndConditions,\n-        null,\n-        null,\n-        null,\n-        certificate.getNotBefore(),\n-        null);\n+    ServiceInfoStatus status = new ServiceInfoStatus(\"http://uri.etsi.org/TrstSvc/Svctype/CA/QC\", \"http://uri.etsi.org/TrstSvc/TrustedList/Svcstatus/undersupervision\",\n+        qualifiersAndConditions, null, null, null,\n+        certificate.getNotBefore(), null);\n     TimeDependentValues timeDependentValues = new TimeDependentValues(Arrays.asList(status));\n     serviceInfo.setStatus(timeDependentValues);\n     addCertificate(new CertificateToken(certificate), serviceInfo);\n@@ -84,4 +79,4 @@ public class TSLCertificateSourceImpl extends TrustedListsCertificateSource impl\n     logger.warn(\"Not possible to refresh this certificate source\");\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/10/TSLCertificateSourceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/10/TSLCertificateSourceImpl.java\nindex d0448ef6bcd..3f95155dcb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/10/TSLCertificateSourceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/10/TSLCertificateSourceImpl.java\n@@ -15,11 +15,9 @@ import java.util.Arrays;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.digidoc4j.TSLCertificateSource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.tsl.Condition;\n import eu.europa.esig.dss.tsl.KeyUsageBit;\n import eu.europa.esig.dss.tsl.KeyUsageCondition;\n@@ -32,7 +30,10 @@ import eu.europa.esig.dss.x509.CertificateToken;\n /**\n  * Trusted List certificates\n  */\n+\n+\n public class TSLCertificateSourceImpl extends TrustedListsCertificateSource implements TSLCertificateSource {\n+\n   private static final Logger logger = LoggerFactory.getLogger(TSLCertificateSourceImpl.class);\n \n   public TSLCertificateSourceImpl() {\n@@ -47,21 +48,16 @@ public class TSLCertificateSourceImpl extends TrustedListsCertificateSource impl\n    *\n    * @param certificate X509 certificate to be added to the list\n    */\n+\n   @Override\n   public void addTSLCertificate(X509Certificate certificate) {\n     ServiceInfo serviceInfo = new ServiceInfo();\n     //TODO test addTSLCertificate\n     Condition condition = new KeyUsageCondition(KeyUsageBit.nonRepudiation, true);\n     Map<String, List<Condition>> qualifiersAndConditions = new HashMap<String, List<Condition>>();\n-    qualifiersAndConditions.put(\"http://uri.etsi.org/TrstSvc/TrustedList/SvcInfoExt/QCWithSSCD\", Arrays.asList(condition));\n-    ServiceInfoStatus status = new ServiceInfoStatus(\"http://uri.etsi.org/TrstSvc/Svctype/CA/QC\",\n-        \"http://uri.etsi.org/TrstSvc/TrustedList/Svcstatus/undersupervision\",\n-        qualifiersAndConditions,\n-        null,\n-        null,\n-        null,\n-        certificate.getNotBefore(),\n-        null);\n+    qualifiersAndConditions.put(\"http://uri.etsi.org/TrstSvc/TrustedList/SvcInfoExt/QCWithSSCD\",\n+                                                               Arrays.asList(condition));\n+    ServiceInfoStatus status = new ServiceInfoStatus(\"http://uri.etsi.org/TrstSvc/Svctype/CA/QC\", \"http://uri.etsi.org/TrstSvc/TrustedList/Svcstatus/undersupervision\", qualifiersAndConditions, null, null, null, certificate.getNotBefore(), null);\n     TimeDependentValues timeDependentValues = new TimeDependentValues(Arrays.asList(status));\n     serviceInfo.setStatus(timeDependentValues);\n     addCertificate(new CertificateToken(certificate), serviceInfo);\n@@ -73,6 +69,7 @@ public class TSLCertificateSourceImpl extends TrustedListsCertificateSource impl\n    * Only applicable when cache is used.\n    *\n    */\n+\n   @Override\n   public void invalidateCache() {\n     logger.debug(\"Invalidating TSL cache\");\n@@ -84,4 +81,4 @@ public class TSLCertificateSourceImpl extends TrustedListsCertificateSource impl\n     logger.warn(\"Not possible to refresh this certificate source\");\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}