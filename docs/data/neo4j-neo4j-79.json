{
    "project_name": "neo4j-neo4j",
    "error_id": "79",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "132",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "180",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/79/StoreFilesDiagnostics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/79/StoreFilesDiagnostics.java\nindex 50aef8550fc..b5bc767262a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/79/StoreFilesDiagnostics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/79/StoreFilesDiagnostics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.diagnostics.providers;\n \n import java.io.IOException;\n@@ -50,106 +51,102 @@ public class StoreFilesDiagnostics extends NamedDiagnosticsProvider\n     private final FileSystemAbstraction fs;\n     private final DatabaseLayout databaseLayout;\n \n-    public StoreFilesDiagnostics( StorageEngineFactory storageEngineFactory, FileSystemAbstraction fs, DatabaseLayout databaseLayout )\n+    public StoreFilesDiagnostics(StorageEngineFactory storageEngineFactory, FileSystemAbstraction fs, DatabaseLayout databaseLayout)\n     {\n-        super( \"Store files\" );\n+        super(\"Store files\");\n         this.storageEngineFactory = storageEngineFactory;\n         this.fs = fs;\n         this.databaseLayout = databaseLayout;\n     }\n \n     @Override\n-    public void dump( DiagnosticsLogger logger )\n+    public void dump(DiagnosticsLogger logger)\n     {\n-        logger.log( getDiskSpace( databaseLayout ) );\n-        logger.log( \"Storage files stored on file store: \" + getFileStoreType( databaseLayout.databaseDirectory() ) );\n-        logger.log( \"Storage files: (filename : modification date - size)\" );\n+        logger.log(getDiskSpace(databaseLayout));\n+        logger.log(\"Storage files stored on file store: \" + getFileStoreType(databaseLayout.databaseDirectory()));\n+        logger.log(\"Storage files: (filename : modification date - size)\");\n         MappedFileCounter mappedCounter = new MappedFileCounter();\n-        long totalSize = logStoreFiles( logger, \"  \", databaseLayout.databaseDirectory(), mappedCounter );\n-        logger.log( \"Storage summary: \" );\n-        logger.log( \"  Total size of store: \" + bytesToString( totalSize ) );\n-        logger.log( \"  Total size of mapped files: \" + bytesToString( mappedCounter.getSize() ) );\n+        long totalSize = logStoreFiles(logger, \"  \", databaseLayout.databaseDirectory(), mappedCounter);\n+        logger.log(\"Storage summary: \");\n+        logger.log(\"  Total size of store: \" + bytesToString(totalSize));\n+        logger.log(\"  Total size of mapped files: \" + bytesToString(mappedCounter.getSize()));\n     }\n \n-    private long logStoreFiles( DiagnosticsLogger logger, String prefix, Path dir, MappedFileCounter mappedCounter )\n+    private long logStoreFiles(DiagnosticsLogger logger, String prefix, Path dir, MappedFileCounter mappedCounter)\n     {\n-        if ( !Files.isDirectory( dir ) )\n+        if (!Files.isDirectory(dir))\n         {\n             return 0;\n         }\n-        Path[] files = FileUtils.listPaths( dir );\n-        if ( files == null )\n+        Path[] files = FileUtils.listPaths(dir);\n+        if (files == null)\n         {\n-            logger.log( prefix + \"<INACCESSIBLE>\" );\n+            logger.log(prefix + \"<INACCESSIBLE>\");\n             return 0;\n         }\n         long total = 0;\n \n         // Sort by name\n-        List<Path> fileList = Arrays.asList( files );\n-        fileList.sort( Comparator.comparing( Path::getFileName ) );\n+        List<Path> fileList = Arrays.asList(files);\n+        fileList.sort(Comparator.comparing(Path::getFileName));\n \n-        for ( Path file : fileList )\n+        for (Path file : fileList)\n         {\n             long size = 0;\n             String filename = file.getFileName().toString();\n-            if ( Files.isDirectory( file ) )\n+            if (Files.isDirectory(file))\n             {\n-                logger.log( prefix + filename + \":\" );\n-                size = logStoreFiles( logger, prefix + \"  \", file, mappedCounter );\n+                logger.log(prefix + filename + \":\");\n+                size = logStoreFiles(logger, prefix + \"  \", file, mappedCounter);\n                 filename = \"- Total\";\n-            }\n-            else\n+            } else\n             {\n                 try\n                 {\n-                    size = Files.size( file );\n-                }\n-                catch ( IOException ignored )\n+                    size = Files.size(file);\n+                } catch (IOException ignored)\n                 {\n                     // Preserve behaviour of File.length()\n                 }\n-                mappedCounter.addFile( file );\n+                mappedCounter.addFile(file);\n             }\n \n-            String fileModificationDate = getFileModificationDate( file );\n-            String bytes = bytesToString( size );\n-            String fileInformation = String.format( \"%s%s: %s - %s\", prefix, filename, fileModificationDate, bytes );\n-            logger.log( fileInformation );\n+            String fileModificationDate = getFileModificationDate(file);\n+            String bytes = bytesToString(size);\n+            String fileInformation = String.format(\"%s%s: %s - %s\", prefix, filename, fileModificationDate, bytes);\n+            logger.log(fileInformation);\n \n             total += size;\n         }\n         return total;\n     }\n \n-    private static String getFileModificationDate( Path file )\n+    private static String getFileModificationDate(Path file)\n     {\n         try\n         {\n-            ZonedDateTime modifiedDate = Files.getLastModifiedTime( file ).toInstant()\n-                    .atZone( ZoneId.systemDefault() )\n-                    .withNano( 0 ); // truncate milliseconds\n-            return ISO_OFFSET_DATE_TIME.format( modifiedDate );\n-        }\n-        catch ( IOException e )\n+            ZonedDateTime modifiedDate = Files.getLastModifiedTime(file).toInstant()\n+              .atZone(ZoneId.systemDefault())\n+              .withNano(0); // truncate milliseconds\n+            return ISO_OFFSET_DATE_TIME.format(modifiedDate);\n+        } catch (IOException e)\n         {\n             return \"<UNKNOWN>\";\n         }\n     }\n \n-    private static String getDiskSpace( DatabaseLayout databaseLayout )\n+    private static String getDiskSpace(DatabaseLayout databaseLayout)\n     {\n         String header = \"Disk space on partition (Total / Free / Free %%):\";\n         try\n         {\n             Path directory = databaseLayout.databaseDirectory();\n-            FileStore fileStore = Files.getFileStore( directory );\n+            FileStore fileStore = Files.getFileStore(directory);\n             long free = fileStore.getUnallocatedSpace();\n             long total = fileStore.getTotalSpace();\n             long percentage = total != 0 ? (free * 100 / total) : 0;\n-            return String.format( header + \" %s / %s / %s\", total, free, percentage );\n-        }\n-        catch ( IOException e )\n+            return String.format(header + \" %s / %s / %s\", total, free, percentage);\n+        } catch (IOException e)\n         {\n             return header + \" Unable to determine disk space on the partition\";\n         }\n@@ -165,24 +162,22 @@ public class StoreFilesDiagnostics extends NamedDiagnosticsProvider\n         {\n             try\n             {\n-                mappedCandidates.addAll( storageEngineFactory.listStorageFiles( fs, databaseLayout ) );\n-            }\n-            catch ( IOException e )\n+                mappedCandidates.addAll(storageEngineFactory.listStorageFiles(fs, databaseLayout));\n+            } catch (IOException e)\n             {\n                 // Hmm, there was no storage here\n             }\n-            mappedIndexFilter = new NativeIndexFileFilter( databaseLayout.databaseDirectory() );\n+            mappedIndexFilter = new NativeIndexFileFilter(databaseLayout.databaseDirectory());\n         }\n \n-        void addFile( Path file )\n+        void addFile(Path file)\n         {\n-            if ( canBeManagedByPageCache( file ) || mappedIndexFilter.test( file ) )\n+            if (canBeManagedByPageCache(file) || mappedIndexFilter.test(file))\n             {\n                 try\n                 {\n-                    size += Files.size( file );\n-                }\n-                catch ( IOException ignored )\n+                    size += Files.size(file);\n+                } catch (IOException ignored)\n                 {\n                     // Preserve behaviour of File.length()\n                 }\n@@ -200,10 +195,10 @@ public class StoreFilesDiagnostics extends NamedDiagnosticsProvider\n          * @param storeFile file of the store file to check.\n          * @return Returns whether or not store file by given file name should be managed by the page cache.\n          */\n-        boolean canBeManagedByPageCache( Path storeFile )\n+        boolean canBeManagedByPageCache(Path storeFile)\n         {\n-            boolean isLabelScanStore = databaseLayout.labelScanStore().equals( storeFile );\n-            return isLabelScanStore || mappedCandidates.contains( storeFile );\n+            boolean isLabelScanStore = databaseLayout.labelScanStore().equals(storeFile);\n+            return isLabelScanStore || mappedCandidates.contains(storeFile);\n         }\n     }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}