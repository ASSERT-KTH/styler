{
    "project_name": "Angel-ML-angel",
    "error_id": "1005",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1005/EnvironmentBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1005/EnvironmentBlock.java\nindex 87a95fb8056..45710e93235 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1005/EnvironmentBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1005/EnvironmentBlock.java\n@@ -84,7 +84,7 @@ public class EnvironmentBlock extends HtmlBlock {\n     Properties properties = System.getProperties();\n     String propertiesName;\n     String propertiesValue;\n-    for (Iterator<?> names = (Iterator<?>) properties.propertyNames(); names.hasNext();) {\n+    for (Iterator<?> names = (Iterator<?>) properties.propertyNames(); names.hasNext(); ) {\n       propertiesName = (String) names.next();\n       propertiesValue = properties.getProperty(propertiesName);\n       tbody.tr().td(propertiesName).td(propertiesValue).td().span().$title(propertiesName)._()._()\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1005/EnvironmentBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1005/EnvironmentBlock.java\nindex 87a95fb8056..28719502529 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1005/EnvironmentBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1005/EnvironmentBlock.java\n@@ -40,8 +40,7 @@ public class EnvironmentBlock extends HtmlBlock {\n     amContext = amctx;\n   }\n \n-\n-  @Override\n+@Override\n   protected void render(Block html) {\n     set(TITLE, join(\"Angel Environment\"));\n     html.h1(\"Runtime Information\");\n@@ -73,26 +72,24 @@ public class EnvironmentBlock extends HtmlBlock {\n       key = (String) propertiesSortedKeys.next();\n       angel_properties_table.tr().td(String.valueOf(key))\n           .td((String) propertiesConfiguration.get(key))._();\n-    }\n+  }\n     angel_properties_table._();\n     html.h1(\"    \");\n-\n-\n-    TBODY<TABLE<Hamlet>> tbody =\n+TBODY<TABLE<Hamlet>> tbody =\n         html.h1(\"System Properties\").table(\"#jobs\").thead().tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")\n             ._()._().tbody();\n-    Properties properties = System.getProperties();\n+Properties properties = System.getProperties();\n     String propertiesName;\n     String propertiesValue;\n-    for (Iterator<?> names = (Iterator<?>) properties.propertyNames(); names.hasNext();) {\n+    for (Iterator<?> names = (Iterator<?>) properties.propertyNames();\n+names.hasNext();) {\n       propertiesName = (String) names.next();\n       propertiesValue = properties.getProperty(propertiesName);\n       tbody.tr().td(propertiesName).td(propertiesValue).td().span().$title(propertiesName)._()._()\n           .td().span().$title(propertiesValue)._()._()._();\n-    }\n+  }\n     tbody._()._();\n-\n   }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 235).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1005/EnvironmentBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1005/EnvironmentBlock.java\nindex 87a95fb8056..70249b037ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1005/EnvironmentBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1005/EnvironmentBlock.java\n@@ -23,9 +23,7 @@ import org.apache.hadoop.yarn.webapp.hamlet.Hamlet;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TABLE;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TBODY;\n import org.apache.hadoop.yarn.webapp.view.HtmlBlock;\n-\n import java.util.*;\n-\n import static org.apache.hadoop.yarn.util.StringHelper.join;\n import static org.apache.hadoop.yarn.webapp.view.JQueryUI._TH;\n \n@@ -33,6 +31,7 @@ import static org.apache.hadoop.yarn.webapp.view.JQueryUI._TH;\n // import java.lang.reflect.Field;\n \n public class EnvironmentBlock extends HtmlBlock {\n+\n   final AMContext amContext;\n \n   @Inject\n@@ -40,12 +39,10 @@ public class EnvironmentBlock extends HtmlBlock {\n     amContext = amctx;\n   }\n \n-\n   @Override\n   protected void render(Block html) {\n     set(TITLE, join(\"Angel Environment\"));\n     html.h1(\"Runtime Information\");\n-\n     TABLE<Hamlet> run_info_table = html.table();\n     String UsrHome = System.getProperty(\"user.home\");\n     String UsrDir = System.getProperty(\"user.dir\");\n@@ -54,12 +51,9 @@ public class EnvironmentBlock extends HtmlBlock {\n     String OsNmae = System.getProperty(\"os.name\");\n     String JavaVersion = System.getProperty(\"java.version\");\n     run_info_table.tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")._();\n-    run_info_table.tr().td(\"UsrHome\").td(UsrHome)._().tr().td(\"UsrDir\").td(UsrDir)._().tr()\n-        .td(\"UsrName\").td(UsrName)._().tr().td(\"JavaHome\").td(JavaHome)._().tr().td(\"OsNmae\")\n-        .td(OsNmae)._().tr().td(\"JavaVersion\").td(JavaVersion)._();\n+    run_info_table.tr().td(\"UsrHome\").td(UsrHome)._().tr().td(\"UsrDir\").td(UsrDir)._().tr().td(\"UsrName\").td(UsrName)._().tr().td(\"JavaHome\").td(JavaHome)._().tr().td(\"OsNmae\").td(OsNmae)._().tr().td(\"JavaVersion\").td(JavaVersion)._();\n     run_info_table._();\n     html.h1(\"    \");\n-\n     html.h1(\"Angel Properties\");\n     TABLE<Hamlet> angel_properties_table = html.table();\n     angel_properties_table.tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")._();\n@@ -71,28 +65,20 @@ public class EnvironmentBlock extends HtmlBlock {\n     Object key;\n     while (propertiesSortedKeys.hasNext()) {\n       key = (String) propertiesSortedKeys.next();\n-      angel_properties_table.tr().td(String.valueOf(key))\n-          .td((String) propertiesConfiguration.get(key))._();\n+      angel_properties_table.tr().td(String.valueOf(key)).td((String) propertiesConfiguration.get(key))._();\n     }\n     angel_properties_table._();\n     html.h1(\"    \");\n-\n-\n-    TBODY<TABLE<Hamlet>> tbody =\n-        html.h1(\"System Properties\").table(\"#jobs\").thead().tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")\n-            ._()._().tbody();\n+    TBODY<TABLE<Hamlet>> tbody = html.h1(\"System Properties\").table(\"#jobs\").thead().tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")._()._().tbody();\n     Properties properties = System.getProperties();\n     String propertiesName;\n     String propertiesValue;\n     for (Iterator<?> names = (Iterator<?>) properties.propertyNames(); names.hasNext();) {\n       propertiesName = (String) names.next();\n       propertiesValue = properties.getProperty(propertiesName);\n-      tbody.tr().td(propertiesName).td(propertiesValue).td().span().$title(propertiesName)._()._()\n-          .td().span().$title(propertiesValue)._()._()._();\n+      tbody.tr().td(propertiesName).td(propertiesValue).td().span().$title(propertiesName)._()._().td().span().$title(propertiesValue)._()._()._();\n     }\n     tbody._()._();\n-\n   }\n \n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}