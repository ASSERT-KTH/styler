{
    "project_name": "wso2-attic-commons",
    "error_id": "119",
    "information": {
        "errors": [
            {
                "line": "57",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 216).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  \n  /**\n   * @see org.eclipse.wst.wsdl.validation.internal.resolver.IExtensibleURIResolver#resolve(java.lang.String, java.lang.String, java.lang.String, org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult)\n   */\n  public void resolve(String baseLocation, String publicId, String systemId, IURIResolutionResult result)\n  {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/119/URIResolver.java\nindex c9f3638aeaf..483bc445d41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/119/URIResolver.java\n@@ -52,7 +52,7 @@ public class URIResolver implements IExtensibleURIResolver, XMLEntityResolver\n     extURIResolversList.add(uriResolver);\n   }\n \n-  \n+\n   /**\n    * @see org.eclipse.wst.wsdl.validation.internal.resolver.IExtensibleURIResolver#resolve(java.lang.String, java.lang.String, java.lang.String, org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult)\n    */\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/119/URIResolver.java\nindex c9f3638aeaf..2a36712e8d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/119/URIResolver.java\n@@ -4,7 +4,7 @@\n  * are made available under the terms of the Eclipse Public License v1.0\n  * which accompanies this distribution, and is available at\n  * http://www.eclipse.org/legal/epl-v10.html\n- * \n+ *\n  * Contributors:\n  *     IBM Corporation - initial API and implementation\n  *******************************************************************************/\n@@ -29,255 +29,204 @@ import org.eclipse.wst.wsdl.validation.internal.xml.XMLCatalog;\n  * can locate the entity the resolver will ask the internal WSDL validator XML\n  * catalog to resolve the location.\n  */\n-public class URIResolver implements IExtensibleURIResolver, XMLEntityResolver\n-{\n+public class URIResolver implements IExtensibleURIResolver, XMLEntityResolver {\n   private List extURIResolversList = new ArrayList();\n \n   /**\n-   * Constructor. \n+   * Constructor.\n    */\n-  public URIResolver()\n-  {\n+  public URIResolver() {\n   }\n \n \n   /**\n    * Add an extension URI resolver.\n-   * \n-   * @param uriResolver\n-   *          The extension URI resolver.\n+   *\n+   * @param uriResolver The extension URI resolver.\n    */\n-  public void addURIResolver(IExtensibleURIResolver uriResolver)\n-  {\n+  public void addURIResolver(IExtensibleURIResolver uriResolver) {\n     extURIResolversList.add(uriResolver);\n   }\n \n-  \n+\n   /**\n    * @see org.eclipse.wst.wsdl.validation.internal.resolver.IExtensibleURIResolver#resolve(java.lang.String, java.lang.String, java.lang.String, org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult)\n    */\n-  public void resolve(String baseLocation, String publicId, String systemId, IURIResolutionResult result)\n-  {\n+  public void resolve(String baseLocation, String publicId, String systemId, IURIResolutionResult result) {\n     Iterator resolverIter = extURIResolversList.iterator();\n-    while(resolverIter.hasNext())\n-    {\n-      IExtensibleURIResolver resolver = (IExtensibleURIResolver)resolverIter.next();\n-      if (resolver == null)\n-      {\n+    while (resolverIter.hasNext()) {\n+      IExtensibleURIResolver resolver = (IExtensibleURIResolver) resolverIter.next();\n+      if (resolver == null) {\n         continue;\n       }\n       resolver.resolve(baseLocation, publicId, systemId, result);\n-      if (result.getLogicalLocation() != null && !result.getPhysicalLocation().equals(systemId))\n-      {\n+      if (result.getLogicalLocation() != null && !result.getPhysicalLocation().equals(systemId)) {\n         break;\n       }\n     }\n \n     // If we haven't been able to locate the result yet ask the internal XML\n     // catalog.\n-    if (result.getLogicalLocation() == null && (publicId != null || systemId != null))\n-    {\n+    if (result.getLogicalLocation() == null && (publicId != null || systemId != null)) {\n       String tempresult = XMLCatalog.getInstance().resolveEntityLocation(publicId, systemId);\n-      if(tempresult != null)\n-      {\n-    \tresult.setLogicalLocation(tempresult);\n-    \tresult.setPhysicalLocation(tempresult);\n+      if (tempresult != null) {\n+        result.setLogicalLocation(tempresult);\n+        result.setPhysicalLocation(tempresult);\n       }\n     }\n-    if(result.getLogicalLocation() == null)\n-    {\n+    if (result.getLogicalLocation() == null) {\n       result.setLogicalLocation(normalize(baseLocation, systemId));\n       result.setPhysicalLocation(result.getLogicalLocation());\n     }\n   }\n-  \n-  public IURIResolutionResult resolve(String baseLocation, String publicId, String systemId)\n-  {\n-\tIURIResolutionResult result= new URIResolutionResult();\n-\tresolve(baseLocation, publicId, systemId, result);\n-\treturn result;\n+\n+  public IURIResolutionResult resolve(String baseLocation, String publicId, String systemId) {\n+    IURIResolutionResult result = new URIResolutionResult();\n+    resolve(baseLocation, publicId, systemId, result);\n+    return result;\n   }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see org.apache.xerces.xni.parser.XMLEntityResolver#resolveEntity(org.apache.xerces.xni.XMLResourceIdentifier)\n    */\n-  public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException\n-  {\n+  public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {\n     String publicId = resourceIdentifier.getPublicId();\n     String systemId = resourceIdentifier.getLiteralSystemId();\n-    if (publicId == null || publicId.equals(\"\"))\n-    {\n+    if (publicId == null || publicId.equals(\"\")) {\n       publicId = resourceIdentifier.getNamespace();\n     }\n     IURIResolutionResult result = resolve(resourceIdentifier.getBaseSystemId(), publicId, systemId);\n     XMLInputSource xmlInputSource = null;\n-    if (result != null)\n-    {\n+    if (result != null) {\n       LazyURLInputStream is = new LazyURLInputStream(result.getPhysicalLocation());\n       xmlInputSource = new XMLInputSource(publicId, result.getLogicalLocation(), result.getLogicalLocation(), is, null);\n     }\n     return xmlInputSource;\n   }\n-  \n+\n   /**\n    * Normalize the systemId. Make it absolute with respect to the\n    * baseLocation if necessary.\n-   * \n+   *\n    * @param baseLocation The base location of the file.\n-   * @param systemId The system id of the file.\n+   * @param systemId     The system id of the file.\n    * @return A normalized version of the system id.\n    */\n-  protected String normalize(String baseLocation, String systemId)\n-  {\n-  \tif(systemId == null)\n-  \t{\n-  \t  return systemId;\n-  \t}\n-  \t// Try to find a scheme in the systemId.\n-  \tint schemaLoc = systemId.indexOf(':');\n-  \tif(schemaLoc != -1 && systemId.charAt(schemaLoc+1) == '/')\n-  \t{\n-  \t  // A scheme has been found. The systemId is an\n-  \t  // absolute location so return it.\n-  \t  return systemId;\n-  \t}\n-  \tif(baseLocation == null)\n-  \t{\n-  \t  return baseLocation;\n-  \t}\n-  \t\n-  \tString result = \"\";\n-  \t\n-  \t// Ensure all slashes in the locations are /.\n-  \tbaseLocation = baseLocation.replace('\\\\','/');\n-  \tsystemId = systemId.replace('\\\\','/');\n-  \t\n-  \t// Remove the trailing section of the baseLocation.\n-\tint lastSlash = baseLocation.lastIndexOf('/');\n-  \tString tempresult = baseLocation.substring(0, lastSlash+1);\n-  \t\n-  \tif(systemId.startsWith(\"/\"))\n-  \t{\n-  \t  systemId = systemId.substring(1);\n-  \t}\n-  \t\n-  \t// Join the base location with the systemid\n-  \ttempresult = tempresult + systemId;\n-  \t\n-  \t// While the relative location starts with a ../ or ./ change\n-  \t// the result and the relative location.\n-  \tint loc;\n-  \twhile((loc = tempresult.lastIndexOf(\"./\")) != -1)\n-  \t{\n-  \t  result = tempresult.substring(loc + 2) + result;\n-  \t  if(tempresult.charAt(loc - 1) == '.')\n-  \t  {\n-  \t  \tif(tempresult.charAt(loc - 2) == '/')\n-  \t  \t{\n-  \t  \t  String temp = tempresult.substring(0, loc - 2);\n-  \t  \t  int loc2 = temp.lastIndexOf('/');\n-  \t  \t  if(loc2 == -1)\n-  \t  \t  {\n-  \t  \t  \t// If there is no other / before this the URL must start with scheme:/../\n-  \t  \t  \tresult = \"../\" + result;\n-  \t  \t  \ttempresult = tempresult.substring(0, loc - 1);\n-  \t  \t  }\n-  \t  \t  else\n-  \t  \t  {\n-  \t  \t  \t// Remove the section that comes before this one from tempresult unless it's ../.\n-  \t  \t    tempresult = tempresult.substring(0, loc - 1);\n-  \t  \t    int numSectsToRemove = 1;\n-  \t  \t    \n-  \t  \t    while(tempresult.endsWith(\"./\"))\n-  \t  \t    {\n-  \t  \t      int tempreslen = tempresult.length();\n-  \t  \t      if(tempreslen > 2 && tempresult.charAt(tempreslen -3) == '.')\n-  \t  \t      {\n-  \t  \t      \tif(tempreslen > 3 && tempresult.charAt(tempreslen - 4) == '/')\n-  \t  \t      \t{\n-  \t  \t      \t  numSectsToRemove++;\n-  \t  \t      \t  tempresult = tempresult.substring(0, tempresult.length() -3);\n-  \t  \t        }\n-  \t  \t      \telse\n-  \t  \t      \t{\n-  \t  \t      \t  break;\n-  \t  \t      \t}\n-  \t  \t      }\n-  \t  \t      else\n-  \t  \t      {\n-  \t  \t      \tif(tempresult.charAt(tempresult.length() -2) == '/')\n-  \t  \t      \t{\n-  \t  \t      \t  tempresult = tempresult.substring(0, tempresult.length() -2);\n-  \t  \t      \t}\n-  \t  \t      \telse\n-  \t  \t      \t{\n-  \t  \t      \t  break;\n-  \t  \t      \t}\n-  \t  \t      }\n-  \t  \t    }\n-  \t  \t    // Remove the sections.\n-  \t  \t    for(int i = 0; i < numSectsToRemove; i++)\n-  \t  \t    {\n-  \t  \t      String temp2 = tempresult.substring(0,tempresult.length()-1);\n-  \t  \t      int loc3 = temp2.lastIndexOf('/');\n-  \t  \t      if(loc3 == -1)\n-  \t  \t      {\n-  \t  \t      \tbreak;\n-  \t  \t      }\n-  \t  \t      tempresult = tempresult.substring(0, loc3+1);\n-  \t  \t    }\n-  \t  \t  } \n-  \t  \t}\n-  \t  \telse\n-  \t  \t{\n-  \t  \t  // The URI is of the form file://somedir../ so copy it as is\n-  \t  \t  String temp = tempresult.substring(0, loc - 1);\n-\t  \t  int loc2 = temp.lastIndexOf('/');\n-\t  \t  if(loc2 == -1)\n-\t  \t  {\n-\t  \t  \t// The URI must look like file:../ or ../ so copy over the whole tempresult.\n-\t  \t  \tresult = tempresult.substring(0,loc+2) + result;\n-\t  \t  \ttempresult = \"\";\n-\t  \t  }\n-\t  \t  else\n-\t  \t  {\n-\t  \t  \t// Copy over the whole somedir../\n-\t  \t  \tresult = tempresult.substring(loc2 + 1, tempresult.length());\n-\t  \t    tempresult = tempresult.substring(0, loc2+1);\n-\t  \t  }\n-  \t  \t}\n-  \t  }\n-  \t  else\n-  \t  {\n-  \t    if(tempresult.charAt(loc -1 ) == '/')\n-\t  \t{\n-  \t  \t  // Result is of the form file://something/./something so remove the ./\n-  \t      tempresult = tempresult.substring(0,loc);\n-\t  \t}\n-  \t    else\n-  \t    {\n-  \t      // Result URI is of form file://somedir./ so copy over the whole section.\n-    \t  String temp = tempresult.substring(0, loc - 1);\n-  \t  \t  int loc2 = temp.lastIndexOf('/');\n-  \t  \t  if(loc2 == -1)\n-  \t  \t  {\n-  \t  \t  \t// The URI must look like file:./ or ./ so copy over the whole tempresult.\n-  \t  \t  \tresult = tempresult.substring(0, loc) + result;\n-  \t  \t  \ttempresult = \"\";\n-  \t  \t  }\n-  \t  \t  else\n-  \t  \t  {\n-  \t  \t  \t// Copy over the whole somedir./\n-  \t  \t  \tresult = tempresult.substring(loc2 + 1, tempresult.length());\n-  \t  \t    tempresult = tempresult.substring(0, loc2+1);\n-  \t  \t  }\n-  \t    }\n-  \t  }\n-  \t}\n-  \tresult = tempresult + result;\n-  \treturn result;\n+  protected String normalize(String baseLocation, String systemId) {\n+    if (systemId == null) {\n+      return systemId;\n+    }\n+    // Try to find a scheme in the systemId.\n+    int schemaLoc = systemId.indexOf(':');\n+    if (schemaLoc != -1 && systemId.charAt(schemaLoc + 1) == '/') {\n+      // A scheme has been found. The systemId is an\n+      // absolute location so return it.\n+      return systemId;\n+    }\n+    if (baseLocation == null) {\n+      return baseLocation;\n+    }\n+\n+    String result = \"\";\n+\n+    // Ensure all slashes in the locations are /.\n+    baseLocation = baseLocation.replace('\\\\', '/');\n+    systemId = systemId.replace('\\\\', '/');\n+\n+    // Remove the trailing section of the baseLocation.\n+    int lastSlash = baseLocation.lastIndexOf('/');\n+    String tempresult = baseLocation.substring(0, lastSlash + 1);\n+\n+    if (systemId.startsWith(\"/\")) {\n+      systemId = systemId.substring(1);\n+    }\n+\n+    // Join the base location with the systemid\n+    tempresult = tempresult + systemId;\n+\n+    // While the relative location starts with a ../ or ./ change\n+    // the result and the relative location.\n+    int loc;\n+    while ((loc = tempresult.lastIndexOf(\"./\")) != -1) {\n+      result = tempresult.substring(loc + 2) + result;\n+      if (tempresult.charAt(loc - 1) == '.') {\n+        if (tempresult.charAt(loc - 2) == '/') {\n+          String temp = tempresult.substring(0, loc - 2);\n+          int loc2 = temp.lastIndexOf('/');\n+          if (loc2 == -1) {\n+            // If there is no other / before this the URL must start with scheme:/../\n+            result = \"../\" + result;\n+            tempresult = tempresult.substring(0, loc - 1);\n+          } else {\n+            // Remove the section that comes before this one from tempresult unless it's ../.\n+            tempresult = tempresult.substring(0, loc - 1);\n+            int numSectsToRemove = 1;\n+\n+            while (tempresult.endsWith(\"./\")) {\n+              int tempreslen = tempresult.length();\n+              if (tempreslen > 2 && tempresult.charAt(tempreslen - 3) == '.') {\n+                if (tempreslen > 3 && tempresult.charAt(tempreslen - 4) == '/') {\n+                  numSectsToRemove++;\n+                  tempresult = tempresult.substring(0, tempresult.length() - 3);\n+                } else {\n+                  break;\n+                }\n+              } else {\n+                if (tempresult.charAt(tempresult.length() - 2) == '/') {\n+                  tempresult = tempresult.substring(0, tempresult.length() - 2);\n+                } else {\n+                  break;\n+                }\n+              }\n+            }\n+            // Remove the sections.\n+            for (int i = 0; i < numSectsToRemove; i++) {\n+              String temp2 = tempresult.substring(0, tempresult.length() - 1);\n+              int loc3 = temp2.lastIndexOf('/');\n+              if (loc3 == -1) {\n+                break;\n+              }\n+              tempresult = tempresult.substring(0, loc3 + 1);\n+            }\n+          }\n+        } else {\n+          // The URI is of the form file://somedir../ so copy it as is\n+          String temp = tempresult.substring(0, loc - 1);\n+          int loc2 = temp.lastIndexOf('/');\n+          if (loc2 == -1) {\n+            // The URI must look like file:../ or ../ so copy over the whole tempresult.\n+            result = tempresult.substring(0, loc + 2) + result;\n+            tempresult = \"\";\n+          } else {\n+            // Copy over the whole somedir../\n+            result = tempresult.substring(loc2 + 1, tempresult.length());\n+            tempresult = tempresult.substring(0, loc2 + 1);\n+          }\n+        }\n+      } else {\n+        if (tempresult.charAt(loc - 1) == '/') {\n+          // Result is of the form file://something/./something so remove the ./\n+          tempresult = tempresult.substring(0, loc);\n+        } else {\n+          // Result URI is of form file://somedir./ so copy over the whole section.\n+          String temp = tempresult.substring(0, loc - 1);\n+          int loc2 = temp.lastIndexOf('/');\n+          if (loc2 == -1) {\n+            // The URI must look like file:./ or ./ so copy over the whole tempresult.\n+            result = tempresult.substring(0, loc) + result;\n+            tempresult = \"\";\n+          } else {\n+            // Copy over the whole somedir./\n+            result = tempresult.substring(loc2 + 1, tempresult.length());\n+            tempresult = tempresult.substring(0, loc2 + 1);\n+          }\n+        }\n+      }\n+    }\n+    result = tempresult + result;\n+    return result;\n   }\n \n }\n",
            "diff_size": 194
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/119/URIResolver.java\nindex c9f3638aeaf..483bc445d41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/119/URIResolver.java\n@@ -52,7 +52,7 @@ public class URIResolver implements IExtensibleURIResolver, XMLEntityResolver\n     extURIResolversList.add(uriResolver);\n   }\n \n-  \n+\n   /**\n    * @see org.eclipse.wst.wsdl.validation.internal.resolver.IExtensibleURIResolver#resolve(java.lang.String, java.lang.String, java.lang.String, org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult)\n    */\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/119/URIResolver.java\nindex c9f3638aeaf..483bc445d41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/119/URIResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/119/URIResolver.java\n@@ -52,7 +52,7 @@ public class URIResolver implements IExtensibleURIResolver, XMLEntityResolver\n     extURIResolversList.add(uriResolver);\n   }\n \n-  \n+\n   /**\n    * @see org.eclipse.wst.wsdl.validation.internal.resolver.IExtensibleURIResolver#resolve(java.lang.String, java.lang.String, java.lang.String, org.eclipse.wst.wsdl.validation.internal.resolver.IURIResolutionResult)\n    */\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}