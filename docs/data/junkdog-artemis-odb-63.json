{
    "project_name": "junkdog-artemis-odb",
    "error_id": "63",
    "information": {
        "errors": [
            {
                "line": "108",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\n\t\n\tprivate static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n\t\t\n\t\t@Override\n\t\tpublic int compare(FieldDescriptor o1, FieldDescriptor o2) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/63/ClassMetadataUtil.java\nindex e2e7067a1d5..a41f869a0ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler/63/ClassMetadataUtil.java\n@@ -103,10 +103,9 @@ public final class ClassMetadataUtil {\n \t\t\n \t\treturn size;\n \t}\n-\t\n-\t\n-\tprivate static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n-\t\t\n+\n+private static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n+\n \t\t@Override\n \t\tpublic int compare(FieldDescriptor o1, FieldDescriptor o2) {\n \t\t\treturn sizeOf(o1) - sizeOf(o2);\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/63/ClassMetadataUtil.java\nindex e2e7067a1d5..7b2c1e441f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/63/ClassMetadataUtil.java\n@@ -13,103 +13,108 @@ import java.util.List;\n import java.util.Set;\n \n public final class ClassMetadataUtil {\n-\t\n-\tprivate ClassMetadata meta;\n-\n-\tpublic ClassMetadataUtil(ClassMetadata meta) {\n-\t\tthis.meta = meta;\n-\t}\n-\t\n-\tpublic static List<FieldDescriptor> instanceFields(ClassMetadata meta) {\n-\t\tList<FieldDescriptor> instanceFields = new ArrayList<FieldDescriptor>();\n-\t\tfor (FieldDescriptor field : meta.fields()) {\n-\t\t\tif (\"$data\".equals(field.name) || \"$world\".equals(field.name))\n-\t\t\t\t\tcontinue;\n-\t\t\t\n-\t\t\tif ((field.access & (ACC_FINAL | ACC_STATIC)) == 0)\n-\t\t\t\tinstanceFields.add(field);\n-\t\t}\n-\t\t\n-\t\t// sorting fields so that RW operations are type aligned\n-\t\tCollections.sort(instanceFields, new PrimitiveSizeComparator());\n-\t\t\n-\t\treturn instanceFields;\n-\t}\n-\t\n-\tpublic boolean hasSetter(FieldDescriptor f) {\n-\t\tString methodDesc = \"(\" + f.desc + \")\";\n-\t\tfor (MethodDescriptor m : meta.methods) {\n-\t\t\tif (m.name.equals(f.name) && m.desc.startsWith(methodDesc))\n-\t\t\t\treturn true;\n-\t\t}\n-\t\t\n-\t\treturn false;\n-\t}\n-\t\n-\tpublic boolean hasGetter(FieldDescriptor f) {\n-\t\tString methodDesc = \"()\" + f.desc;\n-\t\tfor (MethodDescriptor m : meta.methods) {\n-\t\t\tif (m.name.equals(f.name) && m.desc.equals(methodDesc))\n-\t\t\t\treturn true;\n-\t\t}\n-\t\t\n-\t\treturn false;\n-\t}\n-\t\n-\tpublic static Set<String> instanceFieldTypes(ClassMetadata meta) {\n-\t\tSet<String> instanceFields = new HashSet<String>();\n-\t\tfor (FieldDescriptor f : instanceFields(meta)) {\n-\t\t\tinstanceFields.add(f.desc);\n-\t\t}\n-\t\treturn instanceFields;\n-\t}\n-\t\n-\tpublic static String superName(ClassMetadata meta) {\n-\t\tswitch (meta.annotation) {\n-\t\t\tcase POOLED:\n-\t\t\t\treturn \"com/artemis/PooledComponent\";\n-\t\t\tcase NONE:\n-\t\t\tdefault:\n-\t\t\t\tthrow new RuntimeException(\"Missing case : \" + meta.annotation);\n-\t\t}\n-\t}\n-\t\n-\tpublic static int sizeOf(FieldDescriptor fd) {\n-\t\tswitch (fd.desc.charAt(0)) {\n-\t\t\tcase 'J': // long\n-\t\t\tcase 'D': // double\n-\t\t\t\treturn 8;\n-\t\t\tcase 'I': // int\n-\t\t\tcase 'F': // float\n-\t\t\t\treturn 4;\n-\t\t\tcase 'S': // short\n-\t\t\tcase 'C': // char\n-\t\t\t\treturn 2;\n-\t\t\tcase 'B': // byte\n-\t\t\tcase 'Z': // boolean\n-\t\t\t\treturn 1;\n-\t\t\tcase 'L': // object\n-\t\t\t\treturn 0;\n-\t\t\tdefault:\n-\t\t\t\tthrow new RuntimeException(\"Unknown primtive type: \" + fd.desc);\n-\t\t}\n-\t}\n-\t\n-\tpublic static int sizeOf(ClassMetadata meta) {\n-\t\tint size = 0;\n-\t\tfor (FieldDescriptor fd : meta.fields()) {\n-\t\t\tsize +=  sizeOf(fd);\n-\t\t}\n-\t\t\n-\t\treturn size;\n-\t}\n-\t\n-\t\n-\tprivate static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n-\t\t\n-\t\t@Override\n-\t\tpublic int compare(FieldDescriptor o1, FieldDescriptor o2) {\n-\t\t\treturn sizeOf(o1) - sizeOf(o2);\n-\t\t}\n-\t}\n+\n+    private ClassMetadata meta;\n+\n+    public ClassMetadataUtil(ClassMetadata meta) {\n+        this.meta = meta;\n+    }\n+\n+    public static List<FieldDescriptor> instanceFields(ClassMetadata meta) {\n+        List<FieldDescriptor> instanceFields = new ArrayList<FieldDescriptor>();\n+        for (FieldDescriptor field : meta.fields()) {\n+            if (\"$data\".equals(field.name) || \"$world\".equals(field.name)) {\n+                continue;\n+            }\n+\n+            if ((field.access & (ACC_FINAL | ACC_STATIC)) == 0) {\n+                instanceFields.add(field);\n+            }\n+        }\n+\n+        // sorting fields so that RW operations are type aligned\n+        Collections.sort(instanceFields, new PrimitiveSizeComparator());\n+\n+        return instanceFields;\n+    }\n+\n+    public boolean hasSetter(FieldDescriptor f) {\n+        String methodDesc = \"(\" + f.desc + \")\";\n+        for (MethodDescriptor m : meta.methods) {\n+            if (m.name.equals(f.name) && m.desc.startsWith(methodDesc)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public boolean hasGetter(FieldDescriptor f) {\n+        String methodDesc = \"()\" + f.desc;\n+        for (MethodDescriptor m : meta.methods) {\n+            if (m.name.equals(f.name) && m.desc.equals(methodDesc)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    public static Set<String> instanceFieldTypes(ClassMetadata meta) {\n+        Set<String> instanceFields = new HashSet<String>();\n+        for (FieldDescriptor f : instanceFields(meta)) {\n+            instanceFields.add(f.desc);\n+        }\n+        return instanceFields;\n+    }\n+\n+    public static String superName(ClassMetadata meta) {\n+        switch (meta.annotation) {\n+            case POOLED:\n+                return \"com/artemis/PooledComponent\";\n+            case NONE:\n+            default:\n+                throw new RuntimeException(\"Missing case : \" + meta.annotation);\n+        }\n+    }\n+\n+    public static int sizeOf(FieldDescriptor fd) {\n+        switch (fd.desc.charAt(0)) {\n+            case 'J': // long\n+            case 'D': // double\n+                return 8;\n+            case 'I': // int\n+            case 'F': // float\n+                return 4;\n+            case 'S': // short\n+            case 'C': // char\n+                return 2;\n+            case 'B': // byte\n+            case 'Z': // boolean\n+                return 1;\n+            case 'L': // object\n+                return 0;\n+            default:\n+                throw new RuntimeException(\"Unknown primtive type: \" + fd.desc);\n+        }\n+    }\n+\n+    public static int sizeOf(ClassMetadata meta) {\n+        int size = 0;\n+        for (FieldDescriptor fd : meta.fields()) {\n+            size += sizeOf(fd);\n+        }\n+\n+        return size;\n+    }\n+\n+\n+    private static final class PrimitiveSizeComparator\n+            implements Comparator<FieldDescriptor>, Serializable {\n+\n+        @Override\n+        public int compare(FieldDescriptor o1, FieldDescriptor o2) {\n+            return sizeOf(o1) - sizeOf(o2);\n+        }\n+    }\n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/63/ClassMetadataUtil.java\nindex e2e7067a1d5..d20c73780d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/63/ClassMetadataUtil.java\n@@ -24,9 +24,9 @@ public final class ClassMetadataUtil {\n \t\tList<FieldDescriptor> instanceFields = new ArrayList<FieldDescriptor>();\n \t\tfor (FieldDescriptor field : meta.fields()) {\n \t\t\tif (\"$data\".equals(field.name) || \"$world\".equals(field.name))\n-\t\t\t\t\tcontinue;\n-\t\t\t\n-\t\t\tif ((field.access & (ACC_FINAL | ACC_STATIC)) == 0)\n+\tcontinue;\n+\n+\tif ((field.access & (ACC_FINAL | ACC_STATIC)) == 0)\n \t\t\t\tinstanceFields.add(field);\n \t\t}\n \t\t\n@@ -98,18 +98,17 @@ public final class ClassMetadataUtil {\n \tpublic static int sizeOf(ClassMetadata meta) {\n \t\tint size = 0;\n \t\tfor (FieldDescriptor fd : meta.fields()) {\n-\t\t\tsize +=  sizeOf(fd);\n+\t\t\tsize += sizeOf(fd);\n \t\t}\n \t\t\n \t\treturn size;\n-\t}\n-\t\n-\t\n+\t\t}\n+\n \tprivate static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n \t\t\n \t\t@Override\n-\t\tpublic int compare(FieldDescriptor o1, FieldDescriptor o2) {\n+\tpublic int compare(FieldDescriptor o1, FieldDescriptor o2) {\n \t\t\treturn sizeOf(o1) - sizeOf(o2);\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/63/ClassMetadataUtil.java\nindex e2e7067a1d5..f82677e82aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/63/ClassMetadataUtil.java\n@@ -13,103 +13,109 @@ import java.util.List;\n import java.util.Set;\n \n public final class ClassMetadataUtil {\n-\t\n-\tprivate ClassMetadata meta;\n-\n-\tpublic ClassMetadataUtil(ClassMetadata meta) {\n-\t\tthis.meta = meta;\n-\t}\n-\t\n-\tpublic static List<FieldDescriptor> instanceFields(ClassMetadata meta) {\n-\t\tList<FieldDescriptor> instanceFields = new ArrayList<FieldDescriptor>();\n-\t\tfor (FieldDescriptor field : meta.fields()) {\n-\t\t\tif (\"$data\".equals(field.name) || \"$world\".equals(field.name))\n-\t\t\t\t\tcontinue;\n-\t\t\t\n-\t\t\tif ((field.access & (ACC_FINAL | ACC_STATIC)) == 0)\n-\t\t\t\tinstanceFields.add(field);\n-\t\t}\n-\t\t\n-\t\t// sorting fields so that RW operations are type aligned\n-\t\tCollections.sort(instanceFields, new PrimitiveSizeComparator());\n-\t\t\n-\t\treturn instanceFields;\n-\t}\n-\t\n-\tpublic boolean hasSetter(FieldDescriptor f) {\n-\t\tString methodDesc = \"(\" + f.desc + \")\";\n-\t\tfor (MethodDescriptor m : meta.methods) {\n-\t\t\tif (m.name.equals(f.name) && m.desc.startsWith(methodDesc))\n-\t\t\t\treturn true;\n-\t\t}\n-\t\t\n-\t\treturn false;\n-\t}\n-\t\n-\tpublic boolean hasGetter(FieldDescriptor f) {\n-\t\tString methodDesc = \"()\" + f.desc;\n-\t\tfor (MethodDescriptor m : meta.methods) {\n-\t\t\tif (m.name.equals(f.name) && m.desc.equals(methodDesc))\n-\t\t\t\treturn true;\n-\t\t}\n-\t\t\n-\t\treturn false;\n-\t}\n-\t\n-\tpublic static Set<String> instanceFieldTypes(ClassMetadata meta) {\n-\t\tSet<String> instanceFields = new HashSet<String>();\n-\t\tfor (FieldDescriptor f : instanceFields(meta)) {\n-\t\t\tinstanceFields.add(f.desc);\n-\t\t}\n-\t\treturn instanceFields;\n-\t}\n-\t\n-\tpublic static String superName(ClassMetadata meta) {\n-\t\tswitch (meta.annotation) {\n-\t\t\tcase POOLED:\n-\t\t\t\treturn \"com/artemis/PooledComponent\";\n-\t\t\tcase NONE:\n-\t\t\tdefault:\n-\t\t\t\tthrow new RuntimeException(\"Missing case : \" + meta.annotation);\n-\t\t}\n-\t}\n-\t\n-\tpublic static int sizeOf(FieldDescriptor fd) {\n-\t\tswitch (fd.desc.charAt(0)) {\n-\t\t\tcase 'J': // long\n-\t\t\tcase 'D': // double\n-\t\t\t\treturn 8;\n-\t\t\tcase 'I': // int\n-\t\t\tcase 'F': // float\n-\t\t\t\treturn 4;\n-\t\t\tcase 'S': // short\n-\t\t\tcase 'C': // char\n-\t\t\t\treturn 2;\n-\t\t\tcase 'B': // byte\n-\t\t\tcase 'Z': // boolean\n-\t\t\t\treturn 1;\n-\t\t\tcase 'L': // object\n-\t\t\t\treturn 0;\n-\t\t\tdefault:\n-\t\t\t\tthrow new RuntimeException(\"Unknown primtive type: \" + fd.desc);\n-\t\t}\n-\t}\n-\t\n-\tpublic static int sizeOf(ClassMetadata meta) {\n-\t\tint size = 0;\n-\t\tfor (FieldDescriptor fd : meta.fields()) {\n-\t\t\tsize +=  sizeOf(fd);\n-\t\t}\n-\t\t\n-\t\treturn size;\n-\t}\n-\t\n-\t\n-\tprivate static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n-\t\t\n-\t\t@Override\n-\t\tpublic int compare(FieldDescriptor o1, FieldDescriptor o2) {\n-\t\t\treturn sizeOf(o1) - sizeOf(o2);\n-\t\t}\n-\t}\n-}\n+ private ClassMetadata meta;\n+\n+ public ClassMetadataUtil(ClassMetadata meta) {\n+  this.meta = meta;\n+ }\n+\n+ public static List<FieldDescriptor> instanceFields(ClassMetadata meta) {\n+  List<FieldDescriptor> instanceFields = new ArrayList<FieldDescriptor>();\n+  for (FieldDescriptor field : meta.fields()) {\n+   if (\"$data\".equals(field.name) || \"$world\".equals(field.name))\n+    continue;\n+   if ((field.access & (ACC_FINAL| ACC_STATIC)) == 0)\n+    instanceFields.add(field);\n+  }\n+  \n+  // sorting fields so that RW operations are type aligned\n+\n+  Collections.sort(instanceFields, new PrimitiveSizeComparator());\n+  return instanceFields;\n+ }\n+\n+\n+ public boolean hasSetter(FieldDescriptor f) {\n+  String methodDesc = \"(\" + f.desc + \")\";\n+  for (MethodDescriptor m : meta.methods) {\n+   if (m.name.equals(f.name) &&\n+   m.desc.startsWith(methodDesc))\n+    return true;\n+  }\n+\n+  return false;\n+ }\n+\n+\n+ public boolean hasGetter(FieldDescriptor f) {\n+  String methodDesc = \"()\" + f.desc;\n+  for (MethodDescriptor m : meta.methods) {\n+   if (m.name.equals(f.name) &&\n+   m.desc.equals(methodDesc))\n+    return true;\n+  }\n+\n+  return false;\n+ }\n+\n+\n+ public static Set<String> instanceFieldTypes(ClassMetadata meta) {\n+  Set<String> instanceFields = new HashSet<String>();\n+  for (FieldDescriptor f : instanceFields(meta)) {\n+   instanceFields.add(f.desc);\n+  }\n+\n+  return instanceFields;\n+ }\n+\n+\n+ public static String superName(ClassMetadata meta) {\n+  switch (meta.annotation) {\n+   case POOLED:\n+    return \"com/artemis/PooledComponent\";\n+   case NONE:\n+   default:\n+    throw new RuntimeException(\"Missing case : \" + meta.annotation);\n+  }\n+ }\n+\n+\n+ public static int sizeOf(FieldDescriptor fd) {\n+  switch (fd.desc.charAt(0)) {\n+   case 'J': // long\n+   case 'D': // double\n+    return 8;\n+   case 'I': // int\n+   case 'F': // float\n+    return 4;\n+   case 'S': // short\n+   case 'C': // char\n+    return 2;\n+   case 'B': // byte\n+   case 'Z': // boolean\n+    return 1;\n+   case 'L': // object\n+    return 0;\n+   default:\n+    throw new RuntimeException(\"Unknown primtive type: \" + fd.desc);\n+  }\n+ }\n+\n+\n+ public static int sizeOf(ClassMetadata meta) {\n+  int size = 0;\n+  for (FieldDescriptor fd : meta.fields()) {\n+   size += sizeOf(fd);\n+  }\n+\n+  return size;\n+ }\n+\n+ private static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n+  @Override\n+  public int compare(FieldDescriptor o1, FieldDescriptor o2) {\n+   return sizeOf(o1) - sizeOf(o2);\n+  }\n+\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 106
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_random/63/ClassMetadataUtil.java\nindex e2e7067a1d5..a41f869a0ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/63/ClassMetadataUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/styler_random/63/ClassMetadataUtil.java\n@@ -103,10 +103,9 @@ public final class ClassMetadataUtil {\n \t\t\n \t\treturn size;\n \t}\n-\t\n-\t\n-\tprivate static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n-\t\t\n+\n+private static final class PrimitiveSizeComparator implements Comparator<FieldDescriptor>, Serializable {\n+\n \t\t@Override\n \t\tpublic int compare(FieldDescriptor o1, FieldDescriptor o2) {\n \t\t\treturn sizeOf(o1) - sizeOf(o2);\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}