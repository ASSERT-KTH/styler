{
    "project_name": "Angel-ML-angel",
    "error_id": "637",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/637/IncrementRowsParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/637/IncrementRowsParam.java\nindex b5daa3b6b55..2e04cc8643e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/637/IncrementRowsParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/637/IncrementRowsParam.java\n@@ -49,7 +49,7 @@ public class IncrementRowsParam extends UpdateParam {\n    * Create increment rows params\n    *\n    * @param matrixId matrix id\n-   * @param updates increment rows\n+   * @param updates  increment rows\n    */\n   public IncrementRowsParam(int matrixId, Vector[] updates) {\n     super(matrixId);\n@@ -127,7 +127,7 @@ public class IncrementRowsParam extends UpdateParam {\n   }\n \n   protected void mergeRowUpdateSplits(Map<PartitionKey, RowUpdateSplit> rowSplits,\n-      Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n+                                      Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n     for (Entry<PartitionKey, RowUpdateSplit> entry : rowSplits.entrySet()) {\n       List<RowUpdateSplit> splits = partToSplits.get(entry.getKey());\n       if (splits == null) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/637/IncrementRowsParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/637/IncrementRowsParam.java\nindex b5daa3b6b55..ef0d51cf51f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/637/IncrementRowsParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/637/IncrementRowsParam.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.matrix.psf.update.update;\n \n import com.tencent.angel.PartitionKey;\n@@ -62,8 +61,7 @@ public class IncrementRowsParam extends UpdateParam {\n     Map<PartitionKey, List<RowUpdateSplit>> partToSplits = new HashMap<>(getPartsNum(matrixId));\n     for (int i = 0; i < updates.length; i++) {\n       if (updates[i] != null) {\n-        mergeRowUpdateSplits(RowUpdateSplitUtils\n-            .split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n+        mergeRowUpdateSplits(RowUpdateSplitUtils.split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n       }\n     }\n \n@@ -75,10 +73,8 @@ public class IncrementRowsParam extends UpdateParam {\n     for (Entry<PartitionKey, List<RowUpdateSplit>> partEntry : partToSplits.entrySet()) {\n       // Set split context: partition key, use int key for long key vector or not ect\n       adapt(partEntry.getKey(), partEntry.getValue());\n-\n-      partParams\n-          .add(new PartIncrementRowsParam(matrixId, partEntry.getKey(), partEntry.getValue()));\n-    }\n+    partParams.add(new PartIncrementRowsParam(matrixId, partEntry.getKey(), partEntry.getValue()));\n+  }\n     return partParams;\n   }\n \n@@ -137,4 +133,4 @@ public class IncrementRowsParam extends UpdateParam {\n       splits.add(entry.getValue());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/637/IncrementRowsParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/637/IncrementRowsParam.java\nindex b5daa3b6b55..f63bdc84a16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/637/IncrementRowsParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/637/IncrementRowsParam.java\n@@ -37,6 +37,7 @@ import java.util.Map.Entry;\n /**\n  * Increment rows parameters\n  */\n+\n public class IncrementRowsParam extends UpdateParam {\n \n   protected Vector[] updates;\n@@ -51,6 +52,7 @@ public class IncrementRowsParam extends UpdateParam {\n    * @param matrixId matrix id\n    * @param updates increment rows\n    */\n+\n   public IncrementRowsParam(int matrixId, Vector[] updates) {\n     super(matrixId);\n     this.updates = updates;\n@@ -62,8 +64,7 @@ public class IncrementRowsParam extends UpdateParam {\n     Map<PartitionKey, List<RowUpdateSplit>> partToSplits = new HashMap<>(getPartsNum(matrixId));\n     for (int i = 0; i < updates.length; i++) {\n       if (updates[i] != null) {\n-        mergeRowUpdateSplits(RowUpdateSplitUtils\n-            .split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n+        mergeRowUpdateSplits(RowUpdateSplitUtils.split(updates[i], getParts(matrixId, updates[i].getRowId())), partToSplits);\n       }\n     }\n \n@@ -75,9 +76,7 @@ public class IncrementRowsParam extends UpdateParam {\n     for (Entry<PartitionKey, List<RowUpdateSplit>> partEntry : partToSplits.entrySet()) {\n       // Set split context: partition key, use int key for long key vector or not ect\n       adapt(partEntry.getKey(), partEntry.getValue());\n-\n-      partParams\n-          .add(new PartIncrementRowsParam(matrixId, partEntry.getKey(), partEntry.getValue()));\n+      partParams.add(new PartIncrementRowsParam(matrixId, partEntry.getKey(), partEntry.getValue()));\n     }\n     return partParams;\n   }\n@@ -98,9 +97,8 @@ public class IncrementRowsParam extends UpdateParam {\n   }\n \n   private boolean useIntKey(PartitionKey part) {\n-    boolean useAdaptor = PSAgentContext.get().getConf()\n-        .getBoolean(AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE,\n-            AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n+    boolean useAdaptor = PSAgentContext.get().getConf().getBoolean(\n+      AngelConf.ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE, AngelConf.DEFAULT_ANGEL_PS_USE_ADAPTIVE_STORAGE_ENABLE);\n     return useAdaptor && (part.getEndCol() - part.getStartCol() < Integer.MAX_VALUE);\n   }\n \n@@ -117,17 +115,14 @@ public class IncrementRowsParam extends UpdateParam {\n   }\n \n   protected List<PartitionKey> getParts(int matrixId) {\n-    return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n-        .getPartitions(matrixId);\n+    return PSAgentContext.get().getPsAgent().getMatrixMetaManager().getPartitions(matrixId);\n   }\n \n   protected List<PartitionKey> getParts(int matrixId, int rowId) {\n-    return PSAgentContext.get().getPsAgent().getMatrixMetaManager()\n-        .getPartitions(matrixId, rowId);\n+    return PSAgentContext.get().getPsAgent().getMatrixMetaManager().getPartitions(matrixId, rowId);\n   }\n \n-  protected void mergeRowUpdateSplits(Map<PartitionKey, RowUpdateSplit> rowSplits,\n-      Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n+  protected void mergeRowUpdateSplits(Map<PartitionKey, RowUpdateSplit> rowSplits, Map<PartitionKey, List<RowUpdateSplit>> partToSplits) {\n     for (Entry<PartitionKey, RowUpdateSplit> entry : rowSplits.entrySet()) {\n       List<RowUpdateSplit> splits = partToSplits.get(entry.getKey());\n       if (splits == null) {\n@@ -137,4 +132,4 @@ public class IncrementRowsParam extends UpdateParam {\n       splits.add(entry.getValue());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}