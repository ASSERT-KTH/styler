{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3732",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3732/DynamicStringStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3732/DynamicStringStore.java\nindex 963780134eb..0e787b54a7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3732/DynamicStringStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3732/DynamicStringStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -35,29 +36,29 @@ import org.neo4j.logging.LogProvider;\n  */\n public class DynamicStringStore extends AbstractDynamicStore\n {\n-    // store version, each store ends with this string (byte encoded)\n-    public static final String TYPE_DESCRIPTOR = \"StringPropertyStore\";\n+  // store version, each store ends with this string (byte encoded)\n+  public static final String TYPE_DESCRIPTOR = \"StringPropertyStore\";\n \n-    public DynamicStringStore(\n-            File fileName,\n-            Config configuration,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            int dataSizeFromConfiguration,\n-            RecordFormat<DynamicRecord> recordFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n-    {\n-        super( fileName, configuration, idType, idGeneratorFactory, pageCache,\n-                logProvider, TYPE_DESCRIPTOR, dataSizeFromConfiguration, recordFormat, storeVersion, openOptions );\n-    }\n+  public DynamicStringStore(\n+      File fileName,\n+      Config configuration,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      int dataSizeFromConfiguration,\n+      RecordFormat<DynamicRecord> recordFormat,\n+      String storeVersion,\n+      OpenOption... openOptions)\n+  {\n+    super(fileName, configuration, idType, idGeneratorFactory, pageCache,\n+        logProvider, TYPE_DESCRIPTOR, dataSizeFromConfiguration, recordFormat, storeVersion, openOptions);\n+  }\n \n-    @Override\n-    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, DynamicRecord record )\n-            throws FAILURE\n-    {\n-        processor.processString( this, record, idType );\n-    }\n+  @Override\n+  public <FAILURE extends Exception> void accept(RecordStore.Processor<FAILURE> processor, DynamicRecord record)\n+      throws FAILURE\n+  {\n+    processor.processString(this, record, idType);\n+  }\n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3732/DynamicStringStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3732/DynamicStringStore.java\nindex 963780134eb..708ff7948e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3732/DynamicStringStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3732/DynamicStringStore.java\n@@ -38,15 +38,12 @@ public class DynamicStringStore extends AbstractDynamicStore\n     // store version, each store ends with this string (byte encoded)\n     public static final String TYPE_DESCRIPTOR = \"StringPropertyStore\";\n \n-    public DynamicStringStore(\n-            File fileName,\n+    public DynamicStringStore( File fileName,\n             Config configuration,\n             IdType idType,\n             IdGeneratorFactory idGeneratorFactory,\n             PageCache pageCache,\n-            LogProvider logProvider,\n-            int dataSizeFromConfiguration,\n-            RecordFormat<DynamicRecord> recordFormat,\n+            LogProvider logProvider, int dataSizeFromConfiguration, RecordFormat<DynamicRecord> recordFormat,\n             String storeVersion,\n             OpenOption... openOptions )\n     {\n@@ -55,9 +52,8 @@ public class DynamicStringStore extends AbstractDynamicStore\n     }\n \n     @Override\n-    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, DynamicRecord record )\n-            throws FAILURE\n-    {\n+    public <FAILURE extends Exception> void accept( RecordStore.Processor<FAILURE> processor, DynamicRecord record ) throws FAILURE\n+{\n         processor.processString( this, record, idType );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}