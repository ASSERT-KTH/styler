{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3615",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3615/BloomKernelExtension.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3615/BloomKernelExtension.java\nindex 921dabd3f51..cb8e788093c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3615/BloomKernelExtension.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3615/BloomKernelExtension.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.fulltext.integrations.bloom;\n \n import java.io.File;\n@@ -44,63 +45,62 @@ import static org.neo4j.kernel.api.impl.fulltext.integrations.bloom.BloomKernelE\n \n class BloomKernelExtension extends LifecycleAdapter\n {\n-    private final File storeDir;\n-    private final Config config;\n-    private final FileSystemAbstraction fileSystem;\n-    private final GraphDatabaseService db;\n-    private final Procedures procedures;\n-    private final LogService logService;\n-    private final AvailabilityGuard availabilityGuard;\n-    private final JobScheduler scheduler;\n-    private final Supplier<TransactionIdStore> transactionIdStore;\n-    private final Supplier<NeoStoreFileListing> fileListing;\n-    private FulltextProvider provider;\n+  private final File storeDir;\n+  private final Config config;\n+  private final FileSystemAbstraction fileSystem;\n+  private final GraphDatabaseService db;\n+  private final Procedures procedures;\n+  private final LogService logService;\n+  private final AvailabilityGuard availabilityGuard;\n+  private final JobScheduler scheduler;\n+  private final Supplier<TransactionIdStore> transactionIdStore;\n+  private final Supplier<NeoStoreFileListing> fileListing;\n+  private FulltextProvider provider;\n \n-    BloomKernelExtension( FileSystemAbstraction fileSystem, File storeDir, Config config, GraphDatabaseService db, Procedures procedures, LogService logService,\n-            AvailabilityGuard availabilityGuard, JobScheduler scheduler, Supplier<TransactionIdStore> transactionIdStore,\n-            Supplier<NeoStoreFileListing> fileListing )\n-    {\n-        this.storeDir = storeDir;\n-        this.config = config;\n-        this.fileSystem = fileSystem;\n-        this.db = db;\n-        this.procedures = procedures;\n-        this.logService = logService;\n-        this.availabilityGuard = availabilityGuard;\n-        this.scheduler = scheduler;\n-        this.transactionIdStore = transactionIdStore;\n-        this.fileListing = fileListing;\n-    }\n+  BloomKernelExtension(FileSystemAbstraction fileSystem, File storeDir, Config config, GraphDatabaseService db, Procedures procedures, LogService logService,\n+                       AvailabilityGuard availabilityGuard, JobScheduler scheduler, Supplier<TransactionIdStore> transactionIdStore,\n+                       Supplier<NeoStoreFileListing> fileListing)\n+  {\n+    this.storeDir = storeDir;\n+    this.config = config;\n+    this.fileSystem = fileSystem;\n+    this.db = db;\n+    this.procedures = procedures;\n+    this.logService = logService;\n+    this.availabilityGuard = availabilityGuard;\n+    this.scheduler = scheduler;\n+    this.transactionIdStore = transactionIdStore;\n+    this.fileListing = fileListing;\n+  }\n \n-    @Override\n-    public void start() throws IOException\n+  @Override\n+  public void start() throws IOException\n+  {\n+    if (config.get(BloomFulltextConfig.bloom_enabled))\n     {\n-        if ( config.get( BloomFulltextConfig.bloom_enabled ) )\n-        {\n-            String analyzer = config.get( BloomFulltextConfig.bloom_default_analyzer );\n+      String analyzer = config.get(BloomFulltextConfig.bloom_default_analyzer);\n \n-            Log log = logService.getInternalLog( FulltextProviderImpl.class );\n-            provider = new FulltextProviderImpl( db, log, availabilityGuard, scheduler, transactionIdStore.get(),\n-                    fileSystem, storeDir, analyzer );\n-            provider.openIndex( BLOOM_NODES, NODES );\n-            provider.openIndex( BLOOM_RELATIONSHIPS, RELATIONSHIPS );\n-            provider.registerTransactionEventHandler();\n-            provider.registerFileListing( fileListing.get() );\n+      Log log = logService.getInternalLog(FulltextProviderImpl.class);\n+      provider = new FulltextProviderImpl(db, log, availabilityGuard, scheduler, transactionIdStore.get(),\n+          fileSystem, storeDir, analyzer);\n+      provider.openIndex(BLOOM_NODES, NODES);\n+      provider.openIndex(BLOOM_RELATIONSHIPS, RELATIONSHIPS);\n+      provider.registerTransactionEventHandler();\n+      provider.registerFileListing(fileListing.get());\n \n-            procedures.registerComponent( FulltextProvider.class, context -> provider, true );\n-        }\n-        else\n-        {\n-            procedures.registerComponent( FulltextProvider.class, context -> FulltextProvider.NULL_PROVIDER, true );\n-        }\n+      procedures.registerComponent(FulltextProvider.class, context -> provider, true);\n+    } else\n+    {\n+      procedures.registerComponent(FulltextProvider.class, context -> FulltextProvider.NULL_PROVIDER, true);\n     }\n+  }\n \n-    @Override\n-    public void stop() throws Exception\n+  @Override\n+  public void stop() throws Exception\n+  {\n+    if (provider != null)\n     {\n-        if ( provider != null )\n-        {\n-            provider.close();\n-        }\n+      provider.close();\n     }\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3615/BloomKernelExtension.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3615/BloomKernelExtension.java\nindex 921dabd3f51..393a05bf0f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3615/BloomKernelExtension.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3615/BloomKernelExtension.java\n@@ -57,8 +57,7 @@ class BloomKernelExtension extends LifecycleAdapter\n     private FulltextProvider provider;\n \n     BloomKernelExtension( FileSystemAbstraction fileSystem, File storeDir, Config config, GraphDatabaseService db, Procedures procedures, LogService logService,\n-            AvailabilityGuard availabilityGuard, JobScheduler scheduler, Supplier<TransactionIdStore> transactionIdStore,\n-            Supplier<NeoStoreFileListing> fileListing )\n+            AvailabilityGuard availabilityGuard, JobScheduler scheduler, Supplier<TransactionIdStore> transactionIdStore, Supplier<NeoStoreFileListing> fileListing )\n     {\n         this.storeDir = storeDir;\n         this.config = config;\n@@ -78,16 +77,14 @@ class BloomKernelExtension extends LifecycleAdapter\n         if ( config.get( BloomFulltextConfig.bloom_enabled ) )\n         {\n             String analyzer = config.get( BloomFulltextConfig.bloom_default_analyzer );\n-\n-            Log log = logService.getInternalLog( FulltextProviderImpl.class );\n+Log log = logService.getInternalLog( FulltextProviderImpl.class );\n             provider = new FulltextProviderImpl( db, log, availabilityGuard, scheduler, transactionIdStore.get(),\n                     fileSystem, storeDir, analyzer );\n-            provider.openIndex( BLOOM_NODES, NODES );\n+provider.openIndex( BLOOM_NODES, NODES );\n             provider.openIndex( BLOOM_RELATIONSHIPS, RELATIONSHIPS );\n             provider.registerTransactionEventHandler();\n             provider.registerFileListing( fileListing.get() );\n-\n-            procedures.registerComponent( FulltextProvider.class, context -> provider, true );\n+procedures.registerComponent( FulltextProvider.class, context -> provider, true );\n         }\n         else\n         {\n@@ -103,4 +100,4 @@ class BloomKernelExtension extends LifecycleAdapter\n             provider.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}