{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1250",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.event;\n\nimport com.google.common.base.Optional;\nimport java.beans.PropertyDescriptor;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1250/BeanPropertyArgumentTransformer.java\nindex 3355cecb201..e28cdb3b092 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1250/BeanPropertyArgumentTransformer.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n import com.google.common.base.Optional;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1250/BeanPropertyArgumentTransformer.java\nindex 3355cecb201..ccf66860b2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1250/BeanPropertyArgumentTransformer.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n import com.google.common.base.Optional;\n@@ -44,62 +45,62 @@ import org.springframework.beans.BeanUtils;\n  */\n public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEventDescriptionBuilder {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(BeanPropertyArgumentTransformer.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(BeanPropertyArgumentTransformer.class);\n \n-    /**\n-     * Transforms the input argument list into the result by taking every argument, introspecting the bean properties,\n-     * and constructing an object array of all the resultant (non-null) gets.\n-     */\n-    @Override\n-    public final Object[] transformArguments(Object[] arguments) {\n-        if (arguments == null) {\n-            return new Object[] {};\n-        }\n-        List<Object> resultList = new ArrayList<>();\n-        for (Object argument : arguments) {\n-            resultList.addAll(transformSingleArgument(argument));\n-        }\n-        return resultList.toArray();\n+  /**\n+   * Transforms the input argument list into the result by taking every argument, introspecting the bean properties,\n+   * and constructing an object array of all the resultant (non-null) gets.\n+   */\n+  @Override\n+  public final Object[] transformArguments(Object[] arguments) {\n+    if (arguments == null) {\n+      return new Object[] {};\n     }\n-\n-    private List<Object> transformSingleArgument(Object argument) {\n-        if (argument == null) {\n-            return Collections.emptyList();\n-        }\n-        List<Object> result = new ArrayList<>();\n-        PropertyDescriptor[] propertyDescriptors = BeanUtils.getPropertyDescriptors(argument.getClass());\n-        for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {\n-            Method readMethod = propertyDescriptor.getReadMethod();\n-            if (readMethod == null) {\n-                continue;\n-            }\n-            Optional<Object> readValue = readValue(argument, readMethod);\n-            if (readValue.isPresent()) {\n-                result.add(readValue.get());\n-            }\n-        }\n-        return result;\n+    List<Object> resultList = new ArrayList<>();\n+    for (Object argument : arguments) {\n+      resultList.addAll(transformSingleArgument(argument));\n     }\n+    return resultList.toArray();\n+  }\n \n-    private Optional<Object> readValue(Object argument, Method readMethod) {\n-        try {\n-            Object readValue = readMethod.invoke(argument);\n-            if (readValue != null) {\n-                return Optional.of(readValue);\n-            }\n-        } catch (IllegalAccessException e) {\n-            LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n-        } catch (InvocationTargetException e) {\n-            LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n-        }\n-        return Optional.absent();\n+  private List<Object> transformSingleArgument(Object argument) {\n+    if (argument == null) {\n+      return Collections.emptyList();\n     }\n+    List<Object> result = new ArrayList<>();\n+    PropertyDescriptor[] propertyDescriptors = BeanUtils.getPropertyDescriptors(argument.getClass());\n+    for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {\n+      Method readMethod = propertyDescriptor.getReadMethod();\n+      if (readMethod == null) {\n+        continue;\n+      }\n+      Optional<Object> readValue = readValue(argument, readMethod);\n+      if (readValue.isPresent()) {\n+        result.add(readValue.get());\n+      }\n+    }\n+    return result;\n+  }\n \n-    /**\n-     * Default behavior is to return the unmodified argument.\n-     */\n-    @Override\n-    public Object transformReturnValue(Object returnValue) {\n-        return returnValue;\n+  private Optional<Object> readValue(Object argument, Method readMethod) {\n+    try {\n+      Object readValue = readMethod.invoke(argument);\n+      if (readValue != null) {\n+        return Optional.of(readValue);\n+      }\n+    } catch (IllegalAccessException e) {\n+      LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n+    } catch (InvocationTargetException e) {\n+      LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n     }\n+    return Optional.absent();\n+  }\n+\n+  /**\n+   * Default behavior is to return the unmodified argument.\n+   */\n+  @Override\n+  public Object transformReturnValue(Object returnValue) {\n+    return returnValue;\n+  }\n }\n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1250/BeanPropertyArgumentTransformer.java\nindex 3355cecb201..535c98b56bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1250/BeanPropertyArgumentTransformer.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n import com.google.common.base.Optional;\n@@ -58,7 +59,8 @@ public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEven\n         List<Object> resultList = new ArrayList<>();\n         for (Object argument : arguments) {\n             resultList.addAll(transformSingleArgument(argument));\n-        }\n+\n+    }\n         return resultList.toArray();\n     }\n \n@@ -91,7 +93,8 @@ public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEven\n             LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n         } catch (InvocationTargetException e) {\n             LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n-        }\n+\n+    }\n         return Optional.absent();\n     }\n \n@@ -102,4 +105,4 @@ public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEven\n     public Object transformReturnValue(Object returnValue) {\n         return returnValue;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "64",
                    "column": "30",
                    "severity": "error",
                    "message": "'Object' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "78",
                    "column": "27",
                    "severity": "error",
                    "message": "'PropertyDescriptor' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1250/BeanPropertyArgumentTransformer.java\nindex 3355cecb201..047c477b868 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1250/BeanPropertyArgumentTransformer.java\n@@ -42,7 +42,10 @@ import org.springframework.beans.BeanUtils;\n  * <code>transformArguments</code> will call every bean getter on every argument in the list and assemble the\n  * transformed arguments from those calls. <code>transformReturnValue</code> does a pass through.\n  */\n-public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEventDescriptionBuilder {\n+\n+\n+public abstract class BeanPropertyArgumentTransformer extends\n+    ArgTransformerEventDescriptionBuilder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(BeanPropertyArgumentTransformer.class);\n \n@@ -50,10 +53,15 @@ public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEven\n      * Transforms the input argument list into the result by taking every argument, introspecting the bean properties,\n      * and constructing an object array of all the resultant (non-null) gets.\n      */\n+\n+\n     @Override\n-    public final Object[] transformArguments(Object[] arguments) {\n+    public final Object\n+                     [ ] transformArguments(Object\n+                                                [ ] arguments) {\n         if (arguments == null) {\n-            return new Object[] {};\n+            return new\n+                       Object [] {};\n         }\n         List<Object> resultList = new ArrayList<>();\n         for (Object argument : arguments) {\n@@ -67,7 +75,7 @@ public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEven\n             return Collections.emptyList();\n         }\n         List<Object> result = new ArrayList<>();\n-        PropertyDescriptor[] propertyDescriptors = BeanUtils.getPropertyDescriptors(argument.getClass());\n+        PropertyDescriptor [] propertyDescriptors = BeanUtils.getPropertyDescriptors(argument.getClass());\n         for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {\n             Method readMethod = propertyDescriptor.getReadMethod();\n             if (readMethod == null) {\n@@ -89,7 +97,10 @@ public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEven\n             }\n         } catch (IllegalAccessException e) {\n             LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n-        } catch (InvocationTargetException e) {\n+        }\n+\n+\n+catch (InvocationTargetException e) {\n             LOG.warn(String.format(\"Unable to invoke bean read method '%s' on '%s'\", readMethod, argument), e);\n         }\n         return Optional.absent();\n@@ -98,8 +109,11 @@ public abstract class BeanPropertyArgumentTransformer extends ArgTransformerEven\n     /**\n      * Default behavior is to return the unmodified argument.\n      */\n+\n+\n     @Override\n     public Object transformReturnValue(Object returnValue) {\n         return returnValue;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1250/BeanPropertyArgumentTransformer.java\nindex 3355cecb201..e28cdb3b092 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1250/BeanPropertyArgumentTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1250/BeanPropertyArgumentTransformer.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n import com.google.common.base.Optional;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}