{
    "project_name": "graphfoundation-ongdb",
    "error_id": "415",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/415/BidirectionalTraversalBranchPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/415/BidirectionalTraversalBranchPath.java\nindex f24531c049f..152accbf884 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/415/BidirectionalTraversalBranchPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/415/BidirectionalTraversalBranchPath.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.impl.traversal;\n \n import java.util.Iterator;\n@@ -31,204 +32,204 @@ import org.neo4j.graphdb.traversal.TraversalBranch;\n \n class BidirectionalTraversalBranchPath implements Path\n {\n-    private final TraversalBranch start;\n-    private final TraversalBranch end;\n-    private final Node endNode;\n-    private final Relationship lastRelationship;\n-\n-    private Node cachedStartNode;\n-    private LinkedList<Relationship> cachedRelationships;\n-\n-    BidirectionalTraversalBranchPath( TraversalBranch start, TraversalBranch end )\n+  private final TraversalBranch start;\n+  private final TraversalBranch end;\n+  private final Node endNode;\n+  private final Relationship lastRelationship;\n+\n+  private Node cachedStartNode;\n+  private LinkedList<Relationship> cachedRelationships;\n+\n+  BidirectionalTraversalBranchPath(TraversalBranch start, TraversalBranch end)\n+  {\n+    this.start = start;\n+    this.end = end;\n+\n+    // Most used properties: endNode and lastRelationship, so cache them right away (semi-expensive though).\n+    Iterator<PropertyContainer> endPathEntities = end.iterator();\n+    this.endNode = (Node) endPathEntities.next();\n+    this.lastRelationship = endPathEntities.hasNext() ?\n+        (Relationship) endPathEntities.next() : start.lastRelationship();\n+  }\n+\n+  @Override\n+  public Node startNode()\n+  {\n+    // Getting the start node is expensive in some Path implementations, so cache it\n+    if (cachedStartNode == null)\n     {\n-        this.start = start;\n-        this.end = end;\n-\n-        // Most used properties: endNode and lastRelationship, so cache them right away (semi-expensive though).\n-        Iterator<PropertyContainer> endPathEntities = end.iterator();\n-        this.endNode = (Node) endPathEntities.next();\n-        this.lastRelationship = endPathEntities.hasNext() ?\n-                (Relationship) endPathEntities.next() : start.lastRelationship();\n+      cachedStartNode = start.startNode();\n     }\n-\n-    @Override\n-    public Node startNode()\n+    return cachedStartNode;\n+  }\n+\n+  @Override\n+  public Node endNode()\n+  {\n+    return this.endNode;\n+  }\n+\n+  @Override\n+  public Relationship lastRelationship()\n+  {\n+    return this.lastRelationship;\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> relationships()\n+  {\n+    // Cache the relationships since we use them in hashCode/equals too.\n+    if (cachedRelationships == null)\n     {\n-        // Getting the start node is expensive in some Path implementations, so cache it\n-        if ( cachedStartNode == null )\n-        {\n-            cachedStartNode = start.startNode();\n-        }\n-        return cachedStartNode;\n+      cachedRelationships = gatherRelationships(start, end);\n     }\n-\n-    @Override\n-    public Node endNode()\n+    return cachedRelationships;\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> reverseRelationships()\n+  {\n+    return gatherRelationships(end, start);\n+  }\n+\n+  private LinkedList<Relationship> gatherRelationships(TraversalBranch first, TraversalBranch then)\n+  {\n+    // TODO Don't loop through them all up front\n+    LinkedList<Relationship> relationships = new LinkedList<>();\n+    TraversalBranch branch = first;\n+    while (branch.length() > 0)\n     {\n-        return this.endNode;\n+      relationships.addFirst(branch.lastRelationship());\n+      branch = branch.parent();\n     }\n-\n-    @Override\n-    public Relationship lastRelationship()\n+    // We can might as well cache start node since we're right now there anyway\n+    if (cachedStartNode == null && first == start && branch.length() >= 0)\n     {\n-        return this.lastRelationship;\n+      cachedStartNode = branch.endNode();\n     }\n-\n-    @Override\n-    public Iterable<Relationship> relationships()\n+    branch = then;\n+    while (branch.length() > 0)\n     {\n-        // Cache the relationships since we use them in hashCode/equals too.\n-        if ( cachedRelationships == null )\n-        {\n-            cachedRelationships = gatherRelationships( start, end );\n-        }\n-        return cachedRelationships;\n+      relationships.add(branch.lastRelationship());\n+      branch = branch.parent();\n     }\n-\n-    @Override\n-    public Iterable<Relationship> reverseRelationships()\n+    if (cachedStartNode == null && then == start && branch.length() >= 0)\n     {\n-        return gatherRelationships( end, start );\n+      cachedStartNode = branch.endNode();\n     }\n-\n-    private LinkedList<Relationship> gatherRelationships( TraversalBranch first, TraversalBranch then )\n+    return relationships;\n+  }\n+\n+  @Override\n+  public Iterable<Node> nodes()\n+  {\n+    return gatherNodes(start, end);\n+  }\n+\n+  @Override\n+  public Iterable<Node> reverseNodes()\n+  {\n+    return gatherNodes(end, start);\n+  }\n+\n+  private Iterable<Node> gatherNodes(TraversalBranch first, TraversalBranch then)\n+  {\n+    // TODO Don't loop through them all up front\n+    LinkedList<Node> nodes = new LinkedList<>();\n+    TraversalBranch branch = first;\n+    while (branch.length() > 0)\n     {\n-        // TODO Don't loop through them all up front\n-        LinkedList<Relationship> relationships = new LinkedList<>();\n-        TraversalBranch branch = first;\n-        while ( branch.length() > 0 )\n-        {\n-            relationships.addFirst( branch.lastRelationship() );\n-            branch = branch.parent();\n-        }\n-        // We can might as well cache start node since we're right now there anyway\n-        if ( cachedStartNode == null && first == start && branch.length() >= 0 )\n-        {\n-            cachedStartNode = branch.endNode();\n-        }\n-        branch = then;\n-        while ( branch.length() > 0 )\n-        {\n-            relationships.add( branch.lastRelationship() );\n-            branch = branch.parent();\n-        }\n-        if ( cachedStartNode == null && then == start && branch.length() >= 0 )\n-        {\n-            cachedStartNode = branch.endNode();\n-        }\n-        return relationships;\n+      nodes.addFirst(branch.endNode());\n+      branch = branch.parent();\n     }\n-\n-    @Override\n-    public Iterable<Node> nodes()\n+    if (cachedStartNode == null && first == start && branch.length() >= 0)\n     {\n-        return gatherNodes( start, end );\n+      cachedStartNode = branch.endNode();\n     }\n-\n-    @Override\n-    public Iterable<Node> reverseNodes()\n+    nodes.addFirst(branch.endNode());\n+    branch = then.parent();\n+    if (branch != null)\n     {\n-        return gatherNodes( end, start );\n+      while (branch.length() > 0)\n+      {\n+        nodes.add(branch.endNode());\n+        branch = branch.parent();\n+      }\n+      if (branch.length() >= 0)\n+      {\n+        nodes.add(branch.endNode());\n+      }\n     }\n-\n-    private Iterable<Node> gatherNodes( TraversalBranch first, TraversalBranch then )\n+    if (cachedStartNode == null && then == start && branch != null && branch.length() >= 0)\n     {\n-        // TODO Don't loop through them all up front\n-        LinkedList<Node> nodes = new LinkedList<>();\n-        TraversalBranch branch = first;\n-        while ( branch.length() > 0 )\n-        {\n-            nodes.addFirst( branch.endNode() );\n-            branch = branch.parent();\n-        }\n-        if ( cachedStartNode == null && first == start && branch.length() >= 0 )\n-        {\n-            cachedStartNode = branch.endNode();\n-        }\n-        nodes.addFirst( branch.endNode() );\n-        branch = then.parent();\n-        if ( branch != null )\n-        {\n-            while ( branch.length() > 0 )\n-            {\n-                nodes.add( branch.endNode() );\n-                branch = branch.parent();\n-            }\n-            if ( branch.length() >= 0 )\n-            {\n-                nodes.add( branch.endNode() );\n-            }\n-        }\n-        if ( cachedStartNode == null && then == start && branch != null && branch.length() >= 0 )\n-        {\n-            cachedStartNode = branch.endNode();\n-        }\n-        return nodes;\n+      cachedStartNode = branch.endNode();\n     }\n-\n-    @Override\n-    public int length()\n+    return nodes;\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return start.length() + end.length();\n+  }\n+\n+  @Override\n+  public Iterator<PropertyContainer> iterator()\n+  {\n+    // TODO Don't loop through them all up front\n+    LinkedList<PropertyContainer> entities = new LinkedList<>();\n+    TraversalBranch branch = start;\n+    while (branch.length() > 0)\n     {\n-        return start.length() + end.length();\n+      entities.addFirst(branch.endNode());\n+      entities.addFirst(branch.lastRelationship());\n+      branch = branch.parent();\n     }\n-\n-    @Override\n-    public Iterator<PropertyContainer> iterator()\n+    entities.addFirst(branch.endNode());\n+    if (cachedStartNode == null)\n     {\n-        // TODO Don't loop through them all up front\n-        LinkedList<PropertyContainer> entities = new LinkedList<>();\n-        TraversalBranch branch = start;\n-        while ( branch.length() > 0 )\n-        {\n-            entities.addFirst( branch.endNode() );\n-            entities.addFirst( branch.lastRelationship() );\n-            branch = branch.parent();\n-        }\n-        entities.addFirst( branch.endNode() );\n-        if ( cachedStartNode == null )\n-        {\n-            cachedStartNode = branch.endNode();\n-        }\n-        if ( end.length() > 0 )\n-        {\n-            entities.add( end.lastRelationship() );\n-            branch = end.parent();\n-            while ( branch.length() > 0 )\n-            {\n-                entities.add( branch.endNode() );\n-                entities.add( branch.lastRelationship() );\n-                branch = branch.parent();\n-            }\n-            entities.add( branch.endNode() );\n-        }\n-        return entities.iterator();\n+      cachedStartNode = branch.endNode();\n     }\n-\n-    @Override\n-    public int hashCode()\n+    if (end.length() > 0)\n     {\n-        return relationships().hashCode();\n+      entities.add(end.lastRelationship());\n+      branch = end.parent();\n+      while (branch.length() > 0)\n+      {\n+        entities.add(branch.endNode());\n+        entities.add(branch.lastRelationship());\n+        branch = branch.parent();\n+      }\n+      entities.add(branch.endNode());\n     }\n-\n-    @Override\n-    public boolean equals( Object obj )\n+    return entities.iterator();\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return relationships().hashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (obj == this)\n     {\n-        if ( obj == this )\n-        {\n-            return true;\n-        }\n-        if ( !(obj instanceof Path) )\n-        {\n-            return false;\n-        }\n-\n-        Path other = (Path) obj;\n-        return relationships().equals( other.relationships() ) && other.startNode().equals( cachedStartNode );\n+      return true;\n     }\n-\n-    @Override\n-    public String toString()\n+    if (!(obj instanceof Path))\n     {\n-        return Paths.defaultPathToString( this );\n+      return false;\n     }\n+\n+    Path other = (Path) obj;\n+    return relationships().equals(other.relationships()) && other.startNode().equals(cachedStartNode);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return Paths.defaultPathToString(this);\n+  }\n }\n",
            "diff_size": 287
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/415/BidirectionalTraversalBranchPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/415/BidirectionalTraversalBranchPath.java\nindex f24531c049f..eb955a31449 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/415/BidirectionalTraversalBranchPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/415/BidirectionalTraversalBranchPath.java\n@@ -47,8 +47,7 @@ class BidirectionalTraversalBranchPath implements Path\n         // Most used properties: endNode and lastRelationship, so cache them right away (semi-expensive though).\n         Iterator<PropertyContainer> endPathEntities = end.iterator();\n         this.endNode = (Node) endPathEntities.next();\n-        this.lastRelationship = endPathEntities.hasNext() ?\n-                (Relationship) endPathEntities.next() : start.lastRelationship();\n+        this.lastRelationship = endPathEntities.hasNext() ? (Relationship) endPathEntities.next() : start.lastRelationship();\n     }\n \n     @Override\n@@ -59,7 +58,8 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             cachedStartNode = start.startNode();\n         }\n-        return cachedStartNode;\n+\n+return cachedStartNode;\n     }\n \n     @Override\n@@ -82,7 +82,8 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             cachedRelationships = gatherRelationships( start, end );\n         }\n-        return cachedRelationships;\n+\n+return cachedRelationships;\n     }\n \n     @Override\n@@ -106,17 +107,20 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             cachedStartNode = branch.endNode();\n         }\n-        branch = then;\n+\n+branch = then;\n         while ( branch.length() > 0 )\n         {\n             relationships.add( branch.lastRelationship() );\n             branch = branch.parent();\n         }\n-        if ( cachedStartNode == null && then == start && branch.length() >= 0 )\n+\n+if ( cachedStartNode == null && then == start && branch.length() >= 0 )\n         {\n             cachedStartNode = branch.endNode();\n         }\n-        return relationships;\n+\n+return relationships;\n     }\n \n     @Override\n@@ -141,7 +145,8 @@ class BidirectionalTraversalBranchPath implements Path\n             nodes.addFirst( branch.endNode() );\n             branch = branch.parent();\n         }\n-        if ( cachedStartNode == null && first == start && branch.length() >= 0 )\n+\n+if ( cachedStartNode == null && first == start && branch.length() >= 0 )\n         {\n             cachedStartNode = branch.endNode();\n         }\n@@ -154,7 +159,8 @@ class BidirectionalTraversalBranchPath implements Path\n                 nodes.add( branch.endNode() );\n                 branch = branch.parent();\n             }\n-            if ( branch.length() >= 0 )\n+\n+if ( branch.length() >= 0 )\n             {\n                 nodes.add( branch.endNode() );\n             }\n@@ -163,7 +169,8 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             cachedStartNode = branch.endNode();\n         }\n-        return nodes;\n+\n+return nodes;\n     }\n \n     @Override\n@@ -189,7 +196,8 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             cachedStartNode = branch.endNode();\n         }\n-        if ( end.length() > 0 )\n+\n+if ( end.length() > 0 )\n         {\n             entities.add( end.lastRelationship() );\n             branch = end.parent();\n@@ -201,7 +209,8 @@ class BidirectionalTraversalBranchPath implements Path\n             }\n             entities.add( branch.endNode() );\n         }\n-        return entities.iterator();\n+\n+return entities.iterator();\n     }\n \n     @Override\n@@ -217,7 +226,8 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             return true;\n         }\n-        if ( !(obj instanceof Path) )\n+\n+if ( !( obj instanceof Path) )\n         {\n             return false;\n         }\n@@ -231,4 +241,4 @@ class BidirectionalTraversalBranchPath implements Path\n     {\n         return Paths.defaultPathToString( this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "37",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "105",
                    "column": "54",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "111",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "111",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "37",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "117",
                    "column": "53",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "142",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "142",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "37",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "148",
                    "column": "54",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "157",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "157",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "37",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "169",
                    "column": "53",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "169",
                    "column": "70",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "189",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "189",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "206",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "63",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/415/BidirectionalTraversalBranchPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/415/BidirectionalTraversalBranchPath.java\nindex f24531c049f..0f9af61ee2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/415/BidirectionalTraversalBranchPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/415/BidirectionalTraversalBranchPath.java\n@@ -21,7 +21,6 @@ package org.neo4j.graphdb.impl.traversal;\n \n import java.util.Iterator;\n import java.util.LinkedList;\n-\n import org.neo4j.graphdb.Node;\n import org.neo4j.graphdb.Path;\n import org.neo4j.graphdb.PropertyContainer;\n@@ -35,7 +34,6 @@ class BidirectionalTraversalBranchPath implements Path\n     private final TraversalBranch end;\n     private final Node endNode;\n     private final Relationship lastRelationship;\n-\n     private Node cachedStartNode;\n     private LinkedList<Relationship> cachedRelationships;\n \n@@ -47,8 +45,7 @@ class BidirectionalTraversalBranchPath implements Path\n         // Most used properties: endNode and lastRelationship, so cache them right away (semi-expensive though).\n         Iterator<PropertyContainer> endPathEntities = end.iterator();\n         this.endNode = (Node) endPathEntities.next();\n-        this.lastRelationship = endPathEntities.hasNext() ?\n-                (Relationship) endPathEntities.next() : start.lastRelationship();\n+        this.lastRelationship = endPathEntities.hasNext() ? (Relationship) endPathEntities.next() : start.lastRelationship();\n     }\n \n     @Override\n@@ -59,6 +56,7 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             cachedStartNode = start.startNode();\n         }\n+\n         return cachedStartNode;\n     }\n \n@@ -82,6 +80,7 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             cachedRelationships = gatherRelationships( start, end );\n         }\n+\n         return cachedRelationships;\n     }\n \n@@ -96,26 +95,30 @@ class BidirectionalTraversalBranchPath implements Path\n         // TODO Don't loop through them all up front\n         LinkedList<Relationship> relationships = new LinkedList<>();\n         TraversalBranch branch = first;\n-        while ( branch.length() > 0 )\n+        while( branch.length() > 0)\n         {\n             relationships.addFirst( branch.lastRelationship() );\n             branch = branch.parent();\n         }\n         // We can might as well cache start node since we're right now there anyway\n-        if ( cachedStartNode == null && first == start && branch.length() >= 0 )\n+\n+        if ( cachedStartNode == null&& first == start&& branch.length() >= 0 )\n         {\n             cachedStartNode = branch.endNode();\n         }\n+\n         branch = then;\n-        while ( branch.length() > 0 )\n+        while( branch.length() > 0)\n         {\n             relationships.add( branch.lastRelationship() );\n             branch = branch.parent();\n         }\n-        if ( cachedStartNode == null && then == start && branch.length() >= 0 )\n+\n+        if ( cachedStartNode == null&& then == start&& branch.length() >= 0 )\n         {\n             cachedStartNode = branch.endNode();\n         }\n+\n         return relationships;\n     }\n \n@@ -136,33 +139,38 @@ class BidirectionalTraversalBranchPath implements Path\n         // TODO Don't loop through them all up front\n         LinkedList<Node> nodes = new LinkedList<>();\n         TraversalBranch branch = first;\n-        while ( branch.length() > 0 )\n+        while( branch.length() > 0)\n         {\n             nodes.addFirst( branch.endNode() );\n             branch = branch.parent();\n         }\n-        if ( cachedStartNode == null && first == start && branch.length() >= 0 )\n+\n+        if ( cachedStartNode == null&& first == start&& branch.length() >= 0 )\n         {\n             cachedStartNode = branch.endNode();\n         }\n+\n         nodes.addFirst( branch.endNode() );\n         branch = then.parent();\n         if ( branch != null )\n         {\n-            while ( branch.length() > 0 )\n+            while( branch.length() > 0)\n             {\n                 nodes.add( branch.endNode() );\n                 branch = branch.parent();\n             }\n+\n             if ( branch.length() >= 0 )\n             {\n                 nodes.add( branch.endNode() );\n             }\n         }\n-        if ( cachedStartNode == null && then == start && branch != null && branch.length() >= 0 )\n+\n+        if ( cachedStartNode == null&& then == start&& branch != null&& branch.length() >= 0 )\n         {\n             cachedStartNode = branch.endNode();\n         }\n+\n         return nodes;\n     }\n \n@@ -178,29 +186,33 @@ class BidirectionalTraversalBranchPath implements Path\n         // TODO Don't loop through them all up front\n         LinkedList<PropertyContainer> entities = new LinkedList<>();\n         TraversalBranch branch = start;\n-        while ( branch.length() > 0 )\n+        while( branch.length() > 0)\n         {\n             entities.addFirst( branch.endNode() );\n             entities.addFirst( branch.lastRelationship() );\n             branch = branch.parent();\n         }\n+\n         entities.addFirst( branch.endNode() );\n         if ( cachedStartNode == null )\n         {\n             cachedStartNode = branch.endNode();\n         }\n+\n         if ( end.length() > 0 )\n         {\n             entities.add( end.lastRelationship() );\n             branch = end.parent();\n-            while ( branch.length() > 0 )\n+            while( branch.length() > 0)\n             {\n                 entities.add( branch.endNode() );\n                 entities.add( branch.lastRelationship() );\n                 branch = branch.parent();\n             }\n+\n             entities.add( branch.endNode() );\n         }\n+\n         return entities.iterator();\n     }\n \n@@ -217,13 +229,14 @@ class BidirectionalTraversalBranchPath implements Path\n         {\n             return true;\n         }\n-        if ( !(obj instanceof Path) )\n+\n+        if ( ! ( obj instanceof Path) )\n         {\n             return false;\n         }\n \n         Path other = (Path) obj;\n-        return relationships().equals( other.relationships() ) && other.startNode().equals( cachedStartNode );\n+        return relationships().equals( other.relationships() )&& other.startNode().equals( cachedStartNode );\n     }\n \n     @Override\n@@ -231,4 +244,4 @@ class BidirectionalTraversalBranchPath implements Path\n     {\n         return Paths.defaultPathToString( this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}