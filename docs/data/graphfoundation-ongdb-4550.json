{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4550",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4550/TraversalDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4550/TraversalDescription.java\nindex 6e1e2714348..15a9be10f34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4550/TraversalDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4550/TraversalDescription.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import java.util.Comparator;\n@@ -38,7 +39,7 @@ import org.neo4j.graphdb.RelationshipType;\n  * TraversalDescription td = new TraversalDescriptionImpl();\n  * td.depthFirst();\n  * </pre>\n- *\n+ * <p>\n  * is not going to modify td. you will need to reassign td, like\n  *\n  * <pre>\n@@ -52,201 +53,203 @@ import org.neo4j.graphdb.RelationshipType;\n  */\n public interface TraversalDescription\n {\n-    /**\n-     * Sets the {@link UniquenessFactory} for creating the\n-     * {@link UniquenessFilter} to use.\n-     *\n-     * @param uniqueness the {@link UniquenessFactory} the creator\n-     * of the desired {@link UniquenessFilter} to use.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription uniqueness( UniquenessFactory uniqueness );\n-\n-    /**\n-     * Sets the {@link UniquenessFactory} for creating the\n-     * {@link UniquenessFilter} to use. It also accepts an extra parameter\n-     * which is mandatory for certain uniquenesses.\n-     *\n-     * @param uniqueness the {@link UniquenessFactory} the creator\n-     * of the desired {@link UniquenessFilter} to use.\n-     * @param parameter an extra parameter\n-     * which is mandatory for certain uniquenesses.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription uniqueness( UniquenessFactory uniqueness, Object parameter );\n-\n-    /**\n-     * Adds {@code evaluator} to the list of evaluators which will control the\n-     * behavior of the traversal. Each {@link Evaluator} can decide whether or\n-     * not to include a position in the traverser result, i.e. return it from\n-     * the {@link Traverser} iterator and also whether to continue down that\n-     * path or to prune, so that the traverser won't continue further down that\n-     * path.\n-     *\n-     * Multiple {@link Evaluator}s can be added. For a path to be included in\n-     * the result, all evaluators must agree to include it, i.e. returning\n-     * either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n-     * {@link Evaluation#INCLUDE_AND_PRUNE}. For making the traversal continue\n-     * down that path all evaluators must agree to continue from that path, i.e.\n-     * returning either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n-     * {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n-     *\n-     * @param evaluator the {@link Evaluator} to add to the traversal\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription evaluator( Evaluator evaluator );\n-\n-    /**\n-     * Adds {@code evaluator} to the list of evaluators which will control the\n-     * behavior of the traversal. Each {@link PathEvaluator} can decide whether or\n-     * not to include a position in the traverser result, i.e. return it from\n-     * the {@link Traverser} iterator and also whether to continue down that\n-     * path or to prune, so that the traverser won't continue further down that\n-     * path.\n-     *\n-     * Multiple {@link PathEvaluator}s can be added. For a path to be included in\n-     * the result, all evaluators must agree to include it, i.e. returning\n-     * either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n-     * {@link Evaluation#INCLUDE_AND_PRUNE}. For making the traversal continue\n-     * down that path all evaluators must agree to continue from that path, i.e.\n-     * returning either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n-     * {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n-     *\n-     * @param evaluator the {@link PathEvaluator} to add to the traversal\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription evaluator( PathEvaluator evaluator );\n-\n-    /**\n-     * Sets the {@link BranchOrderingPolicy} to use. A {@link BranchSelector}\n-     * is the basic decisions in the traversal of \"where to go next\".\n-     * Examples of default implementations are \"breadth first\" and\n-     * \"depth first\", which can be set with convenience methods\n-     * {@link #breadthFirst()} and {@link #depthFirst()}.\n-     *\n-     * @param selector the factory which creates the {@link BranchSelector}\n-     * to use with the traversal.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription order( BranchOrderingPolicy selector );\n-\n-    /**\n-     * A convenience method for {@link #order(BranchOrderingPolicy)}\n-     * where a \"preorder depth first\" selector is used. Positions which are\n-     * deeper than the current position will be returned before positions on\n-     * the same depth. See http://en.wikipedia.org/wiki/Depth-first_search\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription depthFirst();\n-\n-    /**\n-     * A convenience method for {@link #order(BranchOrderingPolicy)}\n-     * where a \"preorder breadth first\" selector is used. All positions with\n-     * the same depth will be returned before advancing to the next depth.\n-     * See http://en.wikipedia.org/wiki/Breadth-first_search\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription breadthFirst();\n-\n-    /**\n-     * Adds {@code type} to the list of relationship types to traverse.\n-     * There's no priority or order in which types to traverse.\n-     *\n-     * @param type the {@link RelationshipType} to add to the list of types\n-     * to traverse.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription relationships( RelationshipType type );\n-\n-    /**\n-     * Adds {@code type} to the list of relationship types to traverse in\n-     * the given {@code direction}. There's no priority or order in which\n-     * types to traverse.\n-     *\n-     * @param type the {@link RelationshipType} to add to the list of types\n-     * to traverse.\n-     * @param direction the {@link Direction} to traverse this type of\n-     * relationship in.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription relationships( RelationshipType type,\n-            Direction direction );\n-\n-    /**\n-     * Sets the {@link PathExpander} as the expander of relationships,\n-     * discarding all previous calls to\n-     * {@link #relationships(RelationshipType)} and\n-     * {@link #relationships(RelationshipType, Direction)} or any other expand method.\n-     *\n-     * @param expander the {@link PathExpander} to use.\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription expand( PathExpander<?> expander );\n-\n-    /**\n-     * Sets the {@link PathExpander} as the expander of relationships,\n-     * discarding all previous calls to\n-     * {@link #relationships(RelationshipType)} and\n-     * {@link #relationships(RelationshipType, Direction)} or any other expand method.\n-     * The supplied {@link InitialBranchState} will provide the initial traversal branches\n-     * with state values which flows down throughout the traversal and can be changed\n-     * for child branches by the {@link PathExpander} at any level.\n-     *\n-     * @param expander the {@link PathExpander} to use.\n-     * @param initialState factory for supplying the initial traversal branches with\n-     * state values potentially used by the {@link PathExpander}.\n-     * @param <STATE> the type of the state object\n-     * @return a new traversal description with the new modifications.\n-     */\n-    <STATE> TraversalDescription expand( PathExpander<STATE> expander, InitialBranchState<STATE> initialState );\n-\n-    /**\n-     * @param comparator the {@link Comparator} to use for sorting the paths.\n-     * @return the paths from this traversal sorted according to {@code comparator}.\n-     */\n-    TraversalDescription sort( Comparator<? super Path> comparator );\n-\n-    /**\n-     * Creates an identical {@link TraversalDescription}, although reversed in\n-     * how it traverses the graph.\n-     *\n-     * @return a new traversal description with the new modifications.\n-     */\n-    TraversalDescription reverse();\n-\n-    /**\n-     * Traverse from a single start node based on all the rules and behavior\n-     * in this description. A {@link Traverser} is returned which is\n-     * used to step through the graph and getting results back. The traversal\n-     * is not guaranteed to start before the Traverser is used.\n-     *\n-     * @param startNode {@link Node} to start traversing from.\n-     * @return a {@link Traverser} used to step through the graph and to get\n-     * results from.\n-     */\n-    Traverser traverse( Node startNode );\n-\n-    /**\n-     * Traverse from a set of start nodes based on all the rules and behavior\n-     * in this description. A {@link Traverser} is returned which is\n-     * used to step through the graph and getting results back. The traversal\n-     * is not guaranteed to start before the Traverser is used.\n-     *\n-     * @param startNodes {@link Node}s to start traversing from.\n-     * @return a {@link Traverser} used to step through the graph and to get\n-     * results from.\n-     */\n-    Traverser traverse( Node... startNodes );\n-\n-    /**\n-     * Traverse from a iterable of start nodes based on all the rules and behavior\n-     * in this description. A {@link Traverser} is returned which is\n-     * used to step through the graph and getting results back. The traversal\n-     * is not guaranteed to start before the Traverser is used.\n-     *\n-     * @param iterableStartNodes {@link Node}s to start traversing from.\n-     * @return a {@link Traverser} used to step through the graph and to get\n-     * results from.\n-     */\n-    Traverser traverse( Iterable<Node> iterableStartNodes );\n+  /**\n+   * Sets the {@link UniquenessFactory} for creating the\n+   * {@link UniquenessFilter} to use.\n+   *\n+   * @param uniqueness the {@link UniquenessFactory} the creator\n+   *                   of the desired {@link UniquenessFilter} to use.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription uniqueness(UniquenessFactory uniqueness);\n+\n+  /**\n+   * Sets the {@link UniquenessFactory} for creating the\n+   * {@link UniquenessFilter} to use. It also accepts an extra parameter\n+   * which is mandatory for certain uniquenesses.\n+   *\n+   * @param uniqueness the {@link UniquenessFactory} the creator\n+   *                   of the desired {@link UniquenessFilter} to use.\n+   * @param parameter  an extra parameter\n+   *                   which is mandatory for certain uniquenesses.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription uniqueness(UniquenessFactory uniqueness, Object parameter);\n+\n+  /**\n+   * Adds {@code evaluator} to the list of evaluators which will control the\n+   * behavior of the traversal. Each {@link Evaluator} can decide whether or\n+   * not to include a position in the traverser result, i.e. return it from\n+   * the {@link Traverser} iterator and also whether to continue down that\n+   * path or to prune, so that the traverser won't continue further down that\n+   * path.\n+   * <p>\n+   * Multiple {@link Evaluator}s can be added. For a path to be included in\n+   * the result, all evaluators must agree to include it, i.e. returning\n+   * either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n+   * {@link Evaluation#INCLUDE_AND_PRUNE}. For making the traversal continue\n+   * down that path all evaluators must agree to continue from that path, i.e.\n+   * returning either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n+   * {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n+   *\n+   * @param evaluator the {@link Evaluator} to add to the traversal\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription evaluator(Evaluator evaluator);\n+\n+  /**\n+   * Adds {@code evaluator} to the list of evaluators which will control the\n+   * behavior of the traversal. Each {@link PathEvaluator} can decide whether or\n+   * not to include a position in the traverser result, i.e. return it from\n+   * the {@link Traverser} iterator and also whether to continue down that\n+   * path or to prune, so that the traverser won't continue further down that\n+   * path.\n+   * <p>\n+   * Multiple {@link PathEvaluator}s can be added. For a path to be included in\n+   * the result, all evaluators must agree to include it, i.e. returning\n+   * either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n+   * {@link Evaluation#INCLUDE_AND_PRUNE}. For making the traversal continue\n+   * down that path all evaluators must agree to continue from that path, i.e.\n+   * returning either {@link Evaluation#INCLUDE_AND_CONTINUE} or\n+   * {@link Evaluation#EXCLUDE_AND_CONTINUE}.\n+   *\n+   * @param evaluator the {@link PathEvaluator} to add to the traversal\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription evaluator(PathEvaluator evaluator);\n+\n+  /**\n+   * Sets the {@link BranchOrderingPolicy} to use. A {@link BranchSelector}\n+   * is the basic decisions in the traversal of \"where to go next\".\n+   * Examples of default implementations are \"breadth first\" and\n+   * \"depth first\", which can be set with convenience methods\n+   * {@link #breadthFirst()} and {@link #depthFirst()}.\n+   *\n+   * @param selector the factory which creates the {@link BranchSelector}\n+   *                 to use with the traversal.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription order(BranchOrderingPolicy selector);\n+\n+  /**\n+   * A convenience method for {@link #order(BranchOrderingPolicy)}\n+   * where a \"preorder depth first\" selector is used. Positions which are\n+   * deeper than the current position will be returned before positions on\n+   * the same depth. See http://en.wikipedia.org/wiki/Depth-first_search\n+   *\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription depthFirst();\n+\n+  /**\n+   * A convenience method for {@link #order(BranchOrderingPolicy)}\n+   * where a \"preorder breadth first\" selector is used. All positions with\n+   * the same depth will be returned before advancing to the next depth.\n+   * See http://en.wikipedia.org/wiki/Breadth-first_search\n+   *\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription breadthFirst();\n+\n+  /**\n+   * Adds {@code type} to the list of relationship types to traverse.\n+   * There's no priority or order in which types to traverse.\n+   *\n+   * @param type the {@link RelationshipType} to add to the list of types\n+   *             to traverse.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription relationships(RelationshipType type);\n+\n+  /**\n+   * Adds {@code type} to the list of relationship types to traverse in\n+   * the given {@code direction}. There's no priority or order in which\n+   * types to traverse.\n+   *\n+   * @param type      the {@link RelationshipType} to add to the list of types\n+   *                  to traverse.\n+   * @param direction the {@link Direction} to traverse this type of\n+   *                  relationship in.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription relationships(RelationshipType type,\n+                                     Direction direction);\n+\n+  /**\n+   * Sets the {@link PathExpander} as the expander of relationships,\n+   * discarding all previous calls to\n+   * {@link #relationships(RelationshipType)} and\n+   * {@link #relationships(RelationshipType, Direction)} or any other expand method.\n+   *\n+   * @param expander the {@link PathExpander} to use.\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription expand(PathExpander<?> expander);\n+\n+  /**\n+   * Sets the {@link PathExpander} as the expander of relationships,\n+   * discarding all previous calls to\n+   * {@link #relationships(RelationshipType)} and\n+   * {@link #relationships(RelationshipType, Direction)} or any other expand method.\n+   * The supplied {@link InitialBranchState} will provide the initial traversal branches\n+   * with state values which flows down throughout the traversal and can be changed\n+   * for child branches by the {@link PathExpander} at any level.\n+   *\n+   * @param expander     the {@link PathExpander} to use.\n+   * @param initialState factory for supplying the initial traversal branches with\n+   *                     state values potentially used by the {@link PathExpander}.\n+   * @param <STATE>      the type of the state object\n+   * @return a new traversal description with the new modifications.\n+   */\n+  <STATE> TraversalDescription expand(PathExpander<STATE> expander, InitialBranchState<STATE> initialState);\n+\n+  /**\n+   * @param comparator the {@link Comparator} to use for sorting the paths.\n+   * @return the paths from this traversal sorted according to {@code comparator}.\n+   */\n+  TraversalDescription sort(Comparator<? super Path> comparator);\n+\n+  /**\n+   * Creates an identical {@link TraversalDescription}, although reversed in\n+   * how it traverses the graph.\n+   *\n+   * @return a new traversal description with the new modifications.\n+   */\n+  TraversalDescription reverse();\n+\n+  /**\n+   * Traverse from a single start node based on all the rules and behavior\n+   * in this description. A {@link Traverser} is returned which is\n+   * used to step through the graph and getting results back. The traversal\n+   * is not guaranteed to start before the Traverser is used.\n+   *\n+   * @param startNode {@link Node} to start traversing from.\n+   * @return a {@link Traverser} used to step through the graph and to get\n+   * results from.\n+   */\n+  Traverser traverse(Node startNode);\n+\n+  /**\n+   * Traverse from a set of start nodes based on all the rules and behavior\n+   * in this description. A {@link Traverser} is returned which is\n+   * used to step through the graph and getting results back. The traversal\n+   * is not guaranteed to start before the Traverser is used.\n+   *\n+   * @param startNodes {@link Node}s to start traversing from.\n+   * @return a {@link Traverser} used to step through the graph and to get\n+   * results from.\n+   */\n+  Traverser traverse(Node... startNodes);\n+\n+  /**\n+   * Traverse from a iterable of start nodes based on all the rules and behavior\n+   * in this description. A {@link Traverser} is returned which is\n+   * used to step through the graph and getting results back. The traversal\n+   * is not guaranteed to start before the Traverser is used.\n+   *\n+   * @param iterableStartNodes {@link Node}s to start traversing from.\n+   * @return a {@link Traverser} used to step through the graph and to get\n+   * results from.\n+   */\n+  Traverser traverse(Iterable<Node> iterableStartNodes);\n }\n",
            "diff_size": 201
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4550/TraversalDescription.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4550/TraversalDescription.java\nindex 6e1e2714348..af7ccd32ab7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4550/TraversalDescription.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4550/TraversalDescription.java\n@@ -172,7 +172,7 @@ public interface TraversalDescription\n     TraversalDescription relationships( RelationshipType type,\n             Direction direction );\n \n-    /**\n+/**\n      * Sets the {@link PathExpander} as the expander of relationships,\n      * discarding all previous calls to\n      * {@link #relationships(RelationshipType)} and\n@@ -249,4 +249,4 @@ public interface TraversalDescription\n      * results from.\n      */\n     Traverser traverse( Iterable<Node> iterableStartNodes );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}