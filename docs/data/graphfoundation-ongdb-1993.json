{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1993",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "233",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "284",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "299",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1993/PathImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1993/PathImpl.java\nindex d4edc037014..a610ae4422b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1993/PathImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1993/PathImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.Arrays;\n@@ -35,286 +36,280 @@ import static org.neo4j.helpers.collection.Iterators.iteratorsEqual;\n \n public final class PathImpl implements Path\n {\n-    public static final class Builder\n-    {\n-        private final Builder previous;\n-        private final Node start;\n-        private final Relationship relationship;\n-        private final int size;\n-\n-        public Builder( Node start )\n-        {\n-            if ( start == null )\n-            {\n-                throw new NullPointerException();\n-            }\n-            this.start = start;\n-            this.previous = null;\n-            this.relationship = null;\n-            this.size = 0;\n-        }\n-\n-        private Builder( Builder prev, Relationship rel )\n-        {\n-            this.start = prev.start;\n-            this.previous = prev;\n-            this.relationship = rel;\n-            this.size = prev.size + 1;\n-        }\n-\n-        public Node getStartNode()\n-        {\n-            return start;\n-        }\n-\n-        public Path build()\n-        {\n-            return new PathImpl( this, null );\n-        }\n-\n-        public Builder push( Relationship relationship )\n-        {\n-            if ( relationship == null )\n-            {\n-                throw new NullPointerException();\n-            }\n-            return new Builder( this, relationship );\n-        }\n-\n-        public Path build( Builder other )\n-        {\n-            return new PathImpl( this, other );\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            if ( previous == null )\n-            {\n-                return start.toString();\n-            }\n-            else\n-            {\n-                return relToString( relationship ) + \":\" + previous.toString();\n-            }\n-        }\n-    }\n-\n-    private static String relToString( Relationship rel )\n-    {\n-        return rel.getStartNode() + \"--\" + rel.getType() + \"-->\"\n-               + rel.getEndNode();\n-    }\n-\n+  public static final class Builder\n+  {\n+    private final Builder previous;\n     private final Node start;\n-    private final Relationship[] path;\n-    private final Node end;\n+    private final Relationship relationship;\n+    private final int size;\n \n-    private PathImpl( Builder left, Builder right )\n+    public Builder(Node start)\n     {\n-        Node endNode = null;\n-        path = new Relationship[left.size + ( right == null ? 0 : right.size )];\n-        if ( right != null )\n-        {\n-            for ( int i = left.size, total = i + right.size; i < total; i++ )\n-            {\n-                path[i] = right.relationship;\n-                right = right.previous;\n-            }\n-            assert right.relationship == null : \"right Path.Builder size error\";\n-            endNode = right.start;\n-        }\n-\n-        for ( int i = left.size - 1; i >= 0; i-- )\n-        {\n-            path[i] = left.relationship;\n-            left = left.previous;\n-        }\n-        assert left.relationship == null : \"left Path.Builder size error\";\n-        start = left.start;\n-        end = endNode;\n+      if (start == null)\n+      {\n+        throw new NullPointerException();\n+      }\n+      this.start = start;\n+      this.previous = null;\n+      this.relationship = null;\n+      this.size = 0;\n     }\n \n-    public static Path singular( Node start )\n+    private Builder(Builder prev, Relationship rel)\n     {\n-        return new Builder( start ).build();\n+      this.start = prev.start;\n+      this.previous = prev;\n+      this.relationship = rel;\n+      this.size = prev.size + 1;\n     }\n \n-    @Override\n-    public Node startNode()\n+    public Node getStartNode()\n     {\n-        return start;\n+      return start;\n     }\n \n-    @Override\n-    public Node endNode()\n+    public Path build()\n     {\n-        if ( end != null )\n-        {\n-            return end;\n-        }\n-\n-        // TODO We could really figure this out in the constructor\n-        Node stepNode = null;\n-        for ( Node node : nodes() )\n-        {\n-            stepNode = node;\n-        }\n-        return stepNode;\n+      return new PathImpl(this, null);\n     }\n \n-    @Override\n-    public Relationship lastRelationship()\n+    public Builder push(Relationship relationship)\n     {\n-        return path != null && path.length > 0 ? path[path.length - 1] : null;\n+      if (relationship == null)\n+      {\n+        throw new NullPointerException();\n+      }\n+      return new Builder(this, relationship);\n     }\n \n-    @Override\n-    public Iterable<Node> nodes()\n+    public Path build(Builder other)\n     {\n-        return nodeIterator( start, relationships() );\n+      return new PathImpl(this, other);\n     }\n \n     @Override\n-    public Iterable<Node> reverseNodes()\n-    {\n-        return nodeIterator( endNode(), reverseRelationships() );\n-    }\n-\n-    private Iterable<Node> nodeIterator( final Node start, final Iterable<Relationship> relationships )\n+    public String toString()\n     {\n-        return () -> new Iterator<Node>()\n-        {\n-            Node current = start;\n-            int index;\n-            Iterator<Relationship> relationshipIterator = relationships.iterator();\n-\n-            public boolean hasNext()\n-            {\n-                return index <= path.length;\n-            }\n-\n-            public Node next()\n-            {\n-                if ( current == null )\n-                {\n-                    throw new NoSuchElementException();\n-                }\n-                Node next = null;\n-                if ( index < path.length )\n-                {\n-                    if ( !relationshipIterator.hasNext() )\n-                    {\n-                        throw new IllegalStateException( String.format( \"Number of relationships: %d does not\" +\n-                                              \" match with path length: %d.\", index, path.length ) );\n-                    }\n-                    next = relationshipIterator.next().getOtherNode( current );\n-                }\n-                index += 1;\n-                try\n-                {\n-                    return current;\n-                }\n-                finally\n-                {\n-                    current = next;\n-                }\n-            }\n-\n-            public void remove()\n-            {\n-                throw new UnsupportedOperationException();\n-            }\n-        };\n+      if (previous == null)\n+      {\n+        return start.toString();\n+      } else\n+      {\n+        return relToString(relationship) + \":\" + previous.toString();\n+      }\n     }\n-\n-    @Override\n-    public Iterable<Relationship> relationships()\n+  }\n+\n+  private static String relToString(Relationship rel)\n+  {\n+    return rel.getStartNode() + \"--\" + rel.getType() + \"-->\"\n+        + rel.getEndNode();\n+  }\n+\n+  private final Node start;\n+  private final Relationship[] path;\n+  private final Node end;\n+\n+  private PathImpl(Builder left, Builder right)\n+  {\n+    Node endNode = null;\n+    path = new Relationship[left.size + (right == null ? 0 : right.size)];\n+    if (right != null)\n     {\n-        return () -> new ArrayIterator<>( path );\n+      for (int i = left.size, total = i + right.size; i < total; i++)\n+      {\n+        path[i] = right.relationship;\n+        right = right.previous;\n+      }\n+      assert right.relationship == null : \"right Path.Builder size error\";\n+      endNode = right.start;\n     }\n \n-    @Override\n-    public Iterable<Relationship> reverseRelationships()\n+    for (int i = left.size - 1; i >= 0; i--)\n     {\n-        return () -> new ReverseArrayIterator<>( path );\n+      path[i] = left.relationship;\n+      left = left.previous;\n     }\n-\n-    @Override\n-    public Iterator<PropertyContainer> iterator()\n+    assert left.relationship == null : \"left Path.Builder size error\";\n+    start = left.start;\n+    end = endNode;\n+  }\n+\n+  public static Path singular(Node start)\n+  {\n+    return new Builder(start).build();\n+  }\n+\n+  @Override\n+  public Node startNode()\n+  {\n+    return start;\n+  }\n+\n+  @Override\n+  public Node endNode()\n+  {\n+    if (end != null)\n     {\n-        return new Iterator<PropertyContainer>()\n-        {\n-            Iterator<? extends PropertyContainer> current = nodes().iterator();\n-            Iterator<? extends PropertyContainer> next = relationships().iterator();\n-\n-            public boolean hasNext()\n-            {\n-                return current.hasNext();\n-            }\n-\n-            public PropertyContainer next()\n-            {\n-                try\n-                {\n-                    return current.next();\n-                }\n-                finally\n-                {\n-                    Iterator<? extends PropertyContainer> temp = current;\n-                    current = next;\n-                    next = temp;\n-                }\n-            }\n-\n-            public void remove()\n-            {\n-                next.remove();\n-            }\n-        };\n+      return end;\n     }\n \n-    @Override\n-    public int length()\n+    // TODO We could really figure this out in the constructor\n+    Node stepNode = null;\n+    for (Node node : nodes())\n     {\n-        return path.length;\n+      stepNode = node;\n     }\n-\n-    @Override\n-    public int hashCode()\n+    return stepNode;\n+  }\n+\n+  @Override\n+  public Relationship lastRelationship()\n+  {\n+    return path != null && path.length > 0 ? path[path.length - 1] : null;\n+  }\n+\n+  @Override\n+  public Iterable<Node> nodes()\n+  {\n+    return nodeIterator(start, relationships());\n+  }\n+\n+  @Override\n+  public Iterable<Node> reverseNodes()\n+  {\n+    return nodeIterator(endNode(), reverseRelationships());\n+  }\n+\n+  private Iterable<Node> nodeIterator(final Node start, final Iterable<Relationship> relationships)\n+  {\n+    return () -> new Iterator<Node>()\n     {\n-        if ( path.length == 0 )\n+      Node current = start;\n+      int index;\n+      Iterator<Relationship> relationshipIterator = relationships.iterator();\n+\n+      public boolean hasNext()\n+      {\n+        return index <= path.length;\n+      }\n+\n+      public Node next()\n+      {\n+        if (current == null)\n         {\n-            return start.hashCode();\n+          throw new NoSuchElementException();\n         }\n-        else\n+        Node next = null;\n+        if (index < path.length)\n         {\n-            return Arrays.hashCode( path );\n+          if (!relationshipIterator.hasNext())\n+          {\n+            throw new IllegalStateException(String.format(\"Number of relationships: %d does not\" +\n+                \" match with path length: %d.\", index, path.length));\n+          }\n+          next = relationshipIterator.next().getOtherNode(current);\n         }\n-    }\n-\n-    @Override\n-    public boolean equals( Object obj )\n-    {\n-        if ( this == obj )\n+        index += 1;\n+        try\n         {\n-            return true;\n-        }\n-        else if ( obj instanceof Path )\n+          return current;\n+        } finally\n         {\n-            Path other = (Path) obj;\n-            return start.equals( other.startNode() ) &&\n-                    iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n+          current = next;\n         }\n-        else\n+      }\n+\n+      public void remove()\n+      {\n+        throw new UnsupportedOperationException();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> relationships()\n+  {\n+    return () -> new ArrayIterator<>(path);\n+  }\n+\n+  @Override\n+  public Iterable<Relationship> reverseRelationships()\n+  {\n+    return () -> new ReverseArrayIterator<>(path);\n+  }\n+\n+  @Override\n+  public Iterator<PropertyContainer> iterator()\n+  {\n+    return new Iterator<PropertyContainer>()\n+    {\n+      Iterator<? extends PropertyContainer> current = nodes().iterator();\n+      Iterator<? extends PropertyContainer> next = relationships().iterator();\n+\n+      public boolean hasNext()\n+      {\n+        return current.hasNext();\n+      }\n+\n+      public PropertyContainer next()\n+      {\n+        try\n+        {\n+          return current.next();\n+        } finally\n         {\n-            return false;\n+          Iterator<? extends PropertyContainer> temp = current;\n+          current = next;\n+          next = temp;\n         }\n+      }\n+\n+      public void remove()\n+      {\n+        next.remove();\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return path.length;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    if (path.length == 0)\n+    {\n+      return start.hashCode();\n+    } else\n+    {\n+      return Arrays.hashCode(path);\n     }\n+  }\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (this == obj)\n+    {\n+      return true;\n+    } else if (obj instanceof Path)\n     {\n-        return Paths.defaultPathToString( this );\n+      Path other = (Path) obj;\n+      return start.equals(other.startNode()) &&\n+          iteratorsEqual(this.relationships().iterator(), other.relationships().iterator());\n+    } else\n+    {\n+      return false;\n     }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return Paths.defaultPathToString(this);\n+  }\n }\n",
            "diff_size": 403
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "171",
                    "column": "43",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1993/PathImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1993/PathImpl.java\nindex d4edc037014..d4a8a109b18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1993/PathImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1993/PathImpl.java\n@@ -102,8 +102,7 @@ public final class PathImpl implements Path\n \n     private static String relToString( Relationship rel )\n     {\n-        return rel.getStartNode() + \"--\" + rel.getType() + \"-->\"\n-               + rel.getEndNode();\n+        return rel.getStartNode() + \"--\" + rel.getType() + \"-->\" + rel.getEndNode();\n     }\n \n     private final Node start;\n@@ -121,7 +120,8 @@ public final class PathImpl implements Path\n                 path[i] = right.relationship;\n                 right = right.previous;\n             }\n-            assert right.relationship == null : \"right Path.Builder size error\";\n+\n+assert right.relationship == null : \"right Path.Builder size error\";\n             endNode = right.start;\n         }\n \n@@ -130,7 +130,8 @@ public final class PathImpl implements Path\n             path[i] = left.relationship;\n             left = left.previous;\n         }\n-        assert left.relationship == null : \"left Path.Builder size error\";\n+\n+assert left.relationship == null : \"left Path.Builder size error\";\n         start = left.start;\n         end = endNode;\n     }\n@@ -160,13 +161,14 @@ public final class PathImpl implements Path\n         {\n             stepNode = node;\n         }\n-        return stepNode;\n+\n+return stepNode;\n     }\n \n     @Override\n     public Relationship lastRelationship()\n     {\n-        return path != null && path.length > 0 ? path[path.length - 1] : null;\n+        return path != null && path.length> 0 ? path[path.length - 1] : null;\n     }\n \n     @Override\n@@ -200,17 +202,18 @@ public final class PathImpl implements Path\n                 {\n                     throw new NoSuchElementException();\n                 }\n-                Node next = null;\n+\n+Node next = null;\n                 if ( index < path.length )\n                 {\n                     if ( !relationshipIterator.hasNext() )\n                     {\n-                        throw new IllegalStateException( String.format( \"Number of relationships: %d does not\" +\n-                                              \" match with path length: %d.\", index, path.length ) );\n-                    }\n+                        throw new IllegalStateException( String.format( \"Number of relationships: %d does not\" + \" match with path length: %d.\", index, path.length ) );\n+    }\n                     next = relationshipIterator.next().getOtherNode( current );\n                 }\n-                index += 1;\n+\n+index += 1;\n                 try\n                 {\n                     return current;\n@@ -303,8 +306,7 @@ public final class PathImpl implements Path\n         else if ( obj instanceof Path )\n         {\n             Path other = (Path) obj;\n-            return start.equals( other.startNode() ) &&\n-                    iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n+            return start.equals( other.startNode() ) && iteratorsEqual( this.relationships().iterator(), other.relationships().iterator() );\n         }\n         else\n         {\n@@ -317,4 +319,4 @@ public final class PathImpl implements Path\n     {\n         return Paths.defaultPathToString( this );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}