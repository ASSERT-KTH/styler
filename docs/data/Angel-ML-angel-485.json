{
    "project_name": "Angel-ML-angel",
    "error_id": "485",
    "information": {
        "errors": [
            {
                "line": "95",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Test\n  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n    UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n    w2Client.update(func).get();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/485/UpdateFuncTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/485/UpdateFuncTest.java\nindex 0be942f30aa..c1b8a551fc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/485/UpdateFuncTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/485/UpdateFuncTest.java\n@@ -64,7 +64,7 @@ public class UpdateFuncTest {\n \n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n+    dim = localArray1.length;\n   }\n \n   @Test\n@@ -73,7 +73,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n     }\n@@ -85,19 +85,20 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n     }\n   }\n \n   @Test\n-  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n+  public void testAddS()\n+      throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n     }\n@@ -110,7 +111,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n     }\n@@ -122,7 +123,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n     }\n@@ -134,7 +135,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -146,7 +147,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n     }\n@@ -158,7 +159,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n     }\n@@ -170,7 +171,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n     }\n@@ -182,7 +183,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n     }\n@@ -194,7 +195,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], -1.0, delta);\n     }\n@@ -206,7 +207,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n     }\n@@ -218,7 +219,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n     }\n@@ -233,11 +234,11 @@ public class UpdateFuncTest {\n     int maxPoint = (int) Math.pow(2, 8 - 1) - 1;\n     double maxMaxAbs = 0.0;\n     for (int i = 0; i < localArray1.length; i++) {\n-      maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]): maxMaxAbs;\n+      maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]) : maxMaxAbs;\n     }\n \n     double[] result = pull(w2Client, 5);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(localArray1[i], 0.0 + result[i], 2 * maxMaxAbs / maxPoint);\n     }\n@@ -249,7 +250,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n     }\n@@ -261,7 +262,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n     }\n@@ -273,7 +274,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n     }\n@@ -286,7 +287,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n     }\n@@ -298,7 +299,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n     }\n@@ -311,7 +312,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n     }\n@@ -323,7 +324,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n     }\n@@ -335,7 +336,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n     }\n@@ -347,7 +348,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n     }\n@@ -359,7 +360,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n     }\n@@ -371,7 +372,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -383,7 +384,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n     }\n@@ -396,7 +397,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n     }\n@@ -408,7 +409,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n     }\n@@ -420,7 +421,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n     }\n@@ -432,7 +433,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n     }\n@@ -444,7 +445,7 @@ public class UpdateFuncTest {\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n     }\n@@ -468,11 +469,11 @@ public class UpdateFuncTest {\n \n   private static double[] pull(MatrixClient client, int rowId) {\n     GetRowResult rowResult = (GetRowResult) client.get(new Pull(client.getMatrixId(), rowId));\n-    return ((DenseIntDoubleVector)rowResult.getRow()).getValues();\n+    return ((DenseIntDoubleVector) rowResult.getRow()).getValues();\n   }\n \n   @AfterClass\n-  public static void stop() throws Exception{\n+  public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n   }\n }\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/485/UpdateFuncTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/485/UpdateFuncTest.java\nindex 0be942f30aa..ca3690e0519 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/485/UpdateFuncTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/485/UpdateFuncTest.java\n@@ -64,7 +64,7 @@ public class UpdateFuncTest {\n \n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n+    dim = localArray1.length;\n   }\n \n   @Test\n@@ -472,7 +472,7 @@ public class UpdateFuncTest {\n   }\n \n   @AfterClass\n-  public static void stop() throws Exception{\n+  public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/485/UpdateFuncTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/485/UpdateFuncTest.java\nindex 0be942f30aa..68a543bdf77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/485/UpdateFuncTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/485/UpdateFuncTest.java\n@@ -33,14 +33,12 @@ import org.junit.AfterClass;\n import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n-\n import java.util.Arrays;\n import java.util.concurrent.ExecutionException;\n \n public class UpdateFuncTest {\n \n   private static final org.apache.commons.logging.Log LOG = LogFactory.getLog(UpdateFuncTest.class);\n-\n   private static MatrixClient w2Client = null;\n   private static double[] localArray0 = null;\n   private static double[] localArray1 = null;\n@@ -61,19 +59,17 @@ public class UpdateFuncTest {\n     w2Client.update(new RandomNormal(w2Client.getMatrixId(), 1, 0.0, 1.0)).get();\n     // row 2 is filled with 1.0\n     w2Client.update(new Fill(w2Client.getMatrixId(), 2, 1.0)).get();\n-\n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n+    dim = localArray1.length;\n   }\n \n   @Test\n   public void testAbs() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new Abs(w2Client.getMatrixId(), 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n     }\n@@ -83,9 +79,8 @@ public class UpdateFuncTest {\n   public void testAdd() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new Add(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n     }\n@@ -95,9 +90,8 @@ public class UpdateFuncTest {\n   public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n     }\n@@ -108,9 +102,8 @@ public class UpdateFuncTest {\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 1.0)).get();\n     UpdateFunc func = new Axpy(w2Client.getMatrixId(), 0, 3, -2.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n     }\n@@ -120,9 +113,8 @@ public class UpdateFuncTest {\n   public void testCeil() throws Exception {\n     UpdateFunc func = new Ceil(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n     }\n@@ -132,9 +124,8 @@ public class UpdateFuncTest {\n   public void testCopy() throws Exception {\n     UpdateFunc func = new Copy(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -144,9 +135,8 @@ public class UpdateFuncTest {\n   public void testDiv() throws Exception {\n     UpdateFunc func = new Div(w2Client.getMatrixId(), 1, 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n     }\n@@ -156,9 +146,8 @@ public class UpdateFuncTest {\n   public void testDivS() throws Exception {\n     UpdateFunc func = new DivS(w2Client.getMatrixId(), 0, 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n     }\n@@ -168,9 +157,8 @@ public class UpdateFuncTest {\n   public void testExp() throws Exception {\n     UpdateFunc func = new Exp(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n     }\n@@ -180,9 +168,8 @@ public class UpdateFuncTest {\n   public void testExpm1() throws Exception {\n     UpdateFunc func = new Expm1(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n     }\n@@ -192,9 +179,8 @@ public class UpdateFuncTest {\n   public void testFill() throws Exception {\n     UpdateFunc func = new Fill(w2Client.getMatrixId(), 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], -1.0, delta);\n     }\n@@ -204,9 +190,8 @@ public class UpdateFuncTest {\n   public void testFloor() throws Exception {\n     UpdateFunc func = new Floor(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n     }\n@@ -216,9 +201,8 @@ public class UpdateFuncTest {\n   public void testIncrement() throws Exception {\n     UpdateFunc func = new Increment(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n     }\n@@ -226,18 +210,17 @@ public class UpdateFuncTest {\n \n   @Test\n   public void testCompress() throws Exception {\n-\n     UpdateFunc func = new CompressUpdateFunc(w2Client.getMatrixId(), 5, localArray1, 8);\n     w2Client.update(func).get();\n \n     int maxPoint = (int) Math.pow(2, 8 - 1) - 1;\n     double maxMaxAbs = 0.0;\n     for (int i = 0; i < localArray1.length; i++) {\n-      maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]): maxMaxAbs;\n+      maxMaxAbs = Math.abs(localArray1[i]) > maxMaxAbs ? Math.abs(localArray1[i]) : maxMaxAbs;\n     }\n \n     double[] result = pull(w2Client, 5);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(localArray1[i], 0.0 + result[i], 2 * maxMaxAbs / maxPoint);\n     }\n@@ -247,9 +230,8 @@ public class UpdateFuncTest {\n   public void testLog() throws Exception {\n     UpdateFunc func = new Log(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n     }\n@@ -259,9 +241,8 @@ public class UpdateFuncTest {\n   public void testLog1p() throws Exception {\n     UpdateFunc func = new Log1p(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n     }\n@@ -271,9 +252,8 @@ public class UpdateFuncTest {\n   public void testLog10() throws Exception {\n     UpdateFunc func = new Log10(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n     }\n@@ -284,9 +264,8 @@ public class UpdateFuncTest {\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n     UpdateFunc func = new MaxA(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n     }\n@@ -296,9 +275,8 @@ public class UpdateFuncTest {\n   public void testMaxV() throws Exception {\n     UpdateFunc func = new MaxV(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n     }\n@@ -309,9 +287,8 @@ public class UpdateFuncTest {\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n     UpdateFunc func = new MinA(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n     }\n@@ -321,9 +298,8 @@ public class UpdateFuncTest {\n   public void testMinV() throws Exception {\n     UpdateFunc func = new MinV(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n     }\n@@ -333,9 +309,8 @@ public class UpdateFuncTest {\n   public void testMul() throws Exception {\n     UpdateFunc func = new Mul(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n     }\n@@ -345,9 +320,8 @@ public class UpdateFuncTest {\n   public void testMulS() throws Exception {\n     UpdateFunc func = new MulS(w2Client.getMatrixId(), 0, 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n     }\n@@ -357,9 +331,8 @@ public class UpdateFuncTest {\n   public void testPow() throws Exception {\n     UpdateFunc func = new Pow(w2Client.getMatrixId(), 0, 3, 3.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n     }\n@@ -369,9 +342,8 @@ public class UpdateFuncTest {\n   public void testPut() throws Exception {\n     UpdateFunc func = new Push(w2Client.getMatrixId(), 3, localArray0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -381,9 +353,8 @@ public class UpdateFuncTest {\n   public void testRound() throws Exception {\n     UpdateFunc func = new Round(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n     }\n@@ -394,9 +365,8 @@ public class UpdateFuncTest {\n     w2Client.update(new Push(w2Client.getMatrixId(), 3, localArray0)).get();\n     UpdateFunc func = new Scale(w2Client.getMatrixId(), 3, 2.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n     }\n@@ -406,9 +376,8 @@ public class UpdateFuncTest {\n   public void testSignum() throws Exception {\n     UpdateFunc func = new Signum(w2Client.getMatrixId(), 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n     }\n@@ -418,9 +387,8 @@ public class UpdateFuncTest {\n   public void testSqrt() throws Exception {\n     UpdateFunc func = new Sqrt(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n     }\n@@ -430,9 +398,8 @@ public class UpdateFuncTest {\n   public void testSub() throws Exception {\n     UpdateFunc func = new Sub(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n     }\n@@ -442,9 +409,8 @@ public class UpdateFuncTest {\n   public void testSubS() throws Exception {\n     UpdateFunc func = new SubS(w2Client.getMatrixId(), 0, 3, -1.1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n     }\n@@ -465,14 +431,14 @@ public class UpdateFuncTest {\n     System.out.println(Arrays.toString(arr));\n   }\n \n-\n   private static double[] pull(MatrixClient client, int rowId) {\n     GetRowResult rowResult = (GetRowResult) client.get(new Pull(client.getMatrixId(), rowId));\n-    return ((DenseIntDoubleVector)rowResult.getRow()).getValues();\n+    return ((DenseIntDoubleVector) rowResult.getRow()).getValues();\n   }\n \n   @AfterClass\n-  public static void stop() throws Exception{\n+  public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}