{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2096",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2096/PopulatingIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2096/PopulatingIndexProxy.java\nindex 27d772707ee..7a4efe6528c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2096/PopulatingIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2096/PopulatingIndexProxy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.io.File;\n@@ -39,169 +40,169 @@ import static org.neo4j.helpers.collection.Iterators.emptyResourceIterator;\n \n public class PopulatingIndexProxy implements IndexProxy\n {\n-    private final IndexMeta indexMeta;\n-    private final IndexPopulationJob job;\n-    private final MultipleIndexPopulator.IndexPopulation indexPopulation;\n-\n-    PopulatingIndexProxy( IndexMeta indexMeta, IndexPopulationJob job, MultipleIndexPopulator.IndexPopulation indexPopulation )\n-    {\n-        this.indexMeta = indexMeta;\n-        this.job = job;\n-        this.indexPopulation = indexPopulation;\n-    }\n-\n-    @Override\n-    public void start()\n-    {\n-    }\n-\n-    @Override\n-    public IndexUpdater newUpdater( final IndexUpdateMode mode )\n-    {\n-        switch ( mode )\n+  private final IndexMeta indexMeta;\n+  private final IndexPopulationJob job;\n+  private final MultipleIndexPopulator.IndexPopulation indexPopulation;\n+\n+  PopulatingIndexProxy(IndexMeta indexMeta, IndexPopulationJob job, MultipleIndexPopulator.IndexPopulation indexPopulation)\n+  {\n+    this.indexMeta = indexMeta;\n+    this.job = job;\n+    this.indexPopulation = indexPopulation;\n+  }\n+\n+  @Override\n+  public void start()\n+  {\n+  }\n+\n+  @Override\n+  public IndexUpdater newUpdater(final IndexUpdateMode mode)\n+  {\n+    switch (mode)\n+    {\n+      case ONLINE:\n+      case RECOVERY:\n+        return new PopulatingIndexUpdater()\n         {\n-            case ONLINE:\n-            case RECOVERY:\n-                return new PopulatingIndexUpdater()\n-                {\n-                    @Override\n-                    public void process( IndexEntryUpdate<?> update )\n-                    {\n-                        job.update( update );\n-                    }\n-                };\n-            default:\n-                return new PopulatingIndexUpdater()\n-                {\n-                    @Override\n-                    public void process( IndexEntryUpdate<?> update )\n-                    {\n-                        throw new IllegalArgumentException( \"Unsupported update mode: \" + mode );\n-                    }\n-                };\n-        }\n-    }\n-\n-    @Override\n-    public void drop()\n-    {\n-        job.cancelPopulation( indexPopulation );\n-    }\n-\n-    @Override\n-    public SchemaIndexDescriptor getDescriptor()\n-    {\n-        return indexMeta.indexDescriptor();\n-    }\n-\n-    @Override\n-    public SchemaDescriptor schema()\n-    {\n-        return indexMeta.indexDescriptor().schema();\n-    }\n-\n-    @Override\n-    public IndexProvider.Descriptor getProviderDescriptor()\n-    {\n-        return indexMeta.providerDescriptor();\n-    }\n-\n-    @Override\n-    public InternalIndexState getState()\n-    {\n-        return InternalIndexState.POPULATING;\n-    }\n-\n-    @Override\n-    public IndexCapability getIndexCapability()\n-    {\n-        return indexMeta.indexCapability();\n-    }\n-\n-    @Override\n-    public void force( IOLimiter ioLimiter )\n-    {\n-        // Ignored... this isn't called from the outside while we're populating the index.\n-    }\n-\n-    @Override\n-    public void refresh()\n-    {\n-        // Ignored... this isn't called from the outside while we're populating the index.\n-    }\n-\n+          @Override\n+          public void process(IndexEntryUpdate<?> update)\n+          {\n+            job.update(update);\n+          }\n+        };\n+      default:\n+        return new PopulatingIndexUpdater()\n+        {\n+          @Override\n+          public void process(IndexEntryUpdate<?> update)\n+          {\n+            throw new IllegalArgumentException(\"Unsupported update mode: \" + mode);\n+          }\n+        };\n+    }\n+  }\n+\n+  @Override\n+  public void drop()\n+  {\n+    job.cancelPopulation(indexPopulation);\n+  }\n+\n+  @Override\n+  public SchemaIndexDescriptor getDescriptor()\n+  {\n+    return indexMeta.indexDescriptor();\n+  }\n+\n+  @Override\n+  public SchemaDescriptor schema()\n+  {\n+    return indexMeta.indexDescriptor().schema();\n+  }\n+\n+  @Override\n+  public IndexProvider.Descriptor getProviderDescriptor()\n+  {\n+    return indexMeta.providerDescriptor();\n+  }\n+\n+  @Override\n+  public InternalIndexState getState()\n+  {\n+    return InternalIndexState.POPULATING;\n+  }\n+\n+  @Override\n+  public IndexCapability getIndexCapability()\n+  {\n+    return indexMeta.indexCapability();\n+  }\n+\n+  @Override\n+  public void force(IOLimiter ioLimiter)\n+  {\n+    // Ignored... this isn't called from the outside while we're populating the index.\n+  }\n+\n+  @Override\n+  public void refresh()\n+  {\n+    // Ignored... this isn't called from the outside while we're populating the index.\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    job.cancelPopulation(indexPopulation);\n+  }\n+\n+  @Override\n+  public IndexReader newReader() throws IndexNotFoundKernelException\n+  {\n+    throw new IndexNotFoundKernelException(\"Index is still populating: \" + job);\n+  }\n+\n+  @Override\n+  public boolean awaitStoreScanCompleted() throws InterruptedException\n+  {\n+    job.awaitCompletion();\n+    return true;\n+  }\n+\n+  @Override\n+  public void activate()\n+  {\n+    throw new IllegalStateException(\"Cannot activate index while it is still populating: \" + job);\n+  }\n+\n+  @Override\n+  public void validate()\n+  {\n+    throw new IllegalStateException(\"Cannot validate index while it is still populating: \" + job);\n+  }\n+\n+  @Override\n+  public void validateBeforeCommit(Value[] tuple)\n+  {\n+    // It's OK to put whatever values in while populating because it will take the natural path of failing the population.\n+  }\n+\n+  @Override\n+  public long getIndexId()\n+  {\n+    return indexMeta.getIndexId();\n+  }\n+\n+  @Override\n+  public ResourceIterator<File> snapshotFiles()\n+  {\n+    return emptyResourceIterator();\n+  }\n+\n+  @Override\n+  public IndexPopulationFailure getPopulationFailure() throws IllegalStateException\n+  {\n+    throw new IllegalStateException(this + \" is POPULATING\");\n+  }\n+\n+  @Override\n+  public PopulationProgress getIndexPopulationProgress()\n+  {\n+    return job.getPopulationProgress();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() + \"[job:\" + job + \"]\";\n+  }\n+\n+  private abstract class PopulatingIndexUpdater implements IndexUpdater\n+  {\n     @Override\n     public void close()\n     {\n-        job.cancelPopulation( indexPopulation );\n-    }\n-\n-    @Override\n-    public IndexReader newReader() throws IndexNotFoundKernelException\n-    {\n-        throw new IndexNotFoundKernelException( \"Index is still populating: \" + job );\n-    }\n-\n-    @Override\n-    public boolean awaitStoreScanCompleted() throws InterruptedException\n-    {\n-        job.awaitCompletion();\n-        return true;\n-    }\n-\n-    @Override\n-    public void activate()\n-    {\n-        throw new IllegalStateException( \"Cannot activate index while it is still populating: \" + job );\n-    }\n-\n-    @Override\n-    public void validate()\n-    {\n-        throw new IllegalStateException( \"Cannot validate index while it is still populating: \" + job );\n-    }\n-\n-    @Override\n-    public void validateBeforeCommit( Value[] tuple )\n-    {\n-        // It's OK to put whatever values in while populating because it will take the natural path of failing the population.\n-    }\n-\n-    @Override\n-    public long getIndexId()\n-    {\n-        return indexMeta.getIndexId();\n-    }\n-\n-    @Override\n-    public ResourceIterator<File> snapshotFiles()\n-    {\n-        return emptyResourceIterator();\n-    }\n-\n-    @Override\n-    public IndexPopulationFailure getPopulationFailure() throws IllegalStateException\n-    {\n-        throw new IllegalStateException( this + \" is POPULATING\" );\n-    }\n-\n-    @Override\n-    public PopulationProgress getIndexPopulationProgress()\n-    {\n-        return job.getPopulationProgress();\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return getClass().getSimpleName() + \"[job:\" + job + \"]\";\n-    }\n-\n-    private abstract class PopulatingIndexUpdater implements IndexUpdater\n-    {\n-        @Override\n-        public void close()\n-        {\n-        }\n     }\n+  }\n }\n",
            "diff_size": 231
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2096/PopulatingIndexProxy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2096/PopulatingIndexProxy.java\nindex 27d772707ee..27820473c61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2096/PopulatingIndexProxy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2096/PopulatingIndexProxy.java\n@@ -60,7 +60,7 @@ public class PopulatingIndexProxy implements IndexProxy\n     {\n         switch ( mode )\n         {\n-            case ONLINE:\n+case ONLINE:\n             case RECOVERY:\n                 return new PopulatingIndexUpdater()\n                 {\n@@ -79,7 +79,7 @@ public class PopulatingIndexProxy implements IndexProxy\n                         throw new IllegalArgumentException( \"Unsupported update mode: \" + mode );\n                     }\n                 };\n-        }\n+    }\n     }\n \n     @Override\n@@ -204,4 +204,4 @@ public class PopulatingIndexProxy implements IndexProxy\n         {\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}