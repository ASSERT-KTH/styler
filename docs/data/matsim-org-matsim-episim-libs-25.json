{
    "project_name": "matsim-org-matsim-episim-libs",
    "error_id": "25",
    "information": {
        "errors": [
            {
                "line": "153",
                "column": "78",
                "severity": "error",
                "message": "Use a single space to separate non-whitespace characters.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
            }
        ]
    },
    "source_code": "\t\tString date = episimConfig.getStartDate().plusDays(iteration - 1).toString();\n\n\t\tInfectionReport report = new InfectionReport(\"total\", time,  date, iteration);\n\t\treports.put(\"total\", report);\n\n\t\tfor (EpisimPerson person : persons) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "153",
                    "column": "78",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "144",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "207",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "219",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "220",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "226",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "227",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "230",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "232",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "234",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "242",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "243",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "252",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "254",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "257",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "261",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "263",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "264",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "266",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "269",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "272",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "273",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "274",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "275",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "277",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "278",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "279",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "280",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "281",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "283",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "285",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "286",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "287",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "289",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "290",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "303",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "304",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "305",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "306",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "307",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "308",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "309",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "312",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "313",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "314",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "317",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "318",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "319",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "320",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "321",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "323",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "333",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "334",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "336",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "337",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "338",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "339",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "340",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "341",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "342",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "347",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "348",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "349",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "351",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "352",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "353",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "358",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "359",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "360",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "362",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "364",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "365",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "367",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "368",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "369",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "370",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "371",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "373",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "375",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "377",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "378",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "379",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "381",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "382",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "384",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "385",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "393",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "394",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "395",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "396",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "398",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "404",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "405",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "406",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "407",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "409",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "410",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "411",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "412",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "422",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "423",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "424",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "425",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "428",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "430",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "431",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "432",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "433",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "440",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "442",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "443",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "444",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "446",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "447",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "448",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "449",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "451",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "452",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "453",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "457",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "458",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "459",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "471",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "472",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "473",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "474",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "475",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "476",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "477",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "478",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "479",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "480",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "481",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "482",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "483",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "484",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "486",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "489",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "490",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "491",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "492",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "493",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "494",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "496",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "499",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "500",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "501",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "503",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "504",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "505",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "506",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "507",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "508",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "509",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "510",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "511",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "512",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "513",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "514",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/25/EpisimReporting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/25/EpisimReporting.java\nindex 0542e8b300e..5f941ce6fd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/25/EpisimReporting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/25/EpisimReporting.java\n@@ -18,6 +18,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  * #L%\n  */\n+\n package org.matsim.episim;\n \n import com.google.common.collect.Lists;\n@@ -57,423 +58,459 @@ import java.util.concurrent.atomic.AtomicInteger;\n  */\n public final class EpisimReporting implements BasicEventHandler, Closeable {\n \n-\tprivate static final Logger log = LogManager.getLogger(EpisimReporting.class);\n-\tprivate static final AtomicInteger specificInfectionsCnt = new AtomicInteger(300);\n-\n-\tprivate final EpisimWriter writer;\n-\tprivate final EventsManager manager;\n-\n-\t/**\n-\t * Base path for event files.\n-\t */\n-\tprivate final Path eventPath;\n-\tprivate final EpisimConfigGroup.WriteEvents writeEvents;\n-\n-\tprivate final BufferedWriter infectionReport;\n-\tprivate final BufferedWriter infectionEvents;\n-\tprivate final BufferedWriter restrictionReport;\n-\tprivate final BufferedWriter timeUse;\n-\n-\t/**\n-\t * Aggregated cumulative hospital cases by district.\n-\t */\n-\tprivate final MutableObjectIntMap<String> hospitalCases = new ObjectIntHashMap<>();\n-\n-\t/**\n-\t * Number format for logging output. Not static because not thread-safe.\n-\t */\n-\tprivate final NumberFormat decimalFormat = DecimalFormat.getInstance(Locale.GERMAN);\n-\tprivate final double sampleSize;\n-\tprivate final EpisimConfigGroup episimConfig;\n-\t/**\n-\t * Current day / iteration.\n-\t */\n-\tprivate int iteration;\n-\tprivate BufferedWriter events;\n-\n-\n-\t@Inject\n-\tEpisimReporting(Config config, EpisimWriter writer, EventsManager manager) {\n-\t\tString base;\n-\t\tString outDir = config.controler().getOutputDirectory();\n-\n-\t\t// file names depend on the run name\n-\t\tif (config.controler().getRunId() != null) {\n-\t\t\tbase = outDir + \"/\" + config.controler().getRunId() + \".\";\n-\t\t} else if (!outDir.endsWith(\"/\")) {\n-\t\t\tbase = outDir + \"/\";\n-\t\t} else\n-\t\t\tbase = outDir;\n-\n-\t\tepisimConfig = ConfigUtils.addOrGetModule(config, EpisimConfigGroup.class);\n-\n-\t\ttry {\n-\t\t\teventPath = Path.of(outDir, \"events\");\n-\t\t\tif (!Files.exists(eventPath))\n-\t\t\t\tFiles.createDirectories(eventPath);\n-\n-\t\t} catch (IOException e) {\n-\t\t\tlog.error(\"Could not create output directory\", e);\n-\t\t\tthrow new UncheckedIOException(e);\n-\t\t}\n-\n-\t\tthis.writer = writer;\n-\t\tthis.manager = manager;\n-\n-\t\tinfectionReport = EpisimWriter.prepare(base + \"infections.txt\", InfectionsWriterFields.class);\n-\t\tinfectionEvents = EpisimWriter.prepare(base + \"infectionEvents.txt\", InfectionEventsWriterFields.class);\n-\t\trestrictionReport = EpisimWriter.prepare(base + \"restrictions.txt\",\n-\t\t\t\t\"day\", \"\", episimConfig.createInitialRestrictions().keySet().toArray());\n-\t\ttimeUse = EpisimWriter.prepare(base + \"timeUse.txt\",\n-\t\t\t\t\"day\", \"\", episimConfig.createInitialRestrictions().keySet().toArray());\n-\n-\t\tsampleSize = episimConfig.getSampleSize();\n-\t\twriteEvents = episimConfig.getWriteEvents();\n-\n-\t\ttry {\n-\t\t\tFiles.writeString(Paths.get(base + \"policy.conf\"),\n-\t\t\t\t\tepisimConfig.getPolicy().root().render(ConfigRenderOptions.defaults()\n-\t\t\t\t\t\t\t.setOriginComments(false)\n-\t\t\t\t\t\t\t.setJson(false)));\n-\t\t} catch (IOException e) {\n-\t\t\tlog.error(\"Could not write policy config\", e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Creates infections reports for the day. Grouped by district, but always containing a \"total\" entry.\n-\t */\n-\tMap<String, InfectionReport> createReports(Collection<EpisimPerson> persons, int iteration) {\n-\n-\t\tMap<String, InfectionReport> reports = new LinkedHashMap<>();\n-\n-\t\tdouble time = EpisimUtils.getCorrectedTime(EpisimUtils.getStartOffset(episimConfig.getStartDate()), 0., iteration);\n-\t\tString date = episimConfig.getStartDate().plusDays(iteration - 1).toString();\n-\n-\t\tInfectionReport report = new InfectionReport(\"total\", time,  date, iteration);\n-\t\treports.put(\"total\", report);\n-\n-\t\tfor (EpisimPerson person : persons) {\n-\t\t\tString districtName = (String) person.getAttributes().getAttribute(\"district\");\n-\n-\t\t\t// Also aggregate by district\n-\t\t\tInfectionReport district = reports.computeIfAbsent(districtName == null ? \"unknown\"\n-\t\t\t\t\t: districtName, name -> new InfectionReport(name, report.time, report.date, report.day));\n-\t\t\tswitch (person.getDiseaseStatus()) {\n-\t\t\t\tcase susceptible:\n-\t\t\t\t\treport.nSusceptible++;\n-\t\t\t\t\tdistrict.nSusceptible++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase infectedButNotContagious:\n-\t\t\t\t\treport.nInfectedButNotContagious++;\n-\t\t\t\t\tdistrict.nInfectedButNotContagious++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase contagious:\n-\t\t\t\t\treport.nContagious++;\n-\t\t\t\t\tdistrict.nContagious++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase showingSymptoms:\n-\t\t\t\t\treport.nShowingSymptoms++;\n-\t\t\t\t\tdistrict.nShowingSymptoms++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase seriouslySick:\n-\t\t\t\t\treport.nSeriouslySick++;\n-\t\t\t\t\tdistrict.nSeriouslySick++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase critical:\n-\t\t\t\t\treport.nCritical++;\n-\t\t\t\t\tdistrict.nCritical++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase recovered:\n-\t\t\t\t\treport.nRecovered++;\n-\t\t\t\t\tdistrict.nRecovered++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + person.getDiseaseStatus());\n-\t\t\t}\n-\t\t\tswitch (person.getQuarantineStatus()) {\n-\t\t\t\t// For now there is no separation in the report between full and home\n-\t\t\t\tcase atHome:\n-\t\t\t\tcase full:\n-\t\t\t\t\treport.nInQuarantine++;\n-\t\t\t\t\tdistrict.nInQuarantine++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase no:\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + person.getQuarantineStatus());\n-\t\t\t}\n-\t\t}\n-\n-\t\t// aggregate hospital cases at last\n-\t\tlong nHospitalCumulative = 0;\n-\t\tfor (String district : reports.keySet()) {\n-\t\t\tnHospitalCumulative += hospitalCases.get(district);\n-\t\t\treports.get(district).nHospitalCumulative = hospitalCases.get(district);\n-\t\t}\n-\n-\t\treports.get(\"total\").nHospitalCumulative = nHospitalCumulative;\n-\n-\t\treports.forEach((k, v) -> v.scale(1 / sampleSize));\n-\n-\t\treturn reports;\n-\t}\n-\n-\t/**\n-\t * Writes the infection report to csv.\n-\t */\n-\tvoid reporting(Map<String, InfectionReport> reports, int iteration) {\n-\t\tif (iteration == 0) return;\n-\n-\t\tInfectionReport t = reports.get(\"total\");\n-\n-\t\tlog.warn(\"===============================\");\n-\t\tlog.warn(\"Beginning day {}\", iteration);\n-\t\tlog.warn(\"No of susceptible persons={} / {}%\", decimalFormat.format(t.nSusceptible), 100 * t.nSusceptible / t.nTotal());\n-\t\tlog.warn(\"No of infected persons={} / {}%\", decimalFormat.format(t.nTotalInfected), 100 * t.nTotalInfected / t.nTotal());\n-\t\tlog.warn(\"No of recovered persons={} / {}%\", decimalFormat.format(t.nRecovered), 100 * t.nRecovered / t.nTotal());\n-\t\tlog.warn(\"---\");\n-\t\tlog.warn(\"No of persons in quarantine={}\", decimalFormat.format(t.nInQuarantine));\n-\t\tlog.warn(\"100 persons={} agents\", sampleSize * 100);\n-\t\tlog.warn(\"===============================\");\n-\n-\t\t// Write all reports for each district\n-\t\tfor (InfectionReport r : reports.values()) {\n-\t\t\tif (r.name.equals(\"total\")) continue;\n-\n-\t\t\tString[] array = new String[InfectionsWriterFields.values().length];\n-\t\t\tarray[InfectionsWriterFields.time.ordinal()] = Double.toString(r.time);\n-\t\t\tarray[InfectionsWriterFields.day.ordinal()] = Long.toString(r.day);\n-\t\t\tarray[InfectionsWriterFields.date.ordinal()] = r.date;\n-\t\t\tarray[InfectionsWriterFields.nSusceptible.ordinal()] = Long.toString(r.nSusceptible);\n-\t\t\tarray[InfectionsWriterFields.nInfectedButNotContagious.ordinal()] = Long.toString(r.nInfectedButNotContagious);\n-\t\t\tarray[InfectionsWriterFields.nContagious.ordinal()] = Long.toString(r.nContagious);\n-\t\t\tarray[InfectionsWriterFields.nShowingSymptoms.ordinal()] = Long.toString(r.nShowingSymptoms);\n-\t\t\tarray[InfectionsWriterFields.nRecovered.ordinal()] = Long.toString(r.nRecovered);\n-\n-\t\t\tarray[InfectionsWriterFields.nTotalInfected.ordinal()] = Long.toString((r.nTotalInfected));\n-\t\t\tarray[InfectionsWriterFields.nInfectedCumulative.ordinal()] = Long.toString((r.nTotalInfected + r.nRecovered));\n-\t\t\tarray[InfectionsWriterFields.nHospitalCumulative.ordinal()] = Long.toString(r.nHospitalCumulative);\n-\n-\t\t\tarray[InfectionsWriterFields.nInQuarantine.ordinal()] = Long.toString(r.nInQuarantine);\n-\n-\t\t\tarray[InfectionsWriterFields.nSeriouslySick.ordinal()] = Long.toString(r.nSeriouslySick);\n-\t\t\tarray[InfectionsWriterFields.nCritical.ordinal()] = Long.toString(r.nCritical);\n-\t\t\tarray[InfectionsWriterFields.district.ordinal()] = r.name;\n-\n-\t\t\twriter.append(infectionReport, array);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Report the occurrence of an infection.\n-\t * @param personWrapper infected person\n-\t * @param infector infector\n-\t * @param infectionType activities of both persons\n-\t */\n-\tpublic void reportInfection(EpisimPerson personWrapper, EpisimPerson infector, double now, String infectionType) {\n-\n-\t\tint cnt = specificInfectionsCnt.getOpaque();\n-\t\t// This counter is used by many threads, for better performance we use very weak memory guarantees here\n-\t\t// race-conditions will occur, but the state will be eventually where we want it (threads stop logging)\n-\t\tif (cnt > 0) {\n-\t\t\tlog.warn(\"Infection of personId={} by person={} at/in {}\", personWrapper.getPersonId(), infector.getPersonId(), infectionType);\n-\t\t\tspecificInfectionsCnt.setOpaque(cnt - 1);\n-\t\t}\n-\n-\t\tmanager.processEvent(new EpisimInfectionEvent(now, personWrapper.getPersonId(), infector.getPersonId(),\n-\t\t\t\tpersonWrapper.getCurrentContainer().getContainerId(), infectionType));\n-\n-\n-\t\tString[] array = new String[InfectionEventsWriterFields.values().length];\n-\t\tarray[InfectionEventsWriterFields.time.ordinal()] = Double.toString(now);\n-\t\tarray[InfectionEventsWriterFields.infector.ordinal()] = infector.getPersonId().toString();\n-\t\tarray[InfectionEventsWriterFields.infected.ordinal()] = personWrapper.getPersonId().toString();\n-\t\tarray[InfectionEventsWriterFields.infectionType.ordinal()] = infectionType;\n-\n-\t\twriter.append(infectionEvents, array);\n-\t}\n-\n-\t/**\n-\t * Report the occurrence of an contact between two persons.\n-\t * TODO Attention: Currently this only includes a subset of contacts (between persons with certain disease status).\n-\t * @see EpisimContactEvent\n-\t */\n-\tpublic void reportContact(double now, EpisimPerson person, EpisimPerson contactPerson, EpisimContainer<?> container,\n-\t\t\t\t\t\t\t  StringBuilder actType, double duration) {\n-\n-\t\tif (writeEvents == EpisimConfigGroup.WriteEvents.tracing || writeEvents == EpisimConfigGroup.WriteEvents.all) {\n-\t\t\tmanager.processEvent(new EpisimContactEvent(now, person.getPersonId(), contactPerson.getPersonId(), container.getContainerId(),\n-\t\t\t\t\tactType.toString(), duration));\n-\t\t}\n-\n-\t}\n-\n-\tvoid reportRestrictions(Map<String, Restriction> restrictions, long iteration) {\n-\t\tif (iteration == 0) return;\n-\n-\t\twriter.append(restrictionReport, EpisimWriter.JOINER.join(iteration, \"\", restrictions.values().toArray()));\n-\t\twriter.append(restrictionReport, \"\\n\");\n-\t}\n-\n-\tvoid reportTimeUse(Set<String> activities, Collection<EpisimPerson> persons, long iteration) {\n-\n-\t\tif (iteration == 0) return;\n-\n-\t\tObjectDoubleHashMap<String> avg = new ObjectDoubleHashMap<>();\n-\n-\t\tint i = 1;\n-\t\tfor (EpisimPerson person : persons) {\n-\n-\t\t\t// computing incremental avg.\n-\t\t\t// Average += (NewValue - Average) / NewSampleCount;\n-\t\t\tfor (String act : activities) {\n-\t\t\t\tavg.addToValue(act, (person.getSpentTime().get(act) - avg.get(act)) / i);\n-\t\t\t}\n-\n-\t\t\tperson.getSpentTime().clear();\n-\t\t\ti++;\n-\t\t}\n-\n-\t\tList<String> order = Lists.newArrayList(activities);\n-\t\tObject[] array = new String[order.size()];\n-\t\tArrays.fill(array, \"\");\n-\n-\t\t// report minutes\n-\t\tavg.forEachKeyValue((k, v) -> array[order.indexOf(k)] = String.valueOf(v / 60d));\n-\n-\t\twriter.append(timeUse, EpisimWriter.JOINER.join(iteration, \"\", array));\n-\t\twriter.append(timeUse, \"\\n\");\n-\t}\n-\n-\t/**\n-\t * Report that a person status has changed and publish corresponding event.\n-\t */\n-\tpublic void reportPersonStatus(EpisimPerson person, EpisimPersonStatusEvent event) {\n-\n-\t\tif (event.getDiseaseStatus() == EpisimPerson.DiseaseStatus.seriouslySick) {\n-\t\t\tString districtName = (String) person.getAttributes().getAttribute(\"district\");\n-\t\t\thospitalCases.addToValue(districtName == null ? \"unknown\" : districtName, 1);\n-\t\t}\n-\n-\t\tmanager.processEvent(event);\n-\t}\n-\n-\t@Override\n-\tpublic void close() {\n-\n-\t\tif (events != null) {\n-\t\t\twriter.append(events, \"</events>\");\n-\t\t\twriter.close(events);\n-\t\t}\n-\n-\t\twriter.close(infectionReport);\n-\t\twriter.close(infectionEvents);\n-\t\twriter.close(restrictionReport);\n-\t\twriter.close(timeUse);\n-\n-\t}\n-\n-\t/**\n-\t * This method may ever only do event writing, as it can be disabled via config.\n-\t */\n-\t@Override\n-\tpublic void handleEvent(Event event) {\n-\n-\t\t// Events on 0th day are not needed\n-\t\tif (iteration == 0) return;\n-\n-\t\t// Crucial episim events are always written\n-\t\t// other only if enabled\n-\n-\t\tif (event instanceof EpisimPersonStatusEvent || event instanceof EpisimInfectionEvent || writeEvents == EpisimConfigGroup.WriteEvents.all)\n-\t\t\twriter.append(events, event);\n-\n-\t}\n-\n-\t@Override\n-\tpublic void reset(int iteration) {\n-\n-\t\tthis.iteration = iteration;\n-\n-\t\tif (iteration == 0 ||writeEvents == EpisimConfigGroup.WriteEvents.none) return;\n-\n-\t\tif (events != null) {\n-\t\t\twriter.append(events, \"</events>\");\n-\t\t\twriter.close(events);\n-\t\t}\n-\n-\t\tevents = IOUtils.getBufferedWriter(eventPath.resolve(String.format(\"day_%03d.xml.gz\", iteration)).toString());\n-\t\twriter.append(events, \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<events version=\\\"1.0\\\">\\n\");\n-\t}\n-\n-\tenum InfectionsWriterFields {\n-\t\ttime, day, date, nSusceptible, nInfectedButNotContagious, nContagious, nShowingSymptoms, nSeriouslySick, nCritical, nTotalInfected, nInfectedCumulative,\n-\t\tnHospitalCumulative, nRecovered, nInQuarantine, district\n-\t}\n-\n-\tenum InfectionEventsWriterFields {time, infector, infected, infectionType}\n-\n-\t/**\n-\t * Detailed infection report for the end of a day.\n-\t * Although the fields are mutable, do not change them outside this class.\n-\t */\n-\t@SuppressWarnings(\"VisibilityModifier\")\n-\tpublic static class InfectionReport {\n-\n-\t\tpublic final String name;\n-\t\tpublic final double time;\n-\t\tpublic final String date;\n-\t\tpublic final long day;\n-\t\tpublic long nSusceptible = 0;\n-\t\tpublic long nInfectedButNotContagious = 0;\n-\t\tpublic long nContagious = 0;\n-\t\tpublic long nShowingSymptoms = 0;\n-\t\tpublic long nSeriouslySick = 0;\n-\t\tpublic long nCritical = 0;\n-\t\tpublic long nTotalInfected = 0;\n-\t\tpublic long nHospitalCumulative = 0;\n-\t\tpublic long nRecovered = 0;\n-\t\tpublic long nInQuarantine = 0;\n-\n-\t\t/**\n-\t\t * Constructor.\n-\t\t */\n-\t\tpublic InfectionReport(String name, double time, String date, long day) {\n-\t\t\tthis.name = name;\n-\t\t\tthis.time = time;\n-\t\t\tthis.date = date;\n-\t\t\tthis.day = day;\n-\t\t}\n-\n-\t\t/**\n-\t\t * Total number of persons in the simulation.\n-\t\t */\n-\t\tpublic long nTotal() {\n-\t\t\treturn nSusceptible + nTotalInfected + nRecovered;\n-\t\t}\n-\n-\t\tvoid scale(double factor) {\n-\t\t\tnSusceptible *= factor;\n-\t\t\tnInfectedButNotContagious *= factor;\n-\t\t\tnContagious *= factor;\n-\t\t\tnShowingSymptoms *= factor;\n-\t\t\tnSeriouslySick *= factor;\n-\t\t\tnCritical *= factor;\n-\t\t\tnTotalInfected *= factor;\n-\t\t\tnHospitalCumulative *= factor;\n-\t\t\tnRecovered *= factor;\n-\t\t\tnInQuarantine *= factor;\n-\t\t}\n-\t}\n+  private static final Logger log = LogManager.getLogger(EpisimReporting.class);\n+  private static final AtomicInteger specificInfectionsCnt = new AtomicInteger(300);\n+\n+  private final EpisimWriter writer;\n+  private final EventsManager manager;\n+\n+  /**\n+   * Base path for event files.\n+   */\n+  private final Path eventPath;\n+  private final EpisimConfigGroup.WriteEvents writeEvents;\n+\n+  private final BufferedWriter infectionReport;\n+  private final BufferedWriter infectionEvents;\n+  private final BufferedWriter restrictionReport;\n+  private final BufferedWriter timeUse;\n+\n+  /**\n+   * Aggregated cumulative hospital cases by district.\n+   */\n+  private final MutableObjectIntMap<String> hospitalCases = new ObjectIntHashMap<>();\n+\n+  /**\n+   * Number format for logging output. Not static because not thread-safe.\n+   */\n+  private final NumberFormat decimalFormat = DecimalFormat.getInstance(Locale.GERMAN);\n+  private final double sampleSize;\n+  private final EpisimConfigGroup episimConfig;\n+  /**\n+   * Current day / iteration.\n+   */\n+  private int iteration;\n+  private BufferedWriter events;\n+\n+\n+  @Inject\n+  EpisimReporting(Config config, EpisimWriter writer, EventsManager manager) {\n+    String base;\n+    String outDir = config.controler().getOutputDirectory();\n+\n+    // file names depend on the run name\n+    if (config.controler().getRunId() != null) {\n+      base = outDir + \"/\" + config.controler().getRunId() + \".\";\n+    } else if (!outDir.endsWith(\"/\")) {\n+      base = outDir + \"/\";\n+    } else {\n+      base = outDir;\n+    }\n+\n+    episimConfig = ConfigUtils.addOrGetModule(config, EpisimConfigGroup.class);\n+\n+    try {\n+      eventPath = Path.of(outDir, \"events\");\n+      if (!Files.exists(eventPath)) {\n+        Files.createDirectories(eventPath);\n+      }\n+\n+    } catch (IOException e) {\n+      log.error(\"Could not create output directory\", e);\n+      throw new UncheckedIOException(e);\n+    }\n+\n+    this.writer = writer;\n+    this.manager = manager;\n+\n+    infectionReport = EpisimWriter.prepare(base + \"infections.txt\", InfectionsWriterFields.class);\n+    infectionEvents =\n+        EpisimWriter.prepare(base + \"infectionEvents.txt\", InfectionEventsWriterFields.class);\n+    restrictionReport = EpisimWriter.prepare(base + \"restrictions.txt\",\n+        \"day\", \"\", episimConfig.createInitialRestrictions().keySet().toArray());\n+    timeUse = EpisimWriter.prepare(base + \"timeUse.txt\",\n+        \"day\", \"\", episimConfig.createInitialRestrictions().keySet().toArray());\n+\n+    sampleSize = episimConfig.getSampleSize();\n+    writeEvents = episimConfig.getWriteEvents();\n+\n+    try {\n+      Files.writeString(Paths.get(base + \"policy.conf\"),\n+          episimConfig.getPolicy().root().render(ConfigRenderOptions.defaults()\n+              .setOriginComments(false)\n+              .setJson(false)));\n+    } catch (IOException e) {\n+      log.error(\"Could not write policy config\", e);\n+    }\n+  }\n+\n+  /**\n+   * Creates infections reports for the day. Grouped by district, but always containing a \"total\" entry.\n+   */\n+  Map<String, InfectionReport> createReports(Collection<EpisimPerson> persons, int iteration) {\n+\n+    Map<String, InfectionReport> reports = new LinkedHashMap<>();\n+\n+    double time = EpisimUtils\n+        .getCorrectedTime(EpisimUtils.getStartOffset(episimConfig.getStartDate()), 0., iteration);\n+    String date = episimConfig.getStartDate().plusDays(iteration - 1).toString();\n+\n+    InfectionReport report = new InfectionReport(\"total\", time, date, iteration);\n+    reports.put(\"total\", report);\n+\n+    for (EpisimPerson person : persons) {\n+      String districtName = (String) person.getAttributes().getAttribute(\"district\");\n+\n+      // Also aggregate by district\n+      InfectionReport district = reports.computeIfAbsent(districtName == null ? \"unknown\"\n+          : districtName, name -> new InfectionReport(name, report.time, report.date, report.day));\n+      switch (person.getDiseaseStatus()) {\n+        case susceptible:\n+          report.nSusceptible++;\n+          district.nSusceptible++;\n+          break;\n+        case infectedButNotContagious:\n+          report.nInfectedButNotContagious++;\n+          district.nInfectedButNotContagious++;\n+          report.nTotalInfected++;\n+          district.nTotalInfected++;\n+          break;\n+        case contagious:\n+          report.nContagious++;\n+          district.nContagious++;\n+          report.nTotalInfected++;\n+          district.nTotalInfected++;\n+          break;\n+        case showingSymptoms:\n+          report.nShowingSymptoms++;\n+          district.nShowingSymptoms++;\n+          report.nTotalInfected++;\n+          district.nTotalInfected++;\n+          break;\n+        case seriouslySick:\n+          report.nSeriouslySick++;\n+          district.nSeriouslySick++;\n+          report.nTotalInfected++;\n+          district.nTotalInfected++;\n+          break;\n+        case critical:\n+          report.nCritical++;\n+          district.nCritical++;\n+          report.nTotalInfected++;\n+          district.nTotalInfected++;\n+          break;\n+        case recovered:\n+          report.nRecovered++;\n+          district.nRecovered++;\n+          break;\n+        default:\n+          throw new IllegalStateException(\"Unexpected value: \" + person.getDiseaseStatus());\n+      }\n+      switch (person.getQuarantineStatus()) {\n+        // For now there is no separation in the report between full and home\n+        case atHome:\n+        case full:\n+          report.nInQuarantine++;\n+          district.nInQuarantine++;\n+          break;\n+        case no:\n+          break;\n+        default:\n+          throw new IllegalStateException(\"Unexpected value: \" + person.getQuarantineStatus());\n+      }\n+    }\n+\n+    // aggregate hospital cases at last\n+    long nHospitalCumulative = 0;\n+    for (String district : reports.keySet()) {\n+      nHospitalCumulative += hospitalCases.get(district);\n+      reports.get(district).nHospitalCumulative = hospitalCases.get(district);\n+    }\n+\n+    reports.get(\"total\").nHospitalCumulative = nHospitalCumulative;\n+\n+    reports.forEach((k, v) -> v.scale(1 / sampleSize));\n+\n+    return reports;\n+  }\n+\n+  /**\n+   * Writes the infection report to csv.\n+   */\n+  void reporting(Map<String, InfectionReport> reports, int iteration) {\n+    if (iteration == 0) {\n+      return;\n+    }\n+\n+    InfectionReport t = reports.get(\"total\");\n+\n+    log.warn(\"===============================\");\n+    log.warn(\"Beginning day {}\", iteration);\n+    log.warn(\"No of susceptible persons={} / {}%\", decimalFormat.format(t.nSusceptible),\n+        100 * t.nSusceptible / t.nTotal());\n+    log.warn(\"No of infected persons={} / {}%\", decimalFormat.format(t.nTotalInfected),\n+        100 * t.nTotalInfected / t.nTotal());\n+    log.warn(\"No of recovered persons={} / {}%\", decimalFormat.format(t.nRecovered),\n+        100 * t.nRecovered / t.nTotal());\n+    log.warn(\"---\");\n+    log.warn(\"No of persons in quarantine={}\", decimalFormat.format(t.nInQuarantine));\n+    log.warn(\"100 persons={} agents\", sampleSize * 100);\n+    log.warn(\"===============================\");\n+\n+    // Write all reports for each district\n+    for (InfectionReport r : reports.values()) {\n+      if (r.name.equals(\"total\")) {\n+        continue;\n+      }\n+\n+      String[] array = new String[InfectionsWriterFields.values().length];\n+      array[InfectionsWriterFields.time.ordinal()] = Double.toString(r.time);\n+      array[InfectionsWriterFields.day.ordinal()] = Long.toString(r.day);\n+      array[InfectionsWriterFields.date.ordinal()] = r.date;\n+      array[InfectionsWriterFields.nSusceptible.ordinal()] = Long.toString(r.nSusceptible);\n+      array[InfectionsWriterFields.nInfectedButNotContagious.ordinal()] =\n+          Long.toString(r.nInfectedButNotContagious);\n+      array[InfectionsWriterFields.nContagious.ordinal()] = Long.toString(r.nContagious);\n+      array[InfectionsWriterFields.nShowingSymptoms.ordinal()] = Long.toString(r.nShowingSymptoms);\n+      array[InfectionsWriterFields.nRecovered.ordinal()] = Long.toString(r.nRecovered);\n+\n+      array[InfectionsWriterFields.nTotalInfected.ordinal()] = Long.toString((r.nTotalInfected));\n+      array[InfectionsWriterFields.nInfectedCumulative.ordinal()] =\n+          Long.toString((r.nTotalInfected + r.nRecovered));\n+      array[InfectionsWriterFields.nHospitalCumulative.ordinal()] =\n+          Long.toString(r.nHospitalCumulative);\n+\n+      array[InfectionsWriterFields.nInQuarantine.ordinal()] = Long.toString(r.nInQuarantine);\n+\n+      array[InfectionsWriterFields.nSeriouslySick.ordinal()] = Long.toString(r.nSeriouslySick);\n+      array[InfectionsWriterFields.nCritical.ordinal()] = Long.toString(r.nCritical);\n+      array[InfectionsWriterFields.district.ordinal()] = r.name;\n+\n+      writer.append(infectionReport, array);\n+    }\n+  }\n+\n+  /**\n+   * Report the occurrence of an infection.\n+   *\n+   * @param personWrapper infected person\n+   * @param infector      infector\n+   * @param infectionType activities of both persons\n+   */\n+  public void reportInfection(EpisimPerson personWrapper, EpisimPerson infector, double now,\n+                              String infectionType) {\n+\n+    int cnt = specificInfectionsCnt.getOpaque();\n+    // This counter is used by many threads, for better performance we use very weak memory guarantees here\n+    // race-conditions will occur, but the state will be eventually where we want it (threads stop logging)\n+    if (cnt > 0) {\n+      log.warn(\"Infection of personId={} by person={} at/in {}\", personWrapper.getPersonId(),\n+          infector.getPersonId(), infectionType);\n+      specificInfectionsCnt.setOpaque(cnt - 1);\n+    }\n+\n+    manager.processEvent(\n+        new EpisimInfectionEvent(now, personWrapper.getPersonId(), infector.getPersonId(),\n+            personWrapper.getCurrentContainer().getContainerId(), infectionType));\n+\n+\n+    String[] array = new String[InfectionEventsWriterFields.values().length];\n+    array[InfectionEventsWriterFields.time.ordinal()] = Double.toString(now);\n+    array[InfectionEventsWriterFields.infector.ordinal()] = infector.getPersonId().toString();\n+    array[InfectionEventsWriterFields.infected.ordinal()] = personWrapper.getPersonId().toString();\n+    array[InfectionEventsWriterFields.infectionType.ordinal()] = infectionType;\n+\n+    writer.append(infectionEvents, array);\n+  }\n+\n+  /**\n+   * Report the occurrence of an contact between two persons.\n+   * TODO Attention: Currently this only includes a subset of contacts (between persons with certain disease status).\n+   *\n+   * @see EpisimContactEvent\n+   */\n+  public void reportContact(double now, EpisimPerson person, EpisimPerson contactPerson,\n+                            EpisimContainer<?> container,\n+                            StringBuilder actType, double duration) {\n+\n+    if (writeEvents == EpisimConfigGroup.WriteEvents.tracing ||\n+        writeEvents == EpisimConfigGroup.WriteEvents.all) {\n+      manager.processEvent(\n+          new EpisimContactEvent(now, person.getPersonId(), contactPerson.getPersonId(),\n+              container.getContainerId(),\n+              actType.toString(), duration));\n+    }\n+\n+  }\n+\n+  void reportRestrictions(Map<String, Restriction> restrictions, long iteration) {\n+    if (iteration == 0) {\n+      return;\n+    }\n+\n+    writer.append(restrictionReport,\n+        EpisimWriter.JOINER.join(iteration, \"\", restrictions.values().toArray()));\n+    writer.append(restrictionReport, \"\\n\");\n+  }\n+\n+  void reportTimeUse(Set<String> activities, Collection<EpisimPerson> persons, long iteration) {\n+\n+    if (iteration == 0) {\n+      return;\n+    }\n+\n+    ObjectDoubleHashMap<String> avg = new ObjectDoubleHashMap<>();\n+\n+    int i = 1;\n+    for (EpisimPerson person : persons) {\n+\n+      // computing incremental avg.\n+      // Average += (NewValue - Average) / NewSampleCount;\n+      for (String act : activities) {\n+        avg.addToValue(act, (person.getSpentTime().get(act) - avg.get(act)) / i);\n+      }\n+\n+      person.getSpentTime().clear();\n+      i++;\n+    }\n+\n+    List<String> order = Lists.newArrayList(activities);\n+    Object[] array = new String[order.size()];\n+    Arrays.fill(array, \"\");\n+\n+    // report minutes\n+    avg.forEachKeyValue((k, v) -> array[order.indexOf(k)] = String.valueOf(v / 60d));\n+\n+    writer.append(timeUse, EpisimWriter.JOINER.join(iteration, \"\", array));\n+    writer.append(timeUse, \"\\n\");\n+  }\n+\n+  /**\n+   * Report that a person status has changed and publish corresponding event.\n+   */\n+  public void reportPersonStatus(EpisimPerson person, EpisimPersonStatusEvent event) {\n+\n+    if (event.getDiseaseStatus() == EpisimPerson.DiseaseStatus.seriouslySick) {\n+      String districtName = (String) person.getAttributes().getAttribute(\"district\");\n+      hospitalCases.addToValue(districtName == null ? \"unknown\" : districtName, 1);\n+    }\n+\n+    manager.processEvent(event);\n+  }\n+\n+  @Override\n+  public void close() {\n+\n+    if (events != null) {\n+      writer.append(events, \"</events>\");\n+      writer.close(events);\n+    }\n+\n+    writer.close(infectionReport);\n+    writer.close(infectionEvents);\n+    writer.close(restrictionReport);\n+    writer.close(timeUse);\n+\n+  }\n+\n+  /**\n+   * This method may ever only do event writing, as it can be disabled via config.\n+   */\n+  @Override\n+  public void handleEvent(Event event) {\n+\n+    // Events on 0th day are not needed\n+    if (iteration == 0) {\n+      return;\n+    }\n+\n+    // Crucial episim events are always written\n+    // other only if enabled\n+\n+    if (event instanceof EpisimPersonStatusEvent || event instanceof EpisimInfectionEvent ||\n+        writeEvents == EpisimConfigGroup.WriteEvents.all) {\n+      writer.append(events, event);\n+    }\n+\n+  }\n+\n+  @Override\n+  public void reset(int iteration) {\n+\n+    this.iteration = iteration;\n+\n+    if (iteration == 0 || writeEvents == EpisimConfigGroup.WriteEvents.none) {\n+      return;\n+    }\n+\n+    if (events != null) {\n+      writer.append(events, \"</events>\");\n+      writer.close(events);\n+    }\n+\n+    events = IOUtils.getBufferedWriter(\n+        eventPath.resolve(String.format(\"day_%03d.xml.gz\", iteration)).toString());\n+    writer.append(events, \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<events version=\\\"1.0\\\">\\n\");\n+  }\n+\n+  enum InfectionsWriterFields {\n+    time, day, date, nSusceptible, nInfectedButNotContagious, nContagious, nShowingSymptoms,\n+    nSeriouslySick, nCritical, nTotalInfected, nInfectedCumulative,\n+    nHospitalCumulative, nRecovered, nInQuarantine, district\n+  }\n+\n+  enum InfectionEventsWriterFields {time, infector, infected, infectionType}\n+\n+  /**\n+   * Detailed infection report for the end of a day.\n+   * Although the fields are mutable, do not change them outside this class.\n+   */\n+  @SuppressWarnings(\"VisibilityModifier\")\n+  public static class InfectionReport {\n+\n+    public final String name;\n+    public final double time;\n+    public final String date;\n+    public final long day;\n+    public long nSusceptible = 0;\n+    public long nInfectedButNotContagious = 0;\n+    public long nContagious = 0;\n+    public long nShowingSymptoms = 0;\n+    public long nSeriouslySick = 0;\n+    public long nCritical = 0;\n+    public long nTotalInfected = 0;\n+    public long nHospitalCumulative = 0;\n+    public long nRecovered = 0;\n+    public long nInQuarantine = 0;\n+\n+    /**\n+     * Constructor.\n+     */\n+    public InfectionReport(String name, double time, String date, long day) {\n+      this.name = name;\n+      this.time = time;\n+      this.date = date;\n+      this.day = day;\n+    }\n+\n+    /**\n+     * Total number of persons in the simulation.\n+     */\n+    public long nTotal() {\n+      return nSusceptible + nTotalInfected + nRecovered;\n+    }\n+\n+    void scale(double factor) {\n+      nSusceptible *= factor;\n+      nInfectedButNotContagious *= factor;\n+      nContagious *= factor;\n+      nShowingSymptoms *= factor;\n+      nSeriouslySick *= factor;\n+      nCritical *= factor;\n+      nTotalInfected *= factor;\n+      nHospitalCumulative *= factor;\n+      nRecovered *= factor;\n+      nInQuarantine *= factor;\n+    }\n+  }\n }\n",
            "diff_size": 456
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/25/EpisimReporting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/25/EpisimReporting.java\nindex 0542e8b300e..dbccd652c9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/25/EpisimReporting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/25/EpisimReporting.java\n@@ -150,7 +150,7 @@ public final class EpisimReporting implements BasicEventHandler, Closeable {\n \t\tdouble time = EpisimUtils.getCorrectedTime(EpisimUtils.getStartOffset(episimConfig.getStartDate()), 0., iteration);\n \t\tString date = episimConfig.getStartDate().plusDays(iteration - 1).toString();\n \n-\t\tInfectionReport report = new InfectionReport(\"total\", time,  date, iteration);\n+\t\tInfectionReport report = new InfectionReport(\"total\", time, date, iteration);\n \t\treports.put(\"total\", report);\n \n \t\tfor (EpisimPerson person : persons) {\n@@ -309,13 +309,11 @@ public final class EpisimReporting implements BasicEventHandler, Closeable {\n \t * TODO Attention: Currently this only includes a subset of contacts (between persons with certain disease status).\n \t * @see EpisimContactEvent\n \t */\n-\tpublic void reportContact(double now, EpisimPerson person, EpisimPerson contactPerson, EpisimContainer<?> container,\n-\t\t\t\t\t\t\t  StringBuilder actType, double duration) {\n-\n-\t\tif (writeEvents == EpisimConfigGroup.WriteEvents.tracing || writeEvents == EpisimConfigGroup.WriteEvents.all) {\n+\tpublic void reportContact(double now, EpisimPerson person, EpisimPerson contactPerson, EpisimContainer<?> container, StringBuilder actType, double duration) {\n+\tif (writeEvents == EpisimConfigGroup.WriteEvents.tracing || writeEvents == EpisimConfigGroup.WriteEvents.all) {\n \t\t\tmanager.processEvent(new EpisimContactEvent(now, person.getPersonId(), contactPerson.getPersonId(), container.getContainerId(),\n \t\t\t\t\tactType.toString(), duration));\n-\t\t}\n+\t}\n \n \t}\n \n@@ -418,8 +416,7 @@ public final class EpisimReporting implements BasicEventHandler, Closeable {\n \t}\n \n \tenum InfectionsWriterFields {\n-\t\ttime, day, date, nSusceptible, nInfectedButNotContagious, nContagious, nShowingSymptoms, nSeriouslySick, nCritical, nTotalInfected, nInfectedCumulative,\n-\t\tnHospitalCumulative, nRecovered, nInQuarantine, district\n+\t\ttime, day, date, nSusceptible, nInfectedButNotContagious, nContagious, nShowingSymptoms, nSeriouslySick, nCritical, nTotalInfected, nInfectedCumulative, nHospitalCumulative, nRecovered, nInQuarantine, district\n \t}\n \n \tenum InfectionEventsWriterFields {time, infector, infected, infectionType}\n@@ -476,4 +473,4 @@ public final class EpisimReporting implements BasicEventHandler, Closeable {\n \t\t\tnInQuarantine *= factor;\n \t\t}\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "166",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "167",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "198",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "199",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "328",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/25/EpisimReporting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/25/EpisimReporting.java\nindex 0542e8b300e..5cc529b0ff4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/25/EpisimReporting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/25/EpisimReporting.java\n@@ -39,7 +39,6 @@ import org.matsim.episim.events.EpisimInfectionEvent;\n import org.matsim.episim.events.EpisimPersonStatusEvent;\n import org.matsim.episim.policy.Restriction;\n import org.matsim.episim.reporting.EpisimWriter;\n-\n import java.io.BufferedWriter;\n import java.io.Closeable;\n import java.io.IOException;\n@@ -55,425 +54,436 @@ import java.util.concurrent.atomic.AtomicInteger;\n /**\n  * Reporting and persisting of metrics, like number of infected people etc.\n  */\n+\n+\n public final class EpisimReporting implements BasicEventHandler, Closeable {\n \n-\tprivate static final Logger log = LogManager.getLogger(EpisimReporting.class);\n-\tprivate static final AtomicInteger specificInfectionsCnt = new AtomicInteger(300);\n-\n-\tprivate final EpisimWriter writer;\n-\tprivate final EventsManager manager;\n-\n-\t/**\n-\t * Base path for event files.\n-\t */\n-\tprivate final Path eventPath;\n-\tprivate final EpisimConfigGroup.WriteEvents writeEvents;\n-\n-\tprivate final BufferedWriter infectionReport;\n-\tprivate final BufferedWriter infectionEvents;\n-\tprivate final BufferedWriter restrictionReport;\n-\tprivate final BufferedWriter timeUse;\n-\n-\t/**\n-\t * Aggregated cumulative hospital cases by district.\n-\t */\n-\tprivate final MutableObjectIntMap<String> hospitalCases = new ObjectIntHashMap<>();\n-\n-\t/**\n-\t * Number format for logging output. Not static because not thread-safe.\n-\t */\n-\tprivate final NumberFormat decimalFormat = DecimalFormat.getInstance(Locale.GERMAN);\n-\tprivate final double sampleSize;\n-\tprivate final EpisimConfigGroup episimConfig;\n-\t/**\n-\t * Current day / iteration.\n-\t */\n-\tprivate int iteration;\n-\tprivate BufferedWriter events;\n-\n-\n-\t@Inject\n-\tEpisimReporting(Config config, EpisimWriter writer, EventsManager manager) {\n-\t\tString base;\n-\t\tString outDir = config.controler().getOutputDirectory();\n-\n-\t\t// file names depend on the run name\n-\t\tif (config.controler().getRunId() != null) {\n-\t\t\tbase = outDir + \"/\" + config.controler().getRunId() + \".\";\n-\t\t} else if (!outDir.endsWith(\"/\")) {\n-\t\t\tbase = outDir + \"/\";\n-\t\t} else\n-\t\t\tbase = outDir;\n-\n-\t\tepisimConfig = ConfigUtils.addOrGetModule(config, EpisimConfigGroup.class);\n-\n-\t\ttry {\n-\t\t\teventPath = Path.of(outDir, \"events\");\n-\t\t\tif (!Files.exists(eventPath))\n-\t\t\t\tFiles.createDirectories(eventPath);\n-\n-\t\t} catch (IOException e) {\n-\t\t\tlog.error(\"Could not create output directory\", e);\n-\t\t\tthrow new UncheckedIOException(e);\n-\t\t}\n-\n-\t\tthis.writer = writer;\n-\t\tthis.manager = manager;\n-\n-\t\tinfectionReport = EpisimWriter.prepare(base + \"infections.txt\", InfectionsWriterFields.class);\n-\t\tinfectionEvents = EpisimWriter.prepare(base + \"infectionEvents.txt\", InfectionEventsWriterFields.class);\n-\t\trestrictionReport = EpisimWriter.prepare(base + \"restrictions.txt\",\n-\t\t\t\t\"day\", \"\", episimConfig.createInitialRestrictions().keySet().toArray());\n-\t\ttimeUse = EpisimWriter.prepare(base + \"timeUse.txt\",\n-\t\t\t\t\"day\", \"\", episimConfig.createInitialRestrictions().keySet().toArray());\n-\n-\t\tsampleSize = episimConfig.getSampleSize();\n-\t\twriteEvents = episimConfig.getWriteEvents();\n-\n-\t\ttry {\n-\t\t\tFiles.writeString(Paths.get(base + \"policy.conf\"),\n-\t\t\t\t\tepisimConfig.getPolicy().root().render(ConfigRenderOptions.defaults()\n-\t\t\t\t\t\t\t.setOriginComments(false)\n-\t\t\t\t\t\t\t.setJson(false)));\n-\t\t} catch (IOException e) {\n-\t\t\tlog.error(\"Could not write policy config\", e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Creates infections reports for the day. Grouped by district, but always containing a \"total\" entry.\n-\t */\n-\tMap<String, InfectionReport> createReports(Collection<EpisimPerson> persons, int iteration) {\n-\n-\t\tMap<String, InfectionReport> reports = new LinkedHashMap<>();\n-\n-\t\tdouble time = EpisimUtils.getCorrectedTime(EpisimUtils.getStartOffset(episimConfig.getStartDate()), 0., iteration);\n-\t\tString date = episimConfig.getStartDate().plusDays(iteration - 1).toString();\n-\n-\t\tInfectionReport report = new InfectionReport(\"total\", time,  date, iteration);\n-\t\treports.put(\"total\", report);\n-\n-\t\tfor (EpisimPerson person : persons) {\n-\t\t\tString districtName = (String) person.getAttributes().getAttribute(\"district\");\n-\n-\t\t\t// Also aggregate by district\n-\t\t\tInfectionReport district = reports.computeIfAbsent(districtName == null ? \"unknown\"\n-\t\t\t\t\t: districtName, name -> new InfectionReport(name, report.time, report.date, report.day));\n-\t\t\tswitch (person.getDiseaseStatus()) {\n-\t\t\t\tcase susceptible:\n-\t\t\t\t\treport.nSusceptible++;\n-\t\t\t\t\tdistrict.nSusceptible++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase infectedButNotContagious:\n-\t\t\t\t\treport.nInfectedButNotContagious++;\n-\t\t\t\t\tdistrict.nInfectedButNotContagious++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase contagious:\n-\t\t\t\t\treport.nContagious++;\n-\t\t\t\t\tdistrict.nContagious++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase showingSymptoms:\n-\t\t\t\t\treport.nShowingSymptoms++;\n-\t\t\t\t\tdistrict.nShowingSymptoms++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase seriouslySick:\n-\t\t\t\t\treport.nSeriouslySick++;\n-\t\t\t\t\tdistrict.nSeriouslySick++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase critical:\n-\t\t\t\t\treport.nCritical++;\n-\t\t\t\t\tdistrict.nCritical++;\n-\t\t\t\t\treport.nTotalInfected++;\n-\t\t\t\t\tdistrict.nTotalInfected++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase recovered:\n-\t\t\t\t\treport.nRecovered++;\n-\t\t\t\t\tdistrict.nRecovered++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + person.getDiseaseStatus());\n-\t\t\t}\n-\t\t\tswitch (person.getQuarantineStatus()) {\n-\t\t\t\t// For now there is no separation in the report between full and home\n-\t\t\t\tcase atHome:\n-\t\t\t\tcase full:\n-\t\t\t\t\treport.nInQuarantine++;\n-\t\t\t\t\tdistrict.nInQuarantine++;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase no:\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + person.getQuarantineStatus());\n-\t\t\t}\n-\t\t}\n-\n-\t\t// aggregate hospital cases at last\n-\t\tlong nHospitalCumulative = 0;\n-\t\tfor (String district : reports.keySet()) {\n-\t\t\tnHospitalCumulative += hospitalCases.get(district);\n-\t\t\treports.get(district).nHospitalCumulative = hospitalCases.get(district);\n-\t\t}\n-\n-\t\treports.get(\"total\").nHospitalCumulative = nHospitalCumulative;\n-\n-\t\treports.forEach((k, v) -> v.scale(1 / sampleSize));\n-\n-\t\treturn reports;\n-\t}\n-\n-\t/**\n-\t * Writes the infection report to csv.\n-\t */\n-\tvoid reporting(Map<String, InfectionReport> reports, int iteration) {\n-\t\tif (iteration == 0) return;\n-\n-\t\tInfectionReport t = reports.get(\"total\");\n-\n-\t\tlog.warn(\"===============================\");\n-\t\tlog.warn(\"Beginning day {}\", iteration);\n-\t\tlog.warn(\"No of susceptible persons={} / {}%\", decimalFormat.format(t.nSusceptible), 100 * t.nSusceptible / t.nTotal());\n-\t\tlog.warn(\"No of infected persons={} / {}%\", decimalFormat.format(t.nTotalInfected), 100 * t.nTotalInfected / t.nTotal());\n-\t\tlog.warn(\"No of recovered persons={} / {}%\", decimalFormat.format(t.nRecovered), 100 * t.nRecovered / t.nTotal());\n-\t\tlog.warn(\"---\");\n-\t\tlog.warn(\"No of persons in quarantine={}\", decimalFormat.format(t.nInQuarantine));\n-\t\tlog.warn(\"100 persons={} agents\", sampleSize * 100);\n-\t\tlog.warn(\"===============================\");\n-\n-\t\t// Write all reports for each district\n-\t\tfor (InfectionReport r : reports.values()) {\n-\t\t\tif (r.name.equals(\"total\")) continue;\n-\n-\t\t\tString[] array = new String[InfectionsWriterFields.values().length];\n-\t\t\tarray[InfectionsWriterFields.time.ordinal()] = Double.toString(r.time);\n-\t\t\tarray[InfectionsWriterFields.day.ordinal()] = Long.toString(r.day);\n-\t\t\tarray[InfectionsWriterFields.date.ordinal()] = r.date;\n-\t\t\tarray[InfectionsWriterFields.nSusceptible.ordinal()] = Long.toString(r.nSusceptible);\n-\t\t\tarray[InfectionsWriterFields.nInfectedButNotContagious.ordinal()] = Long.toString(r.nInfectedButNotContagious);\n-\t\t\tarray[InfectionsWriterFields.nContagious.ordinal()] = Long.toString(r.nContagious);\n-\t\t\tarray[InfectionsWriterFields.nShowingSymptoms.ordinal()] = Long.toString(r.nShowingSymptoms);\n-\t\t\tarray[InfectionsWriterFields.nRecovered.ordinal()] = Long.toString(r.nRecovered);\n-\n-\t\t\tarray[InfectionsWriterFields.nTotalInfected.ordinal()] = Long.toString((r.nTotalInfected));\n-\t\t\tarray[InfectionsWriterFields.nInfectedCumulative.ordinal()] = Long.toString((r.nTotalInfected + r.nRecovered));\n-\t\t\tarray[InfectionsWriterFields.nHospitalCumulative.ordinal()] = Long.toString(r.nHospitalCumulative);\n-\n-\t\t\tarray[InfectionsWriterFields.nInQuarantine.ordinal()] = Long.toString(r.nInQuarantine);\n-\n-\t\t\tarray[InfectionsWriterFields.nSeriouslySick.ordinal()] = Long.toString(r.nSeriouslySick);\n-\t\t\tarray[InfectionsWriterFields.nCritical.ordinal()] = Long.toString(r.nCritical);\n-\t\t\tarray[InfectionsWriterFields.district.ordinal()] = r.name;\n-\n-\t\t\twriter.append(infectionReport, array);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Report the occurrence of an infection.\n-\t * @param personWrapper infected person\n-\t * @param infector infector\n-\t * @param infectionType activities of both persons\n-\t */\n-\tpublic void reportInfection(EpisimPerson personWrapper, EpisimPerson infector, double now, String infectionType) {\n-\n-\t\tint cnt = specificInfectionsCnt.getOpaque();\n-\t\t// This counter is used by many threads, for better performance we use very weak memory guarantees here\n-\t\t// race-conditions will occur, but the state will be eventually where we want it (threads stop logging)\n-\t\tif (cnt > 0) {\n-\t\t\tlog.warn(\"Infection of personId={} by person={} at/in {}\", personWrapper.getPersonId(), infector.getPersonId(), infectionType);\n-\t\t\tspecificInfectionsCnt.setOpaque(cnt - 1);\n-\t\t}\n-\n-\t\tmanager.processEvent(new EpisimInfectionEvent(now, personWrapper.getPersonId(), infector.getPersonId(),\n-\t\t\t\tpersonWrapper.getCurrentContainer().getContainerId(), infectionType));\n-\n-\n-\t\tString[] array = new String[InfectionEventsWriterFields.values().length];\n-\t\tarray[InfectionEventsWriterFields.time.ordinal()] = Double.toString(now);\n-\t\tarray[InfectionEventsWriterFields.infector.ordinal()] = infector.getPersonId().toString();\n-\t\tarray[InfectionEventsWriterFields.infected.ordinal()] = personWrapper.getPersonId().toString();\n-\t\tarray[InfectionEventsWriterFields.infectionType.ordinal()] = infectionType;\n-\n-\t\twriter.append(infectionEvents, array);\n-\t}\n-\n-\t/**\n-\t * Report the occurrence of an contact between two persons.\n-\t * TODO Attention: Currently this only includes a subset of contacts (between persons with certain disease status).\n-\t * @see EpisimContactEvent\n-\t */\n-\tpublic void reportContact(double now, EpisimPerson person, EpisimPerson contactPerson, EpisimContainer<?> container,\n-\t\t\t\t\t\t\t  StringBuilder actType, double duration) {\n-\n-\t\tif (writeEvents == EpisimConfigGroup.WriteEvents.tracing || writeEvents == EpisimConfigGroup.WriteEvents.all) {\n-\t\t\tmanager.processEvent(new EpisimContactEvent(now, person.getPersonId(), contactPerson.getPersonId(), container.getContainerId(),\n-\t\t\t\t\tactType.toString(), duration));\n-\t\t}\n+ private static final Logger log = LogManager.getLogger(EpisimReporting.class);\n+ private static final AtomicInteger specificInfectionsCnt = new AtomicInteger(300);\n+ private final EpisimWriter writer;\n+ private final EventsManager manager;\n+\n+ /**\n+  * Base path for event files.\n+  */\n+ private final Path eventPath;\n+ private final EpisimConfigGroup.WriteEvents writeEvents;\n+ private final BufferedWriter infectionReport;\n+ private final BufferedWriter infectionEvents;\n+ private final BufferedWriter restrictionReport;\n+ private final BufferedWriter timeUse;\n+\n+ /**\n+  * Aggregated cumulative hospital cases by district.\n+  */\n+ private final MutableObjectIntMap<String> hospitalCases = new ObjectIntHashMap<>();\n+\n+ /**\n+  * Number format for logging output. Not static because not thread-safe.\n+  */\n+ private final NumberFormat decimalFormat = DecimalFormat.getInstance(Locale.GERMAN);\n+ private final double sampleSize;\n+ private final EpisimConfigGroup episimConfig;\n+ /**\n+  * Current day / iteration.\n+  */\n+ private int iteration;\n+ private BufferedWriter events;\n+\n+ @Inject\n+ EpisimReporting(Config config, EpisimWriter writer, EventsManager manager) {\n+  String base;\n+  String outDir = config.controler().getOutputDirectory();\n+\n+  // file names depend on the run name\n+  if (config.controler().getRunId() != null) {\n+   base = outDir + \"/\" + config.controler().getRunId() + \".\";\n+  } else if ( !outDir.endsWith(\"/\")) {\n+   base = outDir + \"/\";\n+  } else base = outDir;\n+  episimConfig = ConfigUtils.addOrGetModule(config, EpisimConfigGroup.class);\n+  try {\n+   eventPath = Path.of(outDir, \"events\");\n+   if (!Files.exists(eventPath))\n+    Files.createDirectories(eventPath);\n+  } catch (IOException e) {\n+   log.error(\"Could not create output directory\", e);\n+   throw new UncheckedIOException(e);\n+  }\n+\n+  this.writer = writer;\n+  this.manager = manager;\n+  infectionReport = EpisimWriter.prepare(base + \"infections.txt\", InfectionsWriterFields.class);\n+  infectionEvents = EpisimWriter.prepare(base + \"infectionEvents.txt\", InfectionEventsWriterFields.class);\n+  restrictionReport = EpisimWriter.prepare(base + \"restrictions.txt\", \"day\", \"\", episimConfig.createInitialRestrictions().keySet()\n+                                                                                                                         .toArray());\n+  timeUse = EpisimWriter.prepare(base + \"timeUse.txt\", \"day\", \"\", episimConfig.createInitialRestrictions().keySet()\n+                                                                                                          .toArray());\n+  sampleSize = episimConfig.getSampleSize();\n+  writeEvents = episimConfig.getWriteEvents();\n+  try {\n+   Files.writeString(Paths.get(base + \"policy.conf\"),\n+    episimConfig.getPolicy().root()\n+                            .render(ConfigRenderOptions.defaults().setOriginComments(false)\n+                                                                  .setJson(false)));\n+  } catch (IOException e) {\n+   log.error(\"Could not write policy config\", e);\n+  }\n+ }\n+\n+ /**\n+  * Creates infections reports for the day. Grouped by district, but always containing a \"total\" entry.\n+  */\n+\n+ Map<String, InfectionReport> createReports(Collection<EpisimPerson> persons, int iteration) {\n+  Map<String, InfectionReport> reports = new LinkedHashMap<>();\n+  double time = EpisimUtils.getCorrectedTime(EpisimUtils.getStartOffset(episimConfig.getStartDate()), 0., iteration);\n+  String date = episimConfig.getStartDate().plusDays(iteration - 1)\n+                                           .toString();\n+  InfectionReport report = new InfectionReport(\"total\", time, date, iteration);\n+  reports.put(\"total\", report);\n+\n+  for (EpisimPerson person : persons) {\n+   String districtName = (String) person.getAttributes().getAttribute(\"district\");\n+\n+   // Also aggregate by district\n+   InfectionReport district = reports.computeIfAbsent(districtName == null ? \"unknown\" : districtName, name -> new InfectionReport(name, report.time, report.date, report.day));\n+   switch (person.getDiseaseStatus()) {\n+    case susceptible:\n+     report.nSusceptible++;\n+     district.nSusceptible++;\n+     break;\n+    case infectedButNotContagious:\n+     report.nInfectedButNotContagious++;\n+     district.nInfectedButNotContagious++;\n+     report.nTotalInfected++;\n+     district.nTotalInfected++;\n+     break;\n+    case contagious:\n+     report.nContagious++;\n+     district.nContagious++;\n+     report.nTotalInfected++;\n+     district.nTotalInfected++;\n+     break;\n+    case showingSymptoms:\n+     report.nShowingSymptoms++;\n+     district.nShowingSymptoms++;\n+     report.nTotalInfected++;\n+     district.nTotalInfected++;\n+     break;\n+    case seriouslySick:\n+     report.nSeriouslySick++;\n+     district.nSeriouslySick++;\n+     report.nTotalInfected++;\n+     district.nTotalInfected++;\n+     break;\n+    case critical:\n+     report.nCritical++;\n+     district.nCritical++;\n+     report.nTotalInfected++;\n+     district.nTotalInfected++;\n+     break;\n+    case recovered:\n+     report.nRecovered++;\n+     district.nRecovered++;\n+     break;\n+    default:\n+     throw new IllegalStateException(\"Unexpected value: \" + person.getDiseaseStatus());\n+   }\n+\n+   switch (person.getQuarantineStatus()) {\n+    // For now there is no separation in the report between full and home\n+    case atHome:\n+    case full:\n+     report.nInQuarantine++;\n+     district.nInQuarantine++;\n+     break;\n+    case no:\n+     break;\n+    default:\n+     throw new IllegalStateException(\"Unexpected value: \" + person.getQuarantineStatus());\n+   }\n+  }\n+\n+  // aggregate hospital cases at last\n+\n+  long nHospitalCumulative = 0;\n+  for (String district : reports.keySet()) {\n+   nHospitalCumulative += hospitalCases.get(district);\n+   reports.get(district).nHospitalCumulative = hospitalCases.get(district);\n+  }\n+\n+  reports.get(\"total\").nHospitalCumulative = nHospitalCumulative;\n+  reports.forEach((k, v) -> v.scale(1 / sampleSize));\n+  return reports;\n+ }\n+\n+ /**\n+  * Writes the infection report to csv.\n+  */\n+\n+ void reporting(Map<String, InfectionReport> reports, int iteration) {\n+\n+  if (iteration == 0)\n+   return;\n+\n+  InfectionReport t = reports.get(\"total\");\n+  log.warn(\"===============================\");\n+  log.warn(\"Beginning day {}\", iteration);\n+  log.warn(\"No of susceptible persons={} / {}%\", decimalFormat.format(t.nSusceptible), 100 * t.nSusceptible / t.nTotal());\n+  log.warn(\"No of infected persons={} / {}%\", decimalFormat.format(t.nTotalInfected), 100 * t.nTotalInfected / t.nTotal());\n+  log.warn(\"No of recovered persons={} / {}%\", decimalFormat.format(t.nRecovered), 100 * t.nRecovered / t.nTotal());\n+  log.warn(\"---\");\n+  log.warn(\"No of persons in quarantine={}\", decimalFormat.format(t.nInQuarantine));\n+  log.warn(\"100 persons={} agents\", sampleSize * 100);\n+  log.warn(\"===============================\");\n+\n+  // Write all reports for each district\n+\n+  for (InfectionReport r : reports.values()) {\n+\n+   if (r.name.equals(\"total\")) continue;\n+\n+   String[] array = new String[InfectionsWriterFields.values().length];\n+   array[InfectionsWriterFields.time.ordinal()] = Double.toString(r.time);\n+   array[InfectionsWriterFields.day.ordinal()] = Long.toString(r.day);\n+   array[InfectionsWriterFields.date.ordinal()] = r.date;\n+   array[InfectionsWriterFields.nSusceptible.ordinal()] = Long.toString(r.nSusceptible);\n+   array[InfectionsWriterFields.nInfectedButNotContagious.ordinal()] = Long.toString(r.nInfectedButNotContagious);\n+   array[InfectionsWriterFields.nContagious.ordinal()] = Long.toString(r.nContagious);\n+   array[InfectionsWriterFields.nShowingSymptoms.ordinal()] = Long.toString(r.nShowingSymptoms);\n+   array[InfectionsWriterFields.nRecovered.ordinal()] = Long.toString(r.nRecovered);\n+   array[InfectionsWriterFields.nTotalInfected.ordinal()] = Long.toString((r.nTotalInfected));\n+   array[InfectionsWriterFields.nInfectedCumulative.ordinal()] = Long.toString((r.nTotalInfected + r.nRecovered));\n+   array[InfectionsWriterFields.nHospitalCumulative.ordinal()] = Long.toString(r.nHospitalCumulative);\n+   array[InfectionsWriterFields.nInQuarantine.ordinal()] = Long.toString(r.nInQuarantine);\n+   array[InfectionsWriterFields.nSeriouslySick.ordinal()] = Long.toString(r.nSeriouslySick);\n+   array[InfectionsWriterFields.nCritical.ordinal()] = Long.toString(r.nCritical);\n+   array[InfectionsWriterFields.district.ordinal()] = r.name;\n+   writer.append(infectionReport, array);\n+  }\n+ }\n+\n+ /**\n+  * Report the occurrence of an infection.\n+  * @param personWrapper infected person\n+  * @param infector infector\n+  * @param infectionType activities of both persons\n+  */\n+\n+\n+ public void reportInfection(EpisimPerson personWrapper, EpisimPerson infector, double now, String infectionType) {\n+  int cnt = specificInfectionsCnt.getOpaque();\n+  // This counter is used by many threads, for better performance we use very weak memory guarantees here\n+  // race-conditions will occur, but the state will be eventually where we want it (threads stop logging)\n+  if (cnt > 0) {\n+   log.warn(\"Infection of personId={} by person={} at/in {}\", personWrapper.getPersonId(), infector.getPersonId(), infectionType);\n+   specificInfectionsCnt.setOpaque(cnt - 1);\n+  }\n+\n+  manager.processEvent(new EpisimInfectionEvent(now, personWrapper.getPersonId(), infector.getPersonId(), personWrapper.getCurrentContainer().getContainerId(), infectionType));\n+\n+  String[] array = new String[InfectionEventsWriterFields.values().length];\n+  array[InfectionEventsWriterFields.time.ordinal()] = Double.toString(now);\n+  array[InfectionEventsWriterFields.infector.ordinal()] = infector.getPersonId().toString();\n+  array[InfectionEventsWriterFields.infected.ordinal()] = personWrapper.getPersonId().toString();\n+  array[InfectionEventsWriterFields.infectionType.ordinal()] = infectionType;\n+  writer.append(infectionEvents, array);\n+ }\n+\n+ /**\n+  * Report the occurrence of an contact between two persons.\n+  * TODO Attention: Currently this only includes a subset of contacts (between persons with certain disease status).\n+  * @see EpisimContactEvent\n+  */\n+\n+\n+ public void reportContact(double now, EpisimPerson person, EpisimPerson contactPerson, EpisimContainer<?> container, StringBuilder actType, double duration) {\n+\n+  if (writeEvents == EpisimConfigGroup.WriteEvents.tracing || writeEvents == EpisimConfigGroup.WriteEvents.all) {\n+   manager.processEvent(new EpisimContactEvent(now, person.getPersonId(), contactPerson.getPersonId(), container.getContainerId(), actType.toString(), duration));\n+  }\n+ }\n+\n+ void reportRestrictions(Map<String, Restriction> restrictions, long iteration) {\n+\n+  if (iteration == 0)\n+   return;\n+  writer.append(restrictionReport, EpisimWriter.JOINER.join(iteration, \"\", restrictions.values().toArray()));\n+  writer.append(restrictionReport, \"\\n\");\n+ }\n+\n+ void reportTimeUse(Set<String> activities, Collection<EpisimPerson> persons, long iteration) {\n+\n+  if (iteration == 0)\n+   return;\n+\n+  ObjectDoubleHashMap<String> avg = new ObjectDoubleHashMap<>();\n+  int i = 1;\n+  for (EpisimPerson person : persons) {\n+\n+   // computing incremental avg.\n+   // Average += (NewValue - Average) / NewSampleCount;\n+   for (String act : activities) {\n+    avg.addToValue(act, (person.getSpentTime().get(act) - avg.get(act)) / i);\n+   }\n+\n+   person.getSpentTime().clear();\n+   i++;\n+  }\n+\n+  List<String> order = Lists.newArrayList(activities);\n+  Object[] array = new String[order.size()];\n+  Arrays.fill(array, \"\");\n+\n+  // report minutes\n+  avg.forEachKeyValue((k, v) -> array[order.indexOf(k)] = String.valueOf(v / 60d));\n+  writer.append(timeUse, EpisimWriter.JOINER.join(iteration, \"\", array));\n+  writer.append(timeUse, \"\\n\");\n+ }\n+\n+ /**\n+  * Report that a person status has changed and publish corresponding event.\n+  */\n+\n+\n+ public void reportPersonStatus(EpisimPerson person, EpisimPersonStatusEvent event) {\n+\n+  if (event.getDiseaseStatus() == EpisimPerson.DiseaseStatus.seriouslySick) {\n+   String districtName = (String) person.getAttributes().getAttribute(\"district\");\n+   hospitalCases.addToValue(districtName == null ? \"unknown\" : districtName, 1);\n+  }\n+\n+  manager.processEvent(event);\n+ }\n+\n+ @Override\n+ public void close() {\n+\n+  if (events != null) {\n+   writer.append(events, \"</events>\");\n+   writer.close(events);\n+  }\n+\n+  writer.close(infectionReport);\n+  writer.close(infectionEvents);\n+  writer.close(restrictionReport);\n+  writer.close(timeUse);\n+ }\n+\n+ /**\n+  * This method may ever only do event writing, as it can be disabled via config.\n+  */\n+\n+ @Override\n+ public void handleEvent(Event event) {\n+\n+  // Events on 0th day are not needed\n+\n+  if (iteration == 0)\n+   return;\n+\n+  // Crucial episim events are always written\n+  // other only if enabled\n+  if (event instanceof EpisimPersonStatusEvent || event instanceof EpisimInfectionEvent || writeEvents == EpisimConfigGroup.WriteEvents.all)\n+   writer.append(events, event);\n+ }\n+\n+ @Override\n+ public void reset(int iteration) {\n+  this.iteration = iteration;\n+  if (iteration == 0 || writeEvents == EpisimConfigGroup.WriteEvents.none)\n+   return;\n+  if (events != null) {\n+   writer.append(events, \"</events>\");\n+   writer.close(events);\n+  }\n+\n+  events = IOUtils.getBufferedWriter(eventPath.resolve(String.format(\"day_%03d.xml.gz\", iteration)).toString());\n+  writer.append(events, \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<events version=\\\"1.0\\\">\\n\");\n+ }\n+\n+ enum InfectionsWriterFields {time, day, date, nSusceptible, nInfectedButNotContagious, nContagious, nShowingSymptoms, nSeriouslySick, nCritical, nTotalInfected, nInfectedCumulative, nHospitalCumulative, nRecovered, nInQuarantine, district}\n+\n+ enum InfectionEventsWriterFields {\n+\n+  time,\n+\n+  infector,\n+\n+  infected,\n+\n+  infectionType\n+ }\n+\n+ /**\n+  * Detailed infection report for the end of a day.\n+  * Although the fields are mutable, do not change them outside this class.\n+  */\n+\n+ @SuppressWarnings(\"VisibilityModifier\")\n+ public static class InfectionReport {\n+\n+  public final String name;\n+\n+  public final double time;\n+\n+  public final String date;\n+\n+  public final long day;\n+\n+  public long nSusceptible = 0;\n+\n+  public long nInfectedButNotContagious = 0;\n+\n+  public long nContagious = 0;\n+\n+  public long nShowingSymptoms = 0;\n+\n+  public long nSeriouslySick = 0;\n+\n+  public long nCritical = 0;\n+\n+  public long nTotalInfected = 0;\n+\n+  public long nHospitalCumulative = 0;\n+\n+  public long nRecovered = 0;\n+\n+  public long nInQuarantine = 0;\n+\n+  /**\n+   * Constructor.\n+   */\n+\n+\n+  public InfectionReport(String name, double time, String date, long day) {\n+   this.name = name;\n+   this.time = time;\n+   this.date = date;\n+   this.day = day;\n+  }\n \n-\t}\n+  /**\n+   * Total number of persons in the simulation.\n+   */\n \n-\tvoid reportRestrictions(Map<String, Restriction> restrictions, long iteration) {\n-\t\tif (iteration == 0) return;\n \n-\t\twriter.append(restrictionReport, EpisimWriter.JOINER.join(iteration, \"\", restrictions.values().toArray()));\n-\t\twriter.append(restrictionReport, \"\\n\");\n-\t}\n+  public long nTotal() {\n+   return nSusceptible + nTotalInfected + nRecovered;\n+  }\n \n-\tvoid reportTimeUse(Set<String> activities, Collection<EpisimPerson> persons, long iteration) {\n-\n-\t\tif (iteration == 0) return;\n-\n-\t\tObjectDoubleHashMap<String> avg = new ObjectDoubleHashMap<>();\n-\n-\t\tint i = 1;\n-\t\tfor (EpisimPerson person : persons) {\n-\n-\t\t\t// computing incremental avg.\n-\t\t\t// Average += (NewValue - Average) / NewSampleCount;\n-\t\t\tfor (String act : activities) {\n-\t\t\t\tavg.addToValue(act, (person.getSpentTime().get(act) - avg.get(act)) / i);\n-\t\t\t}\n-\n-\t\t\tperson.getSpentTime().clear();\n-\t\t\ti++;\n-\t\t}\n-\n-\t\tList<String> order = Lists.newArrayList(activities);\n-\t\tObject[] array = new String[order.size()];\n-\t\tArrays.fill(array, \"\");\n-\n-\t\t// report minutes\n-\t\tavg.forEachKeyValue((k, v) -> array[order.indexOf(k)] = String.valueOf(v / 60d));\n-\n-\t\twriter.append(timeUse, EpisimWriter.JOINER.join(iteration, \"\", array));\n-\t\twriter.append(timeUse, \"\\n\");\n-\t}\n-\n-\t/**\n-\t * Report that a person status has changed and publish corresponding event.\n-\t */\n-\tpublic void reportPersonStatus(EpisimPerson person, EpisimPersonStatusEvent event) {\n-\n-\t\tif (event.getDiseaseStatus() == EpisimPerson.DiseaseStatus.seriouslySick) {\n-\t\t\tString districtName = (String) person.getAttributes().getAttribute(\"district\");\n-\t\t\thospitalCases.addToValue(districtName == null ? \"unknown\" : districtName, 1);\n-\t\t}\n-\n-\t\tmanager.processEvent(event);\n-\t}\n-\n-\t@Override\n-\tpublic void close() {\n-\n-\t\tif (events != null) {\n-\t\t\twriter.append(events, \"</events>\");\n-\t\t\twriter.close(events);\n-\t\t}\n-\n-\t\twriter.close(infectionReport);\n-\t\twriter.close(infectionEvents);\n-\t\twriter.close(restrictionReport);\n-\t\twriter.close(timeUse);\n-\n-\t}\n-\n-\t/**\n-\t * This method may ever only do event writing, as it can be disabled via config.\n-\t */\n-\t@Override\n-\tpublic void handleEvent(Event event) {\n-\n-\t\t// Events on 0th day are not needed\n-\t\tif (iteration == 0) return;\n-\n-\t\t// Crucial episim events are always written\n-\t\t// other only if enabled\n-\n-\t\tif (event instanceof EpisimPersonStatusEvent || event instanceof EpisimInfectionEvent || writeEvents == EpisimConfigGroup.WriteEvents.all)\n-\t\t\twriter.append(events, event);\n-\n-\t}\n-\n-\t@Override\n-\tpublic void reset(int iteration) {\n-\n-\t\tthis.iteration = iteration;\n-\n-\t\tif (iteration == 0 ||writeEvents == EpisimConfigGroup.WriteEvents.none) return;\n-\n-\t\tif (events != null) {\n-\t\t\twriter.append(events, \"</events>\");\n-\t\t\twriter.close(events);\n-\t\t}\n-\n-\t\tevents = IOUtils.getBufferedWriter(eventPath.resolve(String.format(\"day_%03d.xml.gz\", iteration)).toString());\n-\t\twriter.append(events, \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<events version=\\\"1.0\\\">\\n\");\n-\t}\n-\n-\tenum InfectionsWriterFields {\n-\t\ttime, day, date, nSusceptible, nInfectedButNotContagious, nContagious, nShowingSymptoms, nSeriouslySick, nCritical, nTotalInfected, nInfectedCumulative,\n-\t\tnHospitalCumulative, nRecovered, nInQuarantine, district\n-\t}\n-\n-\tenum InfectionEventsWriterFields {time, infector, infected, infectionType}\n-\n-\t/**\n-\t * Detailed infection report for the end of a day.\n-\t * Although the fields are mutable, do not change them outside this class.\n-\t */\n-\t@SuppressWarnings(\"VisibilityModifier\")\n-\tpublic static class InfectionReport {\n-\n-\t\tpublic final String name;\n-\t\tpublic final double time;\n-\t\tpublic final String date;\n-\t\tpublic final long day;\n-\t\tpublic long nSusceptible = 0;\n-\t\tpublic long nInfectedButNotContagious = 0;\n-\t\tpublic long nContagious = 0;\n-\t\tpublic long nShowingSymptoms = 0;\n-\t\tpublic long nSeriouslySick = 0;\n-\t\tpublic long nCritical = 0;\n-\t\tpublic long nTotalInfected = 0;\n-\t\tpublic long nHospitalCumulative = 0;\n-\t\tpublic long nRecovered = 0;\n-\t\tpublic long nInQuarantine = 0;\n-\n-\t\t/**\n-\t\t * Constructor.\n-\t\t */\n-\t\tpublic InfectionReport(String name, double time, String date, long day) {\n-\t\t\tthis.name = name;\n-\t\t\tthis.time = time;\n-\t\t\tthis.date = date;\n-\t\t\tthis.day = day;\n-\t\t}\n-\n-\t\t/**\n-\t\t * Total number of persons in the simulation.\n-\t\t */\n-\t\tpublic long nTotal() {\n-\t\t\treturn nSusceptible + nTotalInfected + nRecovered;\n-\t\t}\n-\n-\t\tvoid scale(double factor) {\n-\t\t\tnSusceptible *= factor;\n-\t\t\tnInfectedButNotContagious *= factor;\n-\t\t\tnContagious *= factor;\n-\t\t\tnShowingSymptoms *= factor;\n-\t\t\tnSeriouslySick *= factor;\n-\t\t\tnCritical *= factor;\n-\t\t\tnTotalInfected *= factor;\n-\t\t\tnHospitalCumulative *= factor;\n-\t\t\tnRecovered *= factor;\n-\t\t\tnInQuarantine *= factor;\n-\t\t}\n-\t}\n-}\n+  void scale(double factor) {\n+   nSusceptible *= factor;\n+   nInfectedButNotContagious *= factor;\n+   nContagious *= factor;\n+   nShowingSymptoms *= factor;\n+   nSeriouslySick *= factor;\n+   nCritical *= factor;\n+   nTotalInfected *= factor;\n+   nHospitalCumulative *= factor;\n+   nRecovered *= factor;\n+   nInQuarantine *= factor;\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 567
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "153",
                    "column": "78",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "153",
                    "column": "78",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}