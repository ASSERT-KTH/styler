{
    "project_name": "neo4j-neo4j",
    "error_id": "1765",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "78",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1765/CheckpointFile.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1765/CheckpointFile.java\nindex 6223133a2de..fe9c7bb84b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1765/CheckpointFile.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1765/CheckpointFile.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.files.checkpoint;\n \n import java.io.IOException;\n@@ -36,18 +37,21 @@ public interface CheckpointFile extends Lifecycle, RotatableFile\n {\n     /**\n      * Last available checkpoint\n+     *\n      * @return last checkpoint\n      */\n     Optional<CheckpointInfo> findLatestCheckpoint() throws IOException;\n \n     /**\n      * List of all reachable checkpoints from earliest to latest available\n+     *\n      * @return list of checkpoints, empty list if not reachable checkpoints are available\n      */\n     List<CheckpointInfo> reachableCheckpoints() throws IOException;\n \n     /**\n      * List of all reachable checkpoints in separate checkpoint files from earliest to latest available\n+     *\n      * @return list of checkpoints, empty list if not reachable checkpoints are available in the separate files\n      */\n     List<CheckpointInfo> getReachableDetachedCheckpoints() throws IOException;\n@@ -71,7 +75,7 @@ public interface CheckpointFile extends Lifecycle, RotatableFile\n      * @param logVersion version of the checkpoint file to get\n      * @return checkpoint file of the requested version\n      */\n-    Path getDetachedCheckpointFileForVersion( long logVersion );\n+    Path getDetachedCheckpointFileForVersion(long logVersion);\n \n     /**\n      * @return set of files that are used to store checkpoints.\n@@ -88,5 +92,5 @@ public interface CheckpointFile extends Lifecycle, RotatableFile\n      * @param checkpointLogFile checkpoint log file\n      * @return Version of the provided checkpoint file\n      */\n-    long getDetachedCheckpointLogFileVersion( Path checkpointLogFile );\n+    long getDetachedCheckpointLogFileVersion(Path checkpointLogFile);\n }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}