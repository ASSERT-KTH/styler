{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "88",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\n    @NotBlank(message = \"Value is required\")\n    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n    private String value;\n\n    @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/88/ChangeConfigurationParams.java\nindex 7ca48b1ed1a..873ca9c1b27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/88/ChangeConfigurationParams.java\n@@ -27,7 +27,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n \n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/88/ChangeConfigurationParams.java\nindex 7ca48b1ed1a..f3dcee3b14d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/88/ChangeConfigurationParams.java\n@@ -19,65 +19,66 @@ import javax.validation.constraints.Pattern;\n @Setter\n public class ChangeConfigurationParams extends MultipleChargePointSelect {\n \n-    private String confKey;\n+  private String confKey;\n \n-    private String customConfKey;\n+  private String customConfKey;\n \n-    @NotNull(message = \"Key type is required\")\n-    private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n+  @NotNull(message = \"Key type is required\")\n+  private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n-    @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n-    private String value;\n+  @NotBlank(message = \"Value is required\")\n+  @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n+  private String value;\n \n-    @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n-    public boolean isValidCustom() {\n-        if (keyType == ConfigurationKeyType.CUSTOM) {\n-            return !Strings.isNullOrEmpty(customConfKey);\n-        } else {\n-            return true;\n-        }\n+  @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n+  public boolean isValidCustom() {\n+    if (keyType == ConfigurationKeyType.CUSTOM) {\n+      return !Strings.isNullOrEmpty(customConfKey);\n+    } else {\n+      return true;\n     }\n-\n-    @AssertTrue(message = \"Configuration Key is required\")\n-    public boolean isValidPredefined() {\n-        if (keyType == ConfigurationKeyType.PREDEFINED) {\n-            return confKey != null;\n-        } else {\n-            return true;\n-        }\n+  }\n+\n+  @AssertTrue(message = \"Configuration Key is required\")\n+  public boolean isValidPredefined() {\n+    if (keyType == ConfigurationKeyType.PREDEFINED) {\n+      return confKey != null;\n+    } else {\n+      return true;\n     }\n+  }\n \n-    public String getKey() {\n-        if (keyType == ConfigurationKeyType.PREDEFINED) {\n-            return confKey;\n-        } else if (keyType == ConfigurationKeyType.CUSTOM) {\n-            return customConfKey;\n-        }\n-\n-        // This should not happen\n-        throw new SteveException(\"Cannot determine key (KeyType in illegal state)\");\n+  public String getKey() {\n+    if (keyType == ConfigurationKeyType.PREDEFINED) {\n+      return confKey;\n+    } else if (keyType == ConfigurationKeyType.CUSTOM) {\n+      return customConfKey;\n     }\n \n-    // -------------------------------------------------------------------------\n-    // Enum\n-    // -------------------------------------------------------------------------\n+    // This should not happen\n+    throw new SteveException(\"Cannot determine key (KeyType in illegal state)\");\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // Enum\n+  // -------------------------------------------------------------------------\n \n-    @RequiredArgsConstructor\n-    private enum ConfigurationKeyType {\n-        PREDEFINED(\"Predefined\"),\n-        CUSTOM(\"Custom\");\n+  @RequiredArgsConstructor\n+  private enum ConfigurationKeyType {\n+    PREDEFINED(\"Predefined\"),\n+    CUSTOM(\"Custom\");\n \n-        @Getter private final String value;\n+    @Getter\n+    private final String value;\n \n-        public static ConfigurationKeyType fromValue(String v) {\n-            for (ConfigurationKeyType c: ConfigurationKeyType.values()) {\n-                if (c.value.equals(v)) {\n-                    return c;\n-                }\n-            }\n-            throw new IllegalArgumentException(v);\n+    public static ConfigurationKeyType fromValue(String v) {\n+      for (ConfigurationKeyType c : ConfigurationKeyType.values()) {\n+        if (c.value.equals(v)) {\n+          return c;\n         }\n+      }\n+      throw new IllegalArgumentException(v);\n     }\n+  }\n \n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/88/ChangeConfigurationParams.java\nindex 7ca48b1ed1a..872dd947fd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/88/ChangeConfigurationParams.java\n@@ -27,10 +27,10 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n-    private String value;\n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n+private String value;\n \n-    @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n+@AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n     public boolean isValidCustom() {\n         if (keyType == ConfigurationKeyType.CUSTOM) {\n             return !Strings.isNullOrEmpty(customConfKey);\n@@ -80,4 +80,4 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/88/ChangeConfigurationParams.java\nindex 7ca48b1ed1a..5d6d6b3bf6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/88/ChangeConfigurationParams.java\n@@ -6,7 +6,6 @@ import lombok.Getter;\n import lombok.RequiredArgsConstructor;\n import lombok.Setter;\n import org.hibernate.validator.constraints.NotBlank;\n-\n import javax.validation.constraints.AssertTrue;\n import javax.validation.constraints.NotNull;\n import javax.validation.constraints.Pattern;\n@@ -15,21 +14,18 @@ import javax.validation.constraints.Pattern;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 08.03.2018\n  */\n+\n+\n @Getter\n @Setter\n public class ChangeConfigurationParams extends MultipleChargePointSelect {\n-\n     private String confKey;\n-\n     private String customConfKey;\n-\n     @NotNull(message = \"Key type is required\")\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n-\n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n-\n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n     public boolean isValidCustom() {\n         if (keyType == ConfigurationKeyType.CUSTOM) {\n@@ -52,8 +48,8 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n         if (keyType == ConfigurationKeyType.PREDEFINED) {\n             return confKey;\n         } else if (keyType == ConfigurationKeyType.CUSTOM) {\n-            return customConfKey;\n-        }\n+                   return customConfKey;\n+               }\n \n         // This should not happen\n         throw new SteveException(\"Cannot determine key (KeyType in illegal state)\");\n@@ -71,7 +67,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n         @Getter private final String value;\n \n         public static ConfigurationKeyType fromValue(String v) {\n-            for (ConfigurationKeyType c: ConfigurationKeyType.values()) {\n+            for (ConfigurationKeyType c : ConfigurationKeyType.values()) {\n                 if (c.value.equals(v)) {\n                     return c;\n                 }\n@@ -79,5 +75,4 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n             throw new IllegalArgumentException(v);\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/88/ChangeConfigurationParams.java\nindex 7ca48b1ed1a..873ca9c1b27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/88/ChangeConfigurationParams.java\n@@ -27,7 +27,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n     @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n \n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/88/ChangeConfigurationParams.java\nindex 7ca48b1ed1a..4ea31442dd6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/88/ChangeConfigurationParams.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/88/ChangeConfigurationParams.java\n@@ -26,8 +26,7 @@ public class ChangeConfigurationParams extends MultipleChargePointSelect {\n     @NotNull(message = \"Key type is required\")\n     private ConfigurationKeyType keyType = ConfigurationKeyType.PREDEFINED;\n \n-    @NotBlank(message = \"Value is required\")\n-    @Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")  \n+    @NotBlank(message = \"Value is required\")@Pattern(regexp = \"\\\\S+\", message = \"Value cannot contain any whitespace\")\n     private String value;\n \n     @AssertTrue(message = \"Custom Configuration Key cannot be left blank\")\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}