{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3015",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "53",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3015/ByteArrayConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3015/ByteArrayConverter.java\nindex c7bfa049dcc..2acd42e630b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3015/ByteArrayConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3015/ByteArrayConverter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.proc;\n \n import java.util.List;\n@@ -35,111 +36,105 @@ import static org.neo4j.internal.kernel.api.procs.DefaultParameterValue.ntByteAr\n import static org.neo4j.kernel.impl.proc.ParseUtil.parseList;\n import static org.neo4j.values.SequenceValue.IterationPreference.RANDOM_ACCESS;\n \n-public class ByteArrayConverter implements Function<String,DefaultParameterValue>, FieldSignature.InputMapper\n+public class ByteArrayConverter implements Function<String, DefaultParameterValue>, FieldSignature.InputMapper\n {\n \n-    @Override\n-    public DefaultParameterValue apply( String s )\n+  @Override\n+  public DefaultParameterValue apply(String s)\n+  {\n+    String value = s.trim();\n+    if (value.equalsIgnoreCase(\"null\"))\n     {\n-        String value = s.trim();\n-        if ( value.equalsIgnoreCase( \"null\" ) )\n-        {\n-            return ntByteArray( null );\n-        }\n-        else\n-        {\n-            List<Long> values = parseList( value, Long.class );\n-            byte[] bytes = new byte[values.size()];\n-            for ( int i = 0; i < bytes.length; i++ )\n-            {\n-                bytes[i] = values.get( i ).byteValue();\n-            }\n-            return ntByteArray( bytes );\n-        }\n+      return ntByteArray(null);\n+    } else\n+    {\n+      List<Long> values = parseList(value, Long.class);\n+      byte[] bytes = new byte[values.size()];\n+      for (int i = 0; i < bytes.length; i++)\n+      {\n+        bytes[i] = values.get(i).byteValue();\n+      }\n+      return ntByteArray(bytes);\n     }\n+  }\n \n-    @Override\n-    public Object map( Object input )\n+  @Override\n+  public Object map(Object input)\n+  {\n+    if (input instanceof byte[])\n     {\n-        if ( input instanceof byte[] )\n-        {\n-            return input;\n-        }\n-        if ( input instanceof List<?> )\n+      return input;\n+    }\n+    if (input instanceof List<?>)\n+    {\n+      List list = (List) input;\n+      byte[] bytes = new byte[list.size()];\n+      for (int a = 0; a < bytes.length; a++)\n+      {\n+        Object value = list.get(a);\n+        if (value instanceof Byte)\n         {\n-            List list = (List) input;\n-            byte[] bytes = new byte[list.size()];\n-            for ( int a = 0; a < bytes.length; a++ )\n-            {\n-                Object value = list.get( a );\n-                if ( value instanceof Byte )\n-                {\n-                    bytes[a] = (Byte) value;\n-                }\n-                else\n-                {\n-                    throw new IllegalArgumentException( \"Cannot convert \" + value + \" to byte for input to procedure\" );\n-                }\n-            }\n-            return bytes;\n-        }\n-        else\n+          bytes[a] = (Byte) value;\n+        } else\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\" );\n+          throw new IllegalArgumentException(\"Cannot convert \" + value + \" to byte for input to procedure\");\n         }\n+      }\n+      return bytes;\n+    } else\n+    {\n+      throw new IllegalArgumentException(\n+          \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\");\n     }\n+  }\n \n-    @Override\n-    public AnyValue map( AnyValue input )\n-    {\n+  @Override\n+  public AnyValue map(AnyValue input)\n+  {\n \n-        if ( input instanceof ByteArray )\n-        {\n-            return input;\n-        }\n-        if ( input instanceof SequenceValue )\n+    if (input instanceof ByteArray)\n+    {\n+      return input;\n+    }\n+    if (input instanceof SequenceValue)\n+    {\n+      SequenceValue list = (SequenceValue) input;\n+      if (list.iterationPreference() == RANDOM_ACCESS)\n+      {\n+        byte[] bytes = new byte[list.length()];\n+        for (int a = 0; a < bytes.length; a++)\n         {\n-            SequenceValue list = (SequenceValue) input;\n-            if ( list.iterationPreference() == RANDOM_ACCESS )\n-            {\n-                byte[] bytes = new byte[list.length()];\n-                for ( int a = 0; a < bytes.length; a++ )\n-                {\n-                    bytes[a] = asByte( list.value( a ) );\n-                }\n-                return Values.byteArray( bytes );\n-            }\n-            else\n-            {\n-                //this may have linear complexity, still worth doing it upfront\n-                byte[] bytes = new byte[list.length()];\n-                int i = 0;\n-                for ( AnyValue anyValue : list )\n-                {\n-                    bytes[i++] = asByte( anyValue );\n-                }\n-\n-                return Values.byteArray( bytes );\n-            }\n+          bytes[a] = asByte(list.value(a));\n         }\n-        else\n+        return Values.byteArray(bytes);\n+      } else\n+      {\n+        //this may have linear complexity, still worth doing it upfront\n+        byte[] bytes = new byte[list.length()];\n+        int i = 0;\n+        for (AnyValue anyValue : list)\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\" );\n+          bytes[i++] = asByte(anyValue);\n         }\n+\n+        return Values.byteArray(bytes);\n+      }\n+    } else\n+    {\n+      throw new IllegalArgumentException(\n+          \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\");\n     }\n+  }\n \n-    private byte asByte( AnyValue value )\n+  private byte asByte(AnyValue value)\n+  {\n+    if (value instanceof ByteValue)\n     {\n-        if ( value instanceof ByteValue )\n-        {\n-            return ((ByteValue) value).value();\n-        }\n-        else\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Cannot convert \" + value.map( new DefaultValueMapper( null ) ) + \" to byte for input to procedure\" );\n-        }\n+      return ((ByteValue) value).value();\n+    } else\n+    {\n+      throw new IllegalArgumentException(\n+          \"Cannot convert \" + value.map(new DefaultValueMapper(null)) + \" to byte for input to procedure\");\n     }\n+  }\n }\n",
            "diff_size": 129
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3015/ByteArrayConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3015/ByteArrayConverter.java\nindex c7bfa049dcc..879de9ebbb9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3015/ByteArrayConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3015/ByteArrayConverter.java\n@@ -38,7 +38,7 @@ import static org.neo4j.values.SequenceValue.IterationPreference.RANDOM_ACCESS;\n public class ByteArrayConverter implements Function<String,DefaultParameterValue>, FieldSignature.InputMapper\n {\n \n-    @Override\n+@Override\n     public DefaultParameterValue apply( String s )\n     {\n         String value = s.trim();\n@@ -54,7 +54,8 @@ public class ByteArrayConverter implements Function<String,DefaultParameterValue\n             {\n                 bytes[i] = values.get( i ).byteValue();\n             }\n-            return ntByteArray( bytes );\n+\n+return ntByteArray( bytes );\n         }\n     }\n \n@@ -65,7 +66,8 @@ public class ByteArrayConverter implements Function<String,DefaultParameterValue\n         {\n             return input;\n         }\n-        if ( input instanceof List<?> )\n+\n+if ( input instanceof List<?> )\n         {\n             List list = (List) input;\n             byte[] bytes = new byte[list.size()];\n@@ -85,20 +87,19 @@ public class ByteArrayConverter implements Function<String,DefaultParameterValue\n         }\n         else\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\" );\n-        }\n+            throw new IllegalArgumentException( \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\" );\n+    }\n     }\n \n     @Override\n     public AnyValue map( AnyValue input )\n     {\n-\n-        if ( input instanceof ByteArray )\n+    if ( input instanceof ByteArray )\n         {\n             return input;\n         }\n-        if ( input instanceof SequenceValue )\n+\n+if ( input instanceof SequenceValue )\n         {\n             SequenceValue list = (SequenceValue) input;\n             if ( list.iterationPreference() == RANDOM_ACCESS )\n@@ -108,7 +109,8 @@ public class ByteArrayConverter implements Function<String,DefaultParameterValue\n                 {\n                     bytes[a] = asByte( list.value( a ) );\n                 }\n-                return Values.byteArray( bytes );\n+\n+return Values.byteArray( bytes );\n             }\n             else\n             {\n@@ -125,9 +127,8 @@ public class ByteArrayConverter implements Function<String,DefaultParameterValue\n         }\n         else\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\" );\n-        }\n+            throw new IllegalArgumentException( \"Cannot convert \" + input.getClass().getSimpleName() + \" to byte[] for input to procedure\" );\n+    }\n     }\n \n     private byte asByte( AnyValue value )\n@@ -138,8 +139,7 @@ public class ByteArrayConverter implements Function<String,DefaultParameterValue\n         }\n         else\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot convert \" + value.map( new DefaultValueMapper( null ) ) + \" to byte for input to procedure\" );\n-        }\n+            throw new IllegalArgumentException( \"Cannot convert \" + value.map( new DefaultValueMapper( null ) ) + \" to byte for input to procedure\" );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}