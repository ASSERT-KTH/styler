{
    "project_name": "neo4j-neo4j",
    "error_id": "1126",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1126/ShiroAuthToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1126/ShiroAuthToken.java\nindex 11b35309f24..74f3f9e4b95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1126/ShiroAuthToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1126/ShiroAuthToken.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.auth;\n \n import org.apache.shiro.authc.AuthenticationToken;\n@@ -36,9 +37,9 @@ public class ShiroAuthToken implements AuthenticationToken\n     private static final String PAIR_DELIMITER = \", \";\n     private static final String KEY_VALUE_DELIMITER = \"=\";\n \n-    private final Map<String,Object> authToken;\n+    private final Map<String, Object> authToken;\n \n-    public ShiroAuthToken( Map<String,Object> authToken )\n+    public ShiroAuthToken(Map<String, Object> authToken)\n     {\n         this.authToken = authToken;\n     }\n@@ -46,66 +47,68 @@ public class ShiroAuthToken implements AuthenticationToken\n     @Override\n     public Object getPrincipal()\n     {\n-        return authToken.get( AuthToken.PRINCIPAL );\n+        return authToken.get(AuthToken.PRINCIPAL);\n     }\n \n     @Override\n     public Object getCredentials()\n     {\n-        return authToken.get( AuthToken.CREDENTIALS );\n+        return authToken.get(AuthToken.CREDENTIALS);\n     }\n \n     public String getScheme() throws InvalidAuthTokenException\n     {\n-        return AuthToken.safeCast( AuthToken.SCHEME_KEY, authToken );\n+        return AuthToken.safeCast(AuthToken.SCHEME_KEY, authToken);\n     }\n \n     public String getSchemeSilently()\n     {\n-        Object scheme = authToken.get( AuthToken.SCHEME_KEY );\n+        Object scheme = authToken.get(AuthToken.SCHEME_KEY);\n         return scheme == null ? null : scheme.toString();\n     }\n \n-    public Map<String,Object> getAuthTokenMap()\n+    public Map<String, Object> getAuthTokenMap()\n     {\n         return authToken;\n     }\n \n-    /** returns true if token map does not specify a realm, or if it specifies the requested realm */\n-    public boolean supportsRealm( String realm )\n+    /**\n+     * returns true if token map does not specify a realm, or if it specifies the requested realm\n+     */\n+    public boolean supportsRealm(String realm)\n     {\n-        Object providedRealm = authToken.get( AuthToken.REALM_KEY );\n+        Object providedRealm = authToken.get(AuthToken.REALM_KEY);\n \n         return providedRealm == null ||\n-               providedRealm.equals( \"*\" ) ||\n-               providedRealm.equals( realm ) ||\n-               providedRealm.toString().isEmpty();\n+          providedRealm.equals(\"*\") ||\n+          providedRealm.equals(realm) ||\n+          providedRealm.toString().isEmpty();\n     }\n \n     @Override\n     public String toString()\n     {\n-        if ( authToken.isEmpty() )\n+        if (authToken.isEmpty())\n         {\n             return \"{}\";\n         }\n \n-        List<String> keys = new ArrayList<>( authToken.keySet() );\n-        int schemeIndex = keys.indexOf( AuthToken.SCHEME_KEY );\n-        if ( schemeIndex > 0 )\n+        List<String> keys = new ArrayList<>(authToken.keySet());\n+        int schemeIndex = keys.indexOf(AuthToken.SCHEME_KEY);\n+        if (schemeIndex > 0)\n         {\n-            keys.set( schemeIndex, keys.get( 0 ) );\n-            keys.set( 0, AuthToken.SCHEME_KEY );\n+            keys.set(schemeIndex, keys.get(0));\n+            keys.set(0, AuthToken.SCHEME_KEY);\n         }\n \n         return keys.stream()\n-                .map( this::keyValueString )\n-                .collect( joining( PAIR_DELIMITER, \"{ \", \" }\" ) );\n+          .map(this::keyValueString)\n+          .collect(joining(PAIR_DELIMITER, \"{ \", \" }\"));\n     }\n \n-    private String keyValueString( String key )\n+    private String keyValueString(String key)\n     {\n-        String valueString = key.equals( AuthToken.CREDENTIALS ) ? \"******\" : String.valueOf( authToken.get( key ) );\n+        String valueString = key.equals(AuthToken.CREDENTIALS) ? \"******\" : String.valueOf(authToken.get(key));\n         return key + KEY_VALUE_DELIMITER + VALUE_DELIMITER + valueString + VALUE_DELIMITER;\n     }\n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1126/ShiroAuthToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1126/ShiroAuthToken.java\nindex 11b35309f24..3a9294349c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1126/ShiroAuthToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1126/ShiroAuthToken.java\n@@ -108,4 +108,4 @@ public class ShiroAuthToken implements AuthenticationToken\n         String valueString = key.equals( AuthToken.CREDENTIALS ) ? \"******\" : String.valueOf( authToken.get( key ) );\n         return key + KEY_VALUE_DELIMITER + VALUE_DELIMITER + valueString + VALUE_DELIMITER;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}