{
    "project_name": "graphfoundation-ongdb",
    "error_id": "982",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "90",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/982/TransactionEventHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/982/TransactionEventHandler.java\nindex 90ec982f695..2dccff838a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/982/TransactionEventHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/982/TransactionEventHandler.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.event;\n \n import org.neo4j.graphdb.GraphDatabaseService;\n@@ -56,92 +57,91 @@ import org.neo4j.graphdb.TransactionFailureException;\n  * {@link #beforeCommit(TransactionData)} method executed successfully will\n  * receive a call to {@link #afterRollback(TransactionData, Object)}.\n  *\n- * @author Tobias Ivarsson\n- * @author Mattias Persson\n- *\n  * @param <T> The type of a state object that the transaction handler can use to\n  *            pass information from the {@link #beforeCommit(TransactionData)}\n  *            event dispatch method to the\n  *            {@link #afterCommit(TransactionData, Object)} or\n  *            {@link #afterRollback(TransactionData, Object)} method, depending\n  *            on whether the transaction succeeded or failed.\n+ * @author Tobias Ivarsson\n+ * @author Mattias Persson\n  */\n public interface TransactionEventHandler<T>\n {\n-    /**\n-     * Invoked when a transaction that has changes accessible via {@link TransactionData}\n-     * is about to be committed.\n-     *\n-     * If this method throws an exception the transaction will be rolled back\n-     * and a {@link TransactionFailureException} will be thrown from\n-     * {@link Transaction#close()}.\n-     *\n-     * The transaction is still open when this method is invoked, making it\n-     * possible to perform mutating operations in this method. This is however\n-     * highly discouraged since changes made in this method are not guaranteed to be\n-     * visible by this or other {@link TransactionEventHandler}s.\n-     *\n-     * @param data the changes that will be committed in this transaction.\n-     * @return a state object (or <code>null</code>) that will be passed on to\n-     *         {@link #afterCommit(TransactionData, Object)} or\n-     *         {@link #afterRollback(TransactionData, Object)} of this object.\n-     * @throws Exception to indicate that the transaction should be rolled back.\n-     */\n-    T beforeCommit( TransactionData data ) throws Exception;\n+  /**\n+   * Invoked when a transaction that has changes accessible via {@link TransactionData}\n+   * is about to be committed.\n+   * <p>\n+   * If this method throws an exception the transaction will be rolled back\n+   * and a {@link TransactionFailureException} will be thrown from\n+   * {@link Transaction#close()}.\n+   * <p>\n+   * The transaction is still open when this method is invoked, making it\n+   * possible to perform mutating operations in this method. This is however\n+   * highly discouraged since changes made in this method are not guaranteed to be\n+   * visible by this or other {@link TransactionEventHandler}s.\n+   *\n+   * @param data the changes that will be committed in this transaction.\n+   * @return a state object (or <code>null</code>) that will be passed on to\n+   * {@link #afterCommit(TransactionData, Object)} or\n+   * {@link #afterRollback(TransactionData, Object)} of this object.\n+   * @throws Exception to indicate that the transaction should be rolled back.\n+   */\n+  T beforeCommit(TransactionData data) throws Exception;\n \n-    /**\n-     * Invoked after the transaction has been committed successfully.\n-     * Any {@link TransactionData} being passed in to this method is guaranteed\n-     * to first have been called with {@link #beforeCommit(TransactionData)}.\n-     * At the point of calling this method the transaction have been closed\n-     * and so accessing data outside that of what the {@link TransactionData}\n-     * can provide will require a new transaction to be opened.\n-     *\n-     * @param data the changes that were committed in this transaction.\n-     * @param state the object returned by\n-     *            {@link #beforeCommit(TransactionData)}.\n-     */\n-    void afterCommit( TransactionData data, T state );\n+  /**\n+   * Invoked after the transaction has been committed successfully.\n+   * Any {@link TransactionData} being passed in to this method is guaranteed\n+   * to first have been called with {@link #beforeCommit(TransactionData)}.\n+   * At the point of calling this method the transaction have been closed\n+   * and so accessing data outside that of what the {@link TransactionData}\n+   * can provide will require a new transaction to be opened.\n+   *\n+   * @param data  the changes that were committed in this transaction.\n+   * @param state the object returned by\n+   *              {@link #beforeCommit(TransactionData)}.\n+   */\n+  void afterCommit(TransactionData data, T state);\n \n-    /**\n-     * Invoked after the transaction has been rolled back if committing the\n-     * transaction failed for some reason.\n-     * Any {@link TransactionData} being passed in to this method is guaranteed\n-     * to first have been called with {@link #beforeCommit(TransactionData)}.\n-     * At the point of calling this method the transaction have been closed\n-     * and so accessing data outside that of what the {@link TransactionData}\n-     * can provide will require a new transaction to be opened.\n-     *\n-     * @param data the changes that were attempted to be committed in this transaction.\n-     * @param state the object returned by {@link #beforeCommit(TransactionData)}.\n-     * If this handler failed when executing {@link #beforeCommit(TransactionData)} this\n-     * {@code state} will be {@code null}.\n-     */\n-    // TODO: should this method take a parameter describing WHY the tx failed?\n-    void afterRollback( TransactionData data, T state );\n+  /**\n+   * Invoked after the transaction has been rolled back if committing the\n+   * transaction failed for some reason.\n+   * Any {@link TransactionData} being passed in to this method is guaranteed\n+   * to first have been called with {@link #beforeCommit(TransactionData)}.\n+   * At the point of calling this method the transaction have been closed\n+   * and so accessing data outside that of what the {@link TransactionData}\n+   * can provide will require a new transaction to be opened.\n+   *\n+   * @param data  the changes that were attempted to be committed in this transaction.\n+   * @param state the object returned by {@link #beforeCommit(TransactionData)}.\n+   *              If this handler failed when executing {@link #beforeCommit(TransactionData)} this\n+   *              {@code state} will be {@code null}.\n+   */\n+  // TODO: should this method take a parameter describing WHY the tx failed?\n+  void afterRollback(TransactionData data, T state);\n \n-    /**\n-     * Adapter for a {@link TransactionEventHandler}\n-     *\n-     * @param <T> the type of object communicated from a successful\n-     * {@link #beforeCommit(TransactionData)} to {@link #afterCommit(TransactionData, Object)}.\n-     */\n-    class Adapter<T> implements TransactionEventHandler<T>\n+  /**\n+   * Adapter for a {@link TransactionEventHandler}\n+   *\n+   * @param <T> the type of object communicated from a successful\n+   *            {@link #beforeCommit(TransactionData)} to {@link #afterCommit(TransactionData, Object)}.\n+   */\n+  class Adapter<T> implements TransactionEventHandler<T>\n+  {\n+    @Override\n+    public T beforeCommit(TransactionData data) throws Exception\n     {\n-        @Override\n-        public T beforeCommit( TransactionData data ) throws Exception\n-        {\n-            return null;\n-        }\n+      return null;\n+    }\n \n-        @Override\n-        public void afterCommit( TransactionData data, T state )\n-        {\n-        }\n+    @Override\n+    public void afterCommit(TransactionData data, T state)\n+    {\n+    }\n \n-        @Override\n-        public void afterRollback( TransactionData data, T state )\n-        {\n-        }\n+    @Override\n+    public void afterRollback(TransactionData data, T state)\n+    {\n     }\n+  }\n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}