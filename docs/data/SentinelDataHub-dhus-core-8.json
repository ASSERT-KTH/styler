{
    "project_name": "SentinelDataHub-dhus-core",
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "37",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 86).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * @see AbstractDelegatingMap\n */\npublic class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchronizer>\n{\n   /** Synchronizer Service, the underlying service. */\n   private static final ISynchronizerService SYNC_SERVICE =",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/8/UserSynchronizerMap.java\nindex b7c6e3003b2..68296b3b71e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/8/UserSynchronizerMap.java\n@@ -34,9 +34,10 @@ import org.apache.olingo.odata2.api.exception.ODataException;\n  *\n  * @see AbstractDelegatingMap\n  */\n-public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchronizer>\n+public class UserSynchronizerMap extends AbstractDelegatingMap<Long,\n+      UserSynchronizer>\n {\n-   /** Synchronizer Service, the underlying service. */\n+    /** Synchronizer Service, the underlying service. */\n    private static final ISynchronizerService SYNC_SERVICE =\n          ApplicationContextProvider.getBean(ISynchronizerService.class);\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "54",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "79",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/8/UserSynchronizerMap.java\nindex b7c6e3003b2..60488eff592 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/8/UserSynchronizerMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package fr.gael.dhus.olingo.v1.map.impl;\n \n import fr.gael.dhus.database.object.SynchronizerConf;\n@@ -34,62 +35,64 @@ import org.apache.olingo.odata2.api.exception.ODataException;\n  *\n  * @see AbstractDelegatingMap\n  */\n-public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchronizer>\n+public class UserSynchronizerMap\n+    extends AbstractDelegatingMap<Long, UserSynchronizer>\n {\n-   /** Synchronizer Service, the underlying service. */\n-   private static final ISynchronizerService SYNC_SERVICE =\n-         ApplicationContextProvider.getBean(ISynchronizerService.class);\n+    /**\n+     * Synchronizer Service, the underlying service.\n+     */\n+    private static final ISynchronizerService SYNC_SERVICE =\n+        ApplicationContextProvider.getBean(ISynchronizerService.class);\n \n-   @Override\n-   protected UserSynchronizer serviceGet(Long key)\n-   {\n-      try\n-      {\n-         return new UserSynchronizer(SYNC_SERVICE.getSynchronizerConfById(key));\n-      }\n-      catch (ODataException ex)\n-      {\n-         throw new RuntimeException(ex);\n-      }\n-   }\n+    @Override\n+    protected UserSynchronizer serviceGet(Long key)\n+    {\n+        try\n+        {\n+            return new UserSynchronizer(\n+                SYNC_SERVICE.getSynchronizerConfById(key));\n+        } catch (ODataException ex)\n+        {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n \n-   @Override\n-   protected Iterator<UserSynchronizer> serviceIterator()\n-   {\n-      final Iterator<SynchronizerConf> it =\n+    @Override\n+    protected Iterator<UserSynchronizer> serviceIterator()\n+    {\n+        final Iterator<SynchronizerConf> it =\n             SYNC_SERVICE.getSynchronizerConfs(\"ODataUserSynchronizer\");\n-      return new Iterator<UserSynchronizer>()\n-      {\n-         @Override\n-         public boolean hasNext()\n-         {\n-            return it.hasNext();\n-         }\n-\n-         @Override\n-         public UserSynchronizer next()\n-         {\n-            try\n+        return new Iterator<UserSynchronizer>()\n+        {\n+            @Override\n+            public boolean hasNext()\n             {\n-               return new UserSynchronizer(it.next());\n+                return it.hasNext();\n             }\n-            catch (ODataException ex)\n+\n+            @Override\n+            public UserSynchronizer next()\n             {\n-               throw new RuntimeException(ex);\n+                try\n+                {\n+                    return new UserSynchronizer(it.next());\n+                } catch (ODataException ex)\n+                {\n+                    throw new RuntimeException(ex);\n+                }\n             }\n-         }\n \n-         @Override\n-         public void remove()\n-         {\n-            throw new UnsupportedOperationException();\n-         }\n-      };\n-   }\n+            @Override\n+            public void remove()\n+            {\n+                throw new UnsupportedOperationException();\n+            }\n+        };\n+    }\n \n-   @Override\n-   protected int serviceCount()\n-   {\n-      return SYNC_SERVICE.count();\n-   }\n+    @Override\n+    protected int serviceCount()\n+    {\n+        return SYNC_SERVICE.count();\n+    }\n }\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/8/UserSynchronizerMap.java\nindex b7c6e3003b2..d9ac03122df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/8/UserSynchronizerMap.java\n@@ -92,4 +92,4 @@ public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchro\n    {\n       return SYNC_SERVICE.count();\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/8/UserSynchronizerMap.java\nindex b7c6e3003b2..7aa8f6b1fbb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/8/UserSynchronizerMap.java\n@@ -24,9 +24,7 @@ import fr.gael.dhus.olingo.v1.entity.UserSynchronizer;\n import fr.gael.dhus.olingo.v1.map.AbstractDelegatingMap;\n import fr.gael.dhus.service.ISynchronizerService;\n import fr.gael.dhus.spring.context.ApplicationContextProvider;\n-\n import java.util.Iterator;\n-\n import org.apache.olingo.odata2.api.exception.ODataException;\n \n /**\n@@ -34,18 +32,18 @@ import org.apache.olingo.odata2.api.exception.ODataException;\n  *\n  * @see AbstractDelegatingMap\n  */\n+\n public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchronizer>\n {\n    /** Synchronizer Service, the underlying service. */\n-   private static final ISynchronizerService SYNC_SERVICE =\n-         ApplicationContextProvider.getBean(ISynchronizerService.class);\n+   private static final ISynchronizerService SYNC_SERVICE = ApplicationContextProvider.getBean (ISynchronizerService.class);\n \n    @Override\n-   protected UserSynchronizer serviceGet(Long key)\n+   protected UserSynchronizer serviceGet (Long key)\n    {\n       try\n       {\n-         return new UserSynchronizer(SYNC_SERVICE.getSynchronizerConfById(key));\n+         return new UserSynchronizer(SYNC_SERVICE.getSynchronizerConfById (key));\n       }\n       catch (ODataException ex)\n       {\n@@ -54,24 +52,23 @@ public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchro\n    }\n \n    @Override\n-   protected Iterator<UserSynchronizer> serviceIterator()\n+   protected Iterator<UserSynchronizer> serviceIterator ()\n    {\n-      final Iterator<SynchronizerConf> it =\n-            SYNC_SERVICE.getSynchronizerConfs(\"ODataUserSynchronizer\");\n-      return new Iterator<UserSynchronizer>()\n+      final Iterator<SynchronizerConf> it = SYNC_SERVICE.getSynchronizerConfs (\"ODataUserSynchronizer\");\n+      return new Iterator<UserSynchronizer> ()\n       {\n          @Override\n-         public boolean hasNext()\n+         public boolean hasNext ()\n          {\n-            return it.hasNext();\n+            return it.hasNext ();\n          }\n \n          @Override\n-         public UserSynchronizer next()\n+         public UserSynchronizer next ()\n          {\n             try\n             {\n-               return new UserSynchronizer(it.next());\n+               return new UserSynchronizer(it.next ());\n             }\n             catch (ODataException ex)\n             {\n@@ -80,7 +77,7 @@ public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchro\n          }\n \n          @Override\n-         public void remove()\n+         public void remove ()\n          {\n             throw new UnsupportedOperationException();\n          }\n@@ -88,8 +85,8 @@ public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchro\n    }\n \n    @Override\n-   protected int serviceCount()\n+   protected int serviceCount ()\n    {\n-      return SYNC_SERVICE.count();\n+      return SYNC_SERVICE.count ();\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/8/UserSynchronizerMap.java\nindex b7c6e3003b2..68296b3b71e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/8/UserSynchronizerMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/8/UserSynchronizerMap.java\n@@ -34,9 +34,10 @@ import org.apache.olingo.odata2.api.exception.ODataException;\n  *\n  * @see AbstractDelegatingMap\n  */\n-public class UserSynchronizerMap extends AbstractDelegatingMap<Long, UserSynchronizer>\n+public class UserSynchronizerMap extends AbstractDelegatingMap<Long,\n+      UserSynchronizer>\n {\n-   /** Synchronizer Service, the underlying service. */\n+    /** Synchronizer Service, the underlying service. */\n    private static final ISynchronizerService SYNC_SERVICE =\n          ApplicationContextProvider.getBean(ISynchronizerService.class);\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}