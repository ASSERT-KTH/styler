{
    "project_name": "HuygensING-timbuctoo",
    "error_id": "6",
    "information": {
        "errors": [
            {
                "line": "52",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    String resultStr = indent + key + \"{\\n\";\n    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n      resultStr += indent + result.getValue().asConsole(jsn(result.getKey()).toString() + \": \", indent + \"  \", \",\") + RESET + \"\\n\";\n    }\n    return resultStr + indent + \"}\" + delimiter;\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/6/ObjectDiffResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/intellij/6/ObjectDiffResult.java\nindex e5c60005a6c..26dad3c01b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/6/ObjectDiffResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/intellij/6/ObjectDiffResult.java\n@@ -21,7 +21,7 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asHtml() {\n     String resultStr = \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n       resultStr += result.getValue().asHtml(jsn(result.getKey()).toString() + \": \", \"  \", \",\") + \"\\n\";\n     }\n     return resultStr + \"}\\n\";\n@@ -30,7 +30,7 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asHtml(String key, String indent, String delimiter) {\n     String resultStr = indent + key + \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n       resultStr += result.getValue().asHtml(jsn(result.getKey()).toString() + \": \", indent + \"  \", \",\") + \"\\n\";\n     }\n     return resultStr + indent + \"}\" + delimiter;\n@@ -39,7 +39,7 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asConsole() {\n     String resultStr = RESET + \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n       resultStr += result.getValue().asConsole(jsn(result.getKey()).toString() + \": \", \"  \", \",\") + RESET + \"\\n\";\n     }\n     return resultStr + RESET + \"}\\n\";\n@@ -48,8 +48,9 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asConsole(String key, String indent, String delimiter) {\n     String resultStr = indent + key + \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n-      resultStr += indent + result.getValue().asConsole(jsn(result.getKey()).toString() + \": \", indent + \"  \", \",\") + RESET + \"\\n\";\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n+      resultStr +=\n+        indent + result.getValue().asConsole(jsn(result.getKey()).toString() + \": \", indent + \"  \", \",\") + RESET + \"\\n\";\n     }\n     return resultStr + indent + \"}\" + delimiter;\n   }\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/6/ObjectDiffResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/6/ObjectDiffResult.java\nindex e5c60005a6c..d3838eaf924 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/6/ObjectDiffResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/naturalize/6/ObjectDiffResult.java\n@@ -58,4 +58,4 @@ public class ObjectDiffResult extends DiffResult {\n   public boolean wasSuccess() {\n     return wasSuccess;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/6/ObjectDiffResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/6/ObjectDiffResult.java\nindex e5c60005a6c..9cb33ac0c95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/errored/1/6/ObjectDiffResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/HuygensING-timbuctoo/codebuff/6/ObjectDiffResult.java\n@@ -1,7 +1,6 @@\n package nl.knaw.huygens.contractdiff.jsondiff;\n \n import nl.knaw.huygens.contractdiff.diffresults.DiffResult;\n-\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -21,7 +20,7 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asHtml() {\n     String resultStr = \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n       resultStr += result.getValue().asHtml(jsn(result.getKey()).toString() + \": \", \"  \", \",\") + \"\\n\";\n     }\n     return resultStr + \"}\\n\";\n@@ -30,7 +29,7 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asHtml(String key, String indent, String delimiter) {\n     String resultStr = indent + key + \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n       resultStr += result.getValue().asHtml(jsn(result.getKey()).toString() + \": \", indent + \"  \", \",\") + \"\\n\";\n     }\n     return resultStr + indent + \"}\" + delimiter;\n@@ -39,7 +38,7 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asConsole() {\n     String resultStr = RESET + \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n       resultStr += result.getValue().asConsole(jsn(result.getKey()).toString() + \": \", \"  \", \",\") + RESET + \"\\n\";\n     }\n     return resultStr + RESET + \"}\\n\";\n@@ -48,7 +47,7 @@ public class ObjectDiffResult extends DiffResult {\n   @Override\n   public String asConsole(String key, String indent, String delimiter) {\n     String resultStr = indent + key + \"{\\n\";\n-    for (Map.Entry<String, DiffResult> result: innerResults.entrySet()) {\n+    for (Map.Entry<String, DiffResult> result : innerResults.entrySet()) {\n       resultStr += indent + result.getValue().asConsole(jsn(result.getKey()).toString() + \": \", indent + \"  \", \",\") + RESET + \"\\n\";\n     }\n     return resultStr + indent + \"}\" + delimiter;\n@@ -58,4 +57,4 @@ public class ObjectDiffResult extends DiffResult {\n   public boolean wasSuccess() {\n     return wasSuccess;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}