{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "1538",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.exchange.transform.fhir;\n\nimport gov.hhs.fha.nhinc.exchange.OrganizationListType;\nimport gov.hhs.fha.nhinc.exchange.directory.AddressType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1538/FHIRTransform.java\nindex 29c9c052bc1..e7ed3c027ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/1538/FHIRTransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.fhir;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1538/FHIRTransform.java\nindex 29c9c052bc1..f324f06b335 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/1538/FHIRTransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.fhir;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n@@ -58,197 +59,196 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author tjafri\n  */\n public class FHIRTransform implements ExchangeTransforms<Bundle> {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(FHIRTransform.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(FHIRTransform.class);\n \n-    @Override\n-    public OrganizationListType transform(Bundle bundle) throws ExchangeTransformException {\n-        try {\n-            return buildOrganization(FHIRTransformHelper.extractFhirOrgResourceList(bundle));\n-        } catch (Exception ex) {\n-            LOG.error(\"Transforming FHIR data resulted in exception: {}\", ex.getLocalizedMessage(), ex);\n-            throw new ExchangeTransformException(ex);\n-        }\n+  @Override\n+  public OrganizationListType transform(Bundle bundle) throws ExchangeTransformException {\n+    try {\n+      return buildOrganization(FHIRTransformHelper.extractFhirOrgResourceList(bundle));\n+    } catch (Exception ex) {\n+      LOG.error(\"Transforming FHIR data resulted in exception: {}\", ex.getLocalizedMessage(), ex);\n+      throw new ExchangeTransformException(ex);\n     }\n-\n-    private static OrganizationListType buildOrganization(List<Organization> fhirOrgs) {\n-        OrganizationListType orgListType = null;\n-        if (CollectionUtils.isNotEmpty(fhirOrgs)) {\n-            orgListType = new OrganizationListType();\n-            for (Organization orgResource : fhirOrgs) {\n-                buildOrganization(orgListType, orgResource);\n-            }\n-        }\n-        return orgListType;\n+  }\n+\n+  private static OrganizationListType buildOrganization(List<Organization> fhirOrgs) {\n+    OrganizationListType orgListType = null;\n+    if (CollectionUtils.isNotEmpty(fhirOrgs)) {\n+      orgListType = new OrganizationListType();\n+      for (Organization orgResource : fhirOrgs) {\n+        buildOrganization(orgListType, orgResource);\n+      }\n     }\n-\n-    private static void buildOrganization(OrganizationListType orgListType, Organization orgFhir) {\n-        if (null != orgFhir) {\n-            String hcid = FHIRTransformHelper.extractHCID(orgFhir.getIdentifier());\n-            if (StringUtils.isEmpty(hcid)) {\n-                LOG.warn(\"Skipping Organization {}. The organization is null or without an hcid \", orgFhir.getName());\n-                return;\n-            }\n-            OrganizationType org = new OrganizationType();\n-            org.setName(orgFhir.getName());\n-            org.setHcid(hcid);\n-            if (orgFhir.getActive()) {\n-                org.setStatus(FHIRConstants.STATUS);\n-            }\n-            org.getContact().addAll(buildContactList(orgFhir.getContact()));\n-            org.setEndpointList(buildEndpointListType(orgFhir.getContained()));\n-            org.getAddress().addAll(buildAddressList(orgFhir.getAddress()));\n-            org.setPartOf(buildPartOf(orgFhir.getPartOf()));\n-            //For Later: Need to map target region. Currently there is no data to map TargetRegions\n-            orgListType.getOrganization().add(org);\n-        }\n+    return orgListType;\n+  }\n+\n+  private static void buildOrganization(OrganizationListType orgListType, Organization orgFhir) {\n+    if (null != orgFhir) {\n+      String hcid = FHIRTransformHelper.extractHCID(orgFhir.getIdentifier());\n+      if (StringUtils.isEmpty(hcid)) {\n+        LOG.warn(\"Skipping Organization {}. The organization is null or without an hcid \", orgFhir.getName());\n+        return;\n+      }\n+      OrganizationType org = new OrganizationType();\n+      org.setName(orgFhir.getName());\n+      org.setHcid(hcid);\n+      if (orgFhir.getActive()) {\n+        org.setStatus(FHIRConstants.STATUS);\n+      }\n+      org.getContact().addAll(buildContactList(orgFhir.getContact()));\n+      org.setEndpointList(buildEndpointListType(orgFhir.getContained()));\n+      org.getAddress().addAll(buildAddressList(orgFhir.getAddress()));\n+      org.setPartOf(buildPartOf(orgFhir.getPartOf()));\n+      //For Later: Need to map target region. Currently there is no data to map TargetRegions\n+      orgListType.getOrganization().add(org);\n     }\n+  }\n \n-    private static String buildPartOf(Reference partOf) {\n-        if (null != partOf && null != partOf.getIdentifier()) {\n-            return FHIRTransformHelper.extractHCID(partOf.getIdentifier());\n-        }\n-        return null;\n-    }\n-\n-    private static List<ContactType> buildContactList(List<OrganizationContactComponent> fhirContacts) {\n-        List<ContactType> list = new ArrayList<>();\n-        if (CollectionUtils.isNotEmpty(fhirContacts)) {\n-            for (OrganizationContactComponent fContact : fhirContacts) {\n-                buildContact(list, fContact);\n-            }\n-        }\n-        return list;\n+  private static String buildPartOf(Reference partOf) {\n+    if (null != partOf && null != partOf.getIdentifier()) {\n+      return FHIRTransformHelper.extractHCID(partOf.getIdentifier());\n     }\n-\n-    private static void buildContact(List<ContactType> contactList, OrganizationContactComponent fContact) {\n-        if (null != fContact) {\n-            ContactType contact = new ContactType();\n-            buildContactName(contact, fContact);\n-            contact.setRole(FHIRTransformHelper.extractPurpose(fContact));\n-            contact.getEmail().addAll(FHIRTransformHelper.extractTelecomContacts(FHIRConstants.EMAIL, fContact));\n-            contact.getPhone().addAll(FHIRTransformHelper.extractTelecomContacts(FHIRConstants.PHONE, fContact));\n-            if (fContact.hasAddress()) {\n-                AddressType addr = buildAddress(fContact.getAddress());\n-                if (addr != null) {\n-                    contact.getAddress().add(addr);\n-                }\n-            }\n-            contactList.add(contact);\n-        }\n+    return null;\n+  }\n+\n+  private static List<ContactType> buildContactList(List<OrganizationContactComponent> fhirContacts) {\n+    List<ContactType> list = new ArrayList<>();\n+    if (CollectionUtils.isNotEmpty(fhirContacts)) {\n+      for (OrganizationContactComponent fContact : fhirContacts) {\n+        buildContact(list, fContact);\n+      }\n     }\n-\n-    private static List<AddressType> buildAddressList(List<Address> fhirAddrList) {\n-        List<AddressType> list = new ArrayList<>();\n-        if (CollectionUtils.isNotEmpty(fhirAddrList)) {\n-            for (Address fAddr : fhirAddrList) {\n-                AddressType addr = buildAddress(fAddr);\n-                if (null != addr) {\n-                    list.add(addr);\n-                }\n-            }\n+    return list;\n+  }\n+\n+  private static void buildContact(List<ContactType> contactList, OrganizationContactComponent fContact) {\n+    if (null != fContact) {\n+      ContactType contact = new ContactType();\n+      buildContactName(contact, fContact);\n+      contact.setRole(FHIRTransformHelper.extractPurpose(fContact));\n+      contact.getEmail().addAll(FHIRTransformHelper.extractTelecomContacts(FHIRConstants.EMAIL, fContact));\n+      contact.getPhone().addAll(FHIRTransformHelper.extractTelecomContacts(FHIRConstants.PHONE, fContact));\n+      if (fContact.hasAddress()) {\n+        AddressType addr = buildAddress(fContact.getAddress());\n+        if (addr != null) {\n+          contact.getAddress().add(addr);\n         }\n-        return list;\n+      }\n+      contactList.add(contact);\n     }\n-\n-    private static AddressType buildAddress(Address fhirAddr) {\n-        AddressType addr = null;\n-        if (null != fhirAddr) {\n-            addr = new AddressType();\n-            addr.getAddressLine().addAll(FHIRTransformHelper.extractAddressLine(fhirAddr.getLine()));\n-            addr.setCity(fhirAddr.getCity());\n-            addr.setCountry(fhirAddr.getCountry());\n-            addr.setState(fhirAddr.getState());\n-            addr.setZipcode(fhirAddr.getPostalCode());\n-            addr.setUse((null != fhirAddr.getUse()) ? fhirAddr.getUse().toCode() : null);\n+  }\n+\n+  private static List<AddressType> buildAddressList(List<Address> fhirAddrList) {\n+    List<AddressType> list = new ArrayList<>();\n+    if (CollectionUtils.isNotEmpty(fhirAddrList)) {\n+      for (Address fAddr : fhirAddrList) {\n+        AddressType addr = buildAddress(fAddr);\n+        if (null != addr) {\n+          list.add(addr);\n         }\n-        return addr;\n+      }\n     }\n-\n-    private static void buildContactName(ContactType contact, OrganizationContactComponent fhirContact) {\n-        if (null != fhirContact.getName()) {\n-            contact.setFamilyName(fhirContact.getName().getFamily());\n-            contact.setGivenName(fhirContact.getName().getGivenAsSingleString());\n-            if (StringUtils.isNotEmpty(fhirContact.getName().getText())) {\n-                contact.getFullName().add(fhirContact.getName().getText());\n-            }\n-        }\n+    return list;\n+  }\n+\n+  private static AddressType buildAddress(Address fhirAddr) {\n+    AddressType addr = null;\n+    if (null != fhirAddr) {\n+      addr = new AddressType();\n+      addr.getAddressLine().addAll(FHIRTransformHelper.extractAddressLine(fhirAddr.getLine()));\n+      addr.setCity(fhirAddr.getCity());\n+      addr.setCountry(fhirAddr.getCountry());\n+      addr.setState(fhirAddr.getState());\n+      addr.setZipcode(fhirAddr.getPostalCode());\n+      addr.setUse((null != fhirAddr.getUse()) ? fhirAddr.getUse().toCode() : null);\n     }\n-\n-    private static EndpointListType buildEndpointListType(List<Resource> contianedResources) {\n-        EndpointListType epListType = null;\n-        if (CollectionUtils.isNotEmpty(contianedResources)) {\n-            Map<String, EndpointType> endpointMap = new HashMap<>();\n-            for (Resource res : contianedResources) {\n-                if (ResourceType.Endpoint.toString().equals(FHIRTransformHelper.extractResourceType(res.\n-                    getResourceType()))) {\n-                    buildEndpoint(endpointMap, (Endpoint) res);\n-                }\n-            }\n-            epListType = new EndpointListType();\n-            epListType.getEndpoint().addAll(endpointMap.values());\n-        }\n-        return epListType;\n-\n+    return addr;\n+  }\n+\n+  private static void buildContactName(ContactType contact, OrganizationContactComponent fhirContact) {\n+    if (null != fhirContact.getName()) {\n+      contact.setFamilyName(fhirContact.getName().getFamily());\n+      contact.setGivenName(fhirContact.getName().getGivenAsSingleString());\n+      if (StringUtils.isNotEmpty(fhirContact.getName().getText())) {\n+        contact.getFullName().add(fhirContact.getName().getText());\n+      }\n     }\n-\n-    private static void buildEndpoint(Map<String, EndpointType> endpointMap, Endpoint ep) {\n-        String nwhinServiceName = FHIRTransformHelper.extractEndpointName(ep.getName());\n-        if (null == nwhinServiceName) {\n-            LOG.warn(\"Skipping endpoint {}, not a valid exchange service\", ep.getName());\n-            return;\n-        }\n-        EndpointType epType;\n-        if (!endpointMap.containsKey(nwhinServiceName)) {\n-            epType = new EndpointType();\n-            epType.getName().add(nwhinServiceName);\n-            epType.setProfile(FHIRTransformHelper.extractCodeFromCodingElement(ep.getConnectionType()));\n-            epType.setPurposeOfUseList(buildPurposeOfUse(ep));\n-            epType.setRolesList(buildRoles(ep));\n-            epType.setUsecaseList(buildUseCases(ep));\n-            epType.getPayloadFormat().addAll(FHIRTransformHelper.extractPayloadMimeType(ep.getPayloadMimeType()));\n-            epType.getPayloadType().addAll(FHIRTransformHelper.extractPayloadType(ep.getPayloadType()));\n-        } else {\n-            epType = endpointMap.get(nwhinServiceName);\n+  }\n+\n+  private static EndpointListType buildEndpointListType(List<Resource> contianedResources) {\n+    EndpointListType epListType = null;\n+    if (CollectionUtils.isNotEmpty(contianedResources)) {\n+      Map<String, EndpointType> endpointMap = new HashMap<>();\n+      for (Resource res : contianedResources) {\n+        if (ResourceType.Endpoint.toString().equals(FHIRTransformHelper.extractResourceType(res.\n+            getResourceType()))) {\n+          buildEndpoint(endpointMap, (Endpoint) res);\n         }\n-        epType.setEndpointConfigurationList(buildEndpointConfig(epType, ep));\n-        endpointMap.put(nwhinServiceName, epType);\n+      }\n+      epListType = new EndpointListType();\n+      epListType.getEndpoint().addAll(endpointMap.values());\n     }\n+    return epListType;\n \n-    private static PurposeOfUseListType buildPurposeOfUse(Endpoint ep) {\n-        PurposeOfUseListType puList = new PurposeOfUseListType();\n-        puList.getPurposeOfUse().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.PURPOSES_OF_USE, ep));\n-        return puList;\n-    }\n+  }\n \n-    private static RolesListType buildRoles(Endpoint ep) {\n-        RolesListType list = new RolesListType();\n-        list.getRole().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.ROLES, ep));\n-        return list;\n+  private static void buildEndpoint(Map<String, EndpointType> endpointMap, Endpoint ep) {\n+    String nwhinServiceName = FHIRTransformHelper.extractEndpointName(ep.getName());\n+    if (null == nwhinServiceName) {\n+      LOG.warn(\"Skipping endpoint {}, not a valid exchange service\", ep.getName());\n+      return;\n     }\n-\n-    private static UsecaseListType buildUseCases(Endpoint ep) {\n-        UsecaseListType list = new UsecaseListType();\n-        list.getUsecase().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.USECASES, ep));\n-        return list;\n+    EndpointType epType;\n+    if (!endpointMap.containsKey(nwhinServiceName)) {\n+      epType = new EndpointType();\n+      epType.getName().add(nwhinServiceName);\n+      epType.setProfile(FHIRTransformHelper.extractCodeFromCodingElement(ep.getConnectionType()));\n+      epType.setPurposeOfUseList(buildPurposeOfUse(ep));\n+      epType.setRolesList(buildRoles(ep));\n+      epType.setUsecaseList(buildUseCases(ep));\n+      epType.getPayloadFormat().addAll(FHIRTransformHelper.extractPayloadMimeType(ep.getPayloadMimeType()));\n+      epType.getPayloadType().addAll(FHIRTransformHelper.extractPayloadType(ep.getPayloadType()));\n+    } else {\n+      epType = endpointMap.get(nwhinServiceName);\n     }\n-\n-    private static EndpointConfigurationListType buildEndpointConfig(EndpointType epType, Endpoint ep) {\n-        EndpointConfigurationListType epConfigList = epType.getEndpointConfigurationList();\n-        if (null == epConfigList) {\n-            epConfigList = new EndpointConfigurationListType();\n-        }\n-        EndpointConfigurationType epConfig = new EndpointConfigurationType();\n-        epConfig.setVersion(FHIRTransformHelper.extractVersion(FHIRConstants.VERSION, ep));\n-        epConfig.setUrl(ep.getAddress());\n-        epConfigList.getEndpointConfiguration().add(epConfig);\n-        return epConfigList;\n+    epType.setEndpointConfigurationList(buildEndpointConfig(epType, ep));\n+    endpointMap.put(nwhinServiceName, epType);\n+  }\n+\n+  private static PurposeOfUseListType buildPurposeOfUse(Endpoint ep) {\n+    PurposeOfUseListType puList = new PurposeOfUseListType();\n+    puList.getPurposeOfUse().addAll(\n+        FHIRTransformHelper.extractExtension(FHIRConstants.PURPOSES_OF_USE, ep));\n+    return puList;\n+  }\n+\n+  private static RolesListType buildRoles(Endpoint ep) {\n+    RolesListType list = new RolesListType();\n+    list.getRole().addAll(\n+        FHIRTransformHelper.extractExtension(FHIRConstants.ROLES, ep));\n+    return list;\n+  }\n+\n+  private static UsecaseListType buildUseCases(Endpoint ep) {\n+    UsecaseListType list = new UsecaseListType();\n+    list.getUsecase().addAll(\n+        FHIRTransformHelper.extractExtension(FHIRConstants.USECASES, ep));\n+    return list;\n+  }\n+\n+  private static EndpointConfigurationListType buildEndpointConfig(EndpointType epType, Endpoint ep) {\n+    EndpointConfigurationListType epConfigList = epType.getEndpointConfigurationList();\n+    if (null == epConfigList) {\n+      epConfigList = new EndpointConfigurationListType();\n     }\n+    EndpointConfigurationType epConfig = new EndpointConfigurationType();\n+    epConfig.setVersion(FHIRTransformHelper.extractVersion(FHIRConstants.VERSION, ep));\n+    epConfig.setUrl(ep.getAddress());\n+    epConfigList.getEndpointConfiguration().add(epConfig);\n+    return epConfigList;\n+  }\n }\n",
            "diff_size": 213
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1538/FHIRTransform.java\nindex 29c9c052bc1..3df555f2790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/1538/FHIRTransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.fhir;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n@@ -71,7 +72,8 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n             return buildOrganization(FHIRTransformHelper.extractFhirOrgResourceList(bundle));\n         } catch (Exception ex) {\n             LOG.error(\"Transforming FHIR data resulted in exception: {}\", ex.getLocalizedMessage(), ex);\n-            throw new ExchangeTransformException(ex);\n+\n+throw new ExchangeTransformException(ex);\n         }\n     }\n \n@@ -111,7 +113,8 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n     private static String buildPartOf(Reference partOf) {\n         if (null != partOf && null != partOf.getIdentifier()) {\n             return FHIRTransformHelper.extractHCID(partOf.getIdentifier());\n-        }\n+\n+    }\n         return null;\n     }\n \n@@ -165,7 +168,8 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n             addr.setState(fhirAddr.getState());\n             addr.setZipcode(fhirAddr.getPostalCode());\n             addr.setUse((null != fhirAddr.getUse()) ? fhirAddr.getUse().toCode() : null);\n-        }\n+\n+    }\n         return addr;\n     }\n \n@@ -184,16 +188,15 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n         if (CollectionUtils.isNotEmpty(contianedResources)) {\n             Map<String, EndpointType> endpointMap = new HashMap<>();\n             for (Resource res : contianedResources) {\n-                if (ResourceType.Endpoint.toString().equals(FHIRTransformHelper.extractResourceType(res.\n-                    getResourceType()))) {\n-                    buildEndpoint(endpointMap, (Endpoint) res);\n+                if (ResourceType.Endpoint.toString().equals(FHIRTransformHelper.extractResourceType(res.getResourceType()))) {\n+    buildEndpoint(endpointMap, (Endpoint) res);\n                 }\n             }\n             epListType = new EndpointListType();\n             epListType.getEndpoint().addAll(endpointMap.values());\n-        }\n-        return epListType;\n \n+    }\n+        return epListType;\n     }\n \n     private static void buildEndpoint(Map<String, EndpointType> endpointMap, Endpoint ep) {\n@@ -221,23 +224,23 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n \n     private static PurposeOfUseListType buildPurposeOfUse(Endpoint ep) {\n         PurposeOfUseListType puList = new PurposeOfUseListType();\n-        puList.getPurposeOfUse().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.PURPOSES_OF_USE, ep));\n-        return puList;\n+        puList.getPurposeOfUse().addAll(FHIRTransformHelper.extractExtension(FHIRConstants.PURPOSES_OF_USE, ep));\n+\n+return puList;\n     }\n \n     private static RolesListType buildRoles(Endpoint ep) {\n         RolesListType list = new RolesListType();\n-        list.getRole().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.ROLES, ep));\n-        return list;\n+        list.getRole().addAll(FHIRTransformHelper.extractExtension(FHIRConstants.ROLES, ep));\n+\n+return list;\n     }\n \n     private static UsecaseListType buildUseCases(Endpoint ep) {\n         UsecaseListType list = new UsecaseListType();\n-        list.getUsecase().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.USECASES, ep));\n-        return list;\n+        list.getUsecase().addAll(FHIRTransformHelper.extractExtension(FHIRConstants.USECASES, ep));\n+\n+return list;\n     }\n \n     private static EndpointConfigurationListType buildEndpointConfig(EndpointType epType, Endpoint ep) {\n@@ -249,6 +252,7 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n         epConfig.setVersion(FHIRTransformHelper.extractVersion(FHIRConstants.VERSION, ep));\n         epConfig.setUrl(ep.getAddress());\n         epConfigList.getEndpointConfiguration().add(epConfig);\n-        return epConfigList;\n+\n+return epConfigList;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "170",
                    "column": "52",
                    "severity": "error",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "170",
                    "column": "80",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "208",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "218",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1538/FHIRTransform.java\nindex 29c9c052bc1..26466f61b43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/1538/FHIRTransform.java\n@@ -61,10 +61,13 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author tjafri\n  */\n+\n+\n public class FHIRTransform implements ExchangeTransforms<Bundle> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(FHIRTransform.class);\n \n+\n     @Override\n     public OrganizationListType transform(Bundle bundle) throws ExchangeTransformException {\n         try {\n@@ -164,7 +167,7 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n             addr.setCountry(fhirAddr.getCountry());\n             addr.setState(fhirAddr.getState());\n             addr.setZipcode(fhirAddr.getPostalCode());\n-            addr.setUse((null != fhirAddr.getUse()) ? fhirAddr.getUse().toCode() : null);\n+            addr.setUse((null != fhirAddr.getUse())? fhirAddr.getUse().toCode(): null);\n         }\n         return addr;\n     }\n@@ -184,16 +187,15 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n         if (CollectionUtils.isNotEmpty(contianedResources)) {\n             Map<String, EndpointType> endpointMap = new HashMap<>();\n             for (Resource res : contianedResources) {\n-                if (ResourceType.Endpoint.toString().equals(FHIRTransformHelper.extractResourceType(res.\n-                    getResourceType()))) {\n-                    buildEndpoint(endpointMap, (Endpoint) res);\n+                if (ResourceType.Endpoint.toString().equals(FHIRTransformHelper.extractResourceType(res.getResourceType()))) {\n+                    buildEndpoint(endpointMap, (Endpoint)\n+                                                   res);\n                 }\n             }\n             epListType = new EndpointListType();\n             epListType.getEndpoint().addAll(endpointMap.values());\n         }\n         return epListType;\n-\n     }\n \n     private static void buildEndpoint(Map<String, EndpointType> endpointMap, Endpoint ep) {\n@@ -203,7 +205,8 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n             return;\n         }\n         EndpointType epType;\n-        if (!endpointMap.containsKey(nwhinServiceName)) {\n+        if(!\n+               endpointMap.containsKey(nwhinServiceName)) {\n             epType = new EndpointType();\n             epType.getName().add(nwhinServiceName);\n             epType.setProfile(FHIRTransformHelper.extractCodeFromCodingElement(ep.getConnectionType()));\n@@ -212,7 +215,10 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n             epType.setUsecaseList(buildUseCases(ep));\n             epType.getPayloadFormat().addAll(FHIRTransformHelper.extractPayloadMimeType(ep.getPayloadMimeType()));\n             epType.getPayloadType().addAll(FHIRTransformHelper.extractPayloadType(ep.getPayloadType()));\n-        } else {\n+        }\n+\n+\n+else {\n             epType = endpointMap.get(nwhinServiceName);\n         }\n         epType.setEndpointConfigurationList(buildEndpointConfig(epType, ep));\n@@ -221,22 +227,19 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n \n     private static PurposeOfUseListType buildPurposeOfUse(Endpoint ep) {\n         PurposeOfUseListType puList = new PurposeOfUseListType();\n-        puList.getPurposeOfUse().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.PURPOSES_OF_USE, ep));\n+        puList.getPurposeOfUse().addAll(FHIRTransformHelper.extractExtension(FHIRConstants.PURPOSES_OF_USE, ep));\n         return puList;\n     }\n \n     private static RolesListType buildRoles(Endpoint ep) {\n         RolesListType list = new RolesListType();\n-        list.getRole().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.ROLES, ep));\n+        list.getRole().addAll(FHIRTransformHelper.extractExtension(FHIRConstants.ROLES, ep));\n         return list;\n     }\n \n     private static UsecaseListType buildUseCases(Endpoint ep) {\n         UsecaseListType list = new UsecaseListType();\n-        list.getUsecase().addAll(\n-            FHIRTransformHelper.extractExtension(FHIRConstants.USECASES, ep));\n+        list.getUsecase().addAll(FHIRTransformHelper.extractExtension(FHIRConstants.USECASES, ep));\n         return list;\n     }\n \n@@ -251,4 +254,5 @@ public class FHIRTransform implements ExchangeTransforms<Bundle> {\n         epConfigList.getEndpointConfiguration().add(epConfig);\n         return epConfigList;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1538/FHIRTransform.java\nindex 29c9c052bc1..b908aea2b49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/1538/FHIRTransform.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.exchange.transform.fhir;\n-\n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n import gov.hhs.fha.nhinc.exchange.directory.AddressType;\n import gov.hhs.fha.nhinc.exchange.directory.ContactType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1538/FHIRTransform.java\nindex 29c9c052bc1..e7ed3c027ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/1538/FHIRTransform.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/1538/FHIRTransform.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.exchange.transform.fhir;\n \n import gov.hhs.fha.nhinc.exchange.OrganizationListType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}