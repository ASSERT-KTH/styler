{
    "project_name": "aspose-words-cloud-aspose-words-cloud-java",
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "370",
                "column": "44",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "     */\n    public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n        return (ParagraphListFormatResponse)apiClient.deserialize(response, ParagraphListFormatResponse.class);\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/31/UpdateParagraphListFormatRequest.java\nindex d8f9e1823b5..58670db101b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler/31/UpdateParagraphListFormatRequest.java\n@@ -367,6 +367,6 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (ParagraphListFormatResponse)apiClient.deserialize(response, ParagraphListFormatResponse.class);\n+        return (ParagraphListFormatResponse) apiClient.deserialize(response, ParagraphListFormatResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/31/UpdateParagraphListFormatRequest.java\nindex d8f9e1823b5..2c488b1efd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/intellij/31/UpdateParagraphListFormatRequest.java\n@@ -10,10 +10,10 @@\n  *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  *  copies of the Software, and to permit persons to whom the Software is\n  *  furnished to do so, subject to the following conditions:\n- * \n+ *\n  *  The above copyright notice and this permission notice shall be included in all\n  *  copies or substantial portions of the Software.\n- * \n+ *\n  *  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -31,8 +31,10 @@ import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n import com.squareup.okhttp.*;\n+\n import javax.mail.MessagingException;\n import javax.mail.internet.MimeMultipart;\n+\n import java.io.*;\n import java.lang.reflect.Type;\n import java.util.*;\n@@ -344,8 +346,8 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n                 public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n                     com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n                     return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n+                        .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                        .build();\n                 }\n             });\n         }\n@@ -367,6 +369,6 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (ParagraphListFormatResponse)apiClient.deserialize(response, ParagraphListFormatResponse.class);\n+        return (ParagraphListFormatResponse) apiClient.deserialize(response, ParagraphListFormatResponse.class);\n     }\n }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "369",
                    "column": "44",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/31/UpdateParagraphListFormatRequest.java\nindex d8f9e1823b5..b42ae430de3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/naturalize/31/UpdateParagraphListFormatRequest.java\n@@ -277,10 +277,9 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      */\n     public void setRevisionDateTime(String value) {\n         this.revisionDateTime = value;\n-    }\n-\n+  }\n \n-    /*\n+/*\n      * Creates the http request based on this request model.\n      *\n      * @param apiClient ApiClient instance\n@@ -369,4 +368,4 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n     public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n         return (ParagraphListFormatResponse)apiClient.deserialize(response, ParagraphListFormatResponse.class);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/31/UpdateParagraphListFormatRequest.java\nindex d8f9e1823b5..03aa33e6c9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/codebuff/31/UpdateParagraphListFormatRequest.java\n@@ -26,7 +26,6 @@\n  */\n \n package com.aspose.words.cloud.model.requests;\n-\n import com.aspose.words.cloud.*;\n import com.aspose.words.cloud.model.*;\n import com.aspose.words.cloud.model.responses.*;\n@@ -40,61 +39,84 @@ import java.util.*;\n /*\n  * Request model for updateParagraphListFormat operation.\n  */\n+\n+\n public class UpdateParagraphListFormatRequest implements RequestIfc {\n     /*\n      * The filename of the input document.\n      */\n-    private String name;\n+\n+  private String name;\n \n     /*\n      * Object index.\n      */\n-    private Integer index;\n+\n+\n+  private Integer index;\n \n     /*\n      * ListFormatUpdate dto.\n      */\n-    private ListFormatUpdate listFormatDto;\n+\n+\n+  private ListFormatUpdate listFormatDto;\n \n     /*\n      * The path to the node in the document tree.\n      */\n-    private String nodePath;\n+\n+\n+  private String nodePath;\n \n     /*\n      * Original document folder.\n      */\n-    private String folder;\n+\n+\n+  private String folder;\n \n     /*\n      * Original document storage.\n      */\n-    private String storage;\n+\n+\n+  private String storage;\n \n     /*\n      * Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    private String loadEncoding;\n+\n+\n+  private String loadEncoding;\n \n     /*\n      * Password for opening an encrypted document.\n      */\n-    private String password;\n+\n+\n+  private String password;\n \n     /*\n      * Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    private String destFileName;\n+\n+\n+  private String destFileName;\n \n     /*\n      * Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    private String revisionAuthor;\n+\n+\n+  private String revisionAuthor;\n \n     /*\n      * The date and time to use for revisions.\n      */\n-    private String revisionDateTime;\n+\n+\n+  private String revisionDateTime;\n \n     /*\n      * Initializes a new instance of the UpdateParagraphListFormatRequest class.\n@@ -111,173 +133,198 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      * @param String revisionAuthor Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      * @param String revisionDateTime The date and time to use for revisions.\n      */\n-    public UpdateParagraphListFormatRequest(String name, Integer index, ListFormatUpdate listFormatDto, String nodePath, String folder, String storage, String loadEncoding, String password, String destFileName, String revisionAuthor, String revisionDateTime) {\n-        this.name = name;\n-        this.index = index;\n-        this.listFormatDto = listFormatDto;\n-        this.nodePath = nodePath;\n-        this.folder = folder;\n-        this.storage = storage;\n-        this.loadEncoding = loadEncoding;\n-        this.password = password;\n-        this.destFileName = destFileName;\n-        this.revisionAuthor = revisionAuthor;\n-        this.revisionDateTime = revisionDateTime;\n-    }\n+\n+\n+  public UpdateParagraphListFormatRequest(String name,  Integer index,  ListFormatUpdate listFormatDto,  String nodePath,  String folder,  String storage,  String loadEncoding,  String password,  String destFileName,  String revisionAuthor,  String revisionDateTime) {\n+    this.name = name;\n+    this.index = index;\n+    this.listFormatDto = listFormatDto;\n+    this.nodePath = nodePath;\n+    this.folder = folder;\n+    this.storage = storage;\n+    this.loadEncoding = loadEncoding;\n+    this.password = password;\n+    this.destFileName = destFileName;\n+    this.revisionAuthor = revisionAuthor;\n+    this.revisionDateTime = revisionDateTime;\n+  }\n \n     /*\n      * Gets The filename of the input document.\n      */\n-    public String getName() {\n-        return this.name;\n-    }\n+\n+\n+  public String getName() {\n+    return this.name;\n+  }\n \n     /*\n      * Sets The filename of the input document.\n      */\n-    public void setName(String value) {\n-        this.name = value;\n-    }\n+\n+  public void setName(String value) {\n+    this.name = value;\n+  }\n \n     /*\n      * Gets Object index.\n      */\n-    public Integer getIndex() {\n-        return this.index;\n-    }\n+\n+  public Integer getIndex() {\n+    return this.index;\n+  }\n \n     /*\n      * Sets Object index.\n      */\n-    public void setIndex(Integer value) {\n-        this.index = value;\n-    }\n+\n+  public void setIndex(Integer value) {\n+    this.index = value;\n+  }\n \n     /*\n      * Gets ListFormatUpdate dto.\n      */\n-    public ListFormatUpdate getListFormatDto() {\n-        return this.listFormatDto;\n-    }\n+\n+  public ListFormatUpdate getListFormatDto() {\n+    return this.listFormatDto;\n+  }\n \n     /*\n      * Sets ListFormatUpdate dto.\n      */\n-    public void setListFormatDto(ListFormatUpdate value) {\n-        this.listFormatDto = value;\n-    }\n+\n+  public void setListFormatDto(ListFormatUpdate value) {\n+    this.listFormatDto = value;\n+  }\n \n     /*\n      * Gets The path to the node in the document tree.\n      */\n-    public String getNodePath() {\n-        return this.nodePath;\n-    }\n+\n+  public String getNodePath() {\n+    return this.nodePath;\n+  }\n \n     /*\n      * Sets The path to the node in the document tree.\n      */\n-    public void setNodePath(String value) {\n-        this.nodePath = value;\n-    }\n+\n+  public void setNodePath(String value) {\n+    this.nodePath = value;\n+  }\n \n     /*\n      * Gets Original document folder.\n      */\n-    public String getFolder() {\n-        return this.folder;\n-    }\n+\n+  public String getFolder() {\n+    return this.folder;\n+  }\n \n     /*\n      * Sets Original document folder.\n      */\n-    public void setFolder(String value) {\n-        this.folder = value;\n-    }\n+\n+  public void setFolder(String value) {\n+    this.folder = value;\n+  }\n \n     /*\n      * Gets Original document storage.\n      */\n-    public String getStorage() {\n-        return this.storage;\n-    }\n+\n+  public String getStorage() {\n+    return this.storage;\n+  }\n \n     /*\n      * Sets Original document storage.\n      */\n-    public void setStorage(String value) {\n-        this.storage = value;\n-    }\n+\n+  public void setStorage(String value) {\n+    this.storage = value;\n+  }\n \n     /*\n      * Gets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public String getLoadEncoding() {\n-        return this.loadEncoding;\n-    }\n+\n+  public String getLoadEncoding() {\n+    return this.loadEncoding;\n+  }\n \n     /*\n      * Sets Encoding that will be used to load an HTML (or TXT) document if the encoding is not specified in HTML.\n      */\n-    public void setLoadEncoding(String value) {\n-        this.loadEncoding = value;\n-    }\n+\n+  public void setLoadEncoding(String value) {\n+    this.loadEncoding = value;\n+  }\n \n     /*\n      * Gets Password for opening an encrypted document.\n      */\n-    public String getPassword() {\n-        return this.password;\n-    }\n+\n+  public String getPassword() {\n+    return this.password;\n+  }\n \n     /*\n      * Sets Password for opening an encrypted document.\n      */\n-    public void setPassword(String value) {\n-        this.password = value;\n-    }\n+\n+  public void setPassword(String value) {\n+    this.password = value;\n+  }\n \n     /*\n      * Gets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public String getDestFileName() {\n-        return this.destFileName;\n-    }\n+\n+  public String getDestFileName() {\n+    return this.destFileName;\n+  }\n \n     /*\n      * Sets Result path of the document after the operation. If this parameter is omitted then result of the operation will be saved as the source document.\n      */\n-    public void setDestFileName(String value) {\n-        this.destFileName = value;\n-    }\n+\n+  public void setDestFileName(String value) {\n+    this.destFileName = value;\n+  }\n \n     /*\n      * Gets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public String getRevisionAuthor() {\n-        return this.revisionAuthor;\n-    }\n+\n+  public String getRevisionAuthor() {\n+    return this.revisionAuthor;\n+  }\n \n     /*\n      * Sets Initials of the author to use for revisions.If you set this parameter and then make some changes to the document programmatically, save the document and later open the document in MS Word you will see these changes as revisions.\n      */\n-    public void setRevisionAuthor(String value) {\n-        this.revisionAuthor = value;\n-    }\n+\n+  public void setRevisionAuthor(String value) {\n+    this.revisionAuthor = value;\n+  }\n \n     /*\n      * Gets The date and time to use for revisions.\n      */\n-    public String getRevisionDateTime() {\n-        return this.revisionDateTime;\n-    }\n+\n+  public String getRevisionDateTime() {\n+    return this.revisionDateTime;\n+  }\n \n     /*\n      * Sets The date and time to use for revisions.\n      */\n-    public void setRevisionDateTime(String value) {\n-        this.revisionDateTime = value;\n-    }\n+\n+  public void setRevisionDateTime(String value) {\n+    this.revisionDateTime = value;\n+  }\n \n \n     /*\n@@ -287,78 +334,76 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      * @throws ApiException If fail to serialize the request body object\n      * @throws IOException If fail to serialize the request body object\n      */\n-    public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener, Boolean addAuthHeaders) throws ApiException, IOException {\n+\n+  public Request buildHttpRequest(ApiClient apiClient, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener,  Boolean addAuthHeaders) throws ApiException, IOException {\n         // verify the required parameter 'Name' is set\n-        if (getName() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling updateParagraphListFormat\");\n-        }\n+    if (getName() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Name' when calling updateParagraphListFormat\");\n+    }\n \n         // verify the required parameter 'Index' is set\n-        if (getIndex() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Index' when calling updateParagraphListFormat\");\n-        }\n+    if (getIndex() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'Index' when calling updateParagraphListFormat\");\n+    }\n \n         // verify the required parameter 'ListFormatDto' is set\n-        if (getListFormatDto() == null) {\n-            throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'ListFormatDto' when calling updateParagraphListFormat\");\n-        }\n+    if (getListFormatDto() == null) {\n+      throw new ApiException(apiClient.getBadRequestCode(), \"Missing the required parameter 'ListFormatDto' when calling updateParagraphListFormat\");\n+    }\n \n-        Object localVarPostBody = getListFormatDto();\n+    Object localVarPostBody = getListFormatDto();\n \n         // create path and map variables\n-        String localVarPath = \"/words/{name}/{nodePath}/paragraphs/{index}/listFormat\";\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"index\", getIndex());\n-        localVarPath = apiClient.addParameterToPath(localVarPath, \"nodePath\", getNodePath());\n-        localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n-\n-        List<Pair> localVarQueryParams = new ArrayList<Pair>();\n-        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n-        apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n-        apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n-\n-        Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n-\n-        Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n-\n-        final String[] localVarAccepts = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n-        if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n-\n-        final String[] localVarContentTypes = {\n-            \"application/xml\", \"application/json\"\n-        };\n-        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n-        localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n-\n-        if (progressListener != null) {\n-            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n-                @Override\n-                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n-                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n-                    return originalResponse.newBuilder()\n-                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))\n-                    .build();\n-                }\n-            });\n-        }\n-\n-        return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+    String localVarPath = \"/words/{name}/{nodePath}/paragraphs/{index}/listFormat\";\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"name\", getName());\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"index\", getIndex());\n+    localVarPath = apiClient.addParameterToPath(localVarPath, \"nodePath\", getNodePath());\n+    localVarPath = localVarPath.replaceAll(\"//\", \"/\");\n+\n+    List<Pair> localVarQueryParams = new ArrayList<Pair>();\n+    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();\n+    apiClient.addParameterToQuery(localVarQueryParams, \"folder\", getFolder());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"storage\", getStorage());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"loadEncoding\", getLoadEncoding());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"password\", getPassword());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"destFileName\", getDestFileName());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionAuthor\", getRevisionAuthor());\n+    apiClient.addParameterToQuery(localVarQueryParams, \"revisionDateTime\", getRevisionDateTime());\n+\n+    Map<String, String> localVarHeaderParams = new HashMap<String, String>();\n+    Map<String, Object> localVarFormParams = new LinkedHashMap<String, Object>();\n+    final String[] localVarAccepts = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);\n+    if (localVarAccept != null) localVarHeaderParams.put(\"Accept\", localVarAccept);\n+\n+    final String[] localVarContentTypes = {\n+         \"application/xml\", \"application/json\"\n+    };\n+    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);\n+    localVarHeaderParams.put(\"Content-Type\", localVarContentType);\n+\n+    if (progressListener != null) {\n+        apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {\n+          @Override\n+          public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {\n+            com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());\n+            return originalResponse.newBuilder().body(new ProgressResponseBody(originalResponse.body(), progressListener))\n+                                                .build();\n+          }\n+        });\n     }\n+    return apiClient.buildRequest(localVarPath, \"PUT\", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, addAuthHeaders, progressRequestListener);\n+  }\n \n     /*\n      * Gets response type for this request.\n      */\n-    public Type getResponseType() {\n-        return ParagraphListFormatResponse.class;\n-    }\n+\n+  public Type getResponseType() {\n+    return ParagraphListFormatResponse.class;\n+  }\n \n     /*\n      * Deserialize response message.\n@@ -366,7 +411,9 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      * @param apiClient ApiClient instance\n      * @param response Response instance\n      */\n-    public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (ParagraphListFormatResponse)apiClient.deserialize(response, ParagraphListFormatResponse.class);\n-    }\n-}\n+\n+  public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient,  Response response) throws ApiException, MessagingException, IOException {\n+    return (ParagraphListFormatResponse) apiClient.deserialize(response, ParagraphListFormatResponse.class);\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 208
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/31/UpdateParagraphListFormatRequest.java\nindex d8f9e1823b5..58670db101b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_random/31/UpdateParagraphListFormatRequest.java\n@@ -367,6 +367,6 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (ParagraphListFormatResponse)apiClient.deserialize(response, ParagraphListFormatResponse.class);\n+        return (ParagraphListFormatResponse) apiClient.deserialize(response, ParagraphListFormatResponse.class);\n     }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/31/UpdateParagraphListFormatRequest.java\nindex d8f9e1823b5..61223fc8bf9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/errored/1/31/UpdateParagraphListFormatRequest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/aspose-words-cloud-aspose-words-cloud-java/styler_three_grams/31/UpdateParagraphListFormatRequest.java\n@@ -367,6 +367,6 @@ public class UpdateParagraphListFormatRequest implements RequestIfc {\n      * @param response Response instance\n      */\n     public ParagraphListFormatResponse deserializeResponse(ApiClient apiClient, Response response) throws ApiException, MessagingException, IOException {\n-        return (ParagraphListFormatResponse)apiClient.deserialize(response, ParagraphListFormatResponse.class);\n+        return (ParagraphListFormatResponse)  apiClient.deserialize(response, ParagraphListFormatResponse.class);\n     }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}