{
    "project_name": "neo4j-neo4j",
    "error_id": "519",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/519/KeySearch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/519/KeySearch.java\nindex 063df5c4c42..baf61fb325d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/519/KeySearch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/519/KeySearch.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.util.Comparator;\n@@ -29,13 +30,13 @@ import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n  */\n class KeySearch\n {\n-    private static final int POSITION_MASK   = 0x3FFFFFFF;\n-    private static final int HIT_FLAG        = 0x80000000;\n-    private static final int NO_HIT_FLAG     = 0x00000000;\n-    private static final int HIT_MASK        = HIT_FLAG | NO_HIT_FLAG;\n-    private static final int SUCCESS_FLAG    = 0x00000000;\n+    private static final int POSITION_MASK = 0x3FFFFFFF;\n+    private static final int HIT_FLAG = 0x80000000;\n+    private static final int NO_HIT_FLAG = 0x00000000;\n+    private static final int HIT_MASK = HIT_FLAG | NO_HIT_FLAG;\n+    private static final int SUCCESS_FLAG = 0x00000000;\n     private static final int NO_SUCCESS_FLAG = 0x40000000;\n-    private static final int SUCCESS_MASK    = SUCCESS_FLAG | NO_SUCCESS_FLAG;\n+    private static final int SUCCESS_MASK = SUCCESS_FLAG | NO_SUCCESS_FLAG;\n \n     private KeySearch()\n     {\n@@ -53,24 +54,24 @@ class KeySearch\n      * <p>\n      * Leaves cursor on same page as when called. No guarantees on offset.\n      *\n-     * @param cursor {@link PageCursor} pinned to page with node (internal or leaf does not matter)\n+     * @param cursor    {@link PageCursor} pinned to page with node (internal or leaf does not matter)\n      * @param bTreeNode {@link TreeNode} that knows how to operate on KEY and VALUE\n-     * @param type {@link TreeNode.Type} of this tree node being searched\n-     * @param key KEY to search for\n-     * @param readKey KEY to use as temporary storage during calculation.\n-     * @param keyCount number of keys in node when starting search\n+     * @param type      {@link TreeNode.Type} of this tree node being searched\n+     * @param key       KEY to search for\n+     * @param readKey   KEY to use as temporary storage during calculation.\n+     * @param keyCount  number of keys in node when starting search\n      * @return search result where least significant 31 bits are first position i for which\n      * bTreeNode.keyComparator().compare( key, bTreeNode.keyAt( i ) <= 0, or keyCount if no such key exists.\n      * highest bit (sign bit) says whether or not the exact key was found in the node, if so set to 1, otherwise 0.\n      * To extract position from the returned search result, then use {@link #positionOf(int)}.\n      * To extract whether or not the exact key was found, then use {@link #isHit(int)}.\n      */\n-    static <KEY,VALUE> int search( PageCursor cursor, TreeNode<KEY,VALUE> bTreeNode, TreeNode.Type type, KEY key,\n-            KEY readKey, int keyCount, PageCursorTracer cursorTracer )\n+    static <KEY, VALUE> int search(PageCursor cursor, TreeNode<KEY, VALUE> bTreeNode, TreeNode.Type type, KEY key,\n+                                   KEY readKey, int keyCount, PageCursorTracer cursorTracer)\n     {\n-        if ( keyCount == 0 )\n+        if (keyCount == 0)\n         {\n-            return searchResult( 0, false );\n+            return searchResult(0, false);\n         }\n \n         int lower = 0;\n@@ -83,81 +84,79 @@ class KeySearch\n         int comparison;\n \n         // key greater than greatest key in node\n-        if ( comparator.compare( key, bTreeNode.keyAt( cursor, readKey, higher, type, cursorTracer ) ) > 0 )\n+        if (comparator.compare(key, bTreeNode.keyAt(cursor, readKey, higher, type, cursorTracer)) > 0)\n         {\n             pos = keyCount;\n         }\n         // key smaller than or equal to smallest key in node\n-        else if ( (comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, lower, type, cursorTracer ) )) <= 0 )\n+        else if ((comparison = comparator.compare(key, bTreeNode.keyAt(cursor, readKey, lower, type, cursorTracer))) <= 0)\n         {\n-            if ( comparison == 0 )\n+            if (comparison == 0)\n             {\n                 hit = true;\n             }\n             pos = 0;\n-        }\n-        else\n+        } else\n         {\n             // Start binary search\n             // If key <= keyAtPos -> move higher to pos\n             // If key > keyAtPos -> move lower to pos+1\n             // Terminate when lower == higher\n-            while ( lower < higher )\n+            while (lower < higher)\n             {\n                 pos = (lower + higher) / 2;\n-                comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type, cursorTracer ) );\n-                if ( comparison <= 0 )\n+                comparison = comparator.compare(key, bTreeNode.keyAt(cursor, readKey, pos, type, cursorTracer));\n+                if (comparison <= 0)\n                 {\n                     higher = pos;\n-                }\n-                else\n+                } else\n                 {\n                     lower = pos + 1;\n                 }\n             }\n-            if ( lower != higher )\n+            if (lower != higher)\n             {\n                 return NO_SUCCESS_FLAG;\n             }\n             pos = lower;\n \n-            hit = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type, cursorTracer ) ) == 0;\n+            hit = comparator.compare(key, bTreeNode.keyAt(cursor, readKey, pos, type, cursorTracer)) == 0;\n         }\n-        return searchResult( pos, hit );\n+        return searchResult(pos, hit);\n     }\n \n-    private static int searchResult( int pos, boolean hit )\n+    private static int searchResult(int pos, boolean hit)\n     {\n         return (pos & POSITION_MASK) | (hit ? HIT_FLAG : NO_HIT_FLAG);\n     }\n \n     /**\n      * Extracts the position from a search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int, PageCursorTracer)}.\n-     *\n+     * <p>\n      * Note! If position will be used as position for child pointer, use {@link #childPositionOf(int)} instead.\n      *\n      * @param searchResult search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int, PageCursorTracer)}.\n      * @return position of the search result.\n      */\n-    static int positionOf( int searchResult )\n+    static int positionOf(int searchResult)\n     {\n         return searchResult & POSITION_MASK;\n     }\n \n     /**\n      * Extracts the position from a search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int, PageCursorTracer)}.\n-     *\n+     * <p>\n      * Because the extracted position will be used as position for child pointer we need\n      * to take care of the special case where we had an exact match on the key. This is why:\n      * - KeySearch find the left most pos such that keyAtPos obeys key <= keyAtPos.\n      * - We want to follow the child pointer to the left of keyAtPos unless key == keyAtPos,\n-     *   in which case we want to follow the pointer to the right. This is of course because everything\n-     *   larger than _or equal_ to key belongs to right subtree.\n+     * in which case we want to follow the pointer to the right. This is of course because everything\n+     * larger than _or equal_ to key belongs to right subtree.\n      */\n-    static int childPositionOf( int searchResult )\n+    static int childPositionOf(int searchResult)\n     {\n-        int pos = positionOf( searchResult );\n-        if ( isHit( searchResult ) )\n+        int pos = positionOf(searchResult);\n+        if (isHit(searchResult))\n         {\n             return pos + 1;\n         }\n@@ -171,21 +170,21 @@ class KeySearch\n      * @param searchResult search result form {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int, PageCursorTracer)}.\n      * @return whether or not the searched key was found.\n      */\n-    static boolean isHit( int searchResult )\n+    static boolean isHit(int searchResult)\n     {\n         return (searchResult & HIT_MASK) == HIT_FLAG;\n     }\n \n-    static boolean isSuccess( int searchResult )\n+    static boolean isSuccess(int searchResult)\n     {\n         return (searchResult & SUCCESS_MASK) == SUCCESS_FLAG;\n     }\n \n-    static void assertSuccess( int searchResult )\n+    static void assertSuccess(int searchResult)\n     {\n-        if ( !isSuccess( searchResult ) )\n+        if (!isSuccess(searchResult))\n         {\n-            throw new TreeInconsistencyException( \"Search terminated in unexpected way\" );\n+            throw new TreeInconsistencyException(\"Search terminated in unexpected way\");\n         }\n     }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}