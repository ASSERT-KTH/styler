{
    "project_name": "wso2-attic-commons",
    "error_id": "522",
    "information": {
        "errors": [
            {
                "line": "31",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 136).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        if (name != null && extension != null) {\n            throw new QueryCreationException(\"Wrongly formatted window, window has both name & extension as \" + name + \" \" + extension);\n        } else if (name == null && extension == null) {\n            throw new QueryCreationException(\"Wrongly formatted window, window has no name or extension\");\n        } else if (name != null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/522/SiddhiClassLoader.java\nindex 9af634cd28a..15f726c129f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/522/SiddhiClassLoader.java\n@@ -28,8 +28,9 @@ public class SiddhiClassLoader {\n                                        AbstractExtensionHolder extensionHolder) {\n \n         if (name != null && extension != null) {\n-            throw new QueryCreationException(\"Wrongly formatted window, window has both name & extension as \" + name + \" \" + extension);\n-        } else if (name == null && extension == null) {\n+            throw new QueryCreationException(\"Wrongly formatted window, window has both name & extension as \" +\n+                    name + \" \" + extension);\n+         } else if (name == null && extension == null) {\n             throw new QueryCreationException(\"Wrongly formatted window, window has no name or extension\");\n         } else if (name != null) {\n             return loadSiddhiImplementation(name, interfaze);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/522/SiddhiClassLoader.java\nindex 9af634cd28a..cbbe1b07bd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/522/SiddhiClassLoader.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.util;\n \n import org.wso2.siddhi.core.exception.CannotLoadClassException;\n@@ -24,65 +25,66 @@ import org.wso2.siddhi.query.api.extension.Extension;\n \n public class SiddhiClassLoader {\n \n-    public static Object loadProcessor(String name, Extension extension, Class interfaze,\n-                                       AbstractExtensionHolder extensionHolder) {\n-\n-        if (name != null && extension != null) {\n-            throw new QueryCreationException(\"Wrongly formatted window, window has both name & extension as \" + name + \" \" + extension);\n-        } else if (name == null && extension == null) {\n-            throw new QueryCreationException(\"Wrongly formatted window, window has no name or extension\");\n-        } else if (name != null) {\n-            return loadSiddhiImplementation(name, interfaze);\n-        } else {\n-            return loadExtensionImplementation(extension, extensionHolder);\n-        }\n+  public static Object loadProcessor(String name, Extension extension, Class interfaze,\n+                                     AbstractExtensionHolder extensionHolder) {\n \n+    if (name != null && extension != null) {\n+      throw new QueryCreationException(\n+        \"Wrongly formatted window, window has both name & extension as \" + name + \" \" + extension);\n+    } else if (name == null && extension == null) {\n+      throw new QueryCreationException(\"Wrongly formatted window, window has no name or extension\");\n+    } else if (name != null) {\n+      return loadSiddhiImplementation(name, interfaze);\n+    } else {\n+      return loadExtensionImplementation(extension, extensionHolder);\n     }\n \n-    private static Object loadClass(String name) throws CannotLoadClassException {\n-        try {\n-            return Class.forName(name).newInstance();\n-        } catch (InstantiationException e) {\n-            throw new CannotLoadClassException(\"Cannot load class: \" + name, e);\n-        } catch (IllegalAccessException e) {\n-            throw new CannotLoadClassException(\"Cannot load class: \" + name, e);\n-        } catch (ClassNotFoundException e) {\n-            throw new CannotLoadClassException(\"Cannot load class: \" + name, e);\n-        }\n+  }\n \n+  private static Object loadClass(String name) throws CannotLoadClassException {\n+    try {\n+      return Class.forName(name).newInstance();\n+    } catch (InstantiationException e) {\n+      throw new CannotLoadClassException(\"Cannot load class: \" + name, e);\n+    } catch (IllegalAccessException e) {\n+      throw new CannotLoadClassException(\"Cannot load class: \" + name, e);\n+    } catch (ClassNotFoundException e) {\n+      throw new CannotLoadClassException(\"Cannot load class: \" + name, e);\n     }\n \n-    private static Object loadClass(Class clazz) throws CannotLoadClassException {\n-        try {\n-            return clazz.newInstance();\n-        } catch (InstantiationException e) {\n-            throw new CannotLoadClassException(\"Cannot load class: \" + clazz.getName(), e);\n-        } catch (IllegalAccessException e) {\n-            throw new CannotLoadClassException(\"Cannot load class: \" + clazz.getName(), e);\n-        }\n+  }\n+\n+  private static Object loadClass(Class clazz) throws CannotLoadClassException {\n+    try {\n+      return clazz.newInstance();\n+    } catch (InstantiationException e) {\n+      throw new CannotLoadClassException(\"Cannot load class: \" + clazz.getName(), e);\n+    } catch (IllegalAccessException e) {\n+      throw new CannotLoadClassException(\"Cannot load class: \" + clazz.getName(), e);\n     }\n+  }\n \n-    public static Object loadExtensionImplementation(Extension extension,\n-                                                     AbstractExtensionHolder extensionHolder) {\n-        Class clazz = extensionHolder.getExtension(extension.getNamespace(), extension.getFunction());\n-        if (clazz == null) {\n-            throw new QueryCreationException(\"No extension exist for \" + extension, true);\n-        }\n-        try {\n-            return SiddhiClassLoader.loadClass(clazz);\n-        } catch (CannotLoadClassException e) {\n-            throw new QueryCreationException(\"Extension \" + clazz.getName() + \" cannot be loaded!\", true);\n+  public static Object loadExtensionImplementation(Extension extension,\n+                                                   AbstractExtensionHolder extensionHolder) {\n+    Class clazz = extensionHolder.getExtension(extension.getNamespace(), extension.getFunction());\n+    if (clazz == null) {\n+      throw new QueryCreationException(\"No extension exist for \" + extension, true);\n+    }\n+    try {\n+      return SiddhiClassLoader.loadClass(clazz);\n+    } catch (CannotLoadClassException e) {\n+      throw new QueryCreationException(\"Extension \" + clazz.getName() + \" cannot be loaded!\", true);\n \n-        }\n     }\n+  }\n \n-    public static Object loadSiddhiImplementation(String name, Class interfaze) {\n-        try {\n-            return SiddhiClassLoader.loadClass(interfaze.getPackage().getName() +\n-                                               \".\" + name.substring(0, 1).toUpperCase() +\n-                                               name.substring(1) + interfaze.getSimpleName());\n-        } catch (CannotLoadClassException e) {\n-            throw new QueryCreationException(name + \" does not exist in type \" + interfaze.getSimpleName(), e, true);\n-        }\n+  public static Object loadSiddhiImplementation(String name, Class interfaze) {\n+    try {\n+      return SiddhiClassLoader.loadClass(interfaze.getPackage().getName() +\n+        \".\" + name.substring(0, 1).toUpperCase() +\n+        name.substring(1) + interfaze.getSimpleName());\n+    } catch (CannotLoadClassException e) {\n+      throw new QueryCreationException(name + \" does not exist in type \" + interfaze.getSimpleName(), e, true);\n     }\n+  }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/522/SiddhiClassLoader.java\nindex 9af634cd28a..ba231097491 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/522/SiddhiClassLoader.java\n@@ -26,8 +26,7 @@ public class SiddhiClassLoader {\n \n     public static Object loadProcessor(String name, Extension extension, Class interfaze,\n                                        AbstractExtensionHolder extensionHolder) {\n-\n-        if (name != null && extension != null) {\n+    if (name != null && extension != null) {\n             throw new QueryCreationException(\"Wrongly formatted window, window has both name & extension as \" + name + \" \" + extension);\n         } else if (name == null && extension == null) {\n             throw new QueryCreationException(\"Wrongly formatted window, window has no name or extension\");\n@@ -62,9 +61,8 @@ public class SiddhiClassLoader {\n         }\n     }\n \n-    public static Object loadExtensionImplementation(Extension extension,\n-                                                     AbstractExtensionHolder extensionHolder) {\n-        Class clazz = extensionHolder.getExtension(extension.getNamespace(), extension.getFunction());\n+    public static Object loadExtensionImplementation(Extension extension, AbstractExtensionHolder extensionHolder) {\n+    Class clazz = extensionHolder.getExtension(extension.getNamespace(), extension.getFunction());\n         if (clazz == null) {\n             throw new QueryCreationException(\"No extension exist for \" + extension, true);\n         }\n@@ -72,17 +70,15 @@ public class SiddhiClassLoader {\n             return SiddhiClassLoader.loadClass(clazz);\n         } catch (CannotLoadClassException e) {\n             throw new QueryCreationException(\"Extension \" + clazz.getName() + \" cannot be loaded!\", true);\n-\n-        }\n+    }\n     }\n \n     public static Object loadSiddhiImplementation(String name, Class interfaze) {\n         try {\n-            return SiddhiClassLoader.loadClass(interfaze.getPackage().getName() +\n-                                               \".\" + name.substring(0, 1).toUpperCase() +\n+            return SiddhiClassLoader.loadClass(interfaze.getPackage().getName() + \".\" + name.substring(0, 1).toUpperCase() +\n                                                name.substring(1) + interfaze.getSimpleName());\n-        } catch (CannotLoadClassException e) {\n+    } catch (CannotLoadClassException e) {\n             throw new QueryCreationException(name + \" does not exist in type \" + interfaze.getSimpleName(), e, true);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/522/SiddhiClassLoader.java\nindex 9af634cd28a..15f726c129f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/522/SiddhiClassLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/522/SiddhiClassLoader.java\n@@ -28,8 +28,9 @@ public class SiddhiClassLoader {\n                                        AbstractExtensionHolder extensionHolder) {\n \n         if (name != null && extension != null) {\n-            throw new QueryCreationException(\"Wrongly formatted window, window has both name & extension as \" + name + \" \" + extension);\n-        } else if (name == null && extension == null) {\n+            throw new QueryCreationException(\"Wrongly formatted window, window has both name & extension as \" +\n+                    name + \" \" + extension);\n+         } else if (name == null && extension == null) {\n             throw new QueryCreationException(\"Wrongly formatted window, window has no name or extension\");\n         } else if (name != null) {\n             return loadSiddhiImplementation(name, interfaze);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}