{
    "project_name": "graphfoundation-ongdb",
    "error_id": "122",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/122/DynamicIndexStoreView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/122/DynamicIndexStoreView.java\nindex 723c2812141..9fa1585c010 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/122/DynamicIndexStoreView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/122/DynamicIndexStoreView.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import org.apache.commons.lang3.ArrayUtils;\n@@ -47,99 +48,98 @@ import org.neo4j.values.storable.Value;\n  */\n public class DynamicIndexStoreView implements IndexStoreView\n {\n-    private static boolean USE_LABEL_INDEX_FOR_SCHEMA_INDEX_POPULATION = FeatureToggles.flag(\n-            DynamicIndexStoreView.class, \"use.label.index\", true );\n-\n-    private final NeoStoreIndexStoreView neoStoreIndexStoreView;\n-    private final LabelScanStore labelScanStore;\n-    protected final LockService locks;\n-    private final Log log;\n-    protected final NodeStore nodeStore;\n-    protected final PropertyStore propertyStore;\n-\n-    public DynamicIndexStoreView( NeoStoreIndexStoreView neoStoreIndexStoreView, LabelScanStore labelScanStore, LockService locks,\n-            NeoStores neoStores, LogProvider logProvider )\n-    {\n-        this.nodeStore = neoStores.getNodeStore();\n-        this.propertyStore = neoStores.getPropertyStore();\n-        this.neoStoreIndexStoreView = neoStoreIndexStoreView;\n-        this.locks = locks;\n-        this.labelScanStore = labelScanStore;\n-        this.log = logProvider.getLog( getClass() );\n-    }\n-\n-    @Override\n-    public <FAILURE extends Exception> StoreScan<FAILURE> visitNodes( int[] labelIds,\n-            IntPredicate propertyKeyIdFilter, Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor,\n-            Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor,\n-            boolean forceStoreScan )\n-    {\n-        if ( forceStoreScan || !USE_LABEL_INDEX_FOR_SCHEMA_INDEX_POPULATION || useAllNodeStoreScan( labelIds ) )\n-        {\n-            return neoStoreIndexStoreView.visitNodes( labelIds, propertyKeyIdFilter, propertyUpdatesVisitor, labelUpdateVisitor,\n-                    forceStoreScan );\n-        }\n-        return new LabelScanViewNodeStoreScan<>( nodeStore, locks, propertyStore, labelScanStore, labelUpdateVisitor,\n-                propertyUpdatesVisitor, labelIds, propertyKeyIdFilter );\n-    }\n-\n-    @Override\n-    public NodeUpdates nodeAsUpdates( long nodeId )\n-    {\n-        return neoStoreIndexStoreView.nodeAsUpdates( nodeId );\n-    }\n-\n-    @Override\n-    public Register.DoubleLongRegister indexUpdatesAndSize( long indexId, Register.DoubleLongRegister output )\n-    {\n-        return neoStoreIndexStoreView.indexUpdatesAndSize( indexId, output );\n-    }\n-\n-    @Override\n-    public Register.DoubleLongRegister indexSample( long indexId, Register.DoubleLongRegister output )\n-    {\n-        return neoStoreIndexStoreView.indexSample( indexId, output );\n-    }\n-\n-    @Override\n-    public void replaceIndexCounts( long indexId, long uniqueElements, long maxUniqueElements, long indexSize )\n-    {\n-        neoStoreIndexStoreView.replaceIndexCounts( indexId, uniqueElements, maxUniqueElements, indexSize );\n-    }\n-\n-    @Override\n-    public void incrementIndexUpdates( long indexId, long updatesDelta )\n-    {\n-        neoStoreIndexStoreView.incrementIndexUpdates( indexId, updatesDelta );\n-    }\n-\n-    private boolean useAllNodeStoreScan( int[] labelIds )\n+  private static boolean USE_LABEL_INDEX_FOR_SCHEMA_INDEX_POPULATION = FeatureToggles.flag(\n+      DynamicIndexStoreView.class, \"use.label.index\", true);\n+\n+  private final NeoStoreIndexStoreView neoStoreIndexStoreView;\n+  private final LabelScanStore labelScanStore;\n+  protected final LockService locks;\n+  private final Log log;\n+  protected final NodeStore nodeStore;\n+  protected final PropertyStore propertyStore;\n+\n+  public DynamicIndexStoreView(NeoStoreIndexStoreView neoStoreIndexStoreView, LabelScanStore labelScanStore, LockService locks,\n+                               NeoStores neoStores, LogProvider logProvider)\n+  {\n+    this.nodeStore = neoStores.getNodeStore();\n+    this.propertyStore = neoStores.getPropertyStore();\n+    this.neoStoreIndexStoreView = neoStoreIndexStoreView;\n+    this.locks = locks;\n+    this.labelScanStore = labelScanStore;\n+    this.log = logProvider.getLog(getClass());\n+  }\n+\n+  @Override\n+  public <FAILURE extends Exception> StoreScan<FAILURE> visitNodes(int[] labelIds,\n+                                                                   IntPredicate propertyKeyIdFilter, Visitor<NodeUpdates, FAILURE> propertyUpdatesVisitor,\n+                                                                   Visitor<NodeLabelUpdate, FAILURE> labelUpdateVisitor,\n+                                                                   boolean forceStoreScan)\n+  {\n+    if (forceStoreScan || !USE_LABEL_INDEX_FOR_SCHEMA_INDEX_POPULATION || useAllNodeStoreScan(labelIds))\n     {\n-        try\n-        {\n-            return ArrayUtils.isEmpty( labelIds ) || isEmptyLabelScanStore();\n-        }\n-        catch ( Exception e )\n-        {\n-            log.error( \"Can not determine number of labeled nodes, falling back to all nodes scan.\", e );\n-            return true;\n-        }\n+      return neoStoreIndexStoreView.visitNodes(labelIds, propertyKeyIdFilter, propertyUpdatesVisitor, labelUpdateVisitor,\n+          forceStoreScan);\n     }\n-\n-    private boolean isEmptyLabelScanStore() throws Exception\n+    return new LabelScanViewNodeStoreScan<>(nodeStore, locks, propertyStore, labelScanStore, labelUpdateVisitor,\n+        propertyUpdatesVisitor, labelIds, propertyKeyIdFilter);\n+  }\n+\n+  @Override\n+  public NodeUpdates nodeAsUpdates(long nodeId)\n+  {\n+    return neoStoreIndexStoreView.nodeAsUpdates(nodeId);\n+  }\n+\n+  @Override\n+  public Register.DoubleLongRegister indexUpdatesAndSize(long indexId, Register.DoubleLongRegister output)\n+  {\n+    return neoStoreIndexStoreView.indexUpdatesAndSize(indexId, output);\n+  }\n+\n+  @Override\n+  public Register.DoubleLongRegister indexSample(long indexId, Register.DoubleLongRegister output)\n+  {\n+    return neoStoreIndexStoreView.indexSample(indexId, output);\n+  }\n+\n+  @Override\n+  public void replaceIndexCounts(long indexId, long uniqueElements, long maxUniqueElements, long indexSize)\n+  {\n+    neoStoreIndexStoreView.replaceIndexCounts(indexId, uniqueElements, maxUniqueElements, indexSize);\n+  }\n+\n+  @Override\n+  public void incrementIndexUpdates(long indexId, long updatesDelta)\n+  {\n+    neoStoreIndexStoreView.incrementIndexUpdates(indexId, updatesDelta);\n+  }\n+\n+  private boolean useAllNodeStoreScan(int[] labelIds)\n+  {\n+    try\n     {\n-        return labelScanStore.isEmpty();\n-    }\n-\n-    @Override\n-    public Value getPropertyValue( long nodeId, int propertyKeyId ) throws EntityNotFoundException\n-    {\n-        return neoStoreIndexStoreView.getPropertyValue( nodeId, propertyKeyId );\n-    }\n-\n-    @Override\n-    public void loadProperties( long nodeId, PrimitiveIntSet propertyIds, PropertyLoadSink sink )\n+      return ArrayUtils.isEmpty(labelIds) || isEmptyLabelScanStore();\n+    } catch (Exception e)\n     {\n-        neoStoreIndexStoreView.loadProperties( nodeId, propertyIds, sink );\n+      log.error(\"Can not determine number of labeled nodes, falling back to all nodes scan.\", e);\n+      return true;\n     }\n+  }\n+\n+  private boolean isEmptyLabelScanStore() throws Exception\n+  {\n+    return labelScanStore.isEmpty();\n+  }\n+\n+  @Override\n+  public Value getPropertyValue(long nodeId, int propertyKeyId) throws EntityNotFoundException\n+  {\n+    return neoStoreIndexStoreView.getPropertyValue(nodeId, propertyKeyId);\n+  }\n+\n+  @Override\n+  public void loadProperties(long nodeId, PrimitiveIntSet propertyIds, PropertyLoadSink sink)\n+  {\n+    neoStoreIndexStoreView.loadProperties(nodeId, propertyIds, sink);\n+  }\n }\n",
            "diff_size": 145
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/122/DynamicIndexStoreView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/122/DynamicIndexStoreView.java\nindex 723c2812141..013ef89cfec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/122/DynamicIndexStoreView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/122/DynamicIndexStoreView.java\n@@ -47,10 +47,8 @@ import org.neo4j.values.storable.Value;\n  */\n public class DynamicIndexStoreView implements IndexStoreView\n {\n-    private static boolean USE_LABEL_INDEX_FOR_SCHEMA_INDEX_POPULATION = FeatureToggles.flag(\n-            DynamicIndexStoreView.class, \"use.label.index\", true );\n-\n-    private final NeoStoreIndexStoreView neoStoreIndexStoreView;\n+    private static boolean USE_LABEL_INDEX_FOR_SCHEMA_INDEX_POPULATION = FeatureToggles.flag( DynamicIndexStoreView.class, \"use.label.index\", true );\n+private final NeoStoreIndexStoreView neoStoreIndexStoreView;\n     private final LabelScanStore labelScanStore;\n     protected final LockService locks;\n     private final Log log;\n@@ -70,8 +68,7 @@ public class DynamicIndexStoreView implements IndexStoreView\n \n     @Override\n     public <FAILURE extends Exception> StoreScan<FAILURE> visitNodes( int[] labelIds,\n-            IntPredicate propertyKeyIdFilter, Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor,\n-            Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor,\n+            IntPredicate propertyKeyIdFilter, Visitor<NodeUpdates,FAILURE> propertyUpdatesVisitor, Visitor<NodeLabelUpdate,FAILURE> labelUpdateVisitor,\n             boolean forceStoreScan )\n     {\n         if ( forceStoreScan || !USE_LABEL_INDEX_FOR_SCHEMA_INDEX_POPULATION || useAllNodeStoreScan( labelIds ) )\n@@ -142,4 +139,4 @@ public class DynamicIndexStoreView implements IndexStoreView\n     {\n         neoStoreIndexStoreView.loadProperties( nodeId, propertyIds, sink );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}