{
    "project_name": "jflex-de-jflex",
    "error_id": "69",
    "information": {
        "errors": [
            {
                "line": "26",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage jflex.testing.testsuite;\n\nimport static com.google.common.base.Preconditions.checkNotNull;\nimport static com.google.common.truth.Truth.assertWithMessage;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/69/JFlexTestRunner.java\nindex edfd8c1f71a..a91cdbe03ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler/69/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/69/JFlexTestRunner.java\nindex edfd8c1f71a..3fcd0288edf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/intellij/69/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -133,8 +134,8 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n       invokeJflex();\n     } catch (Throwable e) {\n       assertWithMessage(\n-              \"@TestCase indicates that the jflex generation must throw a \"\n-                  + spec.generatorThrows().getSimpleName())\n+          \"@TestCase indicates that the jflex generation must throw a \"\n+              + spec.generatorThrows().getSimpleName())\n           .that(e)\n           .isInstanceOf(spec.generatorThrows());\n       if (spec.generatorThrowableCause() == Void.class) {\n@@ -143,8 +144,8 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n             .isNull();\n       } else if (spec.generatorThrowableCause() != NoExceptionThrown.class) {\n         assertWithMessage(\n-                \"@TestCase indicates that cause of the generator exception is %s but it was %s\\n\",\n-                spec.generatorThrowableCause().getSimpleName(), e.getCause())\n+            \"@TestCase indicates that cause of the generator exception is %s but it was %s\\n\",\n+            spec.generatorThrowableCause().getSimpleName(), e.getCause())\n             .that(e.getCause())\n             .isInstanceOf(spec.generatorThrowableCause());\n       }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "125",
                    "column": "11",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/69/JFlexTestRunner.java\nindex edfd8c1f71a..73a8677f8ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/naturalize/69/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n@@ -60,8 +61,7 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n   public JFlexTestRunner(Class<?> testClass) throws InitializationError {\n     super(testClass);\n     this.klass = testClass;\n-    this.spec =\n-        checkNotNull(\n+    this.spec = checkNotNull(\n             testClass.getAnnotation(TestSpec.class),\n             \"A test running with %s must have a @%s\",\n             JFlexTestRunner.class.getName(),\n@@ -122,8 +122,7 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n \n   private static void assertSystemStream(Optional<DiffOutputStream> diffStream, String streamName) {\n     diffStream.ifPresent(\n-        s ->\n-            assertWithMessage(\"Content printed to %s\", streamName)\n+        s ->assertWithMessage(\"Content printed to %s\", streamName)\n                 .that(s.remainingContent())\n                 .isEmpty());\n   }\n@@ -133,19 +132,17 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n       invokeJflex();\n     } catch (Throwable e) {\n       assertWithMessage(\n-              \"@TestCase indicates that the jflex generation must throw a \"\n-                  + spec.generatorThrows().getSimpleName())\n-          .that(e)\n+    \"@TestCase indicates that the jflex generation must throw a \"\n+                  + spec.generatorThrows().getSimpleName()).that(e)\n           .isInstanceOf(spec.generatorThrows());\n-      if (spec.generatorThrowableCause() == Void.class) {\n+if (spec.generatorThrowableCause() == Void.class) {\n         assertWithMessage(\"@TestCase indicates that there is no cause for the generator exception\")\n             .that(e.getCause())\n             .isNull();\n       } else if (spec.generatorThrowableCause() != NoExceptionThrown.class) {\n         assertWithMessage(\n-                \"@TestCase indicates that cause of the generator exception is %s but it was %s\\n\",\n-                spec.generatorThrowableCause().getSimpleName(), e.getCause())\n-            .that(e.getCause())\n+    \"@TestCase indicates that cause of the generator exception is %s but it was %s\\n\",\n+                spec.generatorThrowableCause().getSimpleName(), e.getCause()).that(e.getCause())\n             .isInstanceOf(spec.generatorThrowableCause());\n       }\n       // Expected\n@@ -218,4 +215,4 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n       notifier.fireTestFinished(desc);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "column": "27",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "122",
                    "column": "27",
                    "severity": "warning",
                    "message": "WhitespaceAround: '->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 242).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/69/JFlexTestRunner.java\nindex edfd8c1f71a..363a59728a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/codebuff/69/JFlexTestRunner.java\n@@ -27,7 +27,6 @@ package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.truth.Truth.assertWithMessage;\n-\n import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableList;\n import com.google.common.io.Files;\n@@ -50,22 +49,24 @@ import org.junit.runner.notification.RunNotifier;\n import org.junit.runners.BlockJUnit4ClassRunner;\n import org.junit.runners.model.InitializationError;\n \n+\n public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n \n   private final Class<?> klass;\n+\n+\n   private final TestSpec spec;\n+\n+\n   private final PrintStream originalSysOut = System.out;\n+\n+\n   private final PrintStream originalSysErr = System.err;\n \n   public JFlexTestRunner(Class<?> testClass) throws InitializationError {\n     super(testClass);\n     this.klass = testClass;\n-    this.spec =\n-        checkNotNull(\n-            testClass.getAnnotation(TestSpec.class),\n-            \"A test running with %s must have a @%s\",\n-            JFlexTestRunner.class.getName(),\n-            TestSpec.class.getName());\n+    this.spec = checkNotNull(testClass.getAnnotation(TestSpec.class), \"A test running with %s must have a @%s\", JFlexTestRunner.class.getName(), TestSpec.class.getName());\n   }\n \n   @Override\n@@ -76,23 +77,21 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n   @Override\n   public void run(RunNotifier notifier) {\n     String lexerJavaFileName = generateLexer(notifier);\n-\n     if (lexerJavaFileName != null) {\n       buildLexer(notifier, lexerJavaFileName);\n     }\n \n     // The lexer must be generated before the other tests are executed, as they can try to\n     // compile this generated code.\n+\n     super.run(notifier);\n   }\n \n   private String generateLexer(RunNotifier notifier) {\n     Description desc = Description.createTestDescription(klass, \"Generate Lexer\");\n     notifier.fireTestStarted(desc);\n-\n     Optional<DiffOutputStream> diffSysOut = injectDiffSysOut();\n     Optional<DiffOutputStream> diffSysErr = injectDiffSysErr();\n-\n     try {\n       String lexerJavaFileName;\n       if (spec.generatorThrows() == NoExceptionThrown.class) {\n@@ -101,10 +100,8 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n         lexerJavaFileName = null;\n         generateLexerWithExpectedException();\n       }\n-\n       assertSystemStream(diffSysOut, \"System.out\");\n       assertSystemStream(diffSysErr, \"System.err\");\n-\n       return lexerJavaFileName;\n     } catch (Throwable th) {\n       notifier.fireTestFailure(new Failure(desc, th));\n@@ -113,6 +110,7 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n       if (diffSysOut.isPresent()) {\n         System.setOut(originalSysOut);\n       }\n+\n       if (diffSysErr.isPresent()) {\n         System.setErr(originalSysErr);\n       }\n@@ -121,53 +119,36 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n   }\n \n   private static void assertSystemStream(Optional<DiffOutputStream> diffStream, String streamName) {\n-    diffStream.ifPresent(\n-        s ->\n-            assertWithMessage(\"Content printed to %s\", streamName)\n-                .that(s.remainingContent())\n-                .isEmpty());\n+    diffStream.ifPresent(s->assertWithMessage(\"Content printed to %s\", streamName).that(s.remainingContent())\n+                                                                                  .isEmpty());\n   }\n \n   private String generateLexerWithExpectedException() {\n     try {\n       invokeJflex();\n     } catch (Throwable e) {\n-      assertWithMessage(\n-              \"@TestCase indicates that the jflex generation must throw a \"\n-                  + spec.generatorThrows().getSimpleName())\n-          .that(e)\n-          .isInstanceOf(spec.generatorThrows());\n+      assertWithMessage(\"@TestCase indicates that the jflex generation must throw a \" + spec.generatorThrows().getSimpleName()).that(e).isInstanceOf(spec.generatorThrows());\n       if (spec.generatorThrowableCause() == Void.class) {\n-        assertWithMessage(\"@TestCase indicates that there is no cause for the generator exception\")\n-            .that(e.getCause())\n-            .isNull();\n+        assertWithMessage(\"@TestCase indicates that there is no cause for the generator exception\").that(e.getCause()).isNull();\n       } else if (spec.generatorThrowableCause() != NoExceptionThrown.class) {\n-        assertWithMessage(\n-                \"@TestCase indicates that cause of the generator exception is %s but it was %s\\n\",\n-                spec.generatorThrowableCause().getSimpleName(), e.getCause())\n-            .that(e.getCause())\n-            .isInstanceOf(spec.generatorThrowableCause());\n+               assertWithMessage(\"@TestCase indicates that cause of the generator exception is %s but it was %s\\n\", spec.generatorThrowableCause().getSimpleName(), e.getCause()).that(e.getCause()).isInstanceOf(spec.generatorThrowableCause());\n       }\n       // Expected\n       return null;\n     }\n-    throw new AssertionError(\n-        \"@TestCase indicates that the jflex generation throws a \"\n-            + spec.generatorThrows().getSimpleName()\n-            + \" but nothing was thrown\");\n+\n+    throw new AssertionError(\"@TestCase indicates that the jflex generation throws a \" + spec.generatorThrows().getSimpleName() + \" but nothing was thrown\");\n   }\n \n   private Optional<DiffOutputStream> injectDiffSysOut() {\n     if (!Strings.isNullOrEmpty(spec.sysout())) {\n       File sysoutFile = new File(spec.sysout());\n       try {\n-        DiffOutputStream diffSysOut =\n-            new DiffOutputStream(Files.newReader(sysoutFile, StandardCharsets.UTF_8));\n+        DiffOutputStream diffSysOut = new DiffOutputStream(Files.newReader(sysoutFile, StandardCharsets.UTF_8));\n         Out.setOutputStream(diffSysOut);\n         return Optional.of(diffSysOut);\n       } catch (FileNotFoundException e) {\n-        throw new AssertionError(\n-            \"The golden sysout was not found: \" + sysoutFile.getAbsolutePath(), e);\n+        throw new AssertionError(\"The golden sysout was not found: \" + sysoutFile.getAbsolutePath(), e);\n       }\n     }\n     return Optional.empty();\n@@ -177,13 +158,11 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n     if (!Strings.isNullOrEmpty(spec.syserr())) {\n       File syserrFile = new File(spec.syserr());\n       try {\n-        DiffOutputStream diffSysErr =\n-            new DiffOutputStream(Files.newReader(syserrFile, StandardCharsets.UTF_8));\n+        DiffOutputStream diffSysErr = new DiffOutputStream(Files.newReader(syserrFile, StandardCharsets.UTF_8));\n         System.setErr(new PrintStream(diffSysErr));\n         return Optional.of(diffSysErr);\n       } catch (FileNotFoundException e) {\n-        throw new AssertionError(\n-            \"The golden syserr was not found: \" + syserrFile.getAbsolutePath(), e);\n+        throw new AssertionError(\"The golden syserr was not found: \" + syserrFile.getAbsolutePath(), e);\n       }\n     }\n     return Optional.empty();\n@@ -199,9 +178,7 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n     LexGenerator lexGenerator = new LexGenerator(new File(spec.lex()));\n     String lexerJavaFileName = checkNotNull(lexGenerator.generate());\n     if (spec.minimizedDfaStatesCount() > 0) {\n-      assertWithMessage(\"There should be %d minimized states in the DFA\")\n-          .that(lexGenerator.minimizedDfaStatesCount())\n-          .isEqualTo(spec.minimizedDfaStatesCount());\n+      assertWithMessage(\"There should be %d minimized states in the DFA\").that(lexGenerator.minimizedDfaStatesCount()).isEqualTo(spec.minimizedDfaStatesCount());\n     }\n     return lexerJavaFileName;\n   }\n@@ -209,6 +186,7 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n   private void buildLexer(RunNotifier notifier, String lexerJavaFileName) {\n     Description desc = Description.createTestDescription(klass, \"Compile java code\");\n     notifier.fireTestStarted(desc);\n+\n     try {\n       JavacUtils.compile(ImmutableList.of(new File(lexerJavaFileName)));\n       notifier.fireTestFinished(desc);\n@@ -218,4 +196,4 @@ public class JFlexTestRunner extends BlockJUnit4ClassRunner {\n       notifier.fireTestFinished(desc);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/69/JFlexTestRunner.java\nindex edfd8c1f71a..a91cdbe03ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_random/69/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/69/JFlexTestRunner.java\nindex edfd8c1f71a..a91cdbe03ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/errored/1/69/JFlexTestRunner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/jflex-de-jflex/styler_three_grams/69/JFlexTestRunner.java\n@@ -23,6 +23,7 @@\n  * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n  * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package jflex.testing.testsuite;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}