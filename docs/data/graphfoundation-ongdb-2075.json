{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2075",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2075/PathExpanderBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2075/PathExpanderBuilder.java\nindex 2228da5ec6c..82c47801f21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2075/PathExpanderBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2075/PathExpanderBuilder.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.util.function.Predicate;\n@@ -33,132 +34,132 @@ import static org.neo4j.graphdb.Direction.BOTH;\n  */\n public class PathExpanderBuilder\n {\n-    /**\n-     * A {@link PathExpanderBuilder} that follows no relationships. You start with this and use\n-     * {@link #add(RelationshipType, Direction)} to form a restrictive PathExpander with just a few expansion rules\n-     * in it.\n-     *\n-     * @return a {@link PathExpanderBuilder} that follows no relationships\n-     */\n-    public static PathExpanderBuilder empty()\n-    {\n-        return new PathExpanderBuilder( StandardExpander.EMPTY );\n-    }\n-\n-    /**\n-     * A {@link PathExpanderBuilder} that follows no relationships. You start with this and use\n-     * {@link #add(RelationshipType, Direction)} to form a restrictive PathExpander with just a few expansion rules\n-     * in it.\n-     *\n-     * @return a {@link PathExpanderBuilder} that follows no relationships\n-     */\n-    public static PathExpanderBuilder emptyOrderedByType()\n-    {\n-        return new PathExpanderBuilder( new OrderedByTypeExpander() );\n-    }\n-\n-    /**\n-     * A {@link PathExpanderBuilder} that is seeded with all possible relationship types in {@link Direction#BOTH both\n-     * directions}. You start with this and {@link #remove(RelationshipType) remove types} to form a permissive\n-     * {@link PathExpander} with just a few exceptions in it.\n-     *\n-     * @return a {@link PathExpanderBuilder} that is seeded with all possible relationship types in {@link Direction#BOTH both\n-     * directions}\n-     */\n-    public static PathExpanderBuilder allTypesAndDirections()\n-    {\n-        return new PathExpanderBuilder( StandardExpander.DEFAULT );\n-    }\n-\n-    /**\n-     * A {@link PathExpanderBuilder} seeded with all possible types but restricted to {@code direction}. You start\n-     * with this and {@link #remove(RelationshipType) remove types} to form a permissive {@link PathExpander} with\n-     * just a few exceptions in it.\n-     *\n-     * @param direction The direction you want to restrict expansions to\n-     * @return a {@link PathExpanderBuilder} seeded with all possible types but restricted to {@code direction}.\n-     */\n-    public static PathExpanderBuilder allTypes( Direction direction )\n-    {\n-        return new PathExpanderBuilder( StandardExpander.create( direction ) );\n-    }\n-\n-    /**\n-     * Add a pair of {@code type} and {@link Direction#BOTH} to the PathExpander configuration.\n-     *\n-     * @param type the type to add for expansion in both directions\n-     * @return a {@link PathExpanderBuilder} with the added expansion of {@code type} relationships in both directions\n-     */\n-    public PathExpanderBuilder add( RelationshipType type )\n-    {\n-        return add( type, BOTH );\n-    }\n-\n-    /**\n-     * Add a pair of {@code type} and {@code direction} to the PathExpander configuration.\n-     *\n-     * @param type the type to add for expansion\n-     * @param direction the direction to restrict the expansion to\n-     * @return a {@link PathExpanderBuilder} with the added expansion of {@code type} relationships in the given direction\n-     */\n-    public PathExpanderBuilder add( RelationshipType type, Direction direction )\n-    {\n-        return new PathExpanderBuilder( expander.add( type, direction ) );\n-    }\n-\n-    /**\n-     * Remove expansion of {@code type} in any direction from the PathExpander configuration.\n-     * <p>\n-     * Example: {@code PathExpanderBuilder.allTypesAndDirections().remove(type).add(type, Direction.INCOMING)}\n-     * would restrict the {@link PathExpander} to only follow {@code Direction.INCOMING} relationships for {@code\n-     * type} while following any other relationship type in either direction.\n-     *\n-     * @param type the type to remove from expansion\n-     * @return a {@link PathExpanderBuilder} with expansion of {@code type} relationships removed\n-     */\n-    public PathExpanderBuilder remove( RelationshipType type )\n-    {\n-        return new PathExpanderBuilder( expander.remove( type ) );\n-    }\n-\n-    /**\n-     * Adds a {@link Node} filter.\n-     *\n-     * @param filter a Predicate for filtering nodes.\n-     * @return a {@link PathExpanderBuilder} with the added node filter.\n-     */\n-    public PathExpanderBuilder addNodeFilter( Predicate<? super Node> filter )\n-    {\n-        return new PathExpanderBuilder( expander.addNodeFilter( filter ) );\n-    }\n-\n-    /**\n-     * Adds a {@link Relationship} filter.\n-     *\n-     * @param filter a Predicate for filtering relationships.\n-     * @return a {@link PathExpanderBuilder} with the added relationship filter.\n-     */\n-    public PathExpanderBuilder addRelationshipFilter( Predicate<? super Relationship> filter )\n-    {\n-        return new PathExpanderBuilder( expander.addRelationshipFilter( filter ) );\n-    }\n-\n-    /**\n-     * Produce a {@link PathExpander} from the configuration you have built up.\n-     *\n-     * @param <STATE> the type of the object holding the state\n-     * @return a PathExpander produced from the configuration you have built up\n-     */\n-    @SuppressWarnings( \"unchecked\" )\n-    public <STATE> PathExpander<STATE> build()\n-    {\n-        return expander;\n-    }\n-\n-    private final StandardExpander expander;\n-\n-    private PathExpanderBuilder( StandardExpander expander )\n-    {\n-        this.expander = expander;\n-    }\n+  /**\n+   * A {@link PathExpanderBuilder} that follows no relationships. You start with this and use\n+   * {@link #add(RelationshipType, Direction)} to form a restrictive PathExpander with just a few expansion rules\n+   * in it.\n+   *\n+   * @return a {@link PathExpanderBuilder} that follows no relationships\n+   */\n+  public static PathExpanderBuilder empty()\n+  {\n+    return new PathExpanderBuilder(StandardExpander.EMPTY);\n+  }\n+\n+  /**\n+   * A {@link PathExpanderBuilder} that follows no relationships. You start with this and use\n+   * {@link #add(RelationshipType, Direction)} to form a restrictive PathExpander with just a few expansion rules\n+   * in it.\n+   *\n+   * @return a {@link PathExpanderBuilder} that follows no relationships\n+   */\n+  public static PathExpanderBuilder emptyOrderedByType()\n+  {\n+    return new PathExpanderBuilder(new OrderedByTypeExpander());\n+  }\n+\n+  /**\n+   * A {@link PathExpanderBuilder} that is seeded with all possible relationship types in {@link Direction#BOTH both\n+   * directions}. You start with this and {@link #remove(RelationshipType) remove types} to form a permissive\n+   * {@link PathExpander} with just a few exceptions in it.\n+   *\n+   * @return a {@link PathExpanderBuilder} that is seeded with all possible relationship types in {@link Direction#BOTH both\n+   * directions}\n+   */\n+  public static PathExpanderBuilder allTypesAndDirections()\n+  {\n+    return new PathExpanderBuilder(StandardExpander.DEFAULT);\n+  }\n+\n+  /**\n+   * A {@link PathExpanderBuilder} seeded with all possible types but restricted to {@code direction}. You start\n+   * with this and {@link #remove(RelationshipType) remove types} to form a permissive {@link PathExpander} with\n+   * just a few exceptions in it.\n+   *\n+   * @param direction The direction you want to restrict expansions to\n+   * @return a {@link PathExpanderBuilder} seeded with all possible types but restricted to {@code direction}.\n+   */\n+  public static PathExpanderBuilder allTypes(Direction direction)\n+  {\n+    return new PathExpanderBuilder(StandardExpander.create(direction));\n+  }\n+\n+  /**\n+   * Add a pair of {@code type} and {@link Direction#BOTH} to the PathExpander configuration.\n+   *\n+   * @param type the type to add for expansion in both directions\n+   * @return a {@link PathExpanderBuilder} with the added expansion of {@code type} relationships in both directions\n+   */\n+  public PathExpanderBuilder add(RelationshipType type)\n+  {\n+    return add(type, BOTH);\n+  }\n+\n+  /**\n+   * Add a pair of {@code type} and {@code direction} to the PathExpander configuration.\n+   *\n+   * @param type      the type to add for expansion\n+   * @param direction the direction to restrict the expansion to\n+   * @return a {@link PathExpanderBuilder} with the added expansion of {@code type} relationships in the given direction\n+   */\n+  public PathExpanderBuilder add(RelationshipType type, Direction direction)\n+  {\n+    return new PathExpanderBuilder(expander.add(type, direction));\n+  }\n+\n+  /**\n+   * Remove expansion of {@code type} in any direction from the PathExpander configuration.\n+   * <p>\n+   * Example: {@code PathExpanderBuilder.allTypesAndDirections().remove(type).add(type, Direction.INCOMING)}\n+   * would restrict the {@link PathExpander} to only follow {@code Direction.INCOMING} relationships for {@code\n+   * type} while following any other relationship type in either direction.\n+   *\n+   * @param type the type to remove from expansion\n+   * @return a {@link PathExpanderBuilder} with expansion of {@code type} relationships removed\n+   */\n+  public PathExpanderBuilder remove(RelationshipType type)\n+  {\n+    return new PathExpanderBuilder(expander.remove(type));\n+  }\n+\n+  /**\n+   * Adds a {@link Node} filter.\n+   *\n+   * @param filter a Predicate for filtering nodes.\n+   * @return a {@link PathExpanderBuilder} with the added node filter.\n+   */\n+  public PathExpanderBuilder addNodeFilter(Predicate<? super Node> filter)\n+  {\n+    return new PathExpanderBuilder(expander.addNodeFilter(filter));\n+  }\n+\n+  /**\n+   * Adds a {@link Relationship} filter.\n+   *\n+   * @param filter a Predicate for filtering relationships.\n+   * @return a {@link PathExpanderBuilder} with the added relationship filter.\n+   */\n+  public PathExpanderBuilder addRelationshipFilter(Predicate<? super Relationship> filter)\n+  {\n+    return new PathExpanderBuilder(expander.addRelationshipFilter(filter));\n+  }\n+\n+  /**\n+   * Produce a {@link PathExpander} from the configuration you have built up.\n+   *\n+   * @param <STATE> the type of the object holding the state\n+   * @return a PathExpander produced from the configuration you have built up\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public <STATE> PathExpander<STATE> build()\n+  {\n+    return expander;\n+  }\n+\n+  private final StandardExpander expander;\n+\n+  private PathExpanderBuilder(StandardExpander expander)\n+  {\n+    this.expander = expander;\n+  }\n }\n",
            "diff_size": 129
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2075/PathExpanderBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2075/PathExpanderBuilder.java\nindex 2228da5ec6c..19be5ebb246 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2075/PathExpanderBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2075/PathExpanderBuilder.java\n@@ -161,4 +161,4 @@ public class PathExpanderBuilder\n     {\n         this.expander = expander;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}