{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "176",
    "information": {
        "errors": [
            {
                "line": "35",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    implements XPathCompiler\n{\n\tprivate final HashMap<String, AxisExpr> axisTable;\n\tprivate final HashMap<String, Function> functionTable;\n\tprivate final HashMap<String, Relation> relationTable;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/176/XPathCompilerImpl.java\nindex 749c1aac3fe..9473f12e90d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/176/XPathCompilerImpl.java\n@@ -32,7 +32,7 @@ import org.genxdm.xpath.v10.extend.Function;\n public final class XPathCompilerImpl\r\n     implements XPathCompiler\r\n {\r\n-\tprivate final HashMap<String, AxisExpr> axisTable;\r\n+private final HashMap<String, AxisExpr> axisTable;\r\n \tprivate final HashMap<String, Function> functionTable;\r\n \tprivate final HashMap<String, Relation> relationTable;\r\n \r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/176/XPathCompilerImpl.java\nindex 749c1aac3fe..e89de6a834b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/176/XPathCompilerImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.expressions;\r\n \r\n import java.util.HashMap;\r\n@@ -30,56 +31,63 @@ import org.genxdm.xpath.v10.XPathCompiler;\n import org.genxdm.xpath.v10.extend.Function;\r\n \r\n public final class XPathCompilerImpl\r\n-    implements XPathCompiler\r\n-{\r\n-\tprivate final HashMap<String, AxisExpr> axisTable;\r\n-\tprivate final HashMap<String, Function> functionTable;\r\n-\tprivate final HashMap<String, Relation> relationTable;\r\n-\r\n-\tpublic XPathCompilerImpl(final HashMap<String, AxisExpr> axisTable, final HashMap<String, Function> functionTable, final HashMap<String, Relation> relationTable)\r\n-\t{\r\n-\t\tthis.axisTable = axisTable;\r\n-\t\tthis.functionTable = functionTable;\r\n-\t\tthis.relationTable = relationTable;\r\n-\t}\r\n-\r\n-\tpublic VariantExpr compile(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeVariantExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic BooleanExpr compileBooleanExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeBooleanExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic NodeSetExpr compileNodeSetExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNodeSetExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic NumberExpr compileNumberExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNumberExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic StringExpr compileStringExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeStringExpr(statEnv);\r\n-\t}\r\n+    implements XPathCompiler {\r\n+    private final HashMap<String, AxisExpr> axisTable;\r\n+\r\n+    private final HashMap<String, Function> functionTable;\r\n+\r\n+    private final HashMap<String, Relation> relationTable;\r\n+\r\n+    public XPathCompilerImpl(final HashMap<String, AxisExpr> axisTable,\r\n+                             final HashMap<String, Function> functionTable,\r\n+                             final HashMap<String, Relation> relationTable) {\r\n+        this.axisTable = axisTable;\r\n+        this.functionTable = functionTable;\r\n+        this.relationTable = relationTable;\r\n+    }\r\n+\r\n+    public VariantExpr compile(final String expression, final ExprContextStatic statEnv)\r\n+        throws ExprParseException {\r\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n+\r\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable)\r\n+            .parseExpr().makeVariantExpr(statEnv);\r\n+    }\r\n+\r\n+    public BooleanExpr compileBooleanExpr(final String expression, final ExprContextStatic statEnv)\r\n+        throws ExprParseException {\r\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n+\r\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable)\r\n+            .parseExpr().makeBooleanExpr(statEnv);\r\n+    }\r\n+\r\n+    public NodeSetExpr compileNodeSetExpr(final String expression, final ExprContextStatic statEnv)\r\n+        throws ExprParseException {\r\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n+\r\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable)\r\n+            .parseExpr().makeNodeSetExpr(statEnv);\r\n+    }\r\n+\r\n+    public NumberExpr compileNumberExpr(final String expression, final ExprContextStatic statEnv)\r\n+        throws ExprParseException {\r\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n+\r\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable)\r\n+            .parseExpr().makeNumberExpr(statEnv);\r\n+    }\r\n+\r\n+    public StringExpr compileStringExpr(final String expression, final ExprContextStatic statEnv)\r\n+        throws ExprParseException {\r\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n+\r\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable)\r\n+            .parseExpr().makeStringExpr(statEnv);\r\n+    }\r\n }\r\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/176/XPathCompilerImpl.java\nindex 749c1aac3fe..b4dba62c6a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/176/XPathCompilerImpl.java\n@@ -31,55 +31,55 @@ import org.genxdm.xpath.v10.extend.Function;\n \r\n public final class XPathCompilerImpl\r\n     implements XPathCompiler\r\n-{\r\n-\tprivate final HashMap<String, AxisExpr> axisTable;\r\n+{\n+    private final HashMap<String, AxisExpr> axisTable;\r\n \tprivate final HashMap<String, Function> functionTable;\r\n \tprivate final HashMap<String, Relation> relationTable;\r\n \r\n \tpublic XPathCompilerImpl(final HashMap<String, AxisExpr> axisTable, final HashMap<String, Function> functionTable, final HashMap<String, Relation> relationTable)\r\n-\t{\r\n-\t\tthis.axisTable = axisTable;\r\n+\t{\n+    this.axisTable = axisTable;\r\n \t\tthis.functionTable = functionTable;\r\n-\t\tthis.relationTable = relationTable;\r\n-\t}\r\n+\t\tthis.relationTable = relationTable;\n+    }\r\n \r\n \tpublic VariantExpr compile(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+\t{\n+    PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n \t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n \r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeVariantExpr(statEnv);\r\n-\t}\r\n+\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeVariantExpr(statEnv);\n+    }\r\n \r\n \tpublic BooleanExpr compileBooleanExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+\t{\n+    PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n \t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n \r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeBooleanExpr(statEnv);\r\n-\t}\r\n+\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeBooleanExpr(statEnv);\n+    }\r\n \r\n \tpublic NodeSetExpr compileNodeSetExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+\t{\n+    PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n \t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n \r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNodeSetExpr(statEnv);\r\n-\t}\r\n+\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNodeSetExpr(statEnv);\n+    }\r\n \r\n \tpublic NumberExpr compileNumberExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+\t{\n+    PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n \t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n \r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNumberExpr(statEnv);\r\n-\t}\r\n+\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNumberExpr(statEnv);\n+    }\r\n \r\n \tpublic StringExpr compileStringExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n+\t{\n+    PreCondition.assertArgumentNotNull(expression, \"expression\");\r\n \t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n \r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeStringExpr(statEnv);\r\n-\t}\r\n-}\r\n+\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeStringExpr(statEnv);\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/176/XPathCompilerImpl.java\nindex 749c1aac3fe..54ecb25181f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/176/XPathCompilerImpl.java\n@@ -13,73 +13,71 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.expressions;\r\n-\r\n-import java.util.HashMap;\r\n-\r\n-import org.genxdm.exceptions.PreCondition;\r\n-import org.genxdm.processor.xpath.v10.relations.Relation;\r\n-import org.genxdm.xpath.v10.BooleanExpr;\r\n-import org.genxdm.xpath.v10.ExprContextStatic;\r\n-import org.genxdm.xpath.v10.ExprParseException;\r\n-import org.genxdm.xpath.v10.NodeSetExpr;\r\n-import org.genxdm.xpath.v10.NumberExpr;\r\n-import org.genxdm.xpath.v10.StringExpr;\r\n-import org.genxdm.xpath.v10.VariantExpr;\r\n-import org.genxdm.xpath.v10.XPathCompiler;\r\n-import org.genxdm.xpath.v10.extend.Function;\r\n-\r\n-public final class XPathCompilerImpl\r\n-    implements XPathCompiler\r\n-{\r\n-\tprivate final HashMap<String, AxisExpr> axisTable;\r\n-\tprivate final HashMap<String, Function> functionTable;\r\n-\tprivate final HashMap<String, Relation> relationTable;\r\n-\r\n-\tpublic XPathCompilerImpl(final HashMap<String, AxisExpr> axisTable, final HashMap<String, Function> functionTable, final HashMap<String, Relation> relationTable)\r\n-\t{\r\n-\t\tthis.axisTable = axisTable;\r\n-\t\tthis.functionTable = functionTable;\r\n-\t\tthis.relationTable = relationTable;\r\n-\t}\r\n-\r\n-\tpublic VariantExpr compile(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeVariantExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic BooleanExpr compileBooleanExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeBooleanExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic NodeSetExpr compileNodeSetExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNodeSetExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic NumberExpr compileNumberExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNumberExpr(statEnv);\r\n-\t}\r\n-\r\n-\tpublic StringExpr compileStringExpr(final String expression, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(expression, \"expression\");\r\n-\t\tPreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\r\n-\r\n-\t\treturn new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeStringExpr(statEnv);\r\n-\t}\r\n-}\r\n+package org.genxdm.processor.xpath.v10.expressions;\n+\n+import java.util.HashMap;\n+import org.genxdm.exceptions.PreCondition;\n+import org.genxdm.processor.xpath.v10.relations.Relation;\n+import org.genxdm.xpath.v10.BooleanExpr;\n+import org.genxdm.xpath.v10.ExprContextStatic;\n+import org.genxdm.xpath.v10.ExprParseException;\n+import org.genxdm.xpath.v10.NodeSetExpr;\n+import org.genxdm.xpath.v10.NumberExpr;\n+import org.genxdm.xpath.v10.StringExpr;\n+import org.genxdm.xpath.v10.VariantExpr;\n+import org.genxdm.xpath.v10.XPathCompiler;\n+import org.genxdm.xpath.v10.extend.Function;\n+\n+public final class XPathCompilerImpl implements XPathCompiler\n+{\n+    private final HashMap<String, AxisExpr> axisTable;\n+    private final HashMap<String, Function> functionTable;\n+    private final HashMap<String, Relation> relationTable;\n+\n+    public XPathCompilerImpl(final HashMap<String, AxisExpr> axisTable, final HashMap<String, Function> functionTable, final HashMap<String, Relation> relationTable)\n+    {\n+        this.axisTable = axisTable;\n+        this.functionTable = functionTable;\n+        this.relationTable = relationTable;\n+    }\n+\n+    public VariantExpr compile(final String expression, final ExprContextStatic statEnv)\n+        throws ExprParseException\n+    {\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeVariantExpr(statEnv);\n+    }\n+\n+    public BooleanExpr compileBooleanExpr(final String expression, final ExprContextStatic statEnv)\n+        throws ExprParseException\n+    {\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeBooleanExpr(statEnv);\n+    }\n+\n+    public NodeSetExpr compileNodeSetExpr(final String expression, final ExprContextStatic statEnv)\n+        throws ExprParseException\n+    {\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNodeSetExpr(statEnv);\n+    }\n+\n+    public NumberExpr compileNumberExpr(final String expression, final ExprContextStatic statEnv)\n+        throws ExprParseException\n+    {\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeNumberExpr(statEnv);\n+    }\n+\n+    public StringExpr compileStringExpr(final String expression, final ExprContextStatic statEnv)\n+        throws ExprParseException\n+    {\n+        PreCondition.assertArgumentNotNull(expression, \"expression\");\n+        PreCondition.assertArgumentNotNull(statEnv, \"statEnv\");\n+        return new ExprParser(expression, statEnv, axisTable, functionTable, relationTable).parseExpr().makeStringExpr(statEnv);\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/176/XPathCompilerImpl.java\nindex 749c1aac3fe..9473f12e90d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/176/XPathCompilerImpl.java\n@@ -32,7 +32,7 @@ import org.genxdm.xpath.v10.extend.Function;\n public final class XPathCompilerImpl\r\n     implements XPathCompiler\r\n {\r\n-\tprivate final HashMap<String, AxisExpr> axisTable;\r\n+private final HashMap<String, AxisExpr> axisTable;\r\n \tprivate final HashMap<String, Function> functionTable;\r\n \tprivate final HashMap<String, Relation> relationTable;\r\n \r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/176/XPathCompilerImpl.java\nindex 749c1aac3fe..f24cd088a4b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/176/XPathCompilerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/176/XPathCompilerImpl.java\n@@ -32,7 +32,7 @@ import org.genxdm.xpath.v10.extend.Function;\n public final class XPathCompilerImpl\r\n     implements XPathCompiler\r\n {\r\n-\tprivate final HashMap<String, AxisExpr> axisTable;\r\n+    private final HashMap<String, AxisExpr> axisTable;\r\n \tprivate final HashMap<String, Function> functionTable;\r\n \tprivate final HashMap<String, Relation> relationTable;\r\n \r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}