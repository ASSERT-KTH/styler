{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3234",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3234/Read.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3234/Read.java\nindex 1b0c1001161..26c2afb18f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3234/Read.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3234/Read.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import org.neo4j.internal.kernel.api.exceptions.KernelException;\n@@ -27,314 +28,300 @@ import org.neo4j.kernel.api.exceptions.index.IndexNotFoundKernelException;\n  */\n public interface Read\n {\n-    int ANY_LABEL = -1;\n-    int ANY_RELATIONSHIP_TYPE = -1;\n-\n-    /**\n-     * Seek all nodes matching the provided index query in an index.\n-     *\n-     * @param index {@link IndexReference} referencing index to query.\n-     * @param cursor the cursor to use for consuming the results.\n-     * @param indexOrder requested {@link IndexOrder} of result. Must be among the capabilities of\n-     * {@link IndexReference referenced index}, or {@link IndexOrder#NONE}.\n-     * @param query Combination of {@link IndexQuery index queries} to run against referenced index.\n-     */\n-    void nodeIndexSeek( IndexReference index, NodeValueIndexCursor cursor, IndexOrder indexOrder, IndexQuery... query )\n-            throws KernelException;\n-\n-    /**\n-     * Access all distinct counts in an index. Entries fed to the {@code cursor} will be (count,Value[]),\n-     * where the count (number of nodes having the particular value) will be accessed using {@link NodeValueIndexCursor#nodeReference()}\n-     * and the value (if the index can provide it) using {@link NodeValueIndexCursor#propertyValue(int)}.\n-     * Before accessing a property value the caller should check {@link NodeValueIndexCursor#hasValue()} to see\n-     * whether or not the index could yield values.\n-     *\n-     * For merely counting distinct values in an index, loop over and sum iterations.\n-     * For counting number of indexed nodes in an index, loop over and sum all counts.\n-     *\n-     * NOTE distinct values may not be 100% accurate for point values that are very close to each other. In those cases they can be\n-     * reported as a single distinct values with a higher count instead of several separate values.\n-     *\n-     * @param index {@link IndexReference} referencing index.\n-     * @param cursor {@link NodeValueIndexCursor} receiving distinct count data.\n-     */\n-    void nodeIndexDistinctValues( IndexReference index, NodeValueIndexCursor cursor ) throws IndexNotFoundKernelException;\n-\n-    /**\n-     * Returns node id of node found in unique index or -1 if no node was found.\n-     *\n-     * Note that this is a very special method and should be use with caution. It has special locking semantics in\n-     * order to facilitate unique creation of nodes. If a node is found; a shared lock for the index entry will be\n-     * held whereas if no node is found we will hold onto an exclusive lock until the close of the transaction.\n-     *\n-     * @param index {@link IndexReference} referencing index to query.\n-     *              {@link IndexReference referenced index}, or {@link IndexOrder#NONE}.\n-     * @param predicates Combination of {@link IndexQuery.ExactPredicate index queries} to run against referenced index.\n-     */\n-    long lockingNodeUniqueIndexSeek( IndexReference index, IndexQuery.ExactPredicate... predicates )\n-            throws KernelException;\n-\n-    /**\n-     * Scan all values in an index.\n-     *\n-     * @param index {@link IndexReference} referencing index to query.\n-     * @param cursor the cursor to use for consuming the results.\n-     * @param indexOrder requested {@link IndexOrder} of result. Must be among the capabilities of\n-     * {@link IndexReference referenced index}, or {@link IndexOrder#NONE}.\n-     */\n-    void nodeIndexScan( IndexReference index, NodeValueIndexCursor cursor, IndexOrder indexOrder ) throws KernelException;\n-\n-    void nodeLabelScan( int label, NodeLabelIndexCursor cursor );\n-\n-    /**\n-     * Scan for nodes that have a <i>disjunction</i> of the specified labels.\n-     * i.e. MATCH (n) WHERE n:Label1 OR n:Label2 OR ...\n-     */\n-    void nodeLabelUnionScan( NodeLabelIndexCursor cursor, int... labels );\n-\n-    /**\n-     * Scan for nodes that have a <i>conjunction</i> of the specified labels.\n-     * i.e. MATCH (n) WHERE n:Label1 AND n:Label2 AND ...\n-     */\n-    void nodeLabelIntersectionScan( NodeLabelIndexCursor cursor, int... labels );\n-\n-    Scan<NodeLabelIndexCursor> nodeLabelScan( int label );\n-\n-    /**\n-     * Return all nodes in the graph.\n-     *\n-     * @param cursor Cursor to initialize for scanning.\n-     */\n-    void allNodesScan( NodeCursor cursor );\n-\n-    Scan<NodeCursor> allNodesScan();\n-\n-    /**\n-     * @param reference a reference from {@link NodeCursor#nodeReference()}, {@link\n-     * RelationshipDataAccessor#sourceNodeReference()},\n-     * {@link RelationshipDataAccessor#targetNodeReference()}, {@link NodeIndexCursor#nodeReference()},\n-     * {@link RelationshipIndexCursor#sourceNodeReference()}, or {@link RelationshipIndexCursor#targetNodeReference()}.\n-     * @param cursor the cursor to use for consuming the results.\n-     */\n-    void singleNode( long reference, NodeCursor cursor );\n-\n-    /**\n-     * Checks if a node exists in the database\n-     *\n-     * @param reference The reference of the node to check\n-     * @return {@code true} if the node exists, otherwise {@code false}\n-     */\n-    boolean nodeExists( long reference );\n-\n-    /**\n-     * The number of nodes in the graph, including anything changed in the transaction state.\n-     *\n-     * If the label parameter is {@link #ANY_LABEL}, this method returns the total number of nodes in the graph, i.e.\n-     * {@code MATCH (n) RETURN count(n)}.\n-     *\n-     * If the label parameter is set to any other value, this method returns the number of nodes that has that label,\n-     * i.e. {@code MATCH (n:LBL) RETURN count(n)}.\n-     *\n-     * @param labelId the label to get the count for, or {@link #ANY_LABEL} to get the total number of nodes.\n-     * @return the number of matching nodes in the graph.\n-     */\n-    long countsForNode( int labelId );\n-\n-    /**\n-     * The number of nodes in the graph, without taking into account anything in the transaction state.\n-     *\n-     * If the label parameter is {@link #ANY_LABEL}, this method returns the total number of nodes in the graph, i.e.\n-     * {@code MATCH (n) RETURN count(n)}.\n-     *\n-     * If the label parameter is set to any other value, this method returns the number of nodes that has that label,\n-     * i.e. {@code MATCH (n:LBL) RETURN count(n)}.\n-     *\n-     * @param labelId the label to get the count for, or {@link #ANY_LABEL} to get the total number of nodes.\n-     * @return the number of matching nodes in the graph.\n-     */\n-    long countsForNodeWithoutTxState( int labelId );\n-\n-    /**\n-     * The number of relationships in the graph, including anything changed in the transaction state.\n-     *\n-     * Returns the number of relationships in the graph that matches the specified pattern,\n-     * {@code (:startLabelId)-[:typeId]->(:endLabelId)}, like so:\n-     *\n-     * <table>\n-     * <thead>\n-     * <tr><th>{@code startLabelId}</th><th>{@code typeId}</th>                  <th>{@code endLabelId}</th>\n-     * <td></td>                 <th>Pattern</th>                       <td></td></tr>\n-     * </thead>\n-     * <tdata>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r]->()}</td>            <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->()}</td>        <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@code LHS}</td>             <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r]->()}</td>        <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@code RHS}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r]->(:RHS)}</td>        <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@code LHS}</td>             <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r:REL]->()}</td>    <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@code RHS}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->(:RHS)}</td>    <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * </tdata>\n-     * </table>\n-     *\n-     * @param startLabelId the label of the start node of relationships to get the count for, or {@link #ANY_LABEL}.\n-     * @param typeId       the type of relationships to get a count for, or {@link #ANY_RELATIONSHIP_TYPE}.\n-     * @param endLabelId   the label of the end node of relationships to get the count for, or {@link #ANY_LABEL}.\n-     * @return the number of matching relationships in the graph.\n-     */\n-    long countsForRelationship( int startLabelId, int typeId, int endLabelId );\n-\n-    /**\n-     * The number of relationships in the graph, without taking into account anything in the transaction state.\n-     *\n-     * Returns the number of relationships in the graph that matches the specified pattern,\n-     * {@code (:startLabelId)-[:typeId]->(:endLabelId)}, like so:\n-     *\n-     * <table>\n-     * <thead>\n-     * <tr><th>{@code startLabelId}</th><th>{@code typeId}</th>                  <th>{@code endLabelId}</th>\n-     * <td></td>                 <th>Pattern</th>                       <td></td></tr>\n-     * </thead>\n-     * <tdata>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r]->()}</td>            <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->()}</td>        <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@code LHS}</td>             <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r]->()}</td>        <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@code RHS}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r]->(:RHS)}</td>        <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@code LHS}</td>             <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r:REL]->()}</td>    <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * <tr>\n-     * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@code RHS}</td>\n-     * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->(:RHS)}</td>    <td>{@code RETURN count(r)}</td>\n-     * </tr>\n-     * </tdata>\n-     * </table>\n-     *\n-     * @param startLabelId the label of the start node of relationships to get the count for, or {@link #ANY_LABEL}.\n-     * @param typeId       the type of relationships to get a count for, or {@link #ANY_RELATIONSHIP_TYPE}.\n-     * @param endLabelId   the label of the end node of relationships to get the count for, or {@link #ANY_LABEL}.\n-     * @return the number of matching relationships in the graph.\n-     */\n-    long countsForRelationshipWithoutTxState( int startLabelId, int typeId, int endLabelId );\n-\n-    /**\n-     * Count of the total number of nodes in the database including changes in the current transaction.\n-     *\n-     * @return the total number of nodes in the database\n-     */\n-    long nodesGetCount( );\n-\n-    /**\n-     * Count of the total number of relationships in the database including changes in the current transaction.\n-     *\n-     * @return the total number of relationships in the database\n-     */\n-    long relationshipsGetCount( );\n-\n-    /**\n-     * @param reference\n-     *         a reference from {@link RelationshipDataAccessor#relationshipReference()}.\n-     * @param cursor\n-     *         the cursor to use for consuming the results.\n-     */\n-    void singleRelationship( long reference, RelationshipScanCursor cursor );\n-\n-    /**\n-     * Checks if a relationship exists in the database\n-     *\n-     * @param reference The reference of the relationship to check\n-     * @return <tt>true</tt> if the relationship exists, otherwise <tt>false</tt>\n-     */\n-    boolean relationshipExists( long reference );\n-\n-    void allRelationshipsScan( RelationshipScanCursor cursor );\n-\n-    Scan<RelationshipScanCursor> allRelationshipsScan();\n-\n-    void relationshipTypeScan( int type, RelationshipScanCursor cursor );\n-\n-    Scan<RelationshipScanCursor> relationshipTypeScan( int type );\n-\n-    /**\n-     * @param nodeReference\n-     *         a reference from {@link NodeCursor#nodeReference()}.\n-     * @param reference\n-     *         a reference from {@link NodeCursor#relationshipGroupReference()}.\n-     * @param cursor\n-     *         the cursor to use for consuming the results.\n-     */\n-    void relationshipGroups( long nodeReference, long reference, RelationshipGroupCursor cursor );\n-\n-    /**\n-     * @param nodeReference\n-     *         a reference from {@link NodeCursor#nodeReference()}.\n-     * @param reference\n-     *         a reference from {@link RelationshipGroupCursor#outgoingReference()},\n-     *         {@link RelationshipGroupCursor#incomingReference()},\n-     *         or {@link RelationshipGroupCursor#loopsReference()}.\n-     * @param cursor\n-     *         the cursor to use for consuming the results.\n-     */\n-    void relationships( long nodeReference, long reference, RelationshipTraversalCursor cursor );\n-\n-    /**\n-     * @param nodeReference\n-     *         the owner of the properties.\n-     * @param reference\n-     *         a reference from {@link NodeCursor#propertiesReference()}.\n-     * @param cursor\n-     *         the cursor to use for consuming the results.\n-     */\n-    void nodeProperties( long nodeReference, long reference, PropertyCursor cursor );\n-\n-    /**\n-     * @param relationshipReference\n-     *         the owner of the properties.\n-     * @param reference\n-     *         a reference from {@link RelationshipDataAccessor#propertiesReference()}.\n-     * @param cursor\n-     *         the cursor to use for consuming the results.\n-     */\n-    void relationshipProperties( long relationshipReference, long reference, PropertyCursor cursor );\n-\n-    void graphProperties( PropertyCursor cursor );\n-\n-    // hints to the page cache about data we will be accessing in the future:\n-\n-    void futureNodeReferenceRead( long reference );\n-\n-    void futureRelationshipsReferenceRead( long reference );\n-\n-    void futureNodePropertyReferenceRead( long reference );\n-\n-    void futureRelationshipPropertyReferenceRead( long reference );\n+  int ANY_LABEL = -1;\n+  int ANY_RELATIONSHIP_TYPE = -1;\n+\n+  /**\n+   * Seek all nodes matching the provided index query in an index.\n+   *\n+   * @param index      {@link IndexReference} referencing index to query.\n+   * @param cursor     the cursor to use for consuming the results.\n+   * @param indexOrder requested {@link IndexOrder} of result. Must be among the capabilities of\n+   *                   {@link IndexReference referenced index}, or {@link IndexOrder#NONE}.\n+   * @param query      Combination of {@link IndexQuery index queries} to run against referenced index.\n+   */\n+  void nodeIndexSeek(IndexReference index, NodeValueIndexCursor cursor, IndexOrder indexOrder, IndexQuery... query)\n+      throws KernelException;\n+\n+  /**\n+   * Access all distinct counts in an index. Entries fed to the {@code cursor} will be (count,Value[]),\n+   * where the count (number of nodes having the particular value) will be accessed using {@link NodeValueIndexCursor#nodeReference()}\n+   * and the value (if the index can provide it) using {@link NodeValueIndexCursor#propertyValue(int)}.\n+   * Before accessing a property value the caller should check {@link NodeValueIndexCursor#hasValue()} to see\n+   * whether or not the index could yield values.\n+   * <p>\n+   * For merely counting distinct values in an index, loop over and sum iterations.\n+   * For counting number of indexed nodes in an index, loop over and sum all counts.\n+   * <p>\n+   * NOTE distinct values may not be 100% accurate for point values that are very close to each other. In those cases they can be\n+   * reported as a single distinct values with a higher count instead of several separate values.\n+   *\n+   * @param index  {@link IndexReference} referencing index.\n+   * @param cursor {@link NodeValueIndexCursor} receiving distinct count data.\n+   */\n+  void nodeIndexDistinctValues(IndexReference index, NodeValueIndexCursor cursor) throws IndexNotFoundKernelException;\n+\n+  /**\n+   * Returns node id of node found in unique index or -1 if no node was found.\n+   * <p>\n+   * Note that this is a very special method and should be use with caution. It has special locking semantics in\n+   * order to facilitate unique creation of nodes. If a node is found; a shared lock for the index entry will be\n+   * held whereas if no node is found we will hold onto an exclusive lock until the close of the transaction.\n+   *\n+   * @param index      {@link IndexReference} referencing index to query.\n+   *                   {@link IndexReference referenced index}, or {@link IndexOrder#NONE}.\n+   * @param predicates Combination of {@link IndexQuery.ExactPredicate index queries} to run against referenced index.\n+   */\n+  long lockingNodeUniqueIndexSeek(IndexReference index, IndexQuery.ExactPredicate... predicates)\n+      throws KernelException;\n+\n+  /**\n+   * Scan all values in an index.\n+   *\n+   * @param index      {@link IndexReference} referencing index to query.\n+   * @param cursor     the cursor to use for consuming the results.\n+   * @param indexOrder requested {@link IndexOrder} of result. Must be among the capabilities of\n+   *                   {@link IndexReference referenced index}, or {@link IndexOrder#NONE}.\n+   */\n+  void nodeIndexScan(IndexReference index, NodeValueIndexCursor cursor, IndexOrder indexOrder) throws KernelException;\n+\n+  void nodeLabelScan(int label, NodeLabelIndexCursor cursor);\n+\n+  /**\n+   * Scan for nodes that have a <i>disjunction</i> of the specified labels.\n+   * i.e. MATCH (n) WHERE n:Label1 OR n:Label2 OR ...\n+   */\n+  void nodeLabelUnionScan(NodeLabelIndexCursor cursor, int... labels);\n+\n+  /**\n+   * Scan for nodes that have a <i>conjunction</i> of the specified labels.\n+   * i.e. MATCH (n) WHERE n:Label1 AND n:Label2 AND ...\n+   */\n+  void nodeLabelIntersectionScan(NodeLabelIndexCursor cursor, int... labels);\n+\n+  Scan<NodeLabelIndexCursor> nodeLabelScan(int label);\n+\n+  /**\n+   * Return all nodes in the graph.\n+   *\n+   * @param cursor Cursor to initialize for scanning.\n+   */\n+  void allNodesScan(NodeCursor cursor);\n+\n+  Scan<NodeCursor> allNodesScan();\n+\n+  /**\n+   * @param reference a reference from {@link NodeCursor#nodeReference()}, {@link\n+   *                  RelationshipDataAccessor#sourceNodeReference()},\n+   *                  {@link RelationshipDataAccessor#targetNodeReference()}, {@link NodeIndexCursor#nodeReference()},\n+   *                  {@link RelationshipIndexCursor#sourceNodeReference()}, or {@link RelationshipIndexCursor#targetNodeReference()}.\n+   * @param cursor    the cursor to use for consuming the results.\n+   */\n+  void singleNode(long reference, NodeCursor cursor);\n+\n+  /**\n+   * Checks if a node exists in the database\n+   *\n+   * @param reference The reference of the node to check\n+   * @return {@code true} if the node exists, otherwise {@code false}\n+   */\n+  boolean nodeExists(long reference);\n+\n+  /**\n+   * The number of nodes in the graph, including anything changed in the transaction state.\n+   * <p>\n+   * If the label parameter is {@link #ANY_LABEL}, this method returns the total number of nodes in the graph, i.e.\n+   * {@code MATCH (n) RETURN count(n)}.\n+   * <p>\n+   * If the label parameter is set to any other value, this method returns the number of nodes that has that label,\n+   * i.e. {@code MATCH (n:LBL) RETURN count(n)}.\n+   *\n+   * @param labelId the label to get the count for, or {@link #ANY_LABEL} to get the total number of nodes.\n+   * @return the number of matching nodes in the graph.\n+   */\n+  long countsForNode(int labelId);\n+\n+  /**\n+   * The number of nodes in the graph, without taking into account anything in the transaction state.\n+   * <p>\n+   * If the label parameter is {@link #ANY_LABEL}, this method returns the total number of nodes in the graph, i.e.\n+   * {@code MATCH (n) RETURN count(n)}.\n+   * <p>\n+   * If the label parameter is set to any other value, this method returns the number of nodes that has that label,\n+   * i.e. {@code MATCH (n:LBL) RETURN count(n)}.\n+   *\n+   * @param labelId the label to get the count for, or {@link #ANY_LABEL} to get the total number of nodes.\n+   * @return the number of matching nodes in the graph.\n+   */\n+  long countsForNodeWithoutTxState(int labelId);\n+\n+  /**\n+   * The number of relationships in the graph, including anything changed in the transaction state.\n+   * <p>\n+   * Returns the number of relationships in the graph that matches the specified pattern,\n+   * {@code (:startLabelId)-[:typeId]->(:endLabelId)}, like so:\n+   *\n+   * <table>\n+   * <thead>\n+   * <tr><th>{@code startLabelId}</th><th>{@code typeId}</th>                  <th>{@code endLabelId}</th>\n+   * <td></td>                 <th>Pattern</th>                       <td></td></tr>\n+   * </thead>\n+   * <tdata>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r]->()}</td>            <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->()}</td>        <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@code LHS}</td>             <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r]->()}</td>        <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@code RHS}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r]->(:RHS)}</td>        <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@code LHS}</td>             <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r:REL]->()}</td>    <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@code RHS}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->(:RHS)}</td>    <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * </tdata>\n+   * </table>\n+   *\n+   * @param startLabelId the label of the start node of relationships to get the count for, or {@link #ANY_LABEL}.\n+   * @param typeId       the type of relationships to get a count for, or {@link #ANY_RELATIONSHIP_TYPE}.\n+   * @param endLabelId   the label of the end node of relationships to get the count for, or {@link #ANY_LABEL}.\n+   * @return the number of matching relationships in the graph.\n+   */\n+  long countsForRelationship(int startLabelId, int typeId, int endLabelId);\n+\n+  /**\n+   * The number of relationships in the graph, without taking into account anything in the transaction state.\n+   * <p>\n+   * Returns the number of relationships in the graph that matches the specified pattern,\n+   * {@code (:startLabelId)-[:typeId]->(:endLabelId)}, like so:\n+   *\n+   * <table>\n+   * <thead>\n+   * <tr><th>{@code startLabelId}</th><th>{@code typeId}</th>                  <th>{@code endLabelId}</th>\n+   * <td></td>                 <th>Pattern</th>                       <td></td></tr>\n+   * </thead>\n+   * <tdata>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r]->()}</td>            <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->()}</td>        <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@code LHS}</td>             <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r]->()}</td>        <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@link #ANY_RELATIONSHIP_TYPE}</td>  <td>{@code RHS}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r]->(:RHS)}</td>        <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@code LHS}</td>             <td>{@code REL}</td>                     <td>{@link #ANY_LABEL}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code (:LHS)-[r:REL]->()}</td>    <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * <tr>\n+   * <td>{@link #ANY_LABEL}</td>      <td>{@code REL}</td>                     <td>{@code RHS}</td>\n+   * <td>{@code MATCH}</td>    <td>{@code ()-[r:REL]->(:RHS)}</td>    <td>{@code RETURN count(r)}</td>\n+   * </tr>\n+   * </tdata>\n+   * </table>\n+   *\n+   * @param startLabelId the label of the start node of relationships to get the count for, or {@link #ANY_LABEL}.\n+   * @param typeId       the type of relationships to get a count for, or {@link #ANY_RELATIONSHIP_TYPE}.\n+   * @param endLabelId   the label of the end node of relationships to get the count for, or {@link #ANY_LABEL}.\n+   * @return the number of matching relationships in the graph.\n+   */\n+  long countsForRelationshipWithoutTxState(int startLabelId, int typeId, int endLabelId);\n+\n+  /**\n+   * Count of the total number of nodes in the database including changes in the current transaction.\n+   *\n+   * @return the total number of nodes in the database\n+   */\n+  long nodesGetCount();\n+\n+  /**\n+   * Count of the total number of relationships in the database including changes in the current transaction.\n+   *\n+   * @return the total number of relationships in the database\n+   */\n+  long relationshipsGetCount();\n+\n+  /**\n+   * @param reference a reference from {@link RelationshipDataAccessor#relationshipReference()}.\n+   * @param cursor    the cursor to use for consuming the results.\n+   */\n+  void singleRelationship(long reference, RelationshipScanCursor cursor);\n+\n+  /**\n+   * Checks if a relationship exists in the database\n+   *\n+   * @param reference The reference of the relationship to check\n+   * @return <tt>true</tt> if the relationship exists, otherwise <tt>false</tt>\n+   */\n+  boolean relationshipExists(long reference);\n+\n+  void allRelationshipsScan(RelationshipScanCursor cursor);\n+\n+  Scan<RelationshipScanCursor> allRelationshipsScan();\n+\n+  void relationshipTypeScan(int type, RelationshipScanCursor cursor);\n+\n+  Scan<RelationshipScanCursor> relationshipTypeScan(int type);\n+\n+  /**\n+   * @param nodeReference a reference from {@link NodeCursor#nodeReference()}.\n+   * @param reference     a reference from {@link NodeCursor#relationshipGroupReference()}.\n+   * @param cursor        the cursor to use for consuming the results.\n+   */\n+  void relationshipGroups(long nodeReference, long reference, RelationshipGroupCursor cursor);\n+\n+  /**\n+   * @param nodeReference a reference from {@link NodeCursor#nodeReference()}.\n+   * @param reference     a reference from {@link RelationshipGroupCursor#outgoingReference()},\n+   *                      {@link RelationshipGroupCursor#incomingReference()},\n+   *                      or {@link RelationshipGroupCursor#loopsReference()}.\n+   * @param cursor        the cursor to use for consuming the results.\n+   */\n+  void relationships(long nodeReference, long reference, RelationshipTraversalCursor cursor);\n+\n+  /**\n+   * @param nodeReference the owner of the properties.\n+   * @param reference     a reference from {@link NodeCursor#propertiesReference()}.\n+   * @param cursor        the cursor to use for consuming the results.\n+   */\n+  void nodeProperties(long nodeReference, long reference, PropertyCursor cursor);\n+\n+  /**\n+   * @param relationshipReference the owner of the properties.\n+   * @param reference             a reference from {@link RelationshipDataAccessor#propertiesReference()}.\n+   * @param cursor                the cursor to use for consuming the results.\n+   */\n+  void relationshipProperties(long relationshipReference, long reference, PropertyCursor cursor);\n+\n+  void graphProperties(PropertyCursor cursor);\n+\n+  // hints to the page cache about data we will be accessing in the future:\n+\n+  void futureNodeReferenceRead(long reference);\n+\n+  void futureRelationshipsReferenceRead(long reference);\n+\n+  void futureNodePropertyReferenceRead(long reference);\n+\n+  void futureRelationshipPropertyReferenceRead(long reference);\n }\n",
            "diff_size": 311
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}