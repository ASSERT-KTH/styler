{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "27",
    "information": {
        "errors": [
            {
                "line": "109",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Override\n    protected void setCommonAttributes(Model model) {\n        List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED, RegistrationStatus.PENDING);\n        model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n        model.addAttribute(\"opVersion\", \"v1.6\");\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/27/Ocpp16Controller.java\nindex c70107d2307..b2875a3257f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/27/Ocpp16Controller.java\n@@ -106,8 +106,9 @@ public class Ocpp16Controller extends Ocpp15Controller {\n      */\n     @Override\n     protected void setCommonAttributes(Model model) {\n-        List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED, RegistrationStatus.PENDING);\n-        model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n+        List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED,\n+        RegistrationStatus.PENDING);\n+         model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n         model.addAttribute(\"opVersion\", \"v1.6\");\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/27/Ocpp16Controller.java\nindex c70107d2307..d7ca7da5991 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/27/Ocpp16Controller.java\n@@ -16,6 +16,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n  */\n+\n package de.rwth.idsg.steve.web.controller;\n \n import de.rwth.idsg.steve.ocpp.OcppVersion;\n@@ -58,187 +59,188 @@ import static de.rwth.idsg.steve.web.dto.ocpp.ConfigurationKeyReadWriteEnum.RW;\n @RequestMapping(value = \"/manager/operations/v1.6\")\n public class Ocpp16Controller extends Ocpp15Controller {\n \n-    @Autowired\n-    @Qualifier(\"ChargePointService16_Client\")\n-    private ChargePointService16_Client client16;\n-\n-    @Autowired private ChargingProfileRepository chargingProfileRepository;\n-\n-    // -------------------------------------------------------------------------\n-    // Paths\n-    // -------------------------------------------------------------------------\n-\n-    private static final String GET_COMPOSITE_PATH = \"/GetCompositeSchedule\";\n-    private static final String CLEAR_CHARGING_PATH = \"/ClearChargingProfile\";\n-    private static final String SET_CHARGING_PATH = \"/SetChargingProfile\";\n-    private static final String TRIGGER_MESSAGE_PATH = \"/TriggerMessage\";\n-\n-    // -------------------------------------------------------------------------\n-    // Helpers\n-    // -------------------------------------------------------------------------\n-\n-    protected ChargePointService16_Client getClient16() {\n-        return client16;\n-    }\n-\n-    @Override\n-    protected ChargePointService15_Client getClient15() {\n-        return client16;\n-    }\n-\n-    @Override\n-    protected ChargePointService12_Client getClient12() {\n-        return client16;\n-    }\n-\n-    @Override\n-    protected void setCommonAttributesForTx(Model model) {\n-        model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16));\n-        model.addAttribute(\"opVersion\", \"v1.6\");\n-    }\n-\n-    /**\n-     * From OCPP 1.6 spec: \"While in pending state, the following Central\n-     * System initiated messages are not allowed: RemoteStartTransaction.req\n-     * and RemoteStopTransaction.req\"\n-     *\n-     * Conversely, it means all other operations are allowed for pending state.\n-     */\n-    @Override\n-    protected void setCommonAttributes(Model model) {\n-        List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED, RegistrationStatus.PENDING);\n-        model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n-        model.addAttribute(\"opVersion\", \"v1.6\");\n-    }\n-\n-    @Override\n-    protected Map<String, String> getConfigurationKeys(ConfigurationKeyReadWriteEnum confEnum) {\n-        switch (confEnum) {\n-            case R:\n-                return ConfigurationKeyEnum.OCPP_16_MAP_R;\n-            case RW:\n-                return ConfigurationKeyEnum.OCPP_16_MAP_RW;\n-            default:\n-                return Collections.emptyMap();\n-        }\n-    }\n-\n-    @Override\n-    protected String getRedirectPath() {\n-        return \"redirect:/manager/operations/v1.6/ChangeAvailability\";\n-    }\n-\n-    @Override\n-    protected String getPrefix() {\n-        return \"op16\";\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // Old Http methods with changed logic\n-    // -------------------------------------------------------------------------\n-\n-    @RequestMapping(value = GET_CONF_PATH, method = RequestMethod.GET)\n-    public String getGetConf(Model model) {\n-        setCommonAttributes(model);\n-        model.addAttribute(PARAMS, new GetConfigurationParams());\n-        model.addAttribute(\"ocppConfKeys\", getConfigurationKeys(R));\n-        return getPrefix() + GET_CONF_PATH;\n-    }\n-\n-    @RequestMapping(value = CHANGE_CONF_PATH, method = RequestMethod.GET)\n-    public String getChangeConf(Model model) {\n-        setCommonAttributes(model);\n-        model.addAttribute(PARAMS, new ChangeConfigurationParams());\n-        model.addAttribute(\"ocppConfKeys\", getConfigurationKeys(RW));\n-        return getPrefix() + CHANGE_CONF_PATH;\n-    }\n-\n-    @RequestMapping(value = GET_CONF_PATH, method = RequestMethod.POST)\n-    public String postGetConf(@Valid @ModelAttribute(PARAMS) GetConfigurationParams params,\n-                              BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n-            setCommonAttributes(model);\n-            model.addAttribute(\"ocppConfKeys\", getConfigurationKeys(R));\n-            return getPrefix() + GET_CONF_PATH;\n-        }\n-        return REDIRECT_TASKS_PATH + getClient15().getConfiguration(params);\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // New Http methods (GET)\n-    // -------------------------------------------------------------------------\n-\n-    @RequestMapping(value = GET_COMPOSITE_PATH, method = RequestMethod.GET)\n-    public String getGetCompositeSchedule(Model model) {\n-        setCommonAttributes(model);\n-        model.addAttribute(PARAMS, new GetCompositeScheduleParams());\n-        return getPrefix() + GET_COMPOSITE_PATH;\n-    }\n-\n-    @RequestMapping(value = CLEAR_CHARGING_PATH, method = RequestMethod.GET)\n-    public String getClearChargingProfile(Model model) {\n-        setCommonAttributes(model);\n-        model.addAttribute(\"profileList\", chargingProfileRepository.getBasicInfo());\n-        model.addAttribute(PARAMS, new ClearChargingProfileParams());\n-        return getPrefix() + CLEAR_CHARGING_PATH;\n-    }\n-\n-    @RequestMapping(value = SET_CHARGING_PATH, method = RequestMethod.GET)\n-    public String getSetChargingProfile(Model model) {\n-        setCommonAttributes(model);\n-        model.addAttribute(\"profileList\", chargingProfileRepository.getBasicInfo());\n-        model.addAttribute(PARAMS, new SetChargingProfileParams());\n-        return getPrefix() + SET_CHARGING_PATH;\n-    }\n-\n-    @RequestMapping(value = TRIGGER_MESSAGE_PATH, method = RequestMethod.GET)\n-    public String getTriggerMessage(Model model) {\n-        setCommonAttributes(model);\n-        model.addAttribute(PARAMS, new TriggerMessageParams());\n-        return getPrefix() + TRIGGER_MESSAGE_PATH;\n-    }\n-\n-    // -------------------------------------------------------------------------\n-    // Http methods (POST)\n-    // -------------------------------------------------------------------------\n-\n-    @RequestMapping(value = TRIGGER_MESSAGE_PATH, method = RequestMethod.POST)\n-    public String postTriggerMessage(@Valid @ModelAttribute(PARAMS) TriggerMessageParams params,\n-                                     BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n-            setCommonAttributes(model);\n-            return getPrefix() + TRIGGER_MESSAGE_PATH;\n-        }\n-        return REDIRECT_TASKS_PATH + getClient16().triggerMessage(params);\n-    }\n-\n-    @RequestMapping(value = SET_CHARGING_PATH, method = RequestMethod.POST)\n-    public String postSetChargingProfile(@Valid @ModelAttribute(PARAMS) SetChargingProfileParams params,\n+  @Autowired\n+  @Qualifier(\"ChargePointService16_Client\")\n+  private ChargePointService16_Client client16;\n+\n+  @Autowired\n+  private ChargingProfileRepository chargingProfileRepository;\n+\n+  // -------------------------------------------------------------------------\n+  // Paths\n+  // -------------------------------------------------------------------------\n+\n+  private static final String GET_COMPOSITE_PATH = \"/GetCompositeSchedule\";\n+  private static final String CLEAR_CHARGING_PATH = \"/ClearChargingProfile\";\n+  private static final String SET_CHARGING_PATH = \"/SetChargingProfile\";\n+  private static final String TRIGGER_MESSAGE_PATH = \"/TriggerMessage\";\n+\n+  // -------------------------------------------------------------------------\n+  // Helpers\n+  // -------------------------------------------------------------------------\n+\n+  protected ChargePointService16_Client getClient16() {\n+    return client16;\n+  }\n+\n+  @Override\n+  protected ChargePointService15_Client getClient15() {\n+    return client16;\n+  }\n+\n+  @Override\n+  protected ChargePointService12_Client getClient12() {\n+    return client16;\n+  }\n+\n+  @Override\n+  protected void setCommonAttributesForTx(Model model) {\n+    model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16));\n+    model.addAttribute(\"opVersion\", \"v1.6\");\n+  }\n+\n+  /**\n+   * From OCPP 1.6 spec: \"While in pending state, the following Central\n+   * System initiated messages are not allowed: RemoteStartTransaction.req\n+   * and RemoteStopTransaction.req\"\n+   * <p>\n+   * Conversely, it means all other operations are allowed for pending state.\n+   */\n+  @Override\n+  protected void setCommonAttributes(Model model) {\n+    List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED, RegistrationStatus.PENDING);\n+    model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n+    model.addAttribute(\"opVersion\", \"v1.6\");\n+  }\n+\n+  @Override\n+  protected Map<String, String> getConfigurationKeys(ConfigurationKeyReadWriteEnum confEnum) {\n+    switch (confEnum) {\n+      case R:\n+        return ConfigurationKeyEnum.OCPP_16_MAP_R;\n+      case RW:\n+        return ConfigurationKeyEnum.OCPP_16_MAP_RW;\n+      default:\n+        return Collections.emptyMap();\n+    }\n+  }\n+\n+  @Override\n+  protected String getRedirectPath() {\n+    return \"redirect:/manager/operations/v1.6/ChangeAvailability\";\n+  }\n+\n+  @Override\n+  protected String getPrefix() {\n+    return \"op16\";\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // Old Http methods with changed logic\n+  // -------------------------------------------------------------------------\n+\n+  @RequestMapping(value = GET_CONF_PATH, method = RequestMethod.GET)\n+  public String getGetConf(Model model) {\n+    setCommonAttributes(model);\n+    model.addAttribute(PARAMS, new GetConfigurationParams());\n+    model.addAttribute(\"ocppConfKeys\", getConfigurationKeys(R));\n+    return getPrefix() + GET_CONF_PATH;\n+  }\n+\n+  @RequestMapping(value = CHANGE_CONF_PATH, method = RequestMethod.GET)\n+  public String getChangeConf(Model model) {\n+    setCommonAttributes(model);\n+    model.addAttribute(PARAMS, new ChangeConfigurationParams());\n+    model.addAttribute(\"ocppConfKeys\", getConfigurationKeys(RW));\n+    return getPrefix() + CHANGE_CONF_PATH;\n+  }\n+\n+  @RequestMapping(value = GET_CONF_PATH, method = RequestMethod.POST)\n+  public String postGetConf(@Valid @ModelAttribute(PARAMS) GetConfigurationParams params,\n+                            BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n+      setCommonAttributes(model);\n+      model.addAttribute(\"ocppConfKeys\", getConfigurationKeys(R));\n+      return getPrefix() + GET_CONF_PATH;\n+    }\n+    return REDIRECT_TASKS_PATH + getClient15().getConfiguration(params);\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // New Http methods (GET)\n+  // -------------------------------------------------------------------------\n+\n+  @RequestMapping(value = GET_COMPOSITE_PATH, method = RequestMethod.GET)\n+  public String getGetCompositeSchedule(Model model) {\n+    setCommonAttributes(model);\n+    model.addAttribute(PARAMS, new GetCompositeScheduleParams());\n+    return getPrefix() + GET_COMPOSITE_PATH;\n+  }\n+\n+  @RequestMapping(value = CLEAR_CHARGING_PATH, method = RequestMethod.GET)\n+  public String getClearChargingProfile(Model model) {\n+    setCommonAttributes(model);\n+    model.addAttribute(\"profileList\", chargingProfileRepository.getBasicInfo());\n+    model.addAttribute(PARAMS, new ClearChargingProfileParams());\n+    return getPrefix() + CLEAR_CHARGING_PATH;\n+  }\n+\n+  @RequestMapping(value = SET_CHARGING_PATH, method = RequestMethod.GET)\n+  public String getSetChargingProfile(Model model) {\n+    setCommonAttributes(model);\n+    model.addAttribute(\"profileList\", chargingProfileRepository.getBasicInfo());\n+    model.addAttribute(PARAMS, new SetChargingProfileParams());\n+    return getPrefix() + SET_CHARGING_PATH;\n+  }\n+\n+  @RequestMapping(value = TRIGGER_MESSAGE_PATH, method = RequestMethod.GET)\n+  public String getTriggerMessage(Model model) {\n+    setCommonAttributes(model);\n+    model.addAttribute(PARAMS, new TriggerMessageParams());\n+    return getPrefix() + TRIGGER_MESSAGE_PATH;\n+  }\n+\n+  // -------------------------------------------------------------------------\n+  // Http methods (POST)\n+  // -------------------------------------------------------------------------\n+\n+  @RequestMapping(value = TRIGGER_MESSAGE_PATH, method = RequestMethod.POST)\n+  public String postTriggerMessage(@Valid @ModelAttribute(PARAMS) TriggerMessageParams params,\n+                                   BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n+      setCommonAttributes(model);\n+      return getPrefix() + TRIGGER_MESSAGE_PATH;\n+    }\n+    return REDIRECT_TASKS_PATH + getClient16().triggerMessage(params);\n+  }\n+\n+  @RequestMapping(value = SET_CHARGING_PATH, method = RequestMethod.POST)\n+  public String postSetChargingProfile(@Valid @ModelAttribute(PARAMS) SetChargingProfileParams params,\n+                                       BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n+      setCommonAttributes(model);\n+      return getPrefix() + SET_CHARGING_PATH;\n+    }\n+    return REDIRECT_TASKS_PATH + getClient16().setChargingProfile(params);\n+  }\n+\n+  @RequestMapping(value = CLEAR_CHARGING_PATH, method = RequestMethod.POST)\n+  public String postClearChargingProfile(@Valid @ModelAttribute(PARAMS) ClearChargingProfileParams params,\n                                          BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n-            setCommonAttributes(model);\n-            return getPrefix() + SET_CHARGING_PATH;\n-        }\n-        return REDIRECT_TASKS_PATH + getClient16().setChargingProfile(params);\n+    if (result.hasErrors()) {\n+      setCommonAttributes(model);\n+      return getPrefix() + CLEAR_CHARGING_PATH;\n     }\n+    return REDIRECT_TASKS_PATH + getClient16().clearChargingProfile(params);\n+  }\n \n-    @RequestMapping(value = CLEAR_CHARGING_PATH, method = RequestMethod.POST)\n-    public String postClearChargingProfile(@Valid @ModelAttribute(PARAMS) ClearChargingProfileParams params,\n-                                           BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n-            setCommonAttributes(model);\n-            return getPrefix() + CLEAR_CHARGING_PATH;\n-        }\n-        return REDIRECT_TASKS_PATH + getClient16().clearChargingProfile(params);\n-    }\n-\n-    @RequestMapping(value = GET_COMPOSITE_PATH, method = RequestMethod.POST)\n-    public String postGetCompositeSchedule(@Valid @ModelAttribute(PARAMS) GetCompositeScheduleParams params,\n-                                           BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n-            setCommonAttributes(model);\n-            return getPrefix() + GET_COMPOSITE_PATH;\n-        }\n-        return REDIRECT_TASKS_PATH + getClient16().getCompositeSchedule(params);\n+  @RequestMapping(value = GET_COMPOSITE_PATH, method = RequestMethod.POST)\n+  public String postGetCompositeSchedule(@Valid @ModelAttribute(PARAMS) GetCompositeScheduleParams params,\n+                                         BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n+      setCommonAttributes(model);\n+      return getPrefix() + GET_COMPOSITE_PATH;\n     }\n+    return REDIRECT_TASKS_PATH + getClient16().getCompositeSchedule(params);\n+  }\n }\n",
            "diff_size": 195
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "232",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/27/Ocpp16Controller.java\nindex c70107d2307..fcda08823ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/27/Ocpp16Controller.java\n@@ -15,8 +15,7 @@\n  *\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n- */\n-package de.rwth.idsg.steve.web.controller;\n+ */package de.rwth.idsg.steve.web.controller;\n \n import de.rwth.idsg.steve.ocpp.OcppVersion;\n import de.rwth.idsg.steve.repository.ChargingProfileRepository;\n@@ -203,9 +202,8 @@ public class Ocpp16Controller extends Ocpp15Controller {\n     // -------------------------------------------------------------------------\n \n     @RequestMapping(value = TRIGGER_MESSAGE_PATH, method = RequestMethod.POST)\n-    public String postTriggerMessage(@Valid @ModelAttribute(PARAMS) TriggerMessageParams params,\n-                                     BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n+    public String postTriggerMessage(@Valid @ModelAttribute(PARAMS) TriggerMessageParams params, BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n             setCommonAttributes(model);\n             return getPrefix() + TRIGGER_MESSAGE_PATH;\n         }\n@@ -213,9 +211,8 @@ public class Ocpp16Controller extends Ocpp15Controller {\n     }\n \n     @RequestMapping(value = SET_CHARGING_PATH, method = RequestMethod.POST)\n-    public String postSetChargingProfile(@Valid @ModelAttribute(PARAMS) SetChargingProfileParams params,\n-                                         BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n+    public String postSetChargingProfile(@Valid @ModelAttribute(PARAMS) SetChargingProfileParams params, BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n             setCommonAttributes(model);\n             return getPrefix() + SET_CHARGING_PATH;\n         }\n@@ -223,9 +220,8 @@ public class Ocpp16Controller extends Ocpp15Controller {\n     }\n \n     @RequestMapping(value = CLEAR_CHARGING_PATH, method = RequestMethod.POST)\n-    public String postClearChargingProfile(@Valid @ModelAttribute(PARAMS) ClearChargingProfileParams params,\n-                                           BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n+    public String postClearChargingProfile(@Valid @ModelAttribute(PARAMS) ClearChargingProfileParams params, BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n             setCommonAttributes(model);\n             return getPrefix() + CLEAR_CHARGING_PATH;\n         }\n@@ -233,12 +229,11 @@ public class Ocpp16Controller extends Ocpp15Controller {\n     }\n \n     @RequestMapping(value = GET_COMPOSITE_PATH, method = RequestMethod.POST)\n-    public String postGetCompositeSchedule(@Valid @ModelAttribute(PARAMS) GetCompositeScheduleParams params,\n-                                           BindingResult result, Model model) {\n-        if (result.hasErrors()) {\n+    public String postGetCompositeSchedule(@Valid @ModelAttribute(PARAMS) GetCompositeScheduleParams params, BindingResult result, Model model) {\n+    if (result.hasErrors()) {\n             setCommonAttributes(model);\n             return getPrefix() + GET_COMPOSITE_PATH;\n         }\n         return REDIRECT_TASKS_PATH + getClient16().getCompositeSchedule(params);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/27/Ocpp16Controller.java\nindex c70107d2307..2422e8d3e3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/27/Ocpp16Controller.java\n@@ -40,7 +40,6 @@ import org.springframework.validation.BindingResult;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n-\n import javax.validation.Valid;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -54,6 +53,8 @@ import static de.rwth.idsg.steve.web.dto.ocpp.ConfigurationKeyReadWriteEnum.RW;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 15.03.2018\n  */\n+\n+\n @Controller\n @RequestMapping(value = \"/manager/operations/v1.6\")\n public class Ocpp16Controller extends Ocpp15Controller {\n@@ -61,13 +62,11 @@ public class Ocpp16Controller extends Ocpp15Controller {\n     @Autowired\n     @Qualifier(\"ChargePointService16_Client\")\n     private ChargePointService16_Client client16;\n-\n     @Autowired private ChargingProfileRepository chargingProfileRepository;\n \n     // -------------------------------------------------------------------------\n     // Paths\n     // -------------------------------------------------------------------------\n-\n     private static final String GET_COMPOSITE_PATH = \"/GetCompositeSchedule\";\n     private static final String CLEAR_CHARGING_PATH = \"/ClearChargingProfile\";\n     private static final String SET_CHARGING_PATH = \"/SetChargingProfile\";\n@@ -76,7 +75,6 @@ public class Ocpp16Controller extends Ocpp15Controller {\n     // -------------------------------------------------------------------------\n     // Helpers\n     // -------------------------------------------------------------------------\n-\n     protected ChargePointService16_Client getClient16() {\n         return client16;\n     }\n@@ -104,6 +102,7 @@ public class Ocpp16Controller extends Ocpp15Controller {\n      *\n      * Conversely, it means all other operations are allowed for pending state.\n      */\n+\n     @Override\n     protected void setCommonAttributes(Model model) {\n         List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED, RegistrationStatus.PENDING);\n@@ -116,8 +115,10 @@ public class Ocpp16Controller extends Ocpp15Controller {\n         switch (confEnum) {\n             case R:\n                 return ConfigurationKeyEnum.OCPP_16_MAP_R;\n+\n             case RW:\n                 return ConfigurationKeyEnum.OCPP_16_MAP_RW;\n+\n             default:\n                 return Collections.emptyMap();\n         }\n@@ -161,7 +162,8 @@ public class Ocpp16Controller extends Ocpp15Controller {\n             model.addAttribute(\"ocppConfKeys\", getConfigurationKeys(R));\n             return getPrefix() + GET_CONF_PATH;\n         }\n-        return REDIRECT_TASKS_PATH + getClient15().getConfiguration(params);\n+        return REDIRECT_TASKS_PATH + getClient15()\n+            .getConfiguration(params);\n     }\n \n     // -------------------------------------------------------------------------\n@@ -209,7 +211,8 @@ public class Ocpp16Controller extends Ocpp15Controller {\n             setCommonAttributes(model);\n             return getPrefix() + TRIGGER_MESSAGE_PATH;\n         }\n-        return REDIRECT_TASKS_PATH + getClient16().triggerMessage(params);\n+        return REDIRECT_TASKS_PATH + getClient16()\n+            .triggerMessage(params);\n     }\n \n     @RequestMapping(value = SET_CHARGING_PATH, method = RequestMethod.POST)\n@@ -219,7 +222,8 @@ public class Ocpp16Controller extends Ocpp15Controller {\n             setCommonAttributes(model);\n             return getPrefix() + SET_CHARGING_PATH;\n         }\n-        return REDIRECT_TASKS_PATH + getClient16().setChargingProfile(params);\n+        return REDIRECT_TASKS_PATH + getClient16()\n+            .setChargingProfile(params);\n     }\n \n     @RequestMapping(value = CLEAR_CHARGING_PATH, method = RequestMethod.POST)\n@@ -229,7 +233,8 @@ public class Ocpp16Controller extends Ocpp15Controller {\n             setCommonAttributes(model);\n             return getPrefix() + CLEAR_CHARGING_PATH;\n         }\n-        return REDIRECT_TASKS_PATH + getClient16().clearChargingProfile(params);\n+        return REDIRECT_TASKS_PATH + getClient16()\n+            .clearChargingProfile(params);\n     }\n \n     @RequestMapping(value = GET_COMPOSITE_PATH, method = RequestMethod.POST)\n@@ -239,6 +244,7 @@ public class Ocpp16Controller extends Ocpp15Controller {\n             setCommonAttributes(model);\n             return getPrefix() + GET_COMPOSITE_PATH;\n         }\n-        return REDIRECT_TASKS_PATH + getClient16().getCompositeSchedule(params);\n+        return REDIRECT_TASKS_PATH + getClient16()\n+            .getCompositeSchedule(params);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/27/Ocpp16Controller.java\nindex c70107d2307..b2875a3257f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_random/27/Ocpp16Controller.java\n@@ -106,8 +106,9 @@ public class Ocpp16Controller extends Ocpp15Controller {\n      */\n     @Override\n     protected void setCommonAttributes(Model model) {\n-        List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED, RegistrationStatus.PENDING);\n-        model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n+        List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED,\n+        RegistrationStatus.PENDING);\n+         model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n         model.addAttribute(\"opVersion\", \"v1.6\");\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 226).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "column": "49",
                    "severity": "error",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "92",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "109",
                    "column": "92",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "109",
                    "column": "120",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/27/Ocpp16Controller.java\nindex c70107d2307..854fbf03b4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/27/Ocpp16Controller.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/27/Ocpp16Controller.java\n@@ -106,8 +106,7 @@ public class Ocpp16Controller extends Ocpp15Controller {\n      */\n     @Override\n     protected void setCommonAttributes(Model model) {\n-        List<RegistrationStatus> inStatusFilter = Arrays.asList(RegistrationStatus.ACCEPTED, RegistrationStatus.PENDING);\n-        model.addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n+        List<RegistrationStatus> inStatusFilter =Arrays.asList(RegistrationStatus.ACCEPTED ,RegistrationStatus.PENDING);model .addAttribute(\"cpList\", chargePointHelperService.getChargePoints(OcppVersion.V_16, inStatusFilter));\n         model.addAttribute(\"opVersion\", \"v1.6\");\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}