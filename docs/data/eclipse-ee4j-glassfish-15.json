{
    "project_name": "eclipse-ee4j-glassfish",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "54",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "GlassFish V3 dotted names implementation (MBean).\n */\npublic final class PathnamesImpl extends AMXImplBase // implements Pathnames  (can't directly implement the interface)\n{\n\n    private static final int MAX_CACHE_SIZE = 1024;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "49",
                    "column": "54",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "50",
                    "column": "25",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/15/PathnamesImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/15/PathnamesImpl.java\nindex 585833855c8..83c66f58e96 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/15/PathnamesImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/intellij/15/PathnamesImpl.java\n@@ -44,13 +44,15 @@ import static org.glassfish.external.amx.AMX.ATTR_PARENT;\n import static org.glassfish.external.amx.AMX.PARENT_PATH_KEY;\n \n /**\n-GlassFish V3 dotted names implementation (MBean).\n+ * GlassFish V3 dotted names implementation (MBean).\n  */\n-public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (can't directly implement the interface)\n+public final class PathnamesImpl\n+    extends AMXImplBase // implements Pathnames  (can't directly implement the interface)\n {\n \n     private static final int MAX_CACHE_SIZE = 1024;\n-    private final ConcurrentMap<String, ObjectName> mPathnameCache = new ConcurrentHashMap<String, ObjectName>();\n+    private final ConcurrentMap<String, ObjectName> mPathnameCache =\n+        new ConcurrentHashMap<String, ObjectName>();\n \n     public PathnamesImpl(final ObjectName parentObjectName) {\n         super(parentObjectName, Pathnames.class);\n@@ -200,8 +202,9 @@ public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (c\n         } catch (final Exception e) {\n             if (!isInstanceNotFound(e)) {\n                 AMXLoggerInfo.getLogger().log(Level.WARNING,\n-                        AMXLoggerInfo.cantGetChildren,\n-                        new Object[] {top.objectName(), ExceptionUtil.getRootCause(e).getLocalizedMessage()});\n+                    AMXLoggerInfo.cantGetChildren,\n+                    new Object[] {top.objectName(),\n+                        ExceptionUtil.getRootCause(e).getLocalizedMessage()});\n                 // just return, nothing we can do.  Typically it could be InstanceNotFoundException\n             }\n             return;\n@@ -216,7 +219,8 @@ public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (c\n             } catch (final Exception e) {\n                 if (!isInstanceNotFound(e)) {\n                     AMXLoggerInfo.getLogger().log(Level.WARNING, AMXLoggerInfo.problemWithMbean,\n-                            new Object[] { child.objectName(), ExceptionUtil.getRootCause(e).getLocalizedMessage()});\n+                        new Object[] {child.objectName(),\n+                            ExceptionUtil.getRootCause(e).getLocalizedMessage()});\n                     // nothing we can do.\n                 }\n             }\n@@ -246,9 +250,9 @@ public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (c\n             return all;\n         } catch (final Throwable t) {\n             AMXLoggerInfo.getLogger().log(Level.WARNING, AMXLoggerInfo.unexpectedThrowable,\n-                    ExceptionUtil.getRootCause(t).getLocalizedMessage());\n+                ExceptionUtil.getRootCause(t).getLocalizedMessage());\n         }\n-        return new String[]{DomainRoot.PATH};\n+        return new String[] {DomainRoot.PATH};\n     }\n \n     public ObjectName[] listObjectNames(final String path, final boolean recursive) {\n@@ -266,7 +270,7 @@ public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (c\n                 paths.add(amx.path());\n             } catch (final Exception e) {\n                 AMXLoggerInfo.getLogger().log(Level.WARNING, AMXLoggerInfo.cantGetPath,\n-                        new Object[]{amx.objectName(), e.getLocalizedMessage()});\n+                    new Object[] {amx.objectName(), e.getLocalizedMessage()});\n             }\n         }\n \n@@ -292,7 +296,7 @@ public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (c\n             buf.append(NL);\n \n             final Map<String, Object> attributesMap = amx.attributesMap();\n-            for (final Map.Entry<String,Object> e : attributesMap.entrySet()) {\n+            for (final Map.Entry<String, Object> e : attributesMap.entrySet()) {\n                 buf.append(\"\\t\");\n                 buf.append(e.getKey());\n                 buf.append(\" = \");\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "49",
                    "column": "54",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/15/PathnamesImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/15/PathnamesImpl.java\nindex 585833855c8..586a290617e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/15/PathnamesImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/naturalize/15/PathnamesImpl.java\n@@ -303,21 +303,4 @@ public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (c\n         }\n         return buf.toString();\n     }\n-}\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "49",
                    "column": "54",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "51",
                    "column": "2",
                    "severity": "warning",
                    "message": "'class def lcurly' has incorrect indentation level 1, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/15/PathnamesImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/15/PathnamesImpl.java\nindex 585833855c8..758614c9722 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/errored/1/15/PathnamesImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-ee4j-glassfish/styler_three_grams/15/PathnamesImpl.java\n@@ -46,8 +46,9 @@ import static org.glassfish.external.amx.AMX.PARENT_PATH_KEY;\n /**\n GlassFish V3 dotted names implementation (MBean).\n  */\n-public final class PathnamesImpl extends AMXImplBase // implements Pathnames  (can't directly implement the interface)\n-{\n+public final class PathnamesImpl extends AMXImplBase\n+// implements Pathnames  (can't directly implement the interface)\n+ {\n \n     private static final int MAX_CACHE_SIZE = 1024;\n     private final ConcurrentMap<String, ObjectName> mPathnameCache = new ConcurrentHashMap<String, ObjectName>();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}