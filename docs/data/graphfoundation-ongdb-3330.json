{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3330",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3330/RelationshipSparseSelection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3330/RelationshipSparseSelection.java\nindex aa3c4c61527..0e337425c80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3330/RelationshipSparseSelection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3330/RelationshipSparseSelection.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.helpers;\n \n import org.apache.commons.lang3.ArrayUtils;\n@@ -28,140 +29,139 @@ import org.neo4j.internal.kernel.api.RelationshipTraversalCursor;\n  */\n abstract class RelationshipSparseSelection\n {\n-    private enum Dir\n-    {\n-        OUT,\n-        IN,\n-        BOTH\n-    }\n-\n-    protected RelationshipTraversalCursor cursor;\n-    private int[] types;\n-    private Dir targetDirection;\n-    private boolean onRelationship;\n-    private boolean firstNext;\n-\n-    /**\n-     * Traverse all outgoing relationships including loops of the provided relationship types.\n-     *\n-     * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n-     */\n-    public final void outgoing( RelationshipTraversalCursor relationshipCursor )\n-    {\n-        init( relationshipCursor, null, Dir.OUT );\n-    }\n-\n-    /**\n-     * Traverse all outgoing relationships including loops of the provided relationship types.\n-     *\n-     * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n-     * @param types Relationship types to traverse\n-     */\n-    public final void outgoing(\n-            RelationshipTraversalCursor relationshipCursor,\n-            int[] types )\n+  private enum Dir\n+  {\n+    OUT,\n+    IN,\n+    BOTH\n+  }\n+\n+  protected RelationshipTraversalCursor cursor;\n+  private int[] types;\n+  private Dir targetDirection;\n+  private boolean onRelationship;\n+  private boolean firstNext;\n+\n+  /**\n+   * Traverse all outgoing relationships including loops of the provided relationship types.\n+   *\n+   * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n+   */\n+  public final void outgoing(RelationshipTraversalCursor relationshipCursor)\n+  {\n+    init(relationshipCursor, null, Dir.OUT);\n+  }\n+\n+  /**\n+   * Traverse all outgoing relationships including loops of the provided relationship types.\n+   *\n+   * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n+   * @param types              Relationship types to traverse\n+   */\n+  public final void outgoing(\n+      RelationshipTraversalCursor relationshipCursor,\n+      int[] types)\n+  {\n+    init(relationshipCursor, types, Dir.OUT);\n+  }\n+\n+  /**\n+   * Traverse all incoming relationships including loops of the provided relationship types.\n+   *\n+   * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n+   */\n+  public final void incoming(RelationshipTraversalCursor relationshipCursor)\n+  {\n+    init(relationshipCursor, null, Dir.IN);\n+  }\n+\n+  /**\n+   * Traverse all incoming relationships including loops of the provided relationship types.\n+   *\n+   * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n+   * @param types              Relationship types to traverse\n+   */\n+  public final void incoming(\n+      RelationshipTraversalCursor relationshipCursor,\n+      int[] types)\n+  {\n+    init(relationshipCursor, types, Dir.IN);\n+  }\n+\n+  /**\n+   * Traverse all relationships of the provided relationship types.\n+   *\n+   * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n+   */\n+  public final void all(RelationshipTraversalCursor relationshipCursor)\n+  {\n+    init(relationshipCursor, null, Dir.BOTH);\n+  }\n+\n+  /**\n+   * Traverse all relationships of the provided relationship types.\n+   *\n+   * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n+   * @param types              Relationship types to traverse\n+   */\n+  public final void all(\n+      RelationshipTraversalCursor relationshipCursor,\n+      int[] types)\n+  {\n+    init(relationshipCursor, types, Dir.BOTH);\n+  }\n+\n+  private void init(RelationshipTraversalCursor relationshipCursor, int[] types, Dir targetDirection)\n+  {\n+    this.cursor = relationshipCursor;\n+    this.types = types;\n+    this.targetDirection = targetDirection;\n+    this.onRelationship = false;\n+    this.firstNext = true;\n+  }\n+\n+  /**\n+   * Fetch the next valid relationship.\n+   *\n+   * @return True is a valid relationship was found\n+   */\n+  protected boolean fetchNext()\n+  {\n+    if (onRelationship || firstNext)\n     {\n-        init( relationshipCursor, types, Dir.OUT );\n+      firstNext = false;\n+      do\n+      {\n+        onRelationship = cursor.next();\n+      } while (onRelationship && (!correctDirection() || !correctType()));\n     }\n \n-    /**\n-     * Traverse all incoming relationships including loops of the provided relationship types.\n-     *\n-     * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n-     */\n-    public final void incoming( RelationshipTraversalCursor relationshipCursor )\n-    {\n-        init( relationshipCursor, null, Dir.IN );\n-    }\n+    return onRelationship;\n+  }\n \n-    /**\n-     * Traverse all incoming relationships including loops of the provided relationship types.\n-     *\n-     * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n-     * @param types Relationship types to traverse\n-     */\n-    public final void incoming(\n-            RelationshipTraversalCursor relationshipCursor,\n-            int[] types )\n-    {\n-        init( relationshipCursor, types, Dir.IN );\n-    }\n+  private boolean correctDirection()\n+  {\n+    return targetDirection == Dir.BOTH ||\n+        (targetDirection == Dir.OUT && cursor.originNodeReference() == cursor.sourceNodeReference()) ||\n+        (targetDirection == Dir.IN && cursor.originNodeReference() == cursor.targetNodeReference());\n+  }\n \n-    /**\n-     * Traverse all relationships of the provided relationship types.\n-     *\n-     * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n-     */\n-    public final void all( RelationshipTraversalCursor relationshipCursor )\n-    {\n-        init( relationshipCursor, null, Dir.BOTH );\n-    }\n+  private boolean correctType()\n+  {\n+    return types == null || ArrayUtils.contains(types, cursor.type());\n+  }\n \n-    /**\n-     * Traverse all relationships of the provided relationship types.\n-     *\n-     * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n-     * @param types Relationship types to traverse\n-     */\n-    public final void all(\n-            RelationshipTraversalCursor relationshipCursor,\n-            int[] types )\n+  public void close()\n+  {\n+    try\n     {\n-        init( relationshipCursor, types, Dir.BOTH );\n-    }\n-\n-    private void init( RelationshipTraversalCursor relationshipCursor, int[] types, Dir targetDirection )\n-    {\n-        this.cursor = relationshipCursor;\n-        this.types = types;\n-        this.targetDirection = targetDirection;\n-        this.onRelationship = false;\n-        this.firstNext = true;\n-    }\n-\n-    /**\n-     * Fetch the next valid relationship.\n-     *\n-     * @return True is a valid relationship was found\n-     */\n-    protected boolean fetchNext()\n-    {\n-        if ( onRelationship || firstNext )\n-        {\n-            firstNext = false;\n-            do\n-            {\n-                onRelationship = cursor.next();\n-            } while ( onRelationship && (!correctDirection() || !correctType()) );\n-        }\n-\n-        return onRelationship;\n-    }\n-\n-    private boolean correctDirection()\n-    {\n-        return targetDirection == Dir.BOTH ||\n-                (targetDirection == Dir.OUT && cursor.originNodeReference() == cursor.sourceNodeReference()) ||\n-                (targetDirection == Dir.IN && cursor.originNodeReference() == cursor.targetNodeReference());\n-    }\n-\n-    private boolean correctType()\n-    {\n-        return types == null || ArrayUtils.contains( types, cursor.type() );\n-    }\n-\n-    public void close()\n+      if (cursor != null)\n+      {\n+        cursor.close();\n+      }\n+    } finally\n     {\n-        try\n-        {\n-            if ( cursor != null )\n-            {\n-                cursor.close();\n-            }\n-        }\n-        finally\n-        {\n-            cursor = null;\n-        }\n+      cursor = null;\n     }\n+  }\n }\n",
            "diff_size": 200
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3330/RelationshipSparseSelection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3330/RelationshipSparseSelection.java\nindex aa3c4c61527..4464dcc7421 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3330/RelationshipSparseSelection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3330/RelationshipSparseSelection.java\n@@ -30,8 +30,7 @@ abstract class RelationshipSparseSelection\n {\n     private enum Dir\n     {\n-        OUT,\n-        IN,\n+        OUT, IN,\n         BOTH\n     }\n \n@@ -57,9 +56,7 @@ abstract class RelationshipSparseSelection\n      * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n      * @param types Relationship types to traverse\n      */\n-    public final void outgoing(\n-            RelationshipTraversalCursor relationshipCursor,\n-            int[] types )\n+    public final void outgoing( RelationshipTraversalCursor relationshipCursor, int[] types )\n     {\n         init( relationshipCursor, types, Dir.OUT );\n     }\n@@ -80,9 +77,7 @@ abstract class RelationshipSparseSelection\n      * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n      * @param types Relationship types to traverse\n      */\n-    public final void incoming(\n-            RelationshipTraversalCursor relationshipCursor,\n-            int[] types )\n+    public final void incoming( RelationshipTraversalCursor relationshipCursor, int[] types )\n     {\n         init( relationshipCursor, types, Dir.IN );\n     }\n@@ -103,9 +98,7 @@ abstract class RelationshipSparseSelection\n      * @param relationshipCursor Relationship traversal cursor to use. Pre-initialized on node.\n      * @param types Relationship types to traverse\n      */\n-    public final void all(\n-            RelationshipTraversalCursor relationshipCursor,\n-            int[] types )\n+    public final void all( RelationshipTraversalCursor relationshipCursor, int[] types )\n     {\n         init( relationshipCursor, types, Dir.BOTH );\n     }\n@@ -140,9 +133,8 @@ abstract class RelationshipSparseSelection\n \n     private boolean correctDirection()\n     {\n-        return targetDirection == Dir.BOTH ||\n-                (targetDirection == Dir.OUT && cursor.originNodeReference() == cursor.sourceNodeReference()) ||\n-                (targetDirection == Dir.IN && cursor.originNodeReference() == cursor.targetNodeReference());\n+        return targetDirection == Dir.BOTH || ( targetDirection == Dir.OUT && cursor.originNodeReference() == cursor.sourceNodeReference()) ||\n+                ( targetDirection == Dir.IN && cursor.originNodeReference() == cursor.targetNodeReference() );\n     }\n \n     private boolean correctType()\n@@ -164,4 +156,4 @@ abstract class RelationshipSparseSelection\n             cursor = null;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}