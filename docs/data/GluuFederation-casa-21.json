{
    "project_name": "GluuFederation-casa",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "76",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 160).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        List<SecurityKey> devices = new ArrayList<>();\n        String dn = persistenceService.getPersonDn(userId);\n        logger.trace(\"Finding Fido 2 devices with state={} for user={}\", active ? Fido2RegistrationStatus.registered : Fido2RegistrationStatus.pending, userId);\n\n        if (!branchMissing(FIDO2_OU, dn)) {\n            Fido2RegistrationEntry rentry = getSampleRegistrationEntry(dn, active);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/21/Fido2Service.java\nindex 169bc6b7502..9ad0e216ea6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/21/Fido2Service.java\n@@ -73,7 +73,9 @@ public class Fido2Service extends BaseService {\n \n         List<SecurityKey> devices = new ArrayList<>();\n         String dn = persistenceService.getPersonDn(userId);\n-        logger.trace(\"Finding Fido 2 devices with state={} for user={}\", active ? Fido2RegistrationStatus.registered : Fido2RegistrationStatus.pending, userId);\n+        logger\n+            .trace(\"Finding Fido 2 devices with state={} for user={}\", active ? Fido2RegistrationStatus.registered : Fido2RegistrationStatus.pending,\n+                userId);\n \n         if (!branchMissing(FIDO2_OU, dn)) {\n             Fido2RegistrationEntry rentry = getSampleRegistrationEntry(dn, active);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/21/Fido2Service.java\nindex 169bc6b7502..33d36b164f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/21/Fido2Service.java\n@@ -173,4 +173,4 @@ public class Fido2Service extends BaseService {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/21/Fido2Service.java\nindex 169bc6b7502..4d764f6a1e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/21/Fido2Service.java\n@@ -9,7 +9,6 @@ import org.gluu.oxauth.fido2.model.entry.Fido2RegistrationEntry;\n import org.gluu.oxauth.fido2.model.entry.Fido2RegistrationStatus;\n import org.jboss.resteasy.client.jaxrs.ResteasyClient;\n import org.slf4j.Logger;\n-\n import javax.annotation.PostConstruct;\n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n@@ -22,17 +21,15 @@ import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n \n+\n @Named\n @ApplicationScoped\n public class Fido2Service extends BaseService {\n \n     @Inject\n     private Logger logger;\n-\n     private ResteasyClient client;\n-\n     private AttestationService attestationService;\n-\n     private static final String FIDO2_OU = \"fido2_register\";\n \n     @PostConstruct\n@@ -41,19 +38,17 @@ public class Fido2Service extends BaseService {\n     }\n \n     public void reloadConfiguration() {\n-\n         props = persistenceService.getCustScriptConfigProperties(SecurityKey2Extension.ACR);\n         String tmp = getScriptPropertyValue(\"fido2_server_uri\");\n-\n         if (tmp == null) {\n             logger.error(\"No fido2_server_uri param found in fido2 script\");\n             logger.info(\"Fido 2 integration will not work properly\");\n         } else {\n+\n             try {\n                 tmp += \"/.well-known/fido2-configuration\";\n                 logger.info(\"Retrieving contents of URL {}\", tmp);\n                 String attestationURL = mapper.readTree(new URL(tmp)).get(\"attestation\").get(\"base_path\").asText();\n-\n                 logger.info(\"Base path is {}\", attestationURL);\n                 client = RSUtils.getClient();\n                 attestationService = client.target(attestationURL).proxy(AttestationService.class);\n@@ -70,14 +65,12 @@ public class Fido2Service extends BaseService {\n     }\n \n     public List<SecurityKey> getDevices(String userId, boolean active) {\n-\n         List<SecurityKey> devices = new ArrayList<>();\n         String dn = persistenceService.getPersonDn(userId);\n         logger.trace(\"Finding Fido 2 devices with state={} for user={}\", active ? Fido2RegistrationStatus.registered : Fido2RegistrationStatus.pending, userId);\n \n         if (!branchMissing(FIDO2_OU, dn)) {\n             Fido2RegistrationEntry rentry = getSampleRegistrationEntry(dn, active);\n-\n             for (Fido2RegistrationEntry entry : persistenceService.find(rentry)) {\n                 SecurityKey sk = new SecurityKey();\n                 sk.setId(entry.getId());\n@@ -87,21 +80,17 @@ public class Fido2Service extends BaseService {\n             }\n         }\n         return devices.stream().sorted().collect(Collectors.toList());\n-\n     }\n \n     private Fido2RegistrationEntry getSampleRegistrationEntry(String userDN, boolean active) {\n-\n         String dn = String.format(\"ou=%s,%s\", FIDO2_OU, userDN);\n         Fido2RegistrationEntry rentry = new Fido2RegistrationEntry();\n-\n         rentry.setBaseDn(dn);\n+\n         if (active) {\n             rentry.setRegistrationStatus(Fido2RegistrationStatus.registered);\n         }\n-\n         return rentry;\n-\n     }\n \n     public boolean updateDevice(FidoDevice device) {\n@@ -113,7 +102,6 @@ public class Fido2Service extends BaseService {\n             success = persistenceService.modify(deviceRegistration);\n         }\n         return success;\n-\n     }\n \n     public boolean removeDevice(FidoDevice device) {\n@@ -124,16 +112,13 @@ public class Fido2Service extends BaseService {\n             success = persistenceService.delete(rentry);\n         }\n         return success;\n-\n     }\n \n     private Fido2RegistrationEntry getDeviceRegistrationFor(FidoDevice device) {\n-\n         String id = device.getId();\n         Fido2RegistrationEntry deviceRegistration = new Fido2RegistrationEntry();\n         deviceRegistration.setBaseDn(persistenceService.getPeopleDn());\n         deviceRegistration.setId(id);\n-\n         List<Fido2RegistrationEntry> list = persistenceService.find(deviceRegistration);\n         if (list.size() == 1) {\n             return list.get(0);\n@@ -145,12 +130,10 @@ public class Fido2Service extends BaseService {\n     }\n \n     public String doRegister(String userName, String displayName) throws Exception {\n-\n         Map<String, String> map = new HashMap<>();\n         map.put(\"username\", userName);\n         map.put(\"displayName\", displayName);\n         return attestationService.register(mapper.writeValueAsString(map)).readEntity(String.class);\n-\n     }\n \n     public boolean verifyRegistration(String tokenResponse) throws Exception {\n@@ -158,11 +141,11 @@ public class Fido2Service extends BaseService {\n     }\n \n     public SecurityKey getLatestSecurityKey(String userId, long time) {\n-\n         SecurityKey sk = null;\n         try {\n             List<SecurityKey> list = getDevices(userId, false);\n             sk = FidoService.getRecentlyCreatedDevice(list, time);\n+\n             if (sk != null && sk.getNickName() != null) {\n                 sk = null;    //should have no name\n             }\n@@ -170,7 +153,6 @@ public class Fido2Service extends BaseService {\n             logger.error(e.getMessage(), e);\n         }\n         return sk;\n-\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/21/Fido2Service.java\nindex 169bc6b7502..a3c1e001a81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/21/Fido2Service.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/21/Fido2Service.java\n@@ -73,7 +73,7 @@ public class Fido2Service extends BaseService {\n \n         List<SecurityKey> devices = new ArrayList<>();\n         String dn = persistenceService.getPersonDn(userId);\n-        logger.trace(\"Finding Fido 2 devices with state={} for user={}\", active ? Fido2RegistrationStatus.registered : Fido2RegistrationStatus.pending, userId);\n+        logger .trace(\"Finding Fido 2 devices with state={} for user={}\", active ? Fido2RegistrationStatus.registered : Fido2RegistrationStatus.pending, userId);\n \n         if (!branchMissing(FIDO2_OU, dn)) {\n             Fido2RegistrationEntry rentry = getSampleRegistrationEntry(dn, active);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}