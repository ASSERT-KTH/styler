{
    "project_name": "codefollower-H2-Research",
    "error_id": "312",
    "information": {
        "errors": [
            {
                "line": "120",
                "column": "37",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "                }\n            } else {\n                if (text == null) { //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n                    db.removeDatabaseObject(session, comment);\n                } else {\n                    comment.setCommentText(text);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/312/SetComment.java\nindex f5643b82777..cb0840371db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/312/SetComment.java\n@@ -117,8 +117,9 @@ public class SetComment extends DefineCommand {\n                     db.addDatabaseObject(session, comment);\n                 }\n             } else {\n-                if (text == null) { //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n-                    db.removeDatabaseObject(session, comment);\n+                if (text == null) {\n+                    //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n+                     db.removeDatabaseObject(session, comment);\n                 } else {\n                     comment.setCommentText(text);\n                     db.updateMeta(session, comment);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "121",
                    "column": "29",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/312/SetComment.java\nindex f5643b82777..43fe9ab6989 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/312/SetComment.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import org.h2.api.ErrorCode;\n@@ -21,140 +22,140 @@ import org.h2.table.Table;\n  */\n public class SetComment extends DefineCommand {\n \n-    private String schemaName;\n-    private String objectName;\n-    private boolean column;\n-    private String columnName;\n-    private int objectType;\n-    private Expression expr;\n+  private String schemaName;\n+  private String objectName;\n+  private boolean column;\n+  private String columnName;\n+  private int objectType;\n+  private Expression expr;\n+\n+  public SetComment(Session session) {\n+    super(session);\n+  }\n \n-    public SetComment(Session session) {\n-        super(session);\n+  @Override\n+  public int update() {\n+    session.commit(true);\n+    Database db = session.getDatabase();\n+    session.getUser().checkAdmin();\n+    DbObject object = null;\n+    int errorCode = ErrorCode.GENERAL_ERROR_1;\n+    if (schemaName == null) {\n+      schemaName = session.getCurrentSchemaName();\n+    }\n+    switch (objectType) {\n+      case DbObject.CONSTANT:\n+        object = db.getSchema(schemaName).getConstant(objectName);\n+        break;\n+      case DbObject.CONSTRAINT:\n+        object = db.getSchema(schemaName).getConstraint(objectName);\n+        break;\n+      case DbObject.FUNCTION_ALIAS:\n+        object = db.getSchema(schemaName).findFunction(objectName);\n+        errorCode = ErrorCode.FUNCTION_ALIAS_NOT_FOUND_1;\n+        break;\n+      case DbObject.INDEX:\n+        object = db.getSchema(schemaName).getIndex(objectName);\n+        break;\n+      case DbObject.ROLE:\n+        schemaName = null;\n+        object = db.findRole(objectName);\n+        errorCode = ErrorCode.ROLE_NOT_FOUND_1;\n+        break;\n+      case DbObject.SCHEMA:\n+        schemaName = null;\n+        object = db.findSchema(objectName);\n+        errorCode = ErrorCode.SCHEMA_NOT_FOUND_1;\n+        break;\n+      case DbObject.SEQUENCE:\n+        object = db.getSchema(schemaName).getSequence(objectName);\n+        break;\n+      case DbObject.TABLE_OR_VIEW:\n+        object = db.getSchema(schemaName).getTableOrView(session, objectName);\n+        break;\n+      case DbObject.TRIGGER:\n+        object = db.getSchema(schemaName).findTrigger(objectName);\n+        errorCode = ErrorCode.TRIGGER_NOT_FOUND_1;\n+        break;\n+      case DbObject.USER:\n+        schemaName = null;\n+        object = db.getUser(objectName);\n+        break;\n+      case DbObject.DOMAIN:\n+        object = db.getSchema(schemaName).findDomain(objectName);\n+        errorCode = ErrorCode.DOMAIN_ALREADY_EXISTS_1;\n+        break;\n+      default:\n+    }\n+    if (object == null) {\n+      throw DbException.get(errorCode, objectName);\n+    }\n+    String text = expr.optimize(session).getValue(session).getString();\n+    if (column) {\n+      Table table = (Table) object;\n+      table.getColumn(columnName).setComment(text);\n+    } else {\n+      object.setComment(text);\n     }\n \n-    @Override\n-    public int update() {\n-        session.commit(true);\n-        Database db = session.getDatabase();\n-        session.getUser().checkAdmin();\n-        DbObject object = null;\n-        int errorCode = ErrorCode.GENERAL_ERROR_1;\n-        if (schemaName == null) {\n-            schemaName = session.getCurrentSchemaName();\n-        }\n-        switch (objectType) {\n-        case DbObject.CONSTANT:\n-            object = db.getSchema(schemaName).getConstant(objectName);\n-            break;\n-        case DbObject.CONSTRAINT:\n-            object = db.getSchema(schemaName).getConstraint(objectName);\n-            break;\n-        case DbObject.FUNCTION_ALIAS:\n-            object = db.getSchema(schemaName).findFunction(objectName);\n-            errorCode = ErrorCode.FUNCTION_ALIAS_NOT_FOUND_1;\n-            break;\n-        case DbObject.INDEX:\n-            object = db.getSchema(schemaName).getIndex(objectName);\n-            break;\n-        case DbObject.ROLE:\n-            schemaName = null;\n-            object = db.findRole(objectName);\n-            errorCode = ErrorCode.ROLE_NOT_FOUND_1;\n-            break;\n-        case DbObject.SCHEMA:\n-            schemaName = null;\n-            object = db.findSchema(objectName);\n-            errorCode = ErrorCode.SCHEMA_NOT_FOUND_1;\n-            break;\n-        case DbObject.SEQUENCE:\n-            object = db.getSchema(schemaName).getSequence(objectName);\n-            break;\n-        case DbObject.TABLE_OR_VIEW:\n-            object = db.getSchema(schemaName).getTableOrView(session, objectName);\n-            break;\n-        case DbObject.TRIGGER:\n-            object = db.getSchema(schemaName).findTrigger(objectName);\n-            errorCode = ErrorCode.TRIGGER_NOT_FOUND_1;\n-            break;\n-        case DbObject.USER:\n-            schemaName = null;\n-            object = db.getUser(objectName);\n-            break;\n-        case DbObject.DOMAIN:\n-            object = db.getSchema(schemaName).findDomain(objectName);\n-            errorCode = ErrorCode.DOMAIN_ALREADY_EXISTS_1;\n-            break;\n-        default:\n-        }\n-        if (object == null) {\n-            throw DbException.get(errorCode, objectName);\n-        }\n-        String text = expr.optimize(session).getValue(session).getString();\n-        if (column) {\n-            Table table = (Table) object;\n-            table.getColumn(columnName).setComment(text);\n+    //\u5bf9\u4e8e\u8868\u3001\u89c6\u56fe\u3001\u7d22\u5f15\u3001\u5217\u3001\u7528\u6237\u3001\u7ea6\u675f\u7684\u6ce8\u91ca\u76f4\u63a5\u66f4\u65b0\u5230\u4ed6\u4eec\u7684\u5bf9\u8c61\u81ea\u8eab\uff0c\n+    //\u5176\u4ed6\u7684\u65b0\u5efaComment\u5b9e\u4f8b\n+    //\u5982: COMMENT ON ROLE myrole IS 'role comment'\n+    if (column || objectType == DbObject.TABLE_OR_VIEW ||\n+        objectType == DbObject.USER ||\n+        objectType == DbObject.INDEX ||\n+        objectType == DbObject.CONSTRAINT) {\n+      db.updateMeta(session, object);\n+    } else {\n+      Comment comment = db.findComment(object);\n+      if (comment == null) {\n+        if (text == null) {\n+          // reset a non-existing comment - nothing to do\n         } else {\n-            object.setComment(text);\n+          int id = getObjectId();\n+          comment = new Comment(db, id, object);\n+          comment.setCommentText(text);\n+          db.addDatabaseObject(session, comment);\n         }\n-        \n-        //\u5bf9\u4e8e\u8868\u3001\u89c6\u56fe\u3001\u7d22\u5f15\u3001\u5217\u3001\u7528\u6237\u3001\u7ea6\u675f\u7684\u6ce8\u91ca\u76f4\u63a5\u66f4\u65b0\u5230\u4ed6\u4eec\u7684\u5bf9\u8c61\u81ea\u8eab\uff0c\n-        //\u5176\u4ed6\u7684\u65b0\u5efaComment\u5b9e\u4f8b\n-        //\u5982: COMMENT ON ROLE myrole IS 'role comment'\n-        if (column || objectType == DbObject.TABLE_OR_VIEW ||\n-                objectType == DbObject.USER ||\n-                objectType == DbObject.INDEX ||\n-                objectType == DbObject.CONSTRAINT) {\n-            db.updateMeta(session, object);\n+      } else {\n+        if (text == null) { //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n+          db.removeDatabaseObject(session, comment);\n         } else {\n-            Comment comment = db.findComment(object);\n-            if (comment == null) {\n-                if (text == null) {\n-                    // reset a non-existing comment - nothing to do\n-                } else {\n-                    int id = getObjectId();\n-                    comment = new Comment(db, id, object);\n-                    comment.setCommentText(text);\n-                    db.addDatabaseObject(session, comment);\n-                }\n-            } else {\n-                if (text == null) { //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n-                    db.removeDatabaseObject(session, comment);\n-                } else {\n-                    comment.setCommentText(text);\n-                    db.updateMeta(session, comment);\n-                }\n-            }\n+          comment.setCommentText(text);\n+          db.updateMeta(session, comment);\n         }\n-        return 0;\n+      }\n     }\n+    return 0;\n+  }\n \n-    public void setCommentExpression(Expression expr) {\n-        this.expr = expr;\n-    }\n+  public void setCommentExpression(Expression expr) {\n+    this.expr = expr;\n+  }\n \n-    public void setObjectName(String objectName) {\n-        this.objectName = objectName;\n-    }\n+  public void setObjectName(String objectName) {\n+    this.objectName = objectName;\n+  }\n \n-    public void setObjectType(int objectType) {\n-        this.objectType = objectType;\n-    }\n+  public void setObjectType(int objectType) {\n+    this.objectType = objectType;\n+  }\n \n-    public void setColumnName(String columnName) {\n-        this.columnName = columnName;\n-    }\n+  public void setColumnName(String columnName) {\n+    this.columnName = columnName;\n+  }\n \n-    public void setSchemaName(String schemaName) {\n-        this.schemaName = schemaName;\n-    }\n+  public void setSchemaName(String schemaName) {\n+    this.schemaName = schemaName;\n+  }\n \n-    public void setColumn(boolean column) {\n-        this.column = column;\n-    }\n+  public void setColumn(boolean column) {\n+    this.column = column;\n+  }\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.COMMENT;\n-    }\n+  @Override\n+  public int getType() {\n+    return CommandInterface.COMMENT;\n+  }\n \n }\n",
            "diff_size": 191
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "120",
                    "column": "37",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/312/SetComment.java\nindex f5643b82777..b71e01be1e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/312/SetComment.java\n@@ -19,6 +19,8 @@ import org.h2.table.Table;\n  * This class represents the statement\n  * COMMENT\n  */\n+\n+\n public class SetComment extends DefineCommand {\n \n     private String schemaName;\n@@ -100,16 +102,14 @@ public class SetComment extends DefineCommand {\n         //\u5bf9\u4e8e\u8868\u3001\u89c6\u56fe\u3001\u7d22\u5f15\u3001\u5217\u3001\u7528\u6237\u3001\u7ea6\u675f\u7684\u6ce8\u91ca\u76f4\u63a5\u66f4\u65b0\u5230\u4ed6\u4eec\u7684\u5bf9\u8c61\u81ea\u8eab\uff0c\n         //\u5176\u4ed6\u7684\u65b0\u5efaComment\u5b9e\u4f8b\n         //\u5982: COMMENT ON ROLE myrole IS 'role comment'\n-        if (column || objectType == DbObject.TABLE_OR_VIEW ||\n-                objectType == DbObject.USER ||\n-                objectType == DbObject.INDEX ||\n-                objectType == DbObject.CONSTRAINT) {\n+        if (column || objectType == DbObject.TABLE_OR_VIEW || objectType == DbObject.USER || objectType == DbObject.INDEX || objectType == DbObject.CONSTRAINT) {\n             db.updateMeta(session, object);\n         } else {\n             Comment comment = db.findComment(object);\n             if (comment == null) {\n                 if (text == null) {\n                     // reset a non-existing comment - nothing to do\n+\n                 } else {\n                     int id = getObjectId();\n                     comment = new Comment(db, id, object);\n@@ -128,26 +128,32 @@ public class SetComment extends DefineCommand {\n         return 0;\n     }\n \n+\n     public void setCommentExpression(Expression expr) {\n         this.expr = expr;\n     }\n \n+\n     public void setObjectName(String objectName) {\n         this.objectName = objectName;\n     }\n \n+\n     public void setObjectType(int objectType) {\n         this.objectType = objectType;\n     }\n \n+\n     public void setColumnName(String columnName) {\n         this.columnName = columnName;\n     }\n \n+\n     public void setSchemaName(String schemaName) {\n         this.schemaName = schemaName;\n     }\n \n+\n     public void setColumn(boolean column) {\n         this.column = column;\n     }\n@@ -157,4 +163,4 @@ public class SetComment extends DefineCommand {\n         return CommandInterface.COMMENT;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/312/SetComment.java\nindex f5643b82777..cb0840371db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/312/SetComment.java\n@@ -117,8 +117,9 @@ public class SetComment extends DefineCommand {\n                     db.addDatabaseObject(session, comment);\n                 }\n             } else {\n-                if (text == null) { //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n-                    db.removeDatabaseObject(session, comment);\n+                if (text == null) {\n+                    //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n+                     db.removeDatabaseObject(session, comment);\n                 } else {\n                     comment.setCommentText(text);\n                     db.updateMeta(session, comment);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/312/SetComment.java\nindex f5643b82777..499c24077c0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/312/SetComment.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/312/SetComment.java\n@@ -117,8 +117,9 @@ public class SetComment extends DefineCommand {\n                     db.addDatabaseObject(session, comment);\n                 }\n             } else {\n-                if (text == null) { //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n-                    db.removeDatabaseObject(session, comment);\n+                if (text == null) {\n+                    //\u4f8b\u5982: COMMENT ON ROLE myrole IS NULL\n+                db.removeDatabaseObject(session, comment);\n                 } else {\n                     comment.setCommentText(text);\n                     db.updateMeta(session, comment);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}