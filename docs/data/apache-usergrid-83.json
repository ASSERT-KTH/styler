{
    "project_name": "apache-usergrid",
    "error_id": "83",
    "information": {
        "errors": [
            {
                "line": "30",
                "severity": "warning",
                "message": "Use of @author javadoc keyword is prohibited.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\n\n/** @author zznate */\npublic class MetricLine {\n    private final MetricSort metricSort;\n    private final UUID appId;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "31",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "41",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/83/MetricLine.java\nindex 18f3c36afc8..15e83cfd567 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/83/MetricLine.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.tools.bean;\n \n \n@@ -27,11 +28,16 @@ import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n \n \n-/** @author zznate */\n+/**\n+ * @author zznate\n+ */\n public class MetricLine {\n     private final MetricSort metricSort;\n+\n     private final UUID appId;\n+\n     private final List<AggregateCounter> aggregateCounters;\n+\n     private long count = 0;\n \n \n@@ -39,14 +45,14 @@ public class MetricLine {\n      * Package level access - intented to be used by {@link MetricQuery} only. Sets the value of count by iterating over\n      * the {@link AggregateCounter} collection.\n      */\n-    MetricLine( UUID appId, MetricSort metricSort, List<AggregateCounter> counters ) {\n-        Preconditions.checkArgument( appId != null, \"appId was null\" );\n-        Preconditions.checkArgument( counters != null, \"Counters list cannot be null\" );\n+    MetricLine(UUID appId, MetricSort metricSort, List<AggregateCounter> counters) {\n+        Preconditions.checkArgument(appId != null, \"appId was null\");\n+        Preconditions.checkArgument(counters != null, \"Counters list cannot be null\");\n         this.metricSort = metricSort;\n         this.appId = appId;\n         this.aggregateCounters = counters;\n-        if ( aggregateCounters.size() > 0 ) {\n-            for ( AggregateCounter ac : aggregateCounters ) {\n+        if (aggregateCounters.size() > 0) {\n+            for (AggregateCounter ac : aggregateCounters) {\n                 count += ac.getValue();\n             }\n         }\n@@ -55,16 +61,18 @@ public class MetricLine {\n \n     @Override\n     public String toString() {\n-        return Objects.toStringHelper( this ).add( \"appId\", appId ).add( \"metricSort\", metricSort ).toString();\n+        return Objects.toStringHelper(this).add(\"appId\", appId).add(\"metricSort\", metricSort).toString();\n     }\n \n \n-    /** Compares metricSort and appId for equality */\n+    /**\n+     * Compares metricSort and appId for equality\n+     */\n     @Override\n-    public boolean equals( Object o ) {\n-        if ( o instanceof MetricLine ) {\n-            MetricLine oth = ( MetricLine ) o;\n-            return oth.getMetricSort().equals( metricSort ) && oth.getAppId().equals( appId );\n+    public boolean equals(Object o) {\n+        if (o instanceof MetricLine) {\n+            MetricLine oth = (MetricLine) o;\n+            return oth.getMetricSort().equals(metricSort) && oth.getAppId().equals(appId);\n         }\n         return false;\n     }\n@@ -72,7 +80,7 @@ public class MetricLine {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hashCode( metricSort, appId );\n+        return Objects.hashCode(metricSort, appId);\n     }\n \n \n@@ -91,8 +99,10 @@ public class MetricLine {\n     }\n \n \n-    /** @return an Immutable list of our counters */\n+    /**\n+     * @return an Immutable list of our counters\n+     */\n     public List<AggregateCounter> getAggregateCounters() {\n-        return ImmutableList.copyOf( aggregateCounters );\n+        return ImmutableList.copyOf(aggregateCounters);\n     }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/83/MetricLine.java\nindex 18f3c36afc8..412d5255a97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/83/MetricLine.java\n@@ -95,4 +95,4 @@ public class MetricLine {\n     public List<AggregateCounter> getAggregateCounters() {\n         return ImmutableList.copyOf( aggregateCounters );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/83/MetricLine.java\nindex 18f3c36afc8..8bfe9efb864 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/83/MetricLine.java\n@@ -19,16 +19,17 @@ package org.apache.usergrid.tools.bean;\n \n import java.util.List;\n import java.util.UUID;\n-\n import org.apache.usergrid.persistence.AggregateCounter;\n-\n import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n \n \n /** @author zznate */\n+\n+\n public class MetricLine {\n+\n     private final MetricSort metricSort;\n     private final UUID appId;\n     private final List<AggregateCounter> aggregateCounters;\n@@ -39,6 +40,8 @@ public class MetricLine {\n      * Package level access - intented to be used by {@link MetricQuery} only. Sets the value of count by iterating over\n      * the {@link AggregateCounter} collection.\n      */\n+\n+\n     MetricLine( UUID appId, MetricSort metricSort, List<AggregateCounter> counters ) {\n         Preconditions.checkArgument( appId != null, \"appId was null\" );\n         Preconditions.checkArgument( counters != null, \"Counters list cannot be null\" );\n@@ -60,6 +63,8 @@ public class MetricLine {\n \n \n     /** Compares metricSort and appId for equality */\n+\n+\n     @Override\n     public boolean equals( Object o ) {\n         if ( o instanceof MetricLine ) {\n@@ -92,7 +97,9 @@ public class MetricLine {\n \n \n     /** @return an Immutable list of our counters */\n+\n+\n     public List<AggregateCounter> getAggregateCounters() {\n         return ImmutableList.copyOf( aggregateCounters );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/83/MetricLine.java\nindex 18f3c36afc8..b838b461e1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/83/MetricLine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/83/MetricLine.java\n@@ -26,9 +26,7 @@ import com.google.common.base.Objects;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n \n-\n-/** @author zznate */\n-public class MetricLine {\n+    /** @author zznate */ public class MetricLine {\n     private final MetricSort metricSort;\n     private final UUID appId;\n     private final List<AggregateCounter> aggregateCounters;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}