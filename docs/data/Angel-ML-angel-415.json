{
    "project_name": "Angel-ML-angel",
    "error_id": "415",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/415/GBDTTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/415/GBDTTest.java\nindex 76c7320d515..7201a7c7999 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/415/GBDTTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/415/GBDTTest.java\n@@ -49,7 +49,8 @@ public class GBDTTest {\n   /**\n    * set parameter values of conf\n    */\n-  @Before public void setConf() {\n+  @Before\n+  public void setConf() {\n     try {\n       // Data format\n       String dataType = \"libsvm\";\n@@ -104,7 +105,8 @@ public class GBDTTest {\n     }\n   }\n \n-  @Test public void testGBDT() throws Exception {\n+  @Test\n+  public void testGBDT() throws Exception {\n     setConf();\n     trainTest();\n     predictTest();\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/415/GBDTTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/415/GBDTTest.java\nindex 76c7320d515..c1547d557bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/415/GBDTTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/415/GBDTTest.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.gbdt;\n \n import com.tencent.angel.conf.AngelConf;\n@@ -49,7 +48,8 @@ public class GBDTTest {\n   /**\n    * set parameter values of conf\n    */\n-  @Before public void setConf() {\n+  @Before\n+public void setConf() {\n     try {\n       // Data format\n       String dataType = \"libsvm\";\n@@ -97,14 +97,14 @@ public class GBDTTest {\n       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(validateRatio));\n       conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n-\n-    } catch (Exception x) {\n+  } catch (Exception x) {\n       LOG.error(\"setup failed \", x);\n       throw x;\n     }\n   }\n \n-  @Test public void testGBDT() throws Exception {\n+  @Test\n+public void testGBDT() throws Exception {\n     setConf();\n     trainTest();\n     predictTest();\n@@ -157,4 +157,4 @@ public class GBDTTest {\n       throw x;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/415/GBDTTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/415/GBDTTest.java\nindex 76c7320d515..e3a8ebde4d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/415/GBDTTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/415/GBDTTest.java\n@@ -33,12 +33,13 @@ import org.junit.Test;\n /**\n  * GBDT UT.\n  */\n+\n public class GBDTTest {\n+\n   private static final Log LOG = LogFactory.getLog(GBDTTest.class);\n   private Configuration conf = new Configuration();\n   private static final String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n   private static final String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-\n   private static final String TrainInputPath = \"../../data/agaricus/agaricus_127d_train.libsvm\";\n   private static final String PredictInputPath = \"../../data/agaricus/agaricus_127d_test.libsvm\";\n \n@@ -49,7 +50,9 @@ public class GBDTTest {\n   /**\n    * set parameter values of conf\n    */\n-  @Before public void setConf() {\n+\n+  @Before\n+  public void setConf() {\n     try {\n       // Data format\n       String dataType = \"libsvm\";\n@@ -97,14 +100,14 @@ public class GBDTTest {\n       conf.set(MLConf.ML_VALIDATE_RATIO(), String.valueOf(validateRatio));\n       conf.set(MLConf.ML_GBDT_SAMPLE_RATIO(), String.valueOf(sampleRatio));\n       conf.set(MLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n-\n     } catch (Exception x) {\n       LOG.error(\"setup failed \", x);\n       throw x;\n     }\n   }\n \n-  @Test public void testGBDT() throws Exception {\n+  @Test\n+  public void testGBDT() throws Exception {\n     setConf();\n     trainTest();\n     predictTest();\n@@ -123,7 +126,6 @@ public class GBDTTest {\n       conf.set(AngelConf.ANGEL_LOG_PATH, logPath);\n       // Set actionType train\n       conf.set(AngelConf.ANGEL_ACTION_TYPE, \"train\");\n-\n       GBDTRunner runner = new GBDTRunner();\n       runner.train(conf);\n     } catch (Exception x) {\n@@ -148,13 +150,12 @@ public class GBDTTest {\n       conf.set(AngelConf.ANGEL_LOG_PATH, logPath);\n       // Set actionType prediction\n       conf.set(AngelConf.ANGEL_ACTION_TYPE, \"predict\");\n-\n       GBDTRunner runner = new GBDTRunner();\n-\n       runner.predict(conf);\n     } catch (Exception x) {\n       LOG.error(\"run predictTest failed \", x);\n       throw x;\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}