{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2565",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2565/SwitchToMaster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2565/SwitchToMaster.java\nindex 0b83220d640..59f95068116 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2565/SwitchToMaster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2565/SwitchToMaster.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.cluster;\n \n import java.net.InetAddress;\n@@ -47,128 +48,129 @@ import static org.neo4j.kernel.ha.cluster.modeswitch.HighAvailabilityModeSwitche\n \n public class SwitchToMaster implements AutoCloseable\n {\n-    Factory<ConversationManager> conversationManagerFactory;\n-    BiFunction<ConversationManager, LifeSupport, Master> masterFactory;\n-    BiFunction<Master, ConversationManager, MasterServer> masterServerFactory;\n-    private Log userLog;\n-    private HaIdGeneratorFactory idGeneratorFactory;\n-    private Config config;\n-    private Supplier<SlaveFactory> slaveFactorySupplier;\n-    private DelegateInvocationHandler<Master> masterDelegateHandler;\n-    private ClusterMemberAvailability clusterMemberAvailability;\n-    private Supplier<NeoStoreDataSource> dataSourceSupplier;\n-\n-    public SwitchToMaster( LogService logService,\n-            HaIdGeneratorFactory idGeneratorFactory, Config config, Supplier<SlaveFactory> slaveFactorySupplier,\n-            Factory<ConversationManager> conversationManagerFactory,\n-            BiFunction<ConversationManager, LifeSupport, Master> masterFactory,\n-            BiFunction<Master, ConversationManager, MasterServer> masterServerFactory,\n-            DelegateInvocationHandler<Master> masterDelegateHandler, ClusterMemberAvailability clusterMemberAvailability,\n-            Supplier<NeoStoreDataSource> dataSourceSupplier )\n-    {\n-        this.conversationManagerFactory = conversationManagerFactory;\n-        this.masterFactory = masterFactory;\n-        this.masterServerFactory = masterServerFactory;\n-        this.userLog = logService.getUserLog( getClass() );\n-        this.idGeneratorFactory = idGeneratorFactory;\n-        this.config = config;\n-        this.slaveFactorySupplier = slaveFactorySupplier;\n-        this.masterDelegateHandler = masterDelegateHandler;\n-        this.clusterMemberAvailability = clusterMemberAvailability;\n-        this.dataSourceSupplier = dataSourceSupplier;\n-    }\n-\n-    /**\n-     * Performs a switch to the master state. Starts communication endpoints, switches components to the master state\n-     * and broadcasts the appropriate Master Is Available event.\n-     * @param haCommunicationLife The LifeSupport instance to register communication endpoints.\n-     * @param me The URI that the communication endpoints should bind to\n-     * @return The URI at which the master communication was bound.\n-     */\n-    public URI switchToMaster( LifeSupport haCommunicationLife, URI me )\n-    {\n-        userLog.info( \"I am %s, moving to master\", myId( config ) );\n-\n-        // Do not wait for currently active transactions to complete before continuing switching.\n-        // - A master in a cluster is very important, without it the cluster cannot process any write requests\n-        // - Awaiting open transactions to complete assumes that this instance just now was a slave that is\n-        //   switching to master, which means the previous master where these active transactions were hosted\n-        //   is no longer available so these open transactions cannot continue and complete anyway,\n-        //   so what's the point waiting for them?\n-        // - Read transactions may still be able to complete, but the correct response to failures in those\n-        //   is to have them throw transient error exceptions hinting that they should be retried,\n-        //   at which point they may get redirected to another instance, or to this instance if it has completed\n-        //   the switch until then.\n-\n-        idGeneratorFactory.switchToMaster();\n-        NeoStoreDataSource neoStoreXaDataSource = dataSourceSupplier.get();\n-        neoStoreXaDataSource.afterModeSwitch();\n-\n-        ConversationManager conversationManager = conversationManagerFactory.newInstance();\n-        Master master = masterFactory.apply( conversationManager, haCommunicationLife );\n-\n-        MasterServer masterServer = masterServerFactory.apply( master, conversationManager );\n-\n-        haCommunicationLife.add( masterServer );\n-        masterDelegateHandler.setDelegate( master );\n-\n-        haCommunicationLife.start();\n-\n-        URI masterHaURI = getMasterUri( me, masterServer, config );\n-        clusterMemberAvailability.memberIsAvailable( MASTER, masterHaURI, neoStoreXaDataSource.getStoreId() );\n-        userLog.info( \"I am %s, successfully moved to master\", myId( config ) );\n-\n-        slaveFactorySupplier.get().setStoreId( neoStoreXaDataSource.getStoreId() );\n-\n-        return masterHaURI;\n-    }\n-\n-    static URI getMasterUri( URI me, MasterServer masterServer, Config config )\n+  Factory<ConversationManager> conversationManagerFactory;\n+  BiFunction<ConversationManager, LifeSupport, Master> masterFactory;\n+  BiFunction<Master, ConversationManager, MasterServer> masterServerFactory;\n+  private Log userLog;\n+  private HaIdGeneratorFactory idGeneratorFactory;\n+  private Config config;\n+  private Supplier<SlaveFactory> slaveFactorySupplier;\n+  private DelegateInvocationHandler<Master> masterDelegateHandler;\n+  private ClusterMemberAvailability clusterMemberAvailability;\n+  private Supplier<NeoStoreDataSource> dataSourceSupplier;\n+\n+  public SwitchToMaster(LogService logService,\n+                        HaIdGeneratorFactory idGeneratorFactory, Config config, Supplier<SlaveFactory> slaveFactorySupplier,\n+                        Factory<ConversationManager> conversationManagerFactory,\n+                        BiFunction<ConversationManager, LifeSupport, Master> masterFactory,\n+                        BiFunction<Master, ConversationManager, MasterServer> masterServerFactory,\n+                        DelegateInvocationHandler<Master> masterDelegateHandler, ClusterMemberAvailability clusterMemberAvailability,\n+                        Supplier<NeoStoreDataSource> dataSourceSupplier)\n+  {\n+    this.conversationManagerFactory = conversationManagerFactory;\n+    this.masterFactory = masterFactory;\n+    this.masterServerFactory = masterServerFactory;\n+    this.userLog = logService.getUserLog(getClass());\n+    this.idGeneratorFactory = idGeneratorFactory;\n+    this.config = config;\n+    this.slaveFactorySupplier = slaveFactorySupplier;\n+    this.masterDelegateHandler = masterDelegateHandler;\n+    this.clusterMemberAvailability = clusterMemberAvailability;\n+    this.dataSourceSupplier = dataSourceSupplier;\n+  }\n+\n+  /**\n+   * Performs a switch to the master state. Starts communication endpoints, switches components to the master state\n+   * and broadcasts the appropriate Master Is Available event.\n+   *\n+   * @param haCommunicationLife The LifeSupport instance to register communication endpoints.\n+   * @param me                  The URI that the communication endpoints should bind to\n+   * @return The URI at which the master communication was bound.\n+   */\n+  public URI switchToMaster(LifeSupport haCommunicationLife, URI me)\n+  {\n+    userLog.info(\"I am %s, moving to master\", myId(config));\n+\n+    // Do not wait for currently active transactions to complete before continuing switching.\n+    // - A master in a cluster is very important, without it the cluster cannot process any write requests\n+    // - Awaiting open transactions to complete assumes that this instance just now was a slave that is\n+    //   switching to master, which means the previous master where these active transactions were hosted\n+    //   is no longer available so these open transactions cannot continue and complete anyway,\n+    //   so what's the point waiting for them?\n+    // - Read transactions may still be able to complete, but the correct response to failures in those\n+    //   is to have them throw transient error exceptions hinting that they should be retried,\n+    //   at which point they may get redirected to another instance, or to this instance if it has completed\n+    //   the switch until then.\n+\n+    idGeneratorFactory.switchToMaster();\n+    NeoStoreDataSource neoStoreXaDataSource = dataSourceSupplier.get();\n+    neoStoreXaDataSource.afterModeSwitch();\n+\n+    ConversationManager conversationManager = conversationManagerFactory.newInstance();\n+    Master master = masterFactory.apply(conversationManager, haCommunicationLife);\n+\n+    MasterServer masterServer = masterServerFactory.apply(master, conversationManager);\n+\n+    haCommunicationLife.add(masterServer);\n+    masterDelegateHandler.setDelegate(master);\n+\n+    haCommunicationLife.start();\n+\n+    URI masterHaURI = getMasterUri(me, masterServer, config);\n+    clusterMemberAvailability.memberIsAvailable(MASTER, masterHaURI, neoStoreXaDataSource.getStoreId());\n+    userLog.info(\"I am %s, successfully moved to master\", myId(config));\n+\n+    slaveFactorySupplier.get().setStoreId(neoStoreXaDataSource.getStoreId());\n+\n+    return masterHaURI;\n+  }\n+\n+  static URI getMasterUri(URI me, MasterServer masterServer, Config config)\n+  {\n+    String hostname = config.get(HaSettings.ha_server).getHost();\n+    InetSocketAddress masterSocketAddress = masterServer.getSocketAddress();\n+\n+    if (hostname == null || isWildcard(hostname))\n     {\n-        String hostname = config.get( HaSettings.ha_server ).getHost();\n-        InetSocketAddress masterSocketAddress = masterServer.getSocketAddress();\n-\n-        if ( hostname == null || isWildcard( hostname ) )\n-        {\n-            InetAddress masterAddress = masterSocketAddress.getAddress();\n-            hostname = masterAddress.isAnyLocalAddress() ? me.getHost() : ServerUtil.getHostString( masterSocketAddress );\n-            hostname = ensureWrapForIPv6Uri( hostname );\n-        }\n-\n-        return URI.create( \"ha://\" + hostname + \":\" + masterSocketAddress.getPort() + \"?serverId=\" + myId( config ) );\n+      InetAddress masterAddress = masterSocketAddress.getAddress();\n+      hostname = masterAddress.isAnyLocalAddress() ? me.getHost() : ServerUtil.getHostString(masterSocketAddress);\n+      hostname = ensureWrapForIPv6Uri(hostname);\n     }\n \n-    private static String ensureWrapForIPv6Uri( String hostname )\n-    {\n-        if ( hostname.contains( \":\" ) && !hostname.contains( \"[\" ) )\n-        {\n-            hostname = \"[\" + hostname + \"]\";\n-        }\n-        return hostname;\n-    }\n-\n-    private static boolean isWildcard( String hostname )\n-    {\n-        return hostname.contains( \"0.0.0.0\" ) || hostname.contains( \"[::]\" ) || hostname.contains( \"[0:0:0:0:0:0:0:0]\" );\n-    }\n-\n-    private static InstanceId myId( Config config )\n-    {\n-        return config.get( ClusterSettings.server_id );\n-    }\n+    return URI.create(\"ha://\" + hostname + \":\" + masterSocketAddress.getPort() + \"?serverId=\" + myId(config));\n+  }\n \n-    @Override\n-    public void close()\n+  private static String ensureWrapForIPv6Uri(String hostname)\n+  {\n+    if (hostname.contains(\":\") && !hostname.contains(\"[\"))\n     {\n-        userLog = null;\n-        conversationManagerFactory = null;\n-        masterFactory = null;\n-        masterServerFactory = null;\n-        idGeneratorFactory = null;\n-        config = null;\n-        slaveFactorySupplier = null;\n-        masterDelegateHandler = null;\n-        clusterMemberAvailability = null;\n-        dataSourceSupplier = null;\n+      hostname = \"[\" + hostname + \"]\";\n     }\n+    return hostname;\n+  }\n+\n+  private static boolean isWildcard(String hostname)\n+  {\n+    return hostname.contains(\"0.0.0.0\") || hostname.contains(\"[::]\") || hostname.contains(\"[0:0:0:0:0:0:0:0]\");\n+  }\n+\n+  private static InstanceId myId(Config config)\n+  {\n+    return config.get(ClusterSettings.server_id);\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    userLog = null;\n+    conversationManagerFactory = null;\n+    masterFactory = null;\n+    masterServerFactory = null;\n+    idGeneratorFactory = null;\n+    config = null;\n+    slaveFactorySupplier = null;\n+    masterDelegateHandler = null;\n+    clusterMemberAvailability = null;\n+    dataSourceSupplier = null;\n+  }\n }\n",
            "diff_size": 153
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 472).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2565/SwitchToMaster.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2565/SwitchToMaster.java\nindex 0b83220d640..4ca3591e314 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2565/SwitchToMaster.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2565/SwitchToMaster.java\n@@ -59,12 +59,7 @@ public class SwitchToMaster implements AutoCloseable\n     private Supplier<NeoStoreDataSource> dataSourceSupplier;\n \n     public SwitchToMaster( LogService logService,\n-            HaIdGeneratorFactory idGeneratorFactory, Config config, Supplier<SlaveFactory> slaveFactorySupplier,\n-            Factory<ConversationManager> conversationManagerFactory,\n-            BiFunction<ConversationManager, LifeSupport, Master> masterFactory,\n-            BiFunction<Master, ConversationManager, MasterServer> masterServerFactory,\n-            DelegateInvocationHandler<Master> masterDelegateHandler, ClusterMemberAvailability clusterMemberAvailability,\n-            Supplier<NeoStoreDataSource> dataSourceSupplier )\n+            HaIdGeneratorFactory idGeneratorFactory, Config config, Supplier<SlaveFactory> slaveFactorySupplier, Factory<ConversationManager> conversationManagerFactory, BiFunction<ConversationManager, LifeSupport, Master> masterFactory, BiFunction<Master, ConversationManager, MasterServer> masterServerFactory, DelegateInvocationHandler<Master> masterDelegateHandler, ClusterMemberAvailability clusterMemberAvailability, Supplier<NeoStoreDataSource> dataSourceSupplier )\n     {\n         this.conversationManagerFactory = conversationManagerFactory;\n         this.masterFactory = masterFactory;\n@@ -103,32 +98,24 @@ public class SwitchToMaster implements AutoCloseable\n         idGeneratorFactory.switchToMaster();\n         NeoStoreDataSource neoStoreXaDataSource = dataSourceSupplier.get();\n         neoStoreXaDataSource.afterModeSwitch();\n-\n-        ConversationManager conversationManager = conversationManagerFactory.newInstance();\n+ConversationManager conversationManager = conversationManagerFactory.newInstance();\n         Master master = masterFactory.apply( conversationManager, haCommunicationLife );\n-\n-        MasterServer masterServer = masterServerFactory.apply( master, conversationManager );\n-\n-        haCommunicationLife.add( masterServer );\n+MasterServer masterServer = masterServerFactory.apply( master, conversationManager );\n+haCommunicationLife.add( masterServer );\n         masterDelegateHandler.setDelegate( master );\n-\n-        haCommunicationLife.start();\n-\n-        URI masterHaURI = getMasterUri( me, masterServer, config );\n+haCommunicationLife.start();\n+URI masterHaURI = getMasterUri( me, masterServer, config );\n         clusterMemberAvailability.memberIsAvailable( MASTER, masterHaURI, neoStoreXaDataSource.getStoreId() );\n         userLog.info( \"I am %s, successfully moved to master\", myId( config ) );\n-\n-        slaveFactorySupplier.get().setStoreId( neoStoreXaDataSource.getStoreId() );\n-\n-        return masterHaURI;\n+slaveFactorySupplier.get().setStoreId( neoStoreXaDataSource.getStoreId() );\n+return masterHaURI;\n     }\n \n     static URI getMasterUri( URI me, MasterServer masterServer, Config config )\n     {\n         String hostname = config.get( HaSettings.ha_server ).getHost();\n         InetSocketAddress masterSocketAddress = masterServer.getSocketAddress();\n-\n-        if ( hostname == null || isWildcard( hostname ) )\n+if ( hostname == null || isWildcard( hostname ) )\n         {\n             InetAddress masterAddress = masterSocketAddress.getAddress();\n             hostname = masterAddress.isAnyLocalAddress() ? me.getHost() : ServerUtil.getHostString( masterSocketAddress );\n@@ -144,7 +131,8 @@ public class SwitchToMaster implements AutoCloseable\n         {\n             hostname = \"[\" + hostname + \"]\";\n         }\n-        return hostname;\n+\n+return hostname;\n     }\n \n     private static boolean isWildcard( String hostname )\n@@ -171,4 +159,4 @@ public class SwitchToMaster implements AutoCloseable\n         clusterMemberAvailability = null;\n         dataSourceSupplier = null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}