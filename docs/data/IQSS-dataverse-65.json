{
    "project_name": "IQSS-dataverse",
    "error_id": "65",
    "information": {
        "errors": [
            {
                "line": "282",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        }\n        if(dv.getStorageDriverId() != null) {\n        \tbld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n        }\n\n        return bld;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/65/JsonPrinter.java\nindex 4302d932f3c..3ba32acc9b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/65/JsonPrinter.java\n@@ -279,7 +279,7 @@ public class JsonPrinter {\n             bld.add(\"theme\", JsonPrinter.json(dv.getDataverseTheme()));\n         }\n         if(dv.getStorageDriverId() != null) {\n-        \tbld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n+        bld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n         }\n \n         return bld;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/65/JsonPrinter.java\nindex 4302d932f3c..e39f4f2a7a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/65/JsonPrinter.java\n@@ -71,807 +71,832 @@ import javax.json.JsonObject;\n @Singleton\n public class JsonPrinter {\n \n-    private static final Logger logger = Logger.getLogger(JsonPrinter.class.getCanonicalName());\n-\n-    @EJB\n-    static SettingsServiceBean settingsService;\n-\n-    public static void injectSettingsService(SettingsServiceBean ssb) {\n-            settingsService = ssb;\n-    }\n-\n-    public JsonPrinter() {\n-   \n-    }\n-\n-    public static final BriefJsonPrinter brief = new BriefJsonPrinter();\n-\n-    public static JsonArrayBuilder asJsonArray(Collection<String> strings) {\n-        JsonArrayBuilder arr = Json.createArrayBuilder();\n-        for (String s : strings) {\n-            arr.add(s);\n-        }\n-        return arr;\n-    }\n-\n-    public static JsonObjectBuilder json(User u) {\n-        RoleAssigneeDisplayInfo displayInfo = u.getDisplayInfo();\n-        return jsonObjectBuilder()\n-                .add(\"identifier\", u.getIdentifier())\n-                .add(\"displayInfo\", jsonObjectBuilder()\n-                        .add(\"Title\", displayInfo.getTitle())\n-                        .add(\"email\", displayInfo.getEmailAddress()));\n-    }\n-\n-    public static JsonObjectBuilder json(AuthenticatedUser authenticatedUser) {\n-        NullSafeJsonBuilder builder = jsonObjectBuilder()\n-            .add(\"id\", authenticatedUser.getId())\n-            .add(\"identifier\", authenticatedUser.getIdentifier())\n-            .add(\"displayName\", authenticatedUser.getDisplayInfo().getTitle())\n-            .add(\"firstName\", authenticatedUser.getFirstName())\n-            .add(\"lastName\", authenticatedUser.getLastName())\n-            .add(\"email\", authenticatedUser.getEmail())\n-            .add(\"superuser\", authenticatedUser.isSuperuser())\n-            .add(\"deactivated\", authenticatedUser.isDeactivated())\n-            .add(\"deactivatedTime\", authenticatedUser.getDeactivatedTime())\n-            .add(\"affiliation\", authenticatedUser.getAffiliation())\n-            .add(\"position\", authenticatedUser.getPosition())\n-            .add(\"persistentUserId\", authenticatedUser.getAuthenticatedUserLookup().getPersistentUserId())\n-            .add(\"emailLastConfirmed\", authenticatedUser.getEmailConfirmed())\n-            .add(\"createdTime\", authenticatedUser.getCreatedTime())\n-            .add(\"lastLoginTime\", authenticatedUser.getLastLoginTime())\n-            .add(\"lastApiUseTime\", authenticatedUser.getLastApiUseTime())\n-            .add(\"authenticationProviderId\", authenticatedUser.getAuthenticatedUserLookup().getAuthenticationProviderId());\n-        return builder;\n-    }\n-    \n-    public static JsonObjectBuilder json(RoleAssignment ra) {\n-        return jsonObjectBuilder()\n-                .add(\"id\", ra.getId())\n-                .add(\"assignee\", ra.getAssigneeIdentifier())\n-                .add(\"roleId\", ra.getRole().getId())\n-                .add(\"_roleAlias\", ra.getRole().getAlias())\n-                .add(\"privateUrlToken\", ra.getPrivateUrlToken())\n-                .add(\"definitionPointId\", ra.getDefinitionPoint().getId());\n-    }\n-\n-    public static JsonArrayBuilder json(Set<Permission> permissions) {\n-        JsonArrayBuilder bld = Json.createArrayBuilder();\n-        permissions.forEach(p -> bld.add(p.name()));\n-        return bld;\n-    }\n-\n-    public static JsonObjectBuilder json(DatasetLock lock) {\n-        return jsonObjectBuilder()\n-                .add(\"lockType\", lock.getReason().toString())\n-                .add(\"date\", lock.getStartTime().toString())\n-                .add(\"user\", lock.getUser().getUserIdentifier())\n-                .add(\"message\", lock.getInfo());\n-\n-    }\n-    \n-    public static JsonObjectBuilder json( RoleAssigneeDisplayInfo d ) {\n-        return jsonObjectBuilder()\n-                .add(\"title\", d.getTitle())\n-                .add(\"email\", d.getEmailAddress())\n-                .add(\"affiliation\", d.getAffiliation());\n-    }\n-\n-    public static JsonObjectBuilder json(IpGroup grp) {\n-         // collect single addresses\n-        List<String> singles = grp.getRanges().stream().filter( IpAddressRange::isSingleAddress )\n-                                .map( IpAddressRange::getBottom )\n-                                .map( IpAddress::toString ).collect(toList());\n-        // collect \"real\" ranges\n-        List<List<String>> ranges = grp.getRanges().stream().filter( rng -> !rng.isSingleAddress() )\n-                                .map( rng -> Arrays.asList(rng.getBottom().toString(), rng.getTop().toString()) )\n-                                .collect(toList());\n-\n-        JsonObjectBuilder bld = jsonObjectBuilder()\n-                .add(\"alias\", grp.getPersistedGroupAlias() )\n-                .add(\"identifier\", grp.getIdentifier())\n-                .add(\"id\", grp.getId() )\n-                .add(\"name\", grp.getDisplayName() )\n-                .add(\"description\", grp.getDescription() );\n-       \n-        if ( ! singles.isEmpty() ) {\n-            bld.add(\"addresses\", asJsonArray(singles) );\n-        }\n-        \n-        if ( ! ranges.isEmpty() ) {\n-            JsonArrayBuilder rangesBld = Json.createArrayBuilder();\n-            ranges.forEach( r -> rangesBld.add( Json.createArrayBuilder().add(r.get(0)).add(r.get(1))) );\n-            bld.add(\"ranges\", rangesBld );\n-        }\n-        \n-        return bld;\n-    }\n-\n-    public static JsonObjectBuilder json(ShibGroup grp) {\n-        return jsonObjectBuilder()\n-                .add(\"name\", grp.getName())\n-                .add(\"attribute\", grp.getAttribute())\n-                .add(\"pattern\", grp.getPattern())\n-                .add(\"id\", grp.getId());\n-    }\n-    \n-    public static JsonObjectBuilder json(MailDomainGroup grp) {\n-        JsonObjectBuilder bld = jsonObjectBuilder()\n-            .add(\"alias\", grp.getPersistedGroupAlias() )\n-            .add(\"id\", grp.getId() )\n-            .add(\"name\", grp.getDisplayName() )\n-            .add(\"description\", grp.getDescription() )\n-            .add(\"domains\", asJsonArray(grp.getEmailDomainsAsList()) )\n-            .add(\"regex\", grp.isRegEx());\n-        return bld;\n-    }\n-\n-    public static JsonArrayBuilder rolesToJson(List<DataverseRole> role) {\n-        JsonArrayBuilder bld = Json.createArrayBuilder();\n-        for (DataverseRole r : role) {\n-            bld.add(JsonPrinter.json(r));\n-        }\n-        return bld;\n-    }\n-\n-    public static JsonObjectBuilder json(DataverseRole role) {\n-        JsonObjectBuilder bld = jsonObjectBuilder()\n-                .add(\"alias\", role.getAlias())\n-                .add(\"name\", role.getName())\n-                .add(\"permissions\", JsonPrinter.json(role.permissions()))\n-                .add(\"description\", role.getDescription());\n-        if (role.getId() != null) {\n-            bld.add(\"id\", role.getId());\n-        }\n-        if (role.getOwner() != null && role.getOwner().getId() != null) {\n-            bld.add(\"ownerId\", role.getOwner().getId());\n-        }\n-\n-        return bld;\n-    }\n-    \n-    public static JsonObjectBuilder json(Workflow wf){\n-        JsonObjectBuilder bld = jsonObjectBuilder();\n-        bld.add(\"name\", wf.getName());\n-        if ( wf.getId() != null ) {\n-            bld.add(\"id\", wf.getId());\n-        }\n-        \n-        if ( wf.getSteps()!=null && !wf.getSteps().isEmpty()) {\n-            JsonArrayBuilder arr = Json.createArrayBuilder();\n-            for ( WorkflowStepData stp : wf.getSteps() ) {\n-                arr.add( jsonObjectBuilder().add(\"stepType\", stp.getStepType())\n-                                   .add(\"provider\", stp.getProviderId())\n-                                   .add(\"parameters\", mapToObject(stp.getStepParameters()))\n-                                   .add(\"requiredSettings\", mapToObject(stp.getStepSettings())) );\n-            }\n-            bld.add(\"steps\", arr );\n-        }\n-        \n-        return bld;\n-    }\n-    \n-    public static JsonObjectBuilder json(Dataverse dv) {\n-        return json(dv, false);\n-    }\n-\n-    //TODO: Once we upgrade to Java EE 8 we can remove objects from the builder, and this email removal can be done in a better place.\n-    public static JsonObjectBuilder json(Dataverse dv, Boolean hideEmail) {\n-        JsonObjectBuilder bld = jsonObjectBuilder()\n-                .add(\"id\", dv.getId())\n-                .add(\"alias\", dv.getAlias())\n-                .add(\"name\", dv.getName())\n-                .add(\"affiliation\", dv.getAffiliation());\n-        if(!hideEmail) { \n-            bld.add(\"dataverseContacts\", JsonPrinter.json(dv.getDataverseContacts()));\n-        }\n-        \n-        bld.add(\"permissionRoot\", dv.isPermissionRoot())\n-                .add(\"description\", dv.getDescription())\n-                .add(\"dataverseType\", dv.getDataverseType().name());\n-        if (dv.getOwner() != null) {\n-            bld.add(\"ownerId\", dv.getOwner().getId());\n-        }\n-        if (dv.getCreateDate() != null) {\n-            bld.add(\"creationDate\", Util.getDateTimeFormat().format(dv.getCreateDate()));\n-        }\n-        if (dv.getDataverseTheme() != null) {\n-            bld.add(\"theme\", JsonPrinter.json(dv.getDataverseTheme()));\n-        }\n-        if(dv.getStorageDriverId() != null) {\n-        \tbld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n-        }\n-\n-        return bld;\n-    }\n-\n-    public static JsonArrayBuilder json(List<DataverseContact> dataverseContacts) {\n-        JsonArrayBuilder jsonArrayOfContacts = Json.createArrayBuilder();\n-        for (DataverseContact dataverseContact : dataverseContacts) {\n-            NullSafeJsonBuilder contactJsonObject = NullSafeJsonBuilder.jsonObjectBuilder();\n-            contactJsonObject.add(\"displayOrder\", dataverseContact.getDisplayOrder());\n-            contactJsonObject.add(\"contactEmail\", dataverseContact.getContactEmail());\n-            jsonArrayOfContacts.add(contactJsonObject);\n-        }\n-        return jsonArrayOfContacts;\n-    }\n-\n-    public static JsonObjectBuilder json( DataverseTheme theme ) {\n-        final NullSafeJsonBuilder baseObject = jsonObjectBuilder()\n-                .add(\"id\", theme.getId() )\n-                .add(\"logo\", theme.getLogo())\n-                .add(\"tagline\", theme.getTagline())\n-                .add(\"linkUrl\", theme.getLinkUrl())\n-                .add(\"linkColor\", theme.getLinkColor())\n-                .add(\"textColor\", theme.getTextColor())\n-                .add(\"backgroundColor\", theme.getBackgroundColor());\n-        if ( theme.getLogoAlignment() != null ) {\n-            baseObject.add(\"logoBackgroundColor\", theme.getLogoBackgroundColor());\n-        }\n-        return baseObject;\n-    }\n-\n-    public static JsonObjectBuilder json(BuiltinUser user) {\n-        return (user == null)\n-                ? null\n-                : jsonObjectBuilder()\n-                .add(\"id\", user.getId())\n-                .add(\"userName\", user.getUserName());\n-    }\n-\n-    public static JsonObjectBuilder json(Dataset ds) {\n-        return jsonObjectBuilder()\n-                .add(\"id\", ds.getId())\n-                .add(\"identifier\", ds.getIdentifier())\n-                .add(\"persistentUrl\", ds.getPersistentURL())\n-                .add(\"protocol\", ds.getProtocol())\n-                .add(\"authority\", ds.getAuthority())\n-                .add(\"publisher\", BrandingUtil.getInstallationBrandName())\n-                .add(\"publicationDate\", ds.getPublicationDateFormattedYYYYMMDD())\n-                .add(\"storageIdentifier\", ds.getStorageIdentifier());\n-    }\n-\n-    public static JsonObjectBuilder json(DatasetVersion dsv) {\n-        JsonObjectBuilder bld = jsonObjectBuilder()\n-                .add(\"id\", dsv.getId())\n-                .add(\"datasetId\", dsv.getDataset().getId())\n-                .add(\"datasetPersistentId\", dsv.getDataset().getGlobalId().asString())\n-                .add(\"storageIdentifier\", dsv.getDataset().getStorageIdentifier())\n-                .add(\"versionNumber\", dsv.getVersionNumber())\n-                .add(\"versionMinorNumber\", dsv.getMinorVersionNumber())\n-                .add(\"versionState\", dsv.getVersionState().name())\n-                .add(\"versionNote\", dsv.getVersionNote())\n-                .add(\"archiveNote\", dsv.getArchiveNote())\n-                .add(\"deaccessionLink\", dsv.getDeaccessionLink())\n-                .add(\"distributionDate\", dsv.getDistributionDate())\n-                .add(\"productionDate\", dsv.getProductionDate())\n-                .add(\"UNF\", dsv.getUNF())\n-                .add(\"archiveTime\", format(dsv.getArchiveTime()))\n-                .add(\"lastUpdateTime\", format(dsv.getLastUpdateTime()))\n-                .add(\"releaseTime\", format(dsv.getReleaseTime()))\n-                .add(\"createTime\", format(dsv.getCreateTime()))\n-                .add(\"license\", dsv.getTermsOfUseAndAccess().getLicense() != null ? dsv.getTermsOfUseAndAccess().getLicense().toString() : null)\n-                .add(\"termsOfUse\", getLicenseInfo(dsv))\n-                .add(\"confidentialityDeclaration\", dsv.getTermsOfUseAndAccess().getConfidentialityDeclaration() != null ? dsv.getTermsOfUseAndAccess().getConfidentialityDeclaration() : null)\n-                .add(\"availabilityStatus\", dsv.getTermsOfUseAndAccess().getAvailabilityStatus() != null ? dsv.getTermsOfUseAndAccess().getAvailabilityStatus() : null)\n-                .add(\"specialPermissions\", dsv.getTermsOfUseAndAccess().getSpecialPermissions() != null ? dsv.getTermsOfUseAndAccess().getSpecialPermissions() : null)\n-                .add(\"restrictions\", dsv.getTermsOfUseAndAccess().getRestrictions() != null ? dsv.getTermsOfUseAndAccess().getRestrictions() : null)\n-                .add(\"citationRequirements\", dsv.getTermsOfUseAndAccess().getCitationRequirements() != null ? dsv.getTermsOfUseAndAccess().getCitationRequirements() : null)\n-                .add(\"depositorRequirements\", dsv.getTermsOfUseAndAccess().getDepositorRequirements() != null ? dsv.getTermsOfUseAndAccess().getDepositorRequirements() : null)\n-                .add(\"conditions\", dsv.getTermsOfUseAndAccess().getConditions() != null ? dsv.getTermsOfUseAndAccess().getConditions() : null)\n-                .add(\"disclaimer\", dsv.getTermsOfUseAndAccess().getDisclaimer() != null ? dsv.getTermsOfUseAndAccess().getDisclaimer() : null)\n-                .add(\"termsOfAccess\", dsv.getTermsOfUseAndAccess().getTermsOfAccess() != null ? dsv.getTermsOfUseAndAccess().getTermsOfAccess() : null)\n-                .add(\"dataAccessPlace\", dsv.getTermsOfUseAndAccess().getDataAccessPlace() != null ? dsv.getTermsOfUseAndAccess().getDataAccessPlace() : null)\n-                .add(\"originalArchive\", dsv.getTermsOfUseAndAccess().getOriginalArchive() != null ? dsv.getTermsOfUseAndAccess().getOriginalArchive() : null)\n-                .add(\"availabilityStatus\", dsv.getTermsOfUseAndAccess().getAvailabilityStatus() != null ? dsv.getTermsOfUseAndAccess().getAvailabilityStatus() : null)\n-                .add(\"contactForAccess\", dsv.getTermsOfUseAndAccess().getContactForAccess() != null ? dsv.getTermsOfUseAndAccess().getContactForAccess() : null)\n-                .add(\"sizeOfCollection\", dsv.getTermsOfUseAndAccess().getSizeOfCollection() != null ? dsv.getTermsOfUseAndAccess().getSizeOfCollection() : null)\n-                .add(\"studyCompletion\", dsv.getTermsOfUseAndAccess().getStudyCompletion() != null ? dsv.getTermsOfUseAndAccess().getStudyCompletion() : null)\n-                .add(\"fileAccessRequest\", dsv.getTermsOfUseAndAccess().isFileAccessRequest());\n-\n-        bld.add(\"metadataBlocks\", jsonByBlocks(dsv.getDatasetFields()));\n-\n-        bld.add(\"files\", jsonFileMetadatas(dsv.getFileMetadatas()));\n-\n-        return bld;\n-    }\n-    \n-    \n-    public static JsonObjectBuilder jsonDataFileList(List<DataFile> dataFiles){\n-    \n-        if (dataFiles==null){\n-            throw new NullPointerException(\"dataFiles cannot be null\");\n-        }\n-        \n-        JsonObjectBuilder bld = jsonObjectBuilder();\n-        \n-        \n-        List<FileMetadata> dataFileList = dataFiles.stream()\n-                                    .map(x -> x.getFileMetadata())\n-                                    .collect(Collectors.toList());\n-\n-        \n-        bld.add(\"files\", jsonFileMetadatas(dataFileList));\n-\n-        return bld;\n-    }\n-    \n-    private static String getLicenseInfo(DatasetVersion dsv) {\n-        if (dsv.getTermsOfUseAndAccess().getLicense() != null && dsv.getTermsOfUseAndAccess().getLicense().equals(TermsOfUseAndAccess.License.CC0)) {\n-            return \"CC0 Waiver\";\n-        }\n-        return dsv.getTermsOfUseAndAccess().getTermsOfUse();\n-    }\n-\n-    /**\n-     * Export formats such as DDI require the citation to be included. See\n-     * https://github.com/IQSS/dataverse/issues/2579 for more on DDI export.\n-     *\n-     * @todo Instead of having this separate method, should \"citation\" be added\n-     * to the regular `json` method for DatasetVersion? Will anything break?\n-     * Unit tests for that method could not be found.\n-     */\n-    public static JsonObjectBuilder jsonWithCitation(DatasetVersion dsv) {\n-        JsonObjectBuilder dsvWithCitation = JsonPrinter.json(dsv);\n-        dsvWithCitation.add(\"citation\", dsv.getCitation());\n-        return dsvWithCitation;\n-    }\n-\n-    /**\n-     * Export formats such as DDI require the persistent identifier components\n-     * such as \"protocol\", \"authority\" and \"identifier\" to be included so we\n-     * create a JSON object we can convert to a DatasetDTO which can include a\n-     * DatasetVersionDTO, which has all the metadata fields we need to export.\n-     * See https://github.com/IQSS/dataverse/issues/2579 for more on DDI export.\n-     *\n-     * @todo Instead of having this separate method, should \"datasetVersion\" be\n-     * added to the regular `json` method for Dataset? Will anything break? Unit\n-     * tests for that method could not be found. If we keep this method as-is\n-     * should the method be renamed?\n-     */\n-    public static JsonObjectBuilder jsonAsDatasetDto(DatasetVersion dsv) {\n-        JsonObjectBuilder datasetDtoAsJson = JsonPrinter.json(dsv.getDataset());\n-        datasetDtoAsJson.add(\"datasetVersion\", jsonWithCitation(dsv));\n-        return datasetDtoAsJson;\n-    }\n-\n-    public static JsonArrayBuilder jsonFileMetadatas(Collection<FileMetadata> fmds) {\n-        JsonArrayBuilder filesArr = Json.createArrayBuilder();\n-        for (FileMetadata fmd : fmds) {\n-            filesArr.add(JsonPrinter.json(fmd));\n-        }\n-\n-        return filesArr;\n-    }\n-\n-    public static JsonObjectBuilder json(DatasetDistributor dist) {\n-        return jsonObjectBuilder()\n-                .add(\"displayOrder\", dist.getDisplayOrder())\n-                .add(\"version\", dist.getVersion())\n-                .add(\"abbreviation\", JsonPrinter.json(dist.getAbbreviation()))\n-                .add(\"affiliation\", JsonPrinter.json(dist.getAffiliation()))\n-                .add(\"logo\", JsonPrinter.json(dist.getLogo()))\n-                .add(\"name\", JsonPrinter.json(dist.getName()))\n-                .add(\"url\", JsonPrinter.json(dist.getUrl()));\n-    }\n-\n-    public static JsonObjectBuilder jsonByBlocks(List<DatasetField> fields) {\n-        JsonObjectBuilder blocksBld = jsonObjectBuilder();\n-\n-        for (Map.Entry<MetadataBlock, List<DatasetField>> blockAndFields : DatasetField.groupByBlock(fields).entrySet()) {\n-            MetadataBlock block = blockAndFields.getKey();\n-            blocksBld.add(block.getName(), JsonPrinter.json(block, blockAndFields.getValue()));\n-        }\n-        return blocksBld;\n-    }\n-\n-    /**\n-     * Create a JSON object for the block and its fields. The fields are assumed\n-     * to belong to the block - there's no checking of that in the method.\n-     *\n-     * @param block\n-     * @param fields\n-     * @return JSON Object builder with the block and fields information.\n-     */\n-    public static JsonObjectBuilder json(MetadataBlock block, List<DatasetField> fields) {\n-        JsonObjectBuilder blockBld = jsonObjectBuilder();\n-\n-        blockBld.add(\"displayName\", block.getDisplayName());\n-        final JsonArrayBuilder fieldsArray = Json.createArrayBuilder();\n-\n-        DatasetFieldWalker.walk(fields, settingsService, new DatasetFieldsToJson(fieldsArray));\n-\n-        blockBld.add(\"fields\", fieldsArray);\n-        return blockBld;\n-    }\n-\n-    public static String typeClassString(DatasetFieldType typ) {\n-        if (typ.isControlledVocabulary()) {\n-            return \"controlledVocabulary\";\n-        }\n-        if (typ.isCompound()) {\n-            return \"compound\";\n-        }\n-        return \"primitive\";\n-    }\n-\n-    public static JsonObject json(DatasetField dfv) {\n-        if (dfv.isEmpty()) {\n-            return null;\n-        } else {\n-            JsonArrayBuilder fieldArray = Json.createArrayBuilder();\n-            DatasetFieldWalker.walk(dfv, new DatasetFieldsToJson(fieldArray));\n-            JsonArray out = fieldArray.build();\n-            return out.getJsonObject(0);\n-        }\n-    }\n-\n-    public static JsonObjectBuilder json(MetadataBlock blk) {\n-        JsonObjectBuilder bld = jsonObjectBuilder();\n-        bld.add(\"id\", blk.getId());\n-        bld.add(\"name\", blk.getName());\n-        bld.add(\"displayName\", blk.getDisplayName());\n-\n-        JsonObjectBuilder fieldsBld = jsonObjectBuilder();\n-        for (DatasetFieldType df : new TreeSet<>(blk.getDatasetFieldTypes())) {\n-            fieldsBld.add(df.getName(), JsonPrinter.json(df));\n-        }\n-\n-        bld.add(\"fields\", fieldsBld);\n-\n-        return bld;\n-    }\n-\n-    public static JsonObjectBuilder json(DatasetFieldType fld) {\n-        JsonObjectBuilder fieldsBld = jsonObjectBuilder();\n-        fieldsBld.add(\"name\", fld.getName());\n-        fieldsBld.add(\"displayName\", fld.getDisplayName());\n-        fieldsBld.add(\"title\", fld.getTitle());\n-        fieldsBld.add(\"type\", fld.getFieldType().toString());\n-        fieldsBld.add(\"watermark\", fld.getWatermark());\n-        fieldsBld.add(\"description\", fld.getDescription());\n-        if (!fld.getChildDatasetFieldTypes().isEmpty()) {\n-            JsonObjectBuilder subFieldsBld = jsonObjectBuilder();\n-            for (DatasetFieldType subFld : fld.getChildDatasetFieldTypes()) {\n-                subFieldsBld.add(subFld.getName(), JsonPrinter.json(subFld));\n-            }\n-            fieldsBld.add(\"childFields\", subFieldsBld);\n-        }\n-\n-        return fieldsBld;\n-    }\n-\n-    public static JsonObjectBuilder json(FileMetadata fmd) {\n-        return jsonObjectBuilder()\n-                // deprecated: .add(\"category\", fmd.getCategory())\n-                // TODO: uh, figure out what to do here... it's deprecated \n-                // in a sense that there's no longer the category field in the \n-                // fileMetadata object; but there are now multiple, oneToMany file \n-                // categories - and we probably need to export them too!) -- L.A. 4.5\n-                .add(\"description\", fmd.getDescription())\n-                .add(\"label\", fmd.getLabel()) // \"label\" is the filename\n-                .add(\"restricted\", fmd.isRestricted()) \n-                .add(\"directoryLabel\", fmd.getDirectoryLabel())\n-                .add(\"version\", fmd.getVersion())\n-                .add(\"datasetVersionId\", fmd.getDatasetVersion().getId())\n-                .add(\"categories\", getFileCategories(fmd))\n-                .add(\"dataFile\", JsonPrinter.json(fmd.getDataFile(), fmd));\n-    }\n-\n-      public static JsonObjectBuilder json(AuxiliaryFile auxFile) {\n-        return jsonObjectBuilder()\n-               .add(\"formatTag\", auxFile.getFormatTag())\n-                .add(\"formatVersion\", auxFile.getFormatVersion()) // \"label\" is the filename\n-                .add(\"origin\", auxFile.getOrigin()) \n-                .add(\"isPublic\", auxFile.getIsPublic())\n-                .add(\"type\", auxFile.getType())\n-                .add(\"contentType\", auxFile.getContentType())\n-                .add(\"fileSize\", auxFile.getFileSize())\n-                .add(\"checksum\", auxFile.getChecksum())\n-                .add(\"dataFile\", JsonPrinter.json(auxFile.getDataFile()));\n-    }\n-    public static JsonObjectBuilder json(DataFile df) {\n-        return JsonPrinter.json(df, null);\n-    }\n-    \n-    public static JsonObjectBuilder json(DataFile df, FileMetadata fileMetadata) {\n-        // File names are no longer stored in the DataFile entity; \n-        // (they are instead in the FileMetadata (as \"labels\") - this way \n-        // the filename can change between versions... \n-        // It does appear that for some historical purpose we still need the\n-        // filename in the file DTO (?)... We rely on it to be there for the \n-        // DDI export, for example. So we need to make sure this is is the \n-        // *correct* file name - i.e., that it comes from the right version. \n-        // (TODO...? L.A. 4.5, Aug 7 2016)\n-        String fileName = null;\n-        \n-        if (fileMetadata != null) {\n-            fileName = fileMetadata.getLabel();\n-        } else if (df.getFileMetadata() != null) {\n-            // Note that this may not necessarily grab the file metadata from the \n-            // version *you want*! (L.A.)\n-            fileName = df.getFileMetadata().getLabel();\n-        }\n-        \n-        String pidURL = \"\";\n-        \n-        if (new GlobalId(df).toURL() != null){\n-            pidURL = new GlobalId(df).toURL().toString();\n-        }\n-        \n-        return jsonObjectBuilder()\n-                .add(\"id\", df.getId())\n-                .add(\"persistentId\", df.getGlobalIdString())\n-                .add(\"pidURL\", pidURL)\n-                .add(\"filename\", fileName)\n-                .add(\"contentType\", df.getContentType())            \n-                .add(\"filesize\", df.getFilesize())            \n-                .add(\"description\", df.getDescription())    \n-                //.add(\"released\", df.isReleased())\n-                //.add(\"restricted\", df.isRestricted())\n-                .add(\"storageIdentifier\", df.getStorageIdentifier())\n-                .add(\"originalFileFormat\", df.getOriginalFileFormat())\n-                .add(\"originalFormatLabel\", df.getOriginalFormatLabel())\n-                .add (\"originalFileSize\", df.getOriginalFileSize())\n-                .add(\"originalFileName\", df.getOriginalFileName())\n-                .add(\"UNF\", df.getUnf())\n-                //---------------------------------------------\n-                // For file replace: rootDataFileId, previousDataFileId\n-                //---------------------------------------------\n-                .add(\"rootDataFileId\", df.getRootDataFileId())\n-                .add(\"previousDataFileId\", df.getPreviousDataFileId())\n-                //---------------------------------------------\n-                // Checksum\n-                // * @todo Should we deprecate \"md5\" now that it's under\n-                // * \"checksum\" (which may also be a SHA-1 rather than an MD5)? - YES!\n-                //---------------------------------------------\n-                .add(\"md5\", getMd5IfItExists(df.getChecksumType(), df.getChecksumValue()))\n-                .add(\"checksum\", getChecksumTypeAndValue(df.getChecksumType(), df.getChecksumValue()))\n-                .add(\"tabularTags\", getTabularFileTags(df))\n-                .add(\"creationDate\",  df.getCreateDateFormattedYYYYMMDD())\n-                ;\n-    }\n-    \n-    public static String format(Date d) {\n-        return (d == null) ? null : Util.getDateTimeFormat().format(d);\n-    }\n-\n-    private static JsonArrayBuilder getFileCategories(FileMetadata fmd) {\n-        if (fmd == null) {\n-            return null;\n-        }\n-        List<String> categories = fmd.getCategoriesByName();\n-        if (categories == null || categories.isEmpty()) {\n-            return null;\n-        }\n-        JsonArrayBuilder fileCategories = Json.createArrayBuilder();\n-        for (String category : categories) {\n-            fileCategories.add(category);\n-        }\n-        return fileCategories;\n-    }\n-\n-    public static JsonArrayBuilder getTabularFileTags(DataFile df) {\n-        if (df == null) {\n-            return null;\n-        }\n-        List<DataFileTag> tags = df.getTags();\n-        if (tags == null || tags.isEmpty()) {\n-            return null;\n-        }\n-        JsonArrayBuilder tabularTags = Json.createArrayBuilder();\n-        for (DataFileTag tag : tags) {\n-            String label = tag.getTypeLabel();\n-            if (label != null) {\n-                tabularTags.add(label);\n-            }\n-        }\n-        return tabularTags;\n-    }\n-\n-    private static class DatasetFieldsToJson implements DatasetFieldWalker.Listener {\n-\n-        Deque<JsonObjectBuilder> objectStack = new LinkedList<>();\n-        Deque<JsonArrayBuilder> valueArrStack = new LinkedList<>();\n-        JsonObjectBuilder result = null;\n-\n-        DatasetFieldsToJson(JsonArrayBuilder result) {\n-            valueArrStack.push(result);\n-        }\n-\n-        @Override\n-        public void startField(DatasetField f) {\n-            objectStack.push(jsonObjectBuilder());\n-            // Invariant: all values are multiple. Diffrentiation between multiple and single is done at endField.\n-            valueArrStack.push(Json.createArrayBuilder());\n-\n-            DatasetFieldType typ = f.getDatasetFieldType();\n-            objectStack.peek().add(\"typeName\", typ.getName());\n-            objectStack.peek().add(\"multiple\", typ.isAllowMultiples());\n-            objectStack.peek().add(\"typeClass\", typeClassString(typ));\n-        }\n-\n-        @Override\n-        public void endField(DatasetField f) {\n-            JsonObjectBuilder jsonField = objectStack.pop();\n-            JsonArray jsonValues = valueArrStack.pop().build();\n-            if (!jsonValues.isEmpty()) {\n-                jsonField.add(\"value\",\n-                        f.getDatasetFieldType().isAllowMultiples() ? jsonValues\n-                                : jsonValues.get(0));\n-                valueArrStack.peek().add(jsonField);\n-            }\n-        }\n-\n-        @Override\n-        public void primitiveValue(DatasetFieldValue dsfv) {\n-            if (dsfv.getValue() != null) {\n-                valueArrStack.peek().add(dsfv.getValue());\n-            }\n-        }\n-\n-        @Override\n-        public void controledVocabularyValue(ControlledVocabularyValue cvv) {\n-            valueArrStack.peek().add(cvv.getStrValue());\n-        }\n-\n-        @Override\n-        public void startCompoundValue(DatasetFieldCompoundValue dsfcv) {\n-            valueArrStack.push(Json.createArrayBuilder());\n-        }\n-\n-        @Override\n-        public void endCompoundValue(DatasetFieldCompoundValue dsfcv) {\n-            JsonArray jsonValues = valueArrStack.pop().build();\n-            if (!jsonValues.isEmpty()) {\n-                JsonObjectBuilder jsonField = jsonObjectBuilder();\n-                for (JsonObject jobj : jsonValues.getValuesAs(JsonObject.class)) {\n-                    jsonField.add(jobj.getString(\"typeName\"), jobj);\n-                }\n-                valueArrStack.peek().add(jsonField);\n-            }\n-        }\n-    }\n-\n-    public static JsonObjectBuilder json(AuthenticationProviderRow aRow) {\n-        return jsonObjectBuilder()\n-                        .add(\"id\", aRow.getId())\n-                        .add(\"factoryAlias\", aRow.getFactoryAlias() )\n-                        .add(\"title\", aRow.getTitle())\n-                        .add(\"subtitle\",aRow.getSubtitle())\n-                        .add(\"factoryData\", aRow.getFactoryData())\n-                        .add(\"enabled\", aRow.isEnabled())\n-                ;\n-    }\n-\n-    public static JsonObjectBuilder json(PrivateUrl privateUrl) {\n-        return jsonObjectBuilder()\n-                // We provide the token here as a convenience even though it is also in the role assignment.\n-                .add(\"token\", privateUrl.getToken())\n-                .add(\"link\", privateUrl.getLink())\n-                .add(\"roleAssignment\", json(privateUrl.getRoleAssignment()));\n-    }\n-\n-    public static JsonObjectBuilder json( ExplicitGroup eg ) {\n-        JsonArrayBuilder ras = Json.createArrayBuilder();\n-            for (String u : eg.getContainedRoleAssgineeIdentifiers()) {\n-                ras.add(u);\n-            }\n-            return jsonObjectBuilder()\n-                    .add(\"identifier\", eg.getIdentifier())\n-                    .add(\"groupAliasInOwner\", eg.getGroupAliasInOwner())\n-                    .add(\"owner\", eg.getOwner().getId())\n-                    .add(\"description\", eg.getDescription())\n-                    .add(\"displayName\", eg.getDisplayName())\n-                    .add(\"containedRoleAssignees\", ras);\n-    }\n-    \n-    public static JsonObjectBuilder json( DataverseFacet aFacet ) {\n-        return jsonObjectBuilder()\n-                    .add(\"id\", String.valueOf(aFacet.getId())) // TODO should just be id I think\n-                    .add(\"name\", aFacet.getDatasetFieldType().getDisplayName());\n-    }\n-        \n-    public static Collector<String, JsonArrayBuilder, JsonArrayBuilder> stringsToJsonArray() {\n-        return new Collector<String, JsonArrayBuilder, JsonArrayBuilder>() {\n-\n-            @Override\n-            public Supplier<JsonArrayBuilder> supplier() {\n-                return () -> Json.createArrayBuilder();\n-            }\n-\n-            @Override\n-            public BiConsumer<JsonArrayBuilder, String> accumulator() {\n-                return (JsonArrayBuilder b, String s) -> b.add(s);\n-            }\n-\n-            @Override\n-            public BinaryOperator<JsonArrayBuilder> combiner() {\n-                return (jab1, jab2) -> {\n-                    JsonArrayBuilder retVal = Json.createArrayBuilder();\n-                    jab1.build().forEach(retVal::add);\n-                    jab2.build().forEach(retVal::add);\n-                    return retVal;\n-                };\n-            }\n-\n-            @Override\n-            public Function<JsonArrayBuilder, JsonArrayBuilder> finisher() {\n-                return Function.identity();\n-            }\n-\n-            @Override\n-            public Set<Collector.Characteristics> characteristics() {\n-                return EnumSet.of(Collector.Characteristics.IDENTITY_FINISH);\n-            }\n+  private static final Logger logger = Logger.getLogger(JsonPrinter.class.getCanonicalName());\n+\n+  @EJB\n+  static SettingsServiceBean settingsService;\n+\n+  public static void injectSettingsService(SettingsServiceBean ssb) {\n+    settingsService = ssb;\n+  }\n+\n+  public JsonPrinter() {\n+\n+  }\n+\n+  public static final BriefJsonPrinter brief = new BriefJsonPrinter();\n+\n+  public static JsonArrayBuilder asJsonArray(Collection<String> strings) {\n+    JsonArrayBuilder arr = Json.createArrayBuilder();\n+    for (String s : strings) {\n+      arr.add(s);\n+    }\n+    return arr;\n+  }\n+\n+  public static JsonObjectBuilder json(User u) {\n+    RoleAssigneeDisplayInfo displayInfo = u.getDisplayInfo();\n+    return jsonObjectBuilder()\n+      .add(\"identifier\", u.getIdentifier())\n+      .add(\"displayInfo\", jsonObjectBuilder()\n+        .add(\"Title\", displayInfo.getTitle())\n+        .add(\"email\", displayInfo.getEmailAddress()));\n+  }\n+\n+  public static JsonObjectBuilder json(AuthenticatedUser authenticatedUser) {\n+    NullSafeJsonBuilder builder = jsonObjectBuilder()\n+      .add(\"id\", authenticatedUser.getId())\n+      .add(\"identifier\", authenticatedUser.getIdentifier())\n+      .add(\"displayName\", authenticatedUser.getDisplayInfo().getTitle())\n+      .add(\"firstName\", authenticatedUser.getFirstName())\n+      .add(\"lastName\", authenticatedUser.getLastName())\n+      .add(\"email\", authenticatedUser.getEmail())\n+      .add(\"superuser\", authenticatedUser.isSuperuser())\n+      .add(\"deactivated\", authenticatedUser.isDeactivated())\n+      .add(\"deactivatedTime\", authenticatedUser.getDeactivatedTime())\n+      .add(\"affiliation\", authenticatedUser.getAffiliation())\n+      .add(\"position\", authenticatedUser.getPosition())\n+      .add(\"persistentUserId\", authenticatedUser.getAuthenticatedUserLookup().getPersistentUserId())\n+      .add(\"emailLastConfirmed\", authenticatedUser.getEmailConfirmed())\n+      .add(\"createdTime\", authenticatedUser.getCreatedTime())\n+      .add(\"lastLoginTime\", authenticatedUser.getLastLoginTime())\n+      .add(\"lastApiUseTime\", authenticatedUser.getLastApiUseTime())\n+      .add(\"authenticationProviderId\", authenticatedUser.getAuthenticatedUserLookup().getAuthenticationProviderId());\n+    return builder;\n+  }\n+\n+  public static JsonObjectBuilder json(RoleAssignment ra) {\n+    return jsonObjectBuilder()\n+      .add(\"id\", ra.getId())\n+      .add(\"assignee\", ra.getAssigneeIdentifier())\n+      .add(\"roleId\", ra.getRole().getId())\n+      .add(\"_roleAlias\", ra.getRole().getAlias())\n+      .add(\"privateUrlToken\", ra.getPrivateUrlToken())\n+      .add(\"definitionPointId\", ra.getDefinitionPoint().getId());\n+  }\n+\n+  public static JsonArrayBuilder json(Set<Permission> permissions) {\n+    JsonArrayBuilder bld = Json.createArrayBuilder();\n+    permissions.forEach(p -> bld.add(p.name()));\n+    return bld;\n+  }\n+\n+  public static JsonObjectBuilder json(DatasetLock lock) {\n+    return jsonObjectBuilder()\n+      .add(\"lockType\", lock.getReason().toString())\n+      .add(\"date\", lock.getStartTime().toString())\n+      .add(\"user\", lock.getUser().getUserIdentifier())\n+      .add(\"message\", lock.getInfo());\n+\n+  }\n+\n+  public static JsonObjectBuilder json(RoleAssigneeDisplayInfo d) {\n+    return jsonObjectBuilder()\n+      .add(\"title\", d.getTitle())\n+      .add(\"email\", d.getEmailAddress())\n+      .add(\"affiliation\", d.getAffiliation());\n+  }\n+\n+  public static JsonObjectBuilder json(IpGroup grp) {\n+    // collect single addresses\n+    List<String> singles = grp.getRanges().stream().filter(IpAddressRange::isSingleAddress)\n+      .map(IpAddressRange::getBottom)\n+      .map(IpAddress::toString).collect(toList());\n+    // collect \"real\" ranges\n+    List<List<String>> ranges = grp.getRanges().stream().filter(rng -> !rng.isSingleAddress())\n+      .map(rng -> Arrays.asList(rng.getBottom().toString(), rng.getTop().toString()))\n+      .collect(toList());\n+\n+    JsonObjectBuilder bld = jsonObjectBuilder()\n+      .add(\"alias\", grp.getPersistedGroupAlias())\n+      .add(\"identifier\", grp.getIdentifier())\n+      .add(\"id\", grp.getId())\n+      .add(\"name\", grp.getDisplayName())\n+      .add(\"description\", grp.getDescription());\n+\n+    if (!singles.isEmpty()) {\n+      bld.add(\"addresses\", asJsonArray(singles));\n+    }\n+\n+    if (!ranges.isEmpty()) {\n+      JsonArrayBuilder rangesBld = Json.createArrayBuilder();\n+      ranges.forEach(r -> rangesBld.add(Json.createArrayBuilder().add(r.get(0)).add(r.get(1))));\n+      bld.add(\"ranges\", rangesBld);\n+    }\n+\n+    return bld;\n+  }\n+\n+  public static JsonObjectBuilder json(ShibGroup grp) {\n+    return jsonObjectBuilder()\n+      .add(\"name\", grp.getName())\n+      .add(\"attribute\", grp.getAttribute())\n+      .add(\"pattern\", grp.getPattern())\n+      .add(\"id\", grp.getId());\n+  }\n+\n+  public static JsonObjectBuilder json(MailDomainGroup grp) {\n+    JsonObjectBuilder bld = jsonObjectBuilder()\n+      .add(\"alias\", grp.getPersistedGroupAlias())\n+      .add(\"id\", grp.getId())\n+      .add(\"name\", grp.getDisplayName())\n+      .add(\"description\", grp.getDescription())\n+      .add(\"domains\", asJsonArray(grp.getEmailDomainsAsList()))\n+      .add(\"regex\", grp.isRegEx());\n+    return bld;\n+  }\n+\n+  public static JsonArrayBuilder rolesToJson(List<DataverseRole> role) {\n+    JsonArrayBuilder bld = Json.createArrayBuilder();\n+    for (DataverseRole r : role) {\n+      bld.add(JsonPrinter.json(r));\n+    }\n+    return bld;\n+  }\n+\n+  public static JsonObjectBuilder json(DataverseRole role) {\n+    JsonObjectBuilder bld = jsonObjectBuilder()\n+      .add(\"alias\", role.getAlias())\n+      .add(\"name\", role.getName())\n+      .add(\"permissions\", JsonPrinter.json(role.permissions()))\n+      .add(\"description\", role.getDescription());\n+    if (role.getId() != null) {\n+      bld.add(\"id\", role.getId());\n+    }\n+    if (role.getOwner() != null && role.getOwner().getId() != null) {\n+      bld.add(\"ownerId\", role.getOwner().getId());\n+    }\n+\n+    return bld;\n+  }\n+\n+  public static JsonObjectBuilder json(Workflow wf) {\n+    JsonObjectBuilder bld = jsonObjectBuilder();\n+    bld.add(\"name\", wf.getName());\n+    if (wf.getId() != null) {\n+      bld.add(\"id\", wf.getId());\n+    }\n+\n+    if (wf.getSteps() != null && !wf.getSteps().isEmpty()) {\n+      JsonArrayBuilder arr = Json.createArrayBuilder();\n+      for (WorkflowStepData stp : wf.getSteps()) {\n+        arr.add(jsonObjectBuilder().add(\"stepType\", stp.getStepType())\n+          .add(\"provider\", stp.getProviderId())\n+          .add(\"parameters\", mapToObject(stp.getStepParameters()))\n+          .add(\"requiredSettings\", mapToObject(stp.getStepSettings())));\n+      }\n+      bld.add(\"steps\", arr);\n+    }\n+\n+    return bld;\n+  }\n+\n+  public static JsonObjectBuilder json(Dataverse dv) {\n+    return json(dv, false);\n+  }\n+\n+  //TODO: Once we upgrade to Java EE 8 we can remove objects from the builder, and this email removal can be done in a better place.\n+  public static JsonObjectBuilder json(Dataverse dv, Boolean hideEmail) {\n+    JsonObjectBuilder bld = jsonObjectBuilder()\n+      .add(\"id\", dv.getId())\n+      .add(\"alias\", dv.getAlias())\n+      .add(\"name\", dv.getName())\n+      .add(\"affiliation\", dv.getAffiliation());\n+    if (!hideEmail) {\n+      bld.add(\"dataverseContacts\", JsonPrinter.json(dv.getDataverseContacts()));\n+    }\n+\n+    bld.add(\"permissionRoot\", dv.isPermissionRoot())\n+      .add(\"description\", dv.getDescription())\n+      .add(\"dataverseType\", dv.getDataverseType().name());\n+    if (dv.getOwner() != null) {\n+      bld.add(\"ownerId\", dv.getOwner().getId());\n+    }\n+    if (dv.getCreateDate() != null) {\n+      bld.add(\"creationDate\", Util.getDateTimeFormat().format(dv.getCreateDate()));\n+    }\n+    if (dv.getDataverseTheme() != null) {\n+      bld.add(\"theme\", JsonPrinter.json(dv.getDataverseTheme()));\n+    }\n+    if (dv.getStorageDriverId() != null) {\n+      bld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n+    }\n+\n+    return bld;\n+  }\n+\n+  public static JsonArrayBuilder json(List<DataverseContact> dataverseContacts) {\n+    JsonArrayBuilder jsonArrayOfContacts = Json.createArrayBuilder();\n+    for (DataverseContact dataverseContact : dataverseContacts) {\n+      NullSafeJsonBuilder contactJsonObject = NullSafeJsonBuilder.jsonObjectBuilder();\n+      contactJsonObject.add(\"displayOrder\", dataverseContact.getDisplayOrder());\n+      contactJsonObject.add(\"contactEmail\", dataverseContact.getContactEmail());\n+      jsonArrayOfContacts.add(contactJsonObject);\n+    }\n+    return jsonArrayOfContacts;\n+  }\n+\n+  public static JsonObjectBuilder json(DataverseTheme theme) {\n+    final NullSafeJsonBuilder baseObject = jsonObjectBuilder()\n+      .add(\"id\", theme.getId())\n+      .add(\"logo\", theme.getLogo())\n+      .add(\"tagline\", theme.getTagline())\n+      .add(\"linkUrl\", theme.getLinkUrl())\n+      .add(\"linkColor\", theme.getLinkColor())\n+      .add(\"textColor\", theme.getTextColor())\n+      .add(\"backgroundColor\", theme.getBackgroundColor());\n+    if (theme.getLogoAlignment() != null) {\n+      baseObject.add(\"logoBackgroundColor\", theme.getLogoBackgroundColor());\n+    }\n+    return baseObject;\n+  }\n+\n+  public static JsonObjectBuilder json(BuiltinUser user) {\n+    return (user == null)\n+      ? null\n+      : jsonObjectBuilder()\n+      .add(\"id\", user.getId())\n+      .add(\"userName\", user.getUserName());\n+  }\n+\n+  public static JsonObjectBuilder json(Dataset ds) {\n+    return jsonObjectBuilder()\n+      .add(\"id\", ds.getId())\n+      .add(\"identifier\", ds.getIdentifier())\n+      .add(\"persistentUrl\", ds.getPersistentURL())\n+      .add(\"protocol\", ds.getProtocol())\n+      .add(\"authority\", ds.getAuthority())\n+      .add(\"publisher\", BrandingUtil.getInstallationBrandName())\n+      .add(\"publicationDate\", ds.getPublicationDateFormattedYYYYMMDD())\n+      .add(\"storageIdentifier\", ds.getStorageIdentifier());\n+  }\n+\n+  public static JsonObjectBuilder json(DatasetVersion dsv) {\n+    JsonObjectBuilder bld = jsonObjectBuilder()\n+      .add(\"id\", dsv.getId())\n+      .add(\"datasetId\", dsv.getDataset().getId())\n+      .add(\"datasetPersistentId\", dsv.getDataset().getGlobalId().asString())\n+      .add(\"storageIdentifier\", dsv.getDataset().getStorageIdentifier())\n+      .add(\"versionNumber\", dsv.getVersionNumber())\n+      .add(\"versionMinorNumber\", dsv.getMinorVersionNumber())\n+      .add(\"versionState\", dsv.getVersionState().name())\n+      .add(\"versionNote\", dsv.getVersionNote())\n+      .add(\"archiveNote\", dsv.getArchiveNote())\n+      .add(\"deaccessionLink\", dsv.getDeaccessionLink())\n+      .add(\"distributionDate\", dsv.getDistributionDate())\n+      .add(\"productionDate\", dsv.getProductionDate())\n+      .add(\"UNF\", dsv.getUNF())\n+      .add(\"archiveTime\", format(dsv.getArchiveTime()))\n+      .add(\"lastUpdateTime\", format(dsv.getLastUpdateTime()))\n+      .add(\"releaseTime\", format(dsv.getReleaseTime()))\n+      .add(\"createTime\", format(dsv.getCreateTime()))\n+      .add(\"license\",\n+        dsv.getTermsOfUseAndAccess().getLicense() != null ? dsv.getTermsOfUseAndAccess().getLicense().toString() : null)\n+      .add(\"termsOfUse\", getLicenseInfo(dsv))\n+      .add(\"confidentialityDeclaration\", dsv.getTermsOfUseAndAccess().getConfidentialityDeclaration() != null ?\n+        dsv.getTermsOfUseAndAccess().getConfidentialityDeclaration() : null)\n+      .add(\"availabilityStatus\", dsv.getTermsOfUseAndAccess().getAvailabilityStatus() != null ?\n+        dsv.getTermsOfUseAndAccess().getAvailabilityStatus() : null)\n+      .add(\"specialPermissions\", dsv.getTermsOfUseAndAccess().getSpecialPermissions() != null ?\n+        dsv.getTermsOfUseAndAccess().getSpecialPermissions() : null)\n+      .add(\"restrictions\",\n+        dsv.getTermsOfUseAndAccess().getRestrictions() != null ? dsv.getTermsOfUseAndAccess().getRestrictions() : null)\n+      .add(\"citationRequirements\", dsv.getTermsOfUseAndAccess().getCitationRequirements() != null ?\n+        dsv.getTermsOfUseAndAccess().getCitationRequirements() : null)\n+      .add(\"depositorRequirements\", dsv.getTermsOfUseAndAccess().getDepositorRequirements() != null ?\n+        dsv.getTermsOfUseAndAccess().getDepositorRequirements() : null)\n+      .add(\"conditions\",\n+        dsv.getTermsOfUseAndAccess().getConditions() != null ? dsv.getTermsOfUseAndAccess().getConditions() : null)\n+      .add(\"disclaimer\",\n+        dsv.getTermsOfUseAndAccess().getDisclaimer() != null ? dsv.getTermsOfUseAndAccess().getDisclaimer() : null)\n+      .add(\"termsOfAccess\",\n+        dsv.getTermsOfUseAndAccess().getTermsOfAccess() != null ? dsv.getTermsOfUseAndAccess().getTermsOfAccess() :\n+          null)\n+      .add(\"dataAccessPlace\",\n+        dsv.getTermsOfUseAndAccess().getDataAccessPlace() != null ? dsv.getTermsOfUseAndAccess().getDataAccessPlace() :\n+          null)\n+      .add(\"originalArchive\",\n+        dsv.getTermsOfUseAndAccess().getOriginalArchive() != null ? dsv.getTermsOfUseAndAccess().getOriginalArchive() :\n+          null)\n+      .add(\"availabilityStatus\", dsv.getTermsOfUseAndAccess().getAvailabilityStatus() != null ?\n+        dsv.getTermsOfUseAndAccess().getAvailabilityStatus() : null)\n+      .add(\"contactForAccess\", dsv.getTermsOfUseAndAccess().getContactForAccess() != null ?\n+        dsv.getTermsOfUseAndAccess().getContactForAccess() : null)\n+      .add(\"sizeOfCollection\", dsv.getTermsOfUseAndAccess().getSizeOfCollection() != null ?\n+        dsv.getTermsOfUseAndAccess().getSizeOfCollection() : null)\n+      .add(\"studyCompletion\",\n+        dsv.getTermsOfUseAndAccess().getStudyCompletion() != null ? dsv.getTermsOfUseAndAccess().getStudyCompletion() :\n+          null)\n+      .add(\"fileAccessRequest\", dsv.getTermsOfUseAndAccess().isFileAccessRequest());\n+\n+    bld.add(\"metadataBlocks\", jsonByBlocks(dsv.getDatasetFields()));\n+\n+    bld.add(\"files\", jsonFileMetadatas(dsv.getFileMetadatas()));\n+\n+    return bld;\n+  }\n+\n+\n+  public static JsonObjectBuilder jsonDataFileList(List<DataFile> dataFiles) {\n+\n+    if (dataFiles == null) {\n+      throw new NullPointerException(\"dataFiles cannot be null\");\n+    }\n+\n+    JsonObjectBuilder bld = jsonObjectBuilder();\n+\n+\n+    List<FileMetadata> dataFileList = dataFiles.stream()\n+      .map(x -> x.getFileMetadata())\n+      .collect(Collectors.toList());\n+\n+\n+    bld.add(\"files\", jsonFileMetadatas(dataFileList));\n+\n+    return bld;\n+  }\n+\n+  private static String getLicenseInfo(DatasetVersion dsv) {\n+    if (dsv.getTermsOfUseAndAccess().getLicense() != null &&\n+      dsv.getTermsOfUseAndAccess().getLicense().equals(TermsOfUseAndAccess.License.CC0)) {\n+      return \"CC0 Waiver\";\n+    }\n+    return dsv.getTermsOfUseAndAccess().getTermsOfUse();\n+  }\n+\n+  /**\n+   * Export formats such as DDI require the citation to be included. See\n+   * https://github.com/IQSS/dataverse/issues/2579 for more on DDI export.\n+   *\n+   * @todo Instead of having this separate method, should \"citation\" be added\n+   * to the regular `json` method for DatasetVersion? Will anything break?\n+   * Unit tests for that method could not be found.\n+   */\n+  public static JsonObjectBuilder jsonWithCitation(DatasetVersion dsv) {\n+    JsonObjectBuilder dsvWithCitation = JsonPrinter.json(dsv);\n+    dsvWithCitation.add(\"citation\", dsv.getCitation());\n+    return dsvWithCitation;\n+  }\n+\n+  /**\n+   * Export formats such as DDI require the persistent identifier components\n+   * such as \"protocol\", \"authority\" and \"identifier\" to be included so we\n+   * create a JSON object we can convert to a DatasetDTO which can include a\n+   * DatasetVersionDTO, which has all the metadata fields we need to export.\n+   * See https://github.com/IQSS/dataverse/issues/2579 for more on DDI export.\n+   *\n+   * @todo Instead of having this separate method, should \"datasetVersion\" be\n+   * added to the regular `json` method for Dataset? Will anything break? Unit\n+   * tests for that method could not be found. If we keep this method as-is\n+   * should the method be renamed?\n+   */\n+  public static JsonObjectBuilder jsonAsDatasetDto(DatasetVersion dsv) {\n+    JsonObjectBuilder datasetDtoAsJson = JsonPrinter.json(dsv.getDataset());\n+    datasetDtoAsJson.add(\"datasetVersion\", jsonWithCitation(dsv));\n+    return datasetDtoAsJson;\n+  }\n+\n+  public static JsonArrayBuilder jsonFileMetadatas(Collection<FileMetadata> fmds) {\n+    JsonArrayBuilder filesArr = Json.createArrayBuilder();\n+    for (FileMetadata fmd : fmds) {\n+      filesArr.add(JsonPrinter.json(fmd));\n+    }\n+\n+    return filesArr;\n+  }\n+\n+  public static JsonObjectBuilder json(DatasetDistributor dist) {\n+    return jsonObjectBuilder()\n+      .add(\"displayOrder\", dist.getDisplayOrder())\n+      .add(\"version\", dist.getVersion())\n+      .add(\"abbreviation\", JsonPrinter.json(dist.getAbbreviation()))\n+      .add(\"affiliation\", JsonPrinter.json(dist.getAffiliation()))\n+      .add(\"logo\", JsonPrinter.json(dist.getLogo()))\n+      .add(\"name\", JsonPrinter.json(dist.getName()))\n+      .add(\"url\", JsonPrinter.json(dist.getUrl()));\n+  }\n+\n+  public static JsonObjectBuilder jsonByBlocks(List<DatasetField> fields) {\n+    JsonObjectBuilder blocksBld = jsonObjectBuilder();\n+\n+    for (Map.Entry<MetadataBlock, List<DatasetField>> blockAndFields : DatasetField.groupByBlock(fields).entrySet()) {\n+      MetadataBlock block = blockAndFields.getKey();\n+      blocksBld.add(block.getName(), JsonPrinter.json(block, blockAndFields.getValue()));\n+    }\n+    return blocksBld;\n+  }\n+\n+  /**\n+   * Create a JSON object for the block and its fields. The fields are assumed\n+   * to belong to the block - there's no checking of that in the method.\n+   *\n+   * @param block\n+   * @param fields\n+   * @return JSON Object builder with the block and fields information.\n+   */\n+  public static JsonObjectBuilder json(MetadataBlock block, List<DatasetField> fields) {\n+    JsonObjectBuilder blockBld = jsonObjectBuilder();\n+\n+    blockBld.add(\"displayName\", block.getDisplayName());\n+    final JsonArrayBuilder fieldsArray = Json.createArrayBuilder();\n+\n+    DatasetFieldWalker.walk(fields, settingsService, new DatasetFieldsToJson(fieldsArray));\n+\n+    blockBld.add(\"fields\", fieldsArray);\n+    return blockBld;\n+  }\n+\n+  public static String typeClassString(DatasetFieldType typ) {\n+    if (typ.isControlledVocabulary()) {\n+      return \"controlledVocabulary\";\n+    }\n+    if (typ.isCompound()) {\n+      return \"compound\";\n+    }\n+    return \"primitive\";\n+  }\n+\n+  public static JsonObject json(DatasetField dfv) {\n+    if (dfv.isEmpty()) {\n+      return null;\n+    } else {\n+      JsonArrayBuilder fieldArray = Json.createArrayBuilder();\n+      DatasetFieldWalker.walk(dfv, new DatasetFieldsToJson(fieldArray));\n+      JsonArray out = fieldArray.build();\n+      return out.getJsonObject(0);\n+    }\n+  }\n+\n+  public static JsonObjectBuilder json(MetadataBlock blk) {\n+    JsonObjectBuilder bld = jsonObjectBuilder();\n+    bld.add(\"id\", blk.getId());\n+    bld.add(\"name\", blk.getName());\n+    bld.add(\"displayName\", blk.getDisplayName());\n+\n+    JsonObjectBuilder fieldsBld = jsonObjectBuilder();\n+    for (DatasetFieldType df : new TreeSet<>(blk.getDatasetFieldTypes())) {\n+      fieldsBld.add(df.getName(), JsonPrinter.json(df));\n+    }\n+\n+    bld.add(\"fields\", fieldsBld);\n+\n+    return bld;\n+  }\n+\n+  public static JsonObjectBuilder json(DatasetFieldType fld) {\n+    JsonObjectBuilder fieldsBld = jsonObjectBuilder();\n+    fieldsBld.add(\"name\", fld.getName());\n+    fieldsBld.add(\"displayName\", fld.getDisplayName());\n+    fieldsBld.add(\"title\", fld.getTitle());\n+    fieldsBld.add(\"type\", fld.getFieldType().toString());\n+    fieldsBld.add(\"watermark\", fld.getWatermark());\n+    fieldsBld.add(\"description\", fld.getDescription());\n+    if (!fld.getChildDatasetFieldTypes().isEmpty()) {\n+      JsonObjectBuilder subFieldsBld = jsonObjectBuilder();\n+      for (DatasetFieldType subFld : fld.getChildDatasetFieldTypes()) {\n+        subFieldsBld.add(subFld.getName(), JsonPrinter.json(subFld));\n+      }\n+      fieldsBld.add(\"childFields\", subFieldsBld);\n+    }\n+\n+    return fieldsBld;\n+  }\n+\n+  public static JsonObjectBuilder json(FileMetadata fmd) {\n+    return jsonObjectBuilder()\n+      // deprecated: .add(\"category\", fmd.getCategory())\n+      // TODO: uh, figure out what to do here... it's deprecated\n+      // in a sense that there's no longer the category field in the\n+      // fileMetadata object; but there are now multiple, oneToMany file\n+      // categories - and we probably need to export them too!) -- L.A. 4.5\n+      .add(\"description\", fmd.getDescription())\n+      .add(\"label\", fmd.getLabel()) // \"label\" is the filename\n+      .add(\"restricted\", fmd.isRestricted())\n+      .add(\"directoryLabel\", fmd.getDirectoryLabel())\n+      .add(\"version\", fmd.getVersion())\n+      .add(\"datasetVersionId\", fmd.getDatasetVersion().getId())\n+      .add(\"categories\", getFileCategories(fmd))\n+      .add(\"dataFile\", JsonPrinter.json(fmd.getDataFile(), fmd));\n+  }\n+\n+  public static JsonObjectBuilder json(AuxiliaryFile auxFile) {\n+    return jsonObjectBuilder()\n+      .add(\"formatTag\", auxFile.getFormatTag())\n+      .add(\"formatVersion\", auxFile.getFormatVersion()) // \"label\" is the filename\n+      .add(\"origin\", auxFile.getOrigin())\n+      .add(\"isPublic\", auxFile.getIsPublic())\n+      .add(\"type\", auxFile.getType())\n+      .add(\"contentType\", auxFile.getContentType())\n+      .add(\"fileSize\", auxFile.getFileSize())\n+      .add(\"checksum\", auxFile.getChecksum())\n+      .add(\"dataFile\", JsonPrinter.json(auxFile.getDataFile()));\n+  }\n+\n+  public static JsonObjectBuilder json(DataFile df) {\n+    return JsonPrinter.json(df, null);\n+  }\n+\n+  public static JsonObjectBuilder json(DataFile df, FileMetadata fileMetadata) {\n+    // File names are no longer stored in the DataFile entity;\n+    // (they are instead in the FileMetadata (as \"labels\") - this way\n+    // the filename can change between versions...\n+    // It does appear that for some historical purpose we still need the\n+    // filename in the file DTO (?)... We rely on it to be there for the\n+    // DDI export, for example. So we need to make sure this is is the\n+    // *correct* file name - i.e., that it comes from the right version.\n+    // (TODO...? L.A. 4.5, Aug 7 2016)\n+    String fileName = null;\n+\n+    if (fileMetadata != null) {\n+      fileName = fileMetadata.getLabel();\n+    } else if (df.getFileMetadata() != null) {\n+      // Note that this may not necessarily grab the file metadata from the\n+      // version *you want*! (L.A.)\n+      fileName = df.getFileMetadata().getLabel();\n+    }\n+\n+    String pidURL = \"\";\n+\n+    if (new GlobalId(df).toURL() != null) {\n+      pidURL = new GlobalId(df).toURL().toString();\n+    }\n+\n+    return jsonObjectBuilder()\n+      .add(\"id\", df.getId())\n+      .add(\"persistentId\", df.getGlobalIdString())\n+      .add(\"pidURL\", pidURL)\n+      .add(\"filename\", fileName)\n+      .add(\"contentType\", df.getContentType())\n+      .add(\"filesize\", df.getFilesize())\n+      .add(\"description\", df.getDescription())\n+      //.add(\"released\", df.isReleased())\n+      //.add(\"restricted\", df.isRestricted())\n+      .add(\"storageIdentifier\", df.getStorageIdentifier())\n+      .add(\"originalFileFormat\", df.getOriginalFileFormat())\n+      .add(\"originalFormatLabel\", df.getOriginalFormatLabel())\n+      .add(\"originalFileSize\", df.getOriginalFileSize())\n+      .add(\"originalFileName\", df.getOriginalFileName())\n+      .add(\"UNF\", df.getUnf())\n+      //---------------------------------------------\n+      // For file replace: rootDataFileId, previousDataFileId\n+      //---------------------------------------------\n+      .add(\"rootDataFileId\", df.getRootDataFileId())\n+      .add(\"previousDataFileId\", df.getPreviousDataFileId())\n+      //---------------------------------------------\n+      // Checksum\n+      // * @todo Should we deprecate \"md5\" now that it's under\n+      // * \"checksum\" (which may also be a SHA-1 rather than an MD5)? - YES!\n+      //---------------------------------------------\n+      .add(\"md5\", getMd5IfItExists(df.getChecksumType(), df.getChecksumValue()))\n+      .add(\"checksum\", getChecksumTypeAndValue(df.getChecksumType(), df.getChecksumValue()))\n+      .add(\"tabularTags\", getTabularFileTags(df))\n+      .add(\"creationDate\", df.getCreateDateFormattedYYYYMMDD())\n+      ;\n+  }\n+\n+  public static String format(Date d) {\n+    return (d == null) ? null : Util.getDateTimeFormat().format(d);\n+  }\n+\n+  private static JsonArrayBuilder getFileCategories(FileMetadata fmd) {\n+    if (fmd == null) {\n+      return null;\n+    }\n+    List<String> categories = fmd.getCategoriesByName();\n+    if (categories == null || categories.isEmpty()) {\n+      return null;\n+    }\n+    JsonArrayBuilder fileCategories = Json.createArrayBuilder();\n+    for (String category : categories) {\n+      fileCategories.add(category);\n+    }\n+    return fileCategories;\n+  }\n+\n+  public static JsonArrayBuilder getTabularFileTags(DataFile df) {\n+    if (df == null) {\n+      return null;\n+    }\n+    List<DataFileTag> tags = df.getTags();\n+    if (tags == null || tags.isEmpty()) {\n+      return null;\n+    }\n+    JsonArrayBuilder tabularTags = Json.createArrayBuilder();\n+    for (DataFileTag tag : tags) {\n+      String label = tag.getTypeLabel();\n+      if (label != null) {\n+        tabularTags.add(label);\n+      }\n+    }\n+    return tabularTags;\n+  }\n+\n+  private static class DatasetFieldsToJson implements DatasetFieldWalker.Listener {\n+\n+    Deque<JsonObjectBuilder> objectStack = new LinkedList<>();\n+    Deque<JsonArrayBuilder> valueArrStack = new LinkedList<>();\n+    JsonObjectBuilder result = null;\n+\n+    DatasetFieldsToJson(JsonArrayBuilder result) {\n+      valueArrStack.push(result);\n+    }\n+\n+    @Override\n+    public void startField(DatasetField f) {\n+      objectStack.push(jsonObjectBuilder());\n+      // Invariant: all values are multiple. Diffrentiation between multiple and single is done at endField.\n+      valueArrStack.push(Json.createArrayBuilder());\n+\n+      DatasetFieldType typ = f.getDatasetFieldType();\n+      objectStack.peek().add(\"typeName\", typ.getName());\n+      objectStack.peek().add(\"multiple\", typ.isAllowMultiples());\n+      objectStack.peek().add(\"typeClass\", typeClassString(typ));\n+    }\n+\n+    @Override\n+    public void endField(DatasetField f) {\n+      JsonObjectBuilder jsonField = objectStack.pop();\n+      JsonArray jsonValues = valueArrStack.pop().build();\n+      if (!jsonValues.isEmpty()) {\n+        jsonField.add(\"value\",\n+          f.getDatasetFieldType().isAllowMultiples() ? jsonValues\n+            : jsonValues.get(0));\n+        valueArrStack.peek().add(jsonField);\n+      }\n+    }\n+\n+    @Override\n+    public void primitiveValue(DatasetFieldValue dsfv) {\n+      if (dsfv.getValue() != null) {\n+        valueArrStack.peek().add(dsfv.getValue());\n+      }\n+    }\n+\n+    @Override\n+    public void controledVocabularyValue(ControlledVocabularyValue cvv) {\n+      valueArrStack.peek().add(cvv.getStrValue());\n+    }\n+\n+    @Override\n+    public void startCompoundValue(DatasetFieldCompoundValue dsfcv) {\n+      valueArrStack.push(Json.createArrayBuilder());\n+    }\n+\n+    @Override\n+    public void endCompoundValue(DatasetFieldCompoundValue dsfcv) {\n+      JsonArray jsonValues = valueArrStack.pop().build();\n+      if (!jsonValues.isEmpty()) {\n+        JsonObjectBuilder jsonField = jsonObjectBuilder();\n+        for (JsonObject jobj : jsonValues.getValuesAs(JsonObject.class)) {\n+          jsonField.add(jobj.getString(\"typeName\"), jobj);\n+        }\n+        valueArrStack.peek().add(jsonField);\n+      }\n+    }\n+  }\n+\n+  public static JsonObjectBuilder json(AuthenticationProviderRow aRow) {\n+    return jsonObjectBuilder()\n+      .add(\"id\", aRow.getId())\n+      .add(\"factoryAlias\", aRow.getFactoryAlias())\n+      .add(\"title\", aRow.getTitle())\n+      .add(\"subtitle\", aRow.getSubtitle())\n+      .add(\"factoryData\", aRow.getFactoryData())\n+      .add(\"enabled\", aRow.isEnabled())\n+      ;\n+  }\n+\n+  public static JsonObjectBuilder json(PrivateUrl privateUrl) {\n+    return jsonObjectBuilder()\n+      // We provide the token here as a convenience even though it is also in the role assignment.\n+      .add(\"token\", privateUrl.getToken())\n+      .add(\"link\", privateUrl.getLink())\n+      .add(\"roleAssignment\", json(privateUrl.getRoleAssignment()));\n+  }\n+\n+  public static JsonObjectBuilder json(ExplicitGroup eg) {\n+    JsonArrayBuilder ras = Json.createArrayBuilder();\n+    for (String u : eg.getContainedRoleAssgineeIdentifiers()) {\n+      ras.add(u);\n+    }\n+    return jsonObjectBuilder()\n+      .add(\"identifier\", eg.getIdentifier())\n+      .add(\"groupAliasInOwner\", eg.getGroupAliasInOwner())\n+      .add(\"owner\", eg.getOwner().getId())\n+      .add(\"description\", eg.getDescription())\n+      .add(\"displayName\", eg.getDisplayName())\n+      .add(\"containedRoleAssignees\", ras);\n+  }\n+\n+  public static JsonObjectBuilder json(DataverseFacet aFacet) {\n+    return jsonObjectBuilder()\n+      .add(\"id\", String.valueOf(aFacet.getId())) // TODO should just be id I think\n+      .add(\"name\", aFacet.getDatasetFieldType().getDisplayName());\n+  }\n+\n+  public static Collector<String, JsonArrayBuilder, JsonArrayBuilder> stringsToJsonArray() {\n+    return new Collector<String, JsonArrayBuilder, JsonArrayBuilder>() {\n+\n+      @Override\n+      public Supplier<JsonArrayBuilder> supplier() {\n+        return () -> Json.createArrayBuilder();\n+      }\n+\n+      @Override\n+      public BiConsumer<JsonArrayBuilder, String> accumulator() {\n+        return (JsonArrayBuilder b, String s) -> b.add(s);\n+      }\n+\n+      @Override\n+      public BinaryOperator<JsonArrayBuilder> combiner() {\n+        return (jab1, jab2) -> {\n+          JsonArrayBuilder retVal = Json.createArrayBuilder();\n+          jab1.build().forEach(retVal::add);\n+          jab2.build().forEach(retVal::add);\n+          return retVal;\n         };\n-    }\n-\n-    public static Collector<JsonObjectBuilder, ArrayList<JsonObjectBuilder>, JsonArrayBuilder> toJsonArray() {\n-        return new Collector<JsonObjectBuilder, ArrayList<JsonObjectBuilder>, JsonArrayBuilder>() {\n-\n-            @Override\n-            public Supplier<ArrayList<JsonObjectBuilder>> supplier() {\n-                return () -> new ArrayList<>();\n-            }\n-\n-            @Override\n-            public BiConsumer<ArrayList<JsonObjectBuilder>, JsonObjectBuilder> accumulator() {\n-                return (t, u) ->t.add(u);\n-            }\n-\n-            @Override\n-            public BinaryOperator<ArrayList<JsonObjectBuilder>> combiner() {\n-                return (jab1, jab2) -> {\n-                    jab1.addAll(jab2);\n-                    return jab1;\n-                };\n-            }\n-\n-            @Override\n-            public Function<ArrayList<JsonObjectBuilder>, JsonArrayBuilder> finisher() {\n-                return (l) -> {\n-                  JsonArrayBuilder bld = Json.createArrayBuilder();\n-                  l.forEach( bld::add );\n-                  return bld;\n-                };\n-            }\n-\n-            @Override\n-            public Set<Collector.Characteristics> characteristics() {\n-                return Collections.emptySet();\n-            }\n+      }\n+\n+      @Override\n+      public Function<JsonArrayBuilder, JsonArrayBuilder> finisher() {\n+        return Function.identity();\n+      }\n+\n+      @Override\n+      public Set<Collector.Characteristics> characteristics() {\n+        return EnumSet.of(Collector.Characteristics.IDENTITY_FINISH);\n+      }\n+    };\n+  }\n+\n+  public static Collector<JsonObjectBuilder, ArrayList<JsonObjectBuilder>, JsonArrayBuilder> toJsonArray() {\n+    return new Collector<JsonObjectBuilder, ArrayList<JsonObjectBuilder>, JsonArrayBuilder>() {\n+\n+      @Override\n+      public Supplier<ArrayList<JsonObjectBuilder>> supplier() {\n+        return () -> new ArrayList<>();\n+      }\n+\n+      @Override\n+      public BiConsumer<ArrayList<JsonObjectBuilder>, JsonObjectBuilder> accumulator() {\n+        return (t, u) -> t.add(u);\n+      }\n+\n+      @Override\n+      public BinaryOperator<ArrayList<JsonObjectBuilder>> combiner() {\n+        return (jab1, jab2) -> {\n+          jab1.addAll(jab2);\n+          return jab1;\n         };\n-    }\n-\n-    public static String getMd5IfItExists(DataFile.ChecksumType checksumType, String checksumValue) {\n-        if (DataFile.ChecksumType.MD5.equals(checksumType)) {\n-            return checksumValue;\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    public static JsonObjectBuilder getChecksumTypeAndValue(DataFile.ChecksumType checksumType, String checksumValue) {\n-        if (checksumType != null) {\n-            return Json.createObjectBuilder()\n-                    .add(\"type\", checksumType.toString())\n-                    .add(\"value\", checksumValue);\n-        } else {\n-            return null;\n-        }\n-    }\n-    \n-    /**\n-     * Takes a map, returns a Json object for this map.\n-     * If map is {@code null}, returns {@code null}.\n-     * @param in the map to be translated\n-     * @return a Json Builder of the map, or {@code null}.\n-     */\n-    public static JsonObjectBuilder mapToObject(Map<String,String> in) {\n-        if ( in == null ) return null;\n-        JsonObjectBuilder b = jsonObjectBuilder();\n-        in.keySet().forEach( k->b.add(k, in.get(k)) );\n-        return b;\n-    }\n+      }\n+\n+      @Override\n+      public Function<ArrayList<JsonObjectBuilder>, JsonArrayBuilder> finisher() {\n+        return (l) -> {\n+          JsonArrayBuilder bld = Json.createArrayBuilder();\n+          l.forEach(bld::add);\n+          return bld;\n+        };\n+      }\n+\n+      @Override\n+      public Set<Collector.Characteristics> characteristics() {\n+        return Collections.emptySet();\n+      }\n+    };\n+  }\n+\n+  public static String getMd5IfItExists(DataFile.ChecksumType checksumType, String checksumValue) {\n+    if (DataFile.ChecksumType.MD5.equals(checksumType)) {\n+      return checksumValue;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static JsonObjectBuilder getChecksumTypeAndValue(DataFile.ChecksumType checksumType, String checksumValue) {\n+    if (checksumType != null) {\n+      return Json.createObjectBuilder()\n+        .add(\"type\", checksumType.toString())\n+        .add(\"value\", checksumValue);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * Takes a map, returns a Json object for this map.\n+   * If map is {@code null}, returns {@code null}.\n+   *\n+   * @param in the map to be translated\n+   * @return a Json Builder of the map, or {@code null}.\n+   */\n+  public static JsonObjectBuilder mapToObject(Map<String, String> in) {\n+    if (in == null) {\n+      return null;\n+    }\n+    JsonObjectBuilder b = jsonObjectBuilder();\n+    in.keySet().forEach(k -> b.add(k, in.get(k)));\n+    return b;\n+  }\n }\n",
            "diff_size": 830
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/65/JsonPrinter.java\nindex 4302d932f3c..3ba32acc9b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/65/JsonPrinter.java\n@@ -279,7 +279,7 @@ public class JsonPrinter {\n             bld.add(\"theme\", JsonPrinter.json(dv.getDataverseTheme()));\n         }\n         if(dv.getStorageDriverId() != null) {\n-        \tbld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n+        bld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n         }\n \n         return bld;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/65/JsonPrinter.java\nindex 4302d932f3c..092cad30795 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/65/JsonPrinter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/65/JsonPrinter.java\n@@ -279,7 +279,7 @@ public class JsonPrinter {\n             bld.add(\"theme\", JsonPrinter.json(dv.getDataverseTheme()));\n         }\n         if(dv.getStorageDriverId() != null) {\n-        \tbld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n+            bld.add(\"storageDriverLabel\", DataAccess.getStorageDriverLabelFor(dv.getStorageDriverId()));\n         }\n \n         return bld;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}