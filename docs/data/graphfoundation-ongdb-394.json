{
    "project_name": "graphfoundation-ongdb",
    "error_id": "394",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/394/RoleRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/394/RoleRepository.java\nindex 3e986d08cc0..6ccdc854d2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/394/RoleRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/394/RoleRepository.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.enterprise.auth;\n \n import java.io.IOException;\n@@ -35,77 +36,80 @@ import org.neo4j.server.security.auth.exception.ConcurrentModificationException;\n  */\n public interface RoleRepository extends Lifecycle\n {\n-    RoleRecord getRoleByName( String roleName );\n-\n-    Set<String> getRoleNamesByUsername( String username );\n-\n-    /**\n-     * Clears all cached role data.\n-     */\n-    void clear();\n-\n-    /**\n-     * Create a role, given that the roles token is unique.\n-     *\n-     * @param role the new role object\n-     * @throws InvalidArgumentsException if the role name is not valid or the role name already exists\n-     */\n-    void create( RoleRecord role ) throws InvalidArgumentsException, IOException;\n-\n-    /**\n-     * Replaces the roles in the repository with the given roles.\n-     * @param roles the new roles\n-     * @throws InvalidArgumentsException if any role name is not valid\n-     * @throws IOException if the underlying storage for roles fails\n-     */\n-    void setRoles( ListSnapshot<RoleRecord> roles ) throws InvalidArgumentsException;\n-\n-    /**\n-     * Update a role, given that the role token is unique.\n-     *\n-     * @param existingRole the existing role object, which must match the current state in this repository\n-     * @param updatedRole the updated role object\n-     * @throws ConcurrentModificationException if the existingRole does not match the current state in the repository\n-     */\n-    void update( RoleRecord existingRole, RoleRecord updatedRole )\n-            throws ConcurrentModificationException, IOException;\n-\n-    /**\n-     * Deletes a role.\n-     *\n-     * @param role the role to delete\n-     * @return true if the role was found and deleted\n-     */\n-    boolean delete( RoleRecord role ) throws IOException;\n-\n-    int numberOfRoles();\n-\n-    /**\n-     * Asserts whether the given role name is valid or not. A valid role name is non-null, non-empty, and contains\n-     * only simple ascii characters.\n-     * @param roleName the role name to be tested.\n-     * @throws InvalidArgumentsException if the role name was invalid.\n-     */\n-    void assertValidRoleName( String roleName ) throws InvalidArgumentsException;\n-\n-    void removeUserFromAllRoles( String username )\n-            throws ConcurrentModificationException, IOException;\n-\n-    Set<String> getAllRoleNames();\n-\n-    /**\n-     * Returns a snapshot of the current persisted role repository\n-     * @return a snapshot of the current persisted role repository\n-     * @throws IOException\n-     */\n-    ListSnapshot<RoleRecord> getPersistedSnapshot() throws IOException;\n-\n-    static boolean validate( List<User> users, List<RoleRecord> roles )\n-    {\n-        Set<String> usernamesInRoles = roles.stream()\n-                .flatMap( rr -> rr.users().stream() )\n-                .collect( Collectors.toSet() );\n-        Set<String> usernameInUsers = users.stream().map( User::name ).collect( Collectors.toSet() );\n-        return usernameInUsers.containsAll( usernamesInRoles );\n-    }\n+  RoleRecord getRoleByName(String roleName);\n+\n+  Set<String> getRoleNamesByUsername(String username);\n+\n+  /**\n+   * Clears all cached role data.\n+   */\n+  void clear();\n+\n+  /**\n+   * Create a role, given that the roles token is unique.\n+   *\n+   * @param role the new role object\n+   * @throws InvalidArgumentsException if the role name is not valid or the role name already exists\n+   */\n+  void create(RoleRecord role) throws InvalidArgumentsException, IOException;\n+\n+  /**\n+   * Replaces the roles in the repository with the given roles.\n+   *\n+   * @param roles the new roles\n+   * @throws InvalidArgumentsException if any role name is not valid\n+   * @throws IOException               if the underlying storage for roles fails\n+   */\n+  void setRoles(ListSnapshot<RoleRecord> roles) throws InvalidArgumentsException;\n+\n+  /**\n+   * Update a role, given that the role token is unique.\n+   *\n+   * @param existingRole the existing role object, which must match the current state in this repository\n+   * @param updatedRole  the updated role object\n+   * @throws ConcurrentModificationException if the existingRole does not match the current state in the repository\n+   */\n+  void update(RoleRecord existingRole, RoleRecord updatedRole)\n+      throws ConcurrentModificationException, IOException;\n+\n+  /**\n+   * Deletes a role.\n+   *\n+   * @param role the role to delete\n+   * @return true if the role was found and deleted\n+   */\n+  boolean delete(RoleRecord role) throws IOException;\n+\n+  int numberOfRoles();\n+\n+  /**\n+   * Asserts whether the given role name is valid or not. A valid role name is non-null, non-empty, and contains\n+   * only simple ascii characters.\n+   *\n+   * @param roleName the role name to be tested.\n+   * @throws InvalidArgumentsException if the role name was invalid.\n+   */\n+  void assertValidRoleName(String roleName) throws InvalidArgumentsException;\n+\n+  void removeUserFromAllRoles(String username)\n+      throws ConcurrentModificationException, IOException;\n+\n+  Set<String> getAllRoleNames();\n+\n+  /**\n+   * Returns a snapshot of the current persisted role repository\n+   *\n+   * @return a snapshot of the current persisted role repository\n+   * @throws IOException\n+   */\n+  ListSnapshot<RoleRecord> getPersistedSnapshot() throws IOException;\n+\n+  static boolean validate(List<User> users, List<RoleRecord> roles)\n+  {\n+    Set<String> usernamesInRoles = roles.stream()\n+        .flatMap(rr -> rr.users().stream())\n+        .collect(Collectors.toSet());\n+    Set<String> usernameInUsers = users.stream().map(User::name).collect(Collectors.toSet());\n+    return usernameInUsers.containsAll(usernamesInRoles);\n+  }\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/394/RoleRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/394/RoleRepository.java\nindex 3e986d08cc0..3229577805f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/394/RoleRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/394/RoleRepository.java\n@@ -67,10 +67,9 @@ public interface RoleRepository extends Lifecycle\n      * @param updatedRole the updated role object\n      * @throws ConcurrentModificationException if the existingRole does not match the current state in the repository\n      */\n-    void update( RoleRecord existingRole, RoleRecord updatedRole )\n-            throws ConcurrentModificationException, IOException;\n+    void update( RoleRecord existingRole, RoleRecord updatedRole ) throws ConcurrentModificationException, IOException;\n \n-    /**\n+/**\n      * Deletes a role.\n      *\n      * @param role the role to delete\n@@ -88,10 +87,9 @@ public interface RoleRepository extends Lifecycle\n      */\n     void assertValidRoleName( String roleName ) throws InvalidArgumentsException;\n \n-    void removeUserFromAllRoles( String username )\n-            throws ConcurrentModificationException, IOException;\n+    void removeUserFromAllRoles( String username ) throws ConcurrentModificationException, IOException;\n \n-    Set<String> getAllRoleNames();\n+Set<String> getAllRoleNames();\n \n     /**\n      * Returns a snapshot of the current persisted role repository\n@@ -102,10 +100,8 @@ public interface RoleRepository extends Lifecycle\n \n     static boolean validate( List<User> users, List<RoleRecord> roles )\n     {\n-        Set<String> usernamesInRoles = roles.stream()\n-                .flatMap( rr -> rr.users().stream() )\n-                .collect( Collectors.toSet() );\n-        Set<String> usernameInUsers = users.stream().map( User::name ).collect( Collectors.toSet() );\n+        Set<String> usernamesInRoles = roles.stream().flatMap( rr -> rr.users().stream() ).collect( Collectors.toSet() );\n+Set<String> usernameInUsers = users.stream().map( User::name ).collect( Collectors.toSet() );\n         return usernameInUsers.containsAll( usernamesInRoles );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}