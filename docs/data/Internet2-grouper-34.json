{
    "project_name": "Internet2-grouper",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * style license a copy of which has been included with this distribution in\n * the LICENSE.txt file.\n * \n * Created on 03. September 2004 by Joe Walnes\n */\npackage edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/34/JDomDriver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/34/JDomDriver.java\nindex 5d28bda73aa..7d268260c33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/34/JDomDriver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/intellij/34/JDomDriver.java\n@@ -1,12 +1,12 @@\n /**\r\n  * Copyright 2014 Internet2\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *   http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n@@ -21,9 +21,10 @@\n  * The software in this package is published under the terms of the BSD\r\n  * style license a copy of which has been included with this distribution in\r\n  * the LICENSE.txt file.\r\n- * \r\n+ *\r\n  * Created on 03. September 2004 by Joe Walnes\r\n  */\r\n+\r\n package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml;\r\n \r\n import java.io.IOException;\r\n@@ -46,48 +47,48 @@ import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.Str\n  */\r\n public class JDomDriver extends AbstractXmlDriver {\r\n \r\n-    public JDomDriver() {\r\n-        super(new XmlFriendlyReplacer());\r\n-    }\r\n+  public JDomDriver() {\r\n+    super(new XmlFriendlyReplacer());\r\n+  }\r\n \r\n-    /**\r\n-     * @since 1.2\r\n-     */\r\n-    public JDomDriver(XmlFriendlyReplacer replacer) {\r\n-        super(replacer);\r\n-    }\r\n+  /**\r\n+   * @since 1.2\r\n+   */\r\n+  public JDomDriver(XmlFriendlyReplacer replacer) {\r\n+    super(replacer);\r\n+  }\r\n \r\n-    public HierarchicalStreamReader createReader(Reader reader) {\r\n-        try {\r\n-            SAXBuilder builder = new SAXBuilder();\r\n-            Document document = builder.build(reader);\r\n-            return new JDomReader(document, xmlFriendlyReplacer());\r\n-        } catch (IOException e) {\r\n-            throw new StreamException(e);\r\n-        } catch (JDOMException e) {\r\n-            throw new StreamException(e);\r\n-        }\r\n+  public HierarchicalStreamReader createReader(Reader reader) {\r\n+    try {\r\n+      SAXBuilder builder = new SAXBuilder();\r\n+      Document document = builder.build(reader);\r\n+      return new JDomReader(document, xmlFriendlyReplacer());\r\n+    } catch (IOException e) {\r\n+      throw new StreamException(e);\r\n+    } catch (JDOMException e) {\r\n+      throw new StreamException(e);\r\n     }\r\n+  }\r\n \r\n-    public HierarchicalStreamReader createReader(InputStream in) {\r\n-        try {\r\n-            SAXBuilder builder = new SAXBuilder();\r\n-            Document document = builder.build(in);\r\n-            return new JDomReader(document, xmlFriendlyReplacer());\r\n-        } catch (IOException e) {\r\n-            throw new StreamException(e);\r\n-        } catch (JDOMException e) {\r\n-            throw new StreamException(e);\r\n-        }\r\n+  public HierarchicalStreamReader createReader(InputStream in) {\r\n+    try {\r\n+      SAXBuilder builder = new SAXBuilder();\r\n+      Document document = builder.build(in);\r\n+      return new JDomReader(document, xmlFriendlyReplacer());\r\n+    } catch (IOException e) {\r\n+      throw new StreamException(e);\r\n+    } catch (JDOMException e) {\r\n+      throw new StreamException(e);\r\n     }\r\n+  }\r\n \r\n-    public HierarchicalStreamWriter createWriter(Writer out) {\r\n-        return new PrettyPrintWriter(out, xmlFriendlyReplacer());\r\n-    }\r\n+  public HierarchicalStreamWriter createWriter(Writer out) {\r\n+    return new PrettyPrintWriter(out, xmlFriendlyReplacer());\r\n+  }\r\n \r\n-    public HierarchicalStreamWriter createWriter(OutputStream out) {\r\n-        return new PrettyPrintWriter(new OutputStreamWriter(out));\r\n-    }\r\n+  public HierarchicalStreamWriter createWriter(OutputStream out) {\r\n+    return new PrettyPrintWriter(new OutputStreamWriter(out));\r\n+  }\r\n \r\n }\r\n \r\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/34/JDomDriver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/34/JDomDriver.java\nindex 5d28bda73aa..c9f7d992024 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/34/JDomDriver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/naturalize/34/JDomDriver.java\n@@ -44,9 +44,8 @@ import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.Str\n /**\r\n  * @author Laurent Bihanic\r\n  */\r\n-public class JDomDriver extends AbstractXmlDriver {\r\n-\r\n-    public JDomDriver() {\r\n+public class JDomDriver extends AbstractXmlDriver {\n+  public JDomDriver() {\r\n         super(new XmlFriendlyReplacer());\r\n     }\r\n \r\n@@ -87,7 +86,5 @@ public class JDomDriver extends AbstractXmlDriver {\n \r\n     public HierarchicalStreamWriter createWriter(OutputStream out) {\r\n         return new PrettyPrintWriter(new OutputStreamWriter(out));\r\n-    }\r\n-\r\n-}\r\n-\r\n+    }\n+  }\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/34/JDomDriver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/34/JDomDriver.java\nindex 5d28bda73aa..341cd569d8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/errored/1/34/JDomDriver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Internet2-grouper/codebuff/34/JDomDriver.java\n@@ -24,70 +24,74 @@\n  * \r\n  * Created on 03. September 2004 by Joe Walnes\r\n  */\r\n-package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml;\r\n-\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.io.OutputStream;\r\n-import java.io.OutputStreamWriter;\r\n-import java.io.Reader;\r\n-import java.io.Writer;\r\n-\r\n-import org.jdom.Document;\r\n-import org.jdom.JDOMException;\r\n-import org.jdom.input.SAXBuilder;\r\n-\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\r\n-import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\r\n+package edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.xml;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.Reader;\n+import java.io.Writer;\n+import org.jdom.Document;\n+import org.jdom.JDOMException;\n+import org.jdom.input.SAXBuilder;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamReader;\n+import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n import edu.internet2.middleware.grouperClientExt.com.thoughtworks.xstream.io.StreamException;\r\n \r\n /**\r\n  * @author Laurent Bihanic\r\n- */\r\n-public class JDomDriver extends AbstractXmlDriver {\r\n-\r\n-    public JDomDriver() {\r\n-        super(new XmlFriendlyReplacer());\r\n+ */\n+\n+\n+public class JDomDriver extends AbstractXmlDriver {\n+    public JDomDriver() {\n+    super(new XmlFriendlyReplacer());\n     }\r\n \r\n     /**\r\n      * @since 1.2\r\n-     */\r\n-    public JDomDriver(XmlFriendlyReplacer replacer) {\r\n-        super(replacer);\r\n-    }\r\n-\r\n-    public HierarchicalStreamReader createReader(Reader reader) {\r\n-        try {\r\n-            SAXBuilder builder = new SAXBuilder();\r\n-            Document document = builder.build(reader);\r\n-            return new JDomReader(document, xmlFriendlyReplacer());\r\n-        } catch (IOException e) {\r\n-            throw new StreamException(e);\r\n-        } catch (JDOMException e) {\r\n-            throw new StreamException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public HierarchicalStreamReader createReader(InputStream in) {\r\n-        try {\r\n-            SAXBuilder builder = new SAXBuilder();\r\n-            Document document = builder.build(in);\r\n-            return new JDomReader(document, xmlFriendlyReplacer());\r\n-        } catch (IOException e) {\r\n-            throw new StreamException(e);\r\n-        } catch (JDOMException e) {\r\n-            throw new StreamException(e);\r\n-        }\r\n-    }\r\n-\r\n-    public HierarchicalStreamWriter createWriter(Writer out) {\r\n-        return new PrettyPrintWriter(out, xmlFriendlyReplacer());\r\n-    }\r\n-\r\n-    public HierarchicalStreamWriter createWriter(OutputStream out) {\r\n-        return new PrettyPrintWriter(new OutputStreamWriter(out));\r\n-    }\r\n-\r\n-}\r\n-\r\n+     */\n+\n+    public JDomDriver(XmlFriendlyReplacer replacer) {\n+    super(replacer);\n+    }\n+\n+\n+\n+    public HierarchicalStreamReader createReader(Reader reader) {\n+        try {\n+            SAXBuilder builder = new SAXBuilder();\n+            Document document = builder.build(reader);\n+            return new JDomReader(document, xmlFriendlyReplacer());\n+        } catch (IOException e) {\n+            throw new StreamException(e);\n+        } catch (JDOMException e) {\n+            throw new StreamException(e);\n+        }\n+    }\n+\n+\n+    public HierarchicalStreamReader createReader(InputStream in) {\n+        try {\n+            SAXBuilder builder = new SAXBuilder();\n+            Document document = builder.build(in);\n+            return new JDomReader(document, xmlFriendlyReplacer());\n+        } catch (IOException e) {\n+            throw new StreamException(e);\n+        } catch (JDOMException e) {\n+            throw new StreamException(e);\n+        }\n+    }\n+\n+\n+    public HierarchicalStreamWriter createWriter(Writer out) {\n+        return new PrettyPrintWriter(out, xmlFriendlyReplacer());\n+    }\n+\n+\n+    public HierarchicalStreamWriter createWriter(OutputStream out) {\n+        return new PrettyPrintWriter(new OutputStreamWriter(out));\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}