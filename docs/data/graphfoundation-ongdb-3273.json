{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3273",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3273/StateTransitionLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3273/StateTransitionLogger.java\nindex 5d0810495a8..436638a6567 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3273/StateTransitionLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3273/StateTransitionLogger.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.statemachine;\n \n import org.neo4j.cluster.protocol.atomicbroadcast.AtomicBroadcastSerializer;\n@@ -34,80 +35,81 @@ import static org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId.I\n  * Logs state transitions in {@link StateMachine}s. Use this for debugging mainly.\n  */\n public class StateTransitionLogger\n-        implements StateTransitionListener\n+    implements StateTransitionListener\n {\n-    private final LogProvider logProvider;\n-    private AtomicBroadcastSerializer atomicBroadcastSerializer;\n+  private final LogProvider logProvider;\n+  private AtomicBroadcastSerializer atomicBroadcastSerializer;\n \n-    /** Throttle so don't flood occurrences of the same message over and over */\n-    private String lastLogMessage = \"\";\n+  /**\n+   * Throttle so don't flood occurrences of the same message over and over\n+   */\n+  private String lastLogMessage = \"\";\n \n-    public StateTransitionLogger( LogProvider logProvider, AtomicBroadcastSerializer atomicBroadcastSerializer )\n-    {\n-        this.logProvider = logProvider;\n-        this.atomicBroadcastSerializer = atomicBroadcastSerializer;\n-    }\n+  public StateTransitionLogger(LogProvider logProvider, AtomicBroadcastSerializer atomicBroadcastSerializer)\n+  {\n+    this.logProvider = logProvider;\n+    this.atomicBroadcastSerializer = atomicBroadcastSerializer;\n+  }\n \n-    @Override\n-    public void stateTransition( StateTransition transition )\n+  @Override\n+  public void stateTransition(StateTransition transition)\n+  {\n+    Log log = logProvider.getLog(transition.getOldState().getClass());\n+\n+    if (log.isDebugEnabled())\n     {\n-        Log log = logProvider.getLog( transition.getOldState().getClass() );\n+      if (transition.getOldState() == HeartbeatState.heartbeat)\n+      {\n+        return;\n+      }\n+\n+      // The bulk of the message\n+      String state = transition.getOldState().getClass().getSuperclass().getSimpleName();\n+      StringBuilder line = new StringBuilder(state).append(\": \").append(transition);\n+\n+      // Who was this message from?\n+      if (transition.getMessage().hasHeader(HEADER_FROM))\n+      {\n+        line.append(\" from:\").append(transition.getMessage().getHeader(HEADER_FROM));\n+      }\n \n-        if ( log.isDebugEnabled() )\n+      if (transition.getMessage().hasHeader(INSTANCE))\n+      {\n+        line.append(\" instance:\").append(transition.getMessage().getHeader(INSTANCE));\n+      }\n+\n+      if (transition.getMessage().hasHeader(HEADER_CONVERSATION_ID))\n+      {\n+        line.append(\" conversation-id:\").append(transition.getMessage().getHeader(HEADER_CONVERSATION_ID));\n+      }\n+\n+      Object payload = transition.getMessage().getPayload();\n+      if (payload != null)\n+      {\n+        if (payload instanceof Payload)\n         {\n-            if ( transition.getOldState() == HeartbeatState.heartbeat )\n-            {\n-                return;\n-            }\n-\n-            // The bulk of the message\n-            String state = transition.getOldState().getClass().getSuperclass().getSimpleName();\n-            StringBuilder line = new StringBuilder( state ).append( \": \" ).append( transition );\n-\n-            // Who was this message from?\n-            if ( transition.getMessage().hasHeader( HEADER_FROM ) )\n-            {\n-                line.append( \" from:\" ).append( transition.getMessage().getHeader( HEADER_FROM ) );\n-            }\n-\n-            if ( transition.getMessage().hasHeader( INSTANCE ) )\n-            {\n-                line.append( \" instance:\" ).append( transition.getMessage().getHeader( INSTANCE ) );\n-            }\n-\n-            if ( transition.getMessage().hasHeader( HEADER_CONVERSATION_ID ) )\n-            {\n-                line.append( \" conversation-id:\" ).append( transition.getMessage().getHeader( HEADER_CONVERSATION_ID ) );\n-            }\n-\n-            Object payload = transition.getMessage().getPayload();\n-            if ( payload != null )\n-            {\n-                if ( payload instanceof Payload )\n-                {\n-                    try\n-                    {\n-                        payload = atomicBroadcastSerializer.receive( (Payload) payload );\n-                    }\n-                    catch ( Throwable e )\n-                    {\n-                        // Ignore\n-                    }\n-                }\n-\n-                line.append( \" payload:\" ).append( Strings.prettyPrint( payload ) );\n-            }\n-\n-            // Throttle\n-            String msg = line.toString();\n-            if ( msg.equals( lastLogMessage ) )\n-            {\n-                return;\n-            }\n-\n-            // Log it\n-            log.debug( line.toString() );\n-            lastLogMessage = msg;\n+          try\n+          {\n+            payload = atomicBroadcastSerializer.receive((Payload) payload);\n+          } catch (Throwable e)\n+          {\n+            // Ignore\n+          }\n         }\n+\n+        line.append(\" payload:\").append(Strings.prettyPrint(payload));\n+      }\n+\n+      // Throttle\n+      String msg = line.toString();\n+      if (msg.equals(lastLogMessage))\n+      {\n+        return;\n+      }\n+\n+      // Log it\n+      log.debug(line.toString());\n+      lastLogMessage = msg;\n     }\n+  }\n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3273/StateTransitionLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3273/StateTransitionLogger.java\nindex 5d0810495a8..fdb2cdbb952 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3273/StateTransitionLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3273/StateTransitionLogger.java\n@@ -33,8 +33,7 @@ import static org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.InstanceId.I\n /**\n  * Logs state transitions in {@link StateMachine}s. Use this for debugging mainly.\n  */\n-public class StateTransitionLogger\n-        implements StateTransitionListener\n+public class StateTransitionLogger implements StateTransitionListener\n {\n     private final LogProvider logProvider;\n     private AtomicBroadcastSerializer atomicBroadcastSerializer;\n@@ -52,8 +51,7 @@ public class StateTransitionLogger\n     public void stateTransition( StateTransition transition )\n     {\n         Log log = logProvider.getLog( transition.getOldState().getClass() );\n-\n-        if ( log.isDebugEnabled() )\n+if ( log.isDebugEnabled() )\n         {\n             if ( transition.getOldState() == HeartbeatState.heartbeat )\n             {\n@@ -110,4 +108,4 @@ public class StateTransitionLogger\n             lastLogMessage = msg;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}