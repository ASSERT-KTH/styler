{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3086",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "213",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3086/MetadataCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3086/MetadataCollector.java\nindex e7c143dde37..df6b326227e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3086/MetadataCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3086/MetadataCollector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.kvstore;\n \n import java.util.Arrays;\n@@ -28,230 +29,226 @@ import static java.util.Objects.requireNonNull;\n \n abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEndianByteArrayBuffer>\n {\n-    private static final byte[] NO_DATA = new byte[0];\n-    private final int entriesPerPage;\n-    private final HeaderField<?>[] headerFields;\n-    private final Map<HeaderField<?>, Integer> headerIndexes = new HashMap<>();\n-    private final Object[] headerValues;\n-    private int header;\n-    private int data;\n-    private State state = State.expecting_format_specifier;\n-    private byte[] catalogue = NO_DATA;\n-    private final ReadableBuffer expectedFormat;\n-\n-    MetadataCollector( int entriesPerPage, HeaderField<?>[] headerFields, ReadableBuffer expectedFormat )\n-    {\n-        this.entriesPerPage = entriesPerPage;\n-        this.headerFields = headerFields = headerFields.clone();\n-        this.expectedFormat = expectedFormat;\n-        this.headerValues = new Object[headerFields.length];\n-        for ( int i = 0; i < headerFields.length; i++ )\n-        {\n-            headerIndexes.put( requireNonNull( headerFields[i], \"header field\" ), i );\n-        }\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"MetadataCollector[\" + state + \"]\";\n-    }\n-\n-    @Override\n-    public Headers headers()\n-    {\n-        return Headers.indexedHeaders( headerIndexes, headerValues.clone() );\n-    }\n-\n-    @Override\n-    public final boolean visit( BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n-    {\n-        return state.visit( this, key, value );\n-    }\n-\n-    private void readHeader( int offset, BigEndianByteArrayBuffer value )\n-    {\n-        headerValues[offset] = headerFields[offset].read( value );\n-    }\n-\n-    private void readData( BigEndianByteArrayBuffer key )\n-    {\n-        if ( ((header + data) % entriesPerPage) == 1 || data == 1 )\n-        { // first entry in (a new) page, extend the catalogue\n-            int oldLen = catalogue.length;\n-            catalogue = Arrays.copyOf( catalogue, oldLen + 2 * key.size() );\n-            key.dataTo( catalogue, oldLen ); // write the first key of the page into the catalogue\n-        }\n-        // always update the catalogue with the last entry (seen) for the page\n-        key.dataTo( catalogue, catalogue.length - key.size() );\n-    }\n-\n-    abstract boolean verifyFormatSpecifier( ReadableBuffer value );\n-\n-    ReadableBuffer expectedFormat()\n-    {\n-        return expectedFormat;\n-    }\n-\n-    @Override\n-    byte[] pageCatalogue()\n-    {\n-        return catalogue;\n-    }\n-\n-    @Override\n-    int headerEntries()\n+  private static final byte[] NO_DATA = new byte[0];\n+  private final int entriesPerPage;\n+  private final HeaderField<?>[] headerFields;\n+  private final Map<HeaderField<?>, Integer> headerIndexes = new HashMap<>();\n+  private final Object[] headerValues;\n+  private int header;\n+  private int data;\n+  private State state = State.expecting_format_specifier;\n+  private byte[] catalogue = NO_DATA;\n+  private final ReadableBuffer expectedFormat;\n+\n+  MetadataCollector(int entriesPerPage, HeaderField<?>[] headerFields, ReadableBuffer expectedFormat)\n+  {\n+    this.entriesPerPage = entriesPerPage;\n+    this.headerFields = headerFields = headerFields.clone();\n+    this.expectedFormat = expectedFormat;\n+    this.headerValues = new Object[headerFields.length];\n+    for (int i = 0; i < headerFields.length; i++)\n     {\n-        return header;\n+      headerIndexes.put(requireNonNull(headerFields[i], \"header field\"), i);\n     }\n-\n-    @Override\n-    int totalEntries()\n-    {\n-        return header + data;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"MetadataCollector[\" + state + \"]\";\n+  }\n+\n+  @Override\n+  public Headers headers()\n+  {\n+    return Headers.indexedHeaders(headerIndexes, headerValues.clone());\n+  }\n+\n+  @Override\n+  public final boolean visit(BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+  {\n+    return state.visit(this, key, value);\n+  }\n+\n+  private void readHeader(int offset, BigEndianByteArrayBuffer value)\n+  {\n+    headerValues[offset] = headerFields[offset].read(value);\n+  }\n+\n+  private void readData(BigEndianByteArrayBuffer key)\n+  {\n+    if (((header + data) % entriesPerPage) == 1 || data == 1)\n+    { // first entry in (a new) page, extend the catalogue\n+      int oldLen = catalogue.length;\n+      catalogue = Arrays.copyOf(catalogue, oldLen + 2 * key.size());\n+      key.dataTo(catalogue, oldLen); // write the first key of the page into the catalogue\n     }\n-\n-    private enum State\n-    {\n-        expecting_format_specifier\n+    // always update the catalogue with the last entry (seen) for the page\n+    key.dataTo(catalogue, catalogue.length - key.size());\n+  }\n+\n+  abstract boolean verifyFormatSpecifier(ReadableBuffer value);\n+\n+  ReadableBuffer expectedFormat()\n+  {\n+    return expectedFormat;\n+  }\n+\n+  @Override\n+  byte[] pageCatalogue()\n+  {\n+    return catalogue;\n+  }\n+\n+  @Override\n+  int headerEntries()\n+  {\n+    return header;\n+  }\n+\n+  @Override\n+  int totalEntries()\n+  {\n+    return header + data;\n+  }\n+\n+  private enum State\n+  {\n+    expecting_format_specifier\n         {\n-            @Override\n-            boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n-            {\n-                return readFormatSpecifier( collector, key, value );\n-            }\n+          @Override\n+          boolean visit(MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+          {\n+            return readFormatSpecifier(collector, key, value);\n+          }\n         },\n-        expecting_header\n+    expecting_header\n         {\n-            @Override\n-            boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n+          @Override\n+          boolean visit(MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+          {\n+            if (!key.allZeroes())\n             {\n-                if ( !key.allZeroes() )\n-                {\n-                    throw new IllegalStateException(\n-                            \"Expecting at least one header after the format specifier.\" );\n-                }\n-                if ( value.allZeroes() )\n-                {\n-                    int header = ++collector.header;\n-                    assert header == 2\n-                            : \"End-of-header markers are always the second header after the format specifier.\";\n-                    if ( collector.headerFields.length > 0 )\n-                    {\n-                        throw new IllegalStateException( \"Expected \" + collector.headerFields.length +\n-                                                         \" header fields, none seen.\" );\n-                    }\n-                    collector.state = reading_data;\n-                    return true;\n-                }\n-                else\n-                {\n-                    return (collector.state = reading_header).visit( collector, key, value );\n-                }\n+              throw new IllegalStateException(\n+                  \"Expecting at least one header after the format specifier.\");\n             }\n-        },\n-        reading_header\n-        {\n-            @Override\n-            boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n+            if (value.allZeroes())\n+            {\n+              int header = ++collector.header;\n+              assert header == 2\n+                  : \"End-of-header markers are always the second header after the format specifier.\";\n+              if (collector.headerFields.length > 0)\n+              {\n+                throw new IllegalStateException(\"Expected \" + collector.headerFields.length +\n+                    \" header fields, none seen.\");\n+              }\n+              collector.state = reading_data;\n+              return true;\n+            } else\n             {\n-                if ( key.allZeroes() )\n-                {\n-                    if ( value.minusOneAtTheEnd() )\n-                    {\n-                        collector.state = done;\n-                        return false;\n-                    }\n-                    if ( collector.header > collector.headerFields.length )\n-                    {\n-                        throw new IllegalStateException( \"Too many header fields, expected only \"\n-                                                         + collector.headerFields.length );\n-                    }\n-                    int header = collector.header - 1;\n-                    collector.header++;\n-                    collector.readHeader( header, value );\n-                    return true;\n-                }\n-                else\n-                {\n-                    if ( collector.headerFields.length >= collector.header )\n-                    {\n-                        throw new IllegalStateException( \"Expected \" + collector.headerFields.length +\n-                                                         \" header fields, only \" + (collector.header - 1) + \" seen.\" );\n-                    }\n-                    return (collector.state = reading_data).visit( collector, key, value );\n-                }\n+              return (collector.state = reading_header).visit(collector, key, value);\n             }\n+          }\n         },\n-        reading_data\n+    reading_header\n         {\n-            @Override\n-            boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n+          @Override\n+          boolean visit(MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+          {\n+            if (key.allZeroes())\n             {\n-                if ( key.allZeroes() )\n-                {\n-                    long encodedEntries = value.getIntegerFromEnd();\n-                    long entries = encodedEntries == -1 ? 0 : encodedEntries;\n-                    if ( entries != collector.data )\n-                    {\n-                        collector.state = in_error;\n-                        throw new IllegalStateException( \"Number of data entries does not match. (counted=\" +\n-                                                         collector.data + \", trailer=\" + entries + \")\" );\n-                    }\n-                    collector.state = done;\n-                    return false;\n-                }\n-                else\n-                {\n-                    collector.data++;\n-                    collector.readData( key );\n-                    return true;\n-                }\n+              if (value.minusOneAtTheEnd())\n+              {\n+                collector.state = done;\n+                return false;\n+              }\n+              if (collector.header > collector.headerFields.length)\n+              {\n+                throw new IllegalStateException(\"Too many header fields, expected only \"\n+                    + collector.headerFields.length);\n+              }\n+              int header = collector.header - 1;\n+              collector.header++;\n+              collector.readHeader(header, value);\n+              return true;\n+            } else\n+            {\n+              if (collector.headerFields.length >= collector.header)\n+              {\n+                throw new IllegalStateException(\"Expected \" + collector.headerFields.length +\n+                    \" header fields, only \" + (collector.header - 1) + \" seen.\");\n+              }\n+              return (collector.state = reading_data).visit(collector, key, value);\n             }\n+          }\n         },\n-        done\n+    reading_data\n         {\n-            @Override\n-            boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n+          @Override\n+          boolean visit(MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+          {\n+            if (key.allZeroes())\n             {\n-                throw new IllegalStateException( \"Metadata collection has completed.\" );\n+              long encodedEntries = value.getIntegerFromEnd();\n+              long entries = encodedEntries == -1 ? 0 : encodedEntries;\n+              if (entries != collector.data)\n+              {\n+                collector.state = in_error;\n+                throw new IllegalStateException(\"Number of data entries does not match. (counted=\" +\n+                    collector.data + \", trailer=\" + entries + \")\");\n+              }\n+              collector.state = done;\n+              return false;\n+            } else\n+            {\n+              collector.data++;\n+              collector.readData(key);\n+              return true;\n             }\n+          }\n         },\n-        in_error\n+    done\n         {\n-            @Override\n-            boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n-            {\n-                throw new IllegalStateException( \"Metadata collection has failed.\" );\n-            }\n+          @Override\n+          boolean visit(MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+          {\n+            throw new IllegalStateException(\"Metadata collection has completed.\");\n+          }\n+        },\n+    in_error\n+        {\n+          @Override\n+          boolean visit(MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+          {\n+            throw new IllegalStateException(\"Metadata collection has failed.\");\n+          }\n         };\n \n-        abstract boolean visit( MetadataCollector collector,\n-                BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value );\n-\n-        private static boolean readFormatSpecifier( MetadataCollector collector,\n-                BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n-        {\n-            if ( !key.allZeroes() )\n-            {\n-                throw new IllegalStateException( \"Expecting a valid format specifier.\" );\n-            }\n-            if ( !collector.verifyFormatSpecifier( value ) )\n-            {\n-                collector.state = in_error;\n-                throw new IllegalStateException( format( \"Format header/trailer has changed. \" +\n-                        \"Expected format:`%s`, actual:`%s`.\", collector.expectedFormat(), value) );\n-            }\n+    abstract boolean visit(MetadataCollector collector,\n+                           BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value);\n \n-            try\n-            {\n-                collector.header = 1;\n-                return true;\n-            }\n-            finally\n-            {\n-                collector.state = expecting_header;\n-            }\n-        }\n+    private static boolean readFormatSpecifier(MetadataCollector collector,\n+                                               BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value)\n+    {\n+      if (!key.allZeroes())\n+      {\n+        throw new IllegalStateException(\"Expecting a valid format specifier.\");\n+      }\n+      if (!collector.verifyFormatSpecifier(value))\n+      {\n+        collector.state = in_error;\n+        throw new IllegalStateException(format(\"Format header/trailer has changed. \" +\n+            \"Expected format:`%s`, actual:`%s`.\", collector.expectedFormat(), value));\n+      }\n+\n+      try\n+      {\n+        collector.header = 1;\n+        return true;\n+      } finally\n+      {\n+        collector.state = expecting_header;\n+      }\n     }\n+  }\n }\n",
            "diff_size": 313
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "136",
                    "column": "35",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "161",
                    "column": "22",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3086/MetadataCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3086/MetadataCollector.java\nindex e7c143dde37..3778f6f5cb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3086/MetadataCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3086/MetadataCollector.java\n@@ -87,8 +87,7 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n     }\n \n     abstract boolean verifyFormatSpecifier( ReadableBuffer value );\n-\n-    ReadableBuffer expectedFormat()\n+ReadableBuffer expectedFormat()\n     {\n         return expectedFormat;\n     }\n@@ -120,27 +119,24 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n             {\n                 return readFormatSpecifier( collector, key, value );\n             }\n-        },\n-        expecting_header\n+        }, expecting_header\n         {\n             @Override\n             boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n             {\n                 if ( !key.allZeroes() )\n                 {\n-                    throw new IllegalStateException(\n-                            \"Expecting at least one header after the format specifier.\" );\n+                    throw new IllegalStateException( \"Expecting at least one header after the format specifier.\" );\n                 }\n-                if ( value.allZeroes() )\n+\n+if ( value.allZeroes() )\n                 {\n                     int header = ++collector.header;\n-                    assert header == 2\n-                            : \"End-of-header markers are always the second header after the format specifier.\";\n-                    if ( collector.headerFields.length > 0 )\n+                    assert header == 2 : \"End-of-header markers are always the second header after the format specifier.\";\n+if ( collector.headerFields.length> 0 )\n                     {\n-                        throw new IllegalStateException( \"Expected \" + collector.headerFields.length +\n-                                                         \" header fields, none seen.\" );\n-                    }\n+                        throw new IllegalStateException( \"Expected \" + collector.headerFields.length + \" header fields, none seen.\" );\n+    }\n                     collector.state = reading_data;\n                     return true;\n                 }\n@@ -149,8 +145,7 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n                     return (collector.state = reading_header).visit( collector, key, value );\n                 }\n             }\n-        },\n-        reading_header\n+        }, reading_header\n         {\n             @Override\n             boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n@@ -162,11 +157,11 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n                         collector.state = done;\n                         return false;\n                     }\n-                    if ( collector.header > collector.headerFields.length )\n+\n+if ( collector.header> collector.headerFields.length )\n                     {\n-                        throw new IllegalStateException( \"Too many header fields, expected only \"\n-                                                         + collector.headerFields.length );\n-                    }\n+                        throw new IllegalStateException( \"Too many header fields, expected only \" + collector.headerFields.length );\n+    }\n                     int header = collector.header - 1;\n                     collector.header++;\n                     collector.readHeader( header, value );\n@@ -176,14 +171,12 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n                 {\n                     if ( collector.headerFields.length >= collector.header )\n                     {\n-                        throw new IllegalStateException( \"Expected \" + collector.headerFields.length +\n-                                                         \" header fields, only \" + (collector.header - 1) + \" seen.\" );\n-                    }\n+                        throw new IllegalStateException( \"Expected \" + collector.headerFields.length + \" header fields, only \" + (collector.header - 1) + \" seen.\" );\n+    }\n                     return (collector.state = reading_data).visit( collector, key, value );\n                 }\n             }\n-        },\n-        reading_data\n+        }, reading_data\n         {\n             @Override\n             boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n@@ -195,9 +188,8 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n                     if ( entries != collector.data )\n                     {\n                         collector.state = in_error;\n-                        throw new IllegalStateException( \"Number of data entries does not match. (counted=\" +\n-                                                         collector.data + \", trailer=\" + entries + \")\" );\n-                    }\n+                        throw new IllegalStateException( \"Number of data entries does not match. (counted=\" + collector.data + \", trailer=\" + entries + \")\" );\n+    }\n                     collector.state = done;\n                     return false;\n                 }\n@@ -208,16 +200,14 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n                     return true;\n                 }\n             }\n-        },\n-        done\n+        }, done\n         {\n             @Override\n             boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n             {\n                 throw new IllegalStateException( \"Metadata collection has completed.\" );\n             }\n-        },\n-        in_error\n+        }, in_error\n         {\n             @Override\n             boolean visit( MetadataCollector collector, BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n@@ -229,18 +219,18 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n         abstract boolean visit( MetadataCollector collector,\n                 BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value );\n \n-        private static boolean readFormatSpecifier( MetadataCollector collector,\n+private static boolean readFormatSpecifier( MetadataCollector collector,\n                 BigEndianByteArrayBuffer key, BigEndianByteArrayBuffer value )\n         {\n             if ( !key.allZeroes() )\n             {\n                 throw new IllegalStateException( \"Expecting a valid format specifier.\" );\n             }\n-            if ( !collector.verifyFormatSpecifier( value ) )\n+\n+if ( !collector.verifyFormatSpecifier( value ) )\n             {\n                 collector.state = in_error;\n-                throw new IllegalStateException( format( \"Format header/trailer has changed. \" +\n-                        \"Expected format:`%s`, actual:`%s`.\", collector.expectedFormat(), value) );\n+                throw new IllegalStateException( format( \"Format header/trailer has changed. \" + \"Expected format:`%s`, actual:`%s`.\", collector.expectedFormat(), value) );\n             }\n \n             try\n@@ -254,4 +244,4 @@ abstract class MetadataCollector extends Metadata implements EntryVisitor<BigEnd\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}