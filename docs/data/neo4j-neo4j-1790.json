{
    "project_name": "neo4j-neo4j",
    "error_id": "1790",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1790/ByteBuffers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1790/ByteBuffers.java\nindex e680fadb882..e0142037f77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1790/ByteBuffers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1790/ByteBuffers.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.memory;\n \n import java.nio.ByteBuffer;\n@@ -36,67 +37,72 @@ public final class ByteBuffers\n \n     /**\n      * Allocate on heap byte buffer with default byte order\n-     * @param capacity byte buffer capacity\n+     *\n+     * @param capacity      byte buffer capacity\n      * @param memoryTracker underlying buffers allocation memory tracker\n      * @return byte buffer with requested size\n      */\n-    public static ByteBuffer allocate( int capacity, MemoryTracker memoryTracker )\n+    public static ByteBuffer allocate(int capacity, MemoryTracker memoryTracker)\n     {\n-        memoryTracker.allocateHeap( capacity );\n-        return ByteBuffer.allocate( capacity );\n+        memoryTracker.allocateHeap(capacity);\n+        return ByteBuffer.allocate(capacity);\n     }\n \n     /**\n      * Allocate on heap byte buffer with requested byte order\n-     * @param capacity byte buffer capacity\n-     * @param order byte buffer order\n+     *\n+     * @param capacity      byte buffer capacity\n+     * @param order         byte buffer order\n      * @param memoryTracker underlying buffers allocation memory tracker\n      * @return byte buffer with requested size\n      */\n-    public static ByteBuffer allocate( int capacity, ByteOrder order, MemoryTracker memoryTracker )\n+    public static ByteBuffer allocate(int capacity, ByteOrder order, MemoryTracker memoryTracker)\n     {\n-        memoryTracker.allocateHeap( capacity );\n-        return ByteBuffer.allocate( capacity ).order( order );\n+        memoryTracker.allocateHeap(capacity);\n+        return ByteBuffer.allocate(capacity).order(order);\n     }\n \n     /**\n      * Allocate on heap byte buffer with default byte order\n-     * @param capacity byte buffer capacity\n-     * @param capacityUnit byte buffer capacity unit\n+     *\n+     * @param capacity      byte buffer capacity\n+     * @param capacityUnit  byte buffer capacity unit\n      * @param memoryTracker underlying buffers allocation memory tracker\n      * @return byte buffer with requested size\n      */\n-    public static ByteBuffer allocate( int capacity, ByteUnit capacityUnit, MemoryTracker memoryTracker )\n+    public static ByteBuffer allocate(int capacity, ByteUnit capacityUnit, MemoryTracker memoryTracker)\n     {\n-        int bufferCapacity = toIntExact( capacityUnit.toBytes( capacity ) );\n-        memoryTracker.allocateHeap( bufferCapacity );\n-        return ByteBuffer.allocate( bufferCapacity );\n+        int bufferCapacity = toIntExact(capacityUnit.toBytes(capacity));\n+        memoryTracker.allocateHeap(bufferCapacity);\n+        return ByteBuffer.allocate(bufferCapacity);\n     }\n \n     /**\n      * Allocate direct byte buffer with default byte order\n-     *\n+     * <p>\n      * Allocated memory will be tracked by global memory allocator.\n+     *\n      * @param capacity byte buffer capacity\n      * @return byte buffer with requested size\n      */\n-    public static ByteBuffer allocateDirect( int capacity, MemoryTracker memoryTracker )\n+    public static ByteBuffer allocateDirect(int capacity, MemoryTracker memoryTracker)\n     {\n-        return UnsafeUtil.allocateByteBuffer( capacity, memoryTracker );\n+        return UnsafeUtil.allocateByteBuffer(capacity, memoryTracker);\n     }\n \n     /**\n      * Release all the memory that was allocated for the buffer in case its native.\n      * Noop for on heap buffers\n+     *\n      * @param byteBuffer byte buffer to release\n      */\n-    public static void releaseBuffer( ByteBuffer byteBuffer, MemoryTracker memoryTracker )\n+    public static void releaseBuffer(ByteBuffer byteBuffer, MemoryTracker memoryTracker)\n     {\n-        if ( !byteBuffer.isDirect() )\n+        if (!byteBuffer.isDirect())\n         {\n-            memoryTracker.releaseHeap( byteBuffer.capacity() );\n+            memoryTracker.releaseHeap(byteBuffer.capacity());\n             return;\n         }\n-        UnsafeUtil.freeByteBuffer( byteBuffer, memoryTracker );\n+        UnsafeUtil.freeByteBuffer(byteBuffer, memoryTracker);\n     }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}