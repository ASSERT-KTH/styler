{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4013",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "103",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4013/KeySearch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4013/KeySearch.java\nindex 66f6df00d43..c987c3162d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4013/KeySearch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4013/KeySearch.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.util.Comparator;\n@@ -28,140 +29,138 @@ import org.neo4j.io.pagecache.PageCursor;\n  */\n class KeySearch\n {\n-    private static final int POSITION_MASK   = 0x3FFFFFFF;\n-    private static final int HIT_FLAG        = 0x80000000;\n-    private static final int NO_HIT_FLAG     = 0x00000000;\n-    private static final int HIT_MASK        = HIT_FLAG | NO_HIT_FLAG;\n-    private static final int SUCCESS_FLAG    = 0x00000000;\n-    private static final int NO_SUCCESS_FLAG = 0x40000000;\n-    private static final int SUCCESS_MASK    = SUCCESS_FLAG | NO_SUCCESS_FLAG;\n+  private static final int POSITION_MASK = 0x3FFFFFFF;\n+  private static final int HIT_FLAG = 0x80000000;\n+  private static final int NO_HIT_FLAG = 0x00000000;\n+  private static final int HIT_MASK = HIT_FLAG | NO_HIT_FLAG;\n+  private static final int SUCCESS_FLAG = 0x00000000;\n+  private static final int NO_SUCCESS_FLAG = 0x40000000;\n+  private static final int SUCCESS_MASK = SUCCESS_FLAG | NO_SUCCESS_FLAG;\n \n-    private KeySearch()\n-    {\n-    }\n+  private KeySearch()\n+  {\n+  }\n \n-    /**\n-     * Search for left most pos such that keyAtPos obeys key <= keyAtPos.\n-     * Return pos (not offset) of keyAtPos, or key count if no such key exist.\n-     * <p>\n-     * On insert, key should be inserted at pos.\n-     * On seek in internal, child at pos should be followed from internal node.\n-     * On seek in leaf, value at pos is correct if keyAtPos is equal to key.\n-     * <p>\n-     * Implemented as binary search.\n-     * <p>\n-     * Leaves cursor on same page as when called. No guarantees on offset.\n-     *\n-     * @param cursor {@link PageCursor} pinned to page with node (internal or leaf does not matter)\n-     * @param bTreeNode {@link TreeNode} that knows how to operate on KEY and VALUE\n-     * @param type {@link TreeNode.Type} of this tree node being searched\n-     *@param key KEY to search for\n-     * @param readKey KEY to use as temporary storage during calculation.\n-     * @param keyCount number of keys in node when starting search    @return search result where least significant 31 bits are first position i for which\n-     * bTreeNode.keyComparator().compare( key, bTreeNode.keyAt( i ) <= 0, or keyCount if no such key exists.\n-     * highest bit (sign bit) says whether or not the exact key was found in the node, if so set to 1, otherwise 0.\n-     * To extract position from the returned search result, then use {@link #positionOf(int)}.\n-     * To extract whether or not the exact key was found, then use {@link #isHit(int)}.\n-     */\n-    static <KEY,VALUE> int search( PageCursor cursor, TreeNode<KEY,VALUE> bTreeNode, TreeNode.Type type, KEY key,\n-            KEY readKey, int keyCount )\n+  /**\n+   * Search for left most pos such that keyAtPos obeys key <= keyAtPos.\n+   * Return pos (not offset) of keyAtPos, or key count if no such key exist.\n+   * <p>\n+   * On insert, key should be inserted at pos.\n+   * On seek in internal, child at pos should be followed from internal node.\n+   * On seek in leaf, value at pos is correct if keyAtPos is equal to key.\n+   * <p>\n+   * Implemented as binary search.\n+   * <p>\n+   * Leaves cursor on same page as when called. No guarantees on offset.\n+   *\n+   * @param cursor    {@link PageCursor} pinned to page with node (internal or leaf does not matter)\n+   * @param bTreeNode {@link TreeNode} that knows how to operate on KEY and VALUE\n+   * @param type      {@link TreeNode.Type} of this tree node being searched\n+   * @param key       KEY to search for\n+   * @param readKey   KEY to use as temporary storage during calculation.\n+   * @param keyCount  number of keys in node when starting search    @return search result where least significant 31 bits are first position i for which\n+   *                  bTreeNode.keyComparator().compare( key, bTreeNode.keyAt( i ) <= 0, or keyCount if no such key exists.\n+   *                  highest bit (sign bit) says whether or not the exact key was found in the node, if so set to 1, otherwise 0.\n+   *                  To extract position from the returned search result, then use {@link #positionOf(int)}.\n+   *                  To extract whether or not the exact key was found, then use {@link #isHit(int)}.\n+   */\n+  static <KEY, VALUE> int search(PageCursor cursor, TreeNode<KEY, VALUE> bTreeNode, TreeNode.Type type, KEY key,\n+                                 KEY readKey, int keyCount)\n+  {\n+    if (keyCount == 0)\n     {\n-        if ( keyCount == 0 )\n-        {\n-            return searchResult( 0, false );\n-        }\n+      return searchResult(0, false);\n+    }\n \n-        int lower = 0;\n-        int higher = keyCount - 1;\n-        int pos;\n-        boolean hit = false;\n+    int lower = 0;\n+    int higher = keyCount - 1;\n+    int pos;\n+    boolean hit = false;\n \n-        // Compare key with lower and higher and sort out special cases\n-        Comparator<KEY> comparator = bTreeNode.keyComparator();\n-        int comparison;\n+    // Compare key with lower and higher and sort out special cases\n+    Comparator<KEY> comparator = bTreeNode.keyComparator();\n+    int comparison;\n \n-        // key greater than greatest key in node\n-        if ( comparator.compare( key, bTreeNode.keyAt( cursor, readKey, higher, type ) ) > 0 )\n+    // key greater than greatest key in node\n+    if (comparator.compare(key, bTreeNode.keyAt(cursor, readKey, higher, type)) > 0)\n+    {\n+      pos = keyCount;\n+    }\n+    // key smaller than or equal to smallest key in node\n+    else if ((comparison = comparator.compare(key, bTreeNode.keyAt(cursor, readKey, lower, type))) <= 0)\n+    {\n+      if (comparison == 0)\n+      {\n+        hit = true;\n+      }\n+      pos = 0;\n+    } else\n+    {\n+      // Start binary search\n+      // If key <= keyAtPos -> move higher to pos\n+      // If key > keyAtPos -> move lower to pos+1\n+      // Terminate when lower == higher\n+      while (lower < higher)\n+      {\n+        pos = (lower + higher) / 2;\n+        comparison = comparator.compare(key, bTreeNode.keyAt(cursor, readKey, pos, type));\n+        if (comparison <= 0)\n         {\n-            pos = keyCount;\n-        }\n-        // key smaller than or equal to smallest key in node\n-        else if ( (comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, lower, type ) )) <= 0 )\n+          higher = pos;\n+        } else\n         {\n-            if ( comparison == 0 )\n-            {\n-                hit = true;\n-            }\n-            pos = 0;\n+          lower = pos + 1;\n         }\n-        else\n-        {\n-            // Start binary search\n-            // If key <= keyAtPos -> move higher to pos\n-            // If key > keyAtPos -> move lower to pos+1\n-            // Terminate when lower == higher\n-            while ( lower < higher )\n-            {\n-                pos = (lower + higher) / 2;\n-                comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type ) );\n-                if ( comparison <= 0 )\n-                {\n-                    higher = pos;\n-                }\n-                else\n-                {\n-                    lower = pos + 1;\n-                }\n-            }\n-            if ( lower != higher )\n-            {\n-                return NO_SUCCESS_FLAG;\n-            }\n-            pos = lower;\n+      }\n+      if (lower != higher)\n+      {\n+        return NO_SUCCESS_FLAG;\n+      }\n+      pos = lower;\n \n-            hit = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type ) ) == 0;\n-        }\n-        return searchResult( pos, hit );\n+      hit = comparator.compare(key, bTreeNode.keyAt(cursor, readKey, pos, type)) == 0;\n     }\n+    return searchResult(pos, hit);\n+  }\n \n-    private static int searchResult( int pos, boolean hit )\n-    {\n-        return (pos & POSITION_MASK) | (hit ? HIT_FLAG : NO_HIT_FLAG);\n-    }\n+  private static int searchResult(int pos, boolean hit)\n+  {\n+    return (pos & POSITION_MASK) | (hit ? HIT_FLAG : NO_HIT_FLAG);\n+  }\n \n-    /**\n-     * Extracts the position from a search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n-     *\n-     * @param searchResult search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n-     * @return position of the search result.\n-     */\n-    static int positionOf( int searchResult )\n-    {\n-        return searchResult & POSITION_MASK;\n-    }\n+  /**\n+   * Extracts the position from a search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n+   *\n+   * @param searchResult search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n+   * @return position of the search result.\n+   */\n+  static int positionOf(int searchResult)\n+  {\n+    return searchResult & POSITION_MASK;\n+  }\n \n-    /**\n-     * Extracts whether or not the searched key was found from search result from\n-     * {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n-     *\n-     * @param searchResult search result form {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n-     * @return whether or not the searched key was found.\n-     */\n-    static boolean isHit( int searchResult )\n-    {\n-        return (searchResult & HIT_MASK) == HIT_FLAG;\n-    }\n+  /**\n+   * Extracts whether or not the searched key was found from search result from\n+   * {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n+   *\n+   * @param searchResult search result form {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n+   * @return whether or not the searched key was found.\n+   */\n+  static boolean isHit(int searchResult)\n+  {\n+    return (searchResult & HIT_MASK) == HIT_FLAG;\n+  }\n \n-    static boolean isSuccess( int searchResult )\n-    {\n-        return (searchResult & SUCCESS_MASK) == SUCCESS_FLAG;\n-    }\n+  static boolean isSuccess(int searchResult)\n+  {\n+    return (searchResult & SUCCESS_MASK) == SUCCESS_FLAG;\n+  }\n \n-    static void assertSuccess( int searchResult )\n+  static void assertSuccess(int searchResult)\n+  {\n+    if (!isSuccess(searchResult))\n     {\n-        if ( !isSuccess( searchResult ) )\n-        {\n-            throw new TreeInconsistencyException( \"Search terminated in unexpected way\" );\n-        }\n+      throw new TreeInconsistencyException(\"Search terminated in unexpected way\");\n     }\n+  }\n }\n",
            "diff_size": 148
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4013/KeySearch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4013/KeySearch.java\nindex 66f6df00d43..19809c0febb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4013/KeySearch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4013/KeySearch.java\n@@ -28,13 +28,13 @@ import org.neo4j.io.pagecache.PageCursor;\n  */\n class KeySearch\n {\n-    private static final int POSITION_MASK   = 0x3FFFFFFF;\n-    private static final int HIT_FLAG        = 0x80000000;\n-    private static final int NO_HIT_FLAG     = 0x00000000;\n-    private static final int HIT_MASK        = HIT_FLAG | NO_HIT_FLAG;\n-    private static final int SUCCESS_FLAG    = 0x00000000;\n+    private static final int POSITION_MASK = 0x3FFFFFFF;\n+    private static final int HIT_FLAG = 0x80000000;\n+    private static final int NO_HIT_FLAG = 0x00000000;\n+    private static final int HIT_MASK = HIT_FLAG | NO_HIT_FLAG;\n+    private static final int SUCCESS_FLAG = 0x00000000;\n     private static final int NO_SUCCESS_FLAG = 0x40000000;\n-    private static final int SUCCESS_MASK    = SUCCESS_FLAG | NO_SUCCESS_FLAG;\n+    private static final int SUCCESS_MASK = SUCCESS_FLAG | NO_SUCCESS_FLAG;\n \n     private KeySearch()\n     {\n@@ -92,7 +92,8 @@ class KeySearch\n             {\n                 hit = true;\n             }\n-            pos = 0;\n+\n+pos = 0;\n         }\n         else\n         {\n@@ -117,16 +118,18 @@ class KeySearch\n             {\n                 return NO_SUCCESS_FLAG;\n             }\n-            pos = lower;\n+\n+pos = lower;\n \n             hit = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type ) ) == 0;\n         }\n-        return searchResult( pos, hit );\n+\n+return searchResult( pos, hit );\n     }\n \n     private static int searchResult( int pos, boolean hit )\n     {\n-        return (pos & POSITION_MASK) | (hit ? HIT_FLAG : NO_HIT_FLAG);\n+        return ( pos & POSITION_MASK) | ( hit ? HIT_FLAG : NO_HIT_FLAG);\n     }\n \n     /**\n@@ -149,12 +152,12 @@ class KeySearch\n      */\n     static boolean isHit( int searchResult )\n     {\n-        return (searchResult & HIT_MASK) == HIT_FLAG;\n+        return ( searchResult & HIT_MASK) == HIT_FLAG;\n     }\n \n     static boolean isSuccess( int searchResult )\n     {\n-        return (searchResult & SUCCESS_MASK) == SUCCESS_FLAG;\n+        return ( searchResult & SUCCESS_MASK) == SUCCESS_FLAG;\n     }\n \n     static void assertSuccess( int searchResult )\n@@ -164,4 +167,4 @@ class KeySearch\n             throw new TreeInconsistencyException( \"Search terminated in unexpected way\" );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "49",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "37",
                    "column": "57",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "67",
                    "column": "12",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "105",
                    "column": "17",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "105",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "44",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "21",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "133",
                    "column": "37",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "145",
                    "column": "28",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "158",
                    "column": "30",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "163",
                    "column": "30",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4013/KeySearch.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4013/KeySearch.java\nindex 66f6df00d43..b02c959346d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4013/KeySearch.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4013/KeySearch.java\n@@ -20,21 +20,21 @@\n package org.neo4j.index.internal.gbptree;\n \n import java.util.Comparator;\n-\n import org.neo4j.io.pagecache.PageCursor;\n \n /**\n  * Methods for (binary-)searching keys in a tree node.\n  */\n+\n class KeySearch\n {\n-    private static final int POSITION_MASK   = 0x3FFFFFFF;\n-    private static final int HIT_FLAG        = 0x80000000;\n-    private static final int NO_HIT_FLAG     = 0x00000000;\n-    private static final int HIT_MASK        = HIT_FLAG | NO_HIT_FLAG;\n-    private static final int SUCCESS_FLAG    = 0x00000000;\n+    private static final int POSITION_MASK = 0x3FFFFFFF;\n+    private static final int HIT_FLAG = 0x80000000;\n+    private static final int NO_HIT_FLAG = 0x00000000;\n+    private static final int HIT_MASK = HIT_FLAG| NO_HIT_FLAG;\n+    private static final int SUCCESS_FLAG = 0x00000000;\n     private static final int NO_SUCCESS_FLAG = 0x40000000;\n-    private static final int SUCCESS_MASK    = SUCCESS_FLAG | NO_SUCCESS_FLAG;\n+    private static final int SUCCESS_MASK = SUCCESS_FLAG| NO_SUCCESS_FLAG;\n \n     private KeySearch()\n     {\n@@ -63,8 +63,8 @@ class KeySearch\n      * To extract position from the returned search result, then use {@link #positionOf(int)}.\n      * To extract whether or not the exact key was found, then use {@link #isHit(int)}.\n      */\n-    static <KEY,VALUE> int search( PageCursor cursor, TreeNode<KEY,VALUE> bTreeNode, TreeNode.Type type, KEY key,\n-            KEY readKey, int keyCount )\n+\n+    static < KEY, VALUE> int search( PageCursor cursor, TreeNode<KEY,VALUE> bTreeNode, TreeNode.Type type, KEY key, KEY readKey, int keyCount )\n     {\n         if ( keyCount == 0 )\n         {\n@@ -86,47 +86,51 @@ class KeySearch\n             pos = keyCount;\n         }\n         // key smaller than or equal to smallest key in node\n-        else if ( (comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, lower, type ) )) <= 0 )\n+        else\n+        if ( ( comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, lower, type ) )) <= 0 )\n         {\n             if ( comparison == 0 )\n             {\n                 hit = true;\n             }\n+\n             pos = 0;\n         }\n         else\n-        {\n+            {\n             // Start binary search\n             // If key <= keyAtPos -> move higher to pos\n             // If key > keyAtPos -> move lower to pos+1\n             // Terminate when lower == higher\n-            while ( lower < higher )\n-            {\n-                pos = (lower + higher) / 2;\n-                comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type ) );\n-                if ( comparison <= 0 )\n+                while( lower < higher)\n                 {\n-                    higher = pos;\n+                    pos = ( lower + higher)/ 2;\n+                    comparison = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type ) );\n+                    if ( comparison <= 0 )\n+                    {\n+                        higher = pos;\n+                    }\n+                    else\n+                    {\n+                        lower = pos + 1;\n+                    }\n                 }\n-                else\n+\n+                if ( lower != higher )\n                 {\n-                    lower = pos + 1;\n+                    return NO_SUCCESS_FLAG;\n                 }\n+\n+                pos = lower;\n+                hit = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type ) ) == 0;\n             }\n-            if ( lower != higher )\n-            {\n-                return NO_SUCCESS_FLAG;\n-            }\n-            pos = lower;\n \n-            hit = comparator.compare( key, bTreeNode.keyAt( cursor, readKey, pos, type ) ) == 0;\n-        }\n         return searchResult( pos, hit );\n     }\n \n     private static int searchResult( int pos, boolean hit )\n     {\n-        return (pos & POSITION_MASK) | (hit ? HIT_FLAG : NO_HIT_FLAG);\n+        return ( pos& POSITION_MASK)| ( hit ? HIT_FLAG : NO_HIT_FLAG);\n     }\n \n     /**\n@@ -135,9 +139,10 @@ class KeySearch\n      * @param searchResult search result from {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n      * @return position of the search result.\n      */\n+\n     static int positionOf( int searchResult )\n     {\n-        return searchResult & POSITION_MASK;\n+        return searchResult& POSITION_MASK;\n     }\n \n     /**\n@@ -147,21 +152,22 @@ class KeySearch\n      * @param searchResult search result form {@link #search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n      * @return whether or not the searched key was found.\n      */\n+\n     static boolean isHit( int searchResult )\n     {\n-        return (searchResult & HIT_MASK) == HIT_FLAG;\n+        return ( searchResult& HIT_MASK) == HIT_FLAG;\n     }\n \n     static boolean isSuccess( int searchResult )\n     {\n-        return (searchResult & SUCCESS_MASK) == SUCCESS_FLAG;\n+        return ( searchResult& SUCCESS_MASK) == SUCCESS_FLAG;\n     }\n \n     static void assertSuccess( int searchResult )\n     {\n-        if ( !isSuccess( searchResult ) )\n+        if ( ! isSuccess( searchResult ) )\n         {\n             throw new TreeInconsistencyException( \"Search terminated in unexpected way\" );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}