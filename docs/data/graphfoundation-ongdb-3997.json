{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3997",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "395",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3997/OnlineBackup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3997/OnlineBackup.java\nindex 6acbb35873c..3f6dcdeee1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3997/OnlineBackup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3997/OnlineBackup.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.backup;\n \n import java.io.File;\n@@ -37,384 +38,384 @@ import org.neo4j.kernel.internal.GraphDatabaseAPI;\n  * configured to act as a backup server. This class is not instantiable, instead factory methods are used to get\n  * instances configured to contact a specific backup server against which all possible backup operations can be\n  * performed.\n- *\n+ * <p>\n  * All backup methods return the same instance, allowing for chaining calls.\n  */\n public class OnlineBackup\n {\n-    private final String hostNameOrIp;\n-    private final int port;\n-    private boolean forensics;\n-    private BackupOutcome outcome;\n-    private long timeoutMillis = BackupClient.BIG_READ_TIMEOUT;\n-    private OutputStream out = System.out;\n+  private final String hostNameOrIp;\n+  private final int port;\n+  private boolean forensics;\n+  private BackupOutcome outcome;\n+  private long timeoutMillis = BackupClient.BIG_READ_TIMEOUT;\n+  private OutputStream out = System.out;\n \n-    /**\n-     * Factory method for this class. The OnlineBackup instance returned will perform backup operations against the\n-     * hostname and port passed in as parameters.\n-     *\n-     * @param hostNameOrIp The hostname or the IP address of the backup server\n-     * @param port The port at which the remote backup server is listening\n-     * @return An OnlineBackup instance ready to perform backup operations from the given remote server\n-     */\n-    public static OnlineBackup from( String hostNameOrIp, int port )\n-    {\n-        return new OnlineBackup( hostNameOrIp, port );\n-    }\n+  /**\n+   * Factory method for this class. The OnlineBackup instance returned will perform backup operations against the\n+   * hostname and port passed in as parameters.\n+   *\n+   * @param hostNameOrIp The hostname or the IP address of the backup server\n+   * @param port         The port at which the remote backup server is listening\n+   * @return An OnlineBackup instance ready to perform backup operations from the given remote server\n+   */\n+  public static OnlineBackup from(String hostNameOrIp, int port)\n+  {\n+    return new OnlineBackup(hostNameOrIp, port);\n+  }\n \n-    /**\n-     * Factory method for this class. The OnlineBackup instance returned will perform backup operations against the\n-     * hostname passed in as parameter, using the default backup port.\n-     *\n-     * @param hostNameOrIp The hostname or IP address of the backup server\n-     * @return An OnlineBackup instance ready to perform backup operations from the given remote server\n-     */\n-    public static OnlineBackup from( String hostNameOrIp )\n-    {\n-        return new OnlineBackup( hostNameOrIp, BackupServer.DEFAULT_PORT );\n-    }\n+  /**\n+   * Factory method for this class. The OnlineBackup instance returned will perform backup operations against the\n+   * hostname passed in as parameter, using the default backup port.\n+   *\n+   * @param hostNameOrIp The hostname or IP address of the backup server\n+   * @return An OnlineBackup instance ready to perform backup operations from the given remote server\n+   */\n+  public static OnlineBackup from(String hostNameOrIp)\n+  {\n+    return new OnlineBackup(hostNameOrIp, BackupServer.DEFAULT_PORT);\n+  }\n \n-    private OnlineBackup( String hostNameOrIp, int port )\n-    {\n-        this.hostNameOrIp = hostNameOrIp;\n-        this.port = port;\n-    }\n+  private OnlineBackup(String hostNameOrIp, int port)\n+  {\n+    this.hostNameOrIp = hostNameOrIp;\n+    this.port = port;\n+  }\n \n-    /**\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     * @deprecated use {@link #backup(File)} instead\n-     */\n-    @Deprecated\n-    public OnlineBackup backup( String targetDirectory )\n-    {\n-        return backup( new File( targetDirectory ) );\n-    }\n+  /**\n+   * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   * @deprecated use {@link #backup(File)} instead\n+   */\n+  @Deprecated\n+  public OnlineBackup backup(String targetDirectory)\n+  {\n+    return backup(new File(targetDirectory));\n+  }\n \n-    /**\n-     * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n-     * obtain this instance. After the backup is complete, a verification phase will take place, checking\n-     * the database for consistency. If any errors are found, they will be printed in stderr.\n-     *\n-     * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n-     * backup mechanism is used.\n-     *\n-     * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n-     *\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     */\n-    public OnlineBackup backup( File targetDirectory )\n-    {\n-        Path dir = targetDirectory.toPath();\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, dir, getConsistencyCheck( true ), defaultConfig(), timeoutMillis, forensics );\n-        return this;\n-    }\n+  /**\n+   * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n+   * obtain this instance. After the backup is complete, a verification phase will take place, checking\n+   * the database for consistency. If any errors are found, they will be printed in stderr.\n+   * <p>\n+   * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n+   * backup mechanism is used.\n+   * <p>\n+   * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n+   *\n+   * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   */\n+  public OnlineBackup backup(File targetDirectory)\n+  {\n+    Path dir = targetDirectory.toPath();\n+    outcome = new BackupProtocolService(out).doIncrementalBackupOrFallbackToFull(\n+        hostNameOrIp, port, dir, getConsistencyCheck(true), defaultConfig(), timeoutMillis, forensics);\n+    return this;\n+  }\n \n-    /**\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @param verification If true, the verification phase will be run.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     * @deprecated use {@link #backup(File, boolean)} instead\n-     */\n-    @Deprecated\n-    public OnlineBackup backup( String targetDirectory, boolean verification )\n-    {\n-        return backup( new File( targetDirectory ), verification );\n-    }\n+  /**\n+   * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n+   * @param verification    If true, the verification phase will be run.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   * @deprecated use {@link #backup(File, boolean)} instead\n+   */\n+  @Deprecated\n+  public OnlineBackup backup(String targetDirectory, boolean verification)\n+  {\n+    return backup(new File(targetDirectory), verification);\n+  }\n \n-    /**\n-     * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n-     * obtain this instance. After the backup is complete, and if the verification parameter is set to true,\n-     * a verification phase will take place, checking the database for consistency. If any errors are found, they will\n-     * be printed in stderr.\n-     *\n-     * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n-     * backup mechanism is used.\n-     *\n-     * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n-     *\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @param verification If true, the verification phase will be run.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     */\n-    public OnlineBackup backup( File targetDirectory, boolean verification )\n-    {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( verification ), defaultConfig(),\n-                timeoutMillis, forensics );\n-        return this;\n-    }\n+  /**\n+   * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n+   * obtain this instance. After the backup is complete, and if the verification parameter is set to true,\n+   * a verification phase will take place, checking the database for consistency. If any errors are found, they will\n+   * be printed in stderr.\n+   * <p>\n+   * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n+   * backup mechanism is used.\n+   * <p>\n+   * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n+   *\n+   * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n+   * @param verification    If true, the verification phase will be run.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   */\n+  public OnlineBackup backup(File targetDirectory, boolean verification)\n+  {\n+    outcome = new BackupProtocolService(out).doIncrementalBackupOrFallbackToFull(\n+        hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck(verification), defaultConfig(),\n+        timeoutMillis, forensics);\n+    return this;\n+  }\n \n-    /**\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @param tuningConfiguration The {@link Config} to use when running the consistency check\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     * @deprecated use {@link #backup(File, Config)} instead\n-     */\n-    @Deprecated\n-    public OnlineBackup backup( String targetDirectory, Config tuningConfiguration )\n-    {\n-        return backup( new File( targetDirectory ), tuningConfiguration );\n-    }\n+  /**\n+   * @param targetDirectory     A directory holding a complete database previously obtained from the backup server.\n+   * @param tuningConfiguration The {@link Config} to use when running the consistency check\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   * @deprecated use {@link #backup(File, Config)} instead\n+   */\n+  @Deprecated\n+  public OnlineBackup backup(String targetDirectory, Config tuningConfiguration)\n+  {\n+    return backup(new File(targetDirectory), tuningConfiguration);\n+  }\n \n-    /**\n-     * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n-     * obtain this instance. After the backup is complete, a verification phase will take place, checking\n-     * the database for consistency. If any errors are found, they will be printed in stderr.\n-     *\n-     * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n-     * backup mechanism is used.\n-     *\n-     * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n-     *\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @param tuningConfiguration The {@link Config} to use when running the consistency check\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     */\n-    public OnlineBackup backup( File targetDirectory, Config tuningConfiguration )\n-    {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( true ), tuningConfiguration,\n-                timeoutMillis, forensics );\n-        return this;\n-    }\n+  /**\n+   * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n+   * obtain this instance. After the backup is complete, a verification phase will take place, checking\n+   * the database for consistency. If any errors are found, they will be printed in stderr.\n+   * <p>\n+   * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n+   * backup mechanism is used.\n+   * <p>\n+   * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n+   *\n+   * @param targetDirectory     A directory holding a complete database previously obtained from the backup server.\n+   * @param tuningConfiguration The {@link Config} to use when running the consistency check\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   */\n+  public OnlineBackup backup(File targetDirectory, Config tuningConfiguration)\n+  {\n+    outcome = new BackupProtocolService(out).doIncrementalBackupOrFallbackToFull(\n+        hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck(true), tuningConfiguration,\n+        timeoutMillis, forensics);\n+    return this;\n+  }\n \n-    /**\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @param tuningConfiguration The {@link Config} to use when running the consistency check\n-     * @param verification If true, the verification phase will be run.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation.\n-     * @deprecated use {@link #backup(File, Config, boolean)} instead\n-     */\n-    @Deprecated\n-    public OnlineBackup backup( String targetDirectory, Config tuningConfiguration, boolean verification )\n-    {\n-        return backup( new File( targetDirectory ), tuningConfiguration, verification );\n-    }\n+  /**\n+   * @param targetDirectory     A directory holding a complete database previously obtained from the backup server.\n+   * @param tuningConfiguration The {@link Config} to use when running the consistency check\n+   * @param verification        If true, the verification phase will be run.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation.\n+   * @deprecated use {@link #backup(File, Config, boolean)} instead\n+   */\n+  @Deprecated\n+  public OnlineBackup backup(String targetDirectory, Config tuningConfiguration, boolean verification)\n+  {\n+    return backup(new File(targetDirectory), tuningConfiguration, verification);\n+  }\n \n-    /**\n-     * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n-     * obtain this instance. After the backup is complete, and if the verification parameter is set to true,\n-     * a verification phase will take place, checking the database for consistency. If any errors are found, they will\n-     * be printed in stderr.\n-     *\n-     * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n-     * backup mechanism is used.\n-     *\n-     * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n-     *\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @param tuningConfiguration The {@link Config} to use when running the consistency check\n-     * @param verification If true, the verification phase will be run.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation.\n-     */\n-    public OnlineBackup backup( File targetDirectory, Config tuningConfiguration, boolean verification )\n-    {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( verification ), tuningConfiguration,\n-                timeoutMillis, forensics );\n-        return this;\n-    }\n+  /**\n+   * Performs a backup into targetDirectory. The server contacted is the one configured in the factory method used to\n+   * obtain this instance. After the backup is complete, and if the verification parameter is set to true,\n+   * a verification phase will take place, checking the database for consistency. If any errors are found, they will\n+   * be printed in stderr.\n+   * <p>\n+   * If the target directory does not contain a database, a full backup will be performed, otherwise an incremental\n+   * backup mechanism is used.\n+   * <p>\n+   * If the backup has become too far out of date for an incremental backup to succeed, a full backup is performed.\n+   *\n+   * @param targetDirectory     A directory holding a complete database previously obtained from the backup server.\n+   * @param tuningConfiguration The {@link Config} to use when running the consistency check\n+   * @param verification        If true, the verification phase will be run.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation.\n+   */\n+  public OnlineBackup backup(File targetDirectory, Config tuningConfiguration, boolean verification)\n+  {\n+    outcome = new BackupProtocolService(out).doIncrementalBackupOrFallbackToFull(\n+        hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck(verification), tuningConfiguration,\n+        timeoutMillis, forensics);\n+    return this;\n+  }\n \n-    /**\n-     * Use this method to change the default timeout to keep the client waiting for each reply from the server when\n-     * doing online backup. Once the value is changed, then every time when doing online backup, the timeout will be\n-     * reused until this method is called again and a new value is assigned.\n-     *\n-     * @param timeoutMillis The time duration in millisecond that keeps the client waiting for each reply from the\n-     * server.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation.\n-     */\n-    public OnlineBackup withTimeout( long timeoutMillis )\n-    {\n-        this.timeoutMillis = timeoutMillis;\n-        return this;\n-    }\n+  /**\n+   * Use this method to change the default timeout to keep the client waiting for each reply from the server when\n+   * doing online backup. Once the value is changed, then every time when doing online backup, the timeout will be\n+   * reused until this method is called again and a new value is assigned.\n+   *\n+   * @param timeoutMillis The time duration in millisecond that keeps the client waiting for each reply from the\n+   *                      server.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation.\n+   */\n+  public OnlineBackup withTimeout(long timeoutMillis)\n+  {\n+    this.timeoutMillis = timeoutMillis;\n+    return this;\n+  }\n \n-    public OnlineBackup withOutput( OutputStream out )\n-    {\n-        this.out = out;\n-        return this;\n-    }\n+  public OnlineBackup withOutput(OutputStream out)\n+  {\n+    this.out = out;\n+    return this;\n+  }\n \n-    /**\n-     * Performs a full backup storing the resulting database at the given directory. The server contacted is the one\n-     * configured in the factory method used to obtain this instance. At the end of the backup, a verification phase\n-     * will take place, running over the resulting database ensuring it is consistent. If the check fails, the fact\n-     * will be printed in stderr.\n-     *\n-     * If the target directory already contains a database, a RuntimeException denoting the fact will be thrown.\n-     *\n-     * @param targetDirectory The directory in which to store the database\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation.\n-     * @deprecated Use {@link #backup(File)} instead.\n-     */\n-    @Deprecated\n-    public OnlineBackup full( String targetDirectory )\n-    {\n-        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ),\n-                getConsistencyCheck( true ), defaultConfig(), timeoutMillis, forensics );\n-        return this;\n-    }\n+  /**\n+   * Performs a full backup storing the resulting database at the given directory. The server contacted is the one\n+   * configured in the factory method used to obtain this instance. At the end of the backup, a verification phase\n+   * will take place, running over the resulting database ensuring it is consistent. If the check fails, the fact\n+   * will be printed in stderr.\n+   * <p>\n+   * If the target directory already contains a database, a RuntimeException denoting the fact will be thrown.\n+   *\n+   * @param targetDirectory The directory in which to store the database\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation.\n+   * @deprecated Use {@link #backup(File)} instead.\n+   */\n+  @Deprecated\n+  public OnlineBackup full(String targetDirectory)\n+  {\n+    outcome = new BackupProtocolService(out).doFullBackup(hostNameOrIp, port, Paths.get(targetDirectory),\n+        getConsistencyCheck(true), defaultConfig(), timeoutMillis, forensics);\n+    return this;\n+  }\n \n-    /**\n-     * Performs a full backup storing the resulting database at the given directory. The server contacted is the one\n-     * configured in the factory method used to obtain this instance. If the verification flag is set, at the end of\n-     * the backup, a verification phase will take place, running over the resulting database ensuring it is consistent.\n-     * If the check fails, the fact will be printed in stderr.\n-     *\n-     * If the target directory already contains a database, a RuntimeException denoting the fact will be thrown.\n-     *\n-     * @param targetDirectory The directory in which to store the database\n-     * @param verification a boolean indicating whether to perform verification on the created backup\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation.\n-     * @deprecated Use {@link #backup(File, boolean)} instead\n-     */\n-    @Deprecated\n-    public OnlineBackup full( String targetDirectory, boolean verification )\n-    {\n-        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ),\n-                getConsistencyCheck( verification ), defaultConfig(), timeoutMillis, forensics );\n-        return this;\n-    }\n+  /**\n+   * Performs a full backup storing the resulting database at the given directory. The server contacted is the one\n+   * configured in the factory method used to obtain this instance. If the verification flag is set, at the end of\n+   * the backup, a verification phase will take place, running over the resulting database ensuring it is consistent.\n+   * If the check fails, the fact will be printed in stderr.\n+   * <p>\n+   * If the target directory already contains a database, a RuntimeException denoting the fact will be thrown.\n+   *\n+   * @param targetDirectory The directory in which to store the database\n+   * @param verification    a boolean indicating whether to perform verification on the created backup\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation.\n+   * @deprecated Use {@link #backup(File, boolean)} instead\n+   */\n+  @Deprecated\n+  public OnlineBackup full(String targetDirectory, boolean verification)\n+  {\n+    outcome = new BackupProtocolService(out).doFullBackup(hostNameOrIp, port, Paths.get(targetDirectory),\n+        getConsistencyCheck(verification), defaultConfig(), timeoutMillis, forensics);\n+    return this;\n+  }\n \n-    /**\n-     * Performs a full backup storing the resulting database at the given directory. The server contacted is the one\n-     * configured in the factory method used to obtain this instance. If the verification flag is set, at the end of\n-     * the backup, a verification phase will take place, running over the resulting database ensuring it is consistent.\n-     * If the check fails, the fact will be printed in stderr. The consistency check will run with the provided\n-     * tuning configuration.\n-     *\n-     * If the target directory already contains a database, a RuntimeException denoting the fact will be thrown.\n-     *\n-     * @param targetDirectory The directory in which to store the database\n-     * @param verification a boolean indicating whether to perform verification on the created backup\n-     * @param tuningConfiguration The {@link Config} to use when running the consistency check\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation.\n-     * @deprecated Use {@link #backup(File, Config, boolean)} instead.\n-     */\n-    @Deprecated\n-    public OnlineBackup full( String targetDirectory, boolean verification, Config tuningConfiguration )\n-    {\n-        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ),\n-                getConsistencyCheck( verification ), tuningConfiguration, timeoutMillis, forensics );\n-        return this;\n-    }\n+  /**\n+   * Performs a full backup storing the resulting database at the given directory. The server contacted is the one\n+   * configured in the factory method used to obtain this instance. If the verification flag is set, at the end of\n+   * the backup, a verification phase will take place, running over the resulting database ensuring it is consistent.\n+   * If the check fails, the fact will be printed in stderr. The consistency check will run with the provided\n+   * tuning configuration.\n+   * <p>\n+   * If the target directory already contains a database, a RuntimeException denoting the fact will be thrown.\n+   *\n+   * @param targetDirectory     The directory in which to store the database\n+   * @param verification        a boolean indicating whether to perform verification on the created backup\n+   * @param tuningConfiguration The {@link Config} to use when running the consistency check\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation.\n+   * @deprecated Use {@link #backup(File, Config, boolean)} instead.\n+   */\n+  @Deprecated\n+  public OnlineBackup full(String targetDirectory, boolean verification, Config tuningConfiguration)\n+  {\n+    outcome = new BackupProtocolService(out).doFullBackup(hostNameOrIp, port, Paths.get(targetDirectory),\n+        getConsistencyCheck(verification), tuningConfiguration, timeoutMillis, forensics);\n+    return this;\n+  }\n \n-    /**\n-     * Performs an incremental backup on the database stored in targetDirectory. The server contacted is the one\n-     * configured in the factory method used to obtain this instance. After the incremental backup is complete, a\n-     * verification phase will take place, checking the database for consistency. If any errors are found, they will\n-     * be printed in stderr.\n-     *\n-     * If the target directory does not contain a database or it is not compatible with the one present in the\n-     * configured backup server a RuntimeException will be thrown denoting the fact.\n-     *\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     * @deprecated Use {@link #backup(File)} instead.\n-     */\n-    @Deprecated\n-    public OnlineBackup incremental( String targetDirectory )\n-    {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackup(\n-                hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( false ), timeoutMillis,\n-                defaultConfig() );\n-        return this;\n-    }\n+  /**\n+   * Performs an incremental backup on the database stored in targetDirectory. The server contacted is the one\n+   * configured in the factory method used to obtain this instance. After the incremental backup is complete, a\n+   * verification phase will take place, checking the database for consistency. If any errors are found, they will\n+   * be printed in stderr.\n+   * <p>\n+   * If the target directory does not contain a database or it is not compatible with the one present in the\n+   * configured backup server a RuntimeException will be thrown denoting the fact.\n+   *\n+   * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   * @deprecated Use {@link #backup(File)} instead.\n+   */\n+  @Deprecated\n+  public OnlineBackup incremental(String targetDirectory)\n+  {\n+    outcome = new BackupProtocolService(out).doIncrementalBackup(\n+        hostNameOrIp, port, Paths.get(targetDirectory), getConsistencyCheck(false), timeoutMillis,\n+        defaultConfig());\n+    return this;\n+  }\n \n-    /**\n-     * Performs an incremental backup on the database stored in targetDirectory. The server contacted is the one\n-     * configured in the factory method used to obtain this instance. After the incremental backup is complete, and if\n-     * the verification parameter is set to true, a  verification phase will take place, checking the database for\n-     * consistency. If any errors are found, they will be printed in stderr.\n-     *\n-     * If the target directory does not contain a database or it is not compatible with the one present in the\n-     * configured backup server a RuntimeException will be thrown denoting the fact.\n-     *\n-     * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n-     * @param verification If true, the verification phase will be run.\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     * @deprecated Use {@link #backup(File, boolean)} instead.\n-     */\n-    @Deprecated\n-    public OnlineBackup incremental( String targetDirectory, boolean verification )\n-    {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackup(\n-                hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( verification ), timeoutMillis,\n-                defaultConfig() );\n-        return this;\n-    }\n+  /**\n+   * Performs an incremental backup on the database stored in targetDirectory. The server contacted is the one\n+   * configured in the factory method used to obtain this instance. After the incremental backup is complete, and if\n+   * the verification parameter is set to true, a  verification phase will take place, checking the database for\n+   * consistency. If any errors are found, they will be printed in stderr.\n+   * <p>\n+   * If the target directory does not contain a database or it is not compatible with the one present in the\n+   * configured backup server a RuntimeException will be thrown denoting the fact.\n+   *\n+   * @param targetDirectory A directory holding a complete database previously obtained from the backup server.\n+   * @param verification    If true, the verification phase will be run.\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   * @deprecated Use {@link #backup(File, boolean)} instead.\n+   */\n+  @Deprecated\n+  public OnlineBackup incremental(String targetDirectory, boolean verification)\n+  {\n+    outcome = new BackupProtocolService(out).doIncrementalBackup(\n+        hostNameOrIp, port, Paths.get(targetDirectory), getConsistencyCheck(verification), timeoutMillis,\n+        defaultConfig());\n+    return this;\n+  }\n \n-    /**\n-     * Performs an incremental backup on the supplied target database. The server contacted is the one\n-     * configured in the factory method used to obtain this instance. After the incremental backup is complete\n-     * a verification phase will take place, checking the database for consistency. If any errors are found, they will\n-     * be printed in stderr.\n-     *\n-     * If the target database is not compatible with the one present in the target backup server, a RuntimeException\n-     * will be thrown denoting the fact.\n-     *\n-     * @param targetDb The database on which the incremental backup is to be applied\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation.\n-     * @deprecated Use {@link #backup(String)} instead.\n-     */\n-    @Deprecated\n-    public OnlineBackup incremental( GraphDatabaseAPI targetDb )\n-    {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackup( hostNameOrIp, port, targetDb, timeoutMillis );\n-        return this;\n-    }\n+  /**\n+   * Performs an incremental backup on the supplied target database. The server contacted is the one\n+   * configured in the factory method used to obtain this instance. After the incremental backup is complete\n+   * a verification phase will take place, checking the database for consistency. If any errors are found, they will\n+   * be printed in stderr.\n+   * <p>\n+   * If the target database is not compatible with the one present in the target backup server, a RuntimeException\n+   * will be thrown denoting the fact.\n+   *\n+   * @param targetDb The database on which the incremental backup is to be applied\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation.\n+   * @deprecated Use {@link #backup(String)} instead.\n+   */\n+  @Deprecated\n+  public OnlineBackup incremental(GraphDatabaseAPI targetDb)\n+  {\n+    outcome = new BackupProtocolService(out).doIncrementalBackup(hostNameOrIp, port, targetDb, timeoutMillis);\n+    return this;\n+  }\n \n-    /**\n-     * Provides information about the last committed transaction for each data source present in the last backup\n-     * operation performed by this OnlineBackup.\n-     * In particular, it returns a map where the keys are the names of the data sources and the values the longs that\n-     * are the last committed transaction id for that data source.\n-     *\n-     * @return A map from data source name to last committed transaction id.\n-     */\n-    public long getLastCommittedTx()\n-    {\n-        return outcome().getLastCommittedTx();\n-    }\n+  /**\n+   * Provides information about the last committed transaction for each data source present in the last backup\n+   * operation performed by this OnlineBackup.\n+   * In particular, it returns a map where the keys are the names of the data sources and the values the longs that\n+   * are the last committed transaction id for that data source.\n+   *\n+   * @return A map from data source name to last committed transaction id.\n+   */\n+  public long getLastCommittedTx()\n+  {\n+    return outcome().getLastCommittedTx();\n+  }\n \n-    /**\n-     * @return the consistency outcome of the last made backup. I\n-     */\n-    public boolean isConsistent()\n-    {\n-        return outcome().isConsistent();\n-    }\n+  /**\n+   * @return the consistency outcome of the last made backup. I\n+   */\n+  public boolean isConsistent()\n+  {\n+    return outcome().isConsistent();\n+  }\n \n-    private BackupOutcome outcome()\n+  private BackupOutcome outcome()\n+  {\n+    if (outcome == null)\n     {\n-        if ( outcome == null )\n-        {\n-            throw new IllegalStateException( \"No outcome yet. Please call full or incremental backup first\" );\n-        }\n-        return outcome;\n+      throw new IllegalStateException(\"No outcome yet. Please call full or incremental backup first\");\n     }\n+    return outcome;\n+  }\n \n-    private Config defaultConfig()\n-    {\n-        return Config.defaults();\n-    }\n+  private Config defaultConfig()\n+  {\n+    return Config.defaults();\n+  }\n \n-    /**\n-     * @param forensics whether or not additional information should be backed up, for example transaction\n-     * @return The same OnlineBackup instance, possible to use for a new backup operation\n-     */\n-    public OnlineBackup gatheringForensics( boolean forensics )\n-    {\n-        this.forensics = forensics;\n-        return this;\n-    }\n+  /**\n+   * @param forensics whether or not additional information should be backed up, for example transaction\n+   * @return The same OnlineBackup instance, possible to use for a new backup operation\n+   */\n+  public OnlineBackup gatheringForensics(boolean forensics)\n+  {\n+    this.forensics = forensics;\n+    return this;\n+  }\n \n-    private static ConsistencyCheck getConsistencyCheck( boolean verification )\n-    {\n-        return verification ? ConsistencyCheck.FULL : ConsistencyCheck.NONE;\n-    }\n+  private static ConsistencyCheck getConsistencyCheck(boolean verification)\n+  {\n+    return verification ? ConsistencyCheck.FULL : ConsistencyCheck.NONE;\n+  }\n }\n",
            "diff_size": 354
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "292",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "312",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "333",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3997/OnlineBackup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3997/OnlineBackup.java\nindex 6acbb35873c..b742722cded 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3997/OnlineBackup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3997/OnlineBackup.java\n@@ -107,9 +107,8 @@ public class OnlineBackup\n     public OnlineBackup backup( File targetDirectory )\n     {\n         Path dir = targetDirectory.toPath();\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, dir, getConsistencyCheck( true ), defaultConfig(), timeoutMillis, forensics );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull( hostNameOrIp, port, dir, getConsistencyCheck( true ), defaultConfig(), timeoutMillis, forensics );\n+return this;\n     }\n \n     /**\n@@ -141,10 +140,8 @@ public class OnlineBackup\n      */\n     public OnlineBackup backup( File targetDirectory, boolean verification )\n     {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( verification ), defaultConfig(),\n-                timeoutMillis, forensics );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull( hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( verification ), defaultConfig(), timeoutMillis, forensics );\n+return this;\n     }\n \n     /**\n@@ -175,10 +172,8 @@ public class OnlineBackup\n      */\n     public OnlineBackup backup( File targetDirectory, Config tuningConfiguration )\n     {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( true ), tuningConfiguration,\n-                timeoutMillis, forensics );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull( hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( true ), tuningConfiguration, timeoutMillis, forensics );\n+return this;\n     }\n \n     /**\n@@ -212,10 +207,8 @@ public class OnlineBackup\n      */\n     public OnlineBackup backup( File targetDirectory, Config tuningConfiguration, boolean verification )\n     {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull(\n-                hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( verification ), tuningConfiguration,\n-                timeoutMillis, forensics );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doIncrementalBackupOrFallbackToFull( hostNameOrIp, port, targetDirectory.toPath(), getConsistencyCheck( verification ), tuningConfiguration, timeoutMillis, forensics );\n+return this;\n     }\n \n     /**\n@@ -254,9 +247,8 @@ public class OnlineBackup\n     @Deprecated\n     public OnlineBackup full( String targetDirectory )\n     {\n-        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ),\n-                getConsistencyCheck( true ), defaultConfig(), timeoutMillis, forensics );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( true ), defaultConfig(), timeoutMillis, forensics );\n+return this;\n     }\n \n     /**\n@@ -275,9 +267,8 @@ public class OnlineBackup\n     @Deprecated\n     public OnlineBackup full( String targetDirectory, boolean verification )\n     {\n-        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ),\n-                getConsistencyCheck( verification ), defaultConfig(), timeoutMillis, forensics );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( verification ), defaultConfig(), timeoutMillis, forensics );\n+return this;\n     }\n \n     /**\n@@ -298,9 +289,8 @@ public class OnlineBackup\n     @Deprecated\n     public OnlineBackup full( String targetDirectory, boolean verification, Config tuningConfiguration )\n     {\n-        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ),\n-                getConsistencyCheck( verification ), tuningConfiguration, timeoutMillis, forensics );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doFullBackup( hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( verification ), tuningConfiguration, timeoutMillis, forensics );\n+return this;\n     }\n \n     /**\n@@ -319,10 +309,8 @@ public class OnlineBackup\n     @Deprecated\n     public OnlineBackup incremental( String targetDirectory )\n     {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackup(\n-                hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( false ), timeoutMillis,\n-                defaultConfig() );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doIncrementalBackup( hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( false ), timeoutMillis, defaultConfig() );\n+return this;\n     }\n \n     /**\n@@ -342,10 +330,8 @@ public class OnlineBackup\n     @Deprecated\n     public OnlineBackup incremental( String targetDirectory, boolean verification )\n     {\n-        outcome = new BackupProtocolService( out ).doIncrementalBackup(\n-                hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( verification ), timeoutMillis,\n-                defaultConfig() );\n-        return this;\n+        outcome = new BackupProtocolService( out ).doIncrementalBackup( hostNameOrIp, port, Paths.get( targetDirectory ), getConsistencyCheck( verification ), timeoutMillis, defaultConfig() );\n+return this;\n     }\n \n     /**\n@@ -395,7 +381,8 @@ public class OnlineBackup\n         {\n             throw new IllegalStateException( \"No outcome yet. Please call full or incremental backup first\" );\n         }\n-        return outcome;\n+\n+return outcome;\n     }\n \n     private Config defaultConfig()\n@@ -417,4 +404,4 @@ public class OnlineBackup\n     {\n         return verification ? ConsistencyCheck.FULL : ConsistencyCheck.NONE;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}