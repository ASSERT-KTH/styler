{
    "project_name": "Angel-ML-angel",
    "error_id": "756",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/756/SnapshotDumper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/756/SnapshotDumper.java\nindex 3b93b883cf0..f9a47a4cf8a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/756/SnapshotDumper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/756/SnapshotDumper.java\n@@ -176,7 +176,7 @@ public class SnapshotDumper {\n     Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n     if (fs.exists(tmpPath)) {\n       boolean ret = fs.delete(tmpPath, true);\n-      if(!ret) {\n+      if (!ret) {\n         throw new IOException(\"Delete tmp snapshot dir failed\");\n       }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/756/SnapshotDumper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/756/SnapshotDumper.java\nindex 3b93b883cf0..417d9eabfa0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/756/SnapshotDumper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/756/SnapshotDumper.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.io.save;\n \n import com.tencent.angel.RunningMode;\n@@ -101,8 +100,7 @@ public class SnapshotDumper {\n     backupIntervalMs = context.getConf()\n         .getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n             AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n-\n-    dumpParallel = context.getConf()\n+dumpParallel = context.getConf()\n         .getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL, AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n \n     outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n@@ -187,12 +185,8 @@ public class SnapshotDumper {\n       MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(matrixIds.get(i));\n       LOG.info(\"Need dump matrices: \" + meta.getName());\n       saveContexts.add(\n-          new PSMatrixSaveContext(matrixIds.get(i),\n-              new ArrayList<>(meta.getPartitionMetas().keySet()),\n-              null, SnapshotFormat.class.getName(),\n-              new Path(tmpPath, meta.getName()).toString(),\n-              true, false));\n-    }\n+          new PSMatrixSaveContext(matrixIds.get(i), new ArrayList<>(meta.getPartitionMetas().keySet()), null, SnapshotFormat.class.getName(), new Path(tmpPath, meta.getName()).toString(), true, false));\n+  }\n \n     // Dump\n     LOG.info(\"Dump parallel = \" + dumpParallel);\n@@ -234,14 +228,9 @@ public class SnapshotDumper {\n     List<PSMatrixSaveContext> saveContexts = new ArrayList<>(1);\n     MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(matrixId);\n     saveContexts.add(\n-        new PSMatrixSaveContext(matrixId,\n-            new ArrayList<>(meta.getPartitionMetas().keySet()),\n-            null, SnapshotFormat.class.getName(),\n-            new Path(tmpPath, meta.getName()).toString(),\n-            false, true));\n-\n-    context.getIOExecutors()\n+        new PSMatrixSaveContext(matrixId, new ArrayList<>(meta.getPartitionMetas().keySet()), null, SnapshotFormat.class.getName(), new Path(tmpPath, meta.getName()).toString(), false, true));\n+context.getIOExecutors()\n         .save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n     HdfsUtil.rename(tmpPath, baseDirPath, fs);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/756/SnapshotDumper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/756/SnapshotDumper.java\nindex 3b93b883cf0..8cca72352e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/756/SnapshotDumper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/756/SnapshotDumper.java\n@@ -26,7 +26,6 @@ import com.tencent.angel.model.PSMatrixSaveContext;\n import com.tencent.angel.model.output.format.ModelFilesConstent;\n import com.tencent.angel.model.output.format.SnapshotFormat;\n import com.tencent.angel.ps.PSContext;\n-\n import com.tencent.angel.ps.server.data.ServerState;\n import com.tencent.angel.utils.HdfsUtil;\n import java.io.IOException;\n@@ -41,6 +40,7 @@ import org.apache.hadoop.fs.Path;\n /**\n  * Snapshot dumper, it dump the matrices to hdfs once in a while\n  */\n+\n public class SnapshotDumper {\n \n   private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n@@ -84,7 +84,6 @@ public class SnapshotDumper {\n    * Application running mode\n    */\n   private final RunningMode mode;\n-\n   private final int dumpParallel;\n \n   /**\n@@ -92,24 +91,16 @@ public class SnapshotDumper {\n    *\n    * @param context PS context\n    */\n+\n   public SnapshotDumper(PSContext context) {\n     this.context = context;\n     stopped = new AtomicBoolean(false);\n     lastIteration = 0;\n     mode = context.getRunningMode();\n-\n-    backupIntervalMs = context.getConf()\n-        .getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n-            AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n-\n-    dumpParallel = context.getConf()\n-        .getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL, AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n-\n+    backupIntervalMs = context.getConf().getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS, AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n+    dumpParallel = context.getConf().getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL, AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n     outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n-    baseDirPath = new Path(\n-        outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR + context\n-            .getPSAttemptId().getPsId() + Path.SEPARATOR + context.getPSAttemptId().getIndex());\n-\n+    baseDirPath = new Path(outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR + context.getPSAttemptId().getPsId() + Path.SEPARATOR + context.getPSAttemptId().getIndex());\n     String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n     if (matricesStr == null) {\n       needDumpMatrices = null;\n@@ -121,35 +112,37 @@ public class SnapshotDumper {\n   /**\n    * Init\n    */\n-  public void init() {\n-  }\n+\n+  public void init() {}\n \n   /**\n    * Start dump dispatcher\n    */\n+\n   public void start() {\n     LOG.info(\"Start snapshot dumper\");\n-    dumpDispatcher = new Thread(() -> {\n-      while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n-        try {\n-          Thread.sleep(backupIntervalMs);\n-          try {\n-            LOG.info(\"to writeSnapshots\");\n-            while (context.getRunningContext().getState() == ServerState.BUSY) {\n-              LOG.info(\"State is busy\");\n-              Thread.sleep(5000);\n-            }\n-            writeSnapshots();\n-          } catch (Exception ioe) {\n-            LOG.error(\"write snapshots error: \", ioe);\n-          }\n-        } catch (InterruptedException e) {\n-          if (!stopped.get()) {\n-            LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n-          }\n-        }\n-      }\n-    });\n+    dumpDispatcher = new Thread(()-> {\n+                                  while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n+                                    try {\n+                                      Thread.sleep(backupIntervalMs);\n+                                      try {\n+                                        LOG.info(\"to writeSnapshots\");\n+\n+                                        while (context.getRunningContext().getState() == ServerState.BUSY) {\n+                                          LOG.info(\"State is busy\");\n+                                          Thread.sleep(5000);\n+                                        }\n+                                        writeSnapshots();\n+                                      } catch (Exception ioe) {\n+                                        LOG.error(\"write snapshots error: \", ioe);\n+                                      }\n+                                    } catch (InterruptedException e) {\n+                                      if (!stopped.get()) {\n+                                        LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n+                                      }\n+                                    }\n+                                  }\n+                                });\n     dumpDispatcher.setName(\"snapshot-dump-dispatcher\");\n     dumpDispatcher.start();\n   }\n@@ -157,6 +150,7 @@ public class SnapshotDumper {\n   /**\n    * Write snapshot\n    */\n+\n   private void writeSnapshots() throws Exception {\n     List<Integer> matrixIds;\n     // If not set need save matrices, all matrices will be dump to files\n@@ -172,11 +166,12 @@ public class SnapshotDumper {\n     }\n \n     // Generate tmp dump directory\n+\n     FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n     Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n     if (fs.exists(tmpPath)) {\n       boolean ret = fs.delete(tmpPath, true);\n-      if(!ret) {\n+      if (!ret) {\n         throw new IOException(\"Delete tmp snapshot dir failed\");\n       }\n     }\n@@ -186,19 +181,14 @@ public class SnapshotDumper {\n     for (int i = 0; i < size; i++) {\n       MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(matrixIds.get(i));\n       LOG.info(\"Need dump matrices: \" + meta.getName());\n-      saveContexts.add(\n-          new PSMatrixSaveContext(matrixIds.get(i),\n-              new ArrayList<>(meta.getPartitionMetas().keySet()),\n-              null, SnapshotFormat.class.getName(),\n-              new Path(tmpPath, meta.getName()).toString(),\n-              true, false));\n+      saveContexts.add(new PSMatrixSaveContext(matrixIds.get(i), new ArrayList<>(meta.getPartitionMetas().keySet()), null, SnapshotFormat.class.getName(), new Path(tmpPath, meta.getName()).toString(), true, false));\n     }\n \n     // Dump\n     LOG.info(\"Dump parallel = \" + dumpParallel);\n+\n     long startTs = System.currentTimeMillis();\n-    context.getIOExecutors()\n-        .save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n+    context.getIOExecutors().save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n     HdfsUtil.rename(tmpPath, baseDirPath, fs);\n     LOG.info(\"Dump success, use time = \" + (System.currentTimeMillis() - startTs));\n   }\n@@ -211,7 +201,6 @@ public class SnapshotDumper {\n         matrixIds.add(meta.getId());\n       }\n     }\n-\n     return matrixIds;\n   }\n \n@@ -233,15 +222,8 @@ public class SnapshotDumper {\n \n     List<PSMatrixSaveContext> saveContexts = new ArrayList<>(1);\n     MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(matrixId);\n-    saveContexts.add(\n-        new PSMatrixSaveContext(matrixId,\n-            new ArrayList<>(meta.getPartitionMetas().keySet()),\n-            null, SnapshotFormat.class.getName(),\n-            new Path(tmpPath, meta.getName()).toString(),\n-            false, true));\n-\n-    context.getIOExecutors()\n-        .save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n+    saveContexts.add(new PSMatrixSaveContext(matrixId, new ArrayList<>(meta.getPartitionMetas().keySet()), null, SnapshotFormat.class.getName(), new Path(tmpPath, meta.getName()).toString(), false, true));\n+    context.getIOExecutors().save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n     HdfsUtil.rename(tmpPath, baseDirPath, fs);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}