{
    "project_name": "neo4j-neo4j",
    "error_id": "2808",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "123",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2808/DelayedBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2808/DelayedBuffer.java\nindex 16d54d7a79d..d5600eb0d7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2808/DelayedBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2808/DelayedBuffer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.id;\n \n import java.util.Arrays;\n@@ -37,7 +38,7 @@ import static java.util.Arrays.copyOf;\n  * they are released onto a {@link Consumer}. These values are held in chunk and each chunk knows\n  * which threshold is considered safe. Regular {@link #maintenance(PageCursorTracer)} is required to be called externally\n  * for values to be released.\n- *\n+ * <p>\n  * This class is thread-safe for concurrent requests, but only a single thread should be responsible for\n  * calling {@link #maintenance(PageCursorTracer)}.\n  */\n@@ -48,7 +49,7 @@ public class DelayedBuffer<T>\n         private final T threshold;\n         private final long[] values;\n \n-        Chunk( T threshold, long[] values )\n+        Chunk(T threshold, long[] values)\n         {\n             this.threshold = threshold;\n             this.values = values;\n@@ -57,7 +58,7 @@ public class DelayedBuffer<T>\n         @Override\n         public String toString()\n         {\n-            return Arrays.toString( values );\n+            return Arrays.toString(values);\n         }\n     }\n \n@@ -71,8 +72,8 @@ public class DelayedBuffer<T>\n     private final long[] chunk;\n     private int chunkCursor;\n \n-    DelayedBuffer( Supplier<T> thresholdSupplier, Predicate<T> safeThreshold, int chunkSize,\n-            ChunkConsumer chunkConsumer )\n+    DelayedBuffer(Supplier<T> thresholdSupplier, Predicate<T> safeThreshold, int chunkSize,\n+                  ChunkConsumer chunkConsumer)\n     {\n         assert chunkSize > 0;\n         this.thresholdSupplier = thresholdSupplier;\n@@ -86,9 +87,9 @@ public class DelayedBuffer<T>\n      * Should be called every now and then to check for safe thresholds of buffered chunks and potentially\n      * release them onto the {@link Consumer}.\n      */\n-    public void maintenance( PageCursorTracer cursorTracer )\n+    public void maintenance(PageCursorTracer cursorTracer)\n     {\n-        synchronized ( this )\n+        synchronized (this)\n         {\n             flush();\n         }\n@@ -97,22 +98,20 @@ public class DelayedBuffer<T>\n         try\n         {\n             // Potentially hand over chunks to the consumer\n-            while ( !chunks.isEmpty() )\n+            while (!chunks.isEmpty())\n             {\n                 Chunk<T> candidate = chunks.peek();\n-                if ( safeThreshold.test( candidate.threshold ) )\n+                if (safeThreshold.test(candidate.threshold))\n                 {\n-                    chunkConsumer.consume( candidate.values, cursorTracer );\n+                    chunkConsumer.consume(candidate.values, cursorTracer);\n                     chunks.remove();\n-                }\n-                else\n+                } else\n                 {\n                     // The chunks are ordered by chunkThreshold, so we know that no more chunks will qualify anyway\n                     break;\n                 }\n             }\n-        }\n-        finally\n+        } finally\n         {\n             consumeLock.unlock();\n         }\n@@ -121,12 +120,12 @@ public class DelayedBuffer<T>\n     // Must be called under synchronized on this\n     private void flush()\n     {\n-        if ( chunkCursor > 0 )\n+        if (chunkCursor > 0)\n         {\n-            synchronized ( chunks )\n+            synchronized (chunks)\n             {\n-                Chunk<T> chunkToAdd = new Chunk<>( thresholdSupplier.get(), copyOf( chunk, chunkCursor ) );\n-                chunks.offer( chunkToAdd );\n+                Chunk<T> chunkToAdd = new Chunk<>(thresholdSupplier.get(), copyOf(chunk, chunkCursor));\n+                chunks.offer(chunkToAdd);\n             }\n             chunkCursor = 0;\n         }\n@@ -137,10 +136,10 @@ public class DelayedBuffer<T>\n      * released by a call to {@link #maintenance(PageCursorTracer)} when the safe threshold for the chunk, which is determined\n      * when the chunk is full or otherwise queued.\n      */\n-    public synchronized void offer( long value )\n+    public synchronized void offer(long value)\n     {\n         chunk[chunkCursor++] = value;\n-        if ( chunkCursor == chunkSize )\n+        if (chunkCursor == chunkSize)\n         {\n             flush();\n         }\n@@ -148,7 +147,7 @@ public class DelayedBuffer<T>\n \n     /**\n      * Closes this buffer, releasing all {@link #offer(long)} values into the {@link Consumer}.\n-     *\n+     * <p>\n      * This class is typically not used in a scenario suitable for try-with-resource\n      * and so having it implement AutoCloseable would be more annoying\n      */\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2808/DelayedBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2808/DelayedBuffer.java\nindex 16d54d7a79d..1e3f1fab7a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2808/DelayedBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2808/DelayedBuffer.java\n@@ -162,4 +162,4 @@ public class DelayedBuffer<T>\n         chunks.clear();\n         chunkCursor = 0;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}