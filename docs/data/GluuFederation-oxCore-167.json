{
    "project_name": "GluuFederation-oxCore",
    "error_id": "167",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class ScriptService {\n\n\t@Inject\n\tprivate OrganizationService organizationService;\n\n\t@Inject",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/167/ScriptService.java\nindex 44d2390392c..2d8bbabae95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/167/ScriptService.java\n@@ -29,7 +29,7 @@ import org.python.jline.internal.Log;\n @Named\n public class ScriptService {\n \n-\t@Inject\n+    @Inject\n \tprivate OrganizationService organizationService;\n \n \t@Inject\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/167/ScriptService.java\nindex 44d2390392c..392076d9991 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/167/ScriptService.java\n@@ -23,117 +23,116 @@ import org.python.jline.internal.Log;\n \n /**\n  * @author Mougang T.Gasmyr\n- *\n  */\n @ApplicationScoped\n @Named\n public class ScriptService {\n \n-\t@Inject\n-\tprivate OrganizationService organizationService;\n-\n-\t@Inject\n-\tprivate PersistenceEntryManager persistenceEntryManager;\n-\n-\t@Inject\n-\tprotected AbstractCustomScriptService customScriptService;\n-\n-\tpublic CustomScript getScriptByInum(String inum) {\n-\t\tCustomScript result = null;\n-\t\ttry {\n-\t\t\tresult = persistenceEntryManager.find(CustomScript.class, customScriptService.buildDn(inum));\n-\t\t} catch (Exception ex) {\n-\t\t\tLog.error(\"Failed to find script by inum {}\", inum, ex);\n-\t\t}\n-\n-\t\treturn result;\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION.getValue());\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, null);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), null);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic String getDnForCustomScript(String inum) {\n-\t\tString orgDn = organizationService.getDnForOrganization(null);\n-\t\tif (StringHelper.isEmpty(inum)) {\n-\t\t\treturn String.format(\"ou=scripts,%s\", orgDn);\n-\t\t}\n-\t\treturn String.format(\"inum=%s,ou=scripts,%s\", inum, orgDn);\n-\t}\n-\n-\tpublic String baseDn() {\n-\t\treturn String.format(\"ou=scripts,%s\", organizationService.getDnForOrganization(null));\n-\t}\n+    @Inject\n+    private OrganizationService organizationService;\n+\n+    @Inject\n+    private PersistenceEntryManager persistenceEntryManager;\n+\n+    @Inject\n+    protected AbstractCustomScriptService customScriptService;\n+\n+    public CustomScript getScriptByInum(String inum) {\n+        CustomScript result = null;\n+        try {\n+            result = persistenceEntryManager.find(CustomScript.class, customScriptService.buildDn(inum));\n+        } catch (Exception ex) {\n+            Log.error(\"Failed to find script by inum {}\", inum, ex);\n+        }\n+\n+        return result;\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n+            CustomScriptType.PERSON_AUTHENTICATION);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n+            CustomScriptType.PERSON_AUTHENTICATION.getValue());\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n+            sizeLimit);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createNOTFilter(\n+            Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n+            sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, null);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n+            Filter.createANDFilter(searchFilter, typeFilter), null);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createNOTFilter(\n+            Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n+            sizeLimit);\n+    }\n+\n+    public String getDnForCustomScript(String inum) {\n+        String orgDn = organizationService.getDnForOrganization(null);\n+        if (StringHelper.isEmpty(inum)) {\n+            return String.format(\"ou=scripts,%s\", orgDn);\n+        }\n+        return String.format(\"inum=%s,ou=scripts,%s\", inum, orgDn);\n+    }\n+\n+    public String baseDn() {\n+        return String.format(\"ou=scripts,%s\", organizationService.getDnForOrganization(null));\n+    }\n \n }\n",
            "diff_size": 107
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/167/ScriptService.java\nindex 44d2390392c..0d6721d62fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/167/ScriptService.java\n@@ -29,7 +29,7 @@ import org.python.jline.internal.Log;\n @Named\n public class ScriptService {\n \n-\t@Inject\n+    @Inject\n \tprivate OrganizationService organizationService;\n \n \t@Inject\n@@ -39,101 +39,90 @@ public class ScriptService {\n \tprotected AbstractCustomScriptService customScriptService;\n \n \tpublic CustomScript getScriptByInum(String inum) {\n-\t\tCustomScript result = null;\n+    CustomScript result = null;\n \t\ttry {\n-\t\t\tresult = persistenceEntryManager.find(CustomScript.class, customScriptService.buildDn(inum));\n-\t\t} catch (Exception ex) {\n-\t\t\tLog.error(\"Failed to find script by inum {}\", inum, ex);\n-\t\t}\n+    result = persistenceEntryManager.find(CustomScript.class, customScriptService.buildDn(inum));\n+    } catch (Exception ex) {\n+    Log.error(\"Failed to find script by inum {}\", inum, ex);\n+    }\n \n \t\treturn result;\n-\t}\n+    }\n \n \tpublic List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION);\n+Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION.getValue());\n+    Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION.getValue());\n \n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n+return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+\t\tFilter scriptTypeFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+    Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findScriptByType(CustomScriptType type) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+    Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n \t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, null);\n-\t}\n+    }\n \n \tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n \t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, Filter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n+    }\n \n \tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n-\t\tString[] targetArray = new String[] { pattern };\n+    String[] targetArray = new String[] { pattern };\n \t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n \t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n \t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n \t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n \n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), null);\n-\t}\n+\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, Filter.createANDFilter(searchFilter, typeFilter), null);\n+    }\n \n \tpublic List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+    Filter searchFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n \n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n+return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, sizeLimit);\n+    }\n \n \tpublic String getDnForCustomScript(String inum) {\n-\t\tString orgDn = organizationService.getDnForOrganization(null);\n+    String orgDn = organizationService.getDnForOrganization(null);\n \t\tif (StringHelper.isEmpty(inum)) {\n-\t\t\treturn String.format(\"ou=scripts,%s\", orgDn);\n-\t\t}\n+    return String.format(\"ou=scripts,%s\", orgDn);\n+    }\n \t\treturn String.format(\"inum=%s,ou=scripts,%s\", inum, orgDn);\n-\t}\n+    }\n \n \tpublic String baseDn() {\n-\t\treturn String.format(\"ou=scripts,%s\", organizationService.getDnForOrganization(null));\n-\t}\n+    return String.format(\"ou=scripts,%s\", organizationService.getDnForOrganization(null));\n+    }\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/167/ScriptService.java\nindex 44d2390392c..877fca1e5f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/167/ScriptService.java\n@@ -7,11 +7,9 @@\n package org.gluu.service;\n \n import java.util.List;\n-\n import javax.enterprise.context.ApplicationScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n-\n import org.gluu.model.custom.script.CustomScriptType;\n import org.gluu.model.custom.script.model.CustomScript;\n import org.gluu.persist.PersistenceEntryManager;\n@@ -25,115 +23,112 @@ import org.python.jline.internal.Log;\n  * @author Mougang T.Gasmyr\n  *\n  */\n+\n+\n @ApplicationScoped\n @Named\n public class ScriptService {\n \n-\t@Inject\n-\tprivate OrganizationService organizationService;\n-\n-\t@Inject\n-\tprivate PersistenceEntryManager persistenceEntryManager;\n-\n-\t@Inject\n-\tprotected AbstractCustomScriptService customScriptService;\n-\n-\tpublic CustomScript getScriptByInum(String inum) {\n-\t\tCustomScript result = null;\n-\t\ttry {\n-\t\t\tresult = persistenceEntryManager.find(CustomScript.class, customScriptService.buildDn(inum));\n-\t\t} catch (Exception ex) {\n-\t\t\tLog.error(\"Failed to find script by inum {}\", inum, ex);\n-\t\t}\n-\n-\t\treturn result;\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE,\n-\t\t\t\tCustomScriptType.PERSON_AUTHENTICATION.getValue());\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter scriptTypeFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByType(CustomScriptType type) {\n-\t\tFilter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, null);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), sizeLimit);\n-\t}\n-\n-\tpublic List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n-\t\tString[] targetArray = new String[] { pattern };\n-\t\tFilter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n-\t\tFilter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n-\t\tFilter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n-\t\tFilter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class,\n-\t\t\t\tFilter.createANDFilter(searchFilter, typeFilter), null);\n-\t}\n-\n-\tpublic List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n-\t\tFilter searchFilter = Filter.createNOTFilter(\n-\t\t\t\tFilter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n-\n-\t\treturn persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter,\n-\t\t\t\tsizeLimit);\n-\t}\n-\n-\tpublic String getDnForCustomScript(String inum) {\n-\t\tString orgDn = organizationService.getDnForOrganization(null);\n-\t\tif (StringHelper.isEmpty(inum)) {\n-\t\t\treturn String.format(\"ou=scripts,%s\", orgDn);\n-\t\t}\n-\t\treturn String.format(\"inum=%s,ou=scripts,%s\", inum, orgDn);\n-\t}\n-\n-\tpublic String baseDn() {\n-\t\treturn String.format(\"ou=scripts,%s\", organizationService.getDnForOrganization(null));\n-\t}\n-\n-}\n+    @Inject\n+    private OrganizationService organizationService;\n+\n+    @Inject\n+    private PersistenceEntryManager persistenceEntryManager;\n+\n+    @Inject\n+    protected AbstractCustomScriptService customScriptService;\n+\n+    public CustomScript getScriptByInum(String inum) {\n+        CustomScript result = null;\n+        try {\n+            result = persistenceEntryManager.find(CustomScript.class, customScriptService.buildDn(inum));\n+        } catch (Exception ex) {\n+            Log.error(\"Failed to find script by inum {}\", inum, ex);\n+        }\n+\n+        return result;\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findCustomAuthScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION.getValue());\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, sizeLimit);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(String pattern, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter scriptTypeFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, Filter.createANDFilter(searchFilter, scriptTypeFilter), sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type, int sizeLimit) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByType(CustomScriptType type) {\n+        Filter searchFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, null);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type, int sizeLimit) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null),\n+            CustomScript.class,\n+                Filter.createANDFilter(searchFilter, typeFilter),\n+                    sizeLimit);\n+    }\n+\n+    public List<CustomScript> findScriptByPatternAndType(String pattern, CustomScriptType type) {\n+        String[] targetArray = new String[] {pattern};\n+        Filter descriptionFilter = Filter.createSubstringFilter(OxConstants.DESCRIPTION, null, targetArray, null);\n+        Filter displayNameFilter = Filter.createSubstringFilter(OxConstants.DISPLAY_NAME, null, targetArray, null);\n+        Filter searchFilter = Filter.createORFilter(descriptionFilter, displayNameFilter);\n+        Filter typeFilter = Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, type);\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null),\n+            CustomScript.class,\n+                Filter.createANDFilter(searchFilter, typeFilter),\n+                    null);\n+    }\n+\n+    public List<CustomScript> findOtherCustomScripts(int sizeLimit) {\n+        Filter searchFilter = Filter.createNOTFilter(Filter.createEqualityFilter(OxConstants.SCRIPT_TYPE, CustomScriptType.PERSON_AUTHENTICATION));\n+\n+        return persistenceEntryManager.findEntries(getDnForCustomScript(null), CustomScript.class, searchFilter, sizeLimit);\n+    }\n+\n+    public String getDnForCustomScript(String inum) {\n+        String orgDn = organizationService.getDnForOrganization(null);\n+        if (StringHelper.isEmpty(inum)) {\n+            return String.format(\"ou=scripts,%s\", orgDn);\n+        }\n+\n+        return String.format(\"inum=%s,ou=scripts,%s\", inum, orgDn);\n+    }\n+\n+    public String baseDn() {\n+        return String.format(\"ou=scripts,%s\", organizationService.getDnForOrganization(null));\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 112
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/167/ScriptService.java\nindex 44d2390392c..2d8bbabae95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/167/ScriptService.java\n@@ -29,7 +29,7 @@ import org.python.jline.internal.Log;\n @Named\n public class ScriptService {\n \n-\t@Inject\n+    @Inject\n \tprivate OrganizationService organizationService;\n \n \t@Inject\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "33",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/167/ScriptService.java\nindex 44d2390392c..2d8bbabae95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/167/ScriptService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/167/ScriptService.java\n@@ -29,7 +29,7 @@ import org.python.jline.internal.Log;\n @Named\n public class ScriptService {\n \n-\t@Inject\n+    @Inject\n \tprivate OrganizationService organizationService;\n \n \t@Inject\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}