{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2747",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2747/ChainCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2747/ChainCheck.java\nindex 728a9379b53..9ea8cf2147a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2747/ChainCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2747/ChainCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import java.util.Arrays;\n@@ -31,36 +32,36 @@ import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n public class ChainCheck<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-        implements ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n+    implements ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n {\n-    private static final int MAX_BLOCK_PER_RECORD_COUNT = 4;\n-    private final PrimitiveIntSet keys = Primitive.intSet();\n+  private static final int MAX_BLOCK_PER_RECORD_COUNT = 4;\n+  private final PrimitiveIntSet keys = Primitive.intSet();\n \n-    @Override\n-    public void checkReference( RECORD record, PropertyRecord property, CheckerEngine<RECORD, REPORT> engine,\n-                                RecordAccess records )\n+  @Override\n+  public void checkReference(RECORD record, PropertyRecord property, CheckerEngine<RECORD, REPORT> engine,\n+                             RecordAccess records)\n+  {\n+    for (int key : keys(property))\n+    {\n+      if (!keys.add(key))\n+      {\n+        engine.report().propertyKeyNotUniqueInChain();\n+      }\n+    }\n+    if (!Record.NO_NEXT_PROPERTY.is(property.getNextProp()))\n     {\n-        for ( int key : keys( property ) )\n-        {\n-            if ( !keys.add( key ) )\n-            {\n-                engine.report().propertyKeyNotUniqueInChain();\n-            }\n-        }\n-        if ( !Record.NO_NEXT_PROPERTY.is( property.getNextProp() ) )\n-        {\n-            engine.comparativeCheck( records.property( property.getNextProp() ), this );\n-        }\n+      engine.comparativeCheck(records.property(property.getNextProp()), this);\n     }\n+  }\n \n-    public static int[] keys( PropertyRecord property )\n+  public static int[] keys(PropertyRecord property)\n+  {\n+    int[] toStartWith = new int[MAX_BLOCK_PER_RECORD_COUNT];\n+    int index = 0;\n+    for (PropertyBlock propertyBlock : property)\n     {\n-        int[] toStartWith = new int[ MAX_BLOCK_PER_RECORD_COUNT ];\n-        int index = 0;\n-        for ( PropertyBlock propertyBlock : property )\n-        {\n-            toStartWith[index++] = propertyBlock.getKeyIndexId();\n-        }\n-        return Arrays.copyOf( toStartWith, index );\n+      toStartWith[index++] = propertyBlock.getKeyIndexId();\n     }\n+    return Arrays.copyOf(toStartWith, index);\n+  }\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2747/ChainCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2747/ChainCheck.java\nindex 728a9379b53..6ef9337a12a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2747/ChainCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2747/ChainCheck.java\n@@ -30,16 +30,14 @@ import org.neo4j.kernel.impl.store.record.PropertyBlock;\n import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n-public class ChainCheck<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-        implements ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n+public class ChainCheck<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> implements ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n {\n     private static final int MAX_BLOCK_PER_RECORD_COUNT = 4;\n     private final PrimitiveIntSet keys = Primitive.intSet();\n \n     @Override\n-    public void checkReference( RECORD record, PropertyRecord property, CheckerEngine<RECORD, REPORT> engine,\n-                                RecordAccess records )\n-    {\n+    public void checkReference( RECORD record, PropertyRecord property, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n+{\n         for ( int key : keys( property ) )\n         {\n             if ( !keys.add( key ) )\n@@ -61,6 +59,7 @@ public class ChainCheck<RECORD extends PrimitiveRecord, REPORT extends Consisten\n         {\n             toStartWith[index++] = propertyBlock.getKeyIndexId();\n         }\n-        return Arrays.copyOf( toStartWith, index );\n+\n+return Arrays.copyOf( toStartWith, index );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}