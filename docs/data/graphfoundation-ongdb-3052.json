{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3052",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3052/Eccentricity.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3052/Eccentricity.java\nindex 9f05134f65a..c5d37b3c28c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3052/Eccentricity.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3052/Eccentricity.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.centrality;\n \n import java.util.Comparator;\n@@ -28,83 +29,81 @@ import org.neo4j.graphdb.Node;\n /**\n  * This can be used to calculate the eccentricity of nodes, which is defined as\n  * the maximum distance to any other node.\n- * @complexity Using a {@link SingleSourceShortestPath} algorithm with time\n- *             complexity A, this algorithm runs in time O(A + n) for every\n- *             vertex the eccentricity is to be computed for. Thus doing it for\n- *             all vertices takes O(n * (A + n)) time.\n+ *\n  * @author Patrik Larsson\n+ * @complexity Using a {@link SingleSourceShortestPath} algorithm with time\n+ * complexity A, this algorithm runs in time O(A + n) for every\n+ * vertex the eccentricity is to be computed for. Thus doing it for\n+ * all vertices takes O(n * (A + n)) time.\n  */\n public class Eccentricity<ShortestPathCostType> extends\n-    ShortestPathBasedCentrality<ShortestPathCostType,ShortestPathCostType>\n+    ShortestPathBasedCentrality<ShortestPathCostType, ShortestPathCostType>\n {\n-    Comparator<ShortestPathCostType> distanceComparator;\n+  Comparator<ShortestPathCostType> distanceComparator;\n \n-    /**\n-     * Default constructor.\n-     * @param singleSourceShortestPath\n-     *            Underlying singleSourceShortestPath.\n-     * @param zeroValue\n-     *            Default value.\n-     * @param nodeSet\n-     *            A set containing the nodes for which centrality values should\n-     *            be computed.\n-     * @param distanceComparator\n-     *            Object being able to compare distances, in order to sort out\n-     *            the largest.\n-     */\n-    public Eccentricity(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        ShortestPathCostType zeroValue, Set<Node> nodeSet,\n-        Comparator<ShortestPathCostType> distanceComparator )\n+  /**\n+   * Default constructor.\n+   *\n+   * @param singleSourceShortestPath Underlying singleSourceShortestPath.\n+   * @param zeroValue                Default value.\n+   * @param nodeSet                  A set containing the nodes for which centrality values should\n+   *                                 be computed.\n+   * @param distanceComparator       Object being able to compare distances, in order to sort out\n+   *                                 the largest.\n+   */\n+  public Eccentricity(\n+      SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n+      ShortestPathCostType zeroValue, Set<Node> nodeSet,\n+      Comparator<ShortestPathCostType> distanceComparator)\n+  {\n+    super(singleSourceShortestPath, null, zeroValue, nodeSet);\n+    this.distanceComparator = distanceComparator;\n+  }\n+\n+  /*\n+   * Since we dont need to do the calculation for all the nodes before we get\n+   * a usable result, we can just calculate the result for any given node when\n+   * it is asked for. This function just checks if the value has been computed\n+   * before, and computes it if needed.\n+   */\n+  @Override\n+  public ShortestPathCostType getCentrality(Node node)\n+  {\n+    ShortestPathCostType centrality = centralities.get(node);\n+    if (centrality == null)\n     {\n-        super( singleSourceShortestPath, null, zeroValue, nodeSet );\n-        this.distanceComparator = distanceComparator;\n+      return null;\n     }\n-\n-    /*\n-     * Since we dont need to do the calculation for all the nodes before we get\n-     * a usable result, we can just calculate the result for any given node when\n-     * it is asked for. This function just checks if the value has been computed\n-     * before, and computes it if needed.\n-     */\n-    @Override\n-    public ShortestPathCostType getCentrality( Node node )\n+    // Not calculated yet, or if it actually is 0 it is very fast to\n+    // compute so just do it.\n+    if (centrality.equals(zeroValue))\n     {\n-        ShortestPathCostType centrality = centralities.get( node );\n-        if ( centrality == null )\n-        {\n-            return null;\n-        }\n-        // Not calculated yet, or if it actually is 0 it is very fast to\n-        // compute so just do it.\n-        if ( centrality.equals( zeroValue ) )\n-        {\n-            singleSourceShortestPath.reset();\n-            singleSourceShortestPath.setStartNode( node );\n-            processShortestPaths( node, singleSourceShortestPath );\n-        }\n-        // When the value is calculated, just retrieve it normally\n-        return centralities.get( node );\n+      singleSourceShortestPath.reset();\n+      singleSourceShortestPath.setStartNode(node);\n+      processShortestPaths(node, singleSourceShortestPath);\n     }\n+    // When the value is calculated, just retrieve it normally\n+    return centralities.get(node);\n+  }\n \n-    @Override\n-    public void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n+  @Override\n+  public void processShortestPaths(Node node,\n+                                   SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath)\n+  {\n+    ShortestPathCostType maximumDistance = null;\n+    for (Node targetNode : nodeSet)\n+    {\n+      ShortestPathCostType targetDistance = singleSourceShortestPath\n+          .getCost(targetNode);\n+      if (maximumDistance == null\n+          || distanceComparator.compare(maximumDistance, targetDistance) < 0)\n+      {\n+        maximumDistance = targetDistance;\n+      }\n+    }\n+    if (maximumDistance != null)\n     {\n-        ShortestPathCostType maximumDistance = null;\n-        for ( Node targetNode : nodeSet )\n-        {\n-            ShortestPathCostType targetDistance = singleSourceShortestPath\n-                .getCost( targetNode );\n-            if ( maximumDistance == null\n-                || distanceComparator.compare( maximumDistance, targetDistance ) < 0 )\n-            {\n-                maximumDistance = targetDistance;\n-            }\n-        }\n-        if ( maximumDistance != null )\n-        {\n-            setCentralityForNode( node, maximumDistance );\n-        }\n+      setCentralityForNode(node, maximumDistance);\n     }\n+  }\n }\n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "76",
                    "severity": "error",
                    "message": "'{' at column 76 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3052/Eccentricity.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3052/Eccentricity.java\nindex 9f05134f65a..61c4cce8315 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3052/Eccentricity.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3052/Eccentricity.java\n@@ -35,8 +35,7 @@ import org.neo4j.graphdb.Node;\n  * @author Patrik Larsson\n  */\n public class Eccentricity<ShortestPathCostType> extends\n-    ShortestPathBasedCentrality<ShortestPathCostType,ShortestPathCostType>\n-{\n+    ShortestPathBasedCentrality<ShortestPathCostType,ShortestPathCostType> {\n     Comparator<ShortestPathCostType> distanceComparator;\n \n     /**\n@@ -52,11 +51,9 @@ public class Eccentricity<ShortestPathCostType> extends\n      *            Object being able to compare distances, in order to sort out\n      *            the largest.\n      */\n-    public Eccentricity(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        ShortestPathCostType zeroValue, Set<Node> nodeSet,\n-        Comparator<ShortestPathCostType> distanceComparator )\n-    {\n+    public Eccentricity( SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n+        ShortestPathCostType zeroValue, Set<Node> nodeSet, Comparator<ShortestPathCostType> distanceComparator )\n+{\n         super( singleSourceShortestPath, null, zeroValue, nodeSet );\n         this.distanceComparator = distanceComparator;\n     }\n@@ -88,17 +85,15 @@ public class Eccentricity<ShortestPathCostType> extends\n     }\n \n     @Override\n-    public void processShortestPaths( Node node,\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n-    {\n+    public void processShortestPaths( Node node, SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath )\n+{\n         ShortestPathCostType maximumDistance = null;\n         for ( Node targetNode : nodeSet )\n         {\n-            ShortestPathCostType targetDistance = singleSourceShortestPath\n-                .getCost( targetNode );\n-            if ( maximumDistance == null\n+            ShortestPathCostType targetDistance = singleSourceShortestPath.getCost( targetNode );\n+if ( maximumDistance == null\n                 || distanceComparator.compare( maximumDistance, targetDistance ) < 0 )\n-            {\n+{\n                 maximumDistance = targetDistance;\n             }\n         }\n@@ -107,4 +102,4 @@ public class Eccentricity<ShortestPathCostType> extends\n             setCentralityForNode( node, maximumDistance );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}