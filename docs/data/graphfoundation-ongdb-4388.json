{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4388",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4388/HttpConnectorValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4388/HttpConnectorValidator.java\nindex 32a964d70aa..1cefeadd388 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4388/HttpConnectorValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4388/HttpConnectorValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.configuration;\n \n import java.util.EnumSet;\n@@ -46,217 +47,216 @@ import static org.neo4j.kernel.configuration.Settings.setting;\n \n public class HttpConnectorValidator extends ConnectorValidator\n {\n-    private static final Consumer<String> nullConsumer = s ->\n-    {\n+  private static final Consumer<String> nullConsumer = s ->\n+  {\n \n-    };\n+  };\n \n-    public HttpConnectorValidator()\n-    {\n-        super( HTTP );\n-    }\n+  public HttpConnectorValidator()\n+  {\n+    super(HTTP);\n+  }\n \n-    @Override\n-    @Nonnull\n-    protected Optional<Setting<Object>> getSettingFor( @Nonnull String settingName, @Nonnull Map<String,String> params )\n-    {\n-        // owns has already verified that 'type' is correct and that this split is possible\n-        String[] parts = settingName.split( \"\\\\.\" );\n-        final String name = parts[2];\n-        final String subsetting = parts[3];\n+  @Override\n+  @Nonnull\n+  protected Optional<Setting<Object>> getSettingFor(@Nonnull String settingName, @Nonnull Map<String, String> params)\n+  {\n+    // owns has already verified that 'type' is correct and that this split is possible\n+    String[] parts = settingName.split(\"\\\\.\");\n+    final String name = parts[2];\n+    final String subsetting = parts[3];\n \n-        final boolean encrypted = encryptionSetting( name ).apply( params::get ) == Encryption.TLS;\n-        BaseSetting setting;\n+    final boolean encrypted = encryptionSetting(name).apply(params::get) == Encryption.TLS;\n+    BaseSetting setting;\n \n-        switch ( subsetting )\n-        {\n-        case \"enabled\":\n-            setting = (BaseSetting) setting( settingName, BOOLEAN, \"false\" );\n-            setting.setDescription( \"Enable this connector.\" );\n+    switch (subsetting)\n+    {\n+      case \"enabled\":\n+        setting = (BaseSetting) setting(settingName, BOOLEAN, \"false\");\n+        setting.setDescription(\"Enable this connector.\");\n         break;\n-        case \"type\":\n-            setting =\n-                    (BaseSetting) setting( settingName, options( Connector.ConnectorType.class ), NO_DEFAULT );\n-            setting.setDeprecated( true );\n-            setting.setDescription( \"Connector type. This setting is deprecated and its value will instead be \" +\n-                    \"inferred from the name of the connector.\" );\n-            break;\n-        case \"encryption\":\n-            setting = encryptionSetting( name );\n-            setting.setDescription( \"Enable TLS for this connector.\" );\n-            break;\n-        case \"address\":\n-            setting = listenAddress( settingName, defaultPort( name, params ) );\n-            setting.setDeprecated( true );\n-            setting.setReplacement( \"dbms.connector.\" + name + \".listen_address\" );\n-            setting.setDescription( \"Address the connector should bind to. Deprecated and replaced by \"\n-                    + setting.replacement().get() + \".\" );\n-            break;\n-        case \"listen_address\":\n-            setting = listenAddress( settingName, defaultPort( name, params ) );\n-            setting.setDescription( \"Address the connector should bind to.\" );\n-            break;\n-        case \"advertised_address\":\n-            setting = advertisedAddress( settingName,\n-                    listenAddress( settingName, defaultPort( name, params ) ) );\n-            setting.setDescription( \"Advertised address for this connector.\" );\n-            break;\n-        default:\n-            return Optional.empty();\n-        }\n-\n-        // If not deprecated for other reasons\n-        if ( isDeprecatedConnectorName( name ) && !setting.deprecated() )\n-        {\n-            setting.setDeprecated( true );\n-            setting.setReplacement( format( \"%s.%s.%s.%s\", parts[0], parts[1],\n-                    encrypted ? \"https\" : \"http\",\n-                    subsetting) );\n-        }\n-        return Optional.of( setting );\n+      case \"type\":\n+        setting =\n+            (BaseSetting) setting(settingName, options(Connector.ConnectorType.class), NO_DEFAULT);\n+        setting.setDeprecated(true);\n+        setting.setDescription(\"Connector type. This setting is deprecated and its value will instead be \" +\n+            \"inferred from the name of the connector.\");\n+        break;\n+      case \"encryption\":\n+        setting = encryptionSetting(name);\n+        setting.setDescription(\"Enable TLS for this connector.\");\n+        break;\n+      case \"address\":\n+        setting = listenAddress(settingName, defaultPort(name, params));\n+        setting.setDeprecated(true);\n+        setting.setReplacement(\"dbms.connector.\" + name + \".listen_address\");\n+        setting.setDescription(\"Address the connector should bind to. Deprecated and replaced by \"\n+            + setting.replacement().get() + \".\");\n+        break;\n+      case \"listen_address\":\n+        setting = listenAddress(settingName, defaultPort(name, params));\n+        setting.setDescription(\"Address the connector should bind to.\");\n+        break;\n+      case \"advertised_address\":\n+        setting = advertisedAddress(settingName,\n+            listenAddress(settingName, defaultPort(name, params)));\n+        setting.setDescription(\"Advertised address for this connector.\");\n+        break;\n+      default:\n+        return Optional.empty();\n     }\n \n-    /**\n-     * @param name of connector, like 'bob' in 'dbms.connector.bob.type = HTTP'\n-     * @param rawConfig to parse\n-     * @return the default for the encryption level designated for the HTTP connector\n-     */\n-    private int defaultPort( @Nonnull String name, @Nonnull Map<String,String> rawConfig )\n+    // If not deprecated for other reasons\n+    if (isDeprecatedConnectorName(name) && !setting.deprecated())\n     {\n-        switch ( name )\n-        {\n-        case \"http\":\n-            return Encryption.NONE.defaultPort;\n-        case \"https\":\n-            return TLS.defaultPort;\n-        default:\n-            Setting<Encryption> es = encryptionSetting( name );\n-            return es.apply( rawConfig::get ).defaultPort;\n-        }\n+      setting.setDeprecated(true);\n+      setting.setReplacement(format(\"%s.%s.%s.%s\", parts[0], parts[1],\n+          encrypted ? \"https\" : \"http\",\n+          subsetting));\n     }\n+    return Optional.of(setting);\n+  }\n \n-    @Nonnull\n-    private static Map<String,String> assertEncryption( @Nonnull String name,\n-            @Nonnull Setting<?> setting,\n-            @Nonnull Map<String,String> rawConfig ) throws InvalidSettingException\n+  /**\n+   * @param name      of connector, like 'bob' in 'dbms.connector.bob.type = HTTP'\n+   * @param rawConfig to parse\n+   * @return the default for the encryption level designated for the HTTP connector\n+   */\n+  private int defaultPort(@Nonnull String name, @Nonnull Map<String, String> rawConfig)\n+  {\n+    switch (name)\n     {\n-        Map<String,String> result = setting.validate( rawConfig, nullConsumer );\n-\n-        Optional<?> encryption = Optional.ofNullable( setting.apply( rawConfig::get ) );\n+      case \"http\":\n+        return Encryption.NONE.defaultPort;\n+      case \"https\":\n+        return TLS.defaultPort;\n+      default:\n+        Setting<Encryption> es = encryptionSetting(name);\n+        return es.apply(rawConfig::get).defaultPort;\n+    }\n+  }\n \n-        if ( \"https\".equalsIgnoreCase( name ) )\n-        {\n-            if ( encryption.isPresent() && encryption.get() != TLS )\n-            {\n-                throw new InvalidSettingException(\n-                        format( \"'%s' is only allowed to be '%s'; not '%s'\",\n-                                setting.name(), TLS.name(), encryption.get() ) );\n-            }\n-        }\n-        else if ( \"http\".equalsIgnoreCase( name ) )\n-        {\n-            if ( encryption.isPresent() && encryption.get() != NONE )\n-            {\n-                throw new InvalidSettingException(\n-                        format( \"'%s' is only allowed to be '%s'; not '%s'\",\n-                                setting.name(), NONE.name(), encryption.get() ) );\n-            }\n-        }\n+  @Nonnull\n+  private static Map<String, String> assertEncryption(@Nonnull String name,\n+                                                      @Nonnull Setting<?> setting,\n+                                                      @Nonnull Map<String, String> rawConfig) throws InvalidSettingException\n+  {\n+    Map<String, String> result = setting.validate(rawConfig, nullConsumer);\n \n-        return result;\n-    }\n+    Optional<?> encryption = Optional.ofNullable(setting.apply(rawConfig::get));\n \n-    @Nonnull\n-    public static BaseSetting<HttpConnector.Encryption> encryptionSetting( @Nonnull String name )\n+    if (\"https\".equalsIgnoreCase(name))\n+    {\n+      if (encryption.isPresent() && encryption.get() != TLS)\n+      {\n+        throw new InvalidSettingException(\n+            format(\"'%s' is only allowed to be '%s'; not '%s'\",\n+                setting.name(), TLS.name(), encryption.get()));\n+      }\n+    } else if (\"http\".equalsIgnoreCase(name))\n     {\n-        return encryptionSetting( name, Encryption.NONE );\n+      if (encryption.isPresent() && encryption.get() != NONE)\n+      {\n+        throw new InvalidSettingException(\n+            format(\"'%s' is only allowed to be '%s'; not '%s'\",\n+                setting.name(), NONE.name(), encryption.get()));\n+      }\n     }\n \n-    @Nonnull\n-    public static BaseSetting<HttpConnector.Encryption> encryptionSetting( @Nonnull String name, Encryption\n-            defaultValue )\n-    {\n-        Setting<Encryption> s = setting( \"dbms.connector.\" + name + \".encryption\",\n-                options( Encryption.class ), defaultValue.name() );\n+    return result;\n+  }\n \n-        return new BaseSetting<Encryption>()\n-        {\n-            @Override\n-            public boolean deprecated()\n-            {\n-                // For HTTP the encryption is decided by the connector name\n-                return true;\n-            }\n+  @Nonnull\n+  public static BaseSetting<HttpConnector.Encryption> encryptionSetting(@Nonnull String name)\n+  {\n+    return encryptionSetting(name, Encryption.NONE);\n+  }\n \n-            @Override\n-            public Optional<String> replacement()\n-            {\n-                return Optional.empty();\n-            }\n+  @Nonnull\n+  public static BaseSetting<HttpConnector.Encryption> encryptionSetting(@Nonnull String name, Encryption\n+      defaultValue)\n+  {\n+    Setting<Encryption> s = setting(\"dbms.connector.\" + name + \".encryption\",\n+        options(Encryption.class), defaultValue.name());\n \n-            @Override\n-            public boolean internal()\n-            {\n-                return false;\n-            }\n+    return new BaseSetting<Encryption>()\n+    {\n+      @Override\n+      public boolean deprecated()\n+      {\n+        // For HTTP the encryption is decided by the connector name\n+        return true;\n+      }\n \n-            @Override\n-            public Optional<String> documentedDefaultValue()\n-            {\n-                return Optional.empty();\n-            }\n+      @Override\n+      public Optional<String> replacement()\n+      {\n+        return Optional.empty();\n+      }\n \n-            @Override\n-            public String valueDescription()\n-            {\n-                return describeOneOf( EnumSet.allOf( Encryption.class ) );\n-            }\n+      @Override\n+      public boolean internal()\n+      {\n+        return false;\n+      }\n \n-            @Override\n-            public Optional<String> description()\n-            {\n-                return Optional.of( \"Enable TLS for this connector. This is deprecated and is decided based on the \" +\n-                        \"connector name instead.\" );\n-            }\n+      @Override\n+      public Optional<String> documentedDefaultValue()\n+      {\n+        return Optional.empty();\n+      }\n \n-            @Override\n-            public String name()\n-            {\n-                return s.name();\n-            }\n+      @Override\n+      public String valueDescription()\n+      {\n+        return describeOneOf(EnumSet.allOf(Encryption.class));\n+      }\n \n-            @Override\n-            public void withScope( Function<String,String> scopingRule )\n-            {\n-                s.withScope( scopingRule );\n-            }\n+      @Override\n+      public Optional<String> description()\n+      {\n+        return Optional.of(\"Enable TLS for this connector. This is deprecated and is decided based on the \" +\n+            \"connector name instead.\");\n+      }\n \n-            @Override\n-            public String getDefaultValue()\n-            {\n-                return s.getDefaultValue();\n-            }\n+      @Override\n+      public String name()\n+      {\n+        return s.name();\n+      }\n \n-            @Override\n-            public Encryption from( Configuration config )\n-            {\n-                return s.from( config );\n-            }\n+      @Override\n+      public void withScope(Function<String, String> scopingRule)\n+      {\n+        s.withScope(scopingRule);\n+      }\n \n-            @Override\n-            public Encryption apply( Function<String,String> stringStringFunction )\n-            {\n-                return s.apply( stringStringFunction );\n-            }\n+      @Override\n+      public String getDefaultValue()\n+      {\n+        return s.getDefaultValue();\n+      }\n \n-            @Override\n-            public Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer )\n-                    throws InvalidSettingException\n-            {\n-                Map<String,String> result = s.validate( rawConfig, warningConsumer );\n-                assertEncryption( name, s, rawConfig );\n-                return result;\n-            }\n-        };\n-    }\n+      @Override\n+      public Encryption from(Configuration config)\n+      {\n+        return s.from(config);\n+      }\n+\n+      @Override\n+      public Encryption apply(Function<String, String> stringStringFunction)\n+      {\n+        return s.apply(stringStringFunction);\n+      }\n+\n+      @Override\n+      public Map<String, String> validate(Map<String, String> rawConfig, Consumer<String> warningConsumer)\n+          throws InvalidSettingException\n+      {\n+        Map<String, String> result = s.validate(rawConfig, warningConsumer);\n+        assertEncryption(name, s, rawConfig);\n+        return result;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 225
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4388/HttpConnectorValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4388/HttpConnectorValidator.java\nindex 32a964d70aa..ea957519556 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4388/HttpConnectorValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4388/HttpConnectorValidator.java\n@@ -48,8 +48,7 @@ public class HttpConnectorValidator extends ConnectorValidator\n {\n     private static final Consumer<String> nullConsumer = s ->\n     {\n-\n-    };\n+};\n \n     public HttpConnectorValidator()\n     {\n@@ -67,20 +66,17 @@ public class HttpConnectorValidator extends ConnectorValidator\n \n         final boolean encrypted = encryptionSetting( name ).apply( params::get ) == Encryption.TLS;\n         BaseSetting setting;\n-\n-        switch ( subsetting )\n+switch ( subsetting )\n         {\n         case \"enabled\":\n             setting = (BaseSetting) setting( settingName, BOOLEAN, \"false\" );\n             setting.setDescription( \"Enable this connector.\" );\n-        break;\n-        case \"type\":\n-            setting =\n-                    (BaseSetting) setting( settingName, options( Connector.ConnectorType.class ), NO_DEFAULT );\n-            setting.setDeprecated( true );\n-            setting.setDescription( \"Connector type. This setting is deprecated and its value will instead be \" +\n-                    \"inferred from the name of the connector.\" );\n-            break;\n+break;\n+    case \"type\":\n+            setting = (BaseSetting) setting( settingName, options( Connector.ConnectorType.class ), NO_DEFAULT );\n+setting.setDeprecated( true );\n+            setting.setDescription( \"Connector type. This setting is deprecated and its value will instead be \" + \"inferred from the name of the connector.\" );\n+break;\n         case \"encryption\":\n             setting = encryptionSetting( name );\n             setting.setDescription( \"Enable TLS for this connector.\" );\n@@ -89,9 +85,8 @@ public class HttpConnectorValidator extends ConnectorValidator\n             setting = listenAddress( settingName, defaultPort( name, params ) );\n             setting.setDeprecated( true );\n             setting.setReplacement( \"dbms.connector.\" + name + \".listen_address\" );\n-            setting.setDescription( \"Address the connector should bind to. Deprecated and replaced by \"\n-                    + setting.replacement().get() + \".\" );\n-            break;\n+            setting.setDescription( \"Address the connector should bind to. Deprecated and replaced by \" + setting.replacement().get() + \".\" );\n+break;\n         case \"listen_address\":\n             setting = listenAddress( settingName, defaultPort( name, params ) );\n             setting.setDescription( \"Address the connector should bind to.\" );\n@@ -99,7 +94,7 @@ public class HttpConnectorValidator extends ConnectorValidator\n         case \"advertised_address\":\n             setting = advertisedAddress( settingName,\n                     listenAddress( settingName, defaultPort( name, params ) ) );\n-            setting.setDescription( \"Advertised address for this connector.\" );\n+setting.setDescription( \"Advertised address for this connector.\" );\n             break;\n         default:\n             return Optional.empty();\n@@ -110,10 +105,10 @@ public class HttpConnectorValidator extends ConnectorValidator\n         {\n             setting.setDeprecated( true );\n             setting.setReplacement( format( \"%s.%s.%s.%s\", parts[0], parts[1],\n-                    encrypted ? \"https\" : \"http\",\n-                    subsetting) );\n+                    encrypted ? \"https\" : \"http\", subsetting) );\n         }\n-        return Optional.of( setting );\n+\n+return Optional.of( setting );\n     }\n \n     /**\n@@ -139,28 +134,25 @@ public class HttpConnectorValidator extends ConnectorValidator\n     private static Map<String,String> assertEncryption( @Nonnull String name,\n             @Nonnull Setting<?> setting,\n             @Nonnull Map<String,String> rawConfig ) throws InvalidSettingException\n-    {\n+{\n         Map<String,String> result = setting.validate( rawConfig, nullConsumer );\n \n         Optional<?> encryption = Optional.ofNullable( setting.apply( rawConfig::get ) );\n-\n-        if ( \"https\".equalsIgnoreCase( name ) )\n+if ( \"https\".equalsIgnoreCase( name ) )\n         {\n             if ( encryption.isPresent() && encryption.get() != TLS )\n             {\n-                throw new InvalidSettingException(\n-                        format( \"'%s' is only allowed to be '%s'; not '%s'\",\n+                throw new InvalidSettingException( format( \"'%s' is only allowed to be '%s'; not '%s'\",\n                                 setting.name(), TLS.name(), encryption.get() ) );\n-            }\n+    }\n         }\n         else if ( \"http\".equalsIgnoreCase( name ) )\n         {\n             if ( encryption.isPresent() && encryption.get() != NONE )\n             {\n-                throw new InvalidSettingException(\n-                        format( \"'%s' is only allowed to be '%s'; not '%s'\",\n+                throw new InvalidSettingException( format( \"'%s' is only allowed to be '%s'; not '%s'\",\n                                 setting.name(), NONE.name(), encryption.get() ) );\n-            }\n+    }\n         }\n \n         return result;\n@@ -173,13 +165,11 @@ public class HttpConnectorValidator extends ConnectorValidator\n     }\n \n     @Nonnull\n-    public static BaseSetting<HttpConnector.Encryption> encryptionSetting( @Nonnull String name, Encryption\n-            defaultValue )\n+    public static BaseSetting<HttpConnector.Encryption> encryptionSetting( @Nonnull String name, Encryption defaultValue )\n     {\n         Setting<Encryption> s = setting( \"dbms.connector.\" + name + \".encryption\",\n                 options( Encryption.class ), defaultValue.name() );\n-\n-        return new BaseSetting<Encryption>()\n+return new BaseSetting<Encryption>()\n         {\n             @Override\n             public boolean deprecated()\n@@ -215,8 +205,7 @@ public class HttpConnectorValidator extends ConnectorValidator\n             @Override\n             public Optional<String> description()\n             {\n-                return Optional.of( \"Enable TLS for this connector. This is deprecated and is decided based on the \" +\n-                        \"connector name instead.\" );\n+                return Optional.of( \"Enable TLS for this connector. This is deprecated and is decided based on the \" + \"connector name instead.\" );\n             }\n \n             @Override\n@@ -250,13 +239,12 @@ public class HttpConnectorValidator extends ConnectorValidator\n             }\n \n             @Override\n-            public Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer )\n-                    throws InvalidSettingException\n-            {\n+            public Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer ) throws InvalidSettingException\n+{\n                 Map<String,String> result = s.validate( rawConfig, warningConsumer );\n                 assertEncryption( name, s, rawConfig );\n                 return result;\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "111",
                    "column": "47",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "column": "40",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "155",
                    "column": "40",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4388/HttpConnectorValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4388/HttpConnectorValidator.java\nindex 32a964d70aa..9361c0eff1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4388/HttpConnectorValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4388/HttpConnectorValidator.java\n@@ -25,30 +25,37 @@ import java.util.Optional;\n import java.util.function.Consumer;\n import java.util.function.Function;\n import javax.annotation.Nonnull;\n-\n import org.neo4j.graphdb.config.BaseSetting;\n import org.neo4j.graphdb.config.Configuration;\n import org.neo4j.graphdb.config.InvalidSettingException;\n import org.neo4j.graphdb.config.Setting;\n import org.neo4j.kernel.configuration.HttpConnector.Encryption;\n-\n import static java.lang.String.format;\n+\n import static org.neo4j.kernel.configuration.Connector.ConnectorType.HTTP;\n+\n import static org.neo4j.kernel.configuration.HttpConnector.Encryption.NONE;\n+\n import static org.neo4j.kernel.configuration.HttpConnector.Encryption.TLS;\n+\n import static org.neo4j.kernel.configuration.Settings.BOOLEAN;\n+\n import static org.neo4j.kernel.configuration.Settings.NO_DEFAULT;\n+\n import static org.neo4j.kernel.configuration.Settings.advertisedAddress;\n+\n import static org.neo4j.kernel.configuration.Settings.describeOneOf;\n+\n import static org.neo4j.kernel.configuration.Settings.listenAddress;\n+\n import static org.neo4j.kernel.configuration.Settings.options;\n+\n import static org.neo4j.kernel.configuration.Settings.setting;\n \n public class HttpConnectorValidator extends ConnectorValidator\n {\n     private static final Consumer<String> nullConsumer = s ->\n     {\n-\n     };\n \n     public HttpConnectorValidator()\n@@ -62,24 +69,20 @@ public class HttpConnectorValidator extends ConnectorValidator\n     {\n         // owns has already verified that 'type' is correct and that this split is possible\n         String[] parts = settingName.split( \"\\\\.\" );\n-        final String name = parts[2];\n-        final String subsetting = parts[3];\n-\n+        final String name = parts[ 2];\n+        final String subsetting = parts[ 3];\n         final boolean encrypted = encryptionSetting( name ).apply( params::get ) == Encryption.TLS;\n         BaseSetting setting;\n-\n         switch ( subsetting )\n         {\n         case \"enabled\":\n             setting = (BaseSetting) setting( settingName, BOOLEAN, \"false\" );\n             setting.setDescription( \"Enable this connector.\" );\n-        break;\n+            break;\n         case \"type\":\n-            setting =\n-                    (BaseSetting) setting( settingName, options( Connector.ConnectorType.class ), NO_DEFAULT );\n+            setting = (BaseSetting) setting( settingName, options( Connector.ConnectorType.class ), NO_DEFAULT );\n             setting.setDeprecated( true );\n-            setting.setDescription( \"Connector type. This setting is deprecated and its value will instead be \" +\n-                    \"inferred from the name of the connector.\" );\n+            setting.setDescription( \"Connector type. This setting is deprecated and its value will instead be \" + \"inferred from the name of the connector.\" );\n             break;\n         case \"encryption\":\n             setting = encryptionSetting( name );\n@@ -89,16 +92,14 @@ public class HttpConnectorValidator extends ConnectorValidator\n             setting = listenAddress( settingName, defaultPort( name, params ) );\n             setting.setDeprecated( true );\n             setting.setReplacement( \"dbms.connector.\" + name + \".listen_address\" );\n-            setting.setDescription( \"Address the connector should bind to. Deprecated and replaced by \"\n-                    + setting.replacement().get() + \".\" );\n+            setting.setDescription( \"Address the connector should bind to. Deprecated and replaced by \" + setting.replacement().get() + \".\" );\n             break;\n         case \"listen_address\":\n             setting = listenAddress( settingName, defaultPort( name, params ) );\n             setting.setDescription( \"Address the connector should bind to.\" );\n             break;\n         case \"advertised_address\":\n-            setting = advertisedAddress( settingName,\n-                    listenAddress( settingName, defaultPort( name, params ) ) );\n+            setting = advertisedAddress( settingName, listenAddress( settingName, defaultPort( name, params ) ) );\n             setting.setDescription( \"Advertised address for this connector.\" );\n             break;\n         default:\n@@ -106,13 +107,13 @@ public class HttpConnectorValidator extends ConnectorValidator\n         }\n \n         // If not deprecated for other reasons\n-        if ( isDeprecatedConnectorName( name ) && !setting.deprecated() )\n+\n+        if ( isDeprecatedConnectorName( name )&& ! setting.deprecated() )\n         {\n             setting.setDeprecated( true );\n-            setting.setReplacement( format( \"%s.%s.%s.%s\", parts[0], parts[1],\n-                    encrypted ? \"https\" : \"http\",\n-                    subsetting) );\n+            setting.setReplacement( format( \"%s.%s.%s.%s\", parts[ 0], parts[ 1], encrypted ? \"https\" : \"http\", subsetting ) );\n         }\n+\n         return Optional.of( setting );\n     }\n \n@@ -121,6 +122,7 @@ public class HttpConnectorValidator extends ConnectorValidator\n      * @param rawConfig to parse\n      * @return the default for the encryption level designated for the HTTP connector\n      */\n+\n     private int defaultPort( @Nonnull String name, @Nonnull Map<String,String> rawConfig )\n     {\n         switch ( name )\n@@ -136,30 +138,23 @@ public class HttpConnectorValidator extends ConnectorValidator\n     }\n \n     @Nonnull\n-    private static Map<String,String> assertEncryption( @Nonnull String name,\n-            @Nonnull Setting<?> setting,\n-            @Nonnull Map<String,String> rawConfig ) throws InvalidSettingException\n+    private static Map<String,String> assertEncryption( @Nonnull String name, @Nonnull Setting<?> setting, @Nonnull Map<String,String> rawConfig ) throws InvalidSettingException\n     {\n         Map<String,String> result = setting.validate( rawConfig, nullConsumer );\n-\n         Optional<?> encryption = Optional.ofNullable( setting.apply( rawConfig::get ) );\n-\n         if ( \"https\".equalsIgnoreCase( name ) )\n         {\n-            if ( encryption.isPresent() && encryption.get() != TLS )\n+            if ( encryption.isPresent()&& encryption.get() != TLS )\n             {\n-                throw new InvalidSettingException(\n-                        format( \"'%s' is only allowed to be '%s'; not '%s'\",\n-                                setting.name(), TLS.name(), encryption.get() ) );\n+                throw new InvalidSettingException( format( \"'%s' is only allowed to be '%s'; not '%s'\", setting.name(), TLS.name(), encryption.get() ) );\n             }\n         }\n-        else if ( \"http\".equalsIgnoreCase( name ) )\n+        else\n+        if ( \"http\".equalsIgnoreCase( name ) )\n         {\n-            if ( encryption.isPresent() && encryption.get() != NONE )\n+            if ( encryption.isPresent()&& encryption.get() != NONE )\n             {\n-                throw new InvalidSettingException(\n-                        format( \"'%s' is only allowed to be '%s'; not '%s'\",\n-                                setting.name(), NONE.name(), encryption.get() ) );\n+                throw new InvalidSettingException( format( \"'%s' is only allowed to be '%s'; not '%s'\", setting.name(), NONE.name(), encryption.get() ) );\n             }\n         }\n \n@@ -173,90 +168,85 @@ public class HttpConnectorValidator extends ConnectorValidator\n     }\n \n     @Nonnull\n-    public static BaseSetting<HttpConnector.Encryption> encryptionSetting( @Nonnull String name, Encryption\n-            defaultValue )\n+    public static BaseSetting<HttpConnector.Encryption> encryptionSetting( @Nonnull String name, Encryption defaultValue )\n     {\n-        Setting<Encryption> s = setting( \"dbms.connector.\" + name + \".encryption\",\n-                options( Encryption.class ), defaultValue.name() );\n-\n+        Setting<Encryption> s = setting( \"dbms.connector.\" + name + \".encryption\", options( Encryption.class ), defaultValue.name() );\n         return new BaseSetting<Encryption>()\n-        {\n-            @Override\n-            public boolean deprecated()\n-            {\n+{\n+    @Override\n+    public boolean deprecated()\n+    {\n                 // For HTTP the encryption is decided by the connector name\n-                return true;\n-            }\n+        return true;\n+    }\n \n-            @Override\n-            public Optional<String> replacement()\n-            {\n-                return Optional.empty();\n-            }\n+    @Override\n+    public Optional<String> replacement()\n+    {\n+        return Optional.empty();\n+    }\n \n-            @Override\n-            public boolean internal()\n-            {\n-                return false;\n-            }\n+    @Override\n+    public boolean internal()\n+    {\n+        return false;\n+    }\n \n-            @Override\n-            public Optional<String> documentedDefaultValue()\n-            {\n-                return Optional.empty();\n-            }\n+    @Override\n+    public Optional<String> documentedDefaultValue()\n+    {\n+        return Optional.empty();\n+    }\n \n-            @Override\n-            public String valueDescription()\n-            {\n-                return describeOneOf( EnumSet.allOf( Encryption.class ) );\n-            }\n+    @Override\n+    public String valueDescription()\n+    {\n+        return describeOneOf( EnumSet.allOf( Encryption.class ) );\n+    }\n \n-            @Override\n-            public Optional<String> description()\n-            {\n-                return Optional.of( \"Enable TLS for this connector. This is deprecated and is decided based on the \" +\n-                        \"connector name instead.\" );\n-            }\n+    @Override\n+    public Optional<String> description()\n+    {\n+        return Optional.of( \"Enable TLS for this connector. This is deprecated and is decided based on the \" + \"connector name instead.\" );\n+    }\n \n-            @Override\n-            public String name()\n-            {\n-                return s.name();\n-            }\n+    @Override\n+    public String name()\n+    {\n+        return s.name();\n+    }\n \n-            @Override\n-            public void withScope( Function<String,String> scopingRule )\n-            {\n-                s.withScope( scopingRule );\n-            }\n+    @Override\n+    public void withScope( Function<String,String> scopingRule )\n+    {\n+        s.withScope( scopingRule );\n+    }\n \n-            @Override\n-            public String getDefaultValue()\n-            {\n-                return s.getDefaultValue();\n-            }\n+    @Override\n+    public String getDefaultValue()\n+    {\n+        return s.getDefaultValue();\n+    }\n \n-            @Override\n-            public Encryption from( Configuration config )\n-            {\n-                return s.from( config );\n-            }\n+    @Override\n+    public Encryption from( Configuration config )\n+    {\n+        return s.from( config );\n+    }\n \n-            @Override\n-            public Encryption apply( Function<String,String> stringStringFunction )\n-            {\n-                return s.apply( stringStringFunction );\n-            }\n+    @Override\n+    public Encryption apply( Function<String,String> stringStringFunction )\n+    {\n+        return s.apply( stringStringFunction );\n+    }\n \n-            @Override\n-            public Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer )\n-                    throws InvalidSettingException\n-            {\n-                Map<String,String> result = s.validate( rawConfig, warningConsumer );\n-                assertEncryption( name, s, rawConfig );\n-                return result;\n-            }\n-        };\n+    @Override\n+    public Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer ) throws InvalidSettingException\n+    {\n+        Map<String,String> result = s.validate( rawConfig, warningConsumer );\n+        assertEncryption( name, s, rawConfig );\n+        return result;\n+    }\n+};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 120
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}