{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1508",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "85",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1508/PluginApiAuthToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1508/PluginApiAuthToken.java\nindex 474f3e52b82..f633ac6dfb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1508/PluginApiAuthToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1508/PluginApiAuthToken.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.security.enterprise.auth.plugin;\n \n import java.util.Map;\n@@ -30,68 +31,67 @@ import static org.neo4j.kernel.api.security.AuthToken.PARAMETERS;\n \n public class PluginApiAuthToken implements AuthToken\n {\n-    private final String principal;\n-    private final char[] credentials;\n-    private final Map<String,Object> parameters;\n-\n-    private PluginApiAuthToken( String principal, char[] credentials, Map<String,Object> parameters )\n-    {\n-        this.principal = principal;\n-        this.credentials = credentials;\n-        this.parameters = parameters;\n-    }\n+  private final String principal;\n+  private final char[] credentials;\n+  private final Map<String, Object> parameters;\n \n-    @Override\n-    public String principal()\n-    {\n-        return principal;\n-    }\n+  private PluginApiAuthToken(String principal, char[] credentials, Map<String, Object> parameters)\n+  {\n+    this.principal = principal;\n+    this.credentials = credentials;\n+    this.parameters = parameters;\n+  }\n \n-    @Override\n-    public char[] credentials()\n-    {\n-        return credentials;\n-    }\n+  @Override\n+  public String principal()\n+  {\n+    return principal;\n+  }\n \n-    @Override\n-    public Map<String,Object> parameters()\n-    {\n-        return parameters;\n-    }\n+  @Override\n+  public char[] credentials()\n+  {\n+    return credentials;\n+  }\n \n-    public static AuthToken of( String principal, char[] credentials, Map<String,Object> parameters )\n-    {\n-        return new PluginApiAuthToken( principal, credentials, parameters );\n-    }\n+  @Override\n+  public Map<String, Object> parameters()\n+  {\n+    return parameters;\n+  }\n \n-    public static AuthToken createFromMap( Map<String,Object> authTokenMap ) throws InvalidAuthTokenException\n-    {\n-        String scheme = org.neo4j.kernel.api.security.AuthToken\n-                .safeCast( org.neo4j.kernel.api.security.AuthToken.SCHEME_KEY, authTokenMap );\n+  public static AuthToken of(String principal, char[] credentials, Map<String, Object> parameters)\n+  {\n+    return new PluginApiAuthToken(principal, credentials, parameters);\n+  }\n \n-        // Always require principal\n-        String principal = org.neo4j.kernel.api.security.AuthToken.safeCast( PRINCIPAL, authTokenMap );\n+  public static AuthToken createFromMap(Map<String, Object> authTokenMap) throws InvalidAuthTokenException\n+  {\n+    String scheme = org.neo4j.kernel.api.security.AuthToken\n+        .safeCast(org.neo4j.kernel.api.security.AuthToken.SCHEME_KEY, authTokenMap);\n \n-        String credentials = null;\n-        if ( scheme.equals( org.neo4j.kernel.api.security.AuthToken.BASIC_SCHEME ) )\n-        {\n-            // Basic scheme requires credentials\n-            credentials = org.neo4j.kernel.api.security.AuthToken.safeCast( CREDENTIALS, authTokenMap );\n-        }\n-        else\n-        {\n-            // Otherwise credentials are optional\n-            Object credentialsObject = authTokenMap.get( CREDENTIALS );\n-            if ( credentialsObject instanceof String )\n-            {\n-                credentials = (String) credentialsObject;\n-            }\n-        }\n-        Map<String,Object> parameters = org.neo4j.kernel.api.security.AuthToken.safeCastMap( PARAMETERS, authTokenMap );\n+    // Always require principal\n+    String principal = org.neo4j.kernel.api.security.AuthToken.safeCast(PRINCIPAL, authTokenMap);\n \n-        return PluginApiAuthToken.of(\n-                principal,\n-                credentials != null ? credentials.toCharArray() : null,\n-                parameters );\n+    String credentials = null;\n+    if (scheme.equals(org.neo4j.kernel.api.security.AuthToken.BASIC_SCHEME))\n+    {\n+      // Basic scheme requires credentials\n+      credentials = org.neo4j.kernel.api.security.AuthToken.safeCast(CREDENTIALS, authTokenMap);\n+    } else\n+    {\n+      // Otherwise credentials are optional\n+      Object credentialsObject = authTokenMap.get(CREDENTIALS);\n+      if (credentialsObject instanceof String)\n+      {\n+        credentials = (String) credentialsObject;\n+      }\n     }\n+    Map<String, Object> parameters = org.neo4j.kernel.api.security.AuthToken.safeCastMap(PARAMETERS, authTokenMap);\n+\n+    return PluginApiAuthToken.of(\n+        principal,\n+        credentials != null ? credentials.toCharArray() : null,\n+        parameters);\n+  }\n }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1508/PluginApiAuthToken.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1508/PluginApiAuthToken.java\nindex 474f3e52b82..d989fae2619 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1508/PluginApiAuthToken.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1508/PluginApiAuthToken.java\n@@ -66,13 +66,10 @@ public class PluginApiAuthToken implements AuthToken\n \n     public static AuthToken createFromMap( Map<String,Object> authTokenMap ) throws InvalidAuthTokenException\n     {\n-        String scheme = org.neo4j.kernel.api.security.AuthToken\n-                .safeCast( org.neo4j.kernel.api.security.AuthToken.SCHEME_KEY, authTokenMap );\n-\n-        // Always require principal\n+        String scheme = org.neo4j.kernel.api.security.AuthToken.safeCast( org.neo4j.kernel.api.security.AuthToken.SCHEME_KEY, authTokenMap );\n+    // Always require principal\n         String principal = org.neo4j.kernel.api.security.AuthToken.safeCast( PRINCIPAL, authTokenMap );\n-\n-        String credentials = null;\n+String credentials = null;\n         if ( scheme.equals( org.neo4j.kernel.api.security.AuthToken.BASIC_SCHEME ) )\n         {\n             // Basic scheme requires credentials\n@@ -88,10 +85,7 @@ public class PluginApiAuthToken implements AuthToken\n             }\n         }\n         Map<String,Object> parameters = org.neo4j.kernel.api.security.AuthToken.safeCastMap( PARAMETERS, authTokenMap );\n-\n-        return PluginApiAuthToken.of(\n-                principal,\n-                credentials != null ? credentials.toCharArray() : null,\n-                parameters );\n+return PluginApiAuthToken.of( principal,\n+                credentials != null ? credentials.toCharArray() : null, parameters );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}