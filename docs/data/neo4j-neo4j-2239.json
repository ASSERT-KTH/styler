{
    "project_name": "neo4j-neo4j",
    "error_id": "2239",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "58",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2239/DiagnosticsManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2239/DiagnosticsManager.java\nindex 0817798a6fa..390ac4914df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2239/DiagnosticsManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2239/DiagnosticsManager.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.diagnostics;\n \n import org.neo4j.logging.Log;\n@@ -35,47 +36,46 @@ public final class DiagnosticsManager\n     private static final String NAME_START = \"[ \";\n     private static final String NAME_END = \" ]\";\n \n-    private DiagnosticsManager( )\n+    private DiagnosticsManager()\n     {\n     }\n \n-    public static <E extends Enum & DiagnosticsProvider> void dump( Class<E> enumProvider, Log errorLog, DiagnosticsLogger diagnosticsLog )\n+    public static <E extends Enum & DiagnosticsProvider> void dump(Class<E> enumProvider, Log errorLog, DiagnosticsLogger diagnosticsLog)\n     {\n-        for ( E provider : enumProvider.getEnumConstants() )\n+        for (E provider : enumProvider.getEnumConstants())\n         {\n-            dump( provider, errorLog, diagnosticsLog );\n+            dump(provider, errorLog, diagnosticsLog);\n         }\n     }\n \n-    public static void dump( DiagnosticsProvider provider, Log errorLog, DiagnosticsLogger diagnosticsLog )\n+    public static void dump(DiagnosticsProvider provider, Log errorLog, DiagnosticsLogger diagnosticsLog)\n     {\n         try\n         {\n-            header( diagnosticsLog, provider.getDiagnosticsName() );\n-            provider.dump( diagnosticsLog );\n-            diagnosticsLog.log( EMPTY );\n-        }\n-        catch ( Exception cause )\n+            header(diagnosticsLog, provider.getDiagnosticsName());\n+            provider.dump(diagnosticsLog);\n+            diagnosticsLog.log(EMPTY);\n+        } catch (Exception cause)\n         {\n-            errorLog.error( \"Failure while logging diagnostics for \" + provider, cause );\n+            errorLog.error(\"Failure while logging diagnostics for \" + provider, cause);\n         }\n     }\n \n-    public static void section( DiagnosticsLogger diagnosticsLog, String sectionName )\n+    public static void section(DiagnosticsLogger diagnosticsLog, String sectionName)\n     {\n-        diagnosticsLog.log( \"*\".repeat( CAPTION_WIDTH ) );\n-        diagnosticsLog.log( center( title( sectionName ), CAPTION_WIDTH ) );\n-        diagnosticsLog.log( \"*\".repeat( CAPTION_WIDTH ) );\n+        diagnosticsLog.log(\"*\".repeat(CAPTION_WIDTH));\n+        diagnosticsLog.log(center(title(sectionName), CAPTION_WIDTH));\n+        diagnosticsLog.log(\"*\".repeat(CAPTION_WIDTH));\n     }\n \n-    private static void header( DiagnosticsLogger diagnosticsLog, String caption )\n+    private static void header(DiagnosticsLogger diagnosticsLog, String caption)\n     {\n-        diagnosticsLog.log( \"-\".repeat( CAPTION_WIDTH ) );\n-        diagnosticsLog.log( center( title( caption ), CAPTION_WIDTH ) );\n-        diagnosticsLog.log( \"-\".repeat( CAPTION_WIDTH ) );\n+        diagnosticsLog.log(\"-\".repeat(CAPTION_WIDTH));\n+        diagnosticsLog.log(center(title(caption), CAPTION_WIDTH));\n+        diagnosticsLog.log(\"-\".repeat(CAPTION_WIDTH));\n     }\n \n-    private static String title( String name )\n+    private static String title(String name)\n     {\n         return NAME_START + name + NAME_END;\n     }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2239/DiagnosticsManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2239/DiagnosticsManager.java\nindex 0817798a6fa..7417590e9e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2239/DiagnosticsManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2239/DiagnosticsManager.java\n@@ -35,7 +35,7 @@ public final class DiagnosticsManager\n     private static final String NAME_START = \"[ \";\n     private static final String NAME_END = \" ]\";\n \n-    private DiagnosticsManager( )\n+    private DiagnosticsManager()\n     {\n     }\n \n@@ -79,4 +79,4 @@ public final class DiagnosticsManager\n     {\n         return NAME_START + name + NAME_END;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}