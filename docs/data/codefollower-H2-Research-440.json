{
    "project_name": "codefollower-H2-Research",
    "error_id": "440",
    "information": {
        "errors": [
            {
                "line": "29",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "//\u6240\u4ee5\u6b64\u7c7b\u5f88\u591a\u65b9\u6cd5\u662f\u4e0d\u80fd\u8c03\u7528\u7684\uff0c\u975e\u6cd5\u7684\npublic class Wildcard extends Expression {\n\t//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n\t//sql = \"select * from WildcardTest\";\n\t//sql = \"select WildcardTest.* from WildcardTest\";\n\t//sql = \"select public.WildcardTest.* from WildcardTest\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/440/Wildcard.java\nindex c33bdece079..6f92a96a32d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/440/Wildcard.java\n@@ -26,7 +26,7 @@ import org.h2.value.Value;\n //Wildcard\u8868\u8fbe\u5f0f\u5373*\u53f7\u8868\u8fbe\u5f0f\u5728org.h2.command.dml.Select.expandColumnList()\u4e2d\u4f1a\u88ab\u66ff\u6362\u6210\u5b57\u6bb5\u5217\u8868\n //\u6240\u4ee5\u6b64\u7c7b\u5f88\u591a\u65b9\u6cd5\u662f\u4e0d\u80fd\u8c03\u7528\u7684\uff0c\u975e\u6cd5\u7684\n public class Wildcard extends Expression {\n-\t//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n+//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql: //sql = \"select * from WildcardTest\";\n \t//sql = \"select * from WildcardTest\";\n \t//sql = \"select WildcardTest.* from WildcardTest\";\n \t//sql = \"select public.WildcardTest.* from WildcardTest\";\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/440/Wildcard.java\nindex c33bdece079..f6276adb885 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/440/Wildcard.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression;\n \n import java.util.ArrayList;\n@@ -26,126 +27,126 @@ import org.h2.value.Value;\n //Wildcard\u8868\u8fbe\u5f0f\u5373*\u53f7\u8868\u8fbe\u5f0f\u5728org.h2.command.dml.Select.expandColumnList()\u4e2d\u4f1a\u88ab\u66ff\u6362\u6210\u5b57\u6bb5\u5217\u8868\n //\u6240\u4ee5\u6b64\u7c7b\u5f88\u591a\u65b9\u6cd5\u662f\u4e0d\u80fd\u8c03\u7528\u7684\uff0c\u975e\u6cd5\u7684\n public class Wildcard extends Expression {\n-\t//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n-\t//sql = \"select * from WildcardTest\";\n-\t//sql = \"select WildcardTest.* from WildcardTest\";\n-\t//sql = \"select public.WildcardTest.* from WildcardTest\";\n-\t//\u5b57\u6bb5schema\u3001table\u5206\u522b\u662f\n-\t//null, null\n-\t//null, WildcardTest\n-\t//public, WildcardTest\n-    private final String schema;\n-    private final String table;\n-\n-    private ArrayList<ExpressionColumn> exceptColumns;\n-\n-    public Wildcard(String schema, String table) {\n-        this.schema = schema;\n-        this.table = table;\n-    }\n-\n-    public ArrayList<ExpressionColumn> getExceptColumns() {\n-        return exceptColumns;\n-    }\n-\n-    public void setExceptColumns(ArrayList<ExpressionColumn> exceptColumns) {\n-        this.exceptColumns = exceptColumns;\n-    }\n-\n-    /**\n-     * Returns map of excluded table columns to expression columns and validates\n-     * that all columns are resolved and not duplicated.\n-     *\n-     * @return map of excluded table columns to expression columns\n-     */\n-    public HashMap<Column, ExpressionColumn> mapExceptColumns() {\n-        HashMap<Column, ExpressionColumn> exceptTableColumns = new HashMap<>();\n-        for (ExpressionColumn ec : exceptColumns) {\n-            Column column = ec.getColumn();\n-            if (column == null) {\n-                throw ec.getColumnException(ErrorCode.COLUMN_NOT_FOUND_1);\n-            }\n-            if (exceptTableColumns.put(column, ec) != null) {\n-                throw ec.getColumnException(ErrorCode.DUPLICATE_COLUMN_NAME_1);\n-            }\n-        }\n-        return exceptTableColumns;\n-    }\n-\n-    @Override\n-    public Value getValue(Session session) {\n-        throw DbException.throwInternalError(toString());\n+  //\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n+  //sql = \"select * from WildcardTest\";\n+  //sql = \"select WildcardTest.* from WildcardTest\";\n+  //sql = \"select public.WildcardTest.* from WildcardTest\";\n+  //\u5b57\u6bb5schema\u3001table\u5206\u522b\u662f\n+  //null, null\n+  //null, WildcardTest\n+  //public, WildcardTest\n+  private final String schema;\n+  private final String table;\n+\n+  private ArrayList<ExpressionColumn> exceptColumns;\n+\n+  public Wildcard(String schema, String table) {\n+    this.schema = schema;\n+    this.table = table;\n+  }\n+\n+  public ArrayList<ExpressionColumn> getExceptColumns() {\n+    return exceptColumns;\n+  }\n+\n+  public void setExceptColumns(ArrayList<ExpressionColumn> exceptColumns) {\n+    this.exceptColumns = exceptColumns;\n+  }\n+\n+  /**\n+   * Returns map of excluded table columns to expression columns and validates\n+   * that all columns are resolved and not duplicated.\n+   *\n+   * @return map of excluded table columns to expression columns\n+   */\n+  public HashMap<Column, ExpressionColumn> mapExceptColumns() {\n+    HashMap<Column, ExpressionColumn> exceptTableColumns = new HashMap<>();\n+    for (ExpressionColumn ec : exceptColumns) {\n+      Column column = ec.getColumn();\n+      if (column == null) {\n+        throw ec.getColumnException(ErrorCode.COLUMN_NOT_FOUND_1);\n+      }\n+      if (exceptTableColumns.put(column, ec) != null) {\n+        throw ec.getColumnException(ErrorCode.DUPLICATE_COLUMN_NAME_1);\n+      }\n     }\n-\n-    @Override\n-    public TypeInfo getType() {\n-        throw DbException.throwInternalError(toString());\n+    return exceptTableColumns;\n+  }\n+\n+  @Override\n+  public Value getValue(Session session) {\n+    throw DbException.throwInternalError(toString());\n+  }\n+\n+  @Override\n+  public TypeInfo getType() {\n+    throw DbException.throwInternalError(toString());\n+  }\n+\n+  @Override\n+  public void mapColumns(ColumnResolver resolver, int level, int state) {\n+    if (exceptColumns != null) {\n+      for (ExpressionColumn column : exceptColumns) {\n+        column.mapColumns(resolver, level, state);\n+      }\n     }\n-\n-    @Override\n-    public void mapColumns(ColumnResolver resolver, int level, int state) {\n-        if (exceptColumns != null) {\n-            for (ExpressionColumn column : exceptColumns) {\n-                column.mapColumns(resolver, level, state);\n-            }\n-        }\n+  }\n+\n+  @Override\n+  public Expression optimize(Session session) {\n+    throw DbException.get(ErrorCode.SYNTAX_ERROR_1, table);\n+  }\n+\n+  @Override\n+  public void setEvaluatable(TableFilter tableFilter, boolean b) {\n+    DbException.throwInternalError(toString());\n+  }\n+\n+  @Override\n+  public String getTableAlias() {\n+    return table;\n+  }\n+\n+  @Override\n+  public String getSchemaName() {\n+    return schema;\n+  }\n+\n+  //\u5bf9\u4e8eselect WildcardTest.* from WildcardTest\n+  //\u6b64\u65f6table=WildcardTest\n+  @Override\n+  public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n+    if (table != null) {\n+      StringUtils.quoteIdentifier(builder, table).append('.');\n     }\n-\n-    @Override\n-    public Expression optimize(Session session) {\n-        throw DbException.get(ErrorCode.SYNTAX_ERROR_1, table);\n+    builder.append('*');\n+    if (exceptColumns != null) {\n+      builder.append(\" EXCEPT (\");\n+      writeExpressions(builder, exceptColumns, alwaysQuote);\n+      builder.append(')');\n     }\n-\n-    @Override\n-    public void setEvaluatable(TableFilter tableFilter, boolean b) {\n-        DbException.throwInternalError(toString());\n-    }\n-\n-    @Override\n-    public String getTableAlias() {\n-        return table;\n-    }\n-\n-    @Override\n-    public String getSchemaName() {\n-        return schema;\n-    }\n-    \n-    //\u5bf9\u4e8eselect WildcardTest.* from WildcardTest\n-    //\u6b64\u65f6table=WildcardTest\n-    @Override\n-    public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n-        if (table != null) {\n-            StringUtils.quoteIdentifier(builder, table).append('.');\n-        }\n-        builder.append('*');\n-        if (exceptColumns != null) {\n-            builder.append(\" EXCEPT (\");\n-            writeExpressions(builder, exceptColumns, alwaysQuote);\n-            builder.append(')');\n-        }\n //<<<<<<< HEAD\n //        return StringUtils.quoteIdentifier(table) + \".*\"; //\u6b64\u65f6\u8fd4\u56de: \"WildcardTest\".*\n //=======\n-        return builder;\n+    return builder;\n+  }\n+\n+  @Override\n+  public void updateAggregate(Session session, int stage) {\n+    DbException.throwInternalError(toString());\n+  }\n+\n+  @Override\n+  public boolean isEverything(ExpressionVisitor visitor) {\n+    if (visitor.getType() == ExpressionVisitor.QUERY_COMPARABLE) {\n+      return true;\n     }\n+    throw DbException.throwInternalError(Integer.toString(visitor.getType()));\n+  }\n \n-    @Override\n-    public void updateAggregate(Session session, int stage) {\n-        DbException.throwInternalError(toString());\n-    }\n-\n-    @Override\n-    public boolean isEverything(ExpressionVisitor visitor) {\n-        if (visitor.getType() == ExpressionVisitor.QUERY_COMPARABLE) {\n-            return true;\n-        }\n-        throw DbException.throwInternalError(Integer.toString(visitor.getType()));\n-    }\n-\n-    @Override\n-    public int getCost() {\n-        throw DbException.throwInternalError(toString());\n-    }\n+  @Override\n+  public int getCost() {\n+    throw DbException.throwInternalError(toString());\n+  }\n \n }\n",
            "diff_size": 162
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/440/Wildcard.java\nindex c33bdece079..231e5b5033a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/440/Wildcard.java\n@@ -7,7 +7,6 @@ package org.h2.expression;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n-\n import org.h2.api.ErrorCode;\n import org.h2.engine.Session;\n import org.h2.message.DbException;\n@@ -25,18 +24,20 @@ import org.h2.value.Value;\n  */\n //Wildcard\u8868\u8fbe\u5f0f\u5373*\u53f7\u8868\u8fbe\u5f0f\u5728org.h2.command.dml.Select.expandColumnList()\u4e2d\u4f1a\u88ab\u66ff\u6362\u6210\u5b57\u6bb5\u5217\u8868\n //\u6240\u4ee5\u6b64\u7c7b\u5f88\u591a\u65b9\u6cd5\u662f\u4e0d\u80fd\u8c03\u7528\u7684\uff0c\u975e\u6cd5\u7684\n+\n+\n public class Wildcard extends Expression {\n-\t//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n-\t//sql = \"select * from WildcardTest\";\n-\t//sql = \"select WildcardTest.* from WildcardTest\";\n-\t//sql = \"select public.WildcardTest.* from WildcardTest\";\n-\t//\u5b57\u6bb5schema\u3001table\u5206\u522b\u662f\n-\t//null, null\n-\t//null, WildcardTest\n-\t//public, WildcardTest\n+    //\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n+    //sql = \"select * from WildcardTest\";\n+    //sql = \"select WildcardTest.* from WildcardTest\";\n+    //sql = \"select public.WildcardTest.* from WildcardTest\";\n+    //\u5b57\u6bb5schema\u3001table\u5206\u522b\u662f\n+    //null, null\n+    //null, WildcardTest\n+    //public, WildcardTest\n+\n     private final String schema;\n     private final String table;\n-\n     private ArrayList<ExpressionColumn> exceptColumns;\n \n     public Wildcard(String schema, String table) {\n@@ -44,10 +45,12 @@ public class Wildcard extends Expression {\n         this.table = table;\n     }\n \n+\n     public ArrayList<ExpressionColumn> getExceptColumns() {\n         return exceptColumns;\n     }\n \n+\n     public void setExceptColumns(ArrayList<ExpressionColumn> exceptColumns) {\n         this.exceptColumns = exceptColumns;\n     }\n@@ -58,8 +61,10 @@ public class Wildcard extends Expression {\n      *\n      * @return map of excluded table columns to expression columns\n      */\n+\n+\n     public HashMap<Column, ExpressionColumn> mapExceptColumns() {\n-        HashMap<Column, ExpressionColumn> exceptTableColumns = new HashMap<>();\n+        HashMap<Column, ExpressionColumn> exceptTableColumns = new HashMap< >();\n         for (ExpressionColumn ec : exceptColumns) {\n             Column column = ec.getColumn();\n             if (column == null) {\n@@ -113,6 +118,7 @@ public class Wildcard extends Expression {\n     \n     //\u5bf9\u4e8eselect WildcardTest.* from WildcardTest\n     //\u6b64\u65f6table=WildcardTest\n+\n     @Override\n     public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n         if (table != null) {\n@@ -148,4 +154,4 @@ public class Wildcard extends Expression {\n         throw DbException.throwInternalError(toString());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "30",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/440/Wildcard.java\nindex c33bdece079..6f92a96a32d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/440/Wildcard.java\n@@ -26,7 +26,7 @@ import org.h2.value.Value;\n //Wildcard\u8868\u8fbe\u5f0f\u5373*\u53f7\u8868\u8fbe\u5f0f\u5728org.h2.command.dml.Select.expandColumnList()\u4e2d\u4f1a\u88ab\u66ff\u6362\u6210\u5b57\u6bb5\u5217\u8868\n //\u6240\u4ee5\u6b64\u7c7b\u5f88\u591a\u65b9\u6cd5\u662f\u4e0d\u80fd\u8c03\u7528\u7684\uff0c\u975e\u6cd5\u7684\n public class Wildcard extends Expression {\n-\t//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n+//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql: //sql = \"select * from WildcardTest\";\n \t//sql = \"select * from WildcardTest\";\n \t//sql = \"select WildcardTest.* from WildcardTest\";\n \t//sql = \"select public.WildcardTest.* from WildcardTest\";\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "31",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/440/Wildcard.java\nindex c33bdece079..535ce4cdbd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/440/Wildcard.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/440/Wildcard.java\n@@ -26,8 +26,8 @@ import org.h2.value.Value;\n //Wildcard\u8868\u8fbe\u5f0f\u5373*\u53f7\u8868\u8fbe\u5f0f\u5728org.h2.command.dml.Select.expandColumnList()\u4e2d\u4f1a\u88ab\u66ff\u6362\u6210\u5b57\u6bb5\u5217\u8868\n //\u6240\u4ee5\u6b64\u7c7b\u5f88\u591a\u65b9\u6cd5\u662f\u4e0d\u80fd\u8c03\u7528\u7684\uff0c\u975e\u6cd5\u7684\n public class Wildcard extends Expression {\n-\t//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n-\t//sql = \"select * from WildcardTest\";\n+//\u5bf9\u4e8e\u4e0b\u9762\u4e09\u6761sql:\n+ //sql = \"select * from WildcardTest\";\n \t//sql = \"select WildcardTest.* from WildcardTest\";\n \t//sql = \"select public.WildcardTest.* from WildcardTest\";\n \t//\u5b57\u6bb5schema\u3001table\u5206\u522b\u662f\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}