{
    "project_name": "IQSS-dataverse",
    "error_id": "124",
    "information": {
        "errors": [
            {
                "line": "185",
                "column": "7",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            return false;\n        }\n      \tFile folder_obj = new File(fname);\n        msg(\"ShapefileHandler. Folder created: \" + folder_obj.getAbsolutePath());\n      \treturn createDirectory(folder_obj);\n      \t",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "187",
                    "column": "7",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/124/ShapefileHandler.java\nindex 3af562882f3..d6971c9febe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/124/ShapefileHandler.java\n@@ -182,7 +182,7 @@ public class ShapefileHandler{\n         if (fname == null){\n             return false;\n         }\n-      \tFile folder_obj = new File(fname);\n+       File folder_obj = new File(fname);\n         msg(\"ShapefileHandler. Folder created: \" + folder_obj.getAbsolutePath());\n       \treturn createDirectory(folder_obj);\n       \t\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/124/ShapefileHandler.java\nindex 3af562882f3..2f373dd8c69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/124/ShapefileHandler.java\n@@ -21,771 +21,781 @@ import java.util.logging.Logger;\n import org.apache.commons.io.FileUtils;\n \n /**\n- *  Used to identify, \"repackage\", and extract data from Shapefiles in .zip format\n- *\n- *  (1) Identify if a .zip contains a shapefile: \n- *          boolean containsShapefile(FileInputStream zipStream) or boolean containsShapefile(FileInputStream zip_filename) \n- *\n- *\n- * \n- *  (2) Unpack/\"Repackage\" .zip:\n- *          (a) All files extracted\n- *          (b) Each group of files that make up a shapefile are made into individual .zip files\n- *          (c) Non shapefile-related files left on their own\n- *\n- *      If the original .zip contains:  \"shape1.shp\", \"shape1.shx\", \"shape1.dbf\", \"shape1.prj\", \"shape1.ain\",  \"shape1.aih\",\n- *                                      \"shape2.shp\", \"shape2.shx\", \"shape2.dbf\", \"shape2.prj\",\n- *                                      \"shape1.pdf\", \"README.md\", \"shape_notes.txt\"\n- *      The repackaging results in a folder containing: \n- *                                  \"shape1.zip\", \n- *                                  \"shape2.zip\",\n- *                                  \"shape1.pdf\", \"README.md\", \"shape_notes.txt\"\n- * \n- *  Code Example:  \n- *          FileInputStream shp_file_input_stream = new FileInputStream(new File(\"zipped_shapefile.zip\"))\n- *          ShapefileHandler shp_handler = new ShapefileHandler(shp_file_input_stream);\n- *          if (shp_handler.containsShapefile()){\n- *              File rezip_folder = new File(\"~/folder_for_rezipping\");\n- *              boolean rezip_success = shp_handler.rezipShapefileSets(shp_file_input_stream, rezip_folder );\n- *              if (!rezip_success){\n- *                  // rezip failed, should be an error message (String) available\n-                    System.out.println(shp_handler.error_message);\n- *              }\n- *          }else{              \n- *              if (shp_handler.errorFound){\n- *                  System.out.println(\"Error message: \" + shp_handler.error_message;\n- *              }\n- *          }\n- *         \n+ * Used to identify, \"repackage\", and extract data from Shapefiles in .zip format\n+ * <p>\n+ * (1) Identify if a .zip contains a shapefile:\n+ * boolean containsShapefile(FileInputStream zipStream) or boolean containsShapefile(FileInputStream zip_filename)\n+ * <p>\n+ * <p>\n+ * <p>\n+ * (2) Unpack/\"Repackage\" .zip:\n+ * (a) All files extracted\n+ * (b) Each group of files that make up a shapefile are made into individual .zip files\n+ * (c) Non shapefile-related files left on their own\n+ * <p>\n+ * If the original .zip contains:  \"shape1.shp\", \"shape1.shx\", \"shape1.dbf\", \"shape1.prj\", \"shape1.ain\",  \"shape1.aih\",\n+ * \"shape2.shp\", \"shape2.shx\", \"shape2.dbf\", \"shape2.prj\",\n+ * \"shape1.pdf\", \"README.md\", \"shape_notes.txt\"\n+ * The repackaging results in a folder containing:\n+ * \"shape1.zip\",\n+ * \"shape2.zip\",\n+ * \"shape1.pdf\", \"README.md\", \"shape_notes.txt\"\n+ * <p>\n+ * Code Example:\n+ * FileInputStream shp_file_input_stream = new FileInputStream(new File(\"zipped_shapefile.zip\"))\n+ * ShapefileHandler shp_handler = new ShapefileHandler(shp_file_input_stream);\n+ * if (shp_handler.containsShapefile()){\n+ * File rezip_folder = new File(\"~/folder_for_rezipping\");\n+ * boolean rezip_success = shp_handler.rezipShapefileSets(shp_file_input_stream, rezip_folder );\n+ * if (!rezip_success){\n+ * // rezip failed, should be an error message (String) available\n+ * System.out.println(shp_handler.error_message);\n+ * }\n+ * }else{\n+ * if (shp_handler.errorFound){\n+ * System.out.println(\"Error message: \" + shp_handler.error_message;\n+ * }\n+ * }\n  *\n  * @author raprasad\n- *\n- * \n  */\n-public class ShapefileHandler{\n-\n-    private static final Logger logger = Logger.getLogger(ShapefileHandler.class.getCanonicalName());\n-\n-    // Reference for these extensions: http://en.wikipedia.org/wiki/Shapefile\n-    public final static String SHAPEFILE_FILE_TYPE = \"application/zipped-shapefile\";\n-    public final static String SHAPEFILE_FILE_TYPE_FRIENDLY_NAME = \"Shapefile as ZIP Archive\";\n-    public final static List<String> SHAPEFILE_MANDATORY_EXTENSIONS = Arrays.asList(\"shp\", \"shx\", \"dbf\", \"prj\");\n-    public final static String SHP_XML_EXTENSION = \"shp.xml\";\n-    public final static String BLANK_EXTENSION = \"__PLACEHOLDER-FOR-BLANK-EXTENSION__\";\n-    public final static List<String> SHAPEFILE_ALL_EXTENSIONS = Arrays.asList(\"shp\", \"shx\", \"dbf\", \"prj\", \"sbn\", \"sbx\", \"fbn\", \"fbx\", \"ain\", \"aih\", \"ixs\", \"mxs\", \"atx\", \"cpg\", SHP_XML_EXTENSION);  \n-    \n-    public boolean DEBUG = false;\n-        \n-    private boolean zipFileProcessed = false;\n-    public boolean errorFound = false;\n-    public String errorMessage = new String();\n-    \n-    // List of files in .zip archive\n-    private List<String> filesListInDir = new ArrayList<>();\n-\n-    // Hash of file names and byte sizes {  \"file name\" : bytes }  example: { \"water.shp\" : 541234 }\n-    private HashMap<String, Long> filesizeHash = new HashMap<>();   \n-    \n-    // Hash of file basenames and a list of extensions. \n+public class ShapefileHandler {\n+\n+  private static final Logger logger = Logger.getLogger(ShapefileHandler.class.getCanonicalName());\n+\n+  // Reference for these extensions: http://en.wikipedia.org/wiki/Shapefile\n+  public final static String SHAPEFILE_FILE_TYPE = \"application/zipped-shapefile\";\n+  public final static String SHAPEFILE_FILE_TYPE_FRIENDLY_NAME = \"Shapefile as ZIP Archive\";\n+  public final static List<String> SHAPEFILE_MANDATORY_EXTENSIONS = Arrays.asList(\"shp\", \"shx\", \"dbf\", \"prj\");\n+  public final static String SHP_XML_EXTENSION = \"shp.xml\";\n+  public final static String BLANK_EXTENSION = \"__PLACEHOLDER-FOR-BLANK-EXTENSION__\";\n+  public final static List<String> SHAPEFILE_ALL_EXTENSIONS = Arrays\n+    .asList(\"shp\", \"shx\", \"dbf\", \"prj\", \"sbn\", \"sbx\", \"fbn\", \"fbx\", \"ain\", \"aih\", \"ixs\", \"mxs\", \"atx\", \"cpg\",\n+      SHP_XML_EXTENSION);\n+\n+  public boolean DEBUG = false;\n+\n+  private boolean zipFileProcessed = false;\n+  public boolean errorFound = false;\n+  public String errorMessage = new String();\n+\n+  // List of files in .zip archive\n+  private List<String> filesListInDir = new ArrayList<>();\n+\n+  // Hash of file names and byte sizes {  \"file name\" : bytes }  example: { \"water.shp\" : 541234 }\n+  private HashMap<String, Long> filesizeHash = new HashMap<>();\n+\n+  // Hash of file basenames and a list of extensions.\n     /*   e.g.  { \"subway_shapefile\" : [ \".dbf\", \".prj\", \".sbn\", \".sbx\", \".shp\", \".shx\"] \n                , \"shapefile_info\" : [\".docx\"]\n                , \"README\" : [\"md\"]\n                , \"Notes\" : [\"\"]\n               }\n     */\n-    private Map<String, List<String>> fileGroups = new HashMap<>();\n-    \n-    private List<File> finalRezippedFiles = new ArrayList<>();\n-    \n-    private String outputFolder = \"unzipped\";\n-    private String rezippedFolder = \"rezipped\";\n-\n-    // Debug helper\n-    private void msg(String s){\n-        //logger.info(s);\n-        if (DEBUG){\n-            System.out.println(s);\n-        }\n+  private Map<String, List<String>> fileGroups = new HashMap<>();\n+\n+  private List<File> finalRezippedFiles = new ArrayList<>();\n+\n+  private String outputFolder = \"unzipped\";\n+  private String rezippedFolder = \"rezipped\";\n+\n+  // Debug helper\n+  private void msg(String s) {\n+    //logger.info(s);\n+    if (DEBUG) {\n+      System.out.println(s);\n     }\n-    \n-    private void msgt(String s){\n-        msg(\"-------------------------------\");\n-        msg(s);\n-        msg(\"-------------------------------\");\n+  }\n+\n+  private void msgt(String s) {\n+    msg(\"-------------------------------\");\n+    msg(s);\n+    msg(\"-------------------------------\");\n+  }\n+\n+  /*\n+      Constructor, start with filename\n+  */\n+  public ShapefileHandler(String filename) {\n+\n+    if (filename == null) {\n+      this.addErrorMessage(\"The filename was null\");\n+      return;\n     }\n \n-    /*\n-        Constructor, start with filename\n-    */\n-    public ShapefileHandler(String filename){\n+    FileInputStream zip_file_stream;\n+    try {\n+      zip_file_stream = new FileInputStream(new File(filename));\n+    } catch (FileNotFoundException ex) {\n+      this.addErrorMessage(\"The file was not found\");\n+      return;\n+    }\n+\n+    this.examineZipfile(zip_file_stream);\n+\n+  }\n \n-        if (filename==null){\n-            this.addErrorMessage(\"The filename was null\");\n-            return;\n-        }\n-        \n-        FileInputStream zip_file_stream;\n-        try {\n-            zip_file_stream = new FileInputStream(new File(filename));\n-        } catch (FileNotFoundException ex) {\n-            this.addErrorMessage(\"The file was not found\");\n-            return;\n-        }\n-        \n-       this.examineZipfile(zip_file_stream);\n \n+  /*\n+       Constructor, start with FileInputStream\n+   */\n+  public ShapefileHandler(FileInputStream zip_file_stream) {\n+\n+    if (zip_file_stream == null) {\n+      this.addErrorMessage(\"The zip_file_stream was null\");\n+      return;\n     }\n+    this.examineZipfile(zip_file_stream);\n+  }\n \n-   \n-   /*\n-        Constructor, start with FileInputStream\n-    */\n-   public ShapefileHandler(FileInputStream zip_file_stream){\n+  public List<File> getFinalRezippedFiles() {\n+    return this.finalRezippedFiles;\n+  }\n \n-        if (zip_file_stream==null){\n-            this.addErrorMessage(\"The zip_file_stream was null\");\n-            return;\n-        }\n-        this.examineZipfile(zip_file_stream);\n+  private void addFinalRezippedFile(String targetFileFullpath) {\n+    if (targetFileFullpath == null) {\n+      logger.warning(\"addFinalRezippedFile. targetFileFullpath is null\");\n+      return;\n     }\n-    \n-    public List<File> getFinalRezippedFiles(){\n-        return this.finalRezippedFiles;\n+    File finalFile = new File(targetFileFullpath);\n+    if (!(finalFile.isFile())) {\n+      logger.warning(\"addFinalRezippedFile. Not a file: \" + targetFileFullpath);\n+      return;\n     }\n-    \n-    private void addFinalRezippedFile(String targetFileFullpath){\n-        if (targetFileFullpath==null){\n-            logger.warning(\"addFinalRezippedFile. targetFileFullpath is null\");\n-            return;\n-        }\n-        File finalFile = new File(targetFileFullpath);\n-        if (!(finalFile.isFile())){\n-            logger.warning(\"addFinalRezippedFile. Not a file: \" + targetFileFullpath);\n-            return;\n-        }\n-        this.finalRezippedFiles.add(finalFile);\n-    };\n+    this.finalRezippedFiles.add(finalFile);\n+  }\n \n-    \n-    private void addErrorMessage(String m){\n-        if (m == null){\n-            return;\n-        }\n-        logger.severe(\"ShapeFileHandler Error: \" + m);\n-        this.errorFound = true;\n-        this.errorMessage = m;\n+  ;\n+\n+\n+  private void addErrorMessage(String m) {\n+    if (m == null) {\n+      return;\n     }\n-    /*\n-        Create a directory, if one doesn\"t exist\n-    */\n-    private boolean createDirectory(String fname){\n-        if (fname == null){\n-            return false;\n-        }\n-      \tFile folder_obj = new File(fname);\n-        msg(\"ShapefileHandler. Folder created: \" + folder_obj.getAbsolutePath());\n-      \treturn createDirectory(folder_obj);\n-      \t\n-    } // createDirectory\n-    \n-    private boolean createDirectory(File folder){\n-        if (folder == null){\n-            return false;\n-        }\n-        try{\n-          \tif(!folder.exists()){\n-          \t    msg(\"Creating folder: \" + folder.getName());\n-          \t\tfolder.mkdirs();\t    \n-          \t}else{\n-          \t    msg(\"Folder exists: \" + folder.getName());\n-          \t}\n-         }catch(SecurityException ex){\n-           this.addErrorMessage(\"Tried to create directory but resulted in SecurityException\");\n-           return false;\n-        }catch(NullPointerException ex){\n-            this.addErrorMessage(\"Tried to create directory but resulted in NullPointerException\");\n-\n-            return false;\n-        }\n-        return true;\n-    } // createDirectory    \n+    logger.severe(\"ShapeFileHandler Error: \" + m);\n+    this.errorFound = true;\n+    this.errorMessage = m;\n+  }\n+\n+  /*\n+      Create a directory, if one doesn\"t exist\n+  */\n+  private boolean createDirectory(String fname) {\n+    if (fname == null) {\n+      return false;\n+    }\n+    File folder_obj = new File(fname);\n+    msg(\"ShapefileHandler. Folder created: \" + folder_obj.getAbsolutePath());\n+    return createDirectory(folder_obj);\n \n-    \n-    /*\n-        Print out the key/value pairs of the Hash of filenames and sizes\n-    */\n-    private void showFileNamesSizes(){\n-        msgt(\"Hash: file names + sizes\");\n-        Iterator<String> keySetIterator = this.filesizeHash.keySet().iterator();\n-\n-        while(keySetIterator.hasNext()){\n-          String key = keySetIterator.next();\n-          msg(\"key: [\" + key + \"] value: [\" + this.filesizeHash.get(key)+\"]\");\n-          \n-        }\n-    } // end showFileNamesSizes\n-    \n-    \n-    public Map<String, List<String>> getFileGroups(){\n-        return this.fileGroups;\n+  } // createDirectory\n+\n+  private boolean createDirectory(File folder) {\n+    if (folder == null) {\n+      return false;\n     }\n+    try {\n+      if (!folder.exists()) {\n+        msg(\"Creating folder: \" + folder.getName());\n+        folder.mkdirs();\n+      } else {\n+        msg(\"Folder exists: \" + folder.getName());\n+      }\n+    } catch (SecurityException ex) {\n+      this.addErrorMessage(\"Tried to create directory but resulted in SecurityException\");\n+      return false;\n+    } catch (NullPointerException ex) {\n+      this.addErrorMessage(\"Tried to create directory but resulted in NullPointerException\");\n+\n+      return false;\n+    }\n+    return true;\n+  } // createDirectory\n \n-    /*\n-        Iterate through Hash of file base names and extensions\n-    */\n-    public void showFileGroups(){\n \n-        msgt(\"Hash: file base names + extensions\");\n-        \n-        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n-            msg(\"\\nKey: [\" + entry.getKey() + \"] Ext List: \" + entry.getValue());\n-            if (doesListContainShapefileExtensions(entry.getValue())){\n-                msg(\" >>>> YES, This is a shapefile!\");\n-            }else{\n-                msg(\" >>>> Not a shapefile\");\n-            }\n-        }\n-       \n-    } // end showFileGroups\n-    \n-    /*\n-        Return a count of shapefile sets in this .zip\n-    */\n-    public int getShapefileCount(){\n-        int shp_cnt = 0;\n-        \n-        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n-            if (doesListContainShapefileExtensions(entry.getValue())){\n-                shp_cnt+=1;\n-            }\n-        }\n-        return shp_cnt;\n+  /*\n+      Print out the key/value pairs of the Hash of filenames and sizes\n+  */\n+  private void showFileNamesSizes() {\n+    msgt(\"Hash: file names + sizes\");\n+    Iterator<String> keySetIterator = this.filesizeHash.keySet().iterator();\n+\n+    while (keySetIterator.hasNext()) {\n+      String key = keySetIterator.next();\n+      msg(\"key: [\" + key + \"] value: [\" + this.filesizeHash.get(key) + \"]\");\n+\n     }\n-    \n-    private String getFileBasename(String fileName){\n-        if (fileName==null){\n-            return null;\n-        }\n-        String unzipFileName = new File(fileName).getName();\n-        if (unzipFileName.equals(\"\")){\n-            logger.info(\"getFileBasename.  fileName is an empty string: \" + fileName);\n-            return null;\n-        }\n-        return unzipFileName;\n+  } // end showFileNamesSizes\n+\n+\n+  public Map<String, List<String>> getFileGroups() {\n+    return this.fileGroups;\n+  }\n+\n+  /*\n+      Iterate through Hash of file base names and extensions\n+  */\n+  public void showFileGroups() {\n+\n+    msgt(\"Hash: file base names + extensions\");\n+\n+    for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n+      msg(\"\\nKey: [\" + entry.getKey() + \"] Ext List: \" + entry.getValue());\n+      if (doesListContainShapefileExtensions(entry.getValue())) {\n+        msg(\" >>>> YES, This is a shapefile!\");\n+      } else {\n+        msg(\" >>>> Not a shapefile\");\n+      }\n     }\n-    \n-    private String getFolderName(String fileName){\n-        if (fileName==null){\n-            return null;\n-        }\n-        return new File(fileName).getParent(); \n-    }\n-    /*\n-        We used to unzip the files to the directory, FLATTENING the directory structure\n-        Any colliding names would result  in overwrites\n-        HOWEVER, starting with v5.1, we are now preserving the folder structure\n-        inside the uploaded zip file (issue #6873). To achieve this, we recreate \n-        all the folders as they appear in the original zip archive, and as we \n-        rezip any found shape file sets. The FileUtil then preserve any such\n-        subfolders in the FileMetadata of the newly created DataFiles. \n-        (-- L.A. 09/2020) \n-    */\n-    private boolean unzipFilesToDirectory(FileInputStream zipfile_input_stream, File target_directory){\n-        logger.fine(\"unzipFilesToDirectory: \" + target_directory.getAbsolutePath() );\n \n-        if (zipfile_input_stream== null){\n-            this.addErrorMessage(\"unzipFilesToDirectory. The zipfile_input_stream is null.\");\n-            return false;\n-        }\n-        if (!target_directory.isDirectory()){\n-             this.addErrorMessage(\"This directory does not exist: \" + target_directory.getAbsolutePath());\n-            return false;\n-        }\n+  } // end showFileGroups\n \n-       List<String> unzippedFileNames = new ArrayList<>(); \n-       \n-       ZipInputStream zipStream = new ZipInputStream(zipfile_input_stream);\n-\n-       ZipEntry origEntry;\n-        byte[] buffer = new byte[2048];\n-        try {\n-            while((origEntry = zipStream.getNextEntry())!=null){\n-                \n-                String zentryFileName = origEntry.getName();\n-                logger.fine(\"\\nOriginal entry name: \" + origEntry);\n-                \n-                 if (this.isFileToSkip(zentryFileName)){\n-                    logger.fine(\"Skip file\");\n-                    continue;\n-                 }\n-                \n-                // Create sub directory, if needed\n-                if (origEntry.isDirectory()) {\n-                    //logger.info(\"Subdirectory found!\");\n-                    logger.fine(\"Skip directory\");\n-                    String dirpath = target_directory.getAbsolutePath() + \"/\" + zentryFileName;\n-                    createDirectory(dirpath);\n-                    continue;           // Continue to next Entry\n-                }\n-                logger.fine(\"file found!\");\n-                \n-                // Write the file\n-                String unzipFileName = this.getFileBasename(zentryFileName);\n-                String unzipFolderName = this.getFolderName(zentryFileName);\n-                \n-                String unzipFilePath = unzipFileName; \n-                if (unzipFolderName != null) {\n-                    unzipFilePath = unzipFolderName + \"/\" + unzipFileName;\n-                    \n-                    // There's a chance we haven't created this folder yet \n-                    // in the destination directory (this happens if the folder \n-                    // is not explicitly listed in the Zip archive directory). \n-                    String dirpath = target_directory.getAbsolutePath() + \"/\" + unzipFolderName;\n-                    // (and if it already exists, it'll be skipped)\n-                    createDirectory(dirpath);\n-                }\n-                \n-                if (unzipFileName==null){\n-                    logger.warning(\"Zip Entry Basename is an empty string: \" + zentryFileName);\n-                    continue;\n-                }\n-                \n-                //String outpath = target_directory.getAbsolutePath() + \"/\" + unzipFileName;\n-                String outpath = target_directory.getAbsolutePath() + \"/\" + unzipFilePath;\n-                if (unzippedFileNames.contains(outpath)){\n-                   logger.info(\"Potential name collision.  Avoiding duplicate files in 'collapsed' zip directories. Skipping file: \" + zentryFileName);\n-                   continue;\n-                }else{\n-                    unzippedFileNames.add(outpath);\n-                }\n-                logger.fine(\"Write zip file: \" + outpath);\n-                FileOutputStream fileOutputStream;\n-                long fsize = 0;\n-                fileOutputStream = new FileOutputStream(outpath);\n-                int len;// = 0;\n-                while ((len = zipStream.read(buffer)) > 0){\n-                    fileOutputStream.write(buffer, 0, len);\n-                    fsize+=len;\n-                } // end while\n-                fileOutputStream.close();\n-            } // end outer while\n-        } catch (IOException ex) {\n-            for (StackTraceElement el : ex.getStackTrace()){\n-                logger.severe(el.toString());\n-            }\n-            this.addErrorMessage(\"Failed to open ZipInputStream entry\" +  ex.getMessage());\n-            return false;\n-        }\n+  /*\n+      Return a count of shapefile sets in this .zip\n+  */\n+  public int getShapefileCount() {\n+    int shp_cnt = 0;\n \n-        try {\n-             zipStream.close();\n-        } catch (IOException ex) {\n-             Logger.getLogger(ShapefileHandler.class.getName()).log(Level.SEVERE, null, ex);\n-        }\n+    for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n+      if (doesListContainShapefileExtensions(entry.getValue())) {\n+        shp_cnt += 1;\n+      }\n+    }\n+    return shp_cnt;\n+  }\n+\n+  private String getFileBasename(String fileName) {\n+    if (fileName == null) {\n+      return null;\n+    }\n+    String unzipFileName = new File(fileName).getName();\n+    if (unzipFileName.equals(\"\")) {\n+      logger.info(\"getFileBasename.  fileName is an empty string: \" + fileName);\n+      return null;\n+    }\n+    return unzipFileName;\n+  }\n+\n+  private String getFolderName(String fileName) {\n+    if (fileName == null) {\n+      return null;\n+    }\n+    return new File(fileName).getParent();\n+  }\n+\n+  /*\n+      We used to unzip the files to the directory, FLATTENING the directory structure\n+      Any colliding names would result  in overwrites\n+      HOWEVER, starting with v5.1, we are now preserving the folder structure\n+      inside the uploaded zip file (issue #6873). To achieve this, we recreate\n+      all the folders as they appear in the original zip archive, and as we\n+      rezip any found shape file sets. The FileUtil then preserve any such\n+      subfolders in the FileMetadata of the newly created DataFiles.\n+      (-- L.A. 09/2020)\n+  */\n+  private boolean unzipFilesToDirectory(FileInputStream zipfile_input_stream, File target_directory) {\n+    logger.fine(\"unzipFilesToDirectory: \" + target_directory.getAbsolutePath());\n+\n+    if (zipfile_input_stream == null) {\n+      this.addErrorMessage(\"unzipFilesToDirectory. The zipfile_input_stream is null.\");\n+      return false;\n+    }\n+    if (!target_directory.isDirectory()) {\n+      this.addErrorMessage(\"This directory does not exist: \" + target_directory.getAbsolutePath());\n+      return false;\n+    }\n+\n+    List<String> unzippedFileNames = new ArrayList<>();\n+\n+    ZipInputStream zipStream = new ZipInputStream(zipfile_input_stream);\n+\n+    ZipEntry origEntry;\n+    byte[] buffer = new byte[2048];\n+    try {\n+      while ((origEntry = zipStream.getNextEntry()) != null) {\n+\n+        String zentryFileName = origEntry.getName();\n+        logger.fine(\"\\nOriginal entry name: \" + origEntry);\n+\n+        if (this.isFileToSkip(zentryFileName)) {\n+          logger.fine(\"Skip file\");\n+          continue;\n+        }\n+\n+        // Create sub directory, if needed\n+        if (origEntry.isDirectory()) {\n+          //logger.info(\"Subdirectory found!\");\n+          logger.fine(\"Skip directory\");\n+          String dirpath = target_directory.getAbsolutePath() + \"/\" + zentryFileName;\n+          createDirectory(dirpath);\n+          continue;           // Continue to next Entry\n+        }\n+        logger.fine(\"file found!\");\n+\n+        // Write the file\n+        String unzipFileName = this.getFileBasename(zentryFileName);\n+        String unzipFolderName = this.getFolderName(zentryFileName);\n+\n+        String unzipFilePath = unzipFileName;\n+        if (unzipFolderName != null) {\n+          unzipFilePath = unzipFolderName + \"/\" + unzipFileName;\n+\n+          // There's a chance we haven't created this folder yet\n+          // in the destination directory (this happens if the folder\n+          // is not explicitly listed in the Zip archive directory).\n+          String dirpath = target_directory.getAbsolutePath() + \"/\" + unzipFolderName;\n+          // (and if it already exists, it'll be skipped)\n+          createDirectory(dirpath);\n+        }\n+\n+        if (unzipFileName == null) {\n+          logger.warning(\"Zip Entry Basename is an empty string: \" + zentryFileName);\n+          continue;\n+        }\n+\n+        //String outpath = target_directory.getAbsolutePath() + \"/\" + unzipFileName;\n+        String outpath = target_directory.getAbsolutePath() + \"/\" + unzipFilePath;\n+        if (unzippedFileNames.contains(outpath)) {\n+          logger.info(\n+            \"Potential name collision.  Avoiding duplicate files in 'collapsed' zip directories. Skipping file: \" +\n+              zentryFileName);\n+          continue;\n+        } else {\n+          unzippedFileNames.add(outpath);\n+        }\n+        logger.fine(\"Write zip file: \" + outpath);\n+        FileOutputStream fileOutputStream;\n+        long fsize = 0;\n+        fileOutputStream = new FileOutputStream(outpath);\n+        int len;// = 0;\n+        while ((len = zipStream.read(buffer)) > 0) {\n+          fileOutputStream.write(buffer, 0, len);\n+          fsize += len;\n+        } // end while\n+        fileOutputStream.close();\n+      } // end outer while\n+    } catch (IOException ex) {\n+      for (StackTraceElement el : ex.getStackTrace()) {\n+        logger.severe(el.toString());\n+      }\n+      this.addErrorMessage(\"Failed to open ZipInputStream entry\" + ex.getMessage());\n+      return false;\n+    }\n+\n+    try {\n+      zipStream.close();\n+    } catch (IOException ex) {\n+      Logger.getLogger(ShapefileHandler.class.getName()).log(Level.SEVERE, null, ex);\n+    }\n     return true;\n+  }\n+\n+  /*\n+      Rezip the shapefile(s) into a given directory\n+      Assumes that the zipfile_input_stream has already been checked!\n+  */\n+  public boolean rezipShapefileSets(FileInputStream zipfile_input_stream, File rezippedFolder) throws IOException {\n+    logger.fine(\"rezipShapefileSets\");\n+    //msgt(\"rezipShapefileSets\");\n+    if (!this.zipFileProcessed) {\n+      this.addErrorMessage(\"First use 'examineZipFile' (called in the constructor)\");\n+      return false;\n+    }\n+    if (!this.containsShapefile()) {\n+      this.addErrorMessage(\"There are no shapefiles here!\");\n+      return false;\n+    }\n+    if (zipfile_input_stream == null) {\n+      this.addErrorMessage(\"The zipfile_input_stream is null.\");\n+      return false;\n+    }\n+    if (rezippedFolder == null) {\n+      this.addErrorMessage(\"The rezippedFolder is null.\");\n+      return false;\n     }\n-    /*\n-        Rezip the shapefile(s) into a given directory\n-        Assumes that the zipfile_input_stream has already been checked!\n-    */\n-    public boolean rezipShapefileSets(FileInputStream zipfile_input_stream, File rezippedFolder) throws IOException{\n-        logger.fine(\"rezipShapefileSets\");\n-        //msgt(\"rezipShapefileSets\");\n-        if (!this.zipFileProcessed){\n-             this.addErrorMessage(\"First use 'examineZipFile' (called in the constructor)\");\n-            return false;\n-        }\n-        if (!this.containsShapefile()){\n-             this.addErrorMessage(\"There are no shapefiles here!\");\n-            return false;\n-        }\n-        if (zipfile_input_stream== null){\n-            this.addErrorMessage(\"The zipfile_input_stream is null.\");\n-            return false;\n-        }\n-        if (rezippedFolder == null){\n-            this.addErrorMessage(\"The rezippedFolder is null.\");\n-            return false;\n-        }\n \n-        if (!rezippedFolder.isDirectory()){\n-            this.addErrorMessage(\"The rezippedFolder does not exist: \" + rezippedFolder.getAbsolutePath());\n-            return false;\n-        }\n-        if (!containsShapefile()){\n-            msgt(\"There are no shapefiles to re-zip\");\n-            return false;\n-        }\n-        \n-        // Create target directory for unzipping files\n-        String dirname_for_unzipping;\n-        File dir_for_unzipping;\n-        \n-        dirname_for_unzipping = rezippedFolder.getAbsolutePath() + \"/\" + \"scratch-for-unzip-12345\";\n-        dir_for_unzipping = new File(dirname_for_unzipping);\n-        logger.fine(\"Try to create directory: \" + dirname_for_unzipping );\n+    if (!rezippedFolder.isDirectory()) {\n+      this.addErrorMessage(\"The rezippedFolder does not exist: \" + rezippedFolder.getAbsolutePath());\n+      return false;\n+    }\n+    if (!containsShapefile()) {\n+      msgt(\"There are no shapefiles to re-zip\");\n+      return false;\n+    }\n \n-        if (!this.createDirectory(dir_for_unzipping)){\n-            this.addErrorMessage(\"Failed to make directory: \" + dirname_for_unzipping);\n-            return false;\n-        }\n-        \n-        \n-        // Unzip files!\n-        if (!this.unzipFilesToDirectory(zipfile_input_stream, dir_for_unzipping)){\n-            this.addErrorMessage(\"Failed to unzip files.\");\n-            return false;\n-        }\n-        // Redistribute files!\n-        String target_dirname = rezippedFolder.getAbsolutePath();\n-        boolean redistribute_success = this.redistributeFilesFromZip(dirname_for_unzipping, target_dirname);\n+    // Create target directory for unzipping files\n+    String dirname_for_unzipping;\n+    File dir_for_unzipping;\n \n-        // Delete unzipped files in scratch directory\n-        FileUtils.deleteDirectory(dir_for_unzipping);\n-        \n-        logger.fine(\"Post redistribute:)\");\n-        for (File f : new File(target_dirname).listFiles()){\n-            logger.fine(\"File exists: \" + f.getAbsolutePath());\n-        }\n-        \n-        return redistribute_success;\n-            \n+    dirname_for_unzipping = rezippedFolder.getAbsolutePath() + \"/\" + \"scratch-for-unzip-12345\";\n+    dir_for_unzipping = new File(dirname_for_unzipping);\n+    logger.fine(\"Try to create directory: \" + dirname_for_unzipping);\n+\n+    if (!this.createDirectory(dir_for_unzipping)) {\n+      this.addErrorMessage(\"Failed to make directory: \" + dirname_for_unzipping);\n+      return false;\n     }\n-    \n-    private String getRedistributeFilePath(String dirname, String file_basename, String file_ext){\n-        \n-        if (dirname==null){\n-            this.addErrorMessage(\"getRedistributeFilePath. dirname is null\");\n-            return null;\n-        }\n-        if (file_basename==null){\n-            this.addErrorMessage(\"getRedistributeFilePath. file_basename is null\");\n-            return null;\n-        }\n-        if (file_ext==null){\n-            this.addErrorMessage(\"getRedistributeFilePath. file_ext is null\");\n-            return null;\n-        }\n-        if (file_ext.equals(BLANK_EXTENSION)){\n-            return dirname + \"/\" + file_basename;\n-        }\n-        return dirname + \"/\" + file_basename + \".\" + file_ext;\n+\n+\n+    // Unzip files!\n+    if (!this.unzipFilesToDirectory(zipfile_input_stream, dir_for_unzipping)) {\n+      this.addErrorMessage(\"Failed to unzip files.\");\n+      return false;\n     }\n-    \n-    /*\n-        Create new zipped shapefile\n-    \n-    \n-    */\n-    private boolean redistributeFilesFromZip(String source_dirname, String target_dirname){\n+    // Redistribute files!\n+    String target_dirname = rezippedFolder.getAbsolutePath();\n+    boolean redistribute_success = this.redistributeFilesFromZip(dirname_for_unzipping, target_dirname);\n+\n+    // Delete unzipped files in scratch directory\n+    FileUtils.deleteDirectory(dir_for_unzipping);\n \n-        logger.fine(\"redistributeFilesFromZip. source: '\" + source_dirname + \"'  target: '\" + target_dirname + \"'\");\n+    logger.fine(\"Post redistribute:)\");\n+    for (File f : new File(target_dirname).listFiles()) {\n+      logger.fine(\"File exists: \" + f.getAbsolutePath());\n+    }\n \n-        int cnt =0;\n+    return redistribute_success;\n+\n+  }\n+\n+  private String getRedistributeFilePath(String dirname, String file_basename, String file_ext) {\n+\n+    if (dirname == null) {\n+      this.addErrorMessage(\"getRedistributeFilePath. dirname is null\");\n+      return null;\n+    }\n+    if (file_basename == null) {\n+      this.addErrorMessage(\"getRedistributeFilePath. file_basename is null\");\n+      return null;\n+    }\n+    if (file_ext == null) {\n+      this.addErrorMessage(\"getRedistributeFilePath. file_ext is null\");\n+      return null;\n+    }\n+    if (file_ext.equals(BLANK_EXTENSION)) {\n+      return dirname + \"/\" + file_basename;\n+    }\n+    return dirname + \"/\" + file_basename + \".\" + file_ext;\n+  }\n+\n+  /*\n+      Create new zipped shapefile\n+\n+\n+  */\n+  private boolean redistributeFilesFromZip(String source_dirname, String target_dirname) {\n+\n+    logger.fine(\"redistributeFilesFromZip. source: '\" + source_dirname + \"'  target: '\" + target_dirname + \"'\");\n+\n+    int cnt = 0;\n        /* START: Redistribute files by iterating through the Map of basenames + extensions\n         \n         example key: \"shape1\"\n         example ext_list: [\"shp\", \"shx\", \"dbf\", \"prj\"]\n        */\n-       for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n-            cnt++;\n-            String key = entry.getKey();\n-            List<String> ext_list = entry.getValue();\n-\n-            msg(\"\\n(\" + cnt + \") Basename: \" + key);\n-            msg(\"Extensions: \" + Arrays.toString(ext_list.toArray()));\n-            \n-            // Is this a shapefile?  If so, rezip it\n-            if (doesListContainShapefileExtensions(ext_list)){\n-    \n-                List<String> namesToZip = new ArrayList<>();\n-                \n-                for (String ext_name : ext_list) {\n-                    if (!this.isShapefileExtension(ext_name)){\n-                        // Another file with similar basename as shapefile.  \n-                        // e.g. if shapefile basename is \"census\", this might be \"census.xls\", \"census.pdf\", or another non-shapefile extension\n-                        String source_file_fullpath = this.getRedistributeFilePath(source_dirname, key, ext_name);\n-                        String targetFileFullpath = this.getRedistributeFilePath(target_dirname, key, ext_name);\n-                        this.straightFileCopy(source_file_fullpath, targetFileFullpath);\n-                        this.addFinalRezippedFile(targetFileFullpath);\n-                    }else{\n-                        namesToZip.add(key + \".\" + ext_name);\n-                \n-                    }\n-                }\n-            \n-                String target_zipfile_name = target_dirname + \"/\" + key + \".zip\";\n-                //this.msg(\"target_zipfile_name: \"+ target_zipfile_name);\n-                //this.msg(\"source_dirname: \"+ source_dirname);\n-                \n-                //msgt(\"create zipped shapefile\");\n-                // Make sure the parent folder(s) are there:\n-                createDirectory(new File(target_zipfile_name).getParentFile());\n-                ZipMaker zip_maker = new ZipMaker(namesToZip, source_dirname, target_zipfile_name);\n-                this.addFinalRezippedFile(target_zipfile_name);\n-\n-                // rezip it\n-                                \n-            }else{\n-                // Non-shapefiles\n-                for (String ext_name : ext_list) {\n-                    String source_file_fullpath = this.getRedistributeFilePath(source_dirname, key, ext_name);\n-                    String targetFileFullpath = this.getRedistributeFilePath(target_dirname, key, ext_name);\n-                    this.straightFileCopy(source_file_fullpath, targetFileFullpath);\n-                    this.addFinalRezippedFile(targetFileFullpath);\n-\n-                }\n-            }\n-        }\n-       \n-       // END: Redistribute files\n-       \n-        return true;\n-    }  // end: redistributeFilesFromZip\n-    \n-    \n-    private boolean straightFileCopy(String sourceFileName, String targetFileName){\n-        \n-        //msg(\"Copy [\" + sourceFileName + \" to [\" + targetFileName + \"]\");\n-        if ((sourceFileName == null)||(targetFileName==null)){\n-            this.addErrorMessage(\"The source or target file was null.\\nSource: \" + sourceFileName +\"\\nTarget: \" + targetFileName);\n-            return false;\n-        }\n-        \n-        File source_file = new File(sourceFileName);\n-        File target_file = new File(targetFileName);\n-        \n-        if (target_file.getParentFile() != null) {\n-            // Make sure the parent folder(s) are there:\n-            createDirectory(target_file.getParentFile());\n+    for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n+      cnt++;\n+      String key = entry.getKey();\n+      List<String> ext_list = entry.getValue();\n+\n+      msg(\"\\n(\" + cnt + \") Basename: \" + key);\n+      msg(\"Extensions: \" + Arrays.toString(ext_list.toArray()));\n+\n+      // Is this a shapefile?  If so, rezip it\n+      if (doesListContainShapefileExtensions(ext_list)) {\n+\n+        List<String> namesToZip = new ArrayList<>();\n+\n+        for (String ext_name : ext_list) {\n+          if (!this.isShapefileExtension(ext_name)) {\n+            // Another file with similar basename as shapefile.\n+            // e.g. if shapefile basename is \"census\", this might be \"census.xls\", \"census.pdf\", or another non-shapefile extension\n+            String source_file_fullpath = this.getRedistributeFilePath(source_dirname, key, ext_name);\n+            String targetFileFullpath = this.getRedistributeFilePath(target_dirname, key, ext_name);\n+            this.straightFileCopy(source_file_fullpath, targetFileFullpath);\n+            this.addFinalRezippedFile(targetFileFullpath);\n+          } else {\n+            namesToZip.add(key + \".\" + ext_name);\n+\n+          }\n         }\n-        try {\n-            Files.copy(source_file.toPath(), target_file.toPath(), REPLACE_EXISTING);    \n-        } catch (IOException ex) {\n-            this.addErrorMessage(\"Failed to copy file. IOException\\nSource: \" +  sourceFileName +\"\\nTarget: \" + targetFileName);\n-            return false;\n+\n+        String target_zipfile_name = target_dirname + \"/\" + key + \".zip\";\n+        //this.msg(\"target_zipfile_name: \"+ target_zipfile_name);\n+        //this.msg(\"source_dirname: \"+ source_dirname);\n+\n+        //msgt(\"create zipped shapefile\");\n+        // Make sure the parent folder(s) are there:\n+        createDirectory(new File(target_zipfile_name).getParentFile());\n+        ZipMaker zip_maker = new ZipMaker(namesToZip, source_dirname, target_zipfile_name);\n+        this.addFinalRezippedFile(target_zipfile_name);\n+\n+        // rezip it\n+\n+      } else {\n+        // Non-shapefiles\n+        for (String ext_name : ext_list) {\n+          String source_file_fullpath = this.getRedistributeFilePath(source_dirname, key, ext_name);\n+          String targetFileFullpath = this.getRedistributeFilePath(target_dirname, key, ext_name);\n+          this.straightFileCopy(source_file_fullpath, targetFileFullpath);\n+          this.addFinalRezippedFile(targetFileFullpath);\n+\n         }\n-       \n+      }\n+    }\n+\n+    // END: Redistribute files\n+\n+    return true;\n+  }  // end: redistributeFilesFromZip\n+\n+\n+  private boolean straightFileCopy(String sourceFileName, String targetFileName) {\n+\n+    //msg(\"Copy [\" + sourceFileName + \" to [\" + targetFileName + \"]\");\n+    if ((sourceFileName == null) || (targetFileName == null)) {\n+      this.addErrorMessage(\n+        \"The source or target file was null.\\nSource: \" + sourceFileName + \"\\nTarget: \" + targetFileName);\n+      return false;\n+    }\n+\n+    File source_file = new File(sourceFileName);\n+    File target_file = new File(targetFileName);\n+\n+    if (target_file.getParentFile() != null) {\n+      // Make sure the parent folder(s) are there:\n+      createDirectory(target_file.getParentFile());\n+    }\n+    try {\n+      Files.copy(source_file.toPath(), target_file.toPath(), REPLACE_EXISTING);\n+    } catch (IOException ex) {\n+      this\n+        .addErrorMessage(\"Failed to copy file. IOException\\nSource: \" + sourceFileName + \"\\nTarget: \" + targetFileName);\n+      return false;\n+    }\n+\n+    return true;\n+\n+  }\n+\n+  public boolean containsOnlySingleShapefile() {\n+    if (containsShapefile()) {\n+      if (fileGroups.size() == filesizeHash.size()) {\n         return true;\n-        \n+      }\n     }\n-  \n-    public boolean containsOnlySingleShapefile(){\n-        if (containsShapefile()){\n-            if (fileGroups.size()==filesizeHash.size()){\n-                return true;\n-            }\n-        }\n-        return false;\n+    return false;\n+  }\n+\n+  /*\n+      Does this zip file contain a shapefile set?\n+  */\n+  public boolean containsShapefile() {\n+    for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n+      String key = entry.getKey();\n+      List<String> ext_list = entry.getValue();\n+      if (doesListContainShapefileExtensions(ext_list)) {\n+        return true;\n+      }\n     }\n-    \n-    /*\n-        Does this zip file contain a shapefile set?\n-    */\n-    public boolean containsShapefile(){\n-        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n-            String key = entry.getKey();\n-            List<String> ext_list = entry.getValue();\n-            if (doesListContainShapefileExtensions(ext_list)){\n-                return true;\n-            }\n-        }\n-              \n-        return false;\n+\n+    return false;\n+  }\n+\n+  private boolean isShapefileExtension(String ext_name) {\n+    if (ext_name == null) {\n+      return false;\n     }\n-    \n-    private boolean isShapefileExtension(String ext_name){\n-        if (ext_name == null){\n-            return false;\n-        }\n-        return SHAPEFILE_ALL_EXTENSIONS.contains(ext_name);\n+    return SHAPEFILE_ALL_EXTENSIONS.contains(ext_name);\n+  }\n+\n+  /*\n+      Does a list of file extensions match those required for a shapefile set?\n+  */\n+  private boolean doesListContainShapefileExtensions(List<String> ext_list) {\n+    if (ext_list == null) {\n+      return false;\n     }\n-    /*\n-        Does a list of file extensions match those required for a shapefile set?\n-    */\n-    private boolean doesListContainShapefileExtensions(List<String> ext_list){\n-        if (ext_list == null){\n-            return false;\n-        }\n-        return ext_list.containsAll(SHAPEFILE_MANDATORY_EXTENSIONS);\n+    return ext_list.containsAll(SHAPEFILE_MANDATORY_EXTENSIONS);\n+  }\n+\n+\n+  private void addToFileGroupHash(String basename, String ext) {\n+    if ((basename == null) || (ext == null)) {\n+      return;\n+    }\n+    List<String> extension_list = fileGroups.get(basename);\n+    if (extension_list == null) {\n+      extension_list = new ArrayList<>();\n+    }\n+    if (!(extension_list.contains(ext))) {\n+      extension_list.add(ext);\n+      fileGroups.put(basename, extension_list);\n+    }\n+  }   // end addToFileGroupHash\n+\n+  /**\n+   * Update the fileGroup hash which contains a { base_filename : [ext1, ext2, etc ]}\n+   * This is used to determine whether a .zip contains a shapefile set\n+   * #\n+   *\n+   * @param fname filename in String format\n+   */\n+  private void updateFileGroupHash(String fname) {\n+    if (fname == null) {\n+      return;\n+    }\n+\n+    // Split filename into basename and extension.  No extension yields only basename\n+    //\n+    if (fname.toLowerCase().endsWith(SHP_XML_EXTENSION)) {\n+      int idx = fname.toLowerCase().indexOf(\".\" + SHP_XML_EXTENSION);\n+      if (idx >= 1) {   // if idx==0, then the file name is \".shp.xml\"\"\n+        String basename = fname.substring(0, idx);\n+        String ext = fname.substring(idx + 1);\n+        addToFileGroupHash(basename, ext);\n+        return;\n+      }\n+    }\n+\n+    String[] tokens = fname.split(\"\\\\.(?=[^\\\\.]+$)\");\n+    if (tokens.length == 1) {\n+      addToFileGroupHash(tokens[0], BLANK_EXTENSION);      // file basename, no extension\n+\n+    } else if (tokens.length == 2) {\n+      addToFileGroupHash(tokens[0], tokens[1]);  // file basename, extension\n+    }\n+  } // end updateFileGroupHash\n+\n+  private boolean isFileToSkip(String fname) {\n+    if ((fname == null) || (fname.equals(\"\"))) {\n+      return true;\n+    }\n+\n+    if (fname.startsWith(\"__\")) {\n+      return true;\n+    }\n+\n+    if (fname.startsWith(\"._\")) {\n+      return true;\n+    }\n+\n+    File fnameFile = new File(fname);\n+    if (fnameFile.getName().endsWith(\".DS_Store\")) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  /**************************************\n+   * Iterate through the zip file contents.\n+   * Does it contain any shapefiles?\n+   *\n+   * @param FileInputStream zip_file_stream\n+   */\n+  private boolean examineZipfile(FileInputStream zip_file_stream) {\n+    // msgt(\"examineZipfile\");\n+\n+    if (zip_file_stream == null) {\n+      this.addErrorMessage(\"The zip file stream was null\");\n+      return false;\n     }\n-    \n-    \n-    private void addToFileGroupHash(String basename, String ext){\n-        if ((basename==null)||(ext==null)){\n-            return;\n-        }\n-        List<String> extension_list = fileGroups.get(basename);\n-        if (extension_list==null) {\n-            extension_list = new ArrayList<>();\n-        }\n-        if (!(extension_list.contains(ext))){\n-            extension_list.add(ext);\n-            fileGroups.put(basename, extension_list);\n-        }\n-      }   // end addToFileGroupHash\n-    \n-    /**\n-     * Update the fileGroup hash which contains a { base_filename : [ext1, ext2, etc ]}\n-     * This is used to determine whether a .zip contains a shapefile set\n-     #\n-     * @param fname filename in String format\n-     */\n-    private void updateFileGroupHash(String fname){\n-        if (fname == null){\n-            return;\n-        }\n-             \n-        // Split filename into basename and extension.  No extension yields only basename\n-        //\n-        if (fname.toLowerCase().endsWith(SHP_XML_EXTENSION)){\n-            int idx = fname.toLowerCase().indexOf(\".\" + SHP_XML_EXTENSION);\n-            if (idx >= 1){   // if idx==0, then the file name is \".shp.xml\"\"\n-                String basename = fname.substring(0, idx);\n-                String ext = fname.substring(idx+1);\n-                addToFileGroupHash(basename, ext);\n-                return;\n-            }\n-        }\n-        \n-        String[] tokens = fname.split(\"\\\\.(?=[^\\\\.]+$)\");\n-        if (tokens.length==1){\n-            addToFileGroupHash(tokens[0], BLANK_EXTENSION);      // file basename, no extension\n \n-        }else if (tokens.length==2){\n-            addToFileGroupHash(tokens[0], tokens[1]);  // file basename, extension\n+    // Clear out file lists\n+    this.filesListInDir.clear();\n+    this.filesizeHash.clear();\n+    this.fileGroups.clear();\n+\n+    try {\n+      ZipInputStream zipStream = new ZipInputStream(zip_file_stream);\n+      ZipEntry entry;\n+\n+      while ((entry = zipStream.getNextEntry()) != null) {\n+\n+        String zentryFileName = entry.getName();\n+        //msg(\"zip entry: \" + entry.getName());\n+        // Skip files or folders starting with __\n+        if (this.isFileToSkip(zentryFileName)) {\n+          continue;\n         }\n-    } // end updateFileGroupHash\n-    \n-    private boolean isFileToSkip(String fname){\n-        if ((fname==null)||(fname.equals(\"\"))){\n-            return true;\n+\n+        if (entry.isDirectory()) {\n+          //String dirpath = outputFolder + \"/\" + zentryFileName;\n+          //createDirectory(dirpath);\n+          continue;\n         }\n-        \n-        if (fname.startsWith(\"__\")){\n-            return true;\n+\n+        String unzipFileName = this.getFileBasename(zentryFileName);\n+        if (unzipFileName == null) {\n+          logger.warning(\"Zip Entry Basename is an empty string: \" + zentryFileName);\n+          continue;\n         }\n-        \n-        if (fname.startsWith(\"._\")){\n-            return true;\n+        String unzipFolderName = this.getFolderName(zentryFileName);\n+\n+        String unzipFilePath = unzipFileName;\n+        if (unzipFolderName != null) {\n+          unzipFilePath = unzipFolderName + \"/\" + unzipFileName;\n         }\n-        \n-        File fnameFile = new File(fname);\n-        if (fnameFile.getName().endsWith(\".DS_Store\")){\n-            return true;\n+\n+\n+        String s = String.format(\"Entry: %s len %d added %TD\",\n+          unzipFilePath, entry.getSize(),\n+          new Date(entry.getTime()));\n+\n+        if (!this.filesListInDir.contains(s)) {\n+          this.filesListInDir.add(s);\n+          updateFileGroupHash(unzipFilePath);\n+          this.filesizeHash.put(unzipFilePath, entry.getSize());\n         }\n+      } // end while\n+\n+      zipStream.close();\n+\n+      if (this.filesListInDir.isEmpty()) {\n+        errorMessage = \"No files in zipStream\";\n         return false;\n+      }\n+\n+      this.zipFileProcessed = true;\n+      return true;\n+\n+    } catch (ZipException ex) {\n+      this.addErrorMessage(\"ZipException\");\n+      msgt(\"ZipException\");\n+      return false;\n+\n+    } catch (IOException ex) {\n+      //ex.printStackTrace();\n+      this.addErrorMessage(\"IOException File name\");\n+      msgt(\"IOException\");\n+      return false;\n+    } catch (IllegalArgumentException ex) {\n+      this.addErrorMessage(\"IllegalArgumentException when parsing zipfile\");\n+      msgt(\"IllegalArgumentException when parsing zipfile\");\n+      return false;\n+\n+    } finally {\n+\n     }\n-    \n-    /**************************************\n-     * Iterate through the zip file contents.\n-     * Does it contain any shapefiles?\n-     *\n-     * @param FileInputStream zip_file_stream\n-     */\n-    private boolean examineZipfile(FileInputStream zip_file_stream){\n-       // msgt(\"examineZipfile\");\n-        \n-        if (zip_file_stream==null){\n-               this.addErrorMessage(\"The zip file stream was null\");\n-               return false;\n-           }\n-        \n-       // Clear out file lists\n-       this.filesListInDir.clear();\n-       this.filesizeHash.clear();\n-       this.fileGroups.clear();\n-       \n-       try{\n-            ZipInputStream zipStream = new ZipInputStream(zip_file_stream);\n-            ZipEntry entry;\n-            \n-            while((entry = zipStream.getNextEntry())!=null){\n-\n-                 String zentryFileName = entry.getName();\n-                 //msg(\"zip entry: \" + entry.getName());\n-                 // Skip files or folders starting with __\n-                 if (this.isFileToSkip(zentryFileName)){\n-                     continue;\n-                 }\n-\n-                if (entry.isDirectory()) {\n-                   //String dirpath = outputFolder + \"/\" + zentryFileName;\n-                   //createDirectory(dirpath);\n-                   continue;       \n-                }\n-                                \n-                String unzipFileName = this.getFileBasename(zentryFileName);\n-                if (unzipFileName==null){\n-                    logger.warning(\"Zip Entry Basename is an empty string: \" + zentryFileName);\n-                    continue;\n-                }\n-                String unzipFolderName = this.getFolderName(zentryFileName);\n-                                \n-                String unzipFilePath = unzipFileName; \n-                if (unzipFolderName != null) {\n-                    unzipFilePath = unzipFolderName + \"/\" + unzipFileName; \n-                }\n-\n-                \n-                String s = String.format(\"Entry: %s len %d added %TD\",\n-                                   unzipFilePath, entry.getSize(),\n-                                   new Date(entry.getTime()));\n-\n-                if (!this.filesListInDir.contains(s)){                   \n-                    this.filesListInDir.add(s);\n-                    updateFileGroupHash(unzipFilePath);\n-                    this.filesizeHash.put(unzipFilePath, entry.getSize());\n-                }\n-           } // end while\n-           \n-           zipStream.close();\n-\n-           if (this.filesListInDir.isEmpty()){\n-               errorMessage = \"No files in zipStream\";\n-               return false;\n-           }\n-\n-           this.zipFileProcessed = true;\n-           return true;\n-\n-       }catch(ZipException ex){\n-               this.addErrorMessage(\"ZipException\");\n-               msgt(\"ZipException\");\n-               return false;\n-\n-       }catch(IOException ex){\n-           //ex.printStackTrace(); \n-           this.addErrorMessage(\"IOException File name\");\n-           msgt(\"IOException\");\n-           return false;\n-       }catch(IllegalArgumentException ex){\n-           this.addErrorMessage(\"IllegalArgumentException when parsing zipfile\");\n-           msgt(\"IllegalArgumentException when parsing zipfile\");\n-           return false;\n-           \n-       }finally{\n-           \n-       }\n-\n-   } // end examineFile\n-\n-  public static void main(String[] args){\n-\n-        // Example usage\n-       if (args.length == 0){\n-           \n-\n-       }else if(args.length > 1){\n-           System.out.println( \"Please only give one file name!\");  \n-       }else{   \n+\n+  } // end examineFile\n+\n+  public static void main(String[] args) {\n+\n+    // Example usage\n+    if (args.length == 0) {\n+\n+\n+    } else if (args.length > 1) {\n+      System.out.println(\"Please only give one file name!\");\n+    } else {\n            /*\n            String zip_name =  args[0];      \n            System.out.println( \"Process File: \" + zip_name);\n            System.out.println( \"Process File: \" + zip_name);                \n            ShapefileHandler zpt = new ShapefileHandler(zip_name);\n            */\n-       }\n-   } // end main\n+    }\n+  } // end main\n \n } // end ShapefileHandler\n\\ No newline at end of file\n",
            "diff_size": 1134
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/124/ShapefileHandler.java\nindex 3af562882f3..3fb7ce7c3ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/124/ShapefileHandler.java\n@@ -13,7 +13,6 @@ import java.util.zip.ZipInputStream;\n import java.util.zip.ZipException;\n import java.util.HashMap;\n import java.util.*;\n-\n import java.nio.file.Files;\n import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n import java.util.logging.Level;\n@@ -62,22 +61,31 @@ import org.apache.commons.io.FileUtils;\n  *\n  * \n  */\n-public class ShapefileHandler{\n+\n+\n+public class ShapefileHandler {\n \n     private static final Logger logger = Logger.getLogger(ShapefileHandler.class.getCanonicalName());\n \n     // Reference for these extensions: http://en.wikipedia.org/wiki/Shapefile\n+\n     public final static String SHAPEFILE_FILE_TYPE = \"application/zipped-shapefile\";\n+\n     public final static String SHAPEFILE_FILE_TYPE_FRIENDLY_NAME = \"Shapefile as ZIP Archive\";\n+\n     public final static List<String> SHAPEFILE_MANDATORY_EXTENSIONS = Arrays.asList(\"shp\", \"shx\", \"dbf\", \"prj\");\n+\n     public final static String SHP_XML_EXTENSION = \"shp.xml\";\n+\n     public final static String BLANK_EXTENSION = \"__PLACEHOLDER-FOR-BLANK-EXTENSION__\";\n-    public final static List<String> SHAPEFILE_ALL_EXTENSIONS = Arrays.asList(\"shp\", \"shx\", \"dbf\", \"prj\", \"sbn\", \"sbx\", \"fbn\", \"fbx\", \"ain\", \"aih\", \"ixs\", \"mxs\", \"atx\", \"cpg\", SHP_XML_EXTENSION);  \n-    \n+\n+    public final static List<String> SHAPEFILE_ALL_EXTENSIONS = Arrays.asList(\"shp\", \"shx\", \"dbf\", \"prj\", \"sbn\", \"sbx\", \"fbn\", \"fbx\", \"ain\", \"aih\", \"ixs\", \"mxs\", \"atx\", \"cpg\", SHP_XML_EXTENSION);\n+\n     public boolean DEBUG = false;\n-        \n     private boolean zipFileProcessed = false;\n+\n     public boolean errorFound = false;\n+\n     public String errorMessage = new String();\n     \n     // List of files in .zip archive\n@@ -94,21 +102,19 @@ public class ShapefileHandler{\n               }\n     */\n     private Map<String, List<String>> fileGroups = new HashMap<>();\n-    \n     private List<File> finalRezippedFiles = new ArrayList<>();\n-    \n     private String outputFolder = \"unzipped\";\n     private String rezippedFolder = \"rezipped\";\n \n     // Debug helper\n-    private void msg(String s){\n+    private void msg(String s) {\n         //logger.info(s);\n-        if (DEBUG){\n+        if (DEBUG) {\n             System.out.println(s);\n         }\n     }\n-    \n-    private void msgt(String s){\n+\n+    private void msgt(String s) {\n         msg(\"-------------------------------\");\n         msg(s);\n         msg(\"-------------------------------\");\n@@ -117,13 +123,13 @@ public class ShapefileHandler{\n     /*\n         Constructor, start with filename\n     */\n-    public ShapefileHandler(String filename){\n \n-        if (filename==null){\n+    public ShapefileHandler(String filename) {\n+        if (filename == null) {\n             this.addErrorMessage(\"The filename was null\");\n             return;\n         }\n-        \n+\n         FileInputStream zip_file_stream;\n         try {\n             zip_file_stream = new FileInputStream(new File(filename));\n@@ -131,44 +137,41 @@ public class ShapefileHandler{\n             this.addErrorMessage(\"The file was not found\");\n             return;\n         }\n-        \n-       this.examineZipfile(zip_file_stream);\n-\n+        this.examineZipfile(zip_file_stream);\n     }\n \n    \n    /*\n         Constructor, start with FileInputStream\n     */\n-   public ShapefileHandler(FileInputStream zip_file_stream){\n \n-        if (zip_file_stream==null){\n+    public ShapefileHandler(FileInputStream zip_file_stream) {\n+        if (zip_file_stream == null) {\n             this.addErrorMessage(\"The zip_file_stream was null\");\n             return;\n         }\n         this.examineZipfile(zip_file_stream);\n     }\n-    \n-    public List<File> getFinalRezippedFiles(){\n+\n+    public List<File> getFinalRezippedFiles() {\n         return this.finalRezippedFiles;\n     }\n-    \n-    private void addFinalRezippedFile(String targetFileFullpath){\n-        if (targetFileFullpath==null){\n+\n+    private void addFinalRezippedFile(String targetFileFullpath) {\n+        if (targetFileFullpath == null) {\n             logger.warning(\"addFinalRezippedFile. targetFileFullpath is null\");\n             return;\n         }\n+\n         File finalFile = new File(targetFileFullpath);\n-        if (!(finalFile.isFile())){\n+        if (!(finalFile.isFile())) {\n             logger.warning(\"addFinalRezippedFile. Not a file: \" + targetFileFullpath);\n             return;\n         }\n         this.finalRezippedFiles.add(finalFile);\n     };\n-\n-    \n-    private void addErrorMessage(String m){\n-        if (m == null){\n+    private void addErrorMessage(String m) {\n+        if (m == null) {\n             return;\n         }\n         logger.severe(\"ShapeFileHandler Error: \" + m);\n@@ -178,33 +181,33 @@ public class ShapefileHandler{\n     /*\n         Create a directory, if one doesn\"t exist\n     */\n-    private boolean createDirectory(String fname){\n-        if (fname == null){\n+\n+    private boolean createDirectory(String fname) {\n+        if (fname == null) {\n             return false;\n         }\n-      \tFile folder_obj = new File(fname);\n+\n+        File folder_obj = new File(fname);\n         msg(\"ShapefileHandler. Folder created: \" + folder_obj.getAbsolutePath());\n-      \treturn createDirectory(folder_obj);\n-      \t\n+        return createDirectory(folder_obj);\n     } // createDirectory\n-    \n-    private boolean createDirectory(File folder){\n-        if (folder == null){\n+\n+    private boolean createDirectory(File folder) {\n+        if (folder == null) {\n             return false;\n         }\n-        try{\n-          \tif(!folder.exists()){\n-          \t    msg(\"Creating folder: \" + folder.getName());\n-          \t\tfolder.mkdirs();\t    \n-          \t}else{\n-          \t    msg(\"Folder exists: \" + folder.getName());\n-          \t}\n-         }catch(SecurityException ex){\n-           this.addErrorMessage(\"Tried to create directory but resulted in SecurityException\");\n-           return false;\n-        }catch(NullPointerException ex){\n+        try {\n+            if (!folder.exists()) {\n+                msg(\"Creating folder: \" + folder.getName());\n+                folder.mkdirs();\n+            } else {\n+                msg(\"Folder exists: \" + folder.getName());\n+            }\n+        } catch (SecurityException ex) {\n+            this.addErrorMessage(\"Tried to create directory but resulted in SecurityException\");\n+            return false;\n+        } catch (NullPointerException ex) {\n             this.addErrorMessage(\"Tried to create directory but resulted in NullPointerException\");\n-\n             return false;\n         }\n         return true;\n@@ -214,71 +217,69 @@ public class ShapefileHandler{\n     /*\n         Print out the key/value pairs of the Hash of filenames and sizes\n     */\n-    private void showFileNamesSizes(){\n+\n+    private void showFileNamesSizes() {\n         msgt(\"Hash: file names + sizes\");\n         Iterator<String> keySetIterator = this.filesizeHash.keySet().iterator();\n-\n-        while(keySetIterator.hasNext()){\n-          String key = keySetIterator.next();\n-          msg(\"key: [\" + key + \"] value: [\" + this.filesizeHash.get(key)+\"]\");\n-          \n+        while (keySetIterator.hasNext()) {\n+            String key = keySetIterator.next();\n+            msg(\"key: [\" + key + \"] value: [\" + this.filesizeHash.get(key) + \"]\");\n         }\n     } // end showFileNamesSizes\n-    \n-    \n-    public Map<String, List<String>> getFileGroups(){\n+\n+    public Map<String, List<String>> getFileGroups() {\n         return this.fileGroups;\n     }\n \n     /*\n         Iterate through Hash of file base names and extensions\n     */\n-    public void showFileGroups(){\n \n+    public void showFileGroups() {\n         msgt(\"Hash: file base names + extensions\");\n-        \n-        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n+\n+        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n             msg(\"\\nKey: [\" + entry.getKey() + \"] Ext List: \" + entry.getValue());\n-            if (doesListContainShapefileExtensions(entry.getValue())){\n+            if (doesListContainShapefileExtensions(entry.getValue())) {\n                 msg(\" >>>> YES, This is a shapefile!\");\n-            }else{\n+            } else {\n                 msg(\" >>>> Not a shapefile\");\n             }\n         }\n-       \n     } // end showFileGroups\n     \n     /*\n         Return a count of shapefile sets in this .zip\n     */\n-    public int getShapefileCount(){\n+\n+    public int getShapefileCount() {\n         int shp_cnt = 0;\n-        \n-        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n-            if (doesListContainShapefileExtensions(entry.getValue())){\n-                shp_cnt+=1;\n+        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n+            if (doesListContainShapefileExtensions(entry.getValue())) {\n+                shp_cnt += 1;\n             }\n         }\n         return shp_cnt;\n     }\n-    \n-    private String getFileBasename(String fileName){\n-        if (fileName==null){\n+\n+    private String getFileBasename(String fileName) {\n+        if (fileName == null) {\n             return null;\n         }\n+\n         String unzipFileName = new File(fileName).getName();\n-        if (unzipFileName.equals(\"\")){\n+        if (unzipFileName.equals(\"\")) {\n             logger.info(\"getFileBasename.  fileName is an empty string: \" + fileName);\n             return null;\n         }\n         return unzipFileName;\n     }\n-    \n-    private String getFolderName(String fileName){\n-        if (fileName==null){\n+\n+    private String getFolderName(String fileName) {\n+        if (fileName == null) {\n             return null;\n         }\n-        return new File(fileName).getParent(); \n+        return new File(fileName).getParent();\n     }\n     /*\n         We used to unzip the files to the directory, FLATTENING the directory structure\n@@ -290,36 +291,34 @@ public class ShapefileHandler{\n         subfolders in the FileMetadata of the newly created DataFiles. \n         (-- L.A. 09/2020) \n     */\n-    private boolean unzipFilesToDirectory(FileInputStream zipfile_input_stream, File target_directory){\n-        logger.fine(\"unzipFilesToDirectory: \" + target_directory.getAbsolutePath() );\n \n-        if (zipfile_input_stream== null){\n+    private boolean unzipFilesToDirectory(FileInputStream zipfile_input_stream, File target_directory) {\n+        logger.fine(\"unzipFilesToDirectory: \" + target_directory.getAbsolutePath());\n+        if (zipfile_input_stream == null) {\n             this.addErrorMessage(\"unzipFilesToDirectory. The zipfile_input_stream is null.\");\n             return false;\n         }\n-        if (!target_directory.isDirectory()){\n-             this.addErrorMessage(\"This directory does not exist: \" + target_directory.getAbsolutePath());\n+\n+        if (!target_directory.isDirectory()) {\n+            this.addErrorMessage(\"This directory does not exist: \" + target_directory.getAbsolutePath());\n             return false;\n         }\n \n-       List<String> unzippedFileNames = new ArrayList<>(); \n-       \n-       ZipInputStream zipStream = new ZipInputStream(zipfile_input_stream);\n-\n-       ZipEntry origEntry;\n+        List<String> unzippedFileNames = new ArrayList<>();\n+        ZipInputStream zipStream = new ZipInputStream(zipfile_input_stream);\n+        ZipEntry origEntry;\n         byte[] buffer = new byte[2048];\n         try {\n-            while((origEntry = zipStream.getNextEntry())!=null){\n-                \n+            while ((origEntry = zipStream.getNextEntry()) != null) {\n                 String zentryFileName = origEntry.getName();\n                 logger.fine(\"\\nOriginal entry name: \" + origEntry);\n-                \n-                 if (this.isFileToSkip(zentryFileName)){\n+                if (this.isFileToSkip(zentryFileName)) {\n                     logger.fine(\"Skip file\");\n                     continue;\n-                 }\n+                }\n                 \n                 // Create sub directory, if needed\n+\n                 if (origEntry.isDirectory()) {\n                     //logger.info(\"Subdirectory found!\");\n                     logger.fine(\"Skip directory\");\n@@ -332,8 +331,7 @@ public class ShapefileHandler{\n                 // Write the file\n                 String unzipFileName = this.getFileBasename(zentryFileName);\n                 String unzipFolderName = this.getFolderName(zentryFileName);\n-                \n-                String unzipFilePath = unzipFileName; \n+                String unzipFilePath = unzipFileName;\n                 if (unzipFolderName != null) {\n                     unzipFilePath = unzipFolderName + \"/\" + unzipFileName;\n                     \n@@ -344,129 +342,136 @@ public class ShapefileHandler{\n                     // (and if it already exists, it'll be skipped)\n                     createDirectory(dirpath);\n                 }\n-                \n-                if (unzipFileName==null){\n+\n+                if (unzipFileName == null) {\n                     logger.warning(\"Zip Entry Basename is an empty string: \" + zentryFileName);\n                     continue;\n                 }\n                 \n                 //String outpath = target_directory.getAbsolutePath() + \"/\" + unzipFileName;\n+\n                 String outpath = target_directory.getAbsolutePath() + \"/\" + unzipFilePath;\n-                if (unzippedFileNames.contains(outpath)){\n-                   logger.info(\"Potential name collision.  Avoiding duplicate files in 'collapsed' zip directories. Skipping file: \" + zentryFileName);\n-                   continue;\n-                }else{\n+                if (unzippedFileNames.contains(outpath)) {\n+                    logger.info(\"Potential name collision.  Avoiding duplicate files in 'collapsed' zip directories. Skipping file: \" + zentryFileName);\n+                    continue;\n+                } else {\n                     unzippedFileNames.add(outpath);\n                 }\n                 logger.fine(\"Write zip file: \" + outpath);\n                 FileOutputStream fileOutputStream;\n                 long fsize = 0;\n                 fileOutputStream = new FileOutputStream(outpath);\n+\n                 int len;// = 0;\n-                while ((len = zipStream.read(buffer)) > 0){\n+                while ((len = zipStream.read(buffer)) > 0) {\n                     fileOutputStream.write(buffer, 0, len);\n-                    fsize+=len;\n+                    fsize += len;\n                 } // end while\n                 fileOutputStream.close();\n             } // end outer while\n         } catch (IOException ex) {\n-            for (StackTraceElement el : ex.getStackTrace()){\n+            for (StackTraceElement el : ex.getStackTrace()) {\n                 logger.severe(el.toString());\n             }\n-            this.addErrorMessage(\"Failed to open ZipInputStream entry\" +  ex.getMessage());\n+            this.addErrorMessage(\"Failed to open ZipInputStream entry\" + ex.getMessage());\n             return false;\n         }\n-\n         try {\n-             zipStream.close();\n+            zipStream.close();\n         } catch (IOException ex) {\n-             Logger.getLogger(ShapefileHandler.class.getName()).log(Level.SEVERE, null, ex);\n+            Logger.getLogger(ShapefileHandler.class.getName()).log(Level.SEVERE, null, ex);\n         }\n-    return true;\n+        return true;\n     }\n     /*\n         Rezip the shapefile(s) into a given directory\n         Assumes that the zipfile_input_stream has already been checked!\n     */\n-    public boolean rezipShapefileSets(FileInputStream zipfile_input_stream, File rezippedFolder) throws IOException{\n+\n+    public boolean rezipShapefileSets(FileInputStream zipfile_input_stream, File rezippedFolder) throws IOException {\n         logger.fine(\"rezipShapefileSets\");\n         //msgt(\"rezipShapefileSets\");\n-        if (!this.zipFileProcessed){\n-             this.addErrorMessage(\"First use 'examineZipFile' (called in the constructor)\");\n+        if (!this.zipFileProcessed) {\n+            this.addErrorMessage(\"First use 'examineZipFile' (called in the constructor)\");\n             return false;\n         }\n-        if (!this.containsShapefile()){\n-             this.addErrorMessage(\"There are no shapefiles here!\");\n+\n+        if (!this.containsShapefile()) {\n+            this.addErrorMessage(\"There are no shapefiles here!\");\n             return false;\n         }\n-        if (zipfile_input_stream== null){\n+\n+        if (zipfile_input_stream == null) {\n             this.addErrorMessage(\"The zipfile_input_stream is null.\");\n             return false;\n         }\n-        if (rezippedFolder == null){\n+\n+        if (rezippedFolder == null) {\n             this.addErrorMessage(\"The rezippedFolder is null.\");\n             return false;\n         }\n \n-        if (!rezippedFolder.isDirectory()){\n+        if (!rezippedFolder.isDirectory()) {\n             this.addErrorMessage(\"The rezippedFolder does not exist: \" + rezippedFolder.getAbsolutePath());\n             return false;\n         }\n-        if (!containsShapefile()){\n+\n+        if (!containsShapefile()) {\n             msgt(\"There are no shapefiles to re-zip\");\n             return false;\n         }\n         \n         // Create target directory for unzipping files\n+\n         String dirname_for_unzipping;\n         File dir_for_unzipping;\n-        \n         dirname_for_unzipping = rezippedFolder.getAbsolutePath() + \"/\" + \"scratch-for-unzip-12345\";\n         dir_for_unzipping = new File(dirname_for_unzipping);\n-        logger.fine(\"Try to create directory: \" + dirname_for_unzipping );\n-\n-        if (!this.createDirectory(dir_for_unzipping)){\n+        logger.fine(\"Try to create directory: \" + dirname_for_unzipping);\n+        if (!this.createDirectory(dir_for_unzipping)) {\n             this.addErrorMessage(\"Failed to make directory: \" + dirname_for_unzipping);\n             return false;\n         }\n         \n         \n         // Unzip files!\n-        if (!this.unzipFilesToDirectory(zipfile_input_stream, dir_for_unzipping)){\n+\n+        if (!this.unzipFilesToDirectory(zipfile_input_stream, dir_for_unzipping)) {\n             this.addErrorMessage(\"Failed to unzip files.\");\n             return false;\n         }\n         // Redistribute files!\n+\n         String target_dirname = rezippedFolder.getAbsolutePath();\n         boolean redistribute_success = this.redistributeFilesFromZip(dirname_for_unzipping, target_dirname);\n \n         // Delete unzipped files in scratch directory\n         FileUtils.deleteDirectory(dir_for_unzipping);\n-        \n         logger.fine(\"Post redistribute:)\");\n-        for (File f : new File(target_dirname).listFiles()){\n+\n+        for (File f : new File(target_dirname).listFiles()) {\n             logger.fine(\"File exists: \" + f.getAbsolutePath());\n         }\n-        \n         return redistribute_success;\n-            \n     }\n-    \n-    private String getRedistributeFilePath(String dirname, String file_basename, String file_ext){\n-        \n-        if (dirname==null){\n+\n+    private String getRedistributeFilePath(String dirname, String file_basename, String file_ext) {\n+        if (dirname == null) {\n             this.addErrorMessage(\"getRedistributeFilePath. dirname is null\");\n             return null;\n         }\n-        if (file_basename==null){\n+\n+        if (file_basename == null) {\n             this.addErrorMessage(\"getRedistributeFilePath. file_basename is null\");\n             return null;\n         }\n-        if (file_ext==null){\n+\n+        if (file_ext == null) {\n             this.addErrorMessage(\"getRedistributeFilePath. file_ext is null\");\n             return null;\n         }\n-        if (file_ext.equals(BLANK_EXTENSION)){\n+\n+        if (file_ext.equals(BLANK_EXTENSION)) {\n             return dirname + \"/\" + file_basename;\n         }\n         return dirname + \"/\" + file_basename + \".\" + file_ext;\n@@ -477,43 +482,39 @@ public class ShapefileHandler{\n     \n     \n     */\n-    private boolean redistributeFilesFromZip(String source_dirname, String target_dirname){\n \n+    private boolean redistributeFilesFromZip(String source_dirname, String target_dirname) {\n         logger.fine(\"redistributeFilesFromZip. source: '\" + source_dirname + \"'  target: '\" + target_dirname + \"'\");\n \n-        int cnt =0;\n+        int cnt = 0;\n        /* START: Redistribute files by iterating through the Map of basenames + extensions\n         \n         example key: \"shape1\"\n         example ext_list: [\"shp\", \"shx\", \"dbf\", \"prj\"]\n        */\n-       for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n+        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n             cnt++;\n             String key = entry.getKey();\n             List<String> ext_list = entry.getValue();\n-\n             msg(\"\\n(\" + cnt + \") Basename: \" + key);\n             msg(\"Extensions: \" + Arrays.toString(ext_list.toArray()));\n             \n             // Is this a shapefile?  If so, rezip it\n-            if (doesListContainShapefileExtensions(ext_list)){\n-    \n+            if (doesListContainShapefileExtensions(ext_list)) {\n                 List<String> namesToZip = new ArrayList<>();\n-                \n                 for (String ext_name : ext_list) {\n-                    if (!this.isShapefileExtension(ext_name)){\n+                    if (!this.isShapefileExtension(ext_name)) {\n                         // Another file with similar basename as shapefile.  \n                         // e.g. if shapefile basename is \"census\", this might be \"census.xls\", \"census.pdf\", or another non-shapefile extension\n                         String source_file_fullpath = this.getRedistributeFilePath(source_dirname, key, ext_name);\n                         String targetFileFullpath = this.getRedistributeFilePath(target_dirname, key, ext_name);\n                         this.straightFileCopy(source_file_fullpath, targetFileFullpath);\n                         this.addFinalRezippedFile(targetFileFullpath);\n-                    }else{\n+                    } else {\n                         namesToZip.add(key + \".\" + ext_name);\n-                \n                     }\n                 }\n-            \n+\n                 String target_zipfile_name = target_dirname + \"/\" + key + \".zip\";\n                 //this.msg(\"target_zipfile_name: \"+ target_zipfile_name);\n                 //this.msg(\"source_dirname: \"+ source_dirname);\n@@ -525,54 +526,47 @@ public class ShapefileHandler{\n                 this.addFinalRezippedFile(target_zipfile_name);\n \n                 // rezip it\n-                                \n-            }else{\n+            } else {\n                 // Non-shapefiles\n                 for (String ext_name : ext_list) {\n                     String source_file_fullpath = this.getRedistributeFilePath(source_dirname, key, ext_name);\n                     String targetFileFullpath = this.getRedistributeFilePath(target_dirname, key, ext_name);\n                     this.straightFileCopy(source_file_fullpath, targetFileFullpath);\n                     this.addFinalRezippedFile(targetFileFullpath);\n-\n                 }\n             }\n         }\n        \n        // END: Redistribute files\n-       \n         return true;\n     }  // end: redistributeFilesFromZip\n-    \n-    \n-    private boolean straightFileCopy(String sourceFileName, String targetFileName){\n+\n+    private boolean straightFileCopy(String sourceFileName, String targetFileName) {\n         \n         //msg(\"Copy [\" + sourceFileName + \" to [\" + targetFileName + \"]\");\n-        if ((sourceFileName == null)||(targetFileName==null)){\n-            this.addErrorMessage(\"The source or target file was null.\\nSource: \" + sourceFileName +\"\\nTarget: \" + targetFileName);\n+        if ((sourceFileName == null) || (targetFileName == null)) {\n+            this.addErrorMessage(\"The source or target file was null.\\nSource: \" + sourceFileName + \"\\nTarget: \" + targetFileName);\n             return false;\n         }\n-        \n+\n         File source_file = new File(sourceFileName);\n         File target_file = new File(targetFileName);\n-        \n         if (target_file.getParentFile() != null) {\n             // Make sure the parent folder(s) are there:\n             createDirectory(target_file.getParentFile());\n         }\n         try {\n-            Files.copy(source_file.toPath(), target_file.toPath(), REPLACE_EXISTING);    \n+            Files.copy(source_file.toPath(), target_file.toPath(), REPLACE_EXISTING);\n         } catch (IOException ex) {\n-            this.addErrorMessage(\"Failed to copy file. IOException\\nSource: \" +  sourceFileName +\"\\nTarget: \" + targetFileName);\n+            this.addErrorMessage(\"Failed to copy file. IOException\\nSource: \" + sourceFileName + \"\\nTarget: \" + targetFileName);\n             return false;\n         }\n-       \n         return true;\n-        \n     }\n-  \n-    public boolean containsOnlySingleShapefile(){\n-        if (containsShapefile()){\n-            if (fileGroups.size()==filesizeHash.size()){\n+\n+    public boolean containsOnlySingleShapefile() {\n+        if (containsShapefile()) {\n+            if (fileGroups.size() == filesizeHash.size()) {\n                 return true;\n             }\n         }\n@@ -582,20 +576,20 @@ public class ShapefileHandler{\n     /*\n         Does this zip file contain a shapefile set?\n     */\n-    public boolean containsShapefile(){\n-        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()){\n+\n+    public boolean containsShapefile() {\n+        for (Map.Entry<String, List<String>> entry : fileGroups.entrySet()) {\n             String key = entry.getKey();\n             List<String> ext_list = entry.getValue();\n-            if (doesListContainShapefileExtensions(ext_list)){\n+            if (doesListContainShapefileExtensions(ext_list)) {\n                 return true;\n             }\n         }\n-              \n         return false;\n     }\n-    \n-    private boolean isShapefileExtension(String ext_name){\n-        if (ext_name == null){\n+\n+    private boolean isShapefileExtension(String ext_name) {\n+        if (ext_name == null) {\n             return false;\n         }\n         return SHAPEFILE_ALL_EXTENSIONS.contains(ext_name);\n@@ -603,27 +597,29 @@ public class ShapefileHandler{\n     /*\n         Does a list of file extensions match those required for a shapefile set?\n     */\n-    private boolean doesListContainShapefileExtensions(List<String> ext_list){\n-        if (ext_list == null){\n+\n+    private boolean doesListContainShapefileExtensions(List<String> ext_list) {\n+        if (ext_list == null) {\n             return false;\n         }\n         return ext_list.containsAll(SHAPEFILE_MANDATORY_EXTENSIONS);\n     }\n-    \n-    \n-    private void addToFileGroupHash(String basename, String ext){\n-        if ((basename==null)||(ext==null)){\n+\n+    private void addToFileGroupHash(String basename, String ext) {\n+        if ((basename == null) || (ext == null)) {\n             return;\n         }\n+\n         List<String> extension_list = fileGroups.get(basename);\n-        if (extension_list==null) {\n+        if (extension_list == null) {\n             extension_list = new ArrayList<>();\n         }\n-        if (!(extension_list.contains(ext))){\n+\n+        if (!(extension_list.contains(ext))) {\n             extension_list.add(ext);\n             fileGroups.put(basename, extension_list);\n         }\n-      }   // end addToFileGroupHash\n+    }   // end addToFileGroupHash\n     \n     /**\n      * Update the fileGroup hash which contains a { base_filename : [ext1, ext2, etc ]}\n@@ -631,47 +627,48 @@ public class ShapefileHandler{\n      #\n      * @param fname filename in String format\n      */\n-    private void updateFileGroupHash(String fname){\n-        if (fname == null){\n+\n+    private void updateFileGroupHash(String fname) {\n+        if (fname == null) {\n             return;\n         }\n              \n         // Split filename into basename and extension.  No extension yields only basename\n         //\n-        if (fname.toLowerCase().endsWith(SHP_XML_EXTENSION)){\n+\n+        if (fname.toLowerCase().endsWith(SHP_XML_EXTENSION)) {\n             int idx = fname.toLowerCase().indexOf(\".\" + SHP_XML_EXTENSION);\n-            if (idx >= 1){   // if idx==0, then the file name is \".shp.xml\"\"\n+            if (idx >=1) {   // if idx==0, then the file name is \".shp.xml\"\"\n                 String basename = fname.substring(0, idx);\n-                String ext = fname.substring(idx+1);\n+                String ext = fname.substring(idx + 1);\n                 addToFileGroupHash(basename, ext);\n                 return;\n             }\n         }\n-        \n+\n         String[] tokens = fname.split(\"\\\\.(?=[^\\\\.]+$)\");\n-        if (tokens.length==1){\n+        if (tokens.length == 1) {\n             addToFileGroupHash(tokens[0], BLANK_EXTENSION);      // file basename, no extension\n-\n-        }else if (tokens.length==2){\n+        } else if (tokens.length == 2) {\n             addToFileGroupHash(tokens[0], tokens[1]);  // file basename, extension\n         }\n     } // end updateFileGroupHash\n-    \n-    private boolean isFileToSkip(String fname){\n-        if ((fname==null)||(fname.equals(\"\"))){\n+\n+    private boolean isFileToSkip(String fname) {\n+        if ((fname == null) || (fname.equals(\"\"))) {\n             return true;\n         }\n-        \n-        if (fname.startsWith(\"__\")){\n+\n+        if (fname.startsWith(\"__\")) {\n             return true;\n         }\n-        \n-        if (fname.startsWith(\"._\")){\n+\n+        if (fname.startsWith(\"._\")) {\n             return true;\n         }\n-        \n+\n         File fnameFile = new File(fname);\n-        if (fnameFile.getName().endsWith(\".DS_Store\")){\n+        if (fnameFile.getName().endsWith(\".DS_Store\")) {\n             return true;\n         }\n         return false;\n@@ -683,109 +680,89 @@ public class ShapefileHandler{\n      *\n      * @param FileInputStream zip_file_stream\n      */\n-    private boolean examineZipfile(FileInputStream zip_file_stream){\n+\n+    private boolean examineZipfile(FileInputStream zip_file_stream) {\n        // msgt(\"examineZipfile\");\n-        \n-        if (zip_file_stream==null){\n-               this.addErrorMessage(\"The zip file stream was null\");\n-               return false;\n-           }\n+        if (zip_file_stream == null) {\n+            this.addErrorMessage(\"The zip file stream was null\");\n+            return false;\n+        }\n         \n        // Clear out file lists\n-       this.filesListInDir.clear();\n-       this.filesizeHash.clear();\n-       this.fileGroups.clear();\n-       \n-       try{\n+        this.filesListInDir.clear();\n+        this.filesizeHash.clear();\n+        this.fileGroups.clear();\n+        try {\n             ZipInputStream zipStream = new ZipInputStream(zip_file_stream);\n             ZipEntry entry;\n-            \n-            while((entry = zipStream.getNextEntry())!=null){\n-\n-                 String zentryFileName = entry.getName();\n+            while ((entry = zipStream.getNextEntry()) != null) {\n+                String zentryFileName = entry.getName();\n                  //msg(\"zip entry: \" + entry.getName());\n                  // Skip files or folders starting with __\n-                 if (this.isFileToSkip(zentryFileName)){\n-                     continue;\n-                 }\n+                if (this.isFileToSkip(zentryFileName)) {\n+                    continue;\n+                }\n \n                 if (entry.isDirectory()) {\n                    //String dirpath = outputFolder + \"/\" + zentryFileName;\n                    //createDirectory(dirpath);\n-                   continue;       \n+                    continue;\n                 }\n-                                \n+\n                 String unzipFileName = this.getFileBasename(zentryFileName);\n-                if (unzipFileName==null){\n+                if (unzipFileName == null) {\n                     logger.warning(\"Zip Entry Basename is an empty string: \" + zentryFileName);\n                     continue;\n                 }\n+\n                 String unzipFolderName = this.getFolderName(zentryFileName);\n-                                \n-                String unzipFilePath = unzipFileName; \n+                String unzipFilePath = unzipFileName;\n                 if (unzipFolderName != null) {\n-                    unzipFilePath = unzipFolderName + \"/\" + unzipFileName; \n+                    unzipFilePath = unzipFolderName + \"/\" + unzipFileName;\n                 }\n \n-                \n-                String s = String.format(\"Entry: %s len %d added %TD\",\n-                                   unzipFilePath, entry.getSize(),\n-                                   new Date(entry.getTime()));\n-\n-                if (!this.filesListInDir.contains(s)){                   \n+                String s = String.format(\"Entry: %s len %d added %TD\", unzipFilePath, entry.getSize(), new Date(entry.getTime()));\n+                if (!this.filesListInDir.contains(s)) {\n                     this.filesListInDir.add(s);\n                     updateFileGroupHash(unzipFilePath);\n                     this.filesizeHash.put(unzipFilePath, entry.getSize());\n                 }\n-           } // end while\n-           \n-           zipStream.close();\n-\n-           if (this.filesListInDir.isEmpty()){\n-               errorMessage = \"No files in zipStream\";\n-               return false;\n-           }\n-\n-           this.zipFileProcessed = true;\n-           return true;\n-\n-       }catch(ZipException ex){\n-               this.addErrorMessage(\"ZipException\");\n-               msgt(\"ZipException\");\n-               return false;\n-\n-       }catch(IOException ex){\n+            } // end while\n+            zipStream.close();\n+            if (this.filesListInDir.isEmpty()) {\n+                errorMessage = \"No files in zipStream\";\n+                return false;\n+            }\n+            this.zipFileProcessed = true;\n+            return true;\n+        } catch (ZipException ex) {\n+            this.addErrorMessage(\"ZipException\");\n+            msgt(\"ZipException\");\n+            return false;\n+        } catch (IOException ex) {\n            //ex.printStackTrace(); \n-           this.addErrorMessage(\"IOException File name\");\n-           msgt(\"IOException\");\n-           return false;\n-       }catch(IllegalArgumentException ex){\n-           this.addErrorMessage(\"IllegalArgumentException when parsing zipfile\");\n-           msgt(\"IllegalArgumentException when parsing zipfile\");\n-           return false;\n-           \n-       }finally{\n-           \n-       }\n-\n-   } // end examineFile\n-\n-  public static void main(String[] args){\n+            this.addErrorMessage(\"IOException File name\");\n+            msgt(\"IOException\");\n+            return false;\n+        } catch (IllegalArgumentException ex) {\n+            this.addErrorMessage(\"IllegalArgumentException when parsing zipfile\");\n+            msgt(\"IllegalArgumentException when parsing zipfile\");\n+            return false;\n+        } finally {}\n+    } // end examineFile\n \n-        // Example usage\n-       if (args.length == 0){\n-           \n+    public static void main(String[] args) {\n \n-       }else if(args.length > 1){\n-           System.out.println( \"Please only give one file name!\");  \n-       }else{   \n+        // Example usage\n+        if (args.length == 0) {} else if (args.length > 1) {\n+            System.out.println(\"Please only give one file name!\");\n+        } else {   \n            /*\n            String zip_name =  args[0];      \n            System.out.println( \"Process File: \" + zip_name);\n            System.out.println( \"Process File: \" + zip_name);                \n            ShapefileHandler zpt = new ShapefileHandler(zip_name);\n-           */\n-       }\n-   } // end main\n+           */}\n+    } // end main\n \n-} // end ShapefileHandler\n\\ No newline at end of file\n+}\n\\ No newline at end of file\n",
            "diff_size": 318
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "187",
                    "column": "7",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/124/ShapefileHandler.java\nindex 3af562882f3..d6971c9febe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/124/ShapefileHandler.java\n@@ -182,7 +182,7 @@ public class ShapefileHandler{\n         if (fname == null){\n             return false;\n         }\n-      \tFile folder_obj = new File(fname);\n+       File folder_obj = new File(fname);\n         msg(\"ShapefileHandler. Folder created: \" + folder_obj.getAbsolutePath());\n       \treturn createDirectory(folder_obj);\n       \t\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "187",
                    "column": "7",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/124/ShapefileHandler.java\nindex 3af562882f3..0be27067138 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/124/ShapefileHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/124/ShapefileHandler.java\n@@ -182,7 +182,7 @@ public class ShapefileHandler{\n         if (fname == null){\n             return false;\n         }\n-      \tFile folder_obj = new File(fname);\n+        File folder_obj = new File(fname);\n         msg(\"ShapefileHandler. Folder created: \" + folder_obj.getAbsolutePath());\n       \treturn createDirectory(folder_obj);\n       \t\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}