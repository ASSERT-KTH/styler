{
    "project_name": "wso2-attic-commons",
    "error_id": "292",
    "information": {
        "errors": [
            {
                "line": "183",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 137).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            String injectValue =\n                    \"<div>\" +\n                    \"<h4><a href=\\\"#\\\" onClick=\\\"javascript:top.showServiceInitializer(); return false;\\\">Services</a>&nbsp;&gt;&nbsp;\" +\n                    \"<a href=\\\"#\\\" onClick=\\\"javascript:top.listServiceData('\" + serviceName + \"'); return false;\\\">\" +\n                    serviceName + \"</a>&nbsp;&gt;&nbsp;\" + \"Try Web Service\" +\n                    \"</h4>\" +",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/292/DynamicCodeGeneratorService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/292/DynamicCodeGeneratorService.java\nindex a44622675ea..de00a8001e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/292/DynamicCodeGeneratorService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/292/DynamicCodeGeneratorService.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.wso2.codegen.service.ajax;\n \n import org.apache.axis2.AxisFault;\n@@ -51,171 +52,171 @@ import java.util.Map;\n \n public class DynamicCodeGeneratorService {\n \n-    private static Log log = LogFactory.getLog(DynamicCodeGeneratorService.class);\n+  private static Log log = LogFactory.getLog(DynamicCodeGeneratorService.class);\n \n \n-    public String generate(String serviceName) throws AxisFault {\n+  public String generate(String serviceName) throws AxisFault {\n \n-        MessageContext currentMessageContext = MessageContext.getCurrentMessageContext();\n-        AxisConfiguration axisConfiguration =\n-                currentMessageContext.getConfigurationContext().getAxisConfiguration();\n-        AxisService service = axisConfiguration.getService(serviceName);\n-        if (service == null) {\n-            String message = \"Service \" + serviceName + \" cannot be found.\";\n-            log.error(message);\n-            throw new AxisFault(message);\n-        }\n-        Parameter enableMTOM = service.getParameter(Constants.Configuration.ENABLE_MTOM);\n-        if (enableMTOM != null && enableMTOM.getValue().equals(\"true\")) {\n-            throw new AxisFault(\"Try It feature is not available for MTOM enabled services\");\n-        }\n+    MessageContext currentMessageContext = MessageContext.getCurrentMessageContext();\n+    AxisConfiguration axisConfiguration =\n+      currentMessageContext.getConfigurationContext().getAxisConfiguration();\n+    AxisService service = axisConfiguration.getService(serviceName);\n+    if (service == null) {\n+      String message = \"Service \" + serviceName + \" cannot be found.\";\n+      log.error(message);\n+      throw new AxisFault(message);\n+    }\n+    Parameter enableMTOM = service.getParameter(Constants.Configuration.ENABLE_MTOM);\n+    if (enableMTOM != null && enableMTOM.getValue().equals(\"true\")) {\n+      throw new AxisFault(\"Try It feature is not available for MTOM enabled services\");\n+    }\n \n-        Object parameterValue = service.getParameterValue(\"WSDLSupplier\");\n-        if (parameterValue != null) {\n-            String message = \"RPC/ENC WSDL found. Axis2 does not support RPC/ENC encoding scheme\";\n-            log.warn(message);\n-            throw new AxisFault(message);\n-        }\n+    Object parameterValue = service.getParameterValue(\"WSDLSupplier\");\n+    if (parameterValue != null) {\n+      String message = \"RPC/ENC WSDL found. Axis2 does not support RPC/ENC encoding scheme\";\n+      log.warn(message);\n+      throw new AxisFault(message);\n+    }\n \n-        String uuidTryit;\n-        WSDLMetaDataFactory wsdlMetaDataFactory = WSDLMetaDataFactory\n-                .getFactory(\"2.0\", serviceName, MessageContext.getCurrentMessageContext());\n+    String uuidTryit;\n+    WSDLMetaDataFactory wsdlMetaDataFactory = WSDLMetaDataFactory\n+      .getFactory(\"2.0\", serviceName, MessageContext.getCurrentMessageContext());\n \n-        WSDLMetaDataFactory.UniqueOutputDirInfo uniqueOutputDirInfo =\n-                wsdlMetaDataFactory.generateUniqueCodegenOutputDir();\n+    WSDLMetaDataFactory.UniqueOutputDirInfo uniqueOutputDirInfo =\n+      wsdlMetaDataFactory.generateUniqueCodegenOutputDir();\n \n-        uuidTryit = uniqueOutputDirInfo.getUuid();\n+    uuidTryit = uniqueOutputDirInfo.getUuid();\n \n \n-        String outputDir =\n-                wsdlMetaDataFactory.generateUniqueDir(\"dynamic_codegen\", uniqueOutputDirInfo)\n-                        .getOutputDir();\n+    String outputDir =\n+      wsdlMetaDataFactory.generateUniqueDir(\"dynamic_codegen\", uniqueOutputDirInfo)\n+        .getOutputDir();\n \n-        String wsdlFileURI = wsdlMetaDataFactory.getWSDLFileURI(outputDir);\n+    String wsdlFileURI = wsdlMetaDataFactory.getWSDLFileURI(outputDir);\n \n-        //Generating the .sig foramat using wsdl2sig.xslt to intermediate DOM Document. This doc will be\n-        // used to transformed with tryit.xslt and jsstub.xslt.\n+    //Generating the .sig foramat using wsdl2sig.xslt to intermediate DOM Document. This doc will be\n+    // used to transformed with tryit.xslt and jsstub.xslt.\n \n-        try {\n-            InputStream wsdl2InStream = new FileInputStream(new File(wsdlFileURI));\n-            InputStream wsdl2sigXSLTStream =\n-                    getClass().getClassLoader().getResourceAsStream(\"wsdl2sig.xslt\");\n+    try {\n+      InputStream wsdl2InStream = new FileInputStream(new File(wsdlFileURI));\n+      InputStream wsdl2sigXSLTStream =\n+        getClass().getClassLoader().getResourceAsStream(\"wsdl2sig.xslt\");\n \n-            Source wsdl2Source = new StreamSource(wsdl2InStream);\n-            Source wsdl2sigXSLTSource = new StreamSource(wsdl2sigXSLTStream);\n+      Source wsdl2Source = new StreamSource(wsdl2InStream);\n+      Source wsdl2sigXSLTSource = new StreamSource(wsdl2sigXSLTStream);\n \n \n-            DocumentBuilder docB = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n-            Document doc = docB.newDocument();\n+      DocumentBuilder docB = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n+      Document doc = docB.newDocument();\n \n-            //do the first transformation\n-            Result result = new DOMResult(doc);\n-            Transformer transformer =\n-                    TransformerFactory.newInstance().newTransformer(wsdl2sigXSLTSource);\n-            transformer.transform(wsdl2Source, result);\n+      //do the first transformation\n+      Result result = new DOMResult(doc);\n+      Transformer transformer =\n+        TransformerFactory.newInstance().newTransformer(wsdl2sigXSLTSource);\n+      transformer.transform(wsdl2Source, result);\n \n-            ///////////////////////////////////////////////////\n+      ///////////////////////////////////////////////////\n //            System.out.println(DOM2Writer.nodeToString(doc));\n-            ////////////////////////////////////////////////////\n-\n-            DOMSource xmlSource = new DOMSource(doc);\n-\n-            Map fileResourcesMap =\n-                    (Map) MessageContext.getCurrentMessageContext().getConfigurationContext()\n-                            .getProperty(WSO2Constants.FILE_RESOURCE_MAP);\n-\n-            if (fileResourcesMap == null) {\n-                fileResourcesMap = new Hashtable();\n-                MessageContext.getCurrentMessageContext().getConfigurationContext()\n-                        .setProperty(WSO2Constants.FILE_RESOURCE_MAP,\n-                                     fileResourcesMap);\n-            }\n-\n-\n-            String uuidJsstub;\n-            WSDLMetaDataFactory.UniqueOutputDirInfo jsstubUniqueOutputDirInfo =\n-                    wsdlMetaDataFactory.generateUniqueCodegenOutputDir();\n-            uuidJsstub = jsstubUniqueOutputDirInfo.getUuid();\n-\n-            String jstubOutputDir = wsdlMetaDataFactory\n-                    .generateUniqueDir(\"dynamic_codegen\", jsstubUniqueOutputDirInfo).getOutputDir();\n-            File jstubOutputDirFile = new File(jstubOutputDir);\n-            jstubOutputDirFile.mkdirs();\n-            File jsStubFle = new File(jstubOutputDir, serviceName + \".stub.js\");\n-\n-            OutputStream jsStubOutputStream = new FileOutputStream(jsStubFle);\n-            Result jsStubResult = new StreamResult(jsStubOutputStream);\n-            InputStream jsStubXSLTStream =\n-                    getClass().getClassLoader().getResourceAsStream(\"jsstub.xslt\");\n-            Source jsStubXSLSource = new StreamSource(jsStubXSLTStream);\n-            transformer = TransformerFactory.newInstance().newTransformer(jsStubXSLSource);\n-            transformer.transform(xmlSource, jsStubResult);\n-\n-            FileFilter jsStubFileFilter = new JSStubFilter();\n-            String absolutePath = null;\n-            File[] files0 = jstubOutputDirFile.listFiles(jsStubFileFilter);\n-            if ((files0 != null) && (files0[0] != null) &&\n-                (files0[0].getAbsoluteFile() != null)) {\n-                absolutePath = files0[0].getAbsoluteFile().getAbsolutePath();\n-                fileResourcesMap.put(uuidJsstub, absolutePath);\n-            }\n-\n-            if (absolutePath == null) {\n-                throw new AxisFault(\n-                        DynamicCodeGeneratorService.class.getName() + \" cannot continue\" +\n-                        \" since an instance of jsstub.xslt is not available\");\n-            }\n-\n-\n-            InputStream tryItXSLTStream =\n-                    getClass().getClassLoader().getResourceAsStream(\"tryit.xslt\");\n-            Source tryItXSLSource = new StreamSource(tryItXSLTStream);\n-            File tryItOutFile = new File(outputDir, serviceName + \".html\");\n-            OutputStream tryItOutFileStream = new FileOutputStream(tryItOutFile);\n-            Result tryItResult = new StreamResult(tryItOutFileStream);\n-            transformer = TransformerFactory.newInstance().newTransformer(tryItXSLSource);\n-            transformer.setParameter(\"wsrequest-location\", \"js/WSRequest.js\");\n-            transformer.setParameter(\"stub-location\", \"filedownload?id=\" + uuidJsstub);\n-\n-\n-            String injectValue =\n-                    \"<div>\" +\n-                    \"<h4><a href=\\\"#\\\" onClick=\\\"javascript:top.showServiceInitializer(); return false;\\\">Services</a>&nbsp;&gt;&nbsp;\" +\n-                    \"<a href=\\\"#\\\" onClick=\\\"javascript:top.listServiceData('\" + serviceName + \"'); return false;\\\">\" +\n-                    serviceName + \"</a>&nbsp;&gt;&nbsp;\" + \"Try Web Service\" +\n-                    \"</h4>\" +\n-                    \"</div>\";\n-\n-            transformer.setParameter(\"show-alternate\", \"false\");\n-            transformer.setParameter(\"breadcrumbs\", injectValue);\n-            transformer.transform(xmlSource, tryItResult);\n-\n-            FileFilter tryItFileFilter = new TryItFilter();\n-            File[] files1 = new File(outputDir).listFiles(tryItFileFilter);\n-            if ((files1 != null) && (files1[0] != null) &&\n-                (files1[0].getAbsoluteFile() != null)) {\n-                fileResourcesMap.put(uuidTryit, files1[0].getAbsoluteFile().getAbsolutePath());\n-            }\n-            log.debug(\"Try it page has been generated for the service: \" + serviceName);\n-            return \"filedownload\" + \"?id=\" + uuidTryit;\n-        } catch (Exception e) {\n-            log.error(e);\n-            throw AxisFault.makeFault(e);\n-        } \n-\n+      ////////////////////////////////////////////////////\n+\n+      DOMSource xmlSource = new DOMSource(doc);\n+\n+      Map fileResourcesMap =\n+        (Map) MessageContext.getCurrentMessageContext().getConfigurationContext()\n+          .getProperty(WSO2Constants.FILE_RESOURCE_MAP);\n+\n+      if (fileResourcesMap == null) {\n+        fileResourcesMap = new Hashtable();\n+        MessageContext.getCurrentMessageContext().getConfigurationContext()\n+          .setProperty(WSO2Constants.FILE_RESOURCE_MAP,\n+            fileResourcesMap);\n+      }\n+\n+\n+      String uuidJsstub;\n+      WSDLMetaDataFactory.UniqueOutputDirInfo jsstubUniqueOutputDirInfo =\n+        wsdlMetaDataFactory.generateUniqueCodegenOutputDir();\n+      uuidJsstub = jsstubUniqueOutputDirInfo.getUuid();\n+\n+      String jstubOutputDir = wsdlMetaDataFactory\n+        .generateUniqueDir(\"dynamic_codegen\", jsstubUniqueOutputDirInfo).getOutputDir();\n+      File jstubOutputDirFile = new File(jstubOutputDir);\n+      jstubOutputDirFile.mkdirs();\n+      File jsStubFle = new File(jstubOutputDir, serviceName + \".stub.js\");\n+\n+      OutputStream jsStubOutputStream = new FileOutputStream(jsStubFle);\n+      Result jsStubResult = new StreamResult(jsStubOutputStream);\n+      InputStream jsStubXSLTStream =\n+        getClass().getClassLoader().getResourceAsStream(\"jsstub.xslt\");\n+      Source jsStubXSLSource = new StreamSource(jsStubXSLTStream);\n+      transformer = TransformerFactory.newInstance().newTransformer(jsStubXSLSource);\n+      transformer.transform(xmlSource, jsStubResult);\n+\n+      FileFilter jsStubFileFilter = new JSStubFilter();\n+      String absolutePath = null;\n+      File[] files0 = jstubOutputDirFile.listFiles(jsStubFileFilter);\n+      if ((files0 != null) && (files0[0] != null) &&\n+        (files0[0].getAbsoluteFile() != null)) {\n+        absolutePath = files0[0].getAbsoluteFile().getAbsolutePath();\n+        fileResourcesMap.put(uuidJsstub, absolutePath);\n+      }\n+\n+      if (absolutePath == null) {\n+        throw new AxisFault(\n+          DynamicCodeGeneratorService.class.getName() + \" cannot continue\" +\n+            \" since an instance of jsstub.xslt is not available\");\n+      }\n+\n+\n+      InputStream tryItXSLTStream =\n+        getClass().getClassLoader().getResourceAsStream(\"tryit.xslt\");\n+      Source tryItXSLSource = new StreamSource(tryItXSLTStream);\n+      File tryItOutFile = new File(outputDir, serviceName + \".html\");\n+      OutputStream tryItOutFileStream = new FileOutputStream(tryItOutFile);\n+      Result tryItResult = new StreamResult(tryItOutFileStream);\n+      transformer = TransformerFactory.newInstance().newTransformer(tryItXSLSource);\n+      transformer.setParameter(\"wsrequest-location\", \"js/WSRequest.js\");\n+      transformer.setParameter(\"stub-location\", \"filedownload?id=\" + uuidJsstub);\n+\n+\n+      String injectValue =\n+        \"<div>\" +\n+          \"<h4><a href=\\\"#\\\" onClick=\\\"javascript:top.showServiceInitializer(); return false;\\\">Services</a>&nbsp;&gt;&nbsp;\" +\n+          \"<a href=\\\"#\\\" onClick=\\\"javascript:top.listServiceData('\" + serviceName + \"'); return false;\\\">\" +\n+          serviceName + \"</a>&nbsp;&gt;&nbsp;\" + \"Try Web Service\" +\n+          \"</h4>\" +\n+          \"</div>\";\n+\n+      transformer.setParameter(\"show-alternate\", \"false\");\n+      transformer.setParameter(\"breadcrumbs\", injectValue);\n+      transformer.transform(xmlSource, tryItResult);\n+\n+      FileFilter tryItFileFilter = new TryItFilter();\n+      File[] files1 = new File(outputDir).listFiles(tryItFileFilter);\n+      if ((files1 != null) && (files1[0] != null) &&\n+        (files1[0].getAbsoluteFile() != null)) {\n+        fileResourcesMap.put(uuidTryit, files1[0].getAbsoluteFile().getAbsolutePath());\n+      }\n+      log.debug(\"Try it page has been generated for the service: \" + serviceName);\n+      return \"filedownload\" + \"?id=\" + uuidTryit;\n+    } catch (Exception e) {\n+      log.error(e);\n+      throw AxisFault.makeFault(e);\n     }\n \n-    private class TryItFilter implements FileFilter {\n-        public boolean accept(File f) {\n-            return f.getName().endsWith(\".html\");\n-        }\n+  }\n+\n+  private class TryItFilter implements FileFilter {\n+    public boolean accept(File f) {\n+      return f.getName().endsWith(\".html\");\n     }\n+  }\n \n \n-    private class JSStubFilter implements FileFilter {\n-        public boolean accept(File f) {\n-            return f.getName().endsWith(\".stub.js\");\n-        }\n+  private class JSStubFilter implements FileFilter {\n+    public boolean accept(File f) {\n+      return f.getName().endsWith(\".stub.js\");\n     }\n+  }\n \n }\n",
            "diff_size": 146
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/292/DynamicCodeGeneratorService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/292/DynamicCodeGeneratorService.java\nindex a44622675ea..ad47046b400 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/292/DynamicCodeGeneratorService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/292/DynamicCodeGeneratorService.java\n@@ -53,8 +53,7 @@ public class DynamicCodeGeneratorService {\n \n     private static Log log = LogFactory.getLog(DynamicCodeGeneratorService.class);\n \n-\n-    public String generate(String serviceName) throws AxisFault {\n+public String generate(String serviceName) throws AxisFault {\n \n         MessageContext currentMessageContext = MessageContext.getCurrentMessageContext();\n         AxisConfiguration axisConfiguration =\n@@ -129,10 +128,9 @@ public class DynamicCodeGeneratorService {\n                 MessageContext.getCurrentMessageContext().getConfigurationContext()\n                         .setProperty(WSO2Constants.FILE_RESOURCE_MAP,\n                                      fileResourcesMap);\n-            }\n-\n+    }\n \n-            String uuidJsstub;\n+String uuidJsstub;\n             WSDLMetaDataFactory.UniqueOutputDirInfo jsstubUniqueOutputDirInfo =\n                     wsdlMetaDataFactory.generateUniqueCodegenOutputDir();\n             uuidJsstub = jsstubUniqueOutputDirInfo.getUuid();\n@@ -166,8 +164,7 @@ public class DynamicCodeGeneratorService {\n                         \" since an instance of jsstub.xslt is not available\");\n             }\n \n-\n-            InputStream tryItXSLTStream =\n+InputStream tryItXSLTStream =\n                     getClass().getClassLoader().getResourceAsStream(\"tryit.xslt\");\n             Source tryItXSLSource = new StreamSource(tryItXSLTStream);\n             File tryItOutFile = new File(outputDir, serviceName + \".html\");\n@@ -185,8 +182,7 @@ public class DynamicCodeGeneratorService {\n                     serviceName + \"</a>&nbsp;&gt;&nbsp;\" + \"Try Web Service\" +\n                     \"</h4>\" +\n                     \"</div>\";\n-\n-            transformer.setParameter(\"show-alternate\", \"false\");\n+transformer.setParameter(\"show-alternate\", \"false\");\n             transformer.setParameter(\"breadcrumbs\", injectValue);\n             transformer.transform(xmlSource, tryItResult);\n \n@@ -201,11 +197,10 @@ public class DynamicCodeGeneratorService {\n         } catch (Exception e) {\n             log.error(e);\n             throw AxisFault.makeFault(e);\n-        } \n-\n+        }\n     }\n \n-    private class TryItFilter implements FileFilter {\n+private class TryItFilter implements FileFilter {\n         public boolean accept(File f) {\n             return f.getName().endsWith(\".html\");\n         }\n@@ -218,4 +213,4 @@ public class DynamicCodeGeneratorService {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}