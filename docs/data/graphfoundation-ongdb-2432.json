{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2432",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2432/TransactionCommitProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2432/TransactionCommitProcess.java\nindex 2ffc80e8b04..185bea28324 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2432/TransactionCommitProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2432/TransactionCommitProcess.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import org.neo4j.internal.kernel.api.exceptions.TransactionFailureException;\n@@ -29,22 +30,22 @@ import org.neo4j.storageengine.api.TransactionApplicationMode;\n  * captured in {@link TransactionRepresentation}, commit requires some more information to proceed, since a transaction\n  * can come from various sources (normal commit, recovery etc) each of which can be committed but requires\n  * different/additional handling.\n- *\n+ * <p>\n  * A simple implementation of this would be to append to a log and then apply the commands of the representation\n  * to storage that generated them. Another could instead serialize the transactions over the network to another machine.\n  */\n public interface TransactionCommitProcess\n {\n-    /**\n-     * Commit a batch of transactions. After this method returns the batch of transaction should be committed\n-     * durably and be recoverable in the event of failure after this point.\n-     *\n-     * @param batch transactions to commit.\n-     * @param commitEvent {@link CommitEvent} for traceability.\n-     * @param mode The {@link TransactionApplicationMode} to use when applying these transactions.\n-     * @return transaction id of the last committed transaction in this batch.\n-     * @throws TransactionFailureException If the commit process fails.\n-     */\n-    long commit( TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode )\n-            throws TransactionFailureException;\n+  /**\n+   * Commit a batch of transactions. After this method returns the batch of transaction should be committed\n+   * durably and be recoverable in the event of failure after this point.\n+   *\n+   * @param batch       transactions to commit.\n+   * @param commitEvent {@link CommitEvent} for traceability.\n+   * @param mode        The {@link TransactionApplicationMode} to use when applying these transactions.\n+   * @return transaction id of the last committed transaction in this batch.\n+   * @throws TransactionFailureException If the commit process fails.\n+   */\n+  long commit(TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode)\n+      throws TransactionFailureException;\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2432/TransactionCommitProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2432/TransactionCommitProcess.java\nindex 2ffc80e8b04..b767b203472 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2432/TransactionCommitProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2432/TransactionCommitProcess.java\n@@ -45,6 +45,5 @@ public interface TransactionCommitProcess\n      * @return transaction id of the last committed transaction in this batch.\n      * @throws TransactionFailureException If the commit process fails.\n      */\n-    long commit( TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode )\n-            throws TransactionFailureException;\n-}\n+    long commit( TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode ) throws TransactionFailureException;\n+    }\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}