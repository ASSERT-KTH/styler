{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3993",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "163",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "191",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3993/AbstractApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3993/AbstractApp.java\nindex 7e1d154d793..9d64cf91e61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3993/AbstractApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3993/AbstractApp.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.impl;\n \n import java.rmi.RemoteException;\n@@ -41,164 +42,161 @@ import org.neo4j.shell.util.json.JSONObject;\n  */\n public abstract class AbstractApp implements App\n {\n-    private final Map<String, OptionDefinition> optionDefinitions =    new HashMap<>();\n-    private AppShellServer server;\n-\n-    @Override\n-    public String getName()\n+  private final Map<String, OptionDefinition> optionDefinitions = new HashMap<>();\n+  private AppShellServer server;\n+\n+  @Override\n+  public String getName()\n+  {\n+    return this.getClass().getSimpleName().toLowerCase();\n+  }\n+\n+  @Override\n+  public OptionDefinition getOptionDefinition(String option)\n+  {\n+    return this.optionDefinitions.get(option);\n+  }\n+\n+  protected void addOptionDefinition(String option,\n+                                     OptionDefinition definition)\n+  {\n+    this.optionDefinitions.put(option, definition);\n+  }\n+\n+  @Override\n+  public String[] getAvailableOptions()\n+  {\n+    String[] result = this.optionDefinitions.keySet().toArray(\n+        new String[this.optionDefinitions.size()]);\n+    Arrays.sort(result);\n+    return result;\n+  }\n+\n+  public void setServer(AppShellServer server)\n+  {\n+    if (this.server != null)\n     {\n-        return this.getClass().getSimpleName().toLowerCase();\n+      throw new IllegalStateException(\"Server already set\");\n     }\n-\n-    @Override\n-    public OptionDefinition getOptionDefinition( String option )\n+    this.server = server;\n+  }\n+\n+  @Override\n+  public AppShellServer getServer()\n+  {\n+    return this.server;\n+  }\n+\n+  @Override\n+  public String getDescription()\n+  {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getDescription(String option)\n+  {\n+    OptionDefinition definition = this.optionDefinitions.get(option);\n+    return definition == null ? null : definition.getDescription();\n+  }\n+\n+  @Override\n+  public void shutdown()\n+  {\n+    // Default behavior is to do nothing\n+  }\n+\n+  @Override\n+  public List<String> completionCandidates(String partOfLine, Session session) throws ShellException\n+  {\n+    return Collections.emptyList();\n+  }\n+\n+  protected static Map<String, Object> parseFilter(String filterString,\n+                                                   Output out) throws RemoteException, ShellException\n+  {\n+    if (filterString == null)\n     {\n-        return this.optionDefinitions.get( option );\n+      return new HashMap<>();\n     }\n \n-    protected void addOptionDefinition( String option,\n-            OptionDefinition definition )\n+    Map<String, Object> map;\n+    String signsOfJSON = \":\";\n+    int numberOfSigns = 0;\n+    for (int i = 0; i < signsOfJSON.length(); i++)\n     {\n-        this.optionDefinitions.put( option, definition );\n+      if (filterString.contains(\n+          String.valueOf(signsOfJSON.charAt(i))))\n+      {\n+        numberOfSigns++;\n+      }\n     }\n \n-    @Override\n-    public String[] getAvailableOptions()\n+    if (numberOfSigns >= 1)\n     {\n-        String[] result = this.optionDefinitions.keySet().toArray(\n-            new String[ this.optionDefinitions.size() ] );\n-        Arrays.sort( result );\n-        return result;\n-    }\n-\n-    public void setServer( AppShellServer server )\n+      String jsonString = filterString;\n+      if (!jsonString.startsWith(\"{\"))\n+      {\n+        jsonString = \"{\" + jsonString;\n+      }\n+      if (!jsonString.endsWith(\"}\"))\n+      {\n+        jsonString += \"}\";\n+      }\n+      try\n+      {\n+        map = parseJSONMap(jsonString);\n+      } catch (JSONException e)\n+      {\n+        out.println(\"parser: \\\"\" + filterString + \"\\\" hasn't got \" +\n+            \"correct JSON formatting: \" + e.getMessage());\n+        throw ShellException.wrapCause(e);\n+      }\n+    } else\n     {\n-        if ( this.server != null )\n-        {\n-            throw new IllegalStateException( \"Server already set\" );\n-        }\n-        this.server = server;\n+      map = new HashMap<>();\n+      map.put(filterString, null);\n     }\n-\n-    @Override\n-    public AppShellServer getServer()\n+    return map;\n+  }\n+\n+  protected static Map<String, Object> parseJSONMap(String jsonString)\n+      throws JSONException\n+  {\n+    JSONObject object = new JSONObject(jsonString);\n+    Map<String, Object> result = new HashMap<>();\n+    for (String name : JSONObject.getNames(object))\n     {\n-        return this.server;\n+      Object value = object.get(name);\n+      if (value != null && value instanceof String && ((String) value).length() == 0)\n+      {\n+        value = null;\n+      }\n+      result.put(name, value);\n     }\n+    return result;\n+  }\n \n-    @Override\n-    public String getDescription()\n+  protected static Object[] parseArray(String string)\n+  {\n+    try\n     {\n-        return null;\n-    }\n-\n-    @Override\n-    public String getDescription( String option )\n-    {\n-        OptionDefinition definition = this.optionDefinitions.get( option );\n-        return definition == null ? null : definition.getDescription();\n-    }\n-\n-    @Override\n-    public void shutdown()\n+      JSONArray array = new JSONArray(string);\n+      Object[] result = new Object[array.length()];\n+      for (int i = 0; i < result.length; i++)\n+      {\n+        result[i] = array.get(i);\n+      }\n+      return result;\n+    } catch (JSONException e)\n     {\n-        // Default behavior is to do nothing\n+      throw new IllegalArgumentException(e.getMessage(), e);\n     }\n+  }\n \n-    @Override\n-    public List<String> completionCandidates( String partOfLine, Session session ) throws ShellException\n-    {\n-        return Collections.emptyList();\n-    }\n-\n-    protected static Map<String, Object> parseFilter( String filterString,\n-        Output out ) throws RemoteException, ShellException\n-    {\n-        if ( filterString == null )\n-        {\n-            return new HashMap<>();\n-        }\n-\n-        Map<String, Object> map;\n-        String signsOfJSON = \":\";\n-        int numberOfSigns = 0;\n-        for ( int i = 0; i < signsOfJSON.length(); i++ )\n-        {\n-            if ( filterString.contains(\n-                String.valueOf( signsOfJSON.charAt( i ) ) ) )\n-            {\n-                numberOfSigns++;\n-            }\n-        }\n-\n-        if ( numberOfSigns >= 1 )\n-        {\n-            String jsonString = filterString;\n-            if ( !jsonString.startsWith( \"{\" ) )\n-            {\n-                jsonString = \"{\" + jsonString;\n-            }\n-            if ( !jsonString.endsWith( \"}\" ) )\n-            {\n-                jsonString += \"}\";\n-            }\n-            try\n-            {\n-                map = parseJSONMap( jsonString );\n-            }\n-            catch ( JSONException e )\n-            {\n-                out.println( \"parser: \\\"\" + filterString + \"\\\" hasn't got \" +\n-                    \"correct JSON formatting: \" + e.getMessage() );\n-                throw ShellException.wrapCause( e );\n-            }\n-        }\n-        else\n-        {\n-            map = new HashMap<>();\n-            map.put( filterString, null );\n-        }\n-        return map;\n-    }\n-\n-    protected static Map<String, Object> parseJSONMap( String jsonString )\n-        throws JSONException\n-    {\n-        JSONObject object = new JSONObject( jsonString );\n-        Map<String, Object> result = new HashMap<>();\n-        for ( String name : JSONObject.getNames( object ) )\n-        {\n-            Object value = object.get( name );\n-            if ( value != null && value instanceof String && ((String) value).length() == 0 )\n-            {\n-                value = null;\n-            }\n-            result.put( name, value );\n-        }\n-        return result;\n-    }\n-\n-    protected static Object[] parseArray( String string )\n-    {\n-        try\n-        {\n-            JSONArray array = new JSONArray( string );\n-            Object[] result = new Object[ array.length() ];\n-            for ( int i = 0; i < result.length; i++ )\n-            {\n-                result[ i ] = array.get( i );\n-            }\n-            return result;\n-        }\n-        catch ( JSONException e )\n-        {\n-            throw new IllegalArgumentException( e.getMessage(), e );\n-        }\n-    }\n-\n-    @Override\n-    public boolean takesOptions()\n-    {\n-        return !optionDefinitions.isEmpty();\n-    }\n+  @Override\n+  public boolean takesOptions()\n+  {\n+    return !optionDefinitions.isEmpty();\n+  }\n }\n",
            "diff_size": 239
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3993/AbstractApp.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3993/AbstractApp.java\nindex 7e1d154d793..1cabe221c3e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3993/AbstractApp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3993/AbstractApp.java\n@@ -41,7 +41,7 @@ import org.neo4j.shell.util.json.JSONObject;\n  */\n public abstract class AbstractApp implements App\n {\n-    private final Map<String, OptionDefinition> optionDefinitions =    new HashMap<>();\n+    private final Map<String,OptionDefinition> optionDefinitions = new HashMap<>();\n     private AppShellServer server;\n \n     @Override\n@@ -65,9 +65,8 @@ public abstract class AbstractApp implements App\n     @Override\n     public String[] getAvailableOptions()\n     {\n-        String[] result = this.optionDefinitions.keySet().toArray(\n-            new String[ this.optionDefinitions.size() ] );\n-        Arrays.sort( result );\n+        String[] result = this.optionDefinitions.keySet().toArray( new String[ this.optionDefinitions.size() ] );\n+Arrays.sort( result );\n         return result;\n     }\n \n@@ -111,22 +110,20 @@ public abstract class AbstractApp implements App\n         return Collections.emptyList();\n     }\n \n-    protected static Map<String, Object> parseFilter( String filterString,\n-        Output out ) throws RemoteException, ShellException\n-    {\n+    protected static Map<String,Object> parseFilter( String filterString, Output out ) throws RemoteException, ShellException\n+{\n         if ( filterString == null )\n         {\n             return new HashMap<>();\n         }\n \n-        Map<String, Object> map;\n+        Map<String,Object> map;\n         String signsOfJSON = \":\";\n         int numberOfSigns = 0;\n         for ( int i = 0; i < signsOfJSON.length(); i++ )\n         {\n-            if ( filterString.contains(\n-                String.valueOf( signsOfJSON.charAt( i ) ) ) )\n-            {\n+            if ( filterString.contains( String.valueOf( signsOfJSON.charAt( i ) ) ) )\n+{\n                 numberOfSigns++;\n             }\n         }\n@@ -138,18 +135,19 @@ public abstract class AbstractApp implements App\n             {\n                 jsonString = \"{\" + jsonString;\n             }\n-            if ( !jsonString.endsWith( \"}\" ) )\n+\n+if ( !jsonString.endsWith( \"}\" ) )\n             {\n                 jsonString += \"}\";\n             }\n-            try\n+\n+try\n             {\n                 map = parseJSONMap( jsonString );\n             }\n             catch ( JSONException e )\n             {\n-                out.println( \"parser: \\\"\" + filterString + \"\\\" hasn't got \" +\n-                    \"correct JSON formatting: \" + e.getMessage() );\n+                out.println( \"parser: \\\"\" + filterString + \"\\\" hasn't got \" + \"correct JSON formatting: \" + e.getMessage() );\n                 throw ShellException.wrapCause( e );\n             }\n         }\n@@ -158,14 +156,14 @@ public abstract class AbstractApp implements App\n             map = new HashMap<>();\n             map.put( filterString, null );\n         }\n-        return map;\n+\n+return map;\n     }\n \n-    protected static Map<String, Object> parseJSONMap( String jsonString )\n-        throws JSONException\n-    {\n+    protected static Map<String,Object> parseJSONMap( String jsonString ) throws JSONException\n+{\n         JSONObject object = new JSONObject( jsonString );\n-        Map<String, Object> result = new HashMap<>();\n+        Map<String,Object> result = new HashMap<>();\n         for ( String name : JSONObject.getNames( object ) )\n         {\n             Object value = object.get( name );\n@@ -175,7 +173,8 @@ public abstract class AbstractApp implements App\n             }\n             result.put( name, value );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     protected static Object[] parseArray( String string )\n@@ -183,12 +182,13 @@ public abstract class AbstractApp implements App\n         try\n         {\n             JSONArray array = new JSONArray( string );\n-            Object[] result = new Object[ array.length() ];\n+            Object[] result = new Object[array.length() ];\n             for ( int i = 0; i < result.length; i++ )\n             {\n-                result[ i ] = array.get( i );\n+                result[ i] = array.get( i );\n             }\n-            return result;\n+\n+return result;\n         }\n         catch ( JSONException e )\n         {\n@@ -201,4 +201,4 @@ public abstract class AbstractApp implements App\n     {\n         return !optionDefinitions.isEmpty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}