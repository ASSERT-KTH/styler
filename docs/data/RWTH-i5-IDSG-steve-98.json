{
    "project_name": "RWTH-i5-IDSG-steve",
    "error_id": "98",
    "information": {
        "errors": [
            {
                "line": "85",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    // ChargeProfileMaxStackLevel(\"ChargeProfileMaxStackLevel\", \"integer\", R, newHashSet(V_16)),\n    // ChargingScheduleAllowedChargingRateUnit(\"ChargingScheduleAllowedChargingRateUnit\", \"comma seperated list\", R, newHashSet(V_16)),\n    // ChargingScheduleMaxPeriods(\"ChargingScheduleMaxPeriods\", \"integer\", R, newHashSet(V_16)),\n    // ConnectorSwitch3to1PhaseSupported(\"ConnectorSwitch3to1PhaseSupported\", \"boolean\", R, newHashSet(V_16)),\n    // MaxChargingProfilesInstalled(\"MaxChargingProfilesInstalled\", \"integer\", R, newHashSet(V_16));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/98/ConfigurationKeyEnum.java\nindex 3253b7d55a1..d819df4dd58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler/98/ConfigurationKeyEnum.java\n@@ -82,8 +82,9 @@ public enum ConfigurationKeyEnum {\n     // -------------------------------------------------------------------------\n \n     // ChargeProfileMaxStackLevel(\"ChargeProfileMaxStackLevel\", \"integer\", R, newHashSet(V_16)),\n-    // ChargingScheduleAllowedChargingRateUnit(\"ChargingScheduleAllowedChargingRateUnit\", \"comma seperated list\", R, newHashSet(V_16)),\n-    // ChargingScheduleMaxPeriods(\"ChargingScheduleMaxPeriods\", \"integer\", R, newHashSet(V_16)),\n+    // ConnectorSwitch3to1PhaseSupported(\"ConnectorSwitch3to1PhaseSupported\", \"boolean\", R, newHashSet(V_16)),\n+    // MaxChargingProfilesInstalled(\"MaxChargingProfilesInstalled\", \"integer\", R, newHashSet(V_16));\n+\n     // ConnectorSwitch3to1PhaseSupported(\"ConnectorSwitch3to1PhaseSupported\", \"boolean\", R, newHashSet(V_16)),\n     // MaxChargingProfilesInstalled(\"MaxChargingProfilesInstalled\", \"integer\", R, newHashSet(V_16));\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/98/ConfigurationKeyEnum.java\nindex 3253b7d55a1..b6b96db9a12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/intellij/98/ConfigurationKeyEnum.java\n@@ -19,115 +19,115 @@ import static de.rwth.idsg.steve.web.dto.ocpp.ConfigurationKeyReadWriteEnum.RW;\n  */\n public enum ConfigurationKeyEnum {\n \n-    // -------------------------------------------------------------------------\n-    // From OCPP 1.2\n-    // -------------------------------------------------------------------------\n-\n-    HeartBeatInterval(\"HeartBeatInterval\", \"in seconds\", RW, newHashSet(V_12, V_15)),\n-    ConnectionTimeOut(\"ConnectionTimeOut\", \"in seconds\", RW, newHashSet(V_12, V_15, V_16)),\n-    ProximityContactRetries(\"ProximityContactRetries\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n-    ProximityLockRetries(\"ProximityLockRetries\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n-    ResetRetries(\"ResetRetries\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n-    BlinkRepeat(\"BlinkRepeat\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n-    LightIntensity(\"LightIntensity\", \"in %\", RW, newHashSet(V_12, V_15, V_16)),\n-    ChargePointId(\"ChargePointId\", \"string\", RW, newHashSet(V_12, V_15, V_16)),\n-    MeterValueSampleInterval(\"MeterValueSampleInterval\", \"in seconds\", RW, newHashSet(V_12, V_15, V_16)),\n-\n-    // -------------------------------------------------------------------------\n-    // New in OCPP 1.5\n-    // -------------------------------------------------------------------------\n-\n-    ClockAlignedDataInterval(\"ClockAlignedDataInterval\", \"in seconds\", RW, newHashSet(V_15, V_16)),\n-    MeterValuesSampledData(\"MeterValuesSampledData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n-    MeterValuesAlignedData(\"MeterValuesAlignedData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n-    StopTxnSampledData(\"StopTxnSampledData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n-    StopTxnAlignedData(\"StopTxnAlignedData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n-\n-    // -------------------------------------------------------------------------\n-    // New in OCPP 1.6\n-    // -------------------------------------------------------------------------\n-\n-    HeartbeatInterval(\"HeartbeatInterval\", \"in seconds\", RW, newHashSet(V_16)),\n-    AllowOfflineTxForUnknownId(\"AllowOfflineTxForUnknownId\", \"boolean\", RW, newHashSet(V_16)),\n-    AuthorizationCacheEnabled(\"AuthorizationCacheEnabled\", \"boolean\", RW, newHashSet(V_16)),\n-    // AuthorizeRemoteTxRequests Read or Read-Write is up to Charge Point implementation so set to RW for now\n-    AuthorizeRemoteTxRequests(\"AuthorizeRemoteTxRequests\", \"boolean\", RW, newHashSet(V_16)),\n-    ConnectorPhaseRotation(\"ConnectorPhaseRotation\", \"comma seperated list\", RW, newHashSet(V_16)),\n-    ConnectorPhaseRotationMaxLength(\"ConnectorPhaseRotationMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    GetConfigurationMaxKeys(\"GetConfigurationMaxKeys\", \"integer\", R, newHashSet(V_16)),\n-    LocalAuthorizeOffline(\"LocalAuthorizeOffline\", \"boolean\", RW, newHashSet(V_16)),\n-    LocalPreAuthorize(\"LocalPreAuthorize\", \"boolean\", RW, newHashSet(V_16)),\n-    MaxEnergyOnInvalidId(\"MaxEnergyOnInvalidId\", \"in Wh\", RW, newHashSet(V_16)),\n-    MeterValuesAlignedDataMaxLength(\"MeterValuesAlignedDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    MeterValuesSampledDataMaxLength(\"MeterValuesSampledDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    MinimumStatusDuration(\"MinimumStatusDuration\", \"in seconds\", RW, newHashSet(V_16)),\n-    NumberOfConnectors(\"NumberOfConnectors\", \"integer\", R, newHashSet(V_16)),\n-    StopTransactionOnEVSideDisconnect(\"StopTransactionOnEVSideDisconnect\", \"boolean\", RW, newHashSet(V_16)),\n-    StopTransactionOnInvalidId(\"StopTransactionOnInvalidId\", \"boolean\", RW, newHashSet(V_16)),\n-    StopTxnAlignedDataMaxLength(\"StopTxnAlignedDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    StopTxnSampledDataMaxLength(\"StopTxnSampledDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    SupportedFeatureProfiles(\"SupportedFeatureProfiles\", \"comma seperated list\", R, newHashSet(V_16)),\n-    SupportedFeatureProfilesMaxLength(\"SupportedFeatureProfilesMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    TransactionMessageAttempts(\"TransactionMessageAttempts\", \"in times\", RW, newHashSet(V_16)),\n-    TransactionMessageRetryInterval(\"TransactionMessageRetryInterval\", \"in seconds\", RW, newHashSet(V_16)),\n-    UnlockConnectorOnEVSideDisconnect(\"UnlockConnectorOnEVSideDisconnect\", \"boolean\", RW, newHashSet(V_16)),\n-    WebSocketPingInterval(\"WebSocketPingInterval\", \"in seconds\", RW, newHashSet(V_16)),\n-    LocalAuthListEnabled(\"LocalAuthListEnabled\", \"boolean\", RW, newHashSet(V_16)),\n-    LocalAuthListMaxLength(\"LocalAuthListMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    SendLocalListMaxLength(\"SendLocalListMaxLength\", \"integer\", R, newHashSet(V_16)),\n-    ReserveConnectorZeroSupported(\"ReserveConnectorZeroSupported\", \"boolean\", R, newHashSet(V_16));\n-\n-    // -------------------------------------------------------------------------\n-    // New in OCPP 1.6, but Steve does not support Smart Charging profile yet.\n-    // -------------------------------------------------------------------------\n-\n-    // ChargeProfileMaxStackLevel(\"ChargeProfileMaxStackLevel\", \"integer\", R, newHashSet(V_16)),\n-    // ChargingScheduleAllowedChargingRateUnit(\"ChargingScheduleAllowedChargingRateUnit\", \"comma seperated list\", R, newHashSet(V_16)),\n-    // ChargingScheduleMaxPeriods(\"ChargingScheduleMaxPeriods\", \"integer\", R, newHashSet(V_16)),\n-    // ConnectorSwitch3to1PhaseSupported(\"ConnectorSwitch3to1PhaseSupported\", \"boolean\", R, newHashSet(V_16)),\n-    // MaxChargingProfilesInstalled(\"MaxChargingProfilesInstalled\", \"integer\", R, newHashSet(V_16));\n-\n-    private final String value;\n-    private final String text;\n-    private final ConfigurationKeyReadWriteEnum rw;\n-    private final Set<OcppVersion> versions;\n-\n-    public static final Map<String, String> OCPP_12_MAP = asMap(OcppVersion.V_12, RW);\n-    public static final Map<String, String> OCPP_15_MAP = asMap(OcppVersion.V_15, RW);\n-\n-    // In OCPP 1.6 some Configuration Keys are Read-Only\n-    public static final Map<String, String> OCPP_16_MAP_R = asMap(OcppVersion.V_16, R);\n-    public static final Map<String, String> OCPP_16_MAP_RW = asMap(OcppVersion.V_16, RW);\n-\n-    ConfigurationKeyEnum(String value, String comment, ConfigurationKeyReadWriteEnum rw, Set<OcppVersion> versions) {\n-        this.value = value;\n-        this.text = String.format(\"%s (%s)\", value, comment);\n-        this.rw = rw;\n-        this.versions = versions;\n+  // -------------------------------------------------------------------------\n+  // From OCPP 1.2\n+  // -------------------------------------------------------------------------\n+\n+  HeartBeatInterval(\"HeartBeatInterval\", \"in seconds\", RW, newHashSet(V_12, V_15)),\n+  ConnectionTimeOut(\"ConnectionTimeOut\", \"in seconds\", RW, newHashSet(V_12, V_15, V_16)),\n+  ProximityContactRetries(\"ProximityContactRetries\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n+  ProximityLockRetries(\"ProximityLockRetries\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n+  ResetRetries(\"ResetRetries\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n+  BlinkRepeat(\"BlinkRepeat\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n+  LightIntensity(\"LightIntensity\", \"in %\", RW, newHashSet(V_12, V_15, V_16)),\n+  ChargePointId(\"ChargePointId\", \"string\", RW, newHashSet(V_12, V_15, V_16)),\n+  MeterValueSampleInterval(\"MeterValueSampleInterval\", \"in seconds\", RW, newHashSet(V_12, V_15, V_16)),\n+\n+  // -------------------------------------------------------------------------\n+  // New in OCPP 1.5\n+  // -------------------------------------------------------------------------\n+\n+  ClockAlignedDataInterval(\"ClockAlignedDataInterval\", \"in seconds\", RW, newHashSet(V_15, V_16)),\n+  MeterValuesSampledData(\"MeterValuesSampledData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n+  MeterValuesAlignedData(\"MeterValuesAlignedData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n+  StopTxnSampledData(\"StopTxnSampledData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n+  StopTxnAlignedData(\"StopTxnAlignedData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n+\n+  // -------------------------------------------------------------------------\n+  // New in OCPP 1.6\n+  // -------------------------------------------------------------------------\n+\n+  HeartbeatInterval(\"HeartbeatInterval\", \"in seconds\", RW, newHashSet(V_16)),\n+  AllowOfflineTxForUnknownId(\"AllowOfflineTxForUnknownId\", \"boolean\", RW, newHashSet(V_16)),\n+  AuthorizationCacheEnabled(\"AuthorizationCacheEnabled\", \"boolean\", RW, newHashSet(V_16)),\n+  // AuthorizeRemoteTxRequests Read or Read-Write is up to Charge Point implementation so set to RW for now\n+  AuthorizeRemoteTxRequests(\"AuthorizeRemoteTxRequests\", \"boolean\", RW, newHashSet(V_16)),\n+  ConnectorPhaseRotation(\"ConnectorPhaseRotation\", \"comma seperated list\", RW, newHashSet(V_16)),\n+  ConnectorPhaseRotationMaxLength(\"ConnectorPhaseRotationMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  GetConfigurationMaxKeys(\"GetConfigurationMaxKeys\", \"integer\", R, newHashSet(V_16)),\n+  LocalAuthorizeOffline(\"LocalAuthorizeOffline\", \"boolean\", RW, newHashSet(V_16)),\n+  LocalPreAuthorize(\"LocalPreAuthorize\", \"boolean\", RW, newHashSet(V_16)),\n+  MaxEnergyOnInvalidId(\"MaxEnergyOnInvalidId\", \"in Wh\", RW, newHashSet(V_16)),\n+  MeterValuesAlignedDataMaxLength(\"MeterValuesAlignedDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  MeterValuesSampledDataMaxLength(\"MeterValuesSampledDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  MinimumStatusDuration(\"MinimumStatusDuration\", \"in seconds\", RW, newHashSet(V_16)),\n+  NumberOfConnectors(\"NumberOfConnectors\", \"integer\", R, newHashSet(V_16)),\n+  StopTransactionOnEVSideDisconnect(\"StopTransactionOnEVSideDisconnect\", \"boolean\", RW, newHashSet(V_16)),\n+  StopTransactionOnInvalidId(\"StopTransactionOnInvalidId\", \"boolean\", RW, newHashSet(V_16)),\n+  StopTxnAlignedDataMaxLength(\"StopTxnAlignedDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  StopTxnSampledDataMaxLength(\"StopTxnSampledDataMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  SupportedFeatureProfiles(\"SupportedFeatureProfiles\", \"comma seperated list\", R, newHashSet(V_16)),\n+  SupportedFeatureProfilesMaxLength(\"SupportedFeatureProfilesMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  TransactionMessageAttempts(\"TransactionMessageAttempts\", \"in times\", RW, newHashSet(V_16)),\n+  TransactionMessageRetryInterval(\"TransactionMessageRetryInterval\", \"in seconds\", RW, newHashSet(V_16)),\n+  UnlockConnectorOnEVSideDisconnect(\"UnlockConnectorOnEVSideDisconnect\", \"boolean\", RW, newHashSet(V_16)),\n+  WebSocketPingInterval(\"WebSocketPingInterval\", \"in seconds\", RW, newHashSet(V_16)),\n+  LocalAuthListEnabled(\"LocalAuthListEnabled\", \"boolean\", RW, newHashSet(V_16)),\n+  LocalAuthListMaxLength(\"LocalAuthListMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  SendLocalListMaxLength(\"SendLocalListMaxLength\", \"integer\", R, newHashSet(V_16)),\n+  ReserveConnectorZeroSupported(\"ReserveConnectorZeroSupported\", \"boolean\", R, newHashSet(V_16));\n+\n+  // -------------------------------------------------------------------------\n+  // New in OCPP 1.6, but Steve does not support Smart Charging profile yet.\n+  // -------------------------------------------------------------------------\n+\n+  // ChargeProfileMaxStackLevel(\"ChargeProfileMaxStackLevel\", \"integer\", R, newHashSet(V_16)),\n+  // ChargingScheduleAllowedChargingRateUnit(\"ChargingScheduleAllowedChargingRateUnit\", \"comma seperated list\", R, newHashSet(V_16)),\n+  // ChargingScheduleMaxPeriods(\"ChargingScheduleMaxPeriods\", \"integer\", R, newHashSet(V_16)),\n+  // ConnectorSwitch3to1PhaseSupported(\"ConnectorSwitch3to1PhaseSupported\", \"boolean\", R, newHashSet(V_16)),\n+  // MaxChargingProfilesInstalled(\"MaxChargingProfilesInstalled\", \"integer\", R, newHashSet(V_16));\n+\n+  private final String value;\n+  private final String text;\n+  private final ConfigurationKeyReadWriteEnum rw;\n+  private final Set<OcppVersion> versions;\n+\n+  public static final Map<String, String> OCPP_12_MAP = asMap(OcppVersion.V_12, RW);\n+  public static final Map<String, String> OCPP_15_MAP = asMap(OcppVersion.V_15, RW);\n+\n+  // In OCPP 1.6 some Configuration Keys are Read-Only\n+  public static final Map<String, String> OCPP_16_MAP_R = asMap(OcppVersion.V_16, R);\n+  public static final Map<String, String> OCPP_16_MAP_RW = asMap(OcppVersion.V_16, RW);\n+\n+  ConfigurationKeyEnum(String value, String comment, ConfigurationKeyReadWriteEnum rw, Set<OcppVersion> versions) {\n+    this.value = value;\n+    this.text = String.format(\"%s (%s)\", value, comment);\n+    this.rw = rw;\n+    this.versions = versions;\n+  }\n+\n+  public String value() {\n+    return value;\n+  }\n+\n+  public static ConfigurationKeyEnum fromValue(String v) {\n+    for (ConfigurationKeyEnum c : ConfigurationKeyEnum.values()) {\n+      if (c.value.equals(v)) {\n+        return c;\n+      }\n     }\n-\n-    public String value() {\n-        return value;\n-    }\n-\n-    public static ConfigurationKeyEnum fromValue(String v) {\n-        for (ConfigurationKeyEnum c : ConfigurationKeyEnum.values()) {\n-            if (c.value.equals(v)) {\n-                return c;\n-            }\n-        }\n-        throw new IllegalArgumentException(v);\n-    }\n-\n-    private static Map<String, String> asMap(OcppVersion version, ConfigurationKeyReadWriteEnum rw) {\n-        Map<String, String> map = new LinkedHashMap<>();\n-        for (ConfigurationKeyEnum c : ConfigurationKeyEnum.values()) {\n-            if (c.versions.contains(version) && c.rw == rw) {\n-                map.put(c.value, c.text);\n-            } else if (c.versions.contains(version) && rw == ConfigurationKeyReadWriteEnum.R) {\n-                map.put(c.value, c.text);\n-            }\n-        }\n-        return map;\n+    throw new IllegalArgumentException(v);\n+  }\n+\n+  private static Map<String, String> asMap(OcppVersion version, ConfigurationKeyReadWriteEnum rw) {\n+    Map<String, String> map = new LinkedHashMap<>();\n+    for (ConfigurationKeyEnum c : ConfigurationKeyEnum.values()) {\n+      if (c.versions.contains(version) && c.rw == rw) {\n+        map.put(c.value, c.text);\n+      } else if (c.versions.contains(version) && rw == ConfigurationKeyReadWriteEnum.R) {\n+        map.put(c.value, c.text);\n+      }\n     }\n+    return map;\n+  }\n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/98/ConfigurationKeyEnum.java\nindex 3253b7d55a1..3137bc2e4b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/naturalize/98/ConfigurationKeyEnum.java\n@@ -130,4 +130,4 @@ public enum ConfigurationKeyEnum {\n         }\n         return map;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/98/ConfigurationKeyEnum.java\nindex 3253b7d55a1..64b643edfaf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/codebuff/98/ConfigurationKeyEnum.java\n@@ -1,7 +1,6 @@\n package de.rwth.idsg.steve.web.dto.ocpp;\n \n import de.rwth.idsg.steve.ocpp.OcppVersion;\n-\n import java.util.LinkedHashMap;\n import java.util.Map;\n import java.util.Set;\n@@ -17,12 +16,13 @@ import static de.rwth.idsg.steve.web.dto.ocpp.ConfigurationKeyReadWriteEnum.RW;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 02.01.2015\n  */\n+\n+\n public enum ConfigurationKeyEnum {\n \n     // -------------------------------------------------------------------------\n     // From OCPP 1.2\n     // -------------------------------------------------------------------------\n-\n     HeartBeatInterval(\"HeartBeatInterval\", \"in seconds\", RW, newHashSet(V_12, V_15)),\n     ConnectionTimeOut(\"ConnectionTimeOut\", \"in seconds\", RW, newHashSet(V_12, V_15, V_16)),\n     ProximityContactRetries(\"ProximityContactRetries\", \"in times\", RW, newHashSet(V_12, V_15, V_16)),\n@@ -36,7 +36,6 @@ public enum ConfigurationKeyEnum {\n     // -------------------------------------------------------------------------\n     // New in OCPP 1.5\n     // -------------------------------------------------------------------------\n-\n     ClockAlignedDataInterval(\"ClockAlignedDataInterval\", \"in seconds\", RW, newHashSet(V_15, V_16)),\n     MeterValuesSampledData(\"MeterValuesSampledData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n     MeterValuesAlignedData(\"MeterValuesAlignedData\", \"comma seperated list\", RW, newHashSet(V_15, V_16)),\n@@ -46,7 +45,6 @@ public enum ConfigurationKeyEnum {\n     // -------------------------------------------------------------------------\n     // New in OCPP 1.6\n     // -------------------------------------------------------------------------\n-\n     HeartbeatInterval(\"HeartbeatInterval\", \"in seconds\", RW, newHashSet(V_16)),\n     AllowOfflineTxForUnknownId(\"AllowOfflineTxForUnknownId\", \"boolean\", RW, newHashSet(V_16)),\n     AuthorizationCacheEnabled(\"AuthorizationCacheEnabled\", \"boolean\", RW, newHashSet(V_16)),\n@@ -93,10 +91,13 @@ public enum ConfigurationKeyEnum {\n     private final Set<OcppVersion> versions;\n \n     public static final Map<String, String> OCPP_12_MAP = asMap(OcppVersion.V_12, RW);\n+\n     public static final Map<String, String> OCPP_15_MAP = asMap(OcppVersion.V_15, RW);\n \n     // In OCPP 1.6 some Configuration Keys are Read-Only\n+\n     public static final Map<String, String> OCPP_16_MAP_R = asMap(OcppVersion.V_16, R);\n+\n     public static final Map<String, String> OCPP_16_MAP_RW = asMap(OcppVersion.V_16, RW);\n \n     ConfigurationKeyEnum(String value, String comment, ConfigurationKeyReadWriteEnum rw, Set<OcppVersion> versions) {\n@@ -121,13 +122,14 @@ public enum ConfigurationKeyEnum {\n \n     private static Map<String, String> asMap(OcppVersion version, ConfigurationKeyReadWriteEnum rw) {\n         Map<String, String> map = new LinkedHashMap<>();\n+\n         for (ConfigurationKeyEnum c : ConfigurationKeyEnum.values()) {\n             if (c.versions.contains(version) && c.rw == rw) {\n                 map.put(c.value, c.text);\n             } else if (c.versions.contains(version) && rw == ConfigurationKeyReadWriteEnum.R) {\n-                map.put(c.value, c.text);\n-            }\n+                       map.put(c.value, c.text);\n+                   }\n         }\n         return map;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/98/ConfigurationKeyEnum.java\nindex 3253b7d55a1..d819df4dd58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/errored/1/98/ConfigurationKeyEnum.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/RWTH-i5-IDSG-steve/styler_three_grams/98/ConfigurationKeyEnum.java\n@@ -82,8 +82,9 @@ public enum ConfigurationKeyEnum {\n     // -------------------------------------------------------------------------\n \n     // ChargeProfileMaxStackLevel(\"ChargeProfileMaxStackLevel\", \"integer\", R, newHashSet(V_16)),\n-    // ChargingScheduleAllowedChargingRateUnit(\"ChargingScheduleAllowedChargingRateUnit\", \"comma seperated list\", R, newHashSet(V_16)),\n-    // ChargingScheduleMaxPeriods(\"ChargingScheduleMaxPeriods\", \"integer\", R, newHashSet(V_16)),\n+    // ConnectorSwitch3to1PhaseSupported(\"ConnectorSwitch3to1PhaseSupported\", \"boolean\", R, newHashSet(V_16)),\n+    // MaxChargingProfilesInstalled(\"MaxChargingProfilesInstalled\", \"integer\", R, newHashSet(V_16));\n+\n     // ConnectorSwitch3to1PhaseSupported(\"ConnectorSwitch3to1PhaseSupported\", \"boolean\", R, newHashSet(V_16)),\n     // MaxChargingProfilesInstalled(\"MaxChargingProfilesInstalled\", \"integer\", R, newHashSet(V_16));\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}