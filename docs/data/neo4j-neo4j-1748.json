{
    "project_name": "neo4j-neo4j",
    "error_id": "1748",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1748/SslPolicyConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1748/SslPolicyConfig.java\nindex b773a8d0ce3..1cfdf84ede3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1748/SslPolicyConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1748/SslPolicyConfig.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration.ssl;\n \n import java.nio.file.Path;\n@@ -41,73 +42,73 @@ import static org.neo4j.configuration.SettingValueParsers.ofEnum;\n @PublicApi\n public class SslPolicyConfig extends GroupSetting\n {\n-    public final Setting<Boolean> enabled = getBuilder( \"enabled\", BOOL, Boolean.FALSE ).build();\n+    public final Setting<Boolean> enabled = getBuilder(\"enabled\", BOOL, Boolean.FALSE).build();\n \n-    @Description( \"The mandatory base directory for cryptographic objects of this policy.\" +\n-            \" It is also possible to override each individual configuration with absolute paths.\" )\n+    @Description(\"The mandatory base directory for cryptographic objects of this policy.\" +\n+      \" It is also possible to override each individual configuration with absolute paths.\")\n     public final Setting<Path> base_directory;\n \n-    @Description( \"Path to directory of CRLs (Certificate Revocation Lists) in PEM format.\" )\n+    @Description(\"Path to directory of CRLs (Certificate Revocation Lists) in PEM format.\")\n     public final Setting<Path> revoked_dir;\n \n-    @Description( \"Makes this policy trust all remote parties.\" +\n-            \" Enabling this is not recommended and the trusted directory will be ignored.\" )\n-    public final Setting<Boolean> trust_all = getBuilder( \"trust_all\", BOOL, false ).build();\n+    @Description(\"Makes this policy trust all remote parties.\" +\n+      \" Enabling this is not recommended and the trusted directory will be ignored.\")\n+    public final Setting<Boolean> trust_all = getBuilder(\"trust_all\", BOOL, false).build();\n \n-    @Description( \"Client authentication stance.\" )\n+    @Description(\"Client authentication stance.\")\n     public final Setting<ClientAuth> client_auth;\n \n-    @Description( \"Restrict allowed TLS protocol versions.\" )\n-    public final Setting<List<String>> tls_versions = getBuilder( \"tls_versions\", listOf( STRING ),  List.of(\"TLSv1.2\") ).build();\n+    @Description(\"Restrict allowed TLS protocol versions.\")\n+    public final Setting<List<String>> tls_versions = getBuilder(\"tls_versions\", listOf(STRING), List.of(\"TLSv1.2\")).build();\n \n-    @Description( \"Restrict allowed ciphers. \" +\n-            \"Valid values depend on JRE and SSL however some examples can be found here \" +\n-            \"https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#jsse-cipher-suite-names\" )\n-    public final Setting<List<String>> ciphers = getBuilder( \"ciphers\", listOf( STRING ), null ).build();\n+    @Description(\"Restrict allowed ciphers. \" +\n+      \"Valid values depend on JRE and SSL however some examples can be found here \" +\n+      \"https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#jsse-cipher-suite-names\")\n+    public final Setting<List<String>> ciphers = getBuilder(\"ciphers\", listOf(STRING), null).build();\n \n-    @Description( \"When true, this node will verify the hostname of every other instance it connects to by comparing the address it used to connect with it \" +\n-            \"and the patterns described in the remote hosts public certificate Subject Alternative Names\" )\n-    public final Setting<Boolean> verify_hostname = getBuilder( \"verify_hostname\", BOOL, false ).build();\n+    @Description(\"When true, this node will verify the hostname of every other instance it connects to by comparing the address it used to connect with it \" +\n+      \"and the patterns described in the remote hosts public certificate Subject Alternative Names\")\n+    public final Setting<Boolean> verify_hostname = getBuilder(\"verify_hostname\", BOOL, false).build();\n \n-    @Description( \"Private PKCS#8 key in PEM format.\" )\n+    @Description(\"Private PKCS#8 key in PEM format.\")\n     public final Setting<Path> private_key;\n \n-    @Description( \"The passphrase for the private key.\" )\n-    public final Setting<SecureString> private_key_password = getBuilder( \"private_key_password\", SECURE_STRING, null ).build();\n+    @Description(\"The passphrase for the private key.\")\n+    public final Setting<SecureString> private_key_password = getBuilder(\"private_key_password\", SECURE_STRING, null).build();\n \n-    @Description( \"X.509 certificate (chain) of this server in PEM format.\" )\n+    @Description(\"X.509 certificate (chain) of this server in PEM format.\")\n     public final Setting<Path> public_certificate;\n \n-    @Description( \"Path to directory of X.509 certificates in PEM format for trusted parties.\" )\n+    @Description(\"Path to directory of X.509 certificates in PEM format for trusted parties.\")\n     public final Setting<Path> trusted_dir;\n \n     private SslPolicyScope scope;\n \n-    public static SslPolicyConfig forScope( SslPolicyScope scope )\n+    public static SslPolicyConfig forScope(SslPolicyScope scope)\n     {\n-        return new SslPolicyConfig( scope.name() );\n+        return new SslPolicyConfig(scope.name());\n     }\n \n-    private SslPolicyConfig( String scopeString )\n+    private SslPolicyConfig(String scopeString)\n     {\n-        super( scopeString.toLowerCase() );\n-        scope = SslPolicyScope.fromName( scopeString );\n-        if ( scope == null )\n+        super(scopeString.toLowerCase());\n+        scope = SslPolicyScope.fromName(scopeString);\n+        if (scope == null)\n         {\n-            throw new IllegalArgumentException( \"SslPolicy can not be created for scope: \" + scopeString );\n+            throw new IllegalArgumentException(\"SslPolicy can not be created for scope: \" + scopeString);\n         }\n \n-        client_auth = getBuilder( \"client_auth\", ofEnum( ClientAuth.class ), scope.authDefault ).build();\n-        base_directory = getBuilder( \"base_directory\", PATH, Path.of( scope.baseDir ) ).setDependency( neo4j_home ).immutable().build();\n-        revoked_dir = getBuilder( \"revoked_dir\", PATH, Path.of( \"revoked\" ) ).setDependency( base_directory ).build();\n-        private_key = getBuilder( \"private_key\", PATH, Path.of( \"private.key\" ) ).setDependency( base_directory ).build();\n-        public_certificate = getBuilder( \"public_certificate\", PATH, Path.of( \"public.crt\" ) ).setDependency( base_directory ).build();\n-        trusted_dir = getBuilder( \"trusted_dir\", PATH, Path.of( \"trusted\" ) ).setDependency( base_directory ).build();\n+        client_auth = getBuilder(\"client_auth\", ofEnum(ClientAuth.class), scope.authDefault).build();\n+        base_directory = getBuilder(\"base_directory\", PATH, Path.of(scope.baseDir)).setDependency(neo4j_home).immutable().build();\n+        revoked_dir = getBuilder(\"revoked_dir\", PATH, Path.of(\"revoked\")).setDependency(base_directory).build();\n+        private_key = getBuilder(\"private_key\", PATH, Path.of(\"private.key\")).setDependency(base_directory).build();\n+        public_certificate = getBuilder(\"public_certificate\", PATH, Path.of(\"public.crt\")).setDependency(base_directory).build();\n+        trusted_dir = getBuilder(\"trusted_dir\", PATH, Path.of(\"trusted\")).setDependency(base_directory).build();\n     }\n \n     public SslPolicyConfig() //For serviceloading\n     {\n-        this( \"testing\" );\n+        this(\"testing\");\n     }\n \n     @Override\n",
            "diff_size": 37
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1748/SslPolicyConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1748/SslPolicyConfig.java\nindex b773a8d0ce3..290dc9a916b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1748/SslPolicyConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1748/SslPolicyConfig.java\n@@ -120,4 +120,4 @@ public class SslPolicyConfig extends GroupSetting\n     {\n         return scope;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}