{
    "project_name": "findbugsproject-findbugs",
    "error_id": "87",
    "information": {
        "errors": [
            {
                "line": "13",
                "column": "56",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/87/LineNumberer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/87/LineNumberer.java\nindex 346a3a0e781..80ed54c8713 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/87/LineNumberer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/intellij/87/LineNumberer.java\n@@ -17,6 +17,7 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\t 02111-1307\t USA\n  */\n+\n package edu.umd.cs.findbugs.gui;\n \n import java.awt.Color;\n@@ -29,8 +30,7 @@ import java.awt.Rectangle;\n import javax.swing.JComponent;\n import javax.swing.JTextArea;\n \n-public class LineNumberer extends JComponent\n-{\n+public class LineNumberer extends JComponent {\n     public static final int PAD = 10;\n     public static final String PROTOTYPE = \"00000\";\n \n@@ -38,50 +38,47 @@ public class LineNumberer extends JComponent\n     private FontMetrics fm;\n \n     public LineNumberer(JTextArea ta) {\n-        setFont( ta.getFont() );\n+        setFont(ta.getFont());\n         textArea = ta;\n-        setForeground( Color.BLUE );\n+        setForeground(Color.BLUE);\n \n         fm = this.getFontMetrics(ta.getFont());\n         setWidths();\n     }\n \n     @Override\n-    public void setFont(Font font)\n-    {\n+    public void setFont(Font font) {\n         //ignore\n     }\n \n     private void setWidths() {\n-        int width = fm.stringWidth( PROTOTYPE );\n+        int width = fm.stringWidth(PROTOTYPE);\n         Dimension d = getPreferredSize();\n         d.setSize(PAD + width, Integer.MAX_VALUE);\n-        setPreferredSize( d );\n-        setSize( d );\n+        setPreferredSize(d);\n+        setSize(d);\n     }\n \n \n     @Override\n-    public void paintComponent(Graphics g)\n-    {\n+    public void paintComponent(Graphics g) {\n         int lineHeight = fm.getHeight();\n         int startOffset = textArea.getInsets().top + fm.getAscent();\n \n         Rectangle clip = g.getClipBounds();\n \n-        g.setColor( getBackground() );\n+        g.setColor(getBackground());\n         g.fillRect(clip.x, clip.y, clip.width, clip.height);\n \n-        g.setColor( getForeground() );\n+        g.setColor(getForeground());\n         int beginLineNumber = (clip.y / lineHeight) + 1;\n         int endLineNumber = beginLineNumber + (clip.height / lineHeight);\n \n         int y = (clip.y / lineHeight) * lineHeight + startOffset;\n \n-        for (int i = beginLineNumber; i <= endLineNumber; i++)\n-        {\n+        for (int i = beginLineNumber; i <= endLineNumber; i++) {\n             String ln = String.valueOf(i);\n-            int width = fm.stringWidth( ln );\n+            int width = fm.stringWidth(ln);\n             int rowWidth = getSize().width;\n             g.drawString(ln, rowWidth - width - PAD, y);\n             y += lineHeight;\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/87/LineNumberer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/87/LineNumberer.java\nindex 346a3a0e781..b2ea6a3a670 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/87/LineNumberer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/naturalize/87/LineNumberer.java\n@@ -29,8 +29,7 @@ import java.awt.Rectangle;\n import javax.swing.JComponent;\n import javax.swing.JTextArea;\n \n-public class LineNumberer extends JComponent\n-{\n+public class LineNumberer extends JComponent {\n     public static final int PAD = 10;\n     public static final String PROTOTYPE = \"00000\";\n \n@@ -38,53 +37,49 @@ public class LineNumberer extends JComponent\n     private FontMetrics fm;\n \n     public LineNumberer(JTextArea ta) {\n-        setFont( ta.getFont() );\n+        setFont(ta.getFont());\n         textArea = ta;\n-        setForeground( Color.BLUE );\n+        setForeground(Color.BLUE);\n \n         fm = this.getFontMetrics(ta.getFont());\n         setWidths();\n     }\n \n     @Override\n-    public void setFont(Font font)\n-    {\n+    public void setFont(Font font) {\n         //ignore\n     }\n \n     private void setWidths() {\n-        int width = fm.stringWidth( PROTOTYPE );\n+        int width = fm.stringWidth(PROTOTYPE);\n         Dimension d = getPreferredSize();\n         d.setSize(PAD + width, Integer.MAX_VALUE);\n-        setPreferredSize( d );\n-        setSize( d );\n+        setPreferredSize(d);\n+        setSize(d);\n     }\n \n-\n-    @Override\n-    public void paintComponent(Graphics g)\n-    {\n+@Override\n+    public void paintComponent(Graphics g) {\n         int lineHeight = fm.getHeight();\n         int startOffset = textArea.getInsets().top + fm.getAscent();\n \n         Rectangle clip = g.getClipBounds();\n \n-        g.setColor( getBackground() );\n+        g.setColor(getBackground());\n         g.fillRect(clip.x, clip.y, clip.width, clip.height);\n \n-        g.setColor( getForeground() );\n+        g.setColor(getForeground());\n         int beginLineNumber = (clip.y / lineHeight) + 1;\n         int endLineNumber = beginLineNumber + (clip.height / lineHeight);\n \n         int y = (clip.y / lineHeight) * lineHeight + startOffset;\n \n-        for (int i = beginLineNumber; i <= endLineNumber; i++)\n-        {\n+        for (int i = beginLineNumber; i <= endLineNumber; i++) {\n             String ln = String.valueOf(i);\n-            int width = fm.stringWidth( ln );\n+            int width = fm.stringWidth(ln);\n             int rowWidth = getSize().width;\n             g.drawString(ln, rowWidth - width - PAD, y);\n             y += lineHeight;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/87/LineNumberer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/87/LineNumberer.java\nindex 346a3a0e781..aad5a4b674f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/errored/1/87/LineNumberer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/findbugsproject-findbugs/codebuff/87/LineNumberer.java\n@@ -10,12 +10,12 @@\n  *\n  * This library is distributed in the hope that it will be useful,\n  * but WITHOUT ANY WARRANTY; without even the implied warranty of\n- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\t See the GNU\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  * Lesser General Public License for more details.\n  *\n  * You should have received a copy of the GNU Lesser General Public\n  * License along with this library; if not, write to the Free Software\n- * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\t 02111-1307\t USA\n+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n  */\n package edu.umd.cs.findbugs.gui;\n \n@@ -25,66 +25,58 @@ import java.awt.Font;\n import java.awt.FontMetrics;\n import java.awt.Graphics;\n import java.awt.Rectangle;\n-\n import javax.swing.JComponent;\n import javax.swing.JTextArea;\n \n-public class LineNumberer extends JComponent\n-{\n+public class LineNumberer extends JComponent {\n     public static final int PAD = 10;\n+\n     public static final String PROTOTYPE = \"00000\";\n \n     private JTextArea textArea;\n+\n     private FontMetrics fm;\n \n+\n     public LineNumberer(JTextArea ta) {\n-        setFont( ta.getFont() );\n+        setFont(ta.getFont());\n         textArea = ta;\n-        setForeground( Color.BLUE );\n-\n+        setForeground(Color.BLUE);\n         fm = this.getFontMetrics(ta.getFont());\n         setWidths();\n     }\n \n     @Override\n-    public void setFont(Font font)\n-    {\n+    public void setFont(Font font) {\n         //ignore\n     }\n \n+\n     private void setWidths() {\n-        int width = fm.stringWidth( PROTOTYPE );\n+        int width = fm.stringWidth(PROTOTYPE);\n         Dimension d = getPreferredSize();\n         d.setSize(PAD + width, Integer.MAX_VALUE);\n-        setPreferredSize( d );\n-        setSize( d );\n+        setPreferredSize(d);\n+        setSize(d);\n     }\n \n-\n     @Override\n-    public void paintComponent(Graphics g)\n-    {\n+    public void paintComponent(Graphics g) {\n         int lineHeight = fm.getHeight();\n         int startOffset = textArea.getInsets().top + fm.getAscent();\n-\n         Rectangle clip = g.getClipBounds();\n-\n-        g.setColor( getBackground() );\n+        g.setColor(getBackground());\n         g.fillRect(clip.x, clip.y, clip.width, clip.height);\n-\n-        g.setColor( getForeground() );\n+        g.setColor(getForeground());\n         int beginLineNumber = (clip.y / lineHeight) + 1;\n         int endLineNumber = beginLineNumber + (clip.height / lineHeight);\n-\n         int y = (clip.y / lineHeight) * lineHeight + startOffset;\n-\n-        for (int i = beginLineNumber; i <= endLineNumber; i++)\n-        {\n+        for (int i = beginLineNumber; i <= endLineNumber; i++) {\n             String ln = String.valueOf(i);\n-            int width = fm.stringWidth( ln );\n+            int width = fm.stringWidth(ln);\n             int rowWidth = getSize().width;\n             g.drawString(ln, rowWidth - width - PAD, y);\n             y += lineHeight;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "13",
                    "column": "56",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}